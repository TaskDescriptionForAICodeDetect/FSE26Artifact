[
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point): Point = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point): Point = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double): Point = Point(this.x * a, this.y * a)\n\n    def /(a: Double): Point = {\n      assert(a != 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm(): Double = this.x * this.x + this.y * this.y\n\n    def abs(): Double = scala.math.sqrt(norm())\n\n    def <(p: Point): Boolean = this.x < p.x && this.y < p.y\n\n\n    def ==(p: Point): Boolean = scala.math.abs(this.x - p.x) < Cgl0A.EPS &&\n      scala.math.abs(this.y - p.y) < Cgl0A.EPS\n\n\n  }\n\n  case class Circle(center: Point, r: Int)\n\n  case class Segment(p1: Point, p2: Point)\n\n  case class Line(p1: Point, p2: Point)\n\n  type GeoVector = Point\n\n  object Cgl0A {\n    val EPS: Double = scala.math.pow(10, -10)\n\n    // 内積\n    def dot(a: Point, b: Point): Double = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1 - a2, b1 - b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point): Double = a.x * b.y - a.y * b.x\n\n    def isParallel(a: GeoVector, b: GeoVector): Boolean = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1 - a2, b1 - b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    def project(s: Segment, p: Point): Point = {\n      val base: GeoVector = s.p2 - s.p1\n      val r: Double = Cgl0A.dot(p - s.p1, base) / base.norm()\n      s.p1 + base * r\n    }\n\n    def reflect(s: Segment, p: Point): Point = {\n      p + (project(s, p) - p) * 2.0\n    }\n\n    def getDistance(a: Point, b: Point): Double = (a - b).abs()\n\n    def getDistanceLP(l: Line, a: Point): Double = {\n      scala.math.abs(cross(l.p2 - l.p1, a - l.p1) / (l.p2 - l.p1).abs())\n    }\n\n    def getDistanceSP(s: Segment, a: Point): Double = {\n      if (dot(s.p2 - s.p1, a - s.p1) < 0.0) (a - s.p1).abs()\n      else if (dot(s.p1 - s.p2, a - s.p2) < 0.0) (a - s.p2).abs()\n      else getDistanceLP(Line(s.p1, s.p2), a)\n    }\n\n    def getDistance(s1: Segment, s2: Segment): Double = {\n      if (intersect(s1, s2)) {\n        0.0\n      }\n      else {\n        math.min(math.min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n          math.min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)))\n      }\n    }\n\n    val COUNTER_CLOCKWISE: Int = 1\n    val CLOCKWISE: Int = -1\n    val ONLINE_BACK: Int = 2\n    val ONLINE_FRONT: Int = -2\n    val ON_SEGMENT: Int = 0\n\n    def ccw(p0: Point, p1: Point, p2: Point): Int = {\n      val a: GeoVector = p1 - p0\n      val b: GeoVector = p2 - p0\n\n      if (cross(a, b) > EPS) COUNTER_CLOCKWISE\n      else if (cross(a, b) < -1 * EPS) CLOCKWISE\n      else if (dot(a, b) < -1 * EPS) ONLINE_BACK\n      else if (a.norm() < b.norm()) ONLINE_FRONT\n      else ON_SEGMENT\n\n    }\n\n    def intersect(p1: Point, p2: Point, p3: Point, p4: Point): Boolean = {\n      Cgl0A.ccw(p1, p2, p3) * Cgl0A.ccw(p1, p2, p4) <= 0 &&\n        Cgl0A.ccw(p3, p4, p1) * Cgl0A.ccw(p3, p4, p2) <= 0\n    }\n\n    def intersect(s1: Segment, s2: Segment): Boolean = {\n      Cgl0A.intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n    }\n\n    def getCrossPoint(s1: Segment, s2: Segment): Point = {\n      val base: GeoVector = s2.p2 - s2.p1\n      val d1 = scala.math.abs(cross(base, s1.p1 - s2.p2))\n      val d2 = scala.math.abs(cross(base, s1.p2 - s2.p1))\n      val t = d1 / (d1 + d2)\n      s1.p1 + (s1.p2 - s1.p1) * t\n    }\n\n    def getCrossPoint(c: Circle, l: Line): Array[Point] = {\n      val pr: GeoVector = project(Segment(l.p1, l.p2), c.center)\n      val e: GeoVector = (l.p2 - l.p1) / (l.p2 - l.p1).abs()\n      val base: Double = scala.math.sqrt(c.r * c.r - (pr - c.center).norm())\n      Array(pr + e * base, pr - e * base).sortBy(p => (p.x, p.y))\n    }\n\n    // arq tangent\n    def arg(p: GeoVector): Double = scala.math.atan2(p.y, p.x)\n\n    // \n    def polar(a: Double, r: Double): GeoVector = {\n      // x * 角度ラジアン\n      Point(scala.math.cos(r) * a, scala.math.sin(r) * a)\n    }\n\n    def getCrossPoint(c1: Circle, c2: Circle): Array[Point] = {\n      val d: Double = (c1.center - c2.center).abs()\n      val cos: Double = (c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d)\n      val a: Double = scala.math.acos(cos) // radian\n      \n      val t: Double = arg(c2.center - c1.center) // radian\n      Array(c1.center + polar(c1.r, t + a),\n        c1.center + polar(c1.r, t - a)).sortBy(p => (p.x, p.y))\n\n    }\n\n    val IN: Int = 2\n    val ON: Int = 1\n    val OUT: Int = 0\n    \n    def contains(g: IndexedSeq[Point], target: Point): Int = {\n      val n = g.size\n      var i = 0\n      var onJudge = false\n      var parity = false\n      while(!onJudge && i < n){\n        var a: Point = g(i) - target\n        var b: Point = g((i+1)%n) - target\n        if(cross(a, b).abs < EPS && dot(a, b) < EPS){\n          onJudge = true\n        } else {\n          if(a.y > b.y){\n            val temp = a\n            a = b\n            b = temp\n          }\n          parity = if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) !parity else parity\n        }\n        i += 1\n      }\n      \n      if(onJudge) {\n        ON\n      } else {\n        if(parity) IN else OUT\n      }\n    }\n    \n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val n = StdIn.readLine().toInt\n    val polygon = (0 until n).map { _ =>\n      val point = StdIn.readLine().split(' ').map(_.toInt)\n      Point(point(0), point(1))\n    }\n\n    val q = StdIn.readLine().toInt\n    (0 until q).map { _ =>\n      val point = StdIn.readLine().split(' ').map(_.toInt)\n      val p = Point(point(0), point(1))\n      val r = Cgl0A.contains(polygon, p)\n      println(r)\n    }\n\n  }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+10000.0);\n        if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+10000.0)==0.0){\n            //if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n        }\n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n\n    \n    \n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            cout<<inside_and_outside_the_determination_of_the_polygon_and_point(n, p_xy, tx, ty)<<endl;\n\n\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <set>\n#include <map>\n#include <time.h>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y); }\n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){ return Point(a*x,a*y); }\n\tPoint operator / (double a){ return Point(x/a,y/a); }\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator<(const Point &p) const{\n\t\treturn x != p.x? x < p.x: y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nint num_point,Q;\n\ndouble norm(Vector a){\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\nPoint calc_minus(Point a,Point b){\n\tPoint ret;\n\n\tret.x = a.x-b.x;\n\tret.y = a.y-b.y;\n\n\treturn ret;\n}\n\n/*\n * IN 2\n * ON 1\n * OUT 0\n *\n */\nint contains(Polygon g,Point p){\n\tint n = g.size();\n\tbool x = false;\n\tfor(int i = 0; i < n; i++){\n\t\tPoint a = g[i]-p,b = g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n\t\tif(a.y > b.y)swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x = !x;\n\t}\n\treturn (x ? 2:0);\n}\n\nint main(){\n\n\tscanf(\"%d\",&num_point);\n\tPolygon g;\n\n\tdouble x,y;\n\tfor(int loop = 0; loop < num_point; loop++){\n\t\tscanf(\"%lf %lf\",&x,&y);\n\t\tg.push_back(Point(x,y));\n\t}\n\n\tscanf(\"%d\",&Q);\n\n\tfor(int loop = 0; loop < Q; loop++){\n\t\tscanf(\"%lf %lf\",&x,&y);\n\t\tprintf(\"%d\\n\",contains(g,Point(x,y)));\n\t}\n\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = uint32_t;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max() / 32 * 15 + 208;\n\n\nusing real = double;\n\nreal EPS = 1e-10;\nstruct Point {\n    real x, y;\n    Point& operator+=(const Point a) { x += a.x; y += a.y;  return *this; }\n    Point& operator-=(const Point a) { x -= a.x; y -= a.y;  return *this; }\n    Point& operator*=(const real k) { x *= k; y *= k;  return *this; }\n    Point& operator/=(const real k) { x /= k; y /= k;  return *this; }\n    Point operator+(const Point a) const {return Point(*this) += a; }\n    Point operator-(const Point a) const {return Point(*this) -= a; }\n    Point operator*(const real k) const {return Point(*this) *= k; }\n    Point operator/(const real k) const {return Point(*this) /= k; }\n    bool operator<(const Point &a) const { return (x != a.x ? x < a.x : y < a.y); }\n    explicit Point(real a = 0, real b = 0) : x(a), y(b) {};\n};\n\n\n\n\n\nistream& operator>> (istream& s, Point& P){\n    s >> P.x >> P.y;\n    return s;\n}\n\ninline real dot(Point a, Point b){ return a.x*b.x + a.y*b.y; }\ninline real cross(Point a, Point b){ return a.x*b.y - a.y*b.x; }\ninline real abs(Point a){ return sqrt(dot(a, a)); }\n\nstatic constexpr int COUNTER_CLOCKWISE = 1;\nstatic constexpr int CLOCKWISE = -1;\nstatic constexpr int ONLINE_BACK = 2;\nstatic constexpr int ONLINE_FRONT = -2;\nstatic constexpr int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(b, c) < -EPS) return CLOCKWISE;\n    if(dot(b, c) < 0) return ONLINE_BACK;\n    if(abs(b) < abs(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nstruct Segment {\n    Point a, b;\n    Segment(Point x, Point y) : a(x), b(y) {};\n};\n\nbool intersect(Segment s, Segment t){\n    return (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n            ccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\ndouble distance(Segment s, Point c){\n    if(dot(s.b-s.a, c-s.a) < EPS) return abs(c-s.a);\n    if(dot(s.a-s.b, c-s.b) < EPS) return abs(c-s.b);\n    return abs(cross(s.b-s.a, c-s.a)) / abs(s.a-s.b);\n}\n\ndouble distance(Segment s, Segment t){\n    if(intersect(s, t)) return 0.0;\n    return min({distance(s, t.a), distance(s, t.b),\n                distance(t, s.a), distance(t, s.b)});\n}\n\n\n\nPoint crossPoint(Segment s, Segment t){\n    real d1 = abs(cross(s.b-s.a, t.b-t.a));\n    real d2 = abs(cross(s.b-s.a, s.b-t.a));\n    if(d1 < EPS && d2 < EPS) return t.a;\n    return t.a+(t.b-t.a)*d2/d1;\n}\n\nPoint project(Segment s, Point p){\n    Point Q = s.b-s.a;\n    return s.a + Q*(dot(p-s.a, Q) / dot(Q, Q));\n}\n\nPoint refrect(Segment s, Point p){\n    Point Q = project(s, p);\n    return Q*2-p;\n}\n\nbool isOrthogonal(Segment s, Segment t){\n    return fabs(dot(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nbool isparallel(Segment s, Segment t){\n    return fabs(cross(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nusing Polygon = vector<Point>;\n\nreal area(Polygon &v){\n    if(v.size() < 3) return 0.0;\n    real ans = 0.0;\n    for (int i = 0; i+1 < v.size(); ++i) {\n        ans += cross(v[i], v[i+1]);\n    }\n    ans += cross(v.back(), v.front());\n    return ans/2;\n}\n\nPolygon convex_hull(Polygon v){\n    int n = v.size();\n    sort(v.begin(),v.end());\n    int k = 0;\n    Polygon ret(n*2);\n    for (int i = 0; i < n; ++i) {\n        while(k > 1 && cross(ret[k-1]-ret[k-2], v[k]-ret[k-1]) < 0) k--;\n        ret[k++] = v[i];\n    }\n    for(int i = n-2, t=k; i >= 0; i--){\n        while(k > t && cross(ret[k-1]-ret[k-2], v[i]-ret[k-1]) < 0) k--;\n        ret[k++] = v[i];\n    }\n    ret.resize(k-1);\n    return ret;\n}\n\nbool isconvex(Polygon &P){\n    int n = P.size();\n    for (int i = 0; i < n; ++i) {\n        if(ccw(P[(i+n-1)%n], P[i], P[(i+1)%n]) == CLOCKWISE) return false;\n    }\n    return true;\n}\n\n// in = 2, on = 1, out = 0;\nint contains(Polygon &g, Point p){\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i]-p, b = g[(i+1)%n]-p;\n        if(fabs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if(a.y > b.y) swap(a, b);\n        if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return (x?2:0);\n}\n\nint main() {\n    int n; cin >> n;\n    Polygon G(n);\n    for(auto && i : G) cin >> i;\n    int q; cin >> q;\n    for (int i = 0; i < q; ++i) {\n        Point x; cin >> x;\n        cout << contains(G, x) << \"\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\n#include <vector>\nusing namespace std;\n\ntypedef complex<double> Point, Vector;\ntypedef pair<Point, Point> Segment, Line;\ntypedef vector<Point> Polygon;\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ndouble dot(Vector a, Vector b){\n    return a.X * b.X + a.Y * b.Y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.X * b.Y - a.Y * b.X;\n}\n\ndouble norm(Vector a){\n    return a.X * a.X + a.Y * a.Y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i=0; i<n; i++){\n        Point a = g[i] - p;\n        Point b = g[(i + 1) % n] - p;\n        if(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if(a.Y > b.Y) swap(a, b);\n        if(a.Y < EPS && EPS < b.Y && cross(a, b) > EPS) x = !x;\n    }\n\n    return (x ? 2 : 0);\n}\n\nint main(){\n    int g; cin>>g;\n    Polygon poly;\n    for(int i=0; i<g; i++){\n        double a, b; cin>>a>>b;\n        poly.emplace_back(a, b);\n    }\n\n    int n; cin>>n;\n    for(int i=0; i<n; i++){\n        double a, b; cin>>a>>b;\n        Point p1 = {a, b};\n\n        cout << contains(poly, p1) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nvector<Point> convex_hull(vector<Point> ps) {   \n\tint n = ps.size();\n\tsort(ps.begin(),ps.end());\n\n\tint k = 0;\n\tvector<Point> convex(n*2);\n\n\trep(i, n) {\n\t\twhile (k > 1 && ccw(convex[k-2], convex[k-1], ps[i]) == -1 ) {\n\t\t\tk--;\n\t\t}\n\t\tconvex[ k++ ] = ps[i];\n\t}\n\n\tfor(int i = n - 2, t = k; i >= 0; i--) {\n\t\twhile (k > t && ccw(convex[k-2], convex[k-1], ps[i]) == -1 ) {\n\t\t\tk--;\n\t\t}\n\t\tconvex[ k++ ] = ps[i];\n\t}\n\n\tconvex.resize(k-1);\n\treturn convex;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\n\tvector<Point> v(n);\n\trep(i, n) cin >> v[i].x >> v[i].y;\n\n\tvector<Point> ret = convex_hull(v);\n\n\tcout << ret.size() << endl;\n\trep(i, ret.size()) {\n\t\tcout << ret[i].x << \" \" << ret[i].y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\n\nint dcmp(double x) {\n        if(fabs(x) < eps) return 0;\n        return x < 0 ? -1 : 1;\n}\n\nbool same(double a, double b) {return dcmp(a - b) == 0;}\n#define Vector P\nstruct P {\n        double x, y;\n        P(double x = 0, double y = 0): x(x), y(y) {}\n        P operator + (P b) {return P(x + b.x, y + b.y);}\n        P operator - (P b) {return P(x - b.x, y - b.y);}\n        P operator * (double b) {return P(x * b, y * b);}\n        P operator / (double b) {return P(x / b, y / b);}\n        double operator * (P b) {return x * b.x + y * b.y;} // Dot\n        double operator ^ (P b) {return x * b.y - y * b.x;} // Cross\n        double abs() {return hypot(x, y);}\n        P unit() {return *this / abs();}\n        P spin(double o) {\n                double c = cos(o), s = sin(o);\n                return P(c * x - s * y, s * x + c * y);\n        }\n};\n\nstruct Line {\n        //ax + by + c = 0\n        double a, b, c, theta;\n        P pa, pb;\n        Line(): a(0), b(0), c(0), theta(0), pa(), pb() {}\n        Line(P pa, P pb): a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), theta(atan2(-a, b)), pa(pa), pb(pb) {}        P projection(P p) {return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs());}                P reflection(P p) {return p + (projection(p) - p) * 2;}\n        double get_ratio(P p) {return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs());}\n        P dis(P p) {return ((pb - pa) ^ (p - pa)) / (pb - pa).abs();} // directed distance\n};\nbool onsegment(P p, P a, P b) {\n        return dcmp((a - p) ^ (b - p)) == 0 && dcmp((a - p) * (b - p)) <= 0;\n}\n\nstruct Circle {\n        P c;\n        double r;\n        Circle(P c, double r = 0): c(c), r(r) {}\n};\nint point_in_polygon(vector<P> ps, P p) {\n        int cnt = 0;\n        int wn = 0;\n        for(int i = 0; i < (int)ps.size(); i++) {\n                int ii = (i + 1) % (int)ps.size();\n                if(onsegment(p, ps[i], ps[ii])) return -1;\n                int k = dcmp((ps[ii] - ps[i]) ^ (p - ps[i]));\n                int d1 = dcmp(ps[i].y - p.y);\n                int d2 = dcmp(ps[ii].y - p.y);\n                if(k > 0 && d1 <= 0 && d2 > 0) wn++;\n                if(k < 0 && d2 <= 0 && d1 > 0) wn--;\n        }\n        if(wn != 0) return 1; // inside\n        return 0; // outside\n}\nint main() {\n        ios_base::sync_with_stdio(false); cin.tie(0);\n        int n; cin >> n;\n        vector<P> ps;\n        for(int i = 0; i < n; i++) {\n                P p; cin >> p.x >> p.y;\n                ps.push_back(p);\n        }\n        int q; cin >> q;\n        while(q--) {\n                P p; cin >> p.x >> p.y;\n                int res = point_in_polygon(ps, p);\n                if(res == -1) cout << 1 << '\\n';\n                else if(res == 1) cout << 2 << '\\n';\n                else cout << 0 << '\\n';\n        }\n        return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(const Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(const Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(const double k){\n    return Point(x*k, y*k);\n  }\n\n  Point &operator=(const Point &p){\n    x = p.x;\n    y = p.y;\n    return *this;\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Point a, Point b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Point a, Point b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Point a, Point b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Point a, Point b){\n    return equals(cross(a, b), 0.0);\n  }\n\n  static void swap(Point* a, Point* b){\n    Point temp = *b;\n    *b = *a;\n    *a = temp;\n  }\n};\n\n/*\n//ベクトルを点の別表記でも表せるようにしておく\n//いらない説濃厚(Pointのtypedefで済ませそう)\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n*/\n\ntypedef Point Vector;//Vectorをtypedefしておく\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\nclass Polygon{\npublic:\n  Point* ver;\n  int size;\n  Polygon(int size){\n    this->size = size;\n    ver = new Point[size];\n  }\n  ~Polygon(){\n    delete[] ver;\n  }\n\n  double area(){\n    double ans=0.0;\n\n    Vector a, b;\n    for(int i=0; i<size; i++){\n      a=ver[i%size]; b=ver[(i+1)%size];\n      ans += Vector::cross(a, b)/2;\n    }\n\n    return ans;\n  }\n\n  /*\n    ・含まれる時:2\n    ・辺上に点が存在する時:1\n    ・それ以外の場合:0\n    を返す\n  */\n  int contain(Point p){\n    bool flag = false;\n\n    int ans;\n    for(int i=0; i<size; i++){\n      Vector a = ver[i%size]-p, b = ver[(i+1)%size]-p;\n      //外積=0かつ内積<0の時辺上に点があると判定できる\n      if(fabs(Vector::cross(a, b))<EPS && Vector::dot(a, b)<EPS){\n        ans = 1;\n        return ans;\n      }\n      if(a.y > b.y)Vector::swap(&a, &b);\n      //端点をうまく処理するために以下の条件分岐ではEPSの使い方に注意\n      if(a.y < EPS && b.y > EPS && Vector::cross(a, b)>EPS) flag = !flag;\n    }\n\n    ans = flag ? 2 : 0;\n    return ans;\n  }\n};\n\nclass Tryangle : public Polygon{\npublic:\n  Tryangle(Point p1, Point p2, Point p3) : Polygon(3){\n    ver[0] = p1;\n    ver[1] = p2;\n    ver[3] = p3;\n  }\n  double area(){\n    Vector a = ver[1]-ver[0], b = ver[2]-ver[0];\n    return fabs(Vector::cross(a, b))/2.0;\n  }\n};\n\nstring ccw_str(Point p0, Point p1, Point p2){\n  //enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint ccw_int(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=-1, CLOCKWISE=1, ONLINE_BACK=2, ONLINE_FRONT=-2, ON_SEGMENT=0};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(Vector::cross(a, b) < -EPS) return CLOCKWISE;\n  if(Vector::dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2-s.p1;\n  double r = Vector::dot(p - s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nPoint reflect(Segment s, Point p){\n  Point pro = project(s, p);\n  return p + (pro-p)*2.0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return ccw_int(p1, p2, p3)*ccw_int(p1, p2, p4)<=0 && ccw_int(p3, p4, p1)*ccw_int(p3, p4, p2)<=0;\n}\n\nbool intersect(Segment s1, Segment s2){\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4){\n  Vector base = p2-p1;\n  double d1 = fabs(Vector::cross(base, p4-p1))/fabs(base.abs());\n  double d2 = fabs(Vector::cross(base, p3-p1))/fabs(base.abs());\n  double t = d1/(d1+d2);\n  Point x = p4 + (p3-p4)*t;\n  return x;\n}\n\ndouble getDistance(Point p1, Point p2){\n  Vector base=p2-p1;\n  return base.abs();\n}\n\ndouble getDistance(Point p, Segment s){\n  double dot1, dot2;\n  Vector base = s.p2-s.p1;\n  dot1 = Vector::dot(base, p-s.p1);\n  dot2 = Vector::dot(base*(-1.0), p-s.p2);\n\n  double ans;\n  if(dot1<-EPS) ans = getDistance(s.p1, p);\n  else if(dot2<-EPS) ans = getDistance(s.p2, p);\n  else ans = fabs(Vector::cross(p-s.p1, base))/base.abs();\n\n  return ans;\n}\n\ndouble getDistance(Segment s1, Segment s2){\n  double ans;\n  if(intersect(s1, s2)) ans = 0.0;\n  else {\n    ans = min(min(getDistance(s1.p1, s2), getDistance(s1.p2, s2)),\n                  min(getDistance(s2.p1, s1), getDistance(s2.p2, s1)));\n  }\n  return ans;\n}\n\nint main(){\n  int n; cin >> n;\n  Polygon p(n);\n\n  double x, y;\n  for(int i=0; i<n; i++){\n    cin >> x >> y;\n    p.ver[i] = Point(x, y);\n  }\n\n  int q; cin >> q;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    cout << p.contain(Point(x, y)) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nnamespace Random_Number{\n\tunsigned int seed = 19260817;\n\tvoid srnd(unsigned int x){ seed = x; }\n\tunsigned int rnd(){\n\t\treturn seed ^= seed << 19, seed ^= seed >> 7, seed ^= seed << 1;\n\t}\n}\nusing namespace Random_Number;\nnamespace Geometry{\n\tconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = 2, ONLINE_BACK = 3, ONLINE_FRONT = 4, ON_SEGMENT = 5;\n\tconst double eps = 1e-9, pi = 3.14159265358979323846;\n\tbool equal(double a, double b){ return fabs(a - b) < eps; }\n\tstruct point{\n\t\tdouble x, y;\n\t\tpoint(){}\n\t\tpoint(double _x, double _y){ x = _x, y = _y; }\n\t\tpoint operator * (const double &la) const { return point(x * la, y * la); }\n\t\tpoint operator / (const double &la) const { return point(x / la, y / la); }\n\t\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\t\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n\t\tbool operator < (const point &rhs) const { return x < rhs.x || (x == rhs.x && y < rhs.y); }\n\t\tbool operator > (const point &rhs) const { return x > rhs.x || (x == rhs.x && y > rhs.y); }\n\t\tbool operator == (const point &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n\t\tdouble len2() const { return x * x + y * y; }\n\t\tdouble len() const { return sqrt(len2()); }\n\t\tpoint unit() const { return *this / len(); }\n\t\tpoint unit2() const { return *this / len2(); }\n\t\tfriend double distance(const point &a, const point &b){ return (a - b).len(); }\n\t\tfriend double distance2(const point &a, const point &b){ return (a - b).len2(); }\n\t\tfriend double dot(const point &a, const point &b){ return a.x * b.x + a.y * b.y; }\n\t\tfriend double cross(const point &a, const point &b){ return a.x * b.y - a.y * b.x; }\n\t\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\t\tpoint rotation(double th) const { return point(x * cos(th) - y * sin(th), y * cos(th) + x * sin(th)); }\n\t\tfriend double angle(const point &a, const point &b){ return atan2(cross(a, b), dot(a, b)); }\n\t};\n\tstruct line{\n\t\tpoint a, b;\n\t\tline(){}\n\t\tline(point _a, point _b){ a = _a, b = _b; }\n\t\tvoid read(){ a.read(), b.read(); }\n\t\tvoid print(char ch1 = ' ', char ch2 = '\\n') const { a.print(ch1), b.print(ch2); }\n\t\tpoint projection(const point &p) const { return a + (b - a).unit2() * dot(p - a, b - a); }\n\t\tpoint reflection(const point &p) const { return projection(p) * 2 - p; }\n\t\tint direction(const point &p) const {\n\t\t\tdouble t = cross(b - a, p - a);\n\t\t\tif (t >= eps) return 1;\n\t\t\tif (t <= -eps) return 2;\n\t\t\tdouble l1 = dot(p - a, b - a), l2 = dot(b - a, b - a);\n\t\t\tif (l1 <= -eps) return 3;\n\t\t\tif (l1 > l2) return 4;\n\t\t\treturn 5;\n\t\t}\n\t\tfriend bool parallel(const line &a, const line &b){ return equal(cross(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend bool orthogonal(const line &a, const line &b){ return equal(dot(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend std :: vector<point> line_cross_point(const line &a, const line &b){\n\t\t\tif (parallel(a, b)) return {};\n\t\t\tpoint u = a.a - b.a, v = a.b - a.a, w = b.b - b.a;\n\t\t\treturn {a.a + v * (cross(w, u) / cross(v, w))};\n\t\t}\n\t\tfriend bool segment_intersection(const line &a, const line &b){\n\t\t\tif (std :: min(a.a.x, a.b.x) >= std :: max(b.a.x, b.b.x) + eps) return 0;\n\t\t\tif (std :: min(b.a.x, b.b.x) >= std :: max(a.a.x, a.b.x) + eps) return 0;\n\t\t\tif (std :: min(a.a.y, a.b.y) >= std :: max(b.a.y, b.b.y) + eps) return 0;\n\t\t\tif (std :: min(b.a.y, b.b.y) >= std :: max(a.a.y, a.b.y) + eps) return 0;\n\t\t\tdouble t1, t2;\n\t\t\tt1 = cross(b.a - a.a, a.b - a.a), t2 = cross(b.b - a.a, a.b - a.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\tt1 = cross(a.a - b.a, b.b - b.a), t2 = cross(a.b - b.a, b.b - b.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tfriend double distance_ps(const point &p, const line &l){\n\t\t\tdouble l1 = dot(p - l.a, l.b - l.a), l2 = dot(l.b - l.a, l.b - l.a);\n\t\t\tif (l1 > l2) return distance(p, l.b);\n\t\t\tif (l1 < 0) return distance(p, l.a);\n\t\t\treturn fabs(cross(l.b - l.a, p - l.a)) / distance(l.a, l.b);\n\t\t}\n\t\tfriend double distance_ss(const line &a, const line &b){\n\t\t\tif (segment_intersection(a, b)) return 0;\n\t\t\treturn std :: min(std :: min(distance_ps(a.a, b), distance_ps(a.b, b)), \n\t\t\tstd :: min(distance_ps(b.a, a), distance_ps(b.b, a)));\n\t\t}\n\t};\n\tstruct polygon{\n\t\tstd :: vector<point> g;\n\t\tpolygon(){}\n\t\tpolygon(int n){ g.resize(n); }\n\t\tpolygon(const std :: vector<point> &_g){ g = _g; }\n\t\tvoid read(){\n\t\t\tint n;\n\t\t\tscanf(\"%d\", &n), g.resize(n);\n\t\t\tfor (register int i = 0; i < n; ++i) g[i].read();\n\t\t}\n\t\tvoid clear(){ g.clear(); }\n\t\tvoid resize(int n){ g.resize(n); }\n\t\tint size() const { return g.size(); }\n\t\tvoid push_back(point x){ return g.push_back(x); }\n\t\tvoid pop_back(){ g.pop_back(); }\n\t\tpoint& operator [] (int x){ return g[x]; }\n\t\tconst point& operator [] (int x) const { return g[x]; }\n\t\tdouble directed_area() const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i) s += cross(g[i], g[(i + 1) % n]);\n\t\t\treturn s / 2;\n\t\t}\n\t\tbool is_convex() const {\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\tif (cross(g[(i + 1) % n] - g[i], g[(i - 1 + n) % n] - g[i]) <= -eps) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint point_containment(const point &a) const {\n\t\t\tdouble k = sqrt(1.0 * rnd() / rnd());\n\t\t\tline l = line(a, point(a.x + 1e9, a.y + 1e9 * k));\n\t\t\tint n = g.size(), s = 0;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (line(g[i], g[i + 1]).direction(a) == 5) return 1;\n\t\t\tif (line(g[n - 1], g[0]).direction(a) == 5) return 1;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (segment_intersection(l, line(g[i], g[i + 1]))) ++s;\n\t\t\tif (segment_intersection(l, line(g[n - 1], g[0]))) ++s;\n\t\t\tif (s & 1) return 2; else return 0;\n\t\t}\n\t\tvoid convex_hull(std :: vector<point> f){\n\t\t\tg.clear();\n\t\t\tint n = f.size();\n\t\t\tstd :: sort(f.begin(), f.end());\n\t\t\tstd :: vector<point> p;\n\t\t\tp.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tstd :: reverse(f.begin(), f.end());\n\t\t\tp.clear(), p.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tf = g, n = f.size(), g.clear();\n\t\t\tint t = 0;\n\t\t\tfor (register int i = 1; i < n; ++i)\n\t\t\t\tif (f[i].y < f[t].y || (f[i].y == f[t].y && f[i].x < f[t].x)) t = i;\n\t\t\tfor (register int i = t; i < n; ++i) g.push_back(f[i]);\n\t\t\tfor (register int i = 0; i < t; ++i) g.push_back(f[i]);\n\t\t}\n\t\tdouble convex_diamater() const {\n\t\t\tint n = g.size();\n\t\t\tdouble ans = 0;\n\t\t\tfor (register int i = 0, j = 0; i < n; ++i){\n\t\t\t\twhile (cross(g[i] - g[j], g[(i + 1) % n] - g[j])\n\t\t\t\t  < cross(g[i] - g[(j + 1) % n], g[(i + 1) % n] - g[(j + 1) % n]) + eps)\n\t\t\t\t\tj = (j + 1) % n;\n\t\t\t\tans = std :: max(ans, distance(g[j], g[i]));\n\t\t\t\tans = std :: max(ans, distance(g[j], g[(i + 1) % n]));\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t};\n\tstruct circle{\n\t\tpoint o;\n\t\tdouble r;\n\t\tcircle(){}\n\t\tcircle(point _o, double _r){ o = _o, r = _r; }\n\t\tvoid read(){ o.read(), scanf(\"%lf\", &r); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf %.10lf\", o.x, o.y, r), putchar(ch); }\n\t\tint circle_intersection(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d >= r + c.r + eps) return 4;\n\t\t\tif (equal(d, r + c.r)) return 3;\n\t\t\tif (d >= fabs(r - c.r) + eps) return 2;\n\t\t\tif (equal(d, fabs(r - c.r))) return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tstd :: vector<point> directed_line_cross_point(const line &l) const {\n\t\t\tpoint p = line(l.a, l.b).projection(o), v = (l.b - l.a).unit();\n\t\t\tdouble d = distance(p, o);\n\t\t\tif (d >= r + eps) return {};\n\t\t\tdouble t = sqrt(r * r - (p - o).len2());\n\t\t\tif (equal(t, 0)) return {p};\n\t\t\telse return {p - v * t, p + v * t};\n\t\t}\n\t\tstd :: vector<point> circle_cross_point(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d <= fabs(r - c.r) - eps || d >= r + c.r + eps) return {};\n\t\t\tdouble x = (r * r - c.r * c.r + d * d) / (d * 2), h = sqrt(r * r - x * x);\n\t\t\tpoint p = (c.o - o).unit() * x, v = (c.o - o).unit().rotation(pi / 2) * h;\n\t\t\tif (v == point(0, 0)) return {p}; else return {p - v, p + v};\n\t\t}\n\t\tstd :: vector<point> tangent(const point &p) const {\n\t\t\tdouble d = distance(o, p);\n\t\t\tif (d <= r - eps) return {};\n\t\t\tif (equal(d, r)) return {p};\n\t\t\treturn circle_cross_point(circle(p, sqrt(d * d - r * r)));\n\t\t}\n\t\tstd :: vector<point> common_tangent_out(const circle &c) const {\n\t\t\tif (equal(r, c.r)){\n\t\t\t\tpoint p = (c.o - o).unit().rotation(pi / 2) * r;\n\t\t\t\treturn {o - p, o + p};\n\t\t\t}\n\t\t\tpoint p = (o * c.r - c.o * r) / (c.r - r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tstd :: vector<point> common_intangent_in(const circle &c) const {\n\t\t\tpoint p = (o * c.r + c.o * r) / (r + c.r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tdouble directed_triangle_intersection(const point &a, const point &b) const {\n\t\t\tbool ta = a.x * a.x + a.y * a.y < r * r + eps, tb = b.x * b.x + b.y * b.y < r * r + eps;\n\t\t\tstd :: vector<point> t = circle(point(0, 0), r).directed_line_cross_point(line(b, a));\n\t\t\tif (ta == 1 && tb == 1) return cross(a, b) / 2;\n\t\t\tif (ta == 1 && tb == 0) return angle(t.front(), b) * r * r / 2 + cross(a, t.front()) / 2;\n\t\t\tif (ta == 0 && tb == 1) return angle(a, t.back()) * r * r / 2 + cross(t.back(), b) / 2;\n\t\t\tdouble s = angle(a, b) * r * r / 2;\n\t\t\tif (distance_ps(point(0, 0), line(a, b)) > r - eps) return s;\n\t\t\treturn s + angle(t.front(), t.back()) * r * r / 2 - cross(t.front(), t.back()) / 2;\n\t\t}\n\t\tdouble directed_polygon_intersection(const polygon &g) const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\ts += directed_triangle_intersection(g[i] - o, g[(i + 1) % n] - o);\n\t\t\treturn s;\n\t\t}\n\t};\n}\nusing namespace Geometry;\npoint p, t;\nline l, m;\npolygon g;\ncircle c;\nint n, q;\ndouble r;\nvoid CGL_1_A(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.projection(p).print();\n}\nvoid CGL_1_B(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.reflection(p).print();\n}\nvoid CGL_1_C(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tint t = l.direction(p);\n\t\tif (t == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (t == CLOCKWISE) puts(\"CLOCKWISE\");\n\t\tif (t == ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\tif (t == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t\tif (t == ON_SEGMENT) puts(\"ON_SEGMENT\");\n\t}\n}\nvoid CGL_2_A(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (parallel(l, m)) puts(\"2\");\n\t\telse if (orthogonal(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_2_B(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (segment_intersection(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_2_C(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tline_cross_point(l, m)[0].print();\n\t}\n}\nvoid CGL_2_D(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tprintf(\"%.10lf\\n\", distance_ss(l, m));\n\t}\n}\nvoid CGL_3_A(){\n\tg.read(), printf(\"%.1lf\\n\", g.directed_area());\n}\nvoid CGL_3_B(){\n\tg.read(), printf(\"%d\\n\", g.is_convex());\n}\nvoid CGL_3_C(){\n\tg.read();\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tprintf(\"%d\\n\", g.point_containment(p));\n\t}\n}\nvoid CGL_7_H(){\n\tint n;\n\tdouble r;\n\tscanf(\"%d%lf\", &n, &r);\n\tpolygon g(n);\n\tfor (register int i = 0; i < n; ++i) g[i].read();\n\tprintf(\"%.10lf\\n\", fabs(circle(point(0, 0), r).directed_polygon_intersection(g)));\n}\nint main(){\n\tCGL_3_C();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>=M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            bool flag=true;\n            for(int j=0; j<n; j++){\n                double angle = angle_of_the_two_edges(p_xy[j%n][0], p_xy[j%n][1],tx,ty,p_xy[(j+1)%n][0], p_xy[(j+1)%n][1]);\n                //cout<<angle<<endl;\n                if(angle==M_PI){\n                    cout<<1<<endl;\n                    flag=false;\n                    break;\n                }\n                \n                if(angle<M_PI){\n                    cout<<0<<endl;\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag)cout<<2<<endl;\n        }\n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n/*\n * cross product\n */\n\nconst double EPS = 1e-8;\n\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\ndouble dot(pt a, pt b){\n    return b.x*a.x + b.y*a.y;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\n\n/*\n * segment segment intersection\n */\n\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n\nbool collinear(seg a, seg b) { // all four points collinear\n    cout << a.a.x << \" \" << a.a.y << endl;\n    cout << a.b.x << \" \" << a.b.y << endl;\n    \n    cout << b.a.x << \" \" << b.a.y << endl;\n    cout << b.b.x << \" \" << a.b.y << endl;\n\n    return zero(cross(a.b - a.a, b.a - a.a)) &&\n           zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nint intersect(seg a, seg b) {\n    if (ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n        ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b)) return 1;\n\n    return 0;\n }\n\nint inPolygon(vector<pt> polygon, pt from){\n    int sum = 0;\n    for (int j = 0; j < polygon.size(); ++j){\n        int next = (j+1)%polygon.size();\n\n        pt inf = make_pair(9999, from.y);\n        seg line_inf = make_pair(from, inf);\n        seg line_to = make_pair(polygon[j], polygon[next]);\n\n        pt a = polygon[j] - from; pt b = polygon[next] - from;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) {\n            return 1;\n        }\n        sum += intersect(line_inf, line_to);\n    }\n    if (sum % 2) return 2;\n    return 0;\n}\n\nint main(){\n\n    vector<pt> polygon;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i){\n        int x, y;\n        cin >> x >> y;\n        polygon.push_back(make_pair(x, y));\n    }\n    cin >> n;\n    for (int i = 0; i < n; ++i){\n        int p, q;\n        cin >> p >> q;\n        cout << inPolygon(polygon, make_pair(p, q)) << endl;\n\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tint type = 2;\n\t\tfor (int k = 0; k < n; k++)\n\t\t{\n\t\t\tOwnVector2 v1, v2;\n\t\t\tv1 = vertices[k] - p;\n\t\t\tv2 = vertices[(k + 1) % n] - p;\n\t\t\tdouble cross = v1.cross(v2);\n\t\t\tdouble dot = v1.dot(v2);\n\t\t\tif ((v1.length2()<=0.00000000000001||v2.length2()<=0.00000000001)||(abs(cross) <= 0.000000000000001&&dot<0))\n\t\t\t{\n\t\t\t\ttype = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (cross < 0)\n\t\t\t{\n\t\t\t\ttype = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\", type);\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <algorithm>\n#include <vector>\n\n#define x first\n#define y second\nconst double EPS = 1e-9;\n\nusing namespace std;\n\nint n;\n\nusing pt = pair<int,int>;\nusing seg = pair<pt, pt>;\nvector<pt> polygon;\n\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\n\n#define a first\n#define b second\n\n\n\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nbool intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n\t  \treturn 0;\n    // double maxDist = 0;\n    // maxDist = max(maxDist, dist(a.a, a.b));\n    // maxDist = max(maxDist, dist(a.a, b.a));\n    // maxDist = max(maxDist, dist(a.a, b.b));\n    // maxDist = max(maxDist, dist(a.b, b.a));\n    // maxDist = max(maxDist, dist(a.b, b.b));\n    // maxDist = max(maxDist, dist(b.a, b.b));\n\n    // return maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS;\n  }\n  return ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b);\n }\n\nbool onSegment(pt p, seg s)\n{\n\treturn cross(p - s.a, p - s.b) == 0 && \n\t\t\tmin(s.a.x, s.b.x) <= p.x && p.x <= max(s.a.x, s.b.x) &&\n\t\t\tmin(s.a.y, s.b.y) <= p.y && p.y <= max(s.a.y, s.b.y);\n}\n\n\n\n\nint solve(pt p)\n{\n\tpt infinite{20000, p.y};\n\tseg extreme{p, infinite};\n\t\n\tint count = 0;\n\t\n\tfor(int i = 0; i < n; ++i)\n\t{\n\t\tpt a = polygon[i];\n\t\tpt b = polygon[(i + 1) % n];\n\t\tif(onSegment(p, {a, b})) return 1;\n\t\tif(intersect(extreme, {a,b})) count++;\n\t}\n\t\t\n\treturn count % 2 == 0 ? 0 : 2;\n}\n\n\n\n\n\n\nint main(void)\n{\n\tios::sync_with_stdio(false);\n\n\tcin >> n;\n\n\tfor(int i = 0; i < n; ++i)\n\t{\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tpolygon.emplace_back(a, b);\n\t}\n\tint q;\n\tcin >> q;\n\twhile(q--)\n\t{\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tcout << solve({a, b}) << '\\n';\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<(int)b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\ntypedef vector<P> Polygon;\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\n\n#define prev(G, i) ( G[(i-1 + G.size()) % G.size()] )\n#define curr(G, i) ( G[i] )\n#define next(G, i) ( G[(i+1) % G.size()] )\n\n// contain: 2, on segment: 1, the other case: 0\nint contains(Polygon const& G, P const& p) {\n  bool x = false;\n  for(int i=0; i<(int)G.size(); i++) {\n    P v1 = curr(G, i)-p, v2 = next(G, i) - p;\n    if( v1.imag() > v2.imag() ) swap(v1, v2);\n    if( v1.imag() <= 0 && 0 < v2.imag() && cross(v1, v2) > 0 ) x = !x;\n    if( cross(v1, v2) == 0 && dot(v1, v2) <= 0 ) return 1;\n  }\n  return (x?2:0);\n}\n\nint main() {\n  \n  int N; cin >> N;\n  Polygon G;\n  rep(i, N) {\n    double x, y; cin >> x >> y;\n    G.push_back(P(x, y));\n  }\n  int Q; cin >> Q;\n  rep(i, Q) {\n    P p; cin >> p.real() >> p.imag();\n    cout << contains(G, p) << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\nusing namespace std;\nint main(){\n\tPolygon g;\n\tPoint p ,t;\n\tint n, q;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\tg.push_back(t);\n\t}\n\tcin>>q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin>>p.x>>p.y;\n\t\tcout<<contains(g, p)<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = a.X;\n\tfor (PT p : po)\n\t\tmx = max(mx, p.X);\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tcout << setprecision(1) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstddef>\n#include <iostream>\n#include <vector>\n\nconst double kEpsilon = 1e-10;\ninline bool equals(double a, double b)\n{\n    return fabs(a - b) < kEpsilon;\n}\n\nclass Point\n{\n  public:\n    double x, y;\n\n    Point() = default;\n    Point(double x, double y) : x(x), y(y)\n    {\n    }\n\n    Point operator+(const Point &p)\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point &p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)\n    {\n        return Point(x * k, y * k);\n    }\n\n    double SquaredNorm()\n    {\n        return x * x + y * y;\n    }\n    double abs()\n    {\n        return sqrt(this->SquaredNorm());\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return fabs(x - p.x) < kEpsilon && fabs(y - p.y) < kEpsilon;\n    }\n\n    double dot(const Point &p) const\n    {\n        return x * p.x + y * p.y;\n    }\n    double cross(const Point &p) const\n    {\n        return x * p.y - y * p.x;\n    }\n};\n\ndouble dot(const Point &p1, const Point &p2)\n{\n    return p1.x * p2.x + p1.y * p2.y;\n}\ndouble cross(const Point &p1, const Point &p2)\n{\n    return p1.x * p2.y - p1.y * p2.x;\n}\n\nusing Vector = Point;\n\nstruct Segment\n{\n    Point p1, p2;\n\n    Segment() = default;\n    Segment(Point &p1, Point &p2) : p1(p1), p2(p2)\n    {\n    }\n};\nusing Line = Segment;\n\nclass Circle\n{\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r)\n    {\n    }\n};\n\nusing Polygon = std::vector<Point>;\n\nauto swap = [](auto &a, auto &b) {\n    auto tmp = a;\n    a = b;\n    b = tmp;\n};\n\nint cross_number(Segment &l, Point &p)\n{\n    Vector a = l.p1 - p;\n    Vector b = l.p2 - p;\n\n    if (a.y > b.y)\n        swap(a, b);\n\n    // If p is on the segment\n    if (a.cross(b) == 0 && a.dot(b) <= 0)\n        return -1;\n\n    if (a.y <= 0 && b.y > 0 && a.cross(b) > 0)\n        return 1;\n\n    return 0;\n}\n\nint contain(Polygon &pol, Point &p)\n{\n    auto n = pol.size();\n    Segment l;\n\n    unsigned total_cross_number = 0;\n\n    for (size_t i = 0; i <= n - 1; ++i)\n    {\n        l.p1 = pol.at(i);\n        l.p2 = pol.at((i + 1) % n);\n\n        auto ncross = cross_number(l, p);\n\n        // If p is on the segment\n        if (ncross == -1)\n            return 1;\n\n        total_cross_number += ncross;\n    }\n\n    return (total_cross_number % 2) * 2;\n}\n\nint main()\n{\n    int n;\n    std::cin >> n;\n\n    Polygon pol;\n    Point p;\n    for (size_t i = 0; i < n; ++i)\n    {\n        std::cin >> p.x >> p.y;\n        pol.push_back(p);\n    }\n\n    int q;\n    std::cin >> q;\n    for (size_t i = 0; i < q; ++i)\n    {\n        std::cin >> p.x >> p.y;\n        std::cout << contain(pol, p) << std::endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\nusing G = vector<P>;\nusing C = pair<P,R>;\nstruct S : public L {\n  S() {}\n  S(const P &a, const P &b) : L(a,b) {}\n};\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b) - imag(a)*real(b);\n}\ninline P vec(const L& l) {return l.second - l.first;}\n\n// P,L,Sについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\ninline istream& operator>>(istream& is, S& s) {\n  P a, b;\n  is >> a >> b;\n  s = S(a, b);\n  return is;\n}\n\n// 射影\nP projection(const L &l, const P &p) {\n  R t = dot(p-l.first, l.first-l.second) / norm(l.first-l.second);\n  return l.first + t*(l.first-l.second);\n}\n// 反射\nP reflection(const L &l, const P &p) {\n  return p + (R)2 * (projection(l, p) - p);\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON_SEG=16};\nint ccw(P a, P b, P c) {\n\tP p = (c-a)/(b-a);\n\tif(sgn(imag(p)) > 0) return LEFT;\n\tif(sgn(imag(p)) < 0) return RIGHT;\n\tif(sgn(real(p)) < 0) return BACK;\n\tif(sgn(real(p)-1) > 0) return FRONT;\n\treturn ON_SEG;\n}\n\n// 垂直,平行\ninline bool vertical(L a, L b) {return sgn(dot(vec(a), vec(b))) == 0;}\ninline bool parallel(L a, L b) {return sgn(det(vec(a), vec(b))) == 0;}\ninline bool eal(L a, L b) {return vertical(a,b) && parallel(a,b);}\n\n// 交差判定\ntemplate<bool strict=false> inline bool intersect(const L&l1, const L&l2) {\n  if(strict) return sgn(det(vec(l1),vec(l2))) != 0;\n  return sgn(det(vec(l1),vec(l2))) != 0 || l1 == l2;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const S&s) {\n  if(strict) det(s.first, vec(l)) * det(s.second, vec(l)) < 0;\n  return det(s.first, vec(l)) * det(s.second, vec(l)) <= 0;\n}\ntemplate<bool strict=false> inline bool intersect(const S&s1, const S&s2) {\n  int ccw1 = ccw(s1.first, s1.second, s2.first) | ccw(s1.first, s1.second, s2.second);\n  int ccw2 = ccw(s2.first, s2.second, s1.first) | ccw(s2.first, s2.second, s1.second);\n  if(strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return (ccw1 & ccw2) == (LEFT | RIGHT) || ((ccw1 | ccw2) & ON_SEG);\n}\ntemplate<bool strict=false> inline bool intersect(const S&s, const P&p) {\n  return ccw(s.first, s.second, p) == ON_SEG;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const P&p) {\n  return ccw(l.first, l.second, p) == ON_SEG ||\n          ccw(l.first, l.second, p) == FRONT ||\n          ccw(l.first, l.second, p) == BACK;\n}\n\n// 交点 交差判定を先にすること!!!\ninline P crosspoint(const L& l1, const L& l2) {\n  R ratio = det(vec(l2), l2.first-l1.first)/det(vec(l2),vec(l1));\n  return l1.first + vec(l1)*ratio;\n}\n\n// 距離\nR dist(const S& s, const P& p) {\n  P q = projection(s, p);\n  if(sgn(dot(s.second-s.first, p-s.first)) <= 0) q = s.first;\n  if(sgn(dot(s.first-s.second, p-s.second)) <= 0) q = s.second;\n  return abs(p-q);\n}\nR dist(const S& a, const S& b) {\n  if(intersect(a, b)) return 0;\n  return min({dist(a, b.first), dist(a, b.second), dist(b, a.first), dist(b, a.second)});\n}\n\n// 面積 頂点が反時計回りに並んでいること\nR area(const G& pol) {\n  R ret = 0.0;\n  REP(i, pol.size()) ret += det(pol[i], pol[(i+1)%pol.size()]);\n  return (ret/2.0);\n}\n\n// 凸性の判定\nbool isConvex(const G& pol) {\n  REP(i, pol.size()) {\n    if(sgn(det(pol[(i+1)%pol.size()]-pol[i], pol[(i+2)%pol.size()]-pol[i])) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// 多角形と点の内包\n// 2→in 1→on 0→out\nint inPolygon(const G& pol, const P& p) {\n  bool in = false;\n  for (int i = 0; i < pol.size(); ++i) {\n  \tP a = pol[i] - p, b = pol[(i+1)%pol.size()] - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b) && sgn(det(a, b)) < 0) in = !in;\n    if (sgn(det(a, b)) == 0 && sgn(dot(a, b)) <= 0) return 1;\n  }\n  return in ? 2 : 0;\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  int n;\n  cin >> n;\n  G pol(n);\n  REP(i, n) cin >> pol[i];\n  int q;\n  cin >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    cout << inPolygon(pol, p) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <complex>\n#include <vector>\nusing namespace std;\nconst double eps = 1e-10;\n#define EQ(a, b) (abs((a) - (b)) < eps)\nusing P = complex<double>;      // position\nstruct L : vector<P> {\n    L(const P &a = P(), const P &b = P()) {\n        emplace_back(a); emplace_back(b);\n    }\n};\nusing Polygon = vector<P>;\nostream &operator<<(ostream &os, P p) { return os << real(p) << \" \" << imag(p); }\ndouble dot(const P &a, const P &b) { return real(conj(a) * b); }\ndouble cross(const P &a, const P &b) { return imag(conj(a) * b); }\n\nenum { OUT, ON, IN };\nint contains(const Polygon &ps, const P &p) {\n    bool in = false;\n    for (int i = 0; i < ps.size(); i++) {\n        P a = ps[i] - p, b = ps[(i + 1) % ps.size()] - p;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b) && cross(a, b) < 0) in = !in;\n    }\n    return in ? IN : OUT;\n}\n\n#include <iostream>\nint main() {\n    int n; cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++) {\n        int x, y; cin >> x >> y;\n        ps.emplace_back(x, y);\n    }\n    int q; cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x, y; cin >> x >> y;\n        cout << contains(ps, P(x, y)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n// 平面幾何\n\n// 型変換\n//   double  -> Point\n//   Segment -> Line\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial = 0, const Point& terminal = 0) :initial(initial), terminal(terminal) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial = 0, const Point& terminal = 0) :initial(initial), terminal(terminal) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\n// bool operator==(const Point& lhs, const Point& rhs) {return lhs.x == rhs.x && lhs.y == rhs.y;}\n// bool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\n// bool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\n// bool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\n// bool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\n// bool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / hypot(p.x, p.y);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) <= EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) <= EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) < -EPS) return CLOCKWISE;\n  if(dot(v1, v2) < -EPS) return ONLINE_BACK;\n  if(norm(v2) - norm(v1) > EPS) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1.x == p2.x && p1.y == p2.y;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(l.terminal - p, l.initial - p);}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || parallel(l1, Line(l1.initial, l2.initial));}  // 非平行または同一直線上\n// 点移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial),\n                                             distance(s1, s2.terminal),\n                                             distance(s2, s1.initial),\n                                             distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  if(std::abs(A) < EPS && std::abs(B) < EPS) return l2.initial;\n  assert(std::abs(A) > EPS);                                // 平行かつ同一直線上にない\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));                                 // 2直線の交点が線分上にない\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  Point cp = crosspoint(Line(s1), Line(s2));\n  assert(intersect(s1, cp) && intersect(s2, cp));           // 2直線の交点が線分上にない\n  return cp;\n}\n// デバッグ用\n// #include<bits/stdc++.h>\n// using namespace std;\n// void print(const Point& p) {cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\n// void print(const Line& l) {print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ関数に持たないためedge()はO(n)で処理している\n#include<vector>\n#include<algorithm>\n#include<utility>\nclass Polygon {\npublic:\n  void add(const Point& p) {vertex_.push_back(p);}\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return Segment(vertex(n), vertex((n + 1) % size()));}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  std::vector<Segment> edge() const {\n    std::vector<Segment> result;\n    for(int i = 0; i < size(); ++i) result.push_back(edge(i));\n    return result;\n  }\n  bool touch(const Point& p) const {\n    auto e = edge();\n    return std::any_of(e.begin(), e.end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool include(const Point& p) const {  // intersect()という名前にしたいけどグローバルスコープのintersect()たちが隠蔽されて困った\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= EPS && 0.0 < b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\nprivate:\n  std::vector<Point> vertex_;\n};\n////////////////////////////////////////////////////////////////////////////////\n\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n;\n  Polygon polygon;\n  for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n    int x, y;\n    cin >> x >> y;\n    polygon.add(Point(x, y));\n  }\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    cout << (polygon.touch(p) ? 1 : (polygon.include(p) ? 2 : 0)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "//#define NDEBUG\n#include \"bits/stdc++.h\"\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <array>\n#include <random>\n#ifdef _MSC_VER\n#include <ppl.h>\n//#include <boost/multiprecision/cpp_dec_float.hpp>\n//#include <boost/multiprecision/cpp_int.hpp>\n//#include <boost/rational.hpp>\n//#include <opencv2/core.hpp>\n//#include <opencv2/imgproc.hpp>\n//#include <opencv2/highgui.hpp>\n//#else\n//#include <omp.h>\n#endif\n\n\nusing namespace std;\n\n#define DUMPOUT cerr\n#define dump(...) DUMPOUT<<\"  \";DUMPOUT<<#__VA_ARGS__<<\" :[\"<<__LINE__<<\":\"<<__FUNCTION__<<\"]\"<<endl;DUMPOUT<<\"    \";dump_func(__VA_ARGS__)\n\nusing uint = unsigned; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using pdd = pair<double, double>; using pss = pair<string, string>;\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const pair<_KTy, _Ty>& m) { o << \"{\" << m.first << \", \" << m.second << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const unordered_map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const vector<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const deque<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const unordered_set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; }\to << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const stack<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } stack<_Ty> t(s); o << \"{\" << t.top(); t.pop(); while (!t.empty()) { o << \", \" << t.top(); t.pop(); } o << \"}\";\treturn o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const list<_Ty>& l) { if (l.empty()) { o << \"{ }\"; return o; } o << \"{\" << l.front(); for (auto itr = ++l.begin(); itr != l.end(); ++itr) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> istream& operator >> (istream& is, pair<_KTy, _Ty>& m) { is >> m.first >> m.second; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, vector<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, deque<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\nnamespace aux { // print tuple\n  template<typename Ty, unsigned N, unsigned L> struct tp { static void print(ostream& os, const Ty& v) { os << get<N>(v) << \", \"; tp<Ty, N + 1, L>::print(os, v); } };\n  template<typename Ty, unsigned N> struct tp<Ty, N, N> { static void print(ostream& os, const Ty& v) { os << get<N>(v); } };\n}\n\ntemplate<typename... Tys> ostream& operator<<(ostream& os, const tuple<Tys...>& t) { os << \"{\"; aux::tp<tuple<Tys...>, 0, sizeof...(Tys) - 1>::print(os, t); os << \"}\"; return os; }\n\ntemplate<typename A, size_t N, typename T> inline void Fill(A(&array)[N], const T& val) { fill((T*)array, (T*)(array + N), val); }\n\ntemplate <typename ... Args>\nstd::string format(const std::string& fmt, Args ... args) {\n  size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args ...);\n  std::vector<char> buf(len + 1);\n  std::snprintf(&buf[0], len + 1, fmt.c_str(), args ...);\n  return std::string(&buf[0], &buf[0] + len);\n}\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail> void dump_func(Head&& head, Tail&&... tail) { DUMPOUT << head; if (sizeof...(Tail) == 0) { DUMPOUT << \" \"; } else { DUMPOUT << \", \"; } dump_func(move(tail)...); }\n\n#define PI 3.14159265358979323846\n#define EPS 1e-8\n#define rep(t,n) for(int t=0;t<(n);++t)\n#define ALL(j) (j).begin(), (j).end()\n#define SZ(j) ((int)(j).size())\n#define fake false\n\nclass Timer {\npublic:\n  double t = 0;\n  Timer() {}\n  static double time() {\n#ifdef _MSC_VER\n    return __rdtsc() / 2.8e9;\n#else\n    unsigned long long a, d;\n    __asm__ volatile(\"rdtsc\"\n      : \"=a\"(a), \"=d\"(d));\n    return (d << 32 | a) / 2.8e9;\n#endif\n  }\n  void measure() { t = time() - t; }\n  double elapsedMs() { return (time() - t) * 1000.0; }\n} timer;\n\nstruct Xorshift {\n  uint64_t x = 88172645463325252LL;\n  unsigned next_int() {\n    x = x ^ (x << 7);\n    return x = x ^ (x >> 9);\n  }\n  unsigned next_int(unsigned mod) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % mod;\n  }\n  unsigned next_int(unsigned l, unsigned r) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % (r - l + 1) + l;\n  }\n  double next_double() {\n    return double(next_int()) / UINT_MAX;\n  }\n} rnd;\n\ntemplate<typename T>\nvoid shuffle_vector(vector<T>& v, Xorshift& rnd) {\n  int n = v.size();\n  for (int i = n - 1; i >= 1; i--) {\n    int r = rnd.next_int(i);\n    swap(v[i], v[r]);\n  }\n}\n\n\n\nnamespace geom {\n  constexpr double eps = 1e-8;\n\n  /* point */\n  struct Point {\n    double x, y;\n    Point() : x(0.0), y(0.0) {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(this->x + p.x, this->y + p.y); }\n    Point operator-(const Point& p) const { return Point(this->x - p.x, this->y - p.y); }\n    Point operator-() const { return Point(-this->x, -this->y); }\n    Point& operator+=(const Point& p) { return *this = *this + p; }\n    Point& operator-=(const Point& p) { return *this = *this - p; }\n    double length() const { return std::sqrt(x * x + y * y); }\n    double length2() const { return x * x + y * y; }\n    double distance(const Point& p) const { return sqrt(pow(x - p.x, 2.0) + pow(y - p.y, 2.0)); }\n    friend std::ostream& operator<<(std::ostream& o, const Point& p) {\n      o << '(' << p.x << ',' << p.y << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Point& p) {\n      i >> p.x >> p.y;\n      return i;\n    }\n  };\n  \n  /* vector */\n  using Vector = Point;\n  double cross_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n  }\n  double inner_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n  enum struct ccw_t {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n  };\n  ccw_t ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector v1 = p1 - p0, v2 = p2 - p0;\n    if (cross_product(v1, v2) > eps) return ccw_t::COUNTER_CLOCKWISE;\n    if (cross_product(v1, v2) < -eps) return ccw_t::CLOCKWISE;\n    if (inner_product(v1, v2) < -eps) return ccw_t::ONLINE_BACK;\n    if (v1.length2() < v2.length2()) return ccw_t::ONLINE_FRONT;\n    return ccw_t::ON_SEGMENT;\n  }\n\n  /* line */\n  struct Line {\n    Point p1, p2;\n    Line() {}\n    Line(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n    Vector to_vector() const { return p2 - p1; }\n    Point projection(const Point& p) const {\n      Vector v12(p2 - p1);\n      double det = v12.length2();\n      double a = v12.y * p1.x - v12.x * p1.y, b = v12.y * p.y + v12.x * p.x;\n      double x = v12.y * a + v12.x * b, y = v12.y * b - v12.x * a;\n      return Point(x / det, y / det);\n    }\n    Point reflection(const Point& p) const {\n      Point proj = projection(p);\n      return proj + proj - p;\n    }\n    double distance(const Point& p) const {\n      return projection(p).distance(p);\n    }\n    bool is_parallel(const Line& l) const {\n      return abs(cross_product(this->to_vector(), l.to_vector())) < eps;\n    }\n    bool is_orthogonal(const Line& l) const {\n      return abs(inner_product(this->to_vector(), l.to_vector())) < eps;\n    }\n    Point intersection(const Line& l) const {\n      Point p0(this->p1), p1(this->p2), p2(l.p1), p3(l.p2);\n      Vector v01(p1 - p0), v23(p3 - p2);\n      double det = cross_product(v01, v23);\n      double a = v01.y * p0.x - v01.x * p0.y, b = v23.y * p2.x - v23.x * p2.y;\n      double x = v01.x * b - v23.x * a;\n      double y = v01.y * b - v23.y * a;\n      return Point(x / det, y / det);\n    }\n    friend std::ostream& operator<<(std::ostream& o, const Line& l) {\n      o << '(' << l.p1 << ',' << l.p2 << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Line& l) {\n      i >> l.p1 >> l.p2;\n      return i;\n    }\n  };\n\n  /* segment */\n  using Segment = Line;\n  bool is_intersect_segment(const Segment& s1, const Segment& s2) {\n    Vector v2 = s2.to_vector(), p1(s1.p1 - s2.p1), p2(s1.p2 - s2.p1);\n    if (cross_product(v2, p1) * cross_product(v2, p2) > eps) return false;\n    Vector v1 = s1.to_vector(), p3(s2.p1 - s1.p1), p4(s2.p2 - s1.p1);\n    if (cross_product(v1, p3) * cross_product(v1, p4) > eps) return false;\n    if (inner_product(s2.p1 - s1.p1, s2.p2 - s1.p1) < eps) return true;\n    if (inner_product(s2.p1 - s1.p2, s2.p2 - s1.p2) < eps) return true;\n    if (inner_product(s1.p1 - s2.p1, s1.p2 - s2.p1) < eps) return true;\n    if (inner_product(s1.p1 - s2.p2, s1.p2 - s2.p2) < eps) return true;\n    return false;\n  }\n  double segment_distance(const Segment& s, const Point& p) {\n    Point proj = s.projection(p);\n    if (ccw(s.p1, proj, s.p2) == ccw_t::ONLINE_FRONT) return p.distance(proj);\n    return min(p.distance(s.p1), p.distance(s.p2));\n  }\n  double segment_distance(const Segment& s1, const Segment& s2) {\n    if (is_intersect_segment(s1, s2)) return 0.0;\n    return min({\n      segment_distance(s1, s2.p1), segment_distance(s1, s2.p2),\n      segment_distance(s2, s1.p1), segment_distance(s2, s1.p2)\n      });\n  }\n\n  /* polygon */\n  using Polygon = std::vector<Point>;\n  double area(const Polygon& poly) {\n    if (poly.size() <= 2) return 0;\n    Point b(DBL_MAX, DBL_MAX);\n    for (const Point& p : poly) {\n      b.x = min(b.x, p.x); b.y = min(b.y, p.y);\n    }\n    b.x -= 1.0; b.y -= 1.0;\n    int n = (int)poly.size();\n    double area = 0.0;\n    for (int i = 0; i < n; i++) {\n      area += cross_product(poly[i] - b, poly[(i + 1) % n] - b) * 0.5;\n    }\n    return area;\n  }\n  bool is_convex(const Polygon& poly) {\n    if (poly.size() <= 2) return false;\n    int n = (int)poly.size();\n    for (int i = 0; i < n; i++) {\n      if (ccw(poly[i], poly[(i + 1) % n], poly[(i + 2) % n]) == ccw_t::CLOCKWISE) {\n        return false;\n      }\n    }\n    return true;\n  }\n  enum struct poly_t {\n    EXTERNAL = 0,\n    ON_SEGMENT = 1,\n    INTERNAL = 2\n  };\n  poly_t is_inside(const Point& p, const Polygon& poly) {\n    int n = (int)poly.size();\n    double rad = 0.0;\n    for (int i = 0; i < n; i++) {\n      const Point& p1 = poly[i];\n      const Point& p2 = poly[(i + 1) % n];\n      double d1 = p.distance(p1), d2 = p.distance(p2);\n      if (segment_distance(Segment(p1, p2), p) < eps) return poly_t::ON_SEGMENT;\n      Vector v1(p1 - p), v2(p2 - p);\n      double r = atan2(cross_product(v1, v2), inner_product(v1, v2));\n      rad += r;\n    }\n    return rad < eps ? poly_t::EXTERNAL : poly_t::INTERNAL;\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  using namespace geom;\n\n  int n;\n  cin >> n;\n  Polygon poly(n);\n  cin >> poly;\n  int q;\n  cin >> q;\n\n  cout << fixed << setprecision(1);\n  rep(_, q) {\n    Point p;\n    cin >> p;\n    cout << int(is_inside(p, poly)) << '\\n';\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n#define EPS (1E-10)\nconst int maxn=100000+10;\nint n;\n\nstruct Point\n{\n    int x,y;\n    Point() {}\n    Point(int _x,int _y):x(_x),y(_y) {}\n    Point operator -(Point p)\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    bool operator <(Point p)\n    {\n        return x==p.x?y<p.y:x<p.x;\n    }\n    int cross(Point p)\n    {\n        return x*p.y-y*p.x;\n    }\n    int dot(Point p)\n    {\n        return x*p.x+y*p.y;\n    }\n    int norm()\n    {\n        return x*x+y*y;\n    }\n\n};\nvector<Point> ps;\n\nint ccw(Point p,Point p1,Point p2)\n{\n    #define COUNT_CLOCKWISE 1\n    #define CLOCKWISE -1\n    #define ONLINE_FRONT 2\n    #define ONLINE_BACK -2\n    #define ON_SEGMENT 0\n    Point a=p1-p;\n    Point b=p2-p;\n    if(a.cross(b)<-EPS) return CLOCKWISE;\n    if(fabs(a.cross(b)<EPS)) return CLOCKWISE;\n    if(a.cross(b)>EPS) return COUNT_CLOCKWISE;\n    if(a.dot(b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n\n}\nint is_contain(vector<Point> ps,Point p)\n{\n    Point a,b;\n    int n=(int)ps.size();\n    bool flag=false;\n    for(int i=0;i<n;i++)\n    {\n        a=ps[i]-p;\n        b=ps[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<=0.0&&b.y>0.0&&a.cross(b)>0.0) flag=!flag;\n        if(a.cross(b)==0.0&&a.dot(b)<=0) return 1;\n    }\n    return flag?2:0;\n}\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    int x,y;\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        ps.push_back(Point(x,y));\n    }\n    int q;\n    Point p;\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        scanf(\"%d%d\",&p.x,&p.y);\n        printf(\"%d\\n\",is_contain(ps,p));\n    }\n\n\n\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * @copyright (c) 2020 Daisuke Hashimoto\n */\n\n#include <cstdint>\n#include <iostream>\n#include <utility>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n\nvoid CallPolygonPointContainment(std::istream &input_stream) noexcept;\n\nclass Point2D {\n public:\n  Point2D() noexcept;\n  Point2D(const double x, const double y) noexcept;\n  ~Point2D() noexcept;\n  Point2D(const Point2D &obj) noexcept;\n  Point2D &operator=(const Point2D &obj) noexcept;\n  Point2D(Point2D &&obj) noexcept;\n  Point2D &operator=(Point2D &&obj) noexcept;\n\n  Point2D operator+(const Point2D &rhs) const noexcept;\n  Point2D operator-(const Point2D &rhs) const noexcept;\n  Point2D operator*(const double rhs) const noexcept;\n  double InnerProduct(const Point2D &rhs) const noexcept;\n  double OuterProduct(const Point2D &rhs) const noexcept;\n  double SquareSum() const noexcept;\n  double Norm() const noexcept;\n  double GetHeightOfParallelogram(const Point2D &hypotenuse) const;\n  double X() const noexcept;\n  double Y() const noexcept;\n  Point2D Perpendicular() const noexcept;\n\n private:\n  double x_;\n  double y_;\n};\n\nclass Line {\n public:\n  Line(const Point2D &p1, const Point2D &p2) noexcept;\n  ~Line() noexcept;\n  bool IsParallel(const Line &rhs) const noexcept;\n  bool IsOrthogonal(const Line &rhs) const noexcept;\n  bool IsOnLine(const Point2D &point) const noexcept;\n  bool IsOnSegment(const Point2D &point) const noexcept;\n  bool operator==(const Line &rhs) const noexcept;\n  bool operator!=(const Line &rhs) const noexcept;\n  Point2D ProjectPoint(const Point2D &point) const;\n  Point2D ReflectPoint(const Point2D &point) const;\n  std::pair<Point2D, Point2D> GetBasePoints() const noexcept;\n\n  bool SegmentsAreCrossing(const Line &line) const;\n  Point2D GetCrossPointOfSegments(const Line &line) const;\n  bool PointIsOnSegment(const Point2D &point) const;\n  double GetLineSegmentDistanceFromPoint(const Point2D &point) const;\n  double GetLineSegmentDistance(const Line &line) const;\n\n  bool SegmentCrossesWithRightwardHalflineFromPoint(const Point2D &point) const;\n\n private:\n  Line() = delete;\n  Line(const Line &obj) = delete;\n  Line &operator=(const Line &obj) = delete;\n  Line(Line &&obj) = delete;\n  Line &operator=(Line &&obj) = delete;\n\n private:\n  Point2D p1_;\n  Point2D p2_;\n};\n\nclass Circle {\n public:\n  Circle(const double center_x, const double center_y, const double radius) noexcept;\n  ~Circle() noexcept;\n\n  std::pair<Point2D, Point2D> GetCrossPointsWithLine(const Line &line) const;\n  std::pair<Point2D, Point2D> GetCrossPointsWithCircle(const Circle &circle) const;\n\n private:\n  Circle() = delete;\n  Circle(const Circle &obj) = delete;\n  Circle &operator=(const Circle &obj) = delete;\n  Circle(Circle &&obj) = delete;\n  Circle &operator=(Circle &&obj) = delete;\n\n private:\n  Point2D center_;\n  double radius_;\n};\n\nenum class Containment : int32_t { kIsNotContained = 0, kIsOnEdge, kIsContained };\n\nclass Polygon {\n public:\n  Polygon() noexcept;\n  ~Polygon() noexcept;\n\n  void AddVertex(const Point2D &vertex) noexcept;\n  Containment AskContainment(const Point2D &point) const noexcept;\n\n private:\n  Polygon(const Polygon &obj) = delete;\n  Polygon &operator=(const Polygon &obj) = delete;\n  Polygon(Polygon &&obj) = delete;\n  Polygon &operator=(Polygon &&obj) = delete;\n\n private:\n  std::vector<Point2D> vertices_;\n};\n\nvoid CallPolygonPointContainment(std::istream &input_stream) noexcept {\n  input_stream.tie(0);\n  std::ios::sync_with_stdio(false);\n  Polygon *polygon = new Polygon();\n  try {\n    int32_t number_of_vertices;\n    input_stream >> number_of_vertices;\n    for (int32_t i = 0; i < number_of_vertices; ++i) {\n      int32_t x, y;\n      input_stream >> x >> y;\n      polygon->AddVertex(Point2D(x, y));\n    }\n    int32_t number_of_queries;\n    input_stream >> number_of_queries;\n    for (int32_t i = 0; i < number_of_queries; ++i) {\n      int32_t x, y;\n      input_stream >> x >> y;\n      const Containment containment = polygon->AskContainment(Point2D(x, y));\n      std::cout << static_cast<int32_t>(containment) << std::endl;\n    }\n  } catch (...) {\n    std::cerr << \"CallPolygonPointContainment()\" << std::endl;\n    // DO NOT THROW ERROR\n  }\n  delete polygon;\n}\n\n// *************************************\nPoint2D::Point2D() noexcept : x_(0.0), y_(0.0) {}\n\nPoint2D::Point2D(const double x, const double y) noexcept : x_(x), y_(y) {}\n\nPoint2D::~Point2D() noexcept {}\n\nPoint2D::Point2D(const Point2D &obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(const Point2D &rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D::Point2D(Point2D &&obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(Point2D &&rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D Point2D::operator+(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ + rhs.x_, this->y_ + rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator-(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ - rhs.x_, this->y_ - rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator*(const double rhs) const noexcept {\n  Point2D point(this->x_ * rhs, this->y_ * rhs);\n  return point;\n}\n\ndouble Point2D::X() const noexcept {\n  return x_;\n}\n\ndouble Point2D::Y() const noexcept {\n  return y_;\n}\n\ndouble Point2D::InnerProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.x_) + (this->y_ * rhs.y_));\n}\ndouble Point2D::OuterProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.y_) - (this->y_ * rhs.x_));\n}\n\ndouble Point2D::SquareSum() const noexcept {\n  return (x_ * x_ + y_ * y_);\n}\n\ndouble Point2D::Norm() const noexcept {\n  return sqrt(SquareSum());\n}\n\ndouble Point2D::GetHeightOfParallelogram(const Point2D &hypotenuse) const {\n  double height;\n  try {\n    const double area_of_parallelogram = abs(OuterProduct(hypotenuse));\n    const double base_length = Norm();\n    constexpr double kEps = 0.00000001;\n    if (base_length < kEps) {\n      std::cerr << \"ERROR: GetHeightOfParallelogram(): Invalid base_length=\" << base_length << std::endl;\n      throw 1;\n    }\n    height = area_of_parallelogram / base_length;\n  } catch (...) {\n    std::cerr << \"ERROR: GetHeightOfParallelogram()\" << std::endl;\n    throw;\n  }\n  return height;\n}\n\nPoint2D Point2D::Perpendicular() const noexcept {\n  const Point2D perpendicular(Y(), -X());\n  return perpendicular;\n}\n\n// ************************************************\n\nLine::Line(const Point2D &p1, const Point2D &p2) noexcept : p1_(p1), p2_(p2) {}\n\nLine::~Line() noexcept {}\n\nbool Line::IsParallel(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  const double outer_product = this_direction.OuterProduct(rhs_direction);\n  constexpr double kEps = 0.0000001;\n  const bool is_parallel = (abs(outer_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOrthogonal(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  constexpr double kEps = 0.0000001;\n  const double inner_product = this_direction.InnerProduct(rhs_direction);\n  const bool is_parallel = (abs(inner_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOnLine(const Point2D &point) const noexcept {\n  const Line line1(point, p1_);\n  const Line line2(point, p2_);\n  const bool is_on_line = line1.IsParallel(line2);\n  return is_on_line;\n}\n\nbool Line::IsOnSegment(const Point2D &point) const noexcept {\n  bool is_on_segment;\n  const bool is_on_line = IsOnLine(point);\n  if (is_on_line) {\n    const Point2D p1_from_point = p1_ - point;\n    const Point2D p2_from_point = p2_ - point;\n    is_on_segment = (p1_from_point.InnerProduct(p2_from_point) <= 0);\n  } else {\n    is_on_segment = false;\n  }\n  return is_on_segment;\n}\n\nbool Line::operator==(const Line &rhs) const noexcept {\n  return (IsOnLine(rhs.p1_) && IsOnLine(rhs.p2_));\n}\n\nbool Line::operator!=(const Line &rhs) const noexcept {\n  return !(*this == rhs);\n}\n\nPoint2D Line::ProjectPoint(const Point2D &point) const {\n  const Point2D p2_from_p1 = p2_ - p1_;\n  const Point2D point_from_p1 = point - p1_;\n  const double square_sum = p2_from_p1.SquareSum();\n  constexpr double kEps = 0.0000001;\n  if (abs(square_sum) < kEps) {\n    std::cerr << \"ERROR: Line::ProjectPoint()\" << std::endl;\n    throw 1;\n  }\n  const double coefficient = p2_from_p1.InnerProduct(point_from_p1) / square_sum;\n  const Point2D projected_point = p1_ + (p2_from_p1 * coefficient);\n  return projected_point;\n}\n\nPoint2D Line::ReflectPoint(const Point2D &point) const {\n  Point2D reflected_point;\n  try {\n    const Point2D projected_point = ProjectPoint(point);\n    reflected_point = point + ((projected_point - point) * 2.0);\n  } catch (...) {\n    std::cerr << \"ERROR: ReflectPoint()\" << std::endl;\n  }\n  return reflected_point;\n}\n\ndouble Line::GetLineSegmentDistanceFromPoint(const Point2D &point) const {\n  double distance;\n  try {\n    const Point2D projected_point_from_point1 = ProjectPoint(point) - p1_;\n    const Point2D point2_from_point1 = p2_ - p1_;\n    bool projected_point_is_inside = ((projected_point_from_point1.SquareSum() <= point2_from_point1.SquareSum()) &&\n                                      (projected_point_from_point1.InnerProduct(point2_from_point1) >= 0.0));\n    if (projected_point_is_inside) {\n      const Point2D r = ProjectPoint(point) - point;\n      distance = r.Norm();\n    } else {\n      const Point2D diff1 = point - p1_;\n      const Point2D diff2 = point - p2_;\n      distance = fmin(diff1.Norm(), diff2.Norm());\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetLineSegmentDistanceFromPoint()\" << std::endl;\n    throw 1;\n  }\n  return distance;\n}\n\ndouble Line::GetLineSegmentDistance(const Line &line) const {\n  double line_segment_distance;\n  try {\n    if (SegmentsAreCrossing(line)) {\n      line_segment_distance = 0.0;\n    } else {\n      line_segment_distance =\n          fmin(fmin(GetLineSegmentDistanceFromPoint(line.p1_), GetLineSegmentDistanceFromPoint(line.p2_)),\n               fmin(line.GetLineSegmentDistanceFromPoint(p1_), line.GetLineSegmentDistanceFromPoint(p2_)));\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetLineSegmentDistance()\" << std::endl;\n  }\n  return line_segment_distance;\n}\n\nbool Line::PointIsOnSegment(const Point2D &point) const {\n  constexpr double kEps = 0.0000001;\n  bool point_is_on_segment;\n  try {\n    point_is_on_segment = (GetLineSegmentDistanceFromPoint(point) < kEps);\n  } catch (...) {\n    std::cerr << \"ERROR: PointIsOnSegment()\" << std::endl;\n    throw;\n  }\n  return point_is_on_segment;\n}\n\nbool Line::SegmentsAreCrossing(const Line &line) const {\n  const Point2D r1 = p2_ - p1_;\n  const Point2D diff1_1 = line.p1_ - p1_;\n  const Point2D diff1_2 = line.p2_ - p1_;\n  const bool temp_1 = ((r1.OuterProduct(diff1_1) * r1.OuterProduct(diff1_2)) < 0.0);\n\n  const Point2D r2 = line.p2_ - line.p1_;\n  const Point2D diff2_1 = p1_ - line.p1_;\n  const Point2D diff2_2 = p2_ - line.p1_;\n  const bool temp_2 = ((r2.OuterProduct(diff2_1) * r2.OuterProduct(diff2_2)) < 0.0);\n\n  const bool any_points_is_on_segment = (PointIsOnSegment(line.p1_) || PointIsOnSegment(line.p2_) ||\n                                         line.PointIsOnSegment(p1_) || line.PointIsOnSegment(p2_));\n\n  return (temp_1 && temp_2) || any_points_is_on_segment;\n}\n\nPoint2D Line::GetCrossPointOfSegments(const Line &line) const {\n  Point2D cross_point;\n  try {\n    const Point2D base_vector = p2_ - p1_;\n    const Point2D hypotenuse_vector_1 = line.p1_ - p1_;\n    double height_1 = base_vector.GetHeightOfParallelogram(hypotenuse_vector_1);\n    const Point2D hypotenuse_vector_2 = line.p2_ - p1_;\n    double height_2 = base_vector.GetHeightOfParallelogram(hypotenuse_vector_2);\n    constexpr double kEps = 0.0000001;\n    const double height_sum = height_1 + height_2;\n    if (height_sum < kEps) {\n      std::cerr << \"ERROR: GetCrossPointOfSegments(): Invalid height_sum=\" << height_sum << std::endl;\n      throw 1;\n    }\n    const double ratio = height_1 / height_sum;\n    cross_point = line.p1_ + (line.p2_ - line.p1_) * ratio;\n  } catch (...) {\n    std::cerr << \"ERROR: GetCrossPointOfSegments()\" << std::endl;\n    throw;\n  }\n  return cross_point;\n}\n\nstd::pair<Point2D, Point2D> Line::GetBasePoints() const noexcept {\n  const std::pair<Point2D, Point2D> pair = std::make_pair(p1_, p2_);\n  return pair;\n}\n\nbool Line::SegmentCrossesWithRightwardHalflineFromPoint(const Point2D &point) const {\n  bool segment_crosses_with_rightward_half_line;\n  try {\n    Point2D point_y_small = p1_ - point;\n    Point2D point_y_large = p2_ - point;\n    if (point_y_small.Y() > point_y_large.Y()) {\n      const Point2D temp = point_y_small;\n      point_y_small = point_y_large;\n      point_y_large = temp;\n    }\n    constexpr double kEps = 0.0000001;\n    segment_crosses_with_rightward_half_line = ((point_y_small.Y() < kEps) && (kEps < point_y_large.Y()) &&\n                                                (point_y_small.OuterProduct(point_y_large) > kEps));\n  } catch (...) {\n    std::cerr << \"SegmentCrossesWithRightwardHalflineFromPoint::IsContained\" << std::endl;\n    throw;\n  }\n  return segment_crosses_with_rightward_half_line;\n}\n\n// ************************************************\n\nCircle::Circle(const double center_x, const double center_y, const double radius) noexcept\n    : center_(Point2D(center_x, center_y)), radius_(radius) {}\n\nCircle::~Circle() noexcept {}\n\nstd::pair<Point2D, Point2D> Circle::GetCrossPointsWithLine(const Line &line) const {\n  std::pair<Point2D, Point2D> cross_points;\n  try {\n    const std::pair<Point2D, Point2D> line_points = line.GetBasePoints();\n    const Point2D direction = line_points.second - line_points.first;\n    const double temp_x = line_points.first.X() - center_.X();\n    const double temp_y = line_points.first.Y() - center_.Y();\n    const double a = (direction.X() * direction.X()) + (direction.Y() * direction.Y());\n    const double b = 2.0 * ((direction.X() * temp_x) + (direction.Y() * temp_y));\n    const double c = temp_x * temp_x + temp_y * temp_y - radius_ * radius_;\n    const double temp_sq = sqrt(b * b - 4.0 * a * c);\n    constexpr double kEps = 0.0000001;\n    if (sqrt(a) < kEps) {\n      std::cerr << \"ERROR: GetCrossPointsWithLine(): Invalid a=\" << a << std::endl;\n      throw 1;\n    }\n    const double t_1 = (-b + temp_sq) / 2.0 / a;\n    const double t_2 = (-b - temp_sq) / 2.0 / a;\n    const Point2D cross_point_1 = (line_points.first + (direction * t_1));\n    const Point2D cross_point_2 = (line_points.first + (direction * t_2));\n\n    if (((cross_point_1.X() - cross_point_2.X()) < kEps) && ((cross_point_1.X() - cross_point_2.X()) > -kEps)) {\n      if (cross_point_1.Y() < cross_point_2.Y()) {\n        cross_points.first = cross_point_1;\n        cross_points.second = cross_point_2;\n      } else {\n        cross_points.first = cross_point_2;\n        cross_points.second = cross_point_1;\n      }\n    } else if (cross_point_1.X() < cross_point_2.X()) {\n      cross_points.first = cross_point_1;\n      cross_points.second = cross_point_2;\n    } else {\n      cross_points.first = cross_point_2;\n      cross_points.second = cross_point_1;\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetCrossPointsWithLine()\" << std::endl;\n    throw;\n  }\n  return cross_points;\n}\n\nstd::pair<Point2D, Point2D> Circle::GetCrossPointsWithCircle(const Circle &circle) const {\n  std::pair<Point2D, Point2D> cross_points;\n  try {\n    const Point2D c1c2 = circle.center_ - center_;\n    const double d_squared = c1c2.SquareSum();\n\n    const double t = (radius_ * radius_ - circle.radius_ * circle.radius_ + d_squared) / 2.0 / d_squared;\n    const Point2D a = c1c2 * t;\n\n    const Point2D c1c2_perpendicular = c1c2.Perpendicular();\n    constexpr double kEps = 0.0000001;\n    if (c1c2_perpendicular.Norm() < kEps) {\n      std::cerr << \"ERROR: GetCrossPointsWithCircle(): Invalid c1c2_perpendicular.Norm()=\" << c1c2_perpendicular.Norm()\n                << std::endl;\n      throw 1;\n    }\n    const Point2D b = c1c2_perpendicular * (sqrt(radius_ * radius_ - a.SquareSum()) / c1c2_perpendicular.Norm());\n\n    const Point2D cross_point_1 = center_ + a + b;\n    const Point2D cross_point_2 = center_ + a - b;\n\n    if ((cross_point_1.X() - cross_point_2.X()) < kEps && (cross_point_1.X() - cross_point_2.X()) > -kEps) {\n      if (cross_point_1.Y() < cross_point_2.Y()) {\n        cross_points.first = cross_point_1;\n        cross_points.second = cross_point_2;\n      } else {\n        cross_points.first = cross_point_2;\n        cross_points.second = cross_point_1;\n      }\n    } else if (cross_point_1.X() < cross_point_2.X()) {\n      cross_points.first = cross_point_1;\n      cross_points.second = cross_point_2;\n    } else {\n      cross_points.first = cross_point_2;\n      cross_points.second = cross_point_1;\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetCrossPointsWithCircle()\" << std::endl;\n    throw;\n  }\n  return cross_points;\n}\n\n// ************************************************\nPolygon::Polygon() noexcept {}\nPolygon::~Polygon() noexcept {}\n\nvoid Polygon::AddVertex(const Point2D &vertex) noexcept {\n  vertices_.push_back(vertex);\n}\n\nContainment Polygon::AskContainment(const Point2D &point) const noexcept {\n  int32_t vertex_count_on_right_size = 0;\n  bool loop_completed = true;\n  try {\n    const int32_t number_of_vertices = static_cast<int32_t>(vertices_.size());\n    for (int32_t vertex_index = 0; vertex_index < number_of_vertices; ++vertex_index) {\n      const int32_t next_vertex_index = (vertex_index + 1) % number_of_vertices;\n      const Point2D &vertex_1 = vertices_[vertex_index];\n      const Point2D &vertex_2 = vertices_[next_vertex_index];\n      const Line line(vertex_1, vertex_2);\n      if (line.IsOnSegment(point)) {\n        loop_completed = false;\n        break;\n      } else {\n        const bool segment_crosses_with_rightward_half_line = line.SegmentCrossesWithRightwardHalflineFromPoint(point);\n        if (segment_crosses_with_rightward_half_line) {\n          ++vertex_count_on_right_size;\n        }\n      }\n    }\n  } catch (...) {\n    std::cerr << \"Polygon::IsContained\" << std::endl;\n    throw;\n  }\n  Containment containment;\n  if (loop_completed) {\n    if (vertex_count_on_right_size % 2 == 0) {\n      containment = Containment::kIsNotContained;\n    } else {\n      containment = Containment::kIsContained;\n    }\n  } else {\n    containment = Containment::kIsOnEdge;\n  }\n  return containment;\n}\n\nint main(int argc, char *argv[]) {\n  try {\n    CallPolygonPointContainment(std::cin);\n  } catch (...) {\n    std::cerr << \"ERROR: main()\" << std::endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\nconst lf oo = 1e15;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\ninline bool parallel( pt A, pt B, pt C, pt D ) {\n  return same ( 0, cross( B-A, D-C ) );\n}\n\n///NEW\ninline bool ortho( pt A, pt B, pt C, pt D ) {\n  return same ( 0, dot( B-A, D-C ) );\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\npt linesIntersection ( pt A, pt B, pt C, pt D ) {\n  lf x = cross ( C, D-C ) - cross ( A, D-C );\n  x /= cross ( B-A, D-C );\n  return A + x*(B-A);\n}\n\ninline bool collinearSegsIntersects ( pt A, pt B, pt C, pt D ) {\n  return segContains(A,C,D) || segContains(B,C,D)\n      || segContains(C,A,B) || segContains(D,A,B);\n}\n\nbool segmentsIntersect(pt A, pt B, pt C, pt D) {\n  if( samePt(A,B) )\n    return segContains( A, C, D );\n  if( samePt(C,D) )\n    return segContains( C, A, B );\n  if( parallel(A,B,C,D) )\n    return collinearSegsIntersects( A,B,C,D );\n  pt aux = linesIntersection(A,B,C,D);\n  return segContains(aux,A,B) && segContains(aux,C,D);\n}\n\n///CHANGE\nlf distToSegment(pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  if( u < -EPS ) { c = A; return dist( p , A ); }\n  if( (u-1.0) > EPS ) { c = B; return dist( p, B ); }\n  return distToLine(p,A,B,c);\n}\n\n// P[0] must be equal to P[n]\n// Area is positive if the polygon is ccw\ndouble signedArea(const vector<pt> &P) {\n  double result = 0.0;\n  for(int i = 0; i < (int)P.size()-1; i++) result += cross( P[i],P[i+1] );\n  return result / 2.0;\n}\n\ndouble area(const vector<pt> &P) { return fabs(signedArea(P)); }\n\n///CHANGE\n// P[0] must be equal to P[n]\nbool isConvex( const vector<pt> &P) {\n  int sz = (int) P.size(); if(sz <= 3) return false;\n  bool isL = ccw(P[0], P[1], P[2]) >= 0;\n  for (int i = 1; i < sz-1; i++) {\n    if( ( ccw(P[i], P[i+1], P[(i+2) == sz ? 1 : i+2]) >= 0 ) != isL) return false;\n  }\n  return true;\n}\n\n/// --------------------------------------------\n\n\n///CHANGE\n// P[0] must be equal to P[n]     -    O(N)\n// Return 1 for interior, 0 for boundary and -1 for exterior\nint inPolygon(pt X, const vector<pt> &P) {\n  const int n = P.size(); int cnt = 0;\n  for (int i = 0; i < n-1; i++) {\n    if( segContains(X, P[i], P[i+1]) ) return 0;\n    if( y(P[i]) <= y(X) ) {\n      if( y(P[i+1]) > y(X) )\n        if( !(ccw( X, P[i], P[i+1]) >= 0) ) cnt++;\n    }\n    else if ( y(P[i+1]) <= y(X) ) {\n      if( ccw( X, P[i], P[i+1]) >= 0 ) cnt--;\n    }\n  }\n  if(cnt == 0) return -1;\n  else return 1;\n}\n\nint n,m;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(1);\n\n  cin >> n;\n  vector<pt> P( n+1 );\n  for( int i = 0; i < n; ++i ) {\n    cin >> P[i];\n  }\n  P[n] = P[0];\n  cin >> m;\n  for( int i = 0; i < m; ++i ) {\n    pt cur; cin >> cur;\n    cout << inPolygon( cur, P )+1 << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    }\n    else {\n        return d < 0? -1 : 1;\n    }\n}\n\nstruct Vector {\n    double x, y;\n    Vector(double x = 0, double  y = 0):x(x), y(y) {\n    }\n};\n\ntypedef Vector Point;\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble ccw(const Point& a, const Point& b, const Point& c) {\n    return cross(b - a, c - a);\n}\n\nint main() {\n    int n; \n    cin >> n;\n    vector<Point> g(n);\n    for (int i = 0; i < n; i++) {\n        cin >> g[i].x >> g[i].y;\n    }\n    \n    int q;\n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        Vector p;\n        cin >> p.x >> p.y;\n        \n        int count = 0; //0: on segment\n        bool onseg = false;\n        for (int i = 0; i < n; i++) {\n            Vector u = g[i] - p;\n            Vector v = g[(i + 1) % n] - p;\n            //on segment\n            if (dcmp(cross(u, v)) == 0 && dcmp(dot(u, v)) <= 0) {\n                onseg = true;\n                break;\n            }\n            if (u.y > v.y) {\n                swap(u, v);\n            }\n            if (dcmp(v.y) >= 0 && dcmp(u.y) < 0 && dcmp(cross(u, v)) > 0) {\n                count++;\n            }\n        }\n        if (onseg) {\n            cout << 1 << endl;\n        }\n        else if (count % 2 == 0) {\n            cout << 0 << endl;\n        }\n        else {\n            cout << 2 << endl;\n        }\n    }\n   \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define EPS 1e-6\t\n\nstruct pt {\n\tint x, y;\n\tpt(){};\n\tpt(int _x, int _y) : x(_x), y(_y){};\n\n\n\tbool operator<(pt p) {\n\t\treturn(x < p.x || (x == p.x && y < p.y));\n\t}\n\n\tbool operator==(pt p) const {\n\t\treturn(x == p.x && y == p.y);\n\t};\n};\n\npt points[100];\n\ninline pt operator-(pt a, pt b) {\n\treturn pt(a.x-b.x, a.y-b.y);\n}\n\ninline double cross(pt a, pt b) {\n\treturn(a.x*b.y - a.y*b.x);\n}\n\ninline double dot(pt a, pt b) {\n\treturn (a.x*b.x + a.y*b.y);\n}\n\n\nvoid find(pt p, int numPoints) {\n\tpt pa, pb;\n\tbool cut = false;\n\n\t// assume that there is a horizontal line ray with \n\t// p as its origin in the easterly direction\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tif (p == points[i]) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpa = points[i] - p;\n\t\tpb = points[(i+1)%numPoints] - p;\n\n\t\t// assuming that they are orthogonal\n\t\t// check that vectors are parallel (since we are only using z, not x or y)\n\t\t// i.e. are collinear\n\t\tif (dot(pa, pb) <= EPS && cross(pa, pb) == 0) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\n\t\t// otherwise check if p-ray cuts across ab\n\t\tif (pa.y < pb.y) {\n\t\t\tpt temp = pa;\n\t\t\tpa = pb;\n\t\t\tpb = temp;\n\t\t}\n\n\t\t// pa points more up\n\t\t// pb points more down\n\t\t// i.e. ab is a vaguely vertical interval\n\t\tif (pa.y >= 0 && pb.y < 0) {\n\t\t\t// p-ray cuts between a and b\n\t\t\tif (cross(pa,pb) > 0) cut = (!cut);\n\t\t}\n\n\t\t\t\t\n\t}\n\tif (cut) {\n\t\tprintf(\"2\\n\");\n\t} else {\n\t\tprintf(\"0\\n\");\n\t}\n}\n\nint main() {\n\tint numPoints, numTests, val, a, b;\n\tscanf(\"%d\", &numPoints);\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tpoints[i] = pt(a, b);\n\t}\n\n\tscanf(\"%d\", &numTests);\n\tfor (int i = 0; i < numTests; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tfind(pt(a,b), numPoints);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <bitset>\n#include <tuple>\n#include <cassert>\n#include <exception>\n#include <iomanip>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll,ll> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\n#define rep(i,a,n) for(ll i = (a);i < (n);i++)\n#define per(i,a,n) for(ll i = (a);i > (n);i--)\n#define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n#define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define pb push_back\n#define mp make_pair\n#define all(c) (c).begin(),(c).end()\n#define sz size()\n#define print(X) cout << (X) << endl\n#define fprint(NUM,X) cout << fixed << setprecision(NUM) << (X) << endl\n#define fprints(NUM,X,Y) cout << fixed << setprecision(NUM) << (X) << \" \" << (Y) << endl\nconst ll INF = 1e+9+7;\nll n,m,l;\nstring s,t;\nll d[200010],dp[550][550];\ndouble w[1000],v[1000];\ndouble box[200010];\n\nnamespace Geometry{\n  #define EPS (1e-10)\n  #define equals(a,b) (fabs((a)-(b)) < EPS)\n\n  class Point{\n  public:\n    double x,y;\n\n    Point(double x = 0,double y = 0): x(x),y(y){}\n    Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n    Point operator * (double a){ return Point(a * x , a * y); }\n    Point operator / (double a){ return Point(x / a , y / a); }\n\n    double abs(){ return sqrt(norm()); }\n    double norm(){ return x * x + y * y; }\n\n    bool operator < (const Point &p) const{\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n      return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n    }\n\n    friend ostream& operator << (ostream &os,Point &p){\n      return os << p.x << \" \" << p.y;\n    }\n\n    friend istream& operator >> (istream &is,Point &p){\n      return is >> p.x >> p.y;\n    }\n  };\n  typedef Point Vector;\n\n  struct Segment{\n    Point p1,p2;\n    Segment(){};\n    Segment(Point p1,Point p2): p1(p1) , p2(p2){};\n    friend ostream& operator << (ostream &os,Segment &p){\n      return os << p.p1.x << \" \" << p.p1.y << \" \" << p.p2.x << \" \" << p.p2.y;\n    }\n\n    friend istream& operator >> (istream &is,Segment &p){\n      return is >> p.p1.x >> p.p1.y >> p.p2.x >> p.p2.y;\n    }\n  };\n  typedef Segment Line;\n\n  class Circle{\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n    friend ostream& operator << (ostream &os,Circle &c){\n      return os << c.c.x << c.c.y << c.r;\n    }\n\n    friend istream& operator >> (istream &is,Circle &c){\n      return is >> c.c.x >> c.c.y >> c.r;\n    }\n  };\n\n  typedef vector<Point> Polygon;\n\n  double norm(Vector a){\n    return  a.x * a.x + a.y * a.y;\n  }\n\n  double abs(Vector a){\n    return sqrt(norm(a));\n  }\n\n  double dot(Vector a,Vector b){\n    return a.x * b.x + a.y * b.y;\n  }\n\n  double cross(Vector a,Vector b){\n    return a.x * b.y - a.y * b.x;\n  }\n\n  bool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n  }\n\n  bool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1 - a1,b1 - b2);\n  }\n\n  bool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n  }\n\n  bool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n  }\n\n  bool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1 - a2 , b1 - b2);\n  }\n\n  bool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n  }\n\n  Point project(Segment s,Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1 , base / norm(base));\n    return s.p1 + base * r;\n  }\n\n  Point reflect(Segment s,Point p){\n    return p + (project(s,p) - p) * 2.0;\n  }\n\n  static const int COUNTER_CLOCKWISE = 1;\n  static const int CLOCKWISE = -1;\n  static const int ONLINE_BACK = 2;\n  static const int ONLINE_FRONT = -2;\n  static const int ON_SEGMENT = 0;\n\n  int ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS)return CLOCKWISE;\n    if(dot(a,b) < -EPS)return ONLINE_BACK;\n    if(a.norm() < b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n  }\n\n  bool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n            ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n  }\n\n  bool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n  }\n\n  double getDistance(Vector a,Vector b){\n    return abs(a - b);\n  }\n\n  double getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n  }\n\n  double getDistanceSP(Segment s,Point p){\n    if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s,p);\n  }\n\n  double getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n              min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n  }\n\n  Point getCrossPoint(Segment s1,Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base,s1.p1 - s2.p1));\n    double d2 = abs(cross(base,s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n  }\n\n  pair<Point,Point> getCrossPoints(Circle c,Line l){\n    // cassert(intersect(c,l));\n    Vector pr = project(l,c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base , pr - e * base);\n  }\n\n  double arg(Vector p){\n    return atan2(p.y,p.x);\n  }\n\n  Vector polar(double a,double r){\n    return Point(cos(r) * a, sin(r) * a);\n  }\n\n  pair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    // assert(intersect(c1,c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n  }\n\n  int contains(Polygon g,Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0;i < n;i++){\n      Point a = g[i] - p, b = g[(i + 1) % n] - p;\n      if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n      if(a.y > b.y)swap(a,b);\n      if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n    }\n    return (x ? 2 : 0);\n  }\n\n  Polygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(s.size() < 3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size() - 1]);\n    l.push_back(s[s.size() - 2]);\n\n    for(int i = 2;i < s.size();i++){\n      for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n        u.pop_back();\n      }\n      u.push_back(s[i]);\n    }\n\n    for(int i = s.size() - 3; i >= 0;i--){\n      for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n        l.pop_back();\n      }\n      l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n    return l;\n  }\n\n  #define BOTTOM 0\n  #define LEFT 1\n  #define RIGHT 2\n  #define TOP 3\n\n  class EndPoint{\n  public:\n    Point p;\n    int seg,st;\n    EndPoint(){}\n    EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n    bool operator < (const EndPoint &ep) const{\n      if(p.y == ep.p.y){\n        return st < ep.st;\n      }else{\n        return p.y < ep.p.y;\n      }\n    }\n  };\n\n  EndPoint EP[2 * 100000];\n\n  int manhattanIntersection(vector<Segment> S){\n    int n = S.size();\n    for(int i = 0,k = 0;i < n;i++){\n      if(S[i].p1.y == S[i].p2.y){\n        if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n      }else if(S[i].p1.y > S[i].p2.y){\n        swap(S[i].p1,S[i].p2);\n      }\n\n      if(S[i].p1.y == S[i].p2.y){\n        EP[k++] = EndPoint(S[i].p1,i,LEFT);\n        EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n      }else{\n        EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n        EP[k++] = EndPoint(S[i].p2,i,TOP);\n      }\n    }\n\n    sort(EP,EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(1000000001);\n    int cnt = 0;\n    for(int i = 0;i < 2 * n;i++){\n      if(EP[i].st == TOP){\n        BT.erase(EP[i].p.x);\n      }else if(EP[i].st == BOTTOM){\n        BT.insert(EP[i].p.x);\n      }else if(EP[i].st == LEFT){\n        set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n        set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n        cnt += distance(b,e);\n      }\n    }\n    return cnt;\n  }\n};\n\nusing namespace Geometry;\n\nint main(){\n  cin >> n;\n  Polygon p;\n  rep(i,0,n){\n    Point a;\n    cin >> a;\n    p.pb(a);\n  }\n  cin >> m;\n  while(m--){\n    Point a;\n    cin >> a;\n    print(contains(p,a));\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// 点の内包\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n#include<cassert>\n\nusing namespace std;\n\n// 浮動小数点のゼロ判定\n#define EPS (1e-10)\n#define equals(a, b) ( fabs((a) - (b)) < EPS )\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n\n        // -----▼▼▼ 演算子のオーバーロード ▼▼▼-----\n\n        Point operator + (Point &p)\n        {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator - (Point &p)\n        {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator * (double a)\n        {\n            return Point(a * x, a * y);\n        }\n\n        Point operator / (double a)\n        {\n            return Point(x / a, y / a);\n        }\n\n        bool operator < ( const Point &p) const\n        {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator <= ( const Point &p) const\n        {\n            return x != p.x ? x <= p.x : y <= p.y;\n        }\n\n        bool operator == ( const Point &p) const\n        {\n            return fabs(x - p.x) < EPS && fabs(y -p.y) < EPS;\n        }\n\n        // -----▲▲▲ 演算子のオーバーロード ▲▲▲-----\n\n        // 22点間の距離の算出\n        double distance()\n        {\n            return sqrt( norm() );\n        }\n\n        double norm()\n        {\n            return ( x * x ) + ( y * y );\n        }\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n// 多角形の表現\ntypedef vector<Point> Polygon;\n\n// 円を表すくらす\nclass Circle\n{\n    public :\n        Point c;    // 中心\n        double r;   // 半径\n\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble cross_point(Line line, Point pp);\nVector projection(Vector a, Vector b, Vector p);\nPoint project(Segment s, Point p);\ndouble getDistanceLP(Line l, Point p);\nint ccw(Point p0, Point p1, Point p2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoint(Circle circle, Line l);\npair<Point, Point> getCrossPoint(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\n\nint main(void)\n{\n    int g, q;\n    Point p;\n    Polygon poly;\n\n    cin >> g;\n\n    for(int i = 0; i < g; i++)\n    {\n        // 各点の格納\n        cin >> p.x >> p.y;\n        // 多角形の作成\n        poly.push_back(p);;\n    }\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n        // 各点の格納\n        cin >> p.x >> p.y;\n        // 点の内包の判定処理\n        printf(\"%d\\n\", contains(poly, p));\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) - ( a.y * b.x ) );\n}\n\n// 外積の計算をする関数 2\n// 直線 : line に対する点pの外積の演算\ndouble cross_point(Line line, Point pp)\n{\n    return ( line.p2.x - line.p1.x ) * ( pp.y - line.p1.y ) - ( pp.x - line.p1.x ) * ( line.p2.y - line.p1.y );\n}\n\n// 正射影ベクトルを求める関数\n// p : 垂線の始点となる点\nVector projection(Vector a, Vector b, Vector p)\n{\n    // 正射影ベクトルの考え方より\n    // 正射影ベクトル = ( ( a, bベクトルの内積 ) / aベクトルの大きさの2乗 ) * aベクトル\n    return ( ( a * ( dot(a, b) / pow( a.distance(), 2.0 ) ) ) + p );\n}\n\n// 正射影ベクトルを求める関数 2\n// p : 垂線の始点となる点\n// 戻り値 : pからの垂線と直線：sの交点\nPoint project(Segment s, Point p)\n{\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    Point tp = base * r;\n    return s.p1 + tp;\n}\n\n\n// 点と直線の距離を求める関数\ndouble getDistanceLP(Line l, Point p)\n{\n    if( dot( l.p2 - l.p1, p - l.p1 ) < 0.0 )\n    {\n        // 内積の値が負の場合, 2つの線分のなす角が90°以上のため,\n        // 距離は, p と l.p1 の距離そのものになる\n        return ( p - l.p1 ).distance();\n    }\n\n    if( dot( l.p1 - l.p2, p - l.p2 ) < 0.0 )\n    {\n        // 内積の値が負の場合, 2つの線分のなす角が90°以上のため,\n        // 距離は, p と l.p2 の距離そのものになる\n        return ( p - l.p2 ).distance();\n    }\n\n    // 2つの線分のなす角が90°以内の時\n    return abs( cross(l.p2 - l.p1, p - l.p1) / ( l.p2 - l.p1 ).distance() );\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// 3点の関係を調査する関数\nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n\n    if( cross(a, b) > EPS )\n    {\n        // P2が半時計回りの方向にいる\n        return COUNTER_CLOCKWISE;\n    }\n    else if( cross(a, b) < -EPS )\n    {\n        // P2が時計回りの方向にいる\n        return CLOCKWISE;\n    }\n    else if( dot(a, b) < -EPS )\n    {\n        // P2が, 直線：p0p1に対して, 180°反対方向にいる\n        return ONLINE_BACK;\n    }\n    else if( a.norm() < b.norm() )\n    {\n        // p0, p1, p2 の順で同一直線上に点が並んでいる\n        return ONLINE_FRONT;\n    }\n\n    // p0, p2, p1 の順で同一直線上に点が並んでいる\n    return ON_SEGMENT;\n}\n\n// -----▼▼▼ 線分の交差判定を実施する関数群 ▼▼▼-----\n\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n            && ccw(p3, p4, p1) * ccw(p3, p4, p1) <= 0 );\n}\n\n// 線分の交点が存在するかの確認\nbool intersect(Segment s1, Segment s2)\n{\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 円の交点が存在するかの確認\nbool intersect(Circle c1, Circle c2)\n{\n    return ( ( c2.c - c1.c ).distance() <= c1.r + c2.r );\n}\n\n// -----▲▲▲ 線分の交差判定を実施する関数群 ▲▲▲-----\n\n\n// 線分の交点を求める関数\nPoint getCrossPoint(Segment s1, Segment s2)\n{\n\tPoint p0;\n    double d1, d2, t;\n\n    Vector base = s2.p2 - s2.p1;\n\n    // 外積(平行四辺形の面積)から, 点と直線の距離を求める\n    d1 = abs( cross(base, s1.p1 - s2.p1) / base.distance() );\n    d2 = abs( cross(base, s1.p2 - s2.p1) / base.distance() );\n\n    t = d1 / ( d1 + d2 );\n\n    p0 = ( s1.p2 - s1.p1 ) * t;\n\n    return s1.p1 + p0;\n}\n\n// 円と直線の交点を求める関数\npair<Point, Point> getCrossPoint(Circle circle, Line l)\n{\n    Point p0, p1;\n\n    // 円の中心からの垂線と直線：lの交点：prを求める\n    Vector pr = project(l, circle.c);\n\n    if( ( pr - circle.c ).distance() > circle.r )\n    {\n        // 円と直線に交点が存在しない時\n        return make_pair(p0, p1);\n    }\n\n    // 直線：l上の単位ベクトルを求める\n    Vector e = ( l.p2 - l.p1 ) / ( l.p2 - l.p1 ).distance();\n    // 交点：prと、円と直線の交点までの距離を求める\n    double base = sqrt( circle.r * circle.r - ( pr - circle.c ).norm() );\n\n    // 円と直線の交点を求める\n    Point eb = e * base;\n    p0 = pr - eb;\n    p1 = pr + eb;\n\n    if( p1 < p0 )\n    {\n        // 点の大小関係の調整\n        p0 = pr + eb;\n        p1 = pr - eb;\n    }\n\n    return make_pair(p0, p1);\n}\n\n// -----▼▼▼ 円の交点を求めるための関数一覧 ▼▼▼-----\n\n// 与えられたベクトルのx軸となす角を求める関数\ndouble arg(Vector v)\n{\n    return atan2( v.y, v.x ) ;\n}\n\n// x軸上の点aを, x軸回りに角度θだけ回転させた点を求める関数\nPoint polar(double a, double theta)\n{\n    return Point(cos(theta) * a, sin(theta) * a);\n}\n\n// 2つの円の交点を求める関数\npair<Point, Point> getCrossPoint(Circle c1, Circle c2)\n{\n    Point p0, p1, pa, pb;\n\n    // 円の交点が存在することの確認\n    assert(intersect(c1, c2));\n    // 円の中心間の距離を求める\n    double d = ( c2.c - c1.c ).distance();\n    // 余弦定理より, c1の半径と円の中心間の直線：dのなす角を求める\n    double a = acos( ( c1.r * c1.r + d * d - c2.r * c2.r ) / ( 2.0 * c1.r * d ) );\n    // x軸とdがなす角を求める\n    double t = arg(c2.c - c1.c);\n\n    pa = polar(c1.r, t + a);\n    p0 = c1.c + pa;\n    pb = polar(c1.r, t - a);\n    p1 = c1.c + pb;\n\n    if( p1 < p0)\n    {\n        // 表示用の大小関係の確認\n        p1 = c1.c + pa;\n        p0 = c1.c + pb;\n    }\n\n    return make_pair(p0, p1);\n}\n\n// -----▲▲▲ 円の交点を求めるための関数一覧 ▲▲▲-----\n\n// 指定された点が多角形に内包されるかを調べる関数\nint contains(Polygon g, Point p)\n{\n    int n = g.size();\n    bool x = false;\n\n    for(int i = 0; i < n; i++)\n    {\n        // 多角形の各点を, 点:pが原点となるように平行移動する\n        Point a = g[i] - p;\n        Point b = g[(i + 1) % n] - p;\n\n        if( abs( cross( a, b ) ) < EPS && dot(a, b) < EPS )\n        {\n            // aベクトル, bベクトルが同一直線上で, 方向が反対\n            // 点：pが, 多角形上の辺にいる時\n            return 1;\n        }\n\n        if( a.y > b.y )\n        {\n            // aベクトルのyの値が小さくなるようにする\n            swap(a, b);\n        }\n\n        if( a.y < EPS && EPS < b.y && cross(a, b) > EPS )\n        {\n            // aベクトルとbベクトルの終点が半直線をまたいで反対方向にある\n            // bベクトルがaベクトルに対して, 半時計回りの方向にある\n            x = !x;\n        }\n    }\n\n    return ( x ? 2 : 0 );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (n) ; i++)\nconstexpr auto INF = 2147483647;\nstatic const double EPS = pow(10,-10);\ntypedef long long ll;\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\n\n\nclass Vector2{\n  public:\n  double x, y;\n  Vector2(){}\n  Vector2(double x, double y): x(x), y(y) {}\n\n  Vector2 operator + (Vector2 v) {\n    return Vector2(x + v.x , y + v.y);\n  }\n  Vector2 operator - (Vector2 v) {\n    return Vector2(x - v.x , y - v.y);\n  }\n\n  Vector2 operator * (double d){\n    return Vector2(d*x, d*y);\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n};\n\ndouble dot(Vector2 a, Vector2 b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector2 a, Vector2 b){\n  return a.x*b.y - a.y*b.x;\n}\n\nint contain(Vector2 poly[], int n, Vector2 p){\n  bool isContain = false;\n  Vector2 a,b ;\n  rep(i,n){\n    a = poly[i] - p;\n    b = poly[(i+1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS) return ON;\n    if(a.y > b.y) swap(a,b);\n    if(a.y < EPS && b.y > EPS && cross(a,b) > EPS) isContain = !isContain;\n  }\n  return (isContain ? IN: OUT);\n}\n\nint main(){\n  Vector2 point, polygon[100];\n  int n, queri;\n  cin >> n;\n  rep(i,n){\n    cin >> polygon[i].x >> polygon[i].y;\n  }\n  cin >> queri;\n  rep(i,queri){\n    cin >> point.x >> point.y;\n    cout << contain(polygon, n, point) << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\nint main() {\n\tvector<Point>vec;\n\tPoint P;\n\tint n;\n\tvec.clear();\n\tvec.push_back(P);\n\tfor (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n\tcin >> P.px >> P.py;\n\tint v = contain(vec, P);\n\tif (v == 2) { cout << \"YES\" << endl; }\n\telse { cout << \"NO\" << endl; }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <algorithm>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\ntypedef struct pt {\n    int x;\n    int y;\n    int id;\n} pt;\nconst double EPS = 1e-8;\nbool dequals(double x, double y) {\n    if (fabs(x-y) < EPS) {\n       return true;\n    }\n    return false;\n}\n\npt operator-(pt p, pt q) {\n  return {p.x - q.x, p.y - q.y, -1};\n}\npt operator+(pt p, pt q) {\n  return {p.x + q.x, p.y + q.y, -1};\n}\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\nbool straight(pt a, pt b, pt c){\n    return cross(b - a, c - a) == 0;\n}\nbool operator<(pt a, pt b) {\n    return a.x < b.x;\n}\ndouble sq(double a) { return a * a; }\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nvector<pt> half_hull(vector<pt> pts) {\n  vector<pt> res;\n  for (int i = 0; i < pts.size(); i++) {\n    // ccw means we have a left turn; we don't want that\n    while (res.size() >= 2 &&\n           ccw(pts[i], res[res.size()-1], res[res.size()-2])) {\n      res.pop_back();\n    }\n    res.push_back(pts[i]);\n  }\n  return res;\n}\n\nvector<pt> convex_hull(vector<pt> pts) {\n  sort(pts.begin(), pts.end());\n  vector<pt> top = half_hull(pts);\n  reverse(pts.begin(), pts.end());\n  vector<pt> bottom = half_hull(pts);\n  top.pop_back();\n  bottom.pop_back();\n  vector<pt> res(top.begin(), top.end());\n  res.insert(res.end(), bottom.begin(), bottom.end());\n  return res;\n}\n\nint prevIndex(int i, int prev, int size) {\n    int k =  i - prev;\n    if (k < 0) {\n        k = size + k ;\n    }\n    return k;\n}\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n    \n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\nseg operator*(seg a, int b) {\n    return make_pair(a.a, pt({(a.b.x - a.a.x) * b, (a.b.y - a.a.y) * b, -1}));\n}\nseg getRay(seg a) {\n    pt oldb = a.b;\n    pt newb = pt{(a.b.x - a.a.x) * 10000, (a.b.y-a.a.y)*10000, -1};\n    seg ans = make_pair(oldb, newb);\n    return ans;\n}\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\nint intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n    double maxDist = 0;\n    maxDist = max(maxDist, dist(a.a, a.b));\n    maxDist = max(maxDist, dist(a.a, b.a));\n    maxDist = max(maxDist, dist(a.a, b.b));\n    maxDist = max(maxDist, dist(a.b, b.a));\n    maxDist = max(maxDist, dist(a.b, b.b));\n    maxDist = max(maxDist, dist(b.a, b.b));\n    return (maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS) ? 2 : 0;\n  }\n  return (ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b)) ? 2 : 0;\n}\n\nbool pointInSegment(pt a, seg b) {\n    if (!straight(b.a, a, b.b)) return false;\n    if (a.x <= max(b.a.x, b.b.x) && a.x >= min(b.a.x, b.b.x) &&\n        a.y <= max(b.a.y, b.b.y) && a.y >= min(b.a.y, b.b.y))\n    {   \n            return true;        \n    }\n    return false;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<pt> pts;\n    int minx = 20000, maxx = -20000, miny = 20000, maxy = -20000;\n    for (int j = 1; j<=N; j++) {\n        int x, y;\n        cin >> x >> y;\n        if (x > maxx) maxx = x;\n        if (x < minx) minx = x;\n        if (y > maxy) maxy = y;\n        if (y < miny) miny = y;\n        pts.push_back({x, y, j});\n    }\n\n    int Q;\n    cin >> Q;\n    for (int i = 0; i< Q; ++i) {\n        int x, y;\n        cin >> x >> y;\n        pt a = {x, y, -1};\n        //cout << \"QUER \" << x << \" \" << y << endl;\n        bool done = false;\n        int ans = 2;\n        if(a.x < minx || a.x > maxx || a.y > maxy || a.y < miny) {\n            cout << 0 << endl;\n            continue;\n        }\n        int intersects = 0;\n        seg ray = make_pair(a, pt{10001, a.y});\n        for (int j = 0; j < pts.size() - 1 && !done; j++) {\n            if (pointInSegment(a, make_pair(pts[j], pts[j+1])))\n            {\n                done = true;\n                ans = 1;\n                break;\n            }\n            // if (((pts[j].y <= a.y) && (pts[j+1].y > a.y))\n            //     || ((pts[j].y > a.y) && (pts[j+1].y <= a.y)))\n            //     {\n            //         double t = (double)(a.y-pts[j].y) / (pts[j+1].y - pts[j].y);\n            //         if (a.x < pts[j].x + t * (pts[j+1].x - pts[j].x))\n            //             intersects++;\n            //     }\n            \n            //cout << \"ray is \" << ray.a.x << \" \" << ray.a.y << \" -> \" << ray.b.x << \" \" << ray.b.y << endl;\n            seg edge = make_pair(pts[j], pts[j+1]);\n            if (pointInSegment(a, edge)) {\n                cout << 1 << endl;\n                done = true;\n                break;\n            }            \n            if (intersect(ray, edge) == 2) {\n                intersects++;\n            }            \n        }\n        if (pointInSegment(a, make_pair(pts[pts.size()-1], pts[0])))\n        {\n            done = true;\n            ans = 1;\n        }\n        if (done) {\n            cout << ans << endl;\n            continue;;\n        }\n        // int lastelem = pts.size() - 1;;\n        // if (((pts[lastelem].y <= a.y) && (pts[0].y > a.y))\n        //         || ((pts[lastelem].y > a.y) && (pts[0].y <= a.y)))\n        // {\n        //     double t = (double)(a.y-pts[lastelem].y) / (pts[0].y - pts[lastelem].y);\n        //     if (a.x < pts[lastelem].x + t * (pts[0].x - pts[lastelem].x))\n        //         intersects++;\n        // }\n        seg edge = make_pair(pts[0], pts[pts.size()-1]);\n        if (pointInSegment(a, edge)) {\n            cout << 1 << endl;\n            done = true;\n            break;\n        }            \n        if (intersect(ray, edge) == 2) {\n            intersects++;\n        }  \n\n        if (done) continue;\n       // cout << intersects << endl;\n        if (intersects % 2 == 1){\n            ans = 2;\n        } else {\n            ans = 0;\n        }\n        cout << ans << endl;\n    }\n}\n/*\n{\n  int i, j, c = 0;\n  for (i = 0, j = nvert-1; i < nvert; j = i++) {\n    if ( ((verty[i]>testy) != (verty[j]>testy)) &&\n\t (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )\n       c = !c;\n  }\n  return c;\n}\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define DEBUG 1\n\n#define INF (1.0/0.0)\n#define EPS 1e-10\n#define PI 3.1415926535\n#define EQ(x, y) (abs((x)-(y))<EPS)\n#define X real()\n#define Y imag()\n\ntypedef complex<double> Point;\ntypedef Point Vec;\ntypedef array<Point, 2> Line;\ntypedef vector<Point> Poly;\n\nstruct Circle {\n  Point c;\n  double r;\n};\n\nenum Geometory {ABC=-2, CW, ON_LINE, CCW, CAB, OUTSIDE, INSIDE, ERROR}; \n\nnamespace std {\n  bool operator<(Point a, Point b) {\n    if (a.X != b.X) return a.X < b.X;\n    return a.Y < b.Y;\n  }\n}\n\ndouble dot(Point a, Point b) {\n  return (conj(a)*b).X;\n}\n\ndouble cross(Point a, Point b) {\n  return (conj(a)*b).Y;\n}\n\nGeometory ccw(Point a, Point b, Point c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return CCW; // ccw\n  if (cross(b, c) < 0) return CW; // cw\n  if (dot(b, c) < 0) return CAB; // c - a - b\n  if (norm(b) < norm(c)) return ABC; // a - b - c\n  return ERROR;\n}\n\nPoint proj(Line l, Point p) {\n  Point v = l[1]-l[0];\n  double ratio = dot(v, p-l[0]) / norm(v);\n  return l[0] + ratio*v;\n}\n\nPoint refl(Line l, Point p) {\n  return p + (proj(l, p) - p) * 2.0;\n}\n\nVec rotate(Vec v, double r) {\n  return v*Vec(cos(r), sin(r));\n}\n\nbool IsOrthogonal(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(dot(v1, v2), 0.0);\n}\n\nbool IsParallel(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(cross(v1, v2), 0.0);\n}\n\nbool IntersectLL(Line l, Line m) {\n  if (!EQ(cross(l[1]-l[0], m[1]-m[0]), 0.0)) return true;\n  if (EQ(cross(l[1]-l[0], m[0]-l[0]), 0.0)) return true;\n  return false;\n}\n\nbool IntersectLS(Line l, Line s) {\n  Point b = l[0];\n  Vec v = l[1]-l[0];\n  return cross(v, s[0]-b)*cross(v, s[1]-b) < EPS;\n}\n\nbool IntersectSS(Line s, Line t) {\n  if (ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) > 0) return false;\n  if (ccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) > 0) return false;\n  return true;\n}\n\nbool IntersectLP(Line l, Point p) {\n  return EQ(cross(l[1]-p, l[0]-p), 0.0);\n}\n\nbool IntersectSP(Line s, Point p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble DistL(Line l) {\n  return abs(l[0]-l[1]);\n}\n\ndouble DistLP(Line l, Point p) {\n  return abs(p - proj(l, p));\n}\n\ndouble DistLL(Line l, Line m) {\n  if (!IntersectLL(l, m)) return 0;\n  return DistLP(l, m[0]);\n}\n\ndouble DistLS(Line l, Line s) {\n  if (IntersectLS(l, s)) return 0;\n  return min(DistLP(l, s[0]), DistLP(l, s[1]));\n}\n\ndouble DistSP(Line s, Point p) {\n  Point r = proj(s, p);\n  if (IntersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble DistSS(Line s, Line t) {\n  if (IntersectSS(s, t)) return 0;\n\n  double a = min(DistSP(s, t[0]), DistSP(s, t[1]));\n  double b = min(DistSP(t, s[0]), DistSP(t, s[1]));\n  return min(a, b);\n}\n\nLine PerpendBisect(Line seg) {\n  Point mid = (seg[0]+seg[1])/2.0;\n  return Line{mid, mid+(seg[1]-seg[0])*Vec(0, 1)};\n}\n\nPoint CrossPointLL(Line l, Line m) {\n  double A = cross(l[1]-l[0], m[1]-m[0]);\n  double B = cross(l[1]-l[0], l[1]-m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0];\n  if (abs(A) < EPS) assert(0);\n  return m[0] + B / A * (m[1]-m[0]);\n}\n\nvector<Point> CrossPointCL(Circle c, Line l) {\n  vector<Point> ret;\n  double d = DistLP(l, c.c);\n  if (d < c.r + EPS) {\n    double ratio = (d > c.r) ? 0.0 : sqrt(c.r*c.r - d*d);\n    Vec sgn = (l[0]-l[1]) / abs(l[0]-l[1]);\n    ret.push_back(proj(l, c.c) + ratio*sgn);\n    ret.push_back(proj(l, c.c) - ratio*sgn);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCS(Circle c, Line s) {\n  vector<Point> ret;\n  vector<Point> res = CrossPointCL(c, s);\n  for (Point p : res) {\n    if(ccw(s[0], p, s[1]) == ABC) ret.push_back(p);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCC(Circle c1, Circle c2) {\n  vector<Point> ret;\n  double d = abs(c1.c - c2.c);\n  double rc = (d*d + c1.r*c1.r - c2.r*c2.r) / (2*d);\n  double dfr = c1.r*c1.r - rc*rc;\n\n  if (EQ(dfr, 0.0)) dfr = 0.0;\n  else if(dfr < 0.0) return ret;\n\n  double rs = sqrt(dfr);\n  Vec sgn = (c2.c - c1.c) / d;\n  ret.push_back(c1.c + sgn*Point(rc, rs));\n  if (dfr > 0.0) ret.push_back(c1.c + sgn*Point(rc, -rs));\n  return ret;\n}\n\n// Note that ccw(a, b, c) != CCW when a, b, c are colinear\nPoly GrahamScan(vector<Point> ps) {\n  int k = 0;\n  int n = ps.size();\n  Poly ret(n*2);\n\n  sort(ps.begin(), ps.end());\n  for (int i=0; i<n; i++) {\n    while (k > 1 && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  int k_ = k;\n  for (int i=n-1; i>=0; i--) {\n    while (k > k_ && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  ret.resize(k-1);\n  return ret;\n}\n\ndouble CalcArea(Poly ps) {\n  double ret = 0.0;\n  for (int i=0; i<ps.size(); i++) {\n    ret += cross(ps[i], ps[(i+1)%ps.size()]);\n  }\n  return ret/2.0;\n}\n\nbool IsConvex(Poly ps) {\n  return GrahamScan(ps).size() == ps.size();\n}\n\nGeometory ContainsPoint(Poly poly, Point p) {\n  bool in = false;\n  int n = poly.size();\n  for (int i=0; i<n; i++) {\n    Vec a = poly[i] - p;\n    Vec b = poly[(i+1)%n] - p;\n    double cr = cross(a, b);\n\n    if (a.Y <= 0 && 0 < b.Y && cr > EPS) in ^= 1;\n    if (b.Y <= 0 && 0 < a.Y && cr < -EPS) in ^= 1;\n    if (EQ(cr, 0.0)) return ON_LINE;\n  }\n\n  if (in) return INSIDE;\n  return OUTSIDE;\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\npair<int, int> ConvexDiameterApexes(Poly ps) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  int n = ps.size();\n  int is = 0;\n  int js = 0;\n  for (int i=1; i<n; i++) {\n    if (ps[i].Y > ps[is].Y) is = i;\n    if (ps[i].Y < ps[js].Y) js = i;\n  }\n\n  int maxi, maxj;\n  double maxd = norm(ps[is]-ps[js]);\n  int i = is;\n  int j = js;\n  do {\n    Vec a = ps[i+1] - ps[i];\n    Vec b = ps[j+1] - ps[j];\n    if (cross(a, b) > -EPS) j = (j+1)%n;\n    else i = (i+1)%n;\n\n    double d = norm(ps[i]-ps[j]);\n    if (d > maxd) {\n      maxd = d;\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n\n  return make_pair(maxi, maxj);\n}\n\nLine ClosestPair(vector<Point> ps) {\n  auto CompareY = [](const Point &a, const Point &b) {\n    if (a.Y != b.Y) return a.Y < b.Y;\n    return a.X < b.X;\n  };\n\n  function<Line(Point*,int)> Rec = [&Rec, &CompareY](Point *as, int n) {\n    if (n <= 1) return Line{Point(0, 0), Point(INF, INF)};\n    \n    int m = n/2;\n    double x = as[m].X;\n    Line a = Rec(as, m);\n    Line b = Rec(as+m, n-m);\n    double mind = DistL(a);\n    Line ret = a;\n    if (DistL(b) < mind) {\n      mind = DistL(b);\n      ret = b;\n    }\n\n    sort(as, as+n, CompareY);\n    vector<Point> bs;\n    bs.reserve(n);\n    for (int i=0; i<n; i++) {\n      if (abs(as[i].X - x) >= mind) continue;\n\n      for (int j=0; j<bs.size(); j++) {\n        Point p1 = as[i];\n        Point p2 = bs[b.size()-1-j];\n        if (p1.Y - p2.Y >= mind) break;\n\n        double d = abs(p1-p2);\n        if (mind > d) {\n          mind = d;\n          ret = Line{p1, p2};\n        }\n      }\n\n      bs.emplace_back(as[i]);\n    }\n\n    return ret;\n  };\n\n  int n = ps.size();\n  assert (n >= 2);\n  sort(ps.begin(), ps.end());\n  return Rec(&ps[0], n);\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\n// <left, right> or <upper, lower>\npair<Poly, Poly> CutConvex(Poly ps, Line l) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  if (l[0].Y > l[1].Y) swap(l[0], l[1]);\n  else if (EQ(l[0].Y, l[1].Y) && l[0].X > l[1].X) swap(l[0], l[1]);\n\n  Poly left;\n  Poly right;\n  for (int i=0; i<ps.size(); i++) {\n    Point a = ps[i];\n    Point b = ps[(i+1)%ps.size()];\n\n    if (ccw(l[0], l[1], a) != CW) left.emplace_back(a);\n    else right.emplace_back(a);\n\n    Line m{a, b};\n    if (IntersectLS(l, m)) {\n      Point p = CrossPointLL(l, m);\n      left.emplace_back(p);\n      right.emplace_back(p);\n    }\n  }\n\n  return make_pair(left, right);\n}\n\nint n;\nvector<Point> ps;\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i=0; i<n; i++) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    ps.emplace_back(Point{x, y});\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n\n    Geometory ret = ContainsPoint(ps, {x, y});\n    if (ret == INSIDE) puts(\"2\");\n    else if (ret == ON_LINE) puts(\"1\");\n    else puts(\"0\");\n\n    reverse(ps.begin(), ps.end());\n    assert(ContainsPoint(ps, {x, y}) == ret);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\ndouble atan(P p){ return atan2(p.imag(),p.real()); }\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  //  printf(\"%.8f\\n\",sum);\n  if( abs(sum) < 0.001 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\ndouble atan(P p){ return atan2(p.imag(),p.real()); }\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return atan(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  //  printf(\"%.8f\\n\",sum);\n  if( abs(sum) < 0.001 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\nint main() {\n\tvector<Point>vec;\n\tPoint P;\n\tint n, q; cin >> n >> q;\n\tvec.clear();\n\tvec.push_back(P);\n\tfor (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P.px >> P.py;\n\t\tint v = contain(vec, P); cout << v << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(S a,S b){\n  return eq(0, cross( Vector(a) , Vector(b) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\ndouble distSS(S s0,S s1){\n  if( isCrossSS(s0,s1) )return 0;\n  double res0 = min( distSP( s0, s1.first ) , distSP(s0, s1.second) );\n  double res1 = min( distSP( s1, s0.first ) , distSP(s1, s0.second) );\n  return min(res0,res1);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  int Tc;\n  cin>>Tc;\n\n  vecP polygon;\n  while(Tc--){\n    polygon.push_back( input() );\n  }\n\n  int n;\n  cin>>n;\n  while(n--){\n    cout<< inPolygon( polygon , input() ) <<endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n// cout << c << endl;\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n// cout << get_position(s1, s2.p1) << \" \" << get_position(s1, s2.p2)  << endl;\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n// cout << endl;\n// cout << get_position(s2, s1.p1) << \" \" << get_position(s2, s1.p2)  << endl;\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            // poly[i].pprint();\n            // poly[(i+1)%n].pprint();\n            // cout << endl;\n            count++;\n        }\n    }\n// cout << \"s \" << count << endl;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            while (get_position(s_right, poly[i_pre]) != CCW && get_position(s_right, poly[i_pre]) != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n            }\n            int i_aft = (i + 1) % n;\n            while (get_position(s_right, poly[i_aft]) != CCW && get_position(s_right, poly[i_aft]) != CW) {\n                i_aft = (i_aft + 1) % n;\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n// cout << \"p \" << count << endl;\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n#include <cmath>            // sqrt()\n#include <algorithm>        // min()\n\nusing namespace std;\nstatic const int MAX_N = 100;\nstatic const double EPS = 1e-10;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n};\n\ntypedef Point Vector;\n\nPoint g[MAX_N];\nPoint p;\nint n;\n\ndouble\nnorm(Vector a)\n{\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble\nabs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\n\ndouble\ncross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint\nsolve()\n{\n\tbool f = false;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS)\n\t\t\treturn 1;\n\n\t\tif (a.y > b.y)\n\t\t\tswap(a, b);\n\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tf = !f;\n\t}\n\n\treturn f ? 2 : 0;\n}\n\nint\nmain(int argc, char** argv)\n{\n\tint x, y;\n\tint q;\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tg[i].x = x, g[i].y = y;\n\t}\n\n\tscanf(\"%d\", &q);\n\twhile (q--)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tp.x = x, p.y = y;\n\t\tprintf(\"%d\\n\", solve());\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint err = point(INF_d, INF_d);\n\npoint proj_SP(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl_SP(point A, point B, point P){ // reflection point of P int segment AB\n    return proj_SP(A, B, P) * 2 - P;\n}\n\nstruct line{\n    point p[2], u;\n    line(){}\n    line(point s, point t){\n        p[0] = s, p[1] = t;\n        u = p[1] - p[0];\n    }\n    point get_point(double t){\n        return point(p[0] + u * t);\n    }\n};\n\nbool parallel(line L1, line L2){ // check whether two lines L1 and L2 are parallel\n    return !dcmp(L1.u ^ L2.u);\n}\n\nbool orthogonal(line L1, line L2){ // check whether two lines L1 and L2 are orthogonal\n    return !dcmp(L1.u * L2.u);\n}\n\npair<bool, point> inter_LL(line L1, line L2){ // calculate the intersection of two lines L1 and L2\n    if (parallel(L1, L2)) return mp(false, err);\n    double t = ((L2.p[0] - L1.p[0]) ^ L2.u) / (L1.u ^ L2.u);\n    return mp(true, L1.get_point(t));\n}\n\nbool one_dimention_check(db a, db b, db c, db d){ // check whether two one-dimention segments has intersection\n    if (dcmp(a - b) > 0) swap(a, b);\n    if (dcmp(c - d) > 0) swap(c, d);\n    return dcmp(b - c) >= 0 && dcmp(a - d) <= 0; \n}\n\nbool check_SS(point A, point B, point C, point D){ // check whether two segments AB and CD has intersection\n    bool flag = one_dimention_check(A.x, B.x, C.x, D.x) && one_dimention_check(A.y, B.y, C.y, D.y);\n    double a = dcmp((A - C) ^ (D - C)), b = dcmp((B - C) ^ (D - C)),\n            c = dcmp((C - A) ^ (B - A)), d = dcmp((D - A) ^ (B - A));\n    return flag && dcmp(a * b) <= 0 && dcmp(c * d) <= 0;\n}\n// calculate the intersection point of two segments, first check and then call inter_LL to get the cross point\n\nbool inmid(db a, db b, db c){  // check whether a <= c <= b\n    return dcmp(dcmp(b - c) * dcmp(a - c)) <= 0; \n}\n\nbool inmid(point A, point B, point P){ // check whether point P is in the rectangle of segment AB\n    return inmid(A.x, B.x, P.x) && inmid(A.y, B.y, P.y);\n}\n\ndb dis_SP(point A, point B, point P){ // the minimum distance from a point P to segment AB\n    point p_proj = proj_SP(A, B, P);\n    if (inmid(A, B, p_proj)) return (P - p_proj).len();\n    else return min((P - A).len(), (P - B).len());\n}\n\ndb dis_SS(point A, point B, point C, point D){ // the minimum distance from two segments AB and CD\n    db res = INF_d;\n    if (check_SS(A, B, C, D)) res = 0;\n    res = min(res, dis_SP(A, B, C));\n    res = min(res, dis_SP(A, B, D));\n    res = min(res, dis_SP(C, D, A));\n    res = min(res, dis_SP(C, D, B));\n    return res;\n}\n\ndb poly_Area(point *poly, int n){ // calc the area of a simple polygon poly, n is the number of points.\n    //the points should be in clockwise or counter_clockwise.\n    db res = 0.0;\n    for (int i = 1; i < n - 1; i++){\n        res += (poly[i] - poly[0]) ^ (poly[i + 1] - poly[0]);\n    }\n    return fabs(res) / 2;\n}\n\nbool is_Convex(point *poly, int n){ // check whether a polygon is a convex polygon. Make sure points are in counter-clockwised order.\n    poly[n] = poly[0];\n    if (n < 3) return 1;\n    for (int i = 1; i < n; i++){\n        int tmp_dir = dcmp((poly[i] - poly[i - 1]) ^ (poly[(i + 1) % n] - poly[i]));\n        if (tmp_dir < 0) return 0;\n    }\n    return 1;\n}\n\nbool is_PonS(point A, point B, point P){ // check whether a point P is on a segment AB\n    return inmid(A, B, P) && !dcmp((P - A) ^ (B - A));\n}\n\nint is_PinPoly(point *poly, int n, point P){ // check the position relation of a point and polygon.\n    // 0: outside, 1: on a segment, 2: inside\n    int pd = 0;\n    for (int i = 0; i < n; i++){\n        point u = poly[i], v = poly[(i + 1) % n];\n        if (is_PonS(u, v, P)) return 1;\n        if (dcmp(u.y - v.y) > 0) swap(u, v);\n        if (dcmp(u.y - P.y) >= 0 || dcmp(v.y - P.y) < 0) continue;\n        if (dcmp((u - v) ^ (P - v)) < 0) pd ^= 1;\n    }\n    return pd << 1;\n}\n\nconst int N = 123;\nint n, m;\npoint p[N], x;\n\nint main(){\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        p[i].read();\n    }\n    scanf(\"%d\", &m);\n    for (int i = 0; i < m; i++){\n        x.read();\n        printf(\"%d\\n\", is_PinPoly(p, n, x));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s * x, s * y); }\n  Vector operator/(double s) { return Vector(s / x, s / y); }\n  bool operator==(Vector v) { return equals(x - v.x, 0) && equals(y - v.y, 0); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n  Vector rescale(double s) { return Vector(x, y) * (s / abs()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  // Vector unit() { return (v2 - v1) / (v2 - v1).abs(); }\n};\nclass Segment {\npublic:\n  Vector v1, v2;\n  Segment() {}\n  Segment(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  operator Line() const { return Line(v1, v2); }\n};\n\nclass Circle {\npublic:\n  Vector v;\n  double r;\n  Circle() {}\n  Circle(Vector v, double r) : v(v), r(r) {}\n  Circle(double cx, double cy, double cr) {\n    v = Vector(cx, cy);\n    r = cr;\n  }\n};\n\nclass Polygon {\npublic:\n  vector<Vector> v;\n  Polygon() {}\n  void push(Vector w) { v.push_back(w); }\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\nbool is_parrallel(Segment a, Segment b) {\n  return is_parrallel((Line)a, (Line)b);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nVector reflect(Line l, Vector v) { return v + (project(l, v) - v) * 2.0; }\n\ndouble distance(Line l, Vector v) { return (v - project(l, v)).abs(); }\ndouble distance(Vector v1, Vector v2) { return (v1 - v2).abs(); }\nbool in_segment(Segment s, Vector v) {\n  return dot(s.v2 - s.v1, v - s.v1) > 0 && dot(s.v1 - s.v2, v - s.v2) > 0;\n}\ndouble distance(Segment s, Vector v) {\n  auto m = project((Line)s, v);\n  if (in_segment(s, m)) {\n    return distance(m, v);\n  } else\n    return min(distance(s.v1, v), distance(s.v2, v));\n}\nbool opposite(Line l, Vector v1, Vector v2) {\n  auto a = l.v2 - l.v1;\n  auto b = v1 - l.v1;\n  auto c = v2 - l.v1;\n  return cross(a, b) * cross(a, c) < 0;\n}\nenum Direction {\n  ONLINE_FRONT = -2,\n  CLOCKWISE = -1,\n  ON_SEGMENT = 0,\n  COUNTER_CLOCKWISE = 1,\n  ONLINE_BACK = 2,\n};\nDirection ccw(Vector v0, Vector v1, Vector v2) {\n  auto a = v1 - v0;\n  auto b = v2 - v0;\n  if (cross(a, b) > 0)\n    return COUNTER_CLOCKWISE;\n  if (cross(a, b) < 0)\n    return CLOCKWISE;\n  if (dot(a, b) < 0)\n    return ONLINE_BACK;\n  if (a.norm() < b.norm())\n    return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nvoid printd(Direction d) {\n  switch (d) {\n  case COUNTER_CLOCKWISE:\n    printf(\"COUNTER_CLOCKWISE\\n\");\n    break;\n  case CLOCKWISE:\n    printf(\"CLOCKWISE\\n\");\n    break;\n  case ONLINE_BACK:\n    printf(\"ONLINE_BACK\\n\");\n    break;\n  case ONLINE_FRONT:\n    printf(\"ONLINE_FRONT\\n\");\n    break;\n  case ON_SEGMENT:\n    printf(\"ON_SEGMENT\\n\");\n    break;\n  }\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return ccw(s1.v1, s1.v2, s2.v1) * ccw(s1.v1, s1.v2, s2.v2) <= 0 &&\n         ccw(s2.v1, s2.v2, s1.v1) * ccw(s2.v1, s2.v2, s1.v2) <= 0;\n}\n\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) {\n    return 0;\n  }\n  return min({distance(s1, s2.v1), distance(s1, s2.v2), distance(s2, s1.v1),\n              distance(s2, s1.v2)});\n}\nVector cross_point(Segment s1, Segment s2) {\n  auto a = s1.v2 - s1.v1;\n  auto d1 = abs(cross(a, s2.v1 - s1.v1));\n  auto d2 = abs(cross(a, s2.v2 - s1.v1));\n  auto r = d1 / (d1 + d2);\n  return s2.v1 + (s2.v2 - s2.v1) * r;\n}\n\npair<Vector, Vector> cross_circle_line(Circle c, Line l) {\n  auto h = project(l, c.v);\n  auto a = (h == c.v) ? c.r : sqrt(c.r * c.r - (h - c.v).norm());\n  auto lv = l.v2 - l.v1;\n  auto b = lv * (a / lv.abs());\n  return make_pair(h + b, h - b);\n}\n\n// TODO: generalize\nVector rotate90(Vector v) { return Vector(-v.y, v.x); }\n\ndouble calc_cos(double a, double b, double c) {\n  return (b * b + c * c - a * a) / (2.0 * b * c);\n}\n\npair<Vector, Vector> cross_circles(Circle c1, Circle c2) {\n  double dist = distance(c1.v, c2.v);\n  double arg_cos = calc_cos(c2.r, c1.r, dist);\n  double arg_sin = sqrt((1.0 + arg_cos) * (1.0 - arg_cos));\n  Vector cv = (c2.v - c1.v);\n  Vector mv = c1.v + cv.rescale(c1.r * arg_cos);\n  Vector hv = rotate90(cv).rescale(c1.r * arg_sin);\n  return make_pair(mv - hv, mv + hv);\n}\n\nvoid sort_ans(Vector &a, Vector &b) {\n  if (equals(a.x - b.x, 0)) {\n    if (b.y < a.y)\n      swap(a, b);\n  } else {\n    if (b.x < a.x)\n      swap(a, b);\n  }\n}\n\nint contains(Polygon pol, Vector v) {\n  // in:2, on:1, otherwise:0\n  const int in = 2;\n  const int on = 1;\n  const int otherwise = 0;\n  int count = 0;\n  for (int i = 0; i < pol.v.size(); i++) {\n    auto v1 = pol.v[i] - v;\n    auto v2 = pol.v[(i + 1) % pol.v.size()] - v;\n    if (v1.y > v2.y)\n      swap(v1, v2);\n    if (equals(cross(v1, v2), 0) && dot(v1, v2) < EPS)\n      return on;\n    if (cross(v1, v2) > EPS && (v1.y * v2.y < 0 || equals(v1.y, 0)))\n      count++;\n  }\n  return (count % 2 == 0) ? otherwise : in;\n}\n\nint main() {\n  int np;\n  cin >> np;\n  auto pol = Polygon();\n  for (int i = 0; i < np; i++) {\n    int x, y;\n    cin >> x >> y;\n    pol.push(Vector(x, y));\n  }\n\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    int x, y;\n    cin >> x >> y;\n    cout << contains(pol, Vector(x, y)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\n#define x first\n#define y second\n\nusing namespace std;\ntypedef pair<double, double> pt;\nconst double e = 1e-8;\nconst double X = 1e4 + 1;\n\npt operator-(pt a, pt b) {\n    return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= e;\n}\n\nbool le(double x, double y) {\n  return x < y or fabs(x - y) <= e;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) > 0;\n}\n\ndouble sq(double d) {\n  return d * d;\n}\n\ndouble dist(pt A, pt B) {\n  return sqrt(sq(A.x - B.x) + sq(A.y - B.y));\n}\n\nbool intersect(pt A, pt B, pt C, pt D) {\n  return ccw(A, B, C) != ccw(A, B, D) and ccw(C, D, A) != ccw(C, D, B);\n}\n\nbool on_line(pt A, pt B, pt C) {\n  return fabs(dist(A, C) + dist(B, C) - dist(A, B)) <= e;\n}\n\nint contains(vector<pt> shape, pt C) {\n\n  int intersections = 0;\n  bool on_segment = false;\n  pt D = {C.x, X};\n\n  for (int i = 0; i < shape.size(); i++) {\n\n    pt A = shape[i];\n    pt B = shape[(i + 1) % shape.size()];\n\n    bool j = intersect(A, B, C, D);\n    intersections += j;\n    on_segment |= on_line(A, B, C);\n    /*\n    printf(\"(%.0f %.0f) - (%.0f %.0f): (%.1f %.1f) = %d\\n\",\n        A.x, A.y, B.x, B.y, C.x, C.y, j\n    );\n    */\n  }\n\n  if (on_segment) return 1;\n  else if (intersections % 2 == 0) return 0;\n  else return 2;\n\n}\n\nint main() {\n\n  vector<pt> shape;\n\n  int g;\n  cin >> g;\n  for (int i = 0; i < g; ++i) {\n    double x, y;\n    cin >> x >> y;\n    shape.emplace_back(x, y);\n  }\n\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    double x, y;\n    cin >> x >> y;\n    cout << contains(shape, {x, y}) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<iomanip>\nconst double EPS=1e-10;\nbool eq(double a,double b){return abs(a-b)<EPS;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x_=0,double y_=0):x(x_),y(y_){}\n\tPoint operator-()const{return Point(-x,-y);}\n\tPoint operator+(const Point&p)const{return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point&p)const{return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k)const{return Point(x*k,y*k);}\n\tPoint operator/(const double k)const{return Point(x/k,y/k);}\n\tbool operator<(const Point&p)const{return eq(x,p.x)?y<p.y:x<p.x;}\n\tbool operator==(const Point&p)const{return eq(x,p.x)&&eq(y,p.y);}\n};\nistream&operator>>(istream&is,Point&p){return is>>p.x>>p.y;}\nostream&operator<<(ostream&os,const Point&p){return os<<fixed<<setprecision(9)<<p.x<<' '<<p.y;}\nstruct Line{\n\tPoint p1,p2;\n\tLine(Point p1_=Point(),Point p2_=Point()):p1(p1_),p2(p2_){}\n};\nstruct Segment:Line{\n\tSegment(Point p1_=Point(),Point p2_=Point()):Line(p1_,p2_){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n\tCircle(Point o_=Point(),double r_=0):o(o_),r(r_){}\n};\nusing Polygon=vector<Point>;\n//function list begin\nPoint vec(const Line&);\ndouble norm(const Point&);\ndouble norm(const Line&);\ndouble abs(const Point&);\ndouble abs(const Line&);\ndouble arg(const Point&);\ndouble arg(const Line&);\ndouble arg(const Point&,const Point&,const Point&);//a->b->c\ndouble dot(const Point&,const Point&);\ndouble cross(const Point&,const Point&);\nPoint polar(const double,const double);\nPoint rotate(const Point&,const double);\nenum{ONLINE_FRONT=-2,CLOCKWISE=-1,ON_SEGMENT=0,COUNTER_CLOCKWISE=1,ONLINE_BACK=2};\nint ccw(const Point&,const Point&,const Point&);\nint ccw(const Line&,const Point&);\nbool orthogonal(const Point&,const Point&);\nbool orthogonal(const Line&,const Line&);\nbool parallel(const Point&,const Point&);\nbool parallel(const Line&,const Line&);\nbool intersect(const Line&,const Point&);\nbool intersect(const Line&,const Line&);\nbool intersect(const Segment&,const Point&);\nbool intersect(const Segment&,const Segment&);\nbool intersect(const Line&,const Segment&);\nbool intersect(const Segment&,const Line&);\nbool intersect(const Circle&,const Point&);\nint intersect(const Circle&,const Line&);//count contacts\nint intersect(const Circle&,const Segment&);\nint intersect(const Circle&,const Circle&);\ndouble distance(const Point&,const Point&);\ndouble distance(const Line&,const Point&);\ndouble distance(const Line&,const Line&);\ndouble distance(const Segment&,const Point&);\ndouble distance(const Segment&,const Segment&);\ndouble distance(const Line&,const Segment&);\ndouble distance(const Segment&,const Line&);\ndouble distance(const Circle&,const Point&);\ndouble distance(const Circle&,const Line&);\ndouble distance(const Circle&,const Segment&);\ndouble distance(const Circle&,const Circle&);\nPoint projection(const Line&,const Point&);\nPoint reflection(const Line&,const Point&);\nPoint crosspoint(const Line&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Segment&);\npair<Point,Point>crosspoint(const Circle&,const Circle&);\npair<Point,Point>tangent(const Circle&,const Point&);\nvector<Line>tangent(const Circle&,const Circle&);\nbool is_convex(const Polygon&);\nPolygon convex_full(Polygon);\nenum{OUT,ON,IN};\nint contain(const Polygon&,const Point&);\nint contain(const Circle&,const Point&);\nPolygon convex_cut(const Polygon&,const Line&);\ndouble area(const Polygon&);\ndouble area(const Polygon&,const Line&);\ndouble area(const Polygon&,const Circle&);\n//function list end\nPoint vec(const Line&s){return s.p2-s.p1;}\ndouble norm(const Point&p){return p.x*p.x+p.y*p.y;}\ndouble norm(const Line&s){return norm(vec(s));}\ndouble abs(const Point&p){return hypot(p.x,p.y);}\ndouble abs(const Line&s){return abs(vec(s));}\ndouble arg(const Point&p){return atan2(p.y,p.x);}\ndouble arg(const Line&s){return arg(vec(s));}\ndouble arg(const Point&a,const Point&b,const Point&c){\n\tdouble A=arg(b-a),B=arg(c-b);\n\tdouble theta=abs(A-B);\n\treturn min(theta,2*M_PI-theta);\n}\ndouble dot(const Point&a,const Point&b){return a.x*b.x+a.y*b.y;}\ndouble cross(const Point&a,const Point&b){return a.x*b.y-a.y*b.x;}\nPoint polar(const double r,const double theta){return Point(cos(theta),sin(theta))*r;}\nPoint rotate(const Point&p,const double theta){\n\treturn Point(p.x*cos(theta)-p.y*sin(theta),p.x*sin(theta)+p.y*cos(theta));\n}\nint ccw(const Point&a,const Point&b,const Point&c){\n\tPoint p=b-a,q=c-a;\n\treturn cross(p,q)>EPS?COUNTER_CLOCKWISE\n\t\t:cross(p,q)<-EPS?CLOCKWISE\n\t\t:dot(p,q)<0?ONLINE_BACK\n\t\t:norm(p)<norm(q)?ONLINE_FRONT\n\t\t:ON_SEGMENT;\n}\nint ccw(const Line&s,const Point&p){return ccw(s.p1,s.p2,p);}\nbool orthogonal(const Point&a,const Point&b){return eq(dot(a,b),0);}\nbool orthogonal(const Line&s,const Line&t){return orthogonal(vec(s),vec(t));}\nbool parallel(const Point&a,const Point&b){return eq(cross(a,b),0);}\nbool parallel(const Line&s,const Line&t){return parallel(vec(s),vec(t));}\nbool intersect(const Line&s,const Point&p){return eq(cross(vec(s),p-s.p1),0);}\nbool intersect(const Line&s,const Line&t){return !parallel(s,t)||intersect(s,t.p1);}\nbool intersect(const Segment&s,const Point&p){return ccw(s,p)==ON_SEGMENT;}\nbool intersect(const Segment&s,const Segment&t){\n\treturn ccw(s,t.p1)*ccw(s,t.p2)<=0&&ccw(t,s.p1)*ccw(t,s.p2)<=0;\n}\nbool intersect(const Line&s,const Segment&t){\n\treturn cross(vec(s),t.p1-s.p1)*cross(vec(s),t.p2-s.p1)<EPS;\n}\nbool intersect(const Segment&s,const Line&t){return intersect(t,s);}\nbool intersect(const Circle&c,const Point&p){return eq(distance(c.o,p),c.r);}\nint intersect(const Circle&c,const Line&s){\n\tdouble d=distance(s,c.o);\n\treturn eq(d,c.r)?1:d<c.r?2:0;\n}\nint intersect(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn distance(c.o,h)>c.r+EPS?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?0\n\t\t:d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS?1\n\t\t:intersect(s,h)?distance(c.o,h)<c.r-EPS?2:1\n\t\t:0;\n}\nint intersect(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\treturn eq(d,a.r+b.r)?3:d>a.r+b.r?4:eq(d,abs(a.r-b.r))?1:d>abs(a.r-b.r)?2:0;\n}\ndouble distance(const Point&a,const Point&b){return abs(a-b);}\ndouble distance(const Line&s,const Point&p){return distance(p,projection(s,p));}\ndouble distance(const Line&s,const Line&t){return intersect(s,t)?0:distance(s,t.p1);}\ndouble distance(const Segment&s,const Point&p){\n\treturn distance(p,\n\t\tdot(vec(s),p-s.p1)<0?s.p1\n\t\t:dot(-vec(s),p-s.p2)<0?s.p2\n\t\t:projection(s,p)\n\t);\n}\ndouble distance(const Segment&s,const Segment&t){\n\treturn intersect(s,t)?0:min({\n\t\tdistance(s,t.p1),distance(s,t.p2),\n\t\tdistance(t,s.p1),distance(t,s.p2)\n\t});\n}\ndouble distance(const Line&s,const Segment&t){\n\treturn intersect(s,t)?0:min(distance(s,t.p1),distance(s,t.p2));\n}\ndouble distance(const Segment&s,const Line&t){return distance(t,s);}\ndouble distance(const Circle&c,const Point&p){return abs(distance(c.o,p)-c.r);}\ndouble distance(const Circle&c,const Line&s){return max(distance(s,c.o)-c.r,0.);}\ndouble distance(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn intersect(c,s)?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?c.r-max(d1,d2)\n\t\t:intersect(s,h)?distance(c.o,h)-c.r\n\t\t:min(distance(c.o,s.p1),distance(c.o,s.p2))-c.r;\n}\ndouble distance(const Circle&a,const Circle&b){return max(distance(a.o,b.o)-a.r-b.r,0.);}\nPoint projection(const Line&s,const Point&p){\n\treturn s.p1+vec(s)*dot(p-s.p1,vec(s))/norm(s);\n}\nPoint reflection(const Line&s,const Point&p){return projection(s,p)*2-p;}\nPoint crosspoint(const Line&s,const Line&t){\n\tdouble d1=abs(cross(vec(s),t.p1-s.p1));\n\tdouble d2=abs(cross(vec(s),t.p2-s.p1));\n\treturn t.p1+vec(t)*(d1/(d1+d2));\n}\npair<Point,Point>crosspoint(const Circle&c,const Line&s){\n\tPoint h=projection(s,c.o);\n\tPoint e=vec(s)/abs(s)*sqrt(c.r*c.r-norm(h-c.o));\n\treturn minmax(h-e,h+e);\n}\npair<Point,Point>crosspoint(const Circle&c,const Segment&s){\n\tpair<Point,Point>p=crosspoint(c,Line(s));\n\treturn intersect(c,s)==2?p\n\t\t:intersect(s,p.first)?make_pair(p.first,p.first)\n\t\t:make_pair(p.second,p.second);\n}\npair<Point,Point>crosspoint(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\tdouble alpha=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble theta=arg(b.o-a.o);\n\treturn minmax(a.o+polar(a.r,theta+alpha),a.o+polar(a.r,theta-alpha));\n}\npair<Point,Point>tangent(const Circle&c,const Point&p){\n\treturn crosspoint(c,Circle(p,sqrt(norm(c.o-p)-c.r*c.r)));\n}\nvector<Line>tangent(const Circle&a,const Circle&b){\n\tvector<Line>ret;\n\tdouble g=distance(a.o,b.o);\n\tif(eq(g,0))return ret;\n\tPoint u=(b.o-a.o)/g;\n\tPoint v=rotate(u,M_PI/2);\n\tfor(int s:{-1,1}){\n\t\tdouble h=(a.r+b.r*s)/g;\n\t\tif(eq(h,0))ret.emplace_back(a.o+u*a.r,a.o+u*a.r+v);\n\t\telse if(1-h*h>0){\n\t\t\tPoint U=u*h,V=v*sqrt(1-h*h);\n\t\t\tret.emplace_back(a.o+(U+V)*a.r,b.o-(U+V)*b.r*s);\n\t\t\tret.emplace_back(a.o+(U-V)*a.r,b.o-(U-V)*b.r*s);\n\t\t}\n\t}\n\treturn ret;\n}\nbool is_convex(const Polygon&P){\n\tfor(int i=0;i<P.size();i++)\n\t\tif(ccw(P[i],P[(i+1)%P.size()],P[(i+2)%P.size()])==CLOCKWISE)return false;\n\treturn true;\n}\nPolygon convex_full(Polygon P){\n\tif(P.size()<=2)return P;\n\tsort(P.begin(),P.end());\n\tPolygon ret(2*P.size());\n\tint k=0;\n\tfor(const Point&p:P){\n\t\twhile(k>=2&&ccw(ret[k-2],ret[k-1],p)!=COUNTER_CLOCKWISE)k--;\n\t\tret[k++]=p;\n\t}\n\tint t=k;\n\treverse(P.begin(),P.end());\n\tfor(const Point&p:P){\n\t\twhile(k>=t+1&&ccw(ret[k-2],ret[k-1],p)!=COUNTER_CLOCKWISE)k--;\n\t\tret[k++]=p;\n\t}\n\tret.resize(k-1);\n\treturn ret;\n}\nint contain(const Polygon&P,const Point&p){\n\tbool in=false;\n\tfor(int i=0;i<P.size();i++){\n\t\tSegment s(P[i],P[(i+1)%P.size()]);\n\t\tif(intersect(s,p))return ON;\n\t\telse{\n\t\t\tPoint a=s.p1-p,b=s.p2-p;\n\t\t\tif(a.y>b.y)swap(a,b);\n\t\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)in=!in;\n\t\t}\n\t}\n\treturn in?IN:OUT;\n}\nint contain(const Circle&c,const Point&p){\n\tdouble d=distance(c.o,p);\n\treturn eq(d,c.r)?ON:d<c.r?IN:OUT;\n}\nPolygon convex_cut(const Polygon&P,const Line&s){}\ndouble area(const Polygon&P){\n\tdouble ret=0;\n\tfor(int i=0;i<P.size();i++)ret+=cross(P[i],P[(i+1)%P.size()]);\n\treturn ret/2;\n}\ndouble area(const Polygon&P,const Line&s){return area(convex_cut(P,s));}\ndouble area(const Polygon&P,const Circle&c){}\nmain(){\n\tint n;\n\tPolygon P;\n\tfor(cin>>n;n--;)\n\t{\n\t\tPoint p;cin>>p;P.push_back(p);\n\t}\n\tint q;\n\tfor(cin>>q;q--;)\n\t{\n\t\tPoint p;cin>>p;cout<<contain(P,p)<<endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n//#define ll long long\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n#define rep(i, n) REP(i, 0, n)\n#define rep_rev(i, n) for (int (i) = (int)(n) - 1 ; (i) >= 0 ; --(i))\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define all(x) (x).begin(),(x).end()\nll t1,t2;\nconst ll mod = 1000000007;\nconst int INF = 1e9;\nconst ll INFLONG = 1e18;\nvoid swap(ll *x,ll *y){\n  ll tmp;\n  tmp = *x;\n  *x = *y;\n  *y = tmp;\n}\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nclass Point {\npublic:\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point():x(0),y(0){}\n\n    Point operator + (Point p) {return Point(x + p.x,y + p.y);}\n    Point operator - (Point p ){return Point(x - p.x,y - p.y);}\n    Point operator * (double a){return Point(x*a,y*a);}\n    Point operator / (double a){return Point(x/a,y/a);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x * x + y * y;}\n\n    bool operator < (const Point & p) const {\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n      return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    void set(double x,double y) {\n      this->x = x;\n      this->y = y;\n    }\n\n    void rotateR(){\n      double xt = x;\n      double yt = y;\n      x = yt;\n      y = -xt;\n    }\n    void rotateL(){\n      double xt = x;\n      double yt = y;\n      x = -yt;\n      y = xt;\n    }\n};\n\nstruct Segment{\n    Point p1,p2;\n};\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(),double r = 0.0):c(c),r(r){}\n};\n\n\n\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\ndouble norm(Point a){\n  return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n  return sqrt(norm(a));\n}\n\n//等しいか\nbool eq(Point a,Point b){\n  return abs(a-b) < EPS;\n}\n\n//内積\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\n//直交か\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//平行か\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//射影\nPoint project(Segment s,Point p){\n  Point vec1,vec2;\n  vec1 = s.p2 - s.p1;\n  vec2 = p - s.p1;\n  return s.p1 + vec1 * dot(vec1,vec2) / vec1.norm();\n}\n\n//反射\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p)* 2;\n}\n\n//位置関係(時計回りか,線分上かなど)\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\n//交わるか\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 &&\n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\n//交わるか\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistance(Point a,Point b){\n  return abs(a-b);\n}\n\n// Line : Point\ndouble getDistanceLP(Line l,Point p){\n  return abs((cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1)));\n}\n\n// Segment : Point\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0){\n    return abs(p - s.p1);\n  }\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0){\n    return abs(p - s.p2);\n  }\n  return getDistanceLP(s,p);\n}\n\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)){\n    return 0.0;\n  }\n  double ans = INF;\n  chmin(ans,getDistanceSP(s1,s2.p1));\n  chmin(ans,getDistanceSP(s1,s2.p2));\n  chmin(ans,getDistanceSP(s2,s1.p1));\n  chmin(ans,getDistanceSP(s2,s1.p2));\n  return ans;\n}\n\n//交わるか\nbool intersect(Circle c,Line l){\n  return c.r - getDistanceLP(l,c.c) > -EPS;\n}\n\n//円と直線の交点\npair<Point,Point> getCrossPoint(Line l,Circle c){\n  assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  if(e.x < 0 || (e.x < EPS && e.y < 0)){\n    e = e * -1;\n  }\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr - e * base,pr + e * base);\n}\n\n//交わるか\nbool intersect(Circle c1,Circle c2){\n  double dis = getDistance(c1.c,c2.c);\n  return c1.r + c2.r - dis > -EPS && abs(c1.r - c2.r) - dis < EPS;\n}\n\n//atan\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\n//極座標から平面座標へ\nVector polar(double a,double r){\n  return Point(cos(r) * a ,sin(r) * a);\n}\n\n//円と円の交点\npair<Point,Point> getCrossPoint(Circle c1,Circle c2){\n  assert(intersect(c1,c2));\n  double d = abs(c1.c-c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  //cout << d << a << t;\n  return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r,t-a));\n}\n\n//内包\n// IN:2,ON:1,OUT:0\nint contains(Polygon g,Point p){\n  ull n = g.size();\n  bool x = false;\n  rep(i,n){\n    Point a = g[i] - p;\n    Point b = g[(i+1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1; //線分上にある\n    if(a.y > b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x = !x; //3つ目の条件は、時計回りか半時計回りか\n  }\n  return (x ? 2 : 0);\n}\n\nint main() {\n  ll g,n;\n  double x,y;\n  cin >> g;\n  Polygon po(g);\n  rep(i,g){\n    cin >> x >> y;\n    po[i] = Point(x,y);\n  }\n  cin >> n;\n  vector<Point> p(n);\n  rep(i,n){\n    cin >> x >> y;\n    p[i] = Point(x,y);\n  }\n  rep(i,n){\n    cout << contains(po,p[i]) << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s * x, s * y); }\n  Vector operator/(double s) { return Vector(s / x, s / y); }\n  bool operator==(Vector v) { return equals(x - v.x, 0) && equals(y - v.y, 0); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n  Vector rescale(double s) { return Vector(x, y) * (s / abs()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  // Vector unit() { return (v2 - v1) / (v2 - v1).abs(); }\n};\nclass Segment {\npublic:\n  Vector v1, v2;\n  Segment() {}\n  Segment(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  operator Line() const { return Line(v1, v2); }\n};\n\nclass Circle {\npublic:\n  Vector v;\n  double r;\n  Circle() {}\n  Circle(Vector v, double r) : v(v), r(r) {}\n  Circle(double cx, double cy, double cr) {\n    v = Vector(cx, cy);\n    r = cr;\n  }\n};\n\nclass Polygon {\npublic:\n  vector<Vector> v;\n  Polygon() {}\n  void push(Vector w) { v.push_back(w); }\n};\n\nbool is_parrallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0);\n}\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\nbool is_parrallel(Segment a, Segment b) {\n  return is_parrallel((Line)a, (Line)b);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nVector reflect(Line l, Vector v) { return v + (project(l, v) - v) * 2.0; }\n\ndouble distance(Line l, Vector v) { return (v - project(l, v)).abs(); }\ndouble distance(Vector v1, Vector v2) { return (v1 - v2).abs(); }\nbool in_segment(Segment s, Vector v) {\n  return dot(s.v2 - s.v1, v - s.v1) > 0 && dot(s.v1 - s.v2, v - s.v2) > 0;\n}\ndouble distance(Segment s, Vector v) {\n  auto m = project((Line)s, v);\n  if (in_segment(s, m)) {\n    return distance(m, v);\n  } else\n    return min(distance(s.v1, v), distance(s.v2, v));\n}\nbool opposite(Line l, Vector v1, Vector v2) {\n  auto a = l.v2 - l.v1;\n  auto b = v1 - l.v1;\n  auto c = v2 - l.v1;\n  return cross(a, b) * cross(a, c) < 0;\n}\nenum Direction {\n  ONLINE_FRONT = -2,\n  CLOCKWISE = -1,\n  ON_SEGMENT = 0,\n  COUNTER_CLOCKWISE = 1,\n  ONLINE_BACK = 2,\n};\nDirection ccw(Vector v0, Vector v1, Vector v2) {\n  auto a = v1 - v0;\n  auto b = v2 - v0;\n  if (cross(a, b) > 0)\n    return COUNTER_CLOCKWISE;\n  if (cross(a, b) < 0)\n    return CLOCKWISE;\n  if (dot(a, b) < 0)\n    return ONLINE_BACK;\n  if (a.norm() < b.norm())\n    return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nvoid printd(Direction d) {\n  switch (d) {\n  case COUNTER_CLOCKWISE:\n    printf(\"COUNTER_CLOCKWISE\\n\");\n    break;\n  case CLOCKWISE:\n    printf(\"CLOCKWISE\\n\");\n    break;\n  case ONLINE_BACK:\n    printf(\"ONLINE_BACK\\n\");\n    break;\n  case ONLINE_FRONT:\n    printf(\"ONLINE_FRONT\\n\");\n    break;\n  case ON_SEGMENT:\n    printf(\"ON_SEGMENT\\n\");\n    break;\n  }\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return ccw(s1.v1, s1.v2, s2.v1) * ccw(s1.v1, s1.v2, s2.v2) <= 0 &&\n         ccw(s2.v1, s2.v2, s1.v1) * ccw(s2.v1, s2.v2, s1.v2) <= 0;\n}\n\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) {\n    return 0;\n  }\n  return min({distance(s1, s2.v1), distance(s1, s2.v2), distance(s2, s1.v1),\n              distance(s2, s1.v2)});\n}\nVector cross_point(Segment s1, Segment s2) {\n  auto a = s1.v2 - s1.v1;\n  auto d1 = abs(cross(a, s2.v1 - s1.v1));\n  auto d2 = abs(cross(a, s2.v2 - s1.v1));\n  auto r = d1 / (d1 + d2);\n  return s2.v1 + (s2.v2 - s2.v1) * r;\n}\n\npair<Vector, Vector> cross_circle_line(Circle c, Line l) {\n  auto h = project(l, c.v);\n  auto a = (h == c.v) ? c.r : sqrt(c.r * c.r - (h - c.v).norm());\n  auto lv = l.v2 - l.v1;\n  auto b = lv * (a / lv.abs());\n  return make_pair(h + b, h - b);\n}\n\n// TODO: generalize\nVector rotate90(Vector v) { return Vector(-v.y, v.x); }\n\ndouble calc_cos(double a, double b, double c) {\n  return (b * b + c * c - a * a) / (2.0 * b * c);\n}\n\npair<Vector, Vector> cross_circles(Circle c1, Circle c2) {\n  double dist = distance(c1.v, c2.v);\n  double arg_cos = calc_cos(c2.r, c1.r, dist);\n  double arg_sin = sqrt((1.0 + arg_cos) * (1.0 - arg_cos));\n  Vector cv = (c2.v - c1.v);\n  Vector mv = c1.v + cv.rescale(c1.r * arg_cos);\n  Vector hv = rotate90(cv).rescale(c1.r * arg_sin);\n  return make_pair(mv - hv, mv + hv);\n}\n\nvoid sort_ans(Vector &a, Vector &b) {\n  if (equals(a.x - b.x, 0)) {\n    if (b.y < a.y)\n      swap(a, b);\n  } else {\n    if (b.x < a.x)\n      swap(a, b);\n  }\n}\n\nint contains(Polygon pol, Vector v) {\n  // in:2, on:1, otherwise:0\n  const int in = 2;\n  const int on = 1;\n  const int otherwise = 0;\n  int count = 0;\n  for (int i = 0; i < pol.v.size(); i++) {\n    auto v1 = pol.v[i] - v;\n    auto v2 = pol.v[(i + 1) % pol.v.size()] - v;\n    if (equals(cross(v1, v2), 0) && dot(v1, v2) < 0) {\n      return on;\n    } else if (v1.y * v2.y < 0) {\n      count++;\n    }\n  }\n  return (count % 2 == 0) ? otherwise : in;\n}\n\nint main() {\n  int np;\n  cin >> np;\n  auto pol = Polygon();\n  for (int i = 0; i < np; i++) {\n    int x, y;\n    cin >> x >> y;\n    pol.push(Vector(x, y));\n  }\n\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    int x, y;\n    cin >> x >> y;\n    cout << contains(pol, Vector(x, y)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_3_c.cpp\n// Author: ymiyamoto\n//\n// Created on Wed Oct 25 23:54:33 2017\n//\n\n#include <algorithm>\n#include <cmath>\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(x, y) (fabs(x - y) < EPS)\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double norm()\n  {\n    return sqrt(norm2());\n  }\n\n  double dot(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.y - y * a.x;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n\n  vector_t operator/(double a)\n  {\n    return vector_t(x / a, y / a);\n  }\n\n  double arg()\n  {\n    return atan2(y, x);\n  }\n};\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void println()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y;\n  }\n\n  point_t operator+(const vector_t vec)\n  {\n    return point_t({x + vec.x, y + vec.y});\n  }\n\n  point_t operator-(const vector_t vec)\n  {\n    return point_t({x - vec.x, y - vec.y});\n  }\n\n  vector_t operator-(const point_t p)\n  {\n    return vector_t({x - p.x, y - p.y});\n  }\n\n  bool operator<(const point_t p)\n  {\n    return x == p.x ? y < p.y : x < p.x;\n  }\n\n  point_t project(point_t p1, point_t p2)\n  {\n    vector_t vec1(x - p1.x, y - p1.y);\n    vector_t vec2(p2.x - x, p2.y - y);\n    return point_t({x, y}) + vec1 * (vec1.dot(vec2) / vec1.norm2());\n  }\n\n  point_t reflect(point_t p1, point_t p2)\n  {\n    point_t proj = project(p1, p2);\n    return p2 + (proj - p2) * 2.0;\n  }\n};\n\nenum pos_t {\n  CCLOCKWISE = -1,\n  CLOCKWISE = 1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\npos_t ccw(point_t p0, point_t p1, point_t p2)\n{\n  if ((p1 - p0).cross(p2 - p0) > EPS) {\n    return CCLOCKWISE;\n  } else if ((p1 - p0).cross(p2 - p0) < -EPS) {\n    return CLOCKWISE;\n  } else if ((p1 - p0).dot(p2 - p0) < -EPS) {\n    return ONLINE_BACK;\n  } else {\n    if ((p1 - p0).norm2() < (p2 - p0).norm2()) {\n      return ONLINE_FRONT;\n    } else {\n      return ON_SEGMENT;\n    }\n  }\n}\n\nbool intersection(point_t p0, point_t p1, point_t p2, point_t p3)\n{\n  return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0) && (ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nstruct segment_t {\n  point_t a;\n  point_t b;\n\n  double distance(point_t p0)\n  {\n    if ((b - a).dot(p0 - a) < 0.0) {\n      return (p0 - a).norm();\n    } else if ((a - b).dot(p0 - b) < 0.0) {\n      return (p0 - b).norm();\n    } else {\n      return fabs((b - a).cross(p0 - a) / (b - a).norm());\n    }\n  }\n};\n\nstruct circle_t {\n  point_t p;\n  double r;\n\n  vector<point_t> cross_points(point_t p0, point_t p1)\n  {\n    vector_t v = p1 - p0;\n    vector_t e = v / v.norm();\n    point_t pproject = p0.project(p1, p);\n    double ratio = sqrt(r * r - (pproject - p).norm2());\n    return {pproject + e * ratio, pproject - e * ratio};\n  }\n};\n\nvector_t polar(double a, double r)\n{\n  return vector_t(a * cos(r), a * sin(r));\n}\n\nint32_t in_polygon(vector<point_t> polygon, point_t p)\n{\n  bool x = false;\n  for (uint32_t i = 0; i < polygon.size(); i++) {\n    vector_t a = polygon[i] - p;\n    vector_t b = polygon[(i + 1) % polygon.size()] - p;\n    if (fabs(a.cross(b)) < EPS && a.dot(b) < EPS) {\n      return 1;\n    }\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS && EPS < b.y && a.cross(b) > EPS) x = !x;\n  }\n\n  return x ? 2 : 0;\n}\n\nint32_t main()\n{\n  uint32_t n;\n  cin >> n;\n\n  vector<point_t> polygon;\n  for (uint32_t i = 0; i < n; i++) {\n    double x, y;\n    cin >> x >> y;\n    polygon.push_back({x, y});\n  }\n\n  uint32_t q;\n  cin >> q;\n\n  for (uint32_t i = 0; i < q; i++) {\n    double x, y;\n    cin >> x >> y;\n    point_t point({x, y});\n    cout << in_polygon(polygon, point) << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef ll T;\nint sgn(T x){return (x>0)-(x<0);}\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    void read(){scanf(\"%lld%lld\",&x,&y);}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    P operator * (const T&k) const {return P(x*k,y*k);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n};\nbool onPS(P p,P s,P t){\n    return sgn((t-s)^(p-s))==0&&sgn((p-s)*(p-t))<=0;\n}\ntypedef vector<P> polygon;\nint inPpolygon(P p,polygon A){\n    int res=0;\n    rep(i,0,sz(A)){\n        P u=A[i],v=A[(i+1)%sz(A)];\n        if(onPS(p,u,v)) return -1;\n        T cross = sgn((v-u)^(p-u)) , d1 = sgn(u.y-p.y) , d2 = sgn(v.y-p.y);\n        if(cross > 0 && d1 <= 0 && d2 > 0) ++res;\n        if(cross < 0 && d2 <= 0 && d1 > 0) --res;\n    }\n    return res != 0;\n}\n\nint main(){\n    int n;scanf(\"%d\",&n);\n    polygon A;\n    rep(i,0,n){\n        P p;p.read();\n        A.pb(p);\n    }\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        P p;p.read();\n        int res=inPpolygon(p,A);\n        if(res==-1) puts(\"1\");\n        else if(res==0) puts(\"0\");\n        else puts(\"2\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-5;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( dot(b,c)/abs(b)/abs(c) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.5 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <map>\n#include <utility>\n#include <vector>\n\n#define sz(z) (int)z.size()\n#define fo(i, a, b) for (auto(i) = (a); (i) < (b); (i)++)\n#define mp make_pair\n#define pb push_back\n\nusing namespace std;\n\n#define DEBUG\n\n#ifdef DEBUG\n#define D(m...) fprintf(stderr, m)\n#else\n#define D(m...)\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> ii;\n\nconst double EPS = 1e-8;\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) { return pt(a.x - b.x, a.y - b.y); }\n\nbool zero(double x) { return fabs(x) <= EPS; }\n\ndouble cross(pt a, pt b) { return a.x * b.y - a.y * b.x; }\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) { return sqrt(sq(p.x - q.x) + sq(p.y - q.y)); }\n\nvector<pt> poly;\nint n;\nint q;\n\n#define IN 2\n#define ON 1\n#define OUT 0\n\n// taken from\n// https://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html\ndouble Angle2D(double x1, double y1, double x2, double y2) {\n    double dtheta, theta1, theta2;\n    theta1 = atan2(y1, x1);\n    theta2 = atan2(y2, x2);\n    dtheta = theta2 - theta1;\n    while (dtheta > M_PI)\n        dtheta -= 2 * M_PI;\n    while (dtheta < -M_PI)\n        dtheta += 2 * M_PI;\n    return (dtheta);\n}\n\nint check(pt p) {\n    double angle = 0;\n    pt p1, p2;\n    fo(i, 0, n) {\n        p1 = poly[i] - p;\n        p2 = poly[(i + 1) % n] - p;\n        angle += Angle2D(p1.x, p1.y, p2.x, p2.y);\n        if (dist(poly[i], p) + dist(poly[(i + 1) % n], p) ==\n            dist(poly[i], poly[(i + 1) % n])) {\n            return ON;\n        }\n    }\n    if (fabs(angle) < M_PI) {\n        return OUT;\n    } else {\n        return IN;\n    }\n}\n\nint main() {\n    cin >> n;\n\n    fo(i, 0, n) {\n        double x, y;\n        cin >> x >> y;\n        poly.pb(pt(x, y));\n    }\n\n    cin >> q;\n\n    fo(i, 0, q) {\n        double x, y;\n        cin >> x >> y;\n        pt p = pt(x, y);\n        cout << check(p) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tint cn = 0;\n\tld mx = a.X;\n\tfor (int i = 0; i < n; i++)\n\t\tmx = max(mx, po[i].X);\n\tPT b(mx, a.Y);\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <cctype>\n#include <complex>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <deque>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\ninline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}\ntemplate<class T> inline T sqr(T x) {return x*x;}\n\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n#define all(a)  (a).begin(),(a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n#define pb push_back\n#define mp make_pair\n#define each(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define exist(s,e) ((s).find(e)!=(s).end())\n#define range(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)  range(i,0,n)\n#define clr(a,b) memset((a), (b) ,sizeof(a))\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\n\nconst double eps = 1e-10;\nconst double pi  = acos(-1.0);\nconst ll INF =1LL << 62;\nconst int inf =1 << 30;\n\n\n// 以下 幾何部分\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n#define mp make_pair\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef pair <P,P> L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef struct {P c;D a,b;} E; // 楕円も追加予定\ntypedef vector <P> Pol;\n\n// ソートのキー\nB cmp_x(const P &a,const P &b){ return (abs(a.X-b.X)<eps ) ?  a.Y<b.Y : a.X<b.X;}  // base x\nB cmp_y(const P &a,const P &b){ return (abs(a.Y-b.Y)<eps ) ?  a.X<b.X : a.Y<b.Y;}  // base y\nB cmp_a(const P &a,const P &b){ return (abs(arg(a)-arg(b))<eps ) ?  norm(a) < norm(b) : arg(a)<arg(b);} // base arg\n\n\n// 基本操作\n// verify\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sr(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.second-l.first;}\n\n\n// 点\nD toRagian(D degree){ return degree*pi/180.0;}\nD ang (P p){return arg(p);}\nD ang (P base, P a, P b) {return arg( (b - base) / (a - base) );} // base 中心\nP rot (P base, P a, D theta){return base+polar( abs(a-base), arg(a-base)+theta );}\n\n\n// ccw \nenum CCW{FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, MID = 16, ON=FRONT|BACK|MID };\n\nint ccw(P base, P a, P b) {              //点aと点bが与えられた問いに\n  a -= base; b -= base;\n  if (ep(a, b) > 0)   \t return LEFT;    // counter clockwise\n  if (ep(a, b) < 0)      return RIGHT;   // clockwise\n  if (ip(a, b) < 0)      return BACK;    // b--base--a on line\n  if (norm(a) < norm(b)) return FRONT;   // base--a--b on line\n  \t\t\t\t\t\t return MID;      // base--b--a on line  aとbの線分判定はこれ\n}\n\n\n\n\n// 多角形\n\nint in_polygon(Pol pol,P p){\n\tint n=pol.size();\n    int res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==MID)\n\t\t\treturn 1;\n\t\tif ((pol[i].Y <= p.Y) && (pol[(i+1)%n].Y>p.Y)){\n\t\t\tD vt=(p.Y-pol[i].Y)/(pol[(i+1)%n].Y-pol[i].Y);\n\t\t\tD dx=pol[(i+1)%n].X-pol[i].X;\n\t\t\tif(p.X < pol[i].X + vt*dx)\n                    res++;\n\t\t}else if ((pol[i].Y>p.Y)&&(pol[(i+1)%n].Y<=p.Y)){\n\t\t\tD vt=(p.Y - pol[i].Y)/(pol[(i+1)%n].Y-pol[i].Y);\n\t\t\tD dx=pol[(i+1)%n].X-pol[i].X;\n\t\t\tif(p.X <pol[i].X+vt*dx)\n\t\t\t\tres--;\n\t\t}\n    }\n\treturn res?2:0;\n}\n\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tPol pol(n);\n\trep(i,n){\n\t\tP in;\n\t\tcin >> in.X >> in.Y;\n\t\tpol[i]=in;\n\t}\n\tint q;\n\tcin >> q;\n\trep(i,q){\n\t\tP p;\n\t\tcin >> p.X >> p.Y;\n\t\tcout << in_polygon(pol,p) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n// 点が多角形 (凸とは限らない) に含まれるかどうか, O(n)\n//\n// verified:\n//   AOJ Course CGL_3_C Polygon - Polygon-Point Containment\n//     http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=jp\n//\n\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\nusing namespace std;\n\n\n////////////////////////////\n// 基本要素 (点, 線分, 円)\n////////////////////////////\n\nusing DD = double;\nconst DD INF = 1LL<<60;      // to be set appropriately\nconst DD EPS = 1e-10;        // to be set appropriately\nconst DD PI = acos(-1.0);\nDD torad(int deg) {return (DD)(deg) * PI / 180;}\nDD todeg(DD ang) {return ang * 180 / PI;}\n\n/* Point */\nstruct Point {\n    DD x, y;\n    Point(DD x = 0.0, DD y = 0.0) : x(x), y(y) {}\n    friend ostream& operator << (ostream &s, const Point &p) {return s << '(' << p.x << \", \" << p.y << ')';}\n};\ninline Point operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\ninline Point operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ninline Point operator * (const Point &p, DD a) {return Point(p.x * a, p.y * a);}\ninline Point operator * (DD a, const Point &p) {return Point(a * p.x, a * p.y);}\ninline Point operator * (const Point &p, const Point &q) {return Point(p.x * q.x - p.y * q.y, p.x * q.y + p.y * q.x);}\ninline Point operator / (const Point &p, DD a) {return Point(p.x / a, p.y / a);}\ninline Point conj(const Point &p) {return Point(p.x, -p.y);}\ninline Point rot(const Point &p, DD ang) {return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) {return Point(-p.y, p.x);}\ninline DD cross(const Point &p, const Point &q) {return p.x * q.y - p.y * q.x;}\ninline DD dot(const Point &p, const Point &q) {return p.x * q.x + p.y * q.y;}\ninline DD norm(const Point &p) {return dot(p, p);}\ninline DD abs(const Point &p) {return sqrt(dot(p, p));}\ninline DD amp(const Point &p) {DD res = atan2(p.y, p.x); if (res < 0) res += PI*2; return res;}\ninline bool eq(const Point &p, const Point &q) {return abs(p - q) < EPS;}\ninline bool operator < (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x < q.x : p.y < q.y);}\ninline bool operator > (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x > q.x : p.y > q.y);}\ninline Point operator / (const Point &p, const Point &q) {return p * conj(q) / norm(q);}\n\n/* Line */\nstruct Line : vector<Point> {\n    Line(Point a = Point(0.0, 0.0), Point b = Point(0.0, 0.0)) {\n        this->push_back(a);\n        this->push_back(b);\n    }\n    friend ostream& operator << (ostream &s, const Line &l) {return s << '{' << l[0] << \", \" << l[1] << '}';}\n};\n\n/* Circle */\nstruct Circle : Point {\n    DD r;\n    Circle(Point p = Point(0.0, 0.0), DD r = 0.0) : Point(p), r(r) {}\n    friend ostream& operator << (ostream &s, const Circle &c) {return s << '(' << c.x << \", \" << c.y << \", \" << c.r << ')';}\n};\n\n\n///////////////////////\n// 点と多角形の包含\n///////////////////////\n\n// 2: in, 1: on, 0: out\nint is_contain(const vector<Point> &pol, const Point &p) {\n    int n = (int)pol.size();\n    int isin = 0;\n    for (int i = 0; i < n; ++i) {\n        Point a = pol[i] - p, b = pol[(i+1)%n] - p;\n        if (a.y > b.y) swap(a, b);\n        if (a.y <= 0 && b.y > 0) if (cross(a, b) < 0) isin = 1-isin;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n    }\n    if (isin) return 2;\n    else return 0;\n}\n\n\n\nint main() {\n    int n; cin >> n;\n    vector<Point> pol(n);\n    for (int i = 0; i < n; ++i) cin >> pol[i].x >> pol[i].y;\n    int Q; cin >> Q;\n    for (int _ = 0; _ < Q; ++_) {\n        Point p; cin >> p.x >> p.y;\n        cout << is_contain(pol, p) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long readtype;\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n\n#ifdef LOCAL_LOGGER\n#define logger(...) fprintf(stderr, __VA_ARGS__)\n#define abortif(v, ...) if (v) {logger(\"Error in Line %d, Function '%s()'.\\nInfo: \", __LINE__, __FUNCTION__); logger(__VA_ARGS__); exit(0);}\n#else\n#define logger(...);\n#define abortif(v, ...);\n#endif\n/* }}} */\n\nconst let EPS = 1e-8;\n\nint sign(let x) { return (x < -EPS) ? -1 : (x > EPS) ? 1 : 0; }\n\nstruct Point {\n  let x, y;\n\n  friend Point operator - (Point a, Point b) {\n    return (Point) {a.x - b.x, a.y - b.y};\n  }\n  Point operator * (let k) { return (Point) {x * k, y * k}; }\n\n  friend bool operator == (Point a, Point b) {\n    return sign(a.x - b.x) == 0 && sign(a.y - b.y) == 0;\n  }\n\n  let dist() {\n    return sqrt(x * x + y * y);\n  }\n\n  friend let Times(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n  }\n\n  Point Rotate(let sink, let cosk) {\n    return (Point) {\n      x * cosk - y * sink, x * sink + y * cosk\n    };\n  }\n\n  Point Rotate(let k) {\n    return Rotate(sin(k), cos(k));\n  }\n};\n\ntypedef Point Vec;\n\nstruct Segment {\n  Point s, e;\n  Vec v;\n  Segment() {}\n  Segment(Point a, Point b) {\n    s = a, e = b, v = b - a;\n  }\n  Segment(Point a, Point b, Vec c) {\n    s = a, e = b, v = c;\n  }\n\n  let CrossX() {\n    let res = (e - v * (e.y / v.y)).x;\n    return res;\n  }\n\n  friend bool InSegment(Segment s, Point p) {\n    if (sign(Times(s.v, p - s.s)) == 0) {\n      if (sign(p.x - min(s.s.x, s.e.x)) < 0) return false;\n      if (sign(p.y - min(s.s.y, s.e.y)) < 0) return false;\n      if (sign(p.x - max(s.s.x, s.e.x)) > 0) return false;\n      if (sign(p.y - max(s.s.y, s.e.y)) > 0) return false;\n      return true;\n    }\n    return false;\n  }\n};\n\nstruct Polygon {\n  vector<Point> p;\n\n  void Add(Point x) { p.push_back(x); }\n\n  Point &operator [] (int k) { return p.at(k); }\n\n  Polygon operator - (Vec k) {\n    Polygon x;\n    for (size_t i = 0; i < this->p.size(); ++i)\n      x.Add(this->p.at(i) - k);\n    return x;\n  }\n\n  Polygon Rotate(let sink, let cosk) {\n    Polygon x;\n    for (size_t i = 0; i < this->p.size(); ++i)\n      x.Add(this->p.at(i).Rotate(sink, cosk));\n    return x;\n  }\n\n  Polygon Rotate(let k) {\n    return Rotate(sin(k), cos(k));\n  }\n\n  Polygon Rotate(Vec k) {\n    let z = k.dist();\n    return Rotate(k.y / z, k.x / z);\n  }\n\n  friend int CheckPIP(Polygon poly, Point p) {\n    poly.Add(poly[0]);\n    for (size_t i = 0; i < poly.p.size() - 1; ++i) {\n      if (InSegment((Segment) {poly[i], poly[i + 1]}, p)) return 1;\n    }\n\n    Polygon x = poly - p;\n    int have = 0;\n    for (size_t i = 0; i < x.p.size() - 1; ++i) {\n      if (sign(x[i].x) < 0 && sign(x[i + 1].x) < 0) continue;\n      if (sign(x[i].y) > 0 && sign(x[i + 1].y) > 0) continue;\n      if (sign(x[i].y) < 0 && sign(x[i + 1].y) < 0) continue;\n      if (sign(((Segment) {x[i], x[i + 1]}).CrossX()) < 0) continue;\n      have++;\n    }\n    if (have & 1) return 2;\n    return 0;\n  }\n\n};\n\nPoint ReadPoint() {\n  Point p;\n  scanf(\"%Lf%LF\", &p.x, &p.y);\n  return p;\n}\n\nPolygon ReadPolygon() {\n  Polygon poly;\n  int g = read();\n  for (int i = 1; i <= g; ++i)\n    poly.Add(ReadPoint());\n  return poly;\n}\n\nPolygon poly;\n\nint main() {\n// #ifndef ONLINE_JUDGE\n//   freopen(\"CGL_3_C.in\", \"r\", stdin);\n//   freopen(\"CGL_3_C.out\", \"w\", stdout);\n// #endif\n// #ifdef LOCAL_LOGGER\n//   freopen(\"CGL_3_C.log\", \"w\", stderr);\n// #endif\n  srand(time(0));\n  let angle = ((let) rand() / RAND_MAX) * acos(-1.0);\n\n  poly = ReadPolygon().Rotate(angle);\n\n  int q = read();\n  while (q--) {\n    Point p = ReadPoint().Rotate(angle);\n    printf(\"%d\\n\", CheckPIP(poly, p));\n  }\n  return 0;\n}\n\n/* ==== Makefile ==== {{{\nCompileAndRun:\n\tmake Compile\n\tmake Run\n\nCompile:\n\tg++ -o CGL_3_C CGL_3_C.cpp -g -Wall -DLOCAL_LOGGER\n\nCompileUF:\n\tg++ -o CGL_3_C CGL_3_C.cpp -g -Wall -DLOCAL_LOGGER -fsanitize=undefined\n\nRun:\n\t./CGL_3_C < CGL_3_C.in > CGL_3_C.out\n==================\n}}} */\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define X real()\n#define Y imag()\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\n\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\ntypedef vector<P> G;\n\nenum { OUT, ON, IN };\nint contains(const G &g, const P &p) {\n  bool in = false;\n  for (int i = 0; i < g.size(); ++i) {\n    P a = curr(g,i) - p, b = next(g,i) - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b))\n      if (cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nint main() {\n  int N, Q;\n  cin >>N;\n  G g(N);\n  REP(i, N){\n    int x, y; cin >>x >>y;\n    g[i] = P(x, y);\n  }\n  cin >>Q;\n  REP(q, Q){\n    int x, y; cin >>x >>y;\n    P p(x, y);\n    cout <<contains(g, p) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\n\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nbool intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n    double maxDist = 0;\n    maxDist = max(maxDist, dist(a.a, a.b));\n    maxDist = max(maxDist, dist(a.a, b.a));\n    maxDist = max(maxDist, dist(a.a, b.b));\n    maxDist = max(maxDist, dist(a.b, b.a));\n    maxDist = max(maxDist, dist(a.b, b.b));\n    maxDist = max(maxDist, dist(b.a, b.b));\n    return maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS;\n  }\n  return ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b);\n }\n\nvector<pt> points;\npt MAGIC = pt(10007, 10007);\n\nint Query(pt q) {\n\n\tseg x = seg(q, MAGIC);\n\n\tint count = 0;\n\tfor(int i=1; i < points.size(); i++) {\n\t\tseg y = seg(points[i-1], points[i]);\n\t\tif(intersect(x, y)) count++;\n\t\tif(intersect(y, seg(q, q))) {\n\t\t\treturn 1;\n\t\t}\t\n\t}\n\n\tif(count % 2 == 0) {\n\t\treturn 0;\n\t} else {\n\t\treturn 2;\n\t}\n\n}\n\nint main() {\n\n\tint N;\n\tcin >> N;\n\tfor(int i=0; i < N; i++) {\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tpoints.push_back(pt(a, b));\n\t}\n\tpoints.push_back(points[0]);\n\n\tint Q;\n\tcin >> Q;\n\tfor(int i=0; i < Q; i++) {\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tcout << Query(pt(a, b)) << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n#include<cassert>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b){ return (fabs(a) - fabs(b)) < EPS;};\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstatic const int NOTCROSS = 4;\nstatic const int CIRCUMSCRIBED = 3; \nstatic const int INTERSECT = 2;\nstatic const int INSCRIBED = 1;\nstatic const int INCLUDE = 0;\n\nconst double PI = acos(-1);\n\nclass Point{\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint(const Point &p) { x = p.x; y = p.y;};\n\t\n\tPoint operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double &a) { return Point(x * a, y * a); }\n\tPoint operator / (const double &a) { return Point(x / a, y / a); }\n\t\n\tPoint & operator = (const Point& p) {x = p.x; y = p.y; return *this;};\n\tPoint & operator += (const Point& p) {x += p.x; y += p.y; return *this;};\n\tPoint & operator -= (const Point& p) {x -= p.x; y -= p.y; return *this;};\n\tPoint & operator *= (const Point& p) {x *= p.x; y *= p.y; return *this;};\n\tPoint & operator /= (const Point& p) {x /= p.x; y /= p.y; return *this;};\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\t\n\tbool operator > (const Point &p) const {\n\t\treturn x != p.x ? x > p.x : y > p.y;\n\t}\n\t\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t\n\tdouble abs() { return sqrt(norm()); };\n\tdouble norm() { return x * x + y * y;};\n};\n\ntypedef Point Vector;\n\n\ndouble norm(Vector a){\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isPrallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < - EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\t\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n\n\nint intersect(Circle c1, Circle c2){\n\tdouble dis = abs(c1.c - c2.c);\n\t\n\tif(dis > c1.r + c2.r + EPS) return NOTCROSS;\n\tif(fabs(dis - c1.r - c2.r) < EPS) return CIRCUMSCRIBED;\n\tif(dis > fabs(c1.r - c2.r) + EPS) return INTERSECT;\n\tif(fabs(dis - fabs(c1.r - c2.r)) < EPS) return INSCRIBED;\n\treturn INCLUDE;\n}\n\ndouble getDistace(Point a, Point b){\n\treturn abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / abs(l.p2 - l.p1);\n}\n\ndouble getDistanceSP(Segment s, Point p){\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrosPoint(Segment s1, Segment s2){\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nbool intersect(Circle c, Line l){\n\treturn getDistanceLP(l, c.c) < c.r + EPS;\n}\n\npair<Point, Point> getCrossPoint(Circle c, Line l){\n\tassert(intersect(c,l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e *base);\n}\n\ndouble arg(Vector p) {return atan2(p.y, p.x);}\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a);}\n\n\npair<Point, Point> getCrosPoint(Circle c1, Circle c2){\n\tPoint res1, res2;\n\tint ins = intersect(c1, c2);\n\tif(ins == NOTCROSS || ins == INCLUDE) {\n\t\tassert(false); // 0\n\t}\n\tif(ins == INSCRIBED && equals(c1.r, c2.r)){\n\t\tassert(false); // infinity\n\t}\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tres1 = c1.c + polar(c1.r, t + a);\n\tres2 = c1.c + polar(c1.r, t - a);\n\treturn make_pair(res1, res2);\n}\n\n\ndouble getArea(Circle c){\n\treturn c.r*c.r*PI;\n}\n\ndouble getArea(Polygon& p){\n\tdouble area = 0;\n\t\n\tfor(int i = 0; i < p.size(); i++){\n\t\tarea += (p[i].x * p[(i + 1) % p.size()].y - p[(i + 1) % p.size()].x * p[i].y);\n\t}\n\t\n\treturn fabs(area)/2;\n}\n\nbool isConvex(Polygon& p){\n\tint b = 0;\n\t\n\tfor(int i = 0; i < p.size(); i++){\n\t\tint j = (i + 1) % p.size(), k = (i + 2) % p.size();\n\t\tint c = ccw(p[i], p[j], p[k]);\n\t\tif(c == ON_SEGMENT || c == ONLINE_BACK || c == ONLINE_FRONT) continue;\n\t\tif(c*b < 0) return false;\n\t\tif(!b) b = c;\n\t}\n\t\n\treturn 1;\n}\n\n/*\nIN 2, ON 1, OUT 0\n*/\nint contains(Polygon &g, Point p){\n\tint n = g.size();\n\tbool x = false;\n\tfor(int i = 0; i < n; i++){\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed<<setprecision(10);\n\t\n\tint n, q;\n\tPolygon p;\n\t\n\tcin>>n;\n\t\n\tp.resize(n);\n\t\n\tfor(int i = 0; i < n; i++){\n\t\tcin>>p[i].x>>p[i].y;\n\t}\n\t\n\tcin>>q;\n\t\n\tfor(int i = 0; i < q; i++){\n\t\tPoint P;\n\t\tcin>>P.x>>P.y;\n\t\t\n\t\tcout<<contains(p, P)<<endl;\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define MP make_pair\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {\n\t}\n\tP(db _x, db _y) :\n\t\t\tx(_x), y(_y) {\n\t}\n\tP operator+(P p) {\n\t\treturn P(x + p.x, y + p.y);\n\t}\n\tP operator-(P p)  {\n\t\treturn P(x - p.x, y - p.y);\n\t}\n\tP operator*(db d) {\n\t\treturn P(x * d, y * d);\n\t}\n\tP operator/(db d) {\n\t\treturn P(x / d, y / d);\n\t}\n\tbool operator<(P p) const {\n\t\tint c = sign(x - p.x);\n\t\tif (c)\n\t\t\treturn c == -1;\n\t\treturn sign(y - p.y) == -1;\n\t}\n\tdb dot(P p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb det(P p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb distTo(P p) { return (*this-p).abs(); }\n\n\tdb alpha() {\n\t\treturn atan2(y, x);\n\t}\n\tvoid read() {\n\t\tcin>>x>>y;\n\t}\n\tdb abs() {\n\t\treturn sqrt(abs2());\n\t}\n\tdb abs2() {\n\t\treturn x * x + y * y;\n\t}\n\tP rot90(){\n\t\treturn P(-y,x);\n\t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2); \n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) && \n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n \nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb getrad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]); \n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\t\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nint main(){\n\tint n;cin>>n;\n\tvector<P> ps(n);\n\trep(i,0,n) ps[i].read();\n\tint m;cin>>m;\n\trep(i,0,m){\n\t\tP p;p.read();cout<<contain(ps,p)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            int ans=0;\n            bool flag=false;\n            for(int j=0; j<n; j++){\n                double a,b,c;\n                straight_line_passing_through_the_two_points(p_xy[j][0], p_xy[j][1], p_xy[(j+1)%n][0], p_xy[(j+1)%n][1], &a, &b, &c);\n                if(min(p_xy[j][0],p_xy[(j+1)%n][0])<=tx&&tx<=max(p_xy[j][0],p_xy[(j+1)%n][0])){\n                    if(min(p_xy[j][1],p_xy[(j+1)%n][1])<=ty&&ty<=max(p_xy[j][1],p_xy[(j+1)%n][1])){\n                        if(a*tx+b*ty+c==0){\n                            flag = true;\n                            break;\n                        }\n                    }\n                }\n                \n                ans+=line_segment_cross_decision(p_xy[j][0], p_xy[j][1], p_xy[(j+1)%n][0], p_xy[(j+1)%n][1], tx, ty, tx, ty+100000.0);\n                \n            }\n            if(flag)cout<<1<<endl;\n            else if(ans%2==1)cout<<2<<endl;\n            else cout<<0<<endl;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Point{\n\tdouble px;\n\tdouble py;\n};\n\nPoint Minus(Point a, Point b){\n\tPoint c;\n\tc.px=a.px-b.px;\n\tc.py=a.py-b.py;\n\treturn c;\n}\n\ndouble dot(Point a, Point b){\n\treturn a.px*b.px+a.py*b.py;\n}\n\nint crs(Point a, Point b){\n\tdouble t=a.px*b.py-a.py*b.px;\n\tif(abs(t)<(1e-08))return 0;\n\tif(t<0)return -1;\n\treturn 1;\n}\n\nint con(vector<Point> V, Point p){\n\tbool in=false;\n\tfor(int i=0;i<V.size();i++){\n\t\tPoint a = Minus(V[i],p);\n\t\tPoint b = Minus(V[(i+1)%(V.size())],p);\n\t\tif(a.py>b.py)swap(a,b);\n\t\tif(a.py<=0 && 0<b.py){\n\t\t\tif(crs(a,b)<0)in=!in;\n\t\t}\n\t\tif(crs(a,b)==0 && dot(a,b)<=0)return 1;\n\t}\n\treturn in ? 2 : 0;\n\t\n}\n\nint main(){\n\tvector<Point>v;\n\tPoint P;\n\tint n;\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>P.px>>P.py;\n\t\tv.push_back(P);\n\t}\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>P.px>>P.py;\n\t\tcout<<con(v,P)<<endl;\n\t}\n\t\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db long double\nconst db eps = 0;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > 0) return 1;\n\tif(u.cross(v) < 0) return -1;\n\tif(u.dot(v) < 0) return -2;\n\tif(u.len2() < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nconst int N = 111;\npoi p[N];\n\nint main() {\n\tcout << fixed << setprecision(12);\n\tios :: sync_with_stdio(false);\n\tint n; cin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tp[i].r();\n\tp[n] = p[0];\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r(); poi s = poi{10007, 10009} + t;\n\t\tbool on = false;\n\t\tint inter = 0;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(!ccw(p[i], p[i + 1], t))\n\t\t\t\ton = true;\n\t\t\tif(si(s, t, p[i], p[i + 1])) {\n\t\t\t\tinter ++;\n\t\t\t\t//p[i].w(); p[i + 1].w();\n\t\t\t}\n\t\t}\n\t\tif(on) cout << \"1\\n\";\n\t\telse if(inter & 1) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\n#define x first\n#define y second\n\nusing namespace std;\ntypedef pair<double, double> pt;\nconst double e = 1e-8;\n\n/*\n * Find the closest 2 points to the line\n * that point is in the shape depedning on which orientation you are visiting\n * your points\n */\n\npt operator-(pt a, pt b) {\n    return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= e;\n}\n\ndouble cross(pt a, pt b) {\n    return a.x*b.y - a.y*b.x;\n}\n\ndouble ccw(pt a, pt b, pt c) {\n    return cross(b - a, c - a);\n}\n\ndouble sq(double d) {\n  return d * d;\n}\n\npt mid(pt A, pt B) {\n  return {(A.x + B.x) / 2, (A.y + B.y) / 2};\n}\n\ndouble dist(pt A, pt B) {\n  return sqrt(sq(A.x - B.x) + sq(A.y - B.y));\n}\n\nint contains(vector<pt> shape, pt point) {\n\n  pair<pt, pt> min_points;\n  double min_dist = 3 * 1e4;\n\n  for (int i = 0; i < shape.size(); i++) {\n\n    pt A = shape[i];\n    pt B = shape[(i + 1) % shape.size()];\n\n    auto d = dist(mid(A, B), point);\n    if (d < min_dist) {\n      min_points = {A, B};\n      min_dist = d;\n    }\n\n  }\n\n  auto orientation = ccw(\n      min_points.first,\n      min_points.second,\n      point\n  );\n\n  if (zero(orientation)) return 1;\n  else if (orientation > 0) return 2;\n  else if (orientation < 0) return 0;\n  else return 3;\n}\n\nint main() {\n\n  vector<pt> shape;\n\n  int g;\n  cin >> g;\n  for (int i = 0; i < g; ++i) {\n    double x, y;\n    cin >> x >> y;\n    shape.emplace_back(x, y);\n  }\n\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    double x, y;\n    cin >> x >> y;\n    cout << contains(shape, {x, y}) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = 1e9;\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t    cn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAX = 111;\n\nstruct vec {\n    int x, y;\n    vec() {}\n    vec(int a, int b)\n    {\n        x = a, y = b;\n    }\n    bool operator>(const vec a) const\n    {\n        return x == a.x ? y > a.y : x > a.x;\n    }\n    vec operator-(const vec a) const\n    {\n        return vec(x - a.x, y - a.y);\n    }\n    vec operator+(const vec a) const\n    {\n        return vec(x + a.x, y + a.y);\n    }\n} p[MAX];\nint n;\ndouble chaji(vec a, vec b, vec c)\n{\n    vec A = vec(b - a), B = vec(c - a);\n    return A.x * B.y - A.y * B.x;\n}\nbool duobianxingnei(vec& t)\n{\n    int t1, t2, f, sum, i;\n    for (i = 0; i <= n; i++)\n        p[i].x -= t.x, p[i].y -= t.y; // 坐标平移\n    t1 = p[0].x >= 0 ? (p[0].y >= 0 ? 0 : 3) : (p[0].y >= 0 ? 1 : 2); // 计算象限\n    for (sum = 0, i = 1; i <= n; i++) {\n        if (!p[i].x && !p[i].y)\n            break;\n        // 被测点为多边形顶点\n        f = p[i].y * p[i - 1].x - p[i].x * p[i - 1].y;\n\n        // 计算叉积\n        if (!f && p[i - 1].x * p[i].x <= 0 && p[i - 1].y * p[i].y <= 0)\n            break; // 点在边上\n        t2 = p[i].x >= 0 ? (p[i].y >= 0 ? 0 : 3) : (p[i].y >= 0 ? 1 : 2); // 计算象限\n        if (t2 == (t1 + 1) % 4)\n            sum += 1;\n        // 情况1\n        else if (t2 == (t1 + 3) % 4)\n            sum -= 1;\n        // 情况2\n        else if (t2 == (t1 + 2) % 4)\n        // 情况3\n        {\n            if (f > 0)\n                sum += 2;\n            else\n                sum -= 2;\n        }\n        t1 = t2;\n    }\n    bool tf = 0;\n    if (i <= n || sum)\n        tf = 1;\n    for (i = 0; i <= n; i++)\n        p[i].x += t.x, p[i].y += t.y; // 恢复坐标\n    return tf;\n}\n\nbool dian_zai_xianshang(vec a, vec b, vec c)\n{\n    int x1 = a.x, x2 = b.x, y1 = a.y, y2 = b.y;\n    if (x1 > x2)\n        swap(x1, x2);\n    if (y1 > y2)\n        swap(y1, y2);\n    if (chaji(a, b, c) == 0 &&x1<=c.x&&c.x<=x2&&y1<=c.y&&c.y<=y2)\n        return 1;\n    return 0;\n}\nbool zaibianshang(vec& t)\n{\n    for (int i = 0; i < n; i++)\n        if (dian_zai_xianshang(p[i], p[(i + 1) % n], t))\n            return 1;\n    return 0;\n}\nint main()\n{\n    //freopen(\"txt.txt\", \"w\", stdout);\n    int m;\n    vec t;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n        scanf(\"%d%d\", &p[i].x, &p[i].y);\n    p[n] = p[0];\n\n    scanf(\"%d\", &m);\n    while (m--) {\n        bool tf = false;\n        scanf(\"%d%d\", &t.x, &t.y);\n        if (zaibianshang(t))\n            cout << 1 << endl;\n        else if (duobianxingnei(t))\n            cout << 2 << endl;\n        else\n            cout << 0 << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint err = point(INF_d, INF_d);\n\npoint proj_SP(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl_SP(point A, point B, point P){ // reflection point of P int segment AB\n    return proj_SP(A, B, P) * 2 - P;\n}\n\nstruct line{\n    point p[2], u;\n    line(){}\n    line(point s, point t){\n        p[0] = s, p[1] = t;\n        u = p[1] - p[0];\n    }\n    point get_point(double t){\n        return point(p[0] + u * t);\n    }\n};\n\nbool parallel(line L1, line L2){ // check whether two lines L1 and L2 are parallel\n    return !dcmp(L1.u ^ L2.u);\n}\n\nbool orthogonal(line L1, line L2){ // check whether two lines L1 and L2 are orthogonal\n    return !dcmp(L1.u * L2.u);\n}\n\npair<bool, point> inter_LL(line L1, line L2){ // calculate the intersection of two lines L1 and L2\n    if (parallel(L1, L2)) return mp(false, err);\n    double t = ((L2.p[0] - L1.p[0]) ^ L2.u) / (L1.u ^ L2.u);\n    return mp(true, L1.get_point(t));\n}\n\nbool one_dimention_check(db a, db b, db c, db d){ // check whether two one-dimention segments has intersection\n    if (dcmp(a - b) > 0) swap(a, b);\n    if (dcmp(c - d) > 0) swap(c, d);\n    return dcmp(b - c) >= 0 && dcmp(a - d) <= 0; \n}\n\nbool check_SS(point A, point B, point C, point D){ // check whether two segments AB and CD has intersection\n    bool flag = one_dimention_check(A.x, B.x, C.x, D.x) && one_dimention_check(A.y, B.y, C.y, D.y);\n    double a = dcmp((A - C) ^ (D - C)), b = dcmp((B - C) ^ (D - C)),\n            c = dcmp((C - A) ^ (B - A)), d = dcmp((D - A) ^ (B - A));\n    return flag && dcmp(a * b) <= 0 && dcmp(c * d) <= 0;\n}\n// calculate the intersection point of two segments, first check and then call inter_LL to get the cross point\n\nbool inmid(db a, db b, db c){  // check whether a <= c <= b\n    return dcmp(dcmp(b - c) * dcmp(a - c)) <= 0; \n}\n\nbool inmid(point A, point B, point P){ // check whether point P is in the rectangle of segment AB\n    return inmid(A.x, B.x, P.x) && inmid(A.y, B.y, P.y);\n}\n\ndb dis_SP(point A, point B, point P){ // the minimum distance from a point P to segment AB\n    point p_proj = proj_SP(A, B, P);\n    if (inmid(A, B, p_proj)) return (P - p_proj).len();\n    else return min((P - A).len(), (P - B).len());\n}\n\ndb dis_SS(point A, point B, point C, point D){ // the minimum distance from two segments AB and CD\n    db res = INF_d;\n    if (check_SS(A, B, C, D)) res = 0;\n    res = min(res, dis_SP(A, B, C));\n    res = min(res, dis_SP(A, B, D));\n    res = min(res, dis_SP(C, D, A));\n    res = min(res, dis_SP(C, D, B));\n    return res;\n}\n\ndb poly_Area(point *poly, int n){ // calc the area of a simple polygon poly, n is the number of points.\n    //the points should be in clockwise or counter_clockwise.\n    db res = 0.0;\n    for (int i = 1; i < n - 1; i++){\n        res += (poly[i] - poly[0]) ^ (poly[i + 1] - poly[0]);\n    }\n    return fabs(res) / 2;\n}\n\nbool is_Convex(point *poly, int n){ // check whether a polygon is a convex polygon. Make sure points are in counter-clockwised order.\n    poly[n] = poly[0];\n    if (n < 3) return 1;\n    for (int i = 1; i < n; i++){\n        int tmp_dir = dcmp((poly[i] - poly[i - 1]) ^ (poly[(i + 1) % n] - poly[i]));\n        if (tmp_dir < 0) return 0;\n    }\n    return 1;\n}\n\nbool is_PonS(point A, point B, point P){ // check whether a point P is on a segment AB\n    return inmid(A, B, P) && !dcmp((P - A) ^ (B - A));\n}\n\nint is_PinPoly(point *poly, int n, point P){ // check the position relation of a point and polygon.\n    // 0: outside, 1: on a segment, 2: inside\n    int pd = 0;\n    for (int i = 0; i < n; i++){\n        point u = poly[i], v = poly[(i + 1) % n];\n        if (is_PonS(u, v, P)) return 1;\n        if (dcmp(u.y - v.y) > 0) swap(u, v);\n        if (dcmp(u.y - P.y) > 0 || dcmp(v.y - P.y) <= 0) continue;\n        if (dcmp((u - v) ^ (P - v)) < 0) pd ^= 1;\n    }\n    return pd << 1;\n}\n\nconst int N = 123;\nint n, m;\npoint p[N], x;\n\nint main(){\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        p[i].read();\n    }\n    scanf(\"%d\", &m);\n    for (int i = 0; i < m; i++){\n        x.read();\n        printf(\"%d\\n\", is_PinPoly(p, n, x));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tcout << setprecision(1) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tint count = 0;\n\tOwnVector2 p0 = vertices[0];\n\tbool bFlag0x = (p.x <= p0.x);\n\tbool bFlag0y = (p.y <= p0.y);\n\n\tif ((p0 - p).length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n];\n\t\tif ((p1 - p).length2() <= 0.00000000001 || (abs((p0 - p).cross(p1 - p)) <= 0.00000000000001 && (p0 - p).dot(p1 - p) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tbool bFlag1x = (p.x <= p1.x);\n\t\tbool bFlag1y = (p.y <= p1.y);\n\t\tif (bFlag0y != bFlag1y)\n\t\t{\n\t\t\tif (bFlag0x == bFlag1x)\n\t\t\t{\n\t\t\t\tif (bFlag0x)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (p.x <= (p0.x + (p1.x - p0.x)*(p.y - p0.y) / (p1.y - p0.y)))\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tp0 = p1;\n\t\tbFlag0x = bFlag1x;\n\t\tbFlag0y = bFlag1y;\n\t}\n\n\treturn count % 2 == 0 ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\t\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n \ntypedef pair<point,point> pp;\ntypedef vector<point> VP;\nconst point O{0,0};\n \nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble ip=IP(A,X),cp=CP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"Counter_Clockwise\";\n\t\tif(cp<-eps) return \"Clockwise\";\n\t\tif(ip<-eps) return \"Online_Back\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"On_Segment\";\n\t\treturn \"Online_Front\";\n\t}\n\tstring Parallel_Orthogonal(pp a,pp b){\n\t\tpoint A=a.second-a.first,B=b.second-b.first;\n\t\tdouble ip=IP(A,B),cp=CP(A,B);\n\t\tstring f=Counter_Clockwise(pp(a.first,a.second),b.first),s=Counter_Clockwise(pp(a.first,a.second),b.second);\n\t\tif(f[0]!='C'&&s[0]!='C') return \"Agreement\";\n\t\tif(cp<eps&&cp>-eps) return \"Parallel\";\n\t\tif(ip<eps&&ip>-eps) return \"Orthogonal\";\n\t\telse return \"Commonly\";\n\t}\n\tpoint Inter(pp  a,double x,double y){\n\t\treturn (a.first*y+a.second*x)/(x+y);\n\t}\n\tpoint Exterior(pp a,double x,double y){\n\t\treturn (a.first*-y+a.second*x)/(x-y);\n\t}\n\tpoint Projection(pp a,point x){\n\t\tpoint A=x-a.first,B=a.second-a.first;\n\t\tdouble l=Length(O,B);\n\t\treturn B*IP(A,B)/(l*l)+a.first;\n\t}\t\n\tpoint Cross_Point(pp a,pp b){\n\t\tstring s=Parallel_Orthogonal(a,b);\n\t\tif(s[0]=='A') return point{inf,inf};\n\t\tif(s[0]=='P') return point{inf,0};\n\t\tpoint p=Projection(a,b.first),q=Projection(a,b.second);\n\t\tdouble pl=Length(b.first,p),ql=Length(b.second,q);\n\t\tstring S=Counter_Clockwise(a,b.first),T=Counter_Clockwise(a,b.second);\n\t\tif(S==T) return Exterior(b,pl,ql);\n\t\telse return Inter(b,pl,ql);\n\t}\n\tstring Containment_polyon_point(VP p,point x){\n\t\tpoint c;\n\t\tvector<double> cp(p.size());\n\t\tstring s,t;\n\t\tint ans=0;\n\t\tp.push_back(p[0]);\n\t\tp.push_back(p[1]);\n\t\tcp[0]=CP(point{1,0},p[1]-p[0]);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end()-1;i++){\n\t\t\tpp tmp(*i,*(i+1));\n\t\t\tif(i!=p.end()-2) cp[i-p.begin()]=CP(point{1,0},*(i+1)-*i);\n\t\t\tc=Cross_Point(tmp,pp(x,point{x.x+1,x.y}));\n\t\t\ts=Counter_Clockwise(tmp,x);\n\t\t\tt=Counter_Clockwise(tmp,c);\n\t\t\tif(s[3]=='S') return \"On_side\";\n\t\t\tdouble cp1=cp[i-p.begin()],cp2=cp[i-p.begin()-1];\n\t\t\tif(c.x==inf||c.x<x.x||c==*(i+1)||t[3]!='S') continue;\n\t\t\tif(c==*i&&((cp1<=0&&cp2>=0)||(cp1>=0&&cp2<=0))) continue;\n\t\t\tans++;\n\t\t}\n\t\tif(ans%2==0) return \"not_Containment\";\n\t\treturn \"Containment\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n\tvoid Point_out(point p){\n\t\tcout<<p.x<<' '<<p.y<<endl;\n\t}\n};\n\nint N,Q;\npoint x;\nstring s;\nVP p;\n\nint main(){\n\tGeom geo;\n\tcin>>N;\n\tp=VP(N);\n\tfor(int i=0;i<N;i++) geo.Point_in(p[i]);\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tgeo.Point_in(x);\n\t\ts=geo.Containment_polyon_point(p,x);\n\t\tif(s==\"Containment\") cout<<2<<endl;\n\t\telse if(s==\"On_side\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <sstream>\n#include <string.h>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <utility>\n#include <set>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <deque>\n#include <limits>\n#include <iomanip>\n#include <ctype.h>\n#include <unordered_map>\n#include <random>\n#include <numeric>\n#include <iostream>\n#include <array>\n\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <math.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, double> pld;\ntypedef pair<double, double> pdd;\ntypedef pair<double, ll> pdl;\ntypedef pair<int, char> pic;\ntypedef vector<ll> vl;\ntypedef vector<int> vi;\ntypedef priority_queue<ll, vector<ll>, greater<ll>> llgreaterq;\ntypedef priority_queue<pll, vector<pll>, greater<pll>> pllgreaterq;\ntypedef priority_queue<pair<ll, pll>, vector<pair<ll, pll>>, greater<pair<ll, pll>>> plpllgreaterq;\ntypedef priority_queue<vi, vector<vi>, greater<vi>> vigreaterq;\ntypedef priority_queue<vl, vector<vl>, greater<vl >> vlgreaterq;\nint dx[] = { -1,0,1,0 };\nint dy[] = { 0,-1,0,1 };\n#define bit(x,v) ((ll)x << v)\n#define rep(x,n) for(int x = 0;x < n;x++)\n#define rep2(x,f,v) for(int x=f;x<v;x++)\n// 許容する誤差ε\n#define EPS (1e-10)\n// 2つのスカラーが等しいかどうか\n#define EQ(a,b) (std::abs(a-b) < EPS)\n// 2つのベクトルが等しいかどうか\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n#define all(a) a.begin(),a.end()\n#define all0(a) memset(a,0,sizeof(a))\n#define alm1(a) memset(a,-1,sizeof(a))\n\nconst ll INF = 1000000007;\nconst int MAX = 2000010;\nconst int MOD = 1000000007;\n\nlong long fac[MAX], finv[MAX], inv[MAX];\nvoid COMinit() {\n\tfac[0] = fac[1] = 1;\n\tfinv[0] = finv[1] = 1;\n\tinv[1] = 1;\n\tfor (int i = 2; i < MAX; i++) {\n\t\tfac[i] = fac[i - 1] * i % MOD;\n\t\tinv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;\n\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;\n\t}\n}\n\n// 二項係数計算\nlong long COM(int n, int k) {\n\tif (n < k) return 0;\n\tif (n < 0 || k < 0) return 0;\n\treturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;\n}\n\nll gcd(ll a, ll b) {\n\tif (b == 0) return a;\n\treturn gcd(b, a % b);\n}\nint pr[100010];\nint lank[100010];\nvoid uini(int n) {\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tpr[i] = i;\n\t\tlank[i] = 1;\n\t}\n}\n\nint parent(int x) {\n\tif (x == pr[x]) return x;\n\treturn pr[x] = parent(pr[x]);\n}\n\nint same(int x, int y) {\n\treturn parent(x) == parent(y);\n}\n\nbool unit(int x, int y) {\n\tint px = parent(x);\n\tint py = parent(y);\n\n\tif (px == py) return false;\n\tif (lank[py] < lank[px]) {\n\t\tpr[py] = px;\n\t\tlank[px] += lank[py];\n\t}\n\telse {\n\t\tpr[px] = py;\n\t\tlank[py] += lank[px];\n\t}\n\treturn true;\n}\n\nll bit[200010];\nint max_n = 200000;\nint pm = 0;\nvoid add(int x) {\n\n\twhile (max_n >= x)\n\t{\n\t\tbit[x]++;\n\t\tx += x & -x;\n\t}\n}\nvoid sub(int x) {\n\twhile (max_n >= x)\n\t{\n\t\tbit[x]--;\n\t\tx += x & -x;\n\t}\n}\nll merge(ll* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<int> L(n1 + 1);\n\tvector<int> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = INF;\n\tR[n2] = INF;\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i] <= R[j]) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll merge2(pair<int, char>* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<pair<int, char>> L(n1 + 1);\n\tvector<pair<int, char>> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = make_pair(INF, ' ');\n\tR[n2] = make_pair(INF, ' ');\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i].first <= R[j].first) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll mergeSort2(pair<int, char>* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort2(a, left, mid);\n\t\tres += mergeSort2(a, mid, right);\n\t\tres += merge2(a, left, mid, right);\n\t}\n\treturn res;\n}\nll mergeSort(ll* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort(a, left, mid);\n\t\tres += mergeSort(a, mid, right);\n\t\tres += merge(a, left, mid, right);\n\t}\n\treturn res;\n}\nint partition(pair<int, char>* a, int p, int r) {\n\tpair<int, char> x = a[r];\n\tint i = p - 1;\n\tfor (size_t j = p; j < r; j++)\n\t{\n\t\tif (a[j].first <= x.first) {\n\t\t\ti++;\n\t\t\tswap(a[i], a[j]);\n\t\t}\n\t}\n\tswap(a[i + 1], a[r]);\n\treturn i + 1;\n}\nvoid quick(pair<int, char>* a, int p, int r) {\n\tif (p < r) {\n\t\tint q = partition(a, p, r);\n\t\tquick(a, p, q - 1);\n\t\tquick(a, q + 1, r);\n\t}\n}\n\nll n;\nint ci = 0;\nll P[1000010];\nstruct Node {\n\tint key;\n\tint priority;\n\tNode* parent, * left, * right;\n\tNode(int key, int priority);\n\tNode() {}\n};\nNode NIL;\nNode::Node(int key, int priority) : key(key), priority(priority) {\n\tleft = &NIL;\n\tright = &NIL;\n}\nNode* root = new Node();\nvoid cenrec(Node* k) {\n\tif (k->key == NIL.key) return;\n\tcenrec(k->left);\n\tcout << \" \" << k->key;\n\tcenrec(k->right);\n}\nvoid fastrec(Node* k)\n{\n\tif (k->key == NIL.key) return;\n\tcout << \" \" << k->key;\n\tfastrec(k->left);\n\tfastrec(k->right);\n}\nvoid insert(Node* v) {\n\tNode* y = &NIL;\n\tNode* x = root;\n\twhile (x->key != NIL.key)\n\t{\n\t\ty = x;\n\t\tif (v->key < x->key) {\n\t\t\tx = x->left;\n\t\t}\n\t\telse {\n\t\t\tx = x->right;\n\t\t}\n\t}\n\tv->parent = y;\n\tif (y->key == NIL.key) {\n\t\troot = v;\n\t}\n\telse if (v->key < y->key) {\n\t\ty->left = v;\n\t}\n\telse {\n\t\ty->right = v;\n\t}\n\n}\n\nNode* find(Node* k, ll v)\n{\n\tif (k->key == NIL.key) return &NIL;\n\tif (k->key == v) return k;\n\tif (v < k->key) return find(k->left, v);\n\treturn find(k->right, v);\n}\nvoid delp12(Node* x) {\n\tif (x->key == NIL.key)  return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key == NIL.key\n\t\t&& r->key == NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = &NIL;\n\t\t}\n\t\telse pr->right = &NIL;\n\t}\n\telse if (l->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = l;\n\t\t}\n\t\telse pr->right = l;\n\t\tl->parent = pr;\n\t}\n\telse if (r->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = r;\n\t\t}\n\t\telse pr->right = r;\n\t\tr->parent = pr;\n\t}\n}\nNode* get_next(Node* k) {\n\tif (k->key == NIL.key) return &NIL;\n\tNode* res = get_next(k->left);\n\tif (res->key != NIL.key) return res;\n\treturn k;\n}\nvoid del(Node* x) {\n\n\tif (x->key == NIL.key) return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key != NIL.key && r->key != NIL.key) {\n\t\tNode* nex = get_next(r);\n\t\tx->key = nex->key;\n\t\tdelp12(nex);\n\t}\n\telse {\n\t\tdelp12(x);\n\t}\n}\nNode* rightRotate(Node* t) {\n\tNode* s = t->left;\n\tt->left = s->right;\n\ts->right = t;\n\treturn s;\n}\nNode* leftRotate(Node* t) {\n\tNode* s = t->right;\n\tt->right = s->left;\n\ts->left = t;\n\treturn s;\n}\nNode* _insert(Node* t, int key, int priority) {\n\tif (t->key == NIL.key) {\n\t\treturn new Node(key, priority);\n\t}\n\tif (key == t->key) {\n\t\treturn t;\n\t}\n\n\tif (key < t->key) {\n\t\tt->left = _insert(t->left, key, priority);\n\t\tif (t->priority < t->left->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t}\n\telse {\n\t\tt->right = _insert(t->right, key, priority);\n\t\tif (t->priority < t->right->priority) {\n\t\t\tt = leftRotate(t);\n\t\t}\n\t}\n\treturn t;\n}\nNode* delete1(Node* t, int key);\nNode* _delete(Node* t, int key) {\n\tif (t->left->key == NIL.key && t->right->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\telse if (t->left->key == NIL.key) {\n\t\tt = leftRotate(t);\n\t}\n\telse if (t->right->key == NIL.key) {\n\t\tt = rightRotate(t);\n\t}\n\telse\n\t{\n\t\tif (t->left->priority > t->right->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t\telse\n\t\t\tt = leftRotate(t);\n\t}\n\treturn delete1(t, key);\n}\nNode* delete1(Node* t, int key) {\n\tif (t->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\tif (key < t->key) {\n\t\tt->left = delete1(t->left, key);\n\t}\n\telse if (key > t->key) {\n\t\tt->right = delete1(t->right, key);\n\t}\n\telse return _delete(t, key);\n\treturn t;\n}\nint H;\nint left(int i) {\n\treturn i * 2 + 1;\n}\nint right(int i) {\n\treturn i * 2 + 2;\n}\nstruct edge {\n\tint from, to;\n\tll val;\n\tedge(int from, int to, ll val) : from(from), to(to), val(val) {}\n};\nll k;\nint _rank[1010];\nint temp[1010];\nbool compare_sa(int i, int j) {\n\tif (_rank[i] != _rank[j]) return _rank[i] < _rank[j];\n\telse {\n\t\tint ri = i + k <= n ? _rank[i + k] : -1;\n\t\tint rj = j + k <= n ? _rank[j + k] : -1;\n\t\treturn ri < rj;\n\t}\n}\nvoid construct_sa(string S, int* sa) {\n\tn = S.length();\n\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tsa[i] = i;\n\t\t_rank[i] = i < n ? S[i] : -1;\n\t}\n\n\tfor (k = 1; k <= n; k *= 2)\n\t{\n\t\tsort(sa, sa + n + 1, compare_sa);\n\n\t\t// saはソート後の接尾辞の並びになっている、rankは元の位置のindexを保持したまま、更新されている。\n\t\t// ピンとこなかった部分\n\t\ttemp[sa[0]] = 0;\n\t\tfor (size_t i = 1; i <= n; i++)\n\t\t{\n\t\t\ttemp[sa[i]] = temp[sa[i - 1]] + (compare_sa(sa[i - 1], sa[i]) ? 1 : 0);\n\t\t}\n\t\tfor (size_t i = 0; i <= n; i++)\n\t\t{\n\t\t\t_rank[i] = temp[i];\n\t\t}\n\t}\n}\nbool contain(string S, int* sa, string T) {\n\tint a = 0, b = S.length();\n\t// sa は 接尾辞が辞書順に並んでいる、入っているのはその位置のインデックス\n\twhile (b - a > 1) {\n\t\tint c = (a + b) / 2;\n\t\tif (S.compare(sa[c], T.length(), T) < 0) a = c;\n\t\telse b = c;\n\t}\n\treturn S.compare(sa[b], T.length(), T) == 0;\n}\n\n\n#define bit(x,v) ((ll)x << v)\n\nclass BIT {\n\n\tstatic const int MAX_N = 500010;\npublic:\n\tBIT() { memset(bit, 0, sizeof(bit)); }\n\tll bit[MAX_N + 1], n;\n\tll sum(int i) {\n\t\tll s = 0;\n\t\twhile (i > 0)\n\t\t{\n\t\t\ts += bit[i];\n\t\t\ti -= i & -i;\n\t\t}\n\t\treturn s;\n\t}\n\n\tvoid add(int i, int x) {\n\t\twhile (i <= n)\n\t\t{\n\t\t\tbit[i] += x;\n\t\t\ti += i & -i;\n\t\t}\n\t}\n\n\n};\nstruct UnionFind {\n\tvector<int> A;\n\tUnionFind(int n) : A(n, -1) {}\n\tint find(int x) {\n\t\tif (A[x] < 0) return x;\n\t\treturn A[x] = find(A[x]);\n\t}\n\tvoid unite(int x, int y) {\n\t\tx = find(x), y = find(y);\n\t\tif (x == y) return;\n\t\tif (A[x] > A[y]) swap(x, y);\n\t\tA[x] += A[y];\n\t\tA[y] = x;\n\t}\n\tint ngroups() {\n\t\tint ans = 0;\n\t\tfor (auto a : A) if (a < 0) ans++;\n\t\treturn ans;\n\t}\n};\nvoid yes() { cout << \"Yes\\n\"; exit(0); }\nvoid no() { cout << \"No\\n\"; exit(0); }\nvector<ll> getp(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\t\tres.push_back(2);\n\t\twhile (n % 2 == 0)n /= 2;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\twhile (n % i == 0)n /= i;\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<ll> getp2(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\n\t\twhile (n % 2 == 0) { n /= 2; res.push_back(2); }\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\n\t\t\twhile (n % i == 0) { n /= i; res.push_back(i); }\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<pll> getp3(ll n) {\n\tvector<pll> res;\n\tll a = 2;\n\tint si = 0;\n\tif (n % 2 == 0) {\n\n\t\tres.push_back(make_pair(2, 0));\n\t\twhile (n % 2 == 0) { n /= 2; res[si].second++; }\n\t\tsi++;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(make_pair(i, 0));\n\t\t\twhile (n % i == 0) { n /= i; res[si].second++; }\n\t\t\tsi++;\n\t\t}\n\t}\n\tif (n != 1) { res.push_back(make_pair(n,1)); }\n\treturn res;\n}\n\nvector<ll> getDivisors(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tres.push_back(1);\n\tfor (ll i = 2; i * i <= n; i++)\n\t{\n\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tif (n / i != i)\n\t\t\t\tres.push_back(n / i);\n\t\t}\n\t}\n\treturn res;\n}\n\nstruct ve {\npublic:\n\tvector<ve> child;\n\tint _t = INF;\n\tve(int t) :_t(t) {}\n\tve(ve _left, ve _right) {\n\t\t_t = _left._t + _right._t;\n\t\tchild.push_back(_left);\n\t\tchild.push_back(_right);\n\t}\n\tbool operator<(const ve& t) const {\n\t\treturn _t > t._t;\n\t}\n};\n\nvector<bool> elas(ll n) {\n\tvector<bool> r(n);\n\tfill(r.begin(), r.end(), 1);\n\tr[0] = 0;\n\tr[1] = 0;\n\tfor (ll i = 2; i * i < n; i++)\n\t{\n\t\tif (!r[i]) continue;\n\t\tll ti = i * 2;\n\t\twhile (ti < n)\n\t\t{\n\t\t\tr[ti] = false;\n\t\t\tti += i;\n\t\t}\n\t}\n\treturn r;\n}\nbool isPrime(ll v) {\n\tfor (ll i = 2; i * i <= v; i++)\n\t{\n\t\tif (v % i == 0) return false;\n\t}\n\treturn true;\n}\n\nll getpow(ll b,ll x, ll md) {\n\n\tll t = b;\n\tll res = 1;\n\twhile (x > 0)\n\t{\n\t\tif (x & 1) {\n\t\t\tres *= t;\n\t\t\tres %= md;\n\t\t}\n\t\tx >>= 1;\n\t\tt *= t;\n\t\tt %= md;\n\t}\n\treturn res;\n}\nll getpow(ll b, ll x) {\n\n\treturn getpow(b, x, INF);\n}\n\nclass SegTree {\n\npublic :\n\tconst static int MAX_N = 100010;\n\tconst static int DAT_SIZE = (1 << 18) - 1;\n\tint N, Q;\n\tint A[MAX_N];\n\t\n\t\n\tll data[DAT_SIZE], datb[DAT_SIZE];\n\tvoid init(int _n) {\n\t\tN = 1;\n\t\twhile (N < _n) N <<= 1;\n\t\tmemset(data, 0, sizeof(data));\n\t\tmemset(datb, 0, sizeof(datb));\n\t}\n\tvoid init(int _n,ll iv) {\n\t\tN = 1;\n\t\twhile (N < _n) N <<= 1;\n\t\trep(i, DAT_SIZE) {\n\t\t\tdata[i] = iv;\n\t\t\tdatb[i] = iv;\n\t\t}\n\t}\n\tvoid add(int a, int b, int x) {\n\t\tadd(a, b + 1, x, 0, 0, N);\n\t}\n\tvoid add(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] += x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdatb[k] += (min(b, r) - max(a, l)) * x;\n\t\t\tadd(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tadd(a, b, x, k * 2 + 2, (l + r)/2, r);\n\t\t}\n\t}\n\n\tvoid change(int a, int b, int x) {\n\t\tchange(a, b + 1, x, 0, 0, N);\n\t}\n\tvoid change(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] = x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdatb[k] = x;\n\t\t\tchange(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tchange(a, b, x, k * 2 + 2, (l + r) / 2, r);\n\t\t}\n\t}\n\n\tll sum(int a, int b) {\n\t\treturn sum(a, b + 1, 0, 0, N);\n\t}\n\tll sum(int a, int b, int k, int l, int r) {\n\t\tif (b <= l || r <= a) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (a <= l && r <= b) {\n\t\t\treturn data[k] * (r - l) + datb[k];\n\t\t}\n\n\t\tll res = (min(b, r) - max(a, l)) * data[k];\n\t\tres += sum(a, b, k * 2 + 1, l, (l + r) / 2);\n\t\tres += sum(a, b, k * 2 + 2, (l + r) / 2, r);\n\t\treturn res;\n\t}\n};\nclass Segment;\nclass Circle;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y /a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\tstatic double dot(Point a, Point b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic double cross(Point a, Point b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tstatic bool isOrthogonal(Point a, Point b) {\n\t\treturn EQ(dot(a, b), 0.0);\n\t}\n\tstatic bool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isOrthogonal(Segment s1, Segment s2);\n\n\tstatic bool isPalallel(Point a, Point b) {\n\t\treturn EQ(cross(a, b), 0.0);\n\t}\n\tstatic bool isPalallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isPalallel(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isPalallel(Segment s1, Segment s2);\n\n\tstatic const int COUNTER_CLOCKWISE = 1;\n\tstatic const int CLOCKWISE = -1;\n\tstatic const int ONLINE_BACK = 2;\n\tstatic const int ONLINE_FRONT = -2;\n\tstatic const int ON_SEGMENT = 0;\n\tstatic int ccw(Point p0, Point p1, Point p2) {\n\t\tPoint a = p1 - p0;\n\t\tPoint b = p2 - p0;\n\t\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tstatic bool intersect(Point p1, Point p2, Point p3, Point p4) {\n\t\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n\t\t\t&& ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n\t} \n\tstatic bool intersect(Segment s1, Segment s2);\n\tstatic Point project(Segment s, Point p);\n\n\tstatic Point reflect(Segment s, Point p);\n\n\tstatic Point getDistance(Point a, Point b) {\n\t\treturn (a - b).abs();\n\t}\n\n\tstatic double getDistanceLP(Segment s, Point p);\n\n\tstatic double getDistanceSP(Segment s, Point p);\n\t\n\tstatic double getDistance(Segment s1, Segment s2);\n\n\tstatic Point getIntersection(Segment s1, Segment s2);\n\n\tstatic pair<Point, Point> crossPoints(Circle c, Segment s);\n\n\tstatic int contains(vector<Point> g, Point p) {\n\t\tint n = g.size();\n\t\tbool x = false;\n\t\trep(i, n) {\n\t\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\t\t// 線の上に載っているか\n\t\t\tif (std::abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\n\t\t\t// pを基準として上下にあるか\n\t\t\t// または外積が正か?(→にあるか)\n\t\t\tif (a.y > b.y) swap(a, b);\n\t\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t\t}\n\t\treturn x ? 2 : 0;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\tPoint p1tp2() {\n\t\treturn p2 - p1;\n\t}\n\tPoint p2tp1() {\n\t\treturn p1 - p2;\n\t}\n\tdouble abs() {\n\t\treturn std::abs(norm());\n\t}\n\tdouble norm() {\n\t\treturn (p2 - p1).norm();\n\t}\n};\n\nbool Point::isOrthogonal(Segment s1, Segment s2) {\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::isPalallel(Segment s1, Segment s2) {\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\nPoint Point::project(Segment s, Point p) {\n\tPoint base = s.p2 - s.p1;\n\tdouble r = Point::dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint Point::reflect(Segment s, Point p) {\n\treturn (project(s, p) * 2) - p;\n}\ndouble Point::getDistanceLP(Segment s, Point p) {\n\treturn std::abs(cross(s.p2 - s.p1,p-s.p1) / (s.p2 - s.p1).abs());\n}\ndouble Point::getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\ndouble Point::getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)\n\t\t,getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2) });\n}\n\nPoint Point::getIntersection(Segment s1, Segment s2) {\n\t// (s1.p1 - s2.p1).norm()\n\tauto bs = s1.p2 - s1.p1;\n\tauto n1 = s2.p1 - s1.p1;\n\tauto n2 = s2.p2 - s1.p1;\n\tauto c1 = std::abs(cross(n1, bs)) / bs.norm();\n\tauto c2 = std::abs(cross(n2, bs)) / bs.norm();\n\treturn s2.p1 + (s2.p2 - s2.p1) *  (c1 / (c1 + c2));\n\t// c1:c2=t:1-t\n\t// c2t=(1-t)c1\n\t// t/(1-t)=c1/(c1+c2)\n\t// \n\n\n}\ndouble arg(Point p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(),double r = 0.0) : c(c),r(r){}\n\tstatic pair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\t\tdouble d = (c1.c - c2.c).abs(); // 中心点どうしの距離\n\t\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\t\tdouble t = arg(c2.c - c1.c);\n\t\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n\n\t}\n};\n\npair<Point, Point> Point::crossPoints(Circle c, Segment s) {\n\tauto pp = project(s, c.c);\n\tauto f = (pp - c.c).norm();\n\tauto mu = sqrt(c.r * c.r - f );\n\tauto e = s.p1tp2() / s.p1tp2().abs();\n\treturn make_pair(pp + e * mu, pp - e * mu);\n\n}\n\nll divRm(string s, ll x) {\n\n\tll r = 0;\n\tfor (size_t i = 0; i < s.size(); i++)\n\t{\n\t\tr *= 10;\n\t\tr += s[i] - '0';\n\t\tr %= x;\n\t}\n\treturn r;\n}\nll cmbi(ll x, ll b) {\n\n\tll res = 1;\n\tfor (size_t i = 0; i < b; i++)\n\t{\n\t\tres *= x - i;\n\t\tres %= INF;\n\t\tres *= inv[b - i];\n\t\tres %= INF;\n\t}\n\treturn res;\n}\n\ndouble digsum(ll x) {\n\tll res = 0;\n\twhile (x > 0)\n\t{\n\t\tres += x % 10;\n\t\tx /= 10;\n\t}\n\treturn res;\n}\n\nbool maching(char a, char b) {\n\treturn (a == b || a == '?' || b == '?');\n}\nint getArea(ll x, ll v) {\n\tfor (size_t i = 1; i <= 3; i++)\n\t{\n\t\tif (x < v * i) return i - 1;\n\t}\n}\n\nvoid solv() {\n\n\tcin >> n;\n\tvector<Point> v;\n\trep(i, n) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tv.push_back(Point(x, y));\n\t}\n\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tcout << Point::contains(v, Point(x, y)) << endl;\n\t}\n}\nint main() {\n\t//COMinit();\n\tsolv();\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr double EPS = 1e-10;\nconstexpr int COUNTER_CLOCKWISE = 1;\nconstexpr int CLOCKWISE = -1;\nconstexpr int ONLINE_BACK = 2;\nconstexpr int ONLINE_FRONT = -2;\nconstexpr int ON_SEGMENT = 0;\n\nbool equals(double a, double b) { return (abs(a - b) < EPS); }\n\nstruct V2 {\n\tdouble x, y;\n\tV2(double x = 0, double y = 0) : x(x), y(y) {}\n\t\n\tV2 operator + (V2 p) const { return (V2(x + p.x, y + p.y)); }\n\tV2 operator - (V2 p) const { return (V2(x - p.x, y - p.y)); }\n\tV2 operator * (double r) const { return (V2(x * r, y * r)); }\n\tV2 operator / (double r) const { return (V2(x / r, y / r)); }\n\t\n\tdouble norm() const { return (sqrt(sqrNorm())); }\n\tdouble sqrNorm() const { return (x*x + y*y); }\n\t\n\tbool operator < (const V2 &p) const { \n\t\treturn (x != p.x ? x < p.x : y < p.y); \n\t}\n\tbool operator == (const V2 &p) const {\n\t\treturn (equals(x, p.x) && equals(y, p.y));\n\t}\n\n\tV2 rotate90() const { return (V2(y, -x)); }\n\tV2 normalized() const { return (*this / norm()); }\n\n\tdouble dot(const V2 &p) const { return (x*p.x + y*p.y); }\n\tdouble cross(const V2 &p) const { return (x*p.y - y*p.x); }\n\tdouble arg() const { return (atan2(y, x)); }\n};\n\nV2 polar(double r, double a) { return (V2(cos(a) * r, sin(a) * r)); }\n\nint ccw(V2 p0, V2 p1, V2 p2) {\n\tV2 a = p1-p0, b = p2-p0;\n\tif (a.cross(b) > EPS) return (COUNTER_CLOCKWISE);\n\tif (a.cross(b) < -EPS) return (CLOCKWISE);\n\tif (a.dot(b) < -EPS) return (ONLINE_BACK);\n\tif (a.sqrNorm() < b.sqrNorm()) return (ONLINE_FRONT);\n\treturn (ON_SEGMENT);\n}\n\n\nusing Polygon = vector<V2>;\n\nint containP(const Polygon &g, V2 p) {\n\tint size = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < size; i++) {\n\t\tV2 a = g[i]-p, b = g[(i+1)%size]-p;\n\t\tif (abs(a.cross(b)) < EPS && a.dot(b) < EPS) return (1);\n\t\tif (a.y > b.y) swap(a, b);\n\t\tx ^= (a.y < EPS && EPS < b.y && a.cross(b) > EPS);\n\t}\n\treturn (x ? 2 : 0);\n}\n\nstruct Segment {\n\tV2 p1, p2;\n\tSegment() {}\n\tSegment(V2 p1, V2 p2) : p1(p1), p2(p2) {}\n};\n\nusing Line = Segment;\n\nstruct Circle {\n\tV2 o;\n\tdouble r;\n\tCircle() {}\n\tCircle(V2 o, double r) : o(o), r(r) {}\n\n\tint intersects(const Circle &c) {\n\t\tdouble d = (o-c.o).norm();\n\t\tif (d + c.r < r) return (3); //contain on A\n\t\tif (d + r < c.r) return (-3); //contain on B\n\t\tif (equals(d + c.r, r)) return (1);  //inscribed on A\n\t\tif (equals(d + r, c.r)) return (-1); //inscribed on B\n\t\tif (r + c.r < d) return (0); //circumscribed\n\t\tif (equals(r + c.r, d)) return (4); //far \n\t\treturn (2); //intersected\n\t}\n\n\tvector<V2> crossPoints(const Circle &c) {\n\t\tint inter = intersects(c);\n\t\tif (abs(inter) == 3 || inter == 0) return (vector<V2>());\n\t\tdouble d = (c.o-o).norm();\n\t\tdouble t = (c.o-o).arg();\n\t\tif (abs(inter) == 1 || inter == 4) return ((vector<V2>){o + (c.o-o).normalized() * r});\n\t\tdouble a = acos((r*r + d*d - c.r*c.r) / (2*r*d));\n\t\treturn ((vector<V2>){o + polar(r, t+a), o + polar(r, t-a)});\n\t}\n};\n\n\nPolygon ConvexHull(Polygon data) {\n\tint size = data.size();\n\tPolygon u, l;\n\tsort(begin(data), end(data));\n\tif (size < 3) return (data);\n\tu.push_back(data[0]); u.push_back(data[1]);\n\tl.push_back(data[size-1]); l.push_back(data[size-2]);\n\tfor (int i = 2; i < size; i++) {\n\t\tfor (int sz = u.size(); sz > 1 && ccw(u[sz-2], u[sz-1], data[i]) != CLOCKWISE; sz--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(data[i]);\n\t}\n\tfor (int i = size-3; i >= 0; i--) {\n\t\tfor (int sz = l.size(); sz > 1 && ccw(l[sz-2], l[sz-1], data[i]) != CLOCKWISE; sz--) {\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(data[i]);\n\t}\n\treverse(begin(l), end(l));\n\tfor (int i = u.size()-2; i >= 1; i--) {\n\t\tl.push_back(u[i]);\n\t}\n\treturn (l);\n}\n\nint main() {\n\tint N; cin >> N;\n\tPolygon points(N);\n\tfor (auto &p : points) cin >> p.x >> p.y;\n\n\tint Q; cin >> Q;\n\twhile (Q--) {\n\t\tV2 p; cin >> p.x >> p.y;\n\t\tcout << containP(points, p) << endl;\n\t}\n\treturn (0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define E 1e-18\n#define ll long long\n#define int long long\n#define db double\n#define For(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\ninline ll read(){\n\tll x=0;char ch=getchar();bool f=0;\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn f?-x:x;\n}\nvoid write(ll x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);putchar(x%10+'0');\n}\nvoid writeln(ll x){write(x);puts(\"\");}\nvoid writep(ll x){write(x);putchar(' ');}\n\nint const N=100+3;\nint n,vis[N];\nstruct point{\n\tdb x,y;\n    point operator - (point A) const{return (point){x-A.x,y-A.y};}\n    point operator + (point A) const{return (point){x+A.x,y+A.y};}\n    bool operator == (point A) const{return x==A.x && y==A.y;}\n\tvoid print(){printf(\"%.10lf %.10lf\\n\",x,y);}\n}A[N];\n\npoint operator *(db x,point A){return (point){x*A.x,x*A.y};}\ndb CJ(point A,point B){return A.x*B.y-B.x*A.y;}//叉积 \ndb DJ(point A,point B){return A.x*B.x+A.y*B.y;}//点积 \ndb dis(point A){return sqrt(A.x*A.x+A.y*A.y);}//向量长度 \nbool cmp(point A,point B){return (CJ(A,B)>0 || CJ(A,B)==0 && dis(A)<dis(B));}//按极角排序 \npoint CGL_1_A(point A,point B,point C){//点在直线上的投影点\n\tdb d=dis(B-A);\n\treturn (A+(DJ(C-A,B-A)/d/d*(B-A)));\n}\npoint CGL_1_B(point A,point B,point C){//点关于直线的对称点\n\tpoint P=CGL_1_A(A,B,C);\n\treturn (C+2*(P-C));\n}\nint CGL_1_C(point A,point B,point C){//向量的位置关系(向量AC和向量AB) \n    if (CJ(B-A,C-A)>0) return 1;//逆时针 \n    if (CJ(B-A,C-A)<0) return 2;//顺时针 \n    if (DJ(C-A,B-A)<0) return 3;//方向相反\n\tif (dis(C-A)>dis(B-A)) return 4;//方向相同 AC>AB\n\tif (dis(C-A)<=dis(B-A)) return 5;//方向相同 AB>AC\n}\nint CGL_2_A(point A,point B,point C,point D){//判断直线平行、垂直\n\tif (CJ(B-A,D-C)==0) return 2;//平行 \n\tif (DJ(B-A,D-C)==0) return 1;//垂直 \n\treturn 0;//相交 \n}\nint CGL_2_B(point A,point B,point C,point D){//判断线段是否有交\n\tif (min(A.x,B.x)>max(C.x,D.x) || min(C.x,D.x)>max(A.x,B.x) || min(A.y,B.y)>max(C.y,D.y) || min(C.y,D.y)>max(A.y,B.y)) return 0;//快速排斥实验(两个矩形是否相交)\n\treturn CJ(B-A,C-A)*CJ(B-A,D-A)<=0 && CJ(D-C,A-C)*CJ(D-C,B-C)<=0;//跨立实验\n}\npoint CGL_2_C(point A,point B,point C,point D){//求直线交点\n\tpoint p1=CGL_1_A(A,B,C),p2=CGL_1_A(A,B,D);//求C、D在AB上的投影点 \n\tdb d1=dis(C-p1),d2=dis(D-p2);//三角形的相似比 \n\tif (CJ(B-A,C-A)*CJ(B-A,D-A)<0) return (C+(d1/(d1+d2)*(D-C)));\n\telse if (d1<d2) return (D+d2/(d2-d1+E)*(C-D));\n\telse return (C+d1/(d1-d2+E)*(D-C));\n}\ndb Distance(point A,point B,point C){//点到线段的距离 \n\tpoint P=CGL_1_A(A,B,C);//C在AB上的投影点 \n\tif (P.x>=min(A.x,B.x) && P.x<=max(A.x,B.x) && P.y>=min(A.y,B.y) && P.y<=max(A.y,B.y)) return dis(P-C);//投影点在线段上 \n\treturn min(dis(A-C),dis(B-C));//两个端点到C的最小值 \n}\ndb CGL_2_D(point A,point B,point C,point D){//线段到线段的距离\n\tpoint P=CGL_2_C(A,B,C,D);//求直线交点 \n\tif (P.x>=min(A.x,B.x) && P.x<=max(A.x,B.x) && P.y>=min(A.y,B.y) && P.y<=max(A.y,B.y) && P.x>=min(C.x,D.x) && P.x<=max(C.x,D.x) && P.y>=min(C.y,D.y) && P.y<=max(C.y,D.y)) return 0;//线段有交点 \n\treturn min(Distance(A,B,C),min(Distance(A,B,D),min(Distance(C,D,A),Distance(C,D,B))));\n}\ndb CGL_3_A(){//多边形的有向面积\n    int n=read(),ans=0;\n    for (int i=1;i<=n;i++) scanf(\"%lf%lf\",&A[i].x,&A[i].y);\n    A[n+1]=A[1];\n    for (int i=1;i<=n;i++) ans+=CJ(A[i],A[i+1]);//叉积求平行四边形面积 \n    return ans/2.0;//总面积要 ÷2\n}\nint CGL_3_B(){//判断多边形是否为凸多边形\n    int n=read();\n    for (int i=1;i<=n;i++) scanf(\"%lf%lf\",&A[i].x,&A[i].y);\n\tA[0]=A[n];A[n+1]=A[1];\n\tfor (int i=1;i<=n;i++) if (CJ(A[i-1]-A[i],A[i+1]-A[i])>0) return 0;//每个角要大于180° \n\treturn 1; \n}\nint CGL_3_C(point A[],point P){//点与多边形的位置关系\n    point Q,Q_;\n    memset(vis,0,sizeof(vis));\n    Q.x=1e9;Q.y=P.y;//向右无限延伸 \n    Q_.x=-1e9;Q_.y=P.y;//向左无限延伸 \n\tfor (int i=1;i<=n;i++)\n\t  if (CGL_2_B(A[i],A[i%n+1],P,Q) && CGL_2_B(A[i],A[i%n+1],P,Q_)) return 1;//在简单多边形的边上 \n\tfor (int i=1;i<=n;i++)\n\t  if (A[i].y==P.y && A[i].x>P.x) A[i].y--,vis[i]=1;//强制使在射线上的点往下移 \n\tint sum=0;\n\tfor (int i=1;i<=n;i++)\n\t  if ((vis[i] || vis[i%n+1]) && CJ(Q-P,A[i]-P)*CJ(Q-P,A[i%n+1]-P)<=0) sum++;//修改过的点只需判断所在的边是否在射线两侧 \n\t  else if (CGL_2_B(A[i],A[i%n+1],P,Q)) sum++;//其余的边经过射线的个数\n\tfor (int i=1;i<=n;i++)\n\t  if (vis[i]) A[i].y++;//移回来 \n\treturn (sum&1)?2:0;//2-在多边形内 0-在多边形外 \n}\n\nsigned main(){\n\tn=read();\n\tfor (int i=1;i<=n;i++) scanf(\"%lf%lf\",&A[i].x,&A[i].y);\n\tfor (int m=read();m;m--){\n\t\tpoint P;\n\t\tscanf(\"%lf%lf\",&P.x,&P.y);\n\t\twriteln(CGL_3_C(A,P));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned AOJ_CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Reflect\nsigned AOJ_CGL1B(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<reflect(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=jp\n*/\n\n//CCW\nsigned AOJ_CGL1C(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==CCW_COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CCW_CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==CCW_ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==CCW_ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==CCW_ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n\n//Parallel / Orthogonal\nsigned AOJ_CGL2A(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    if(isParallel(Line(p0,p1),Line(p2,p3))) cout<<2<<endl;\n    else if(isOrthogonal(Line(p0,p1),Line(p2,p3))) cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n*/\n\n//intersectSS\nsigned AOJ_CGL2B(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<(intersectSS(Segment(p0,p1),Segment(p2,p3)))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=jp\n*/\n\n//cross point\nsigned AOJ_CGL2C(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<getCrossPointSS(Segment(p0,p1),Segment(p2,p3))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=jp\n*/\n\n//distanceSS\nsigned AOJ_CGL2D(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    printf(\"%.12f\\n\",getDistanceSS(Segment(p0,p1),Segment(p2,p3)));\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n*/\n\n//area of Polygon\nsigned AOJ_CGL3A(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  printf(\"%.1f\\n\",area(p));\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=jp\n*/\n\n\n//isConvex\nsigned AOJ_CGL3B(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  cout<<isConvex(p)<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=jp\n*/\n\n\n\n//contains\nsigned AOJ_CGL3C(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  int q;\n  cin>>q;\n  while(q--){\n    Point r;\n    cin>>r;\n    cout<<contains(p,r)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n*/\n\n//Common Tangent\nsigned AOJ_CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  //AOJ_CGL1A();\n  //AOJ_CGL1B();\n  //AOJ_CGL1C();\n\n  //AOJ_CGL2A();\n  //AOJ_CGL2B();\n  //AOJ_CGL2C();\n  //AOJ_CGL2D();\n  \n  //AOJ_CGL3A();\n  //AOJ_CGL3B();\n  AOJ_CGL3C();\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <cfloat>\n#include <climits>\n#include <ctime>\n#include <cassert>\n#include <numeric>\n#include <fstream>\n#include <functional>\n#include <bitset>\n\nusing namespace std;\nusing Real = double;\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point &p, const Real &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n\n// 入力\nistream &operator>>(istream &is, Point &p) {\n  Real a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\n// 出力\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// 原点を中心として, 点 p を θ 回転すた点を返す\nPoint rotate(Real theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n  return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n  return (d * PI / 180.0);\n}\n\n// ∠BAC をラジアンで取得\nReal get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - a);\n  Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  Real theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\n// x軸, y軸の順にソート\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return !eq(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n// 直線\n// 2 点を通る直線\n// Ax + By = C  \nstruct Line {\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(Real A, Real B, Real C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\n// 線分\n// 2 点を結ぶ\nstruct Segment : Line {\n  Segment() = default;\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\n// 中心と半径\nstruct Circle {\n  Point p;\n  Real r;\n\n  Circle() = default;\n\n  Circle(Point p, Real r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;   // 注意!! 凸多角形は反時計回りに与える.(保証されない場合は面積が負なら reverse をかける)\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\n\n//          +1\n//          \n//  +2   a   0   b  -2\n//\n//          -1\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\n\n// 2 直線が平行か\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool parallel(const Line &a, const Line &b) {\n  return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// 2 直線が垂直か\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool orthogonal(const Line &a, const Line &b) {\n  return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// 直線 l に 点 p から垂線を下ろして,交わる点を返す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// 同じ\n// 直線として扱われそう\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// 直線 l に対して, 点 p と線対称な位置にある点を返す.\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\n// 直線上に点が乗るかどうか\nbool intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n// 直線 l と直線 m の交差判定\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\n// 線分上に点があるかどうか\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\n// 直線 l と 線分 s の交差判定\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\n// 点 p と 直線 l との距離\nReal distance(const Line &l, const Point &p);\n\n// 円 c と直線 l との交差判定\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\n// 点 p が 円 c 上にあるかどうか\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n\n// 線分同士の交差判定\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// 円 c と 線分 l との交差判定\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\n// 円同士の交差判定\n// 4 := 離れている\n// 3 := 外接する\n// 2 := 交わる\n// 1 := 内接する\n// 0 := 内包する\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2) {\n  if(c1.r < c2.r) swap(c1, c2);\n  Real d = abs(c1.p - c2.p);\n  if(c1.r + c2.r < d) return 4;\n  if(eq(c1.r + c2.r, d)) return 3;\n  if(c1.r - c2.r < d) return 2;\n  if(eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\n\n// 点と点の距離\nReal distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\n// 直線と点の距離\nReal distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\n// 直線と直線の距離 (もちろん交わってたら 0)\nReal distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\n// 線分と点の距離\nReal distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\n// 線分同士の距離\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\n// 直線と線分の距離\nReal distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\n// 直線同士の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\nPoint crosspoint(const Line &l, const Line &m) {\n  Real A = cross(l.b - l.a, m.b - m.a);\n  Real B = cross(l.b - l.a, l.b - m.a);\n  if(eq(abs(A), 0.0) && eq(abs(B), 0.0)) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\n// 線分同士の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment &l, const Segment &m) {\n  return crosspoint(Line(l), Line(m));\n}\n\n\n// 円と直線の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point pr = projection(l, c.p);\n  Point e = (l.b - l.a) / abs(l.b - l.a);\n  if(eq(distance(l, c.p), c.r)) return {pr, pr};\n  double base = sqrt(c.r * c.r - norm(pr - c.p));\n  return {pr - e * base, pr + e * base};\n}\n\n\n// 円と線分の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\n// 円同士の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  Real d = abs(c1.p - c2.p);\n  Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  Real t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\n// 点 p から円 C へ接戦を引いた時の、接点を返す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\npair< Point, Point > tangent(const Circle &c1, const Point &p2) {\n  return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// 円と円の共通接線を複数返す\n// 0 ~ 4 つの可能性がある\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\nLines tangent(Circle c1, Circle c2) {\n  Lines ret;\n  if(c1.r < c2.r) swap(c1, c2);\n  Real g = norm(c1.p - c2.p);\n  if(eq(g, 0)) return ret;\n  Point u = (c2.p - c1.p) / sqrt(g);\n  Point v = rotate(PI * 0.5, u);\n  for(int s : {-1, 1}) {\n    Real h = (c1.r + s * c2.r) / sqrt(g);\n    if(eq(1 - h * h, 0)) {\n      ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n    } else if(1 - h * h > 0) {\n      Point uu = u * h, vv = v * sqrt(1 - h * h);\n      ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n      ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n    }\n  }\n  return ret;\n}\n\n// 多角形が凸かどうかを判定\n// 与えられる多角形は反時計回りなことが要請される\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\n// 凸包に含まれる点上および辺上の頂点からなる多角形を返す.\n// 多角形の開始位置は特に指定がない.\n// 反時計回りに返されることは保証されていそう\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\n// 多角形 Q と点 p との関係を返す\n// 0 := OUT\n// 1 := ON\n// 2 := IN\n// 多角形は反時計回りに渡す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\nenum {\n  OUT, ON, IN\n};\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvoid merge_segments(vector< Segment > &segs) {\n\n  auto merge_if_able = [](Segment &s1, const Segment &s2) {\n    if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n    if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n    if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n    s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n    return true;\n  };\n\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\nPolygon convex_cut(const Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\nReal area2(const Polygon &p) {\n  Real A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\nReal area2(const Polygon &p, const Circle &c) {\n  if(p.size() < 3) return 0.0;\n  function< Real(Circle, Point, Point) > cross_area = [&](const Circle &c, const Point &a, const Point &b) {\n    Point va = c.p - a, vb = c.p - b;\n    Real f = cross(va, vb), ret = 0.0;\n    if(eq(f, 0.0)) return ret;\n    if(max(abs(va), abs(vb)) < c.r + EPS) return f;\n    if(distance(Segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));\n    auto u = crosspoint(c, Segment(a, b));\n    vector< Point > tot{a, u.first, u.second, b};\n    for(int i = 0; i + 1 < tot.size(); i++) {\n      ret += cross_area(c, tot[i], tot[i + 1]);\n    }\n    return ret;\n  };\n  Real A = 0;\n  for(int i = 0; i < p.size(); i++) {\n    A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\nReal convex_diameter(const Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  Real maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\nReal closest_pair(Points ps) {\n  if(ps.size() <= 1) throw (0);\n  sort(begin(ps), end(ps));\n\n  auto compare_y = [&](const Point &a, const Point &b) {\n    return imag(a) < imag(b);\n  };\n  vector< Point > beet(ps.size());\n  const Real INF = 1e18;\n\n  function< Real(int, int) > rec = [&](int left, int right) {\n    if(right - left <= 1) return INF;\n    int mid = (left + right) >> 1;\n    auto x = real(ps[mid]);\n    auto ret = min(rec(left, mid), rec(mid, right));\n    inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n    int ptr = 0;\n    for(int i = left; i < right; i++) {\n      if(abs(real(ps[i]) - x) >= ret) continue;\n      for(int j = 0; j < ptr; j++) {\n        auto luz = ps[i] - beet[ptr - j - 1];\n        if(imag(luz) >= ret) break;\n        ret = min(ret, abs(luz));\n      }\n      beet[ptr++] = ps[i];\n    }\n    return ret;\n  };\n  return rec(0, (int) ps.size());\n}\n\nint main(){\n    \n    int n; cin >> n;\n    Polygon g(n);\n    for(int i = 0; i < n; i++){\n        cin >> g[i];\n    }\n    int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        Point p;\n        cin >> p;\n        cout << contains(g, p) << endl;\n    }\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sgn(dsp({a,b},p))==0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\n#include <vector>\nconst double EPS = 1e-9;\nusing namespace std;\nclass point {\npublic:\n\tdouble x, y;\n\tpoint(double a, double b) {\n\t\tx = a; y = b;\n\t}\n\tpoint operator - (point v) {\n\t\treturn point(x - v.x, y - v.y);\n\t}\n\tpoint operator + (point v) {\n\t\treturn point(x + v.x, y + v.y);\n\t}\n};\nclass Vector {\npublic:\n\n\tdouble x, y;\n\tVector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tVector operator * (const Vector &v)const {\n\t\treturn Vector(x*v.x, y* v.y);\n\t}\n\tVector operator * (double a) {\n\t\treturn Vector(x * a, y * a);\n\t}\n\tVector operator - (Vector v) {\n\t\treturn Vector(x - v.x, y - v.y);\n\t}\n\tVector operator + (Vector v) {\n\t\treturn Vector(x + v.x, y + v.y);\n\t}\n};\ntypedef vector<Vector> polygon;\nclass circle {\npublic:\n\tpoint p;\n\tdouble r;\n\tcircle(point a, double b) : p(a), r(b) {};\n\n};\ninline double dot(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(Vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(Vector v) {\n\treturn sqrt(squ(v));\n}\ninline void printv(Vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline void printpp(pair<point, point> p) {\n\tprintf(\"%.7f %.7f %.7f %.7f\", p.first.x, p.first.y, p.second.x, p.second.y);\n}\ninline void printc(Vector v1, Vector v2) {\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", v1.x, v1.y, v2.x, v2.y);\n}\ninline void printpg(polygon pg, int min) {\n\tcout << pg.size() << endl;\n\tfor (int i = min; i < pg.size(); i++)\n\t\t//printf(\"%d %d\\n\", pg[i].x, pg[i].y);\n\t\tcout << pg[i].x << \" \" << pg[i].y << endl;\n\tfor(int i = 0; i < min; i++) cout << pg[i].x << \" \" << pg[i].y << endl;\n}\ninline Vector pro(Vector base, Vector v, Vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tVector v1 = base * a;\n\treturn v1 + be;\n}\ninline Vector ref(Vector v, Vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(Vector v1, Vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(a)) return 2;\n\telse return 0;\n}\ninline int inter(Vector v1, Vector v2, Vector v3, Vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(Vector v1, Vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\tVector c = v1 - v2;\n\tVector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(Vector v1, Vector v2, Vector v3, Vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\ninline Vector getcross(Vector v1, Vector v2, Vector v3, Vector v4) {\n\tVector v5 = pro(v2 - v1, v3 - v1, v1);\n\tVector v6 = pro(v2 - v1, v4 - v1, v1);\n\tdouble a = disPP(v3, v5);\n\tdouble b = disPP(v4, v6);\n\tVector vans = (v6 - v5)*a*(1 / (a + b)) + v5;\n\treturn vans;\n\n}\ninline pair<Vector, Vector> getccl(double r, Vector o, Vector v1, Vector v2) {\n\tVector ev = (v2 - v1)*(1 / norm(v2 - v1));\n\tVector pr = pro(v2 - v1, o - v1, v1);\n\tdouble l = sqrt(r *r - squ(o - pr));\n\tVector ans1 = ev * l + pr;\n\tVector ans2 = pr - ev * l;\n\tif (ans1.x > ans2.x) swap(ans1, ans2);\n\telse if (ans1.x == ans2.x)\n\t\tif (ans1.y > ans2.y) swap(ans1, ans2);\n\treturn make_pair(ans1, ans2);\n}\ninline pair<point, point> getccc(circle c1, circle c2) {\n\tVector v1(c2.p.x - c1.p.x, c2.p.y - c1.p.y);\n\tdouble dis = norm(v1);\n\tdouble a = acos((dis*dis + c1.r*c1.r - c2.r*c2.r) / (2 * c1.r*dis));\n\tdouble b = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n\tpoint pa(c1.r*cos(a + b), c1.r*sin(a + b));\n\tpoint pb(c1.r*cos(b - a), c1.r*sin(b -a));\n\tpoint ans1(c1.p + pa);\n\tpoint ans2(c1.p + pb);\n\tif (ans1.x > ans2.x || ((ans1.x == ans2.x) && (ans1.y > ans2.y))) swap(ans1, ans2);\n\treturn make_pair(ans1, ans2);\n}\nconst int num = 100000;\ninline bool lessX(const Vector &p1, const Vector &p2) {\n\treturn (p1.x < p2.x) || ((p1.x == p2.x) && (p1.y < p2.y));\n}\ninline polygon getpg(polygon o) {\n\tsort(o.begin(), o.end(), lessX);\n\tpolygon t, u;\n\tt.push_back(o[0]);\n\tt.push_back(o[1]);\n\tu.push_back(o[0]);\n\tu.push_back(o[1]);\n\tfor (int i = 2; i < o.size(); i++) {\n\t\tfor (int j = t.size(); (t.size() > 1) && (ccw(t[t.size() - 2], t[t.size() - 1], o[i]) == 1); j--)\n\t\t\tt.pop_back();\n\t\tt.push_back(o[i]);\n\t}\n\tfor (int i = 2; i < o.size(); i++) {\n\t\tfor (int j = u.size(); (u.size() > 1) && (ccw(u[u.size() - 2], u[u.size() - 1], o[i]) == -1); j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(o[i]);\n\t}\n\treverse(t.begin(), t.end());\n\tfor (int i = 1; i < t.size() - 1; i++)\n\t\tu.push_back(t[i]);\n\treturn u;\n}\ninline int cont(polygon pg, Vector p) {\n\tint x = 0;\n\tfor (int i = 0; i < pg.size(); i++) {\n\t\tVector v1 = pg[i] - p;\n\t\tVector v2 = pg[(i + 1)%pg.size()] - p;\n\t\tif ((cross(v1, v2) == 0) && (dot(v1, v2) < 0.0)) return 1;\n\t\tif (v1.y > v2.y) swap(v1, v2);\n\t\tif ((cross(v1, v2) > 0.0) && v1.y < EPS && v2.y > EPS) x++;\n\t}\n\treturn (x % 2 == 0) ? 0 : 2;\n}\nint main() {\n\tint n;\n\tdouble x, y;\n\tpolygon o;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tVector p(x, y);\n\t\tcout << cont(o, p) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint n, q, a, b;\nint x[101], y[101];\n\nint cp(int x, int y, int u, int w, int p, int q) {\n\treturn (x - p) * (w - q) - (u - p) * (y - q);\n}\n\nint main()\n{\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> x[i] >> y[i];\n\n\tx[n] = x[0];\n\ty[n] = y[n];\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> a >> b;\n\n\t\tint t = 0;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (cp(x[0], y[0], x[i], y[i], a, b) >= 0 && cp(x[i + 1], y[i + 1], x[0], y[0], a, b) >= 0) {\n\t\t\t\tif (cp(x[i], y[i], x[i + 1], y[i + 1], a, b) == 0)\n\t\t\t\t\tt = 1;\n\t\t\t\telse if (cp(x[i], y[i], x[i + 1], y[i + 1], a, b) > 0) {\n\t\t\t\t\tif (cp(x[i], y[i], x[i + 1], y[i + 1], x[0], y[0]) > 0)\n\t\t\t\t\t\tt += 2;\n\t\t\t\t\telse if (cp(x[i], y[i], x[i + 1], y[i + 1], x[0], y[0]) < 0)\n\t\t\t\t\t\tt -= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcout << t << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// conj(x) : complex conjugate,(0,1)->(0,-1)\n// abs(x) : dist between(0,0) and x\n// norm(x) : abs(x) * abs(x)\n// arg(x) : argment,[-PI,PI]\nusing CP = complex<long double>;\n#define X real()\n#define Y imag()\nconst long double PI = acos(-1.0L);\nconst long double EPS = 1e-10;\nbool operator==(const CP &l, const CP &r) {\n  return norm(l - r) <= EPS * EPS;\n}\n// cos a\nlong double costh(long double a, long double b,\n                  long double c) {\n  return (b * b + c * c - a * a) / (2.0L * b * c);\n}\n\n// dot(a,b) = |a||b|cos x\nlong double dot(CP a, CP b) { return (conj(a) * b).X; }\n// cross(a,b) : area of parallelogram\n// sign : a-> b ,counter clockwise? + : -\nlong double cross(CP a, CP b) { return (conj(a) * b).Y; }\nlong double corner(CP a, CP b) {\n  //[0,PI]\n  return acos(dot(a, b) / (abs(a) * abs(b)));\n}\nbool equalP(CP a, CP b) { return norm(a - b) <= EPS * EPS; }\n\nCP projectionLP(CP s, CP t, CP p) {\n  if(s == t) return s;\n  CP base = t - s;\n  long double r = dot(p - s, base) / norm(base);\n  return s + base * r;\n}\n\nCP reflectionLP(CP s, CP t, CP p) {\n  CP tmp = (projectionLP(s, t, p) - p);\n  tmp *= 2;\n  return p + tmp;\n}\n\nint calc_clockwiseSP(CP s, CP t, CP p) {\n  t -= s;\n  p -= s;\n  if(cross(t, p) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(t, p) < -EPS) return -1; //\"CLOCK_WISE\"\n  if(dot(t, p) < 0) return 2;       // \"ONLINE_BACK\"\n  if(norm(t) < norm(p)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nint parallel_orthogonalLL(CP s, CP t, CP a, CP b) {\n  t -= s;\n  b -= a;\n  if(abs(cross(t, b)) <= EPS) return 2; // \"parallel\"\n  if(abs(dot(t, b)) <= EPS) return 1;   // \"orthogonal\"\n  return 0;\n}\n\nCP intersectionLL(CP a, CP b, CP c, CP d) {\n  return a + (b - a) * (cross(d - c, c - a) /\n                        cross(d - c, b - a));\n}\n\nbool on_segSP(CP s, CP t, CP p) {\n  // if not use end point, dot(s - p, t - p) < 0\n  return abs(cross(s - p, t - p)) <= EPS &&\n         dot(s - p, t - p) <= 0;\n}\n\n// crossing segments? (a,b) and (c,d)\nbool iscrossSS(CP a, CP b, CP c, CP d) {\n  // parallel\n  if(abs(cross(a - b, c - d)) <= EPS) {\n    return on_segSP(a, b, c) || on_segSP(a, b, d) ||\n           on_segSP(c, d, a) || on_segSP(c, d, b);\n  }\n  CP isp = intersectionLL(a, b, c, d);\n  return on_segSP(a, b, isp) && on_segSP(c, d, isp);\n}\n\nlong double distLP(CP s, CP t, CP p) {\n  return abs(cross(t - s, p - s) / abs(t - s));\n}\n\nlong double distSP(CP s, CP t, CP p) {\n  if(dot(t - s, p - s) < 0) return abs(p - s);\n  if(dot(s - t, p - t) < 0) return abs(p - t);\n  return distLP(s, t, p);\n}\n\nlong double distSS(CP a, CP b, CP c, CP d) {\n  long double res = 1e18;\n  if(iscrossSS(a, b, c, d)) return 0.0L;\n  res = min(res, distSP(a, b, c));\n  res = min(res, distSP(a, b, d));\n  res = min(res, distSP(c, d, a));\n  res = min(res, distSP(c, d, b));\n  return res;\n}\n\n// counter clockwise\nbool is_convex(const vector<CP> &pol) {\n  int n = pol.size();\n  for(int i = 0; i < n; ++i)\n    if(cross(pol[(i + 1) % n] - pol[i],\n             pol[(i + 2) % n] - pol[(i + 1) % n]) < -EPS)\n      return 0;\n  return 1;\n}\n\nvector<CP> convex_hull(vector<CP> &ps) {\n  auto lmd = [&](const CP &l, const CP &r) {\n    if(l.X != r.X) return l.X < r.X;\n    return l.Y < r.Y;\n  };\n  vector<CP> qs;\n  int psize = ps.size();\n  sort(ps.begin(), ps.end(), lmd);\n  int k = 0;\n  qs.resize(psize * 2);\n  for(int i = 0; i < psize; ++i) {\n    while(k > 1 && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  for(int i = psize - 2, t = k; i >= 0; --i) {\n    while(k > t && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  qs.resize(k - 1);\n  return qs;\n}\n\nlong double convex_diameter(vector<CP> &newv) {\n  vector<CP> v = convex_hull(newv);\n  int n = v.size(), i = 0, j = 0;\n  if(n == 2) return abs(v[0] - v[1]);\n  for(int k = 0; k < n; ++k) {\n    if(v[k].X < v[i].X) i = k;\n    if(v[k].X > v[j].X) j = k;\n  }\n  long double res = 0;\n  int si = i, sj = j;\n  while(i != sj || j != si) {\n    res = max(res, abs(v[i] - v[j]));\n    if(cross(v[(i + 1) % n] - v[i], v[(j + 1) % n] - v[j]) <\n       0)\n      (++i) %= n;\n    else\n      (++j) %= n;\n  }\n  return res;\n}\n\nvector<CP> convex_cut(const vector<CP> &v, const CP &s,\n                      const CP &t) {\n  vector<CP> res;\n  int n = v.size();\n  for(int i = 0; i < n; ++i) {\n    CP nows = v[i], nowt = v[(i + 1) % n];\n    if(cross(t - s, nows - s) >= -EPS) res.push_back(nows);\n    if(cross(t - s, nows - s) * cross(t - s, nowt - s) < 0)\n      res.push_back(intersectionLL(s, t, nows, nowt));\n  }\n  return res;\n}\n\nstruct Circle {\n  CP o;\n  long double r;\n  Circle(long double _x = 0.0L, long double _y = 0.0L,\n         long double _r = 0.0L)\n      : o(CP(_x, _y)), r(_r) {}\n  Circle(CP _o, long double _r = 0.0) : o(_o), r(_r) {}\n};\n\nvoid intersectionCC(Circle c1, Circle c2, CP &res1,\n                    CP &res2) {\n  long double d = abs(c1.o - c2.o);\n  long double arg = acos(costh(c2.r, c1.r, d));\n  res1 = (c2.o - c1.o) * CP(cos(arg), sin(arg));\n  res1 *= c1.r / abs(res1);\n  res1 += c1.o;\n  res2 = reflectionLP(c1.o, c2.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid intersectionCL(Circle ci, CP s, CP t, CP &res1,\n                    CP &res2) {\n  res1 = res2 = projectionLP(s, t, ci.o);\n  long double r = sqrtl(ci.r * ci.r - norm(res1 - ci.o));\n  t -= s;\n  t *= r / abs(t);\n  res1 += t;\n  res2 -= t;\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid contactCP(Circle ci, CP p, CP &res1, CP &res2) {\n  long double d = abs(ci.o - p);\n  if(abs(d - ci.r) <= EPS) {\n    res1 = res2 = p;\n    return;\n  }\n  else if(d < ci.r) {\n    res1 = res2 = CP(-1e18, -1e18);\n    return;\n  }\n  long double arg = asin(ci.r / d);\n  res1 = (ci.o - p) * CP(cos(arg), sin(arg));\n  res1 *= (d * cos(arg)) / abs(res1);\n  res1 += p;\n  res2 = reflectionLP(p, ci.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nlong double polygonarea(const vector<CP> &pol) {\n  int n = pol.size();\n  long double res = 0;\n  for(int i = 0; i < n; ++i)\n    res += (pol[(i - 1 + n) % n].X - pol[(i + 1) % n].X) *\n           pol[i].Y;\n  return res / 2.0L;\n}\n\nint containPolP(vector<CP> &pol, CP p) {\n  bool con = 0, onseg = 0;\n  int n = pol.size();\n  for(int i = 0; i < n; ++i) {\n    onseg |= on_segSP(pol[i], pol[(i + 1) % n], p);\n    CP s = pol[i] - p, t = pol[(i + 1) % n] - p;\n    if(s.Y > t.Y) swap(s, t);\n    if(s.Y * t.Y <= 0 && t.Y > 0 && cross(s, t) < 0)\n      con = !con;\n  }\n  if(onseg) return 1;\n  if(con) return 2;\n  return 0;\n}\n\nlong long n, q;\nvector<CP> v;\n\nint main() {\n  cout << fixed << setprecision(10);\n  cin >> n;\n  for(int i = 0; i < n; ++i) {\n    int a, b;\n    cin >> a >> b;\n    v.emplace_back(a, b);\n  }\n  cin >> q;\n  while(q--) {\n    int a, b;\n    CP p;\n    cin >> a >> b;\n    p = CP(a, b);\n    cout << containPolP(v, p) << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define all(c) c.begin(),c.end()\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nbool eq(P a, P b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool operator < (const P& l, const P& r){\t\t//sort x -> y\n\treturn eq(l.real(),r.real()) ? l.imag()<r.imag() : l.real() < r.real();\n}\nbool compxy (const P& l, const P& r){\t\t//sort x -> y\n\treturn eq(l.real(),r.real()) ? l.imag()<r.imag() : l.real() < r.real();\n}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=-2, BACK=2, ON=0};\t//!!MAEHARAと一緒(convが書きやすい(次の点を取る条件をccw>0とかける))\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,s.sc,p)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\ninline Pol conv(Pol p){\t\t//convex\n\tint n=p.size(),k=0;\n\tassert(n>=3);\n\tsort(all(p),compxy);\n//\tif(p[0]<p[1]) ;\n\tPol ret(2*n);\n\trep(i,n){\n\t\twhile(k>=2 && ccw(ret[k-2],ret[k-1],p[i])<=0) --k;\n\t\tret[k++]=p[i];\n\t}\n\tfor(int i=n-2,t=k+1;i>=0;i--){\n\t\twhile(k>=t && ccw(ret[k-2],ret[k-1],p[i])<=0) --k;\n\t\tret[k++]=p[i];\n\t}\n\tret.resize(k-1);\n\treturn ret;\n}\ninline Pol convall(Pol p){\t\t//conv上の点全部\n\tint n=p.size(),k=0;\n\tassert(n>=3);\n\tsort(all(p),compxy);\n//\tif(p[0]<p[1]) ;\n\tPol ret(2*n);\n\trep(i,n){\n\t\twhile(k>=2 && ccw(ret[k-2],ret[k-1],p[i])==-1) --k;\n\t\tret[k++]=p[i];\n\t}\n\tfor(int i=n-2,t=k+1;i>=0;i--){\n\t\twhile(k>=t && ccw(ret[k-2],ret[k-1],p[i])==-1) --k;\n\t\tret[k++]=p[i];\n\t}\n\tret.resize(k-1);\n\tsort(all(ret),compxy);\n\tret.erase(unique(all(ret)),ret.end());\n\treturn ret;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tPol p;\n\trep(i,n){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tp.pb(P(a,b));\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tint k=contain(p,P(x,y));\n\t\tif(k==INP) printf(\"2\\n\");\n\t\tif(k==ONP) printf(\"1\\n\");\n\t\tif(k==OUTP) printf(\"0\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define repr(i, n) for (int i = (int)(n); i >= 0; i--)\n#define REP(i, m, n) for (int i = (int)(m); i <= (int)(n); i++)\n#define REPR(i, m, n) for (int i = (int)(m); i >= (int)(n); i--)\n#define all(v) v.begin(), v.end()\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\nconst long long INF = (1LL<<30);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstruct Point{\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(x*a, y*a); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p){\n  Vector a = s.p2 - s.p1;\n  Vector b = p - s.p1;\n  return s.p1 + a * (dot(a, b)/a.norm());\n}\n\nPoint reflect(Segment s, Point p){\n  return p + (project(s, p) - p)*2;\n}\n\nstatic const int Counter_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a, b) > EPS) return Counter_CLOCKWISE;\n  else if(cross(a, b) < -EPS) return CLOCKWISE;\n  else if(dot(a, b) < -EPS) return ONLINE_BACK;\n  else if(a.norm() < b.norm()) return ONLINE_FRONT;\n  else return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\ndouble getDistance(Point a, Point b){\n  Point tmp = a-b;\n  return tmp.abs();\n}\n\ndouble getDistanceLP(Line l, Point p){\n  Vector a = l.p2 - l.p1;\n  Vector b = p - l.p1;\n  return abs(cross(a, b) / a.abs());\n}\n\ndouble getDistanceSP(Segment s, Point p){\n  Vector a = s.p2 - s.p1;\n  Vector b = p - s.p1;\n  double n = dot(a, b) / a.norm();\n  if(0.0 <= n && n <= 1.0) return getDistanceLP(s, p);\n  else return min(getDistance(s.p1, p), getDistance(s.p2, p));\n}\n\ndouble getDistanceSS(Segment s1, Segment s2){\n  if(intersect(s1.p1, s1.p2, s2.p1, s2.p2)) return 0.0;\n  double res = INF;\n  chmin(res, getDistanceSP(s1, s2.p1));\n  chmin(res, getDistanceSP(s1, s2.p2));\n  chmin(res, getDistanceSP(s2, s1.p1));\n  chmin(res, getDistanceSP(s2, s1.p2));\n  return res;\n}\n\nPoint getCrossPoint(Segment s1, Segment s2){\n  double d1 = getDistanceLP(s1, s2.p1);\n  double d2 = getDistanceLP(s1, s2.p2);\n  double t = d1/(d1+d2);\n  return s2.p1 + (s2.p2 - s2.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l){\n  assert(getDistanceLP(l, c.c) <= c.r);\n  Point pr = project(l, c.c);\n  Vector a = l.p2 - l.p1;\n  Vector e = a / a.abs();\n  Vector vcpr = pr - c.c;\n  double d = sqrt(c.r*c.r - vcpr.norm());\n  return make_pair(pr+e*d, pr-e*d);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double r, double w) { return Point(cos(w)*r, sin(w)*r); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n  assert(getDistance(c1.c, c2.c) <= c1.r+c2.r);\n  double d = getDistance(c1.c, c2.c);\n  double a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2*c1.r*d));\n  double b = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, b+a), c1.c + polar(c1.r, b-a));\n}\n\nint contains(Polygon g, Point p){\n  int n = g.size();\n  bool x = false;\n  rep(i, n){\n    Vector a = g[i] - p;\n    Vector b = g[(i+1)%n] - p;\n    if(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if(a.y > b.y) swap(a, b);\n    if(a.y < EPS && b.y > EPS && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nint main(){\n  int n; cin >> n;\n  Polygon g(n);\n  rep(i, n){\n    int x, y; cin >> x >> y;\n    g[i] = Point(x, y);\n  }\n\n  int q; cin >> q;\n  rep(i, q){\n    int x, y; cin >> x >> y;\n    Point p = Point(x, y);\n    cout << contains(g, p) << endl;\n  }\n\n  return 0;\n\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<vector>\n#define inf 1000000000\n#define eps 1e-10\n#define double long double\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tvoid read(){scanf(\"%Lf%Lf\",&x,&y);}\n\tvoid write(){printf(\"%.10Lf %.10Lf\\n\",x,y);}\n\tpoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tpoint operator +(const point a)const{return point(x+a.x,y+a.y);}\n\tpoint operator -(const point a)const{return point(x-a.x,y-a.y);}\n\tpoint operator *(double a)const{return point(x*a,y*a);}\n\tpoint operator /(double a)const{return point(x/a,y/a);}\n\tbool operator ==(const point a)const{return abs(x-a.x)<=eps && abs(y-a.y)<=eps;}\n};\ndouble dis(point a,point b=point(0,0)){return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-a.y*b.x;}\ndouble cross3(point o,point a,point b){return cross(a-o,b-o);}\nbool jiao(point a,point b,point c,point d)\n{\n\tif(min(a.x,b.x)>max(c.x,d.x) || min(a.y,b.y)>max(c.y,d.y)) return false;\n\tif(min(c.x,d.x)>max(a.x,b.x) || min(c.y,d.y)>max(a.y,b.y)) return false;\n\tif(cross3(a,b,c)*cross3(a,b,d)>0) return false;\n\tif(cross3(c,d,a)*cross3(c,d,b)>0) return false;\n\treturn true;\n}\nshort int on_line(point o,point a,point b)//oa->ob 0:D 1:U 2:O\n{\n\tif(dot(a-o,b-o)<-eps) return 0;\n\treturn 1+(dis(a-o)>=dis(b-o));\n}\nvoid make_rand(double &x){x=x+(1ll*rand()%10+1)/10.0*eps;}\nstruct Line{\n\tpoint a,b;\n\tLine(point x=point(0,0),point y=point(0,0)):a(x),b(y){}\n\tvoid read(){a.read();b.read();}\n\tbool operator &&(const Line u){return jiao(a,b,u.a,u.b);}\n\tpoint operator &(const Line u)\n\t{\n\t\tif(a==u.a || a==u.b) return a;\n\t\tif(b==u.a || b==u.b) return b;\n\t\tdouble x1=a.x,x2=b.x,x3=u.a.x,x4=u.b.x;\n\t\tdouble y1=a.y,y2=b.y,y3=u.a.y,y4=u.b.y;\n\t\tif(x3==x4) return point(x3,(y2-y1)*x3/(x2-x1)+(y1*x2-x1*y2)/(x2-x1));\n\t\tif(x1==x2) return point(x1,(y4-y3)*x1/(x4-x3)+(y3*x4-x3*y4)/(x4-x3));\n\t\tmake_rand(x2);\n\t\tdouble x=((y3*x4-y4*x3)*(x2-x1)-(y1*x2-y2*x1)*(x4-x3))/((y2-y1)*(x4-x3)-(y4-y3)*(x2-x1));\n\t\tdouble y=(y2-y1)*x/(x2-x1)+(y1*x2-x1*y2)/(x2-x1);\n\t\treturn point(x,y);\n\t}\n};\npoint project(Line a,point p)\n{\n\tpoint &p1=a.a,&p2=a.b;\n\tdouble len=dot(p2-p1,p-p1)/dis(p2-p1);\n\treturn p1+(p2-p1)/dis(p2-p1)*len;\n}\ndouble dis(Line a,Line b)\n{\n\tif(a && b) return 0;\n\tdouble ans=min(min(dis(a.a,b.a),dis(a.a,b.b)),min(dis(a.b,b.a),dis(a.b,b.b)));\n\tpoint res=project(a,b.a);\n\tif(on_line(a.a,a.b,res)==2) ans=min(ans,dis(res,b.a));\n\tres=project(a,b.b);\n\tif(on_line(a.a,a.b,res)==2) ans=min(ans,dis(res,b.b));\n\tres=project(b,a.a);\n\tif(on_line(b.a,b.b,res)==2) ans=min(ans,dis(res,a.a));\n\tres=project(b,a.b);\n\tif(on_line(b.a,b.b,res)==2) ans=min(ans,dis(res,a.b));\n\treturn ans;\n}\nstruct polygon{\n\tvector<point>p;\n\tvoid read(int n=-1)\n\t{\n\t\tif(n<0) scanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tpoint a;\n\t\t\ta.read();\n\t\t\tp.push_back(a);\n\t\t}\n\t}\n\tdouble area(void)\n\t{\n\t\tdouble ans=0;\n\t\tfor(int i=1;i<p.size();i++)\n\t\tans+=cross3(p[0],p[i-1],p[i])/2;\n\t\treturn abs(ans);\n\t}\n\tbool convex(void)\n\t{\n\t\tshort int right=-1;\n\t\tfor(int i=2;i<p.size();i++)\n\t\tif(right<0) right=cross3(p[i-2],p[i-1],p[i])>=0;\n\t\telse if(right!=(cross3(p[i-2],p[i-1],p[i])>=0)) return false;\n\t\tif(right!=(cross3(p[p.size()-2],p[p.size()-1],p[0])>=0)) return false;\n\t\treturn true;\n\t}\n\tshort int in_polygon(const point x)\n\t{\n\t\tLine l(x,x+point(inf,(double)inf*1.414213562373));\n\t\tmake_rand(l.b.y);\n\t\tint cnt=0;\n\t\tfor(int i=1;i<p.size();i++)\n\t\t{\n\t\t\tLine u(p[i-1],p[i]);\n\t\t\tif(u && l)\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tif(abs(cross3(p[i-1],p[i],x))<eps && on_line(p[i-1],p[i],x)==2) return 1;\n\t\t\t}\n\t\t}\n\t\tLine u(p[p.size()-1],p[0]);\n\t\tif(u && l)\n\t\t{\n\t\t\tcnt++;\n\t\t\tif(abs(cross3(p[p.size()-1],p[0],x))<eps && on_line(p[p.size()-1],p[0],x)==2) return 1;\n\t\t}\n\t\treturn cnt%2==0?0:2; \n\t}\n}p;\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\t\n\tsrand(n);\n\tp.read(n);\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--)\n\t{\n\t\tpoint x;\n\t\tx.read();\n\t\tprintf(\"%d\\n\",p.in_polygon(x));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <stdio.h>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> ii;\n\nconst double EPS = 1e-8;\n\ntypedef pair<double, double> pt;\ntypedef pair<pt ,pt> seg;\n\n#define a first\n#define b second\n#define x first\n#define y second\n\npt operator-(pt a, pt b) { return pt(a.x - b.x, a.y - b.y); }\n\nbool zero(double x) { return fabs(x) <= EPS; }\n\ndouble cross(pt a, pt b) { return a.x * b.y - a.y * b.x; }\n\nbool ccw(pt a, pt b, pt c) { return cross(b - a, c - a) >= 0; }\n\ndouble dist(pt a, pt b) { return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2)); }\n\nbool collinear(seg a, seg b) { // all four points collinear\n    return zero(cross(a.b - a.a, b.a - a.a)) &&\n           zero(cross(a.b - a.a, b.b - a.a));\n}\nbool intersect(seg a, seg b) {\n    if (collinear(a, b)) {\n        double maxDist = 0;\n        maxDist = max(maxDist, dist(a.a, a.b));\n        maxDist = max(maxDist, dist(a.a, b.a));\n        maxDist = max(maxDist, dist(a.a, b.b));\n        maxDist = max(maxDist, dist(a.b, b.a));\n        maxDist = max(maxDist, dist(a.b, b.b));\n        maxDist = max(maxDist, dist(b.a, b.b));\n        return maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS;\n    }\n    return ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n           ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b);\n}\n\nvector<pt> shape;\nint n;\n\nint ans(pt query)\n{\n\tpt rand = make_pair(47, 199);\n\tseg l = make_pair(query, rand);\n\tint count = 0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tpt a = shape[i];\n\t\tpt b;\n\t\tif (i == n-1){\n\t\t\tb = shape[0];\n\t\t} else {\n\t\t\tb = shape[i+1];\n\t\t}\n\t\tseg d = make_pair(a, b);\n\t\tif (intersect(d, make_pair(query, query))) return 1;\n\t\tif (intersect(l, d)) count++;\n\t}\n\treturn count % 2 ? 2 : 0;\n\n}\n\nint main()\n{\n\tint q;\n\tdouble x, y;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> x >> y;\n\t\tshape.push_back(make_pair(x, y));\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++){\n\t\tcin >> x >> y;\n\t\tcout << ans(make_pair(x, y)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int (i)=(0);(i)<(int)(n);++(i))\nusing ll = long long;\n//using P = pair<int, int>;\nusing namespace std;\n\nconst double eps = 1e-10;\n#define equals(a, b) (fabs((a)-(b)) < eps)\n\n// 点\nstruct Point\n{\n    double x, y;\n    Point(double x=0, double y=0): x(x), y(y) {}\n    double norm()\n    {\n        return x*x+y*y;\n    }\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    Point operator+(const Point& p)const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point& p)const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)const\n    {\n        return Point(x * k, y * k);\n    }\n    Point operator/(const double k)const\n    {\n        return Point(x / k, y / k);\n    }\n    bool operator<(const Point& p)const\n    {\n        if (x != p.x)\n        {\n            return x < p.x;\n        }\n        return y < p.y;\n    }\n    bool operator==(const Point& p)const\n    {\n        return fabs(x - p.x) < eps and fabs(y - p.y) < eps;\n    }\n};\n\nusing Vector = Point;\n\n// 内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\n// 外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n// 線分\nstruct Segment\n{\n    Segment(Point a=Point(), Point b=Point()):p1(a), p2(b) {}\n    Point p1, p2;\n};\nusing Line = Segment;\n\n// 円\nclass Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// 多角形\nusing Polygon = vector<Point>;\n\n\n// ベクトルaとbの直行判定\n// Verify\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// ベクトルaとbの平行判定\n// Verify\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 射影\n// verify\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\n// 反射\n// verify\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\n// ２点間の距離\ndouble getDistance(Point a, Point b) {\n    return (a-b).abs();\n}\n\n// 直線Lと、点Pの距離\n// verify\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1) / Point(l.p2 - l.p1).abs());\n}\n\n// 線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP((Line)s, p);\n}\n\n\n// 反時計回り\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// verify\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b) < -eps) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分の交差判定\n// verify\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n// verify\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 線分s1と線分s2の距離\n//verify\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 線分の交点\n// verify\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n// 円cと線分lの交点\n//verify\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    //assert(intersect(c, l)); ?\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt(c.r * c.r - (pr - c.c).norm());\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n// 円と円の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\n// verify\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = (c1.c - c2.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2  * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t-a));\n}\n\n// 点の内包\n// IN 2, ON 1, OUT 0\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < eps and dot(a, b) < eps) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < eps and eps < b.y and cross(a, b) > eps) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u, l;\n    if (s.size() < 3) return s;\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for (int i = 2; i < s.size(); ++i) {\n        for (int n = u.size(); n >= 2 and ccw(u[n-2], u[n-1], s[i]) != CLOCKWISE; --n) {\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for (int i = s.size()-3; i>=0; --i) {\n        for (int n = l.size(); n>=2 and ccw(l[n-2], l[n-1], s[i]) != CLOCKWISE; --n) {\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n    return l;\n}\n\n// 平面走査\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint {\npublic:\n    Point p;\n    int seg, st;\n    EndPoint() {}\n    EndPoint(Point p, int seg, int st) : p(p), seg(seg), st(st) {}\n\n    bool operator<(const EndPoint &ep) const {\n        if (p.y == ep.p.y) {\n            return st < ep.st;\n        }else return p.y < ep.p.y;\n    }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S) {\n    int n = S.size();\n\n    for (int i = 0, k = 0; i < n; ++i) {\n        if (S[i].p1.y == S[i].p2.y) {\n            if (S[i].p1.x > S[i].p2.x) swap(S[i].p1, S[i].p2);\n        } else if (S[i].p1.y > S[i].p2.y) swap(S[i].p1, S[i].p2);\n\n        if (S[i].p1.y == S[i].p2.y) {\n            EP[k++] = EndPoint(S[i].p1, i, LEFT);\n            EP[k++] = EndPoint(S[i].p2, i, RIGHT);\n        }\n        else {\n            EP[k++] = EndPoint(S[i].p1, i, BOTTOM);\n            EP[k++] = EndPoint(S[i].p2, i, TOP);\n        }\n    }\n\n    sort(EP, EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(100000001); // 番兵\n    int cnt = 0;\n\n    for (int i = 0; i < 2 * n; ++i) {\n        if (EP[i].st == TOP) {\n            BT.erase(EP[i].p.x);\n        }\n        else if (EP[i].st == BOTTOM) {\n            BT.insert(EP[i].p.x);\n        }\n        else if (EP[i].st == LEFT) {\n            auto b = lower_bound(BT.begin(), BT.end(), S[EP[i].seg].p1.x);\n            auto e = upper_bound(BT.begin(), BT.end(), S[EP[i].seg].p2.x);\n            cnt += distance(b, e);\n        }\n    }\n\n    return cnt;\n\n}\n\nint main() {\n    int n;\n    cin >> n;\n    Polygon g;\n    rep(i, n) {\n        int x, y;\n        cin >> x >> y;\n        Point a(x, y);\n        g.push_back(a);\n    }\n\n    int q;\n    cin >> q;\n    rep(i, q) {\n        int a, b;\n        cin >> a >> b;\n        Point p(a, b);\n        cout << contains(g, p) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) verify AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==ON) return 1;\n\t\tbool f=sgn(imag(p-pol[i]))>=0;\n\t\tbool s=sgn(imag(p-pol[(i+1)%n]))<0;\n\t\tint sign=sgn(imag(pol[(i+1)%n]-pol[i]));\n\t\tbool can=sgn(sign*det(pol[i],pol[(i+1)%n],p))>0; // (a*d-b*c)*b\n\t\tif(can&&f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n/*\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a)*sdet(a,b,p))==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n*/\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<cmath>\n#include<algorithm>\n#include<cassert>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point;\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\nstruct Circle;\nstruct Segment;\ntypedef Segment Line;\ndouble norm(Point a);\ndouble abs(Point a);\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistance(Point a, Point b);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nbool isOrthogonal(Vector a, Vector b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\nbool isParallel(Vector a, Vector b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l); // ちゃんと検証はしてない\n\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point,Point> getCrossPoints(Circle c, Line l);\n\ndouble area(Polygon g); // convexでなくてもよい. absを取れば符号付き面積\nbool isConvex(Polygon g); // O(n^2) 線形時間アルゴリズムが存在するらしい\nint contains(Polygon g, Point p);\n\nstruct Point{\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double a){ return Point(a*x, a*y); }\n    Point operator / (double a){ return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x + y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\n\ndouble norm(Point a){\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble getDistance(Point a, Point b){\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2-s.p1, p-s.p1) < 0.0)    return abs(p-s.p1);\n    if(dot(s.p1-s.p2, p-s.p2) < 0.0)    return abs(p-s.p2);\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n    if(intersect(s1, s2))   return 0.0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), \n                getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2->p0->p1\nstatic const int ONLINE_FRONT = -2; // p0->p1->p2\nstatic const int ON_SEGMENT = 0;    // p0->p2->p1\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS)   return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS)  return CLOCKWISE;\n    if(dot(a, b) < -EPS)    return ONLINE_BACK;\n    if(norm(a) < norm(b))   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nbool intersect(Circle c, Line l){\n    return getDistanceLP(l, c.c) < c.r+EPS;\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1-s2.p1));\n    double d2 = abs(cross(base, s1.p2-s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c, Line l){\n    assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e*base, pr - e*base);\n}\n\ndouble area(Polygon g){\n    int n = g.size();\n    Point o(0.0, 0.0);\n    double s = 0.0;\n    for(int i = 0; i < n; i++)  s += cross(g[i]-o, g[(i+1)%n]-o);\n    return abs(s) / 2.0;\n}\n\nbool isConvex(Polygon g){\n    bool ret = true;\n    int n = g.size();\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(cross(g[i]-g[(i+n-1)%n], g[j]-g[(i+n-1)%n]) < -EPS || cross(g[(i+1)%n]-g[i], g[j]-g[i]) < -EPS){\n                ret = false;\n            }\n        }\n    }\n    return ret;\n}\n\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0; i < n; i++){\n        Point a = g[i] - p, b = g[(i+1)%n] - p;\n        if(abs(cross(a, b)) < EPS && dot(a, b) < EPS)   return ON;\n        if(a.y > b.y)   swap(a, b);\n        if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return x ? IN : OUT;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    Polygon g;\n    for(int i = 0; i < n; i++){\n        double x, y;\n        cin >> x >> y;\n        g.push_back(Point(x,y));\n    }\n    int q;\n    cin >> q;\n    while(q-- > 0){\n        double x, y;\n        cin >> x >> y;\n        cout << contains(g, Point(x,y)) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-8  \nstruct Point{\n\tdouble x,y;\n};\n\n\ndouble cross(Point a, Point b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n\nint contains(vector<Point> g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n  \tPoint a,b;\n\ta.x=g[i].x-p.x;\n\ta.y=g[i].y-p.y;\n\tb.x=g[(i+1)%n].x-p.x;\n\tb.y=g[(i+1)%n].y-p.y;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nint main(){\n\tint n;\n\tcin>>n;\n\tvector<Point> p(n);\n\tfor(int i=0;i<n;i++) {\n\t\tcin>>p[i].x>>p[i].y;\n\t}\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tPoint r;\n\t\tcin>>r.x>>r.y;\n\t\tcout<<contains(p,r)<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse {\n\t\t\t\tdouble th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n\t\t\t\tfsum += th;\n\t\t\t}\n        }\n\t\tprintf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 0.5));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define DEBUG 1\n\n#define INF (1.0/0.0)\n#define EPS 1e-10\n#define PI 3.1415926535\n#define EQ(x, y) (abs((x)-(y))<EPS)\n#define X real()\n#define Y imag()\n\ntypedef complex<double> Point;\ntypedef Point Vec;\ntypedef array<Point, 2> Line;\ntypedef vector<Point> Poly;\n\nstruct Circle {\n  Point c;\n  double r;\n};\n\nenum Geometory {ABC=-2, CW, ON_LINE, CCW, CAB, OUTSIDE, INSIDE, ERROR}; \n\nnamespace std {\n  bool operator<(Point a, Point b) {\n    if (a.X != b.X) return a.X < b.X;\n    return a.Y < b.Y;\n  }\n}\n\ndouble dot(Point a, Point b) {\n  return (conj(a)*b).X;\n}\n\ndouble cross(Point a, Point b) {\n  return (conj(a)*b).Y;\n}\n\nGeometory ccw(Point a, Point b, Point c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return CCW; // ccw\n  if (cross(b, c) < 0) return CW; // cw\n  if (dot(b, c) < 0) return CAB; // c - a - b\n  if (norm(b) < norm(c)) return ABC; // a - b - c\n  return ERROR;\n}\n\nPoint proj(Line l, Point p) {\n  Point v = l[1]-l[0];\n  double ratio = dot(v, p-l[0]) / norm(v);\n  return l[0] + ratio*v;\n}\n\nPoint refl(Line l, Point p) {\n  return p + (proj(l, p) - p) * 2.0;\n}\n\nVec rotate(Vec v, double r) {\n  return v*Vec(cos(r), sin(r));\n}\n\nbool IsOrthogonal(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(dot(v1, v2), 0.0);\n}\n\nbool IsParallel(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(cross(v1, v2), 0.0);\n}\n\nbool IntersectLL(Line l, Line m) {\n  if (!EQ(cross(l[1]-l[0], m[1]-m[0]), 0.0)) return true;\n  if (EQ(cross(l[1]-l[0], m[0]-l[0]), 0.0)) return true;\n  return false;\n}\n\nbool IntersectLS(Line l, Line s) {\n  Point b = l[0];\n  Vec v = l[1]-l[0];\n  return cross(v, s[0]-b)*cross(v, s[1]-b) < EPS;\n}\n\nbool IntersectSS(Line s, Line t) {\n  if (ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) > 0) return false;\n  if (ccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) > 0) return false;\n  return true;\n}\n\nbool IntersectLP(Line l, Point p) {\n  return EQ(cross(l[1]-p, l[0]-p), 0.0);\n}\n\nbool IntersectSP(Line s, Point p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble DistL(Line l) {\n  return abs(l[0]-l[1]);\n}\n\ndouble DistLP(Line l, Point p) {\n  return abs(p - proj(l, p));\n}\n\ndouble DistLL(Line l, Line m) {\n  if (!IntersectLL(l, m)) return 0;\n  return DistLP(l, m[0]);\n}\n\ndouble DistLS(Line l, Line s) {\n  if (IntersectLS(l, s)) return 0;\n  return min(DistLP(l, s[0]), DistLP(l, s[1]));\n}\n\ndouble DistSP(Line s, Point p) {\n  Point r = proj(s, p);\n  if (IntersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble DistSS(Line s, Line t) {\n  if (IntersectSS(s, t)) return 0;\n\n  double a = min(DistSP(s, t[0]), DistSP(s, t[1]));\n  double b = min(DistSP(t, s[0]), DistSP(t, s[1]));\n  return min(a, b);\n}\n\nLine PerpendBisect(Line seg) {\n  Point mid = (seg[0]+seg[1])/2.0;\n  return Line{mid, mid+(seg[1]-seg[0])*Vec(0, 1)};\n}\n\nPoint CrossPointLL(Line l, Line m) {\n  double A = cross(l[1]-l[0], m[1]-m[0]);\n  double B = cross(l[1]-l[0], l[1]-m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0];\n  if (abs(A) < EPS) assert(0);\n  return m[0] + B / A * (m[1]-m[0]);\n}\n\nvector<Point> CrossPointCL(Circle c, Line l) {\n  vector<Point> ret;\n  double d = DistLP(l, c.c);\n  if (d < c.r + EPS) {\n    double ratio = (d > c.r) ? 0.0 : sqrt(c.r*c.r - d*d);\n    Vec sgn = (l[0]-l[1]) / abs(l[0]-l[1]);\n    ret.push_back(proj(l, c.c) + ratio*sgn);\n    ret.push_back(proj(l, c.c) - ratio*sgn);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCS(Circle c, Line s) {\n  vector<Point> ret;\n  vector<Point> res = CrossPointCL(c, s);\n  for (Point p : res) {\n    if(ccw(s[0], p, s[1]) == ABC) ret.push_back(p);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCC(Circle c1, Circle c2) {\n  vector<Point> ret;\n  double d = abs(c1.c - c2.c);\n  double rc = (d*d + c1.r*c1.r - c2.r*c2.r) / (2*d);\n  double dfr = c1.r*c1.r - rc*rc;\n\n  if (EQ(dfr, 0.0)) dfr = 0.0;\n  else if(dfr < 0.0) return ret;\n\n  double rs = sqrt(dfr);\n  Vec sgn = (c2.c - c1.c) / d;\n  ret.push_back(c1.c + sgn*Point(rc, rs));\n  if (dfr > 0.0) ret.push_back(c1.c + sgn*Point(rc, -rs));\n  return ret;\n}\n\n// Note that ccw(a, b, c) != CCW when a, b, c are colinear\nPoly GrahamScan(vector<Point> ps) {\n  int k = 0;\n  int n = ps.size();\n  Poly ret(n*2);\n\n  sort(ps.begin(), ps.end());\n  for (int i=0; i<n; i++) {\n    while (k > 1 && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  int k_ = k;\n  for (int i=n-1; i>=0; i--) {\n    while (k > k_ && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  ret.resize(k-1);\n  return ret;\n}\n\ndouble CalcArea(Poly ps) {\n  double ret = 0.0;\n  for (int i=0; i<ps.size(); i++) {\n    ret += cross(ps[i], ps[(i+1)%ps.size()]);\n  }\n  return ret/2.0;\n}\n\nbool IsConvex(Poly ps) {\n  return GrahamScan(ps).size() == ps.size();\n}\n\nGeometory ContainsPoint(Poly poly, Point p) {\n  bool in = false;\n  int n = poly.size();\n  for (int i=0; i<n; i++) {\n    Vec a = poly[i] - p;\n    Vec b = poly[(i+1)%n] - p;\n\n    if (a.Y > b.Y) swap(a, b);\n\n    double cr = cross(a, b);\n    if (a.Y <= 0 && 0 < b.Y && cr > EPS) in ^= 1;\n    if (IntersectSP({poly[i], poly[(i+1)%n]}, p)) return ON_LINE;\n  }\n\n  if (in) return INSIDE;\n  return OUTSIDE;\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\npair<int, int> ConvexDiameterApexes(Poly ps) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  int n = ps.size();\n  int is = 0;\n  int js = 0;\n  for (int i=1; i<n; i++) {\n    if (ps[i].Y > ps[is].Y) is = i;\n    if (ps[i].Y < ps[js].Y) js = i;\n  }\n\n  int maxi, maxj;\n  double maxd = norm(ps[is]-ps[js]);\n  int i = is;\n  int j = js;\n  do {\n    Vec a = ps[i+1] - ps[i];\n    Vec b = ps[j+1] - ps[j];\n    if (cross(a, b) > -EPS) j = (j+1)%n;\n    else i = (i+1)%n;\n\n    double d = norm(ps[i]-ps[j]);\n    if (d > maxd) {\n      maxd = d;\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n\n  return make_pair(maxi, maxj);\n}\n\nLine ClosestPair(vector<Point> ps) {\n  auto CompareY = [](const Point &a, const Point &b) {\n    if (a.Y != b.Y) return a.Y < b.Y;\n    return a.X < b.X;\n  };\n\n  function<Line(Point*,int)> Rec = [&Rec, &CompareY](Point *as, int n) {\n    if (n <= 1) return Line{Point(0, 0), Point(INF, INF)};\n    \n    int m = n/2;\n    double x = as[m].X;\n    Line a = Rec(as, m);\n    Line b = Rec(as+m, n-m);\n    double mind = DistL(a);\n    Line ret = a;\n    if (DistL(b) < mind) {\n      mind = DistL(b);\n      ret = b;\n    }\n\n    sort(as, as+n, CompareY);\n    vector<Point> bs;\n    bs.reserve(n);\n    for (int i=0; i<n; i++) {\n      if (abs(as[i].X - x) >= mind) continue;\n\n      for (int j=0; j<bs.size(); j++) {\n        Point p1 = as[i];\n        Point p2 = bs[b.size()-1-j];\n        if (p1.Y - p2.Y >= mind) break;\n\n        double d = abs(p1-p2);\n        if (mind > d) {\n          mind = d;\n          ret = Line{p1, p2};\n        }\n      }\n\n      bs.emplace_back(as[i]);\n    }\n\n    return ret;\n  };\n\n  int n = ps.size();\n  assert (n >= 2);\n  sort(ps.begin(), ps.end());\n  return Rec(&ps[0], n);\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\n// <left, right> or <upper, lower>\npair<Poly, Poly> CutConvex(Poly ps, Line l) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  if (l[0].Y > l[1].Y) swap(l[0], l[1]);\n  else if (EQ(l[0].Y, l[1].Y) && l[0].X > l[1].X) swap(l[0], l[1]);\n\n  Poly left;\n  Poly right;\n  for (int i=0; i<ps.size(); i++) {\n    Point a = ps[i];\n    Point b = ps[(i+1)%ps.size()];\n\n    if (ccw(l[0], l[1], a) != CW) left.emplace_back(a);\n    else right.emplace_back(a);\n\n    Line m{a, b};\n    if (IntersectLS(l, m)) {\n      Point p = CrossPointLL(l, m);\n      left.emplace_back(p);\n      right.emplace_back(p);\n    }\n  }\n\n  return make_pair(left, right);\n}\n\nint n;\nvector<Point> ps;\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i=0; i<n; i++) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    ps.emplace_back(Point{x, y});\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n\n    Geometory ret = ContainsPoint(ps, {x, y});\n    if (ret == INSIDE) puts(\"2\");\n    else if (ret == ON_LINE) puts(\"1\");\n    else puts(\"0\");\n\n    reverse(ps.begin(), ps.end());\n    assert(ContainsPoint(ps, {x, y}) == ret);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\n#define str string\n#define ld long double\n#define vec vector\n#define vll vec<ll>\n#define rep(i,a,b) for(ll i=a;i<b;i++)\n#define rrep(i,b,a) for(ll i=b;i>=a;i--)\n#define ALL(a) a.begin(),a.end()\n#define rALL(a) a.rbegin(),a.rend()\n#define kai \"\\n\"\n#define yuque priority_queue\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define mie min_element\n#define mae max_element\n#define tos to_string\n#define sep setprecision\n#define lob lower_bound\n#define upb upper_bound\n#define nep next_permutation\n#define MOD 1000000007ll\n#define MIN (1e-10)\n#define equal(a,b) (abs((a)-(b))<MIN)\n#define v2 ten\n#define chokusen senbun\n#define tenten senbun\n#define takaku vec<ten>\n#define kakudo(a) atan2((a).y,(a).x)\n#define beku(r,t) (v2){(r)*cos(t),(r)*sin(t)}\nusing namespace std;\nvoid solve();\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed;\n\tsolve();\n}\nstruct pea{\n\tll f,s;\n\tbool operator<(const pea &p)const{\n\t\treturn f!=p.f?f<p.f:s<p.s;\n\t};\n};\nstruct tri{\n\tll f,s,t;\n\tbool operator<(const tri &p)const{return f<p.f;};\n};\nclass ten{\npublic:\n\tld x,y;\n\tten operator+(ten p){return{x+p.x,y+p.y};}\n\tten operator-(ten p){return{x-p.x,y-p.y};}\n\tten operator*(ld k){return{k*x,k*y};}\n\tten operator/(ld k){return{x/k,y/k};}\n\tld abs(){return sqrt(abs2());}\n\tld abs2(){return x*x+y*y;};\n\tbool operator<(const ten &p)const{return x!=p.x?x<p.x:y<p.y;};\n\tbool operator==(const ten &p)const{return (-MIN<x-p.x)&&(x-p.x<MIN)&&(-MIN<y-p.y)&&(y-p.y<MIN);};\n\tld naiseki(v2 b){return x*b.x+y*b.y;}\n\tld gaiseki(v2 b){return x*b.y-y*b.x;}\n};\nstruct senbun{ten p1,p2;};\nstruct en{ten o;ld r;};\nten shaei(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn l.p1+a*a.naiseki(p-l.p1)/a.abs2();\n}\nten hansha(ten p,chokusen l){return shaei(p,l)*2-p;}\nld tenchoku(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn abs(a.gaiseki(p-l.p1))/a.abs();\n}\nld tensen(ten p,senbun s){\n\tif((p-s.p1).naiseki(s.p2-s.p1)<0)return (p-s.p1).abs();\n\tif((p-s.p2).naiseki(s.p1-s.p2)<0)return (p-s.p2).abs();\n\treturn tenchoku(p,s);\n}\nll ccw(ten p0,ten p1,ten p2){\n\tv2 a=p1-p0,b=p2-p0;\n\tif(a.gaiseki(b)>MIN)return -1;//012反時計回り\n\tif(a.gaiseki(b)<-MIN)return 1;//012時計回り\n\tif(a.naiseki(b)<-MIN)return -2;//102\n\tif(a.abs2()<b.abs2())return 2;//012\n\treturn 0;//021\n}\nbool majiwaru(senbun s,senbun t){return ccw(s.p1,s.p2,t.p1)*ccw(s.p1,s.p2,t.p2)<=0&&ccw(t.p1,t.p2,s.p1)*ccw(t.p1,t.p2,s.p2)<=0;}\nld sensen(senbun s,senbun t){\n\tif(majiwaru(s,t))return 0;\n\treturn min({tensen(s.p1,t),tensen(s.p2,t),tensen(t.p1,s),tensen(t.p2,s)});\n}\nten koten(senbun s,senbun t){\n\tv2 a=t.p2-t.p1;\n\tld d1=abs(a.gaiseki(s.p1-t.p1));\n\tld d2=abs(a.gaiseki(s.p2-t.p1));\n\treturn s.p1+(s.p2-s.p1)*d1/(d1+d2);\n}\ntenten koten(en c,chokusen l){\n\tten h=shaei(c.o,l);\n\tld k=sqrt(c.r*c.r-(h-c.o).abs2());\n\tv2 a=(l.p1-l.p2)/(l.p1-l.p2).abs();\n\treturn {h+a*k,h-a*k};\n}\ntenten koten(en c1,en c2){\n\tld d=(c2.o-c1.o).abs();\n\tld s=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n\tld t=kakudo(c2.o-c1.o);\n\treturn {c1.o+beku(c1.r,t+s),c1.o+beku(c1.r,t-s)};\n}\nll uchi(ten p,takaku &g){\n\t//2:IN,1:ON,0:OUT\n\tll n=g.size();\n\tv2 a,b;\n\tbool x=false;\n\trep(i,0,n){\n\t\ta=g[i]-p;b=g[(i+1)%n]-p;\n\t\tif(abs(a.gaiseki(b))<MIN&&a.naiseki(b)<MIN)return 1;\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<MIN&&MIN<b.y&&a.gaiseki(b)>MIN)x=!x;\n\t}\n\treturn x?2:0;\n}\n//凸包\ntakaku andrew(takaku s){\n\ttakaku u,l;\n\t\n}\nvoid solve(){\n\tll n;cin>>n;\n\ttakaku g(n);\n\trep(i,0,n)cin>>g[i].x>>g[i].y;\n\tcin>>n;\n\tten p;\n\trep(i,0,n){\n\t\tcin>>p.x>>p.y;\n\t\tcout<<uchi(p,g)<<kai;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\ntypedef long double db;\nconst db EPS = 1e-9;\nconst db pi=acos(-1.0);\n  \ninline int sign(db a) { return a < -EPS ? -1 : a > EPS; }\n  \ninline int cmp(db a, db b){ return sign(a-b); }\n  \nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db _x, db _y) : x(_x), y(_y) {}\n\tP operator+(P p) { return {x + p.x, y + p.y}; }\n\tP operator-(P p) { return {x - p.x, y - p.y}; }\n\tP operator*(db d) { return {x * d, y * d}; }\n\tP operator/(db d) { return {x / d, y / d}; }\n \n\tbool operator<(P p) const { \n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n \n\tbool operator==(P o) const{\n\t\treturn cmp(x,o.x) == 0 && cmp(y,o.y) == 0;\n\t}\n \n\tdb dot(P p) { return x * p.x + y * p.y; }\n\tdb det(P p) { return x * p.y - y * p.x; }\n\t \n\tdb distTo(P p) { return (*this-p).abs(); }\n\tdb alpha() { return atan2(y, x); }\n\tvoid read() {\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tx=a; y=b;\n\t}\n\tdb abs() { return sqrt(abs2());}\n\tdb abs2() { return x * x + y * y; }\n\tP rot90() { return P(-y,x);}\n\tP unit() { return *this/abs(); }\n\tint quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }\n\tP rot(db an){ return {x*cos(an)-y*sin(an),x*sin(an) + y*cos(an)}; }\n};\n\ndb sqr(db x){ return x*x; }\n\nstruct P3{\n    db x,y,z;\n    P3 operator+(P3 o){ return {x+o.x,y+o.y,z+o.z}; }\n    P3 operator-(P3 o){ return {x-o.x,y-o.y,z-o.z}; }\n    db operator*(P3 o){ return x*o.x+y*o.y+z*o.z; }\n    P3 operator^(P3 o){ return {y*o.z-z*o.y,z*o.x-x*o.z,x*o.y-y*o.x}; }\n    P3 operator*(db o){ return {x*o,y*o,z*o}; }\n    P3 operator/(db o){ return {x/o,y/o,z/o}; }\n\n    db abs2(){ return sqr(x) + sqr(y) + sqr(z); }\n    db abs(){ return sqrt(abs2()); }\n\n    P3 norm(){ return *this / abs(); } \n    bool operator<(P3 o){\n        if(cmp(x,o.x) != 0) return x < o.x;\n        if(cmp(y,o.y) != 0) return y < o.y;\n        return cmp(z,o.z) == -1;\n    }\n    bool operator==(P3 o){\n        return cmp(x,o.x) == 0 && cmp(y,o.y) == 0 && cmp(z,o.z) == 0;\n    }\n    void read(){\n    \tint a,b,c;\n    \tscanf(\"%d%d%d\",&a,&b,&c);\n//    \tscanf(\"%lf%lf%lf\",&x,&y,&z);\n    \tx=a, y=b, z=c;\n    }\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0; \n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret;\n}\n\nconst int N=101000;\nint n,m,ret[N];\nP p[N],q[N];\n\nstruct event {\n\tdb x;\n\tint val;\n\tP a,b;\n};\nvector<event> evt;\ndb X;\ndb gety(P a,P b) {\n\treturn (a.y*(b.x-X)+b.y*(X-a.x))/(b.x-a.x);\n}\nbool operator < (const event&a, const event &b) {\n\tdb ya=gety(a.a,a.b),yb=gety(b.a,b.b);\n\treturn cmp(ya,yb)==-1;\n}\n\nstruct mydb {\n\tdb x;\n};\nbool operator == (const mydb &a, const mydb &b) {\n\treturn cmp(a.x,b.x)==0;\n}\nbool operator < (const mydb &a, const mydb &b) {\n\treturn cmp(a.x,b.x)==-1;\n}\n\nset<PII> w;\nint main() {\n\tdb ang=rnd(100000)*1e-5*2*pi;\n\tscanf(\"%d\",&n);\n\trep(i,0,n) {\n\t\tp[i].read();\n\t\tw.insert(mp(p[i].x,p[i].y));\n\t\tp[i]=p[i].rot(ang);\n\t}\n\tscanf(\"%d\",&m);\n\trep(i,0,m) {\n\t\tq[i].read();\n\t\tif (w.count(mp(q[i].x,q[i].y))) ret[i]=1;\n\t\telse {\n\t\t\tq[i]=q[i].rot(ang);\n\t\t\tevt.pb((event) {q[i].x,i,q[i],q[i]+P(1,0)});\n\t\t}\n\t}\n\trep(i,0,n) {\n\t\tauto a=p[i],b=p[(i+1)%n];\n\t\tif (a.x<b.x) {\n\t\t\tevt.pb((event){a.x, 19999998,a,b});\n\t\t\tevt.pb((event){b.x,-20000002,a,b});\n\t\t} else {\n\t\t\tevt.pb((event){b.x, 20000002,b,a});\n\t\t\tevt.pb((event){a.x,-19999998,b,a});\n\t\t}\n\t}\n\tvector<mydb> vx;\n\tfor (auto p:evt) vx.pb((mydb){p.x});\n\tvx.pb((mydb){-1e9});\n\tvx.pb((mydb){1e9});\n\tsort(all(vx)); vx.erase(unique(all(vx)),vx.end());\n\tsort(all(evt),[&](const event &a,const event &b){\n\t\treturn cmp(a.x,b.x)==0?a.val<b.val:a.x<b.x;\n\t});\n\tset<event> st;\n\tfor (auto p:evt) {\n\t\tauto it=lower_bound(all(vx),(mydb){p.x});\n\t\tif (p.val>=19999998) {\n\t\t\tX=(it->x+(it+1)->x)*0.5;\n\t\t\tst.insert(p);\n\t\t} else if (p.val<=-19999998) {\n\t\t\tX=(it->x+(it-1)->x)*0.5;\n\t\t\tauto it=st.lower_bound(p);\n\t\t\tassert(it!=st.end());\n\t\t\tst.erase(it);\n\t\t} else {\n\t\t\tX=it->x;\n\t\t\tauto it=st.lower_bound(p);\n\t\t\tif (it==st.end()) ret[p.val]=0;\n\t\t\telse {\n\t\t\t\tif (cmp(gety(it->a,it->b),gety(p.a,p.b))==0) ret[p.val]=1;\n\t\t\t\telse ret[p.val]=it->val==20000002?2:0;\n\t\t\t}\n\n\t\t}\n\t}\n\trep(i,0,m) printf(\"%d\\n\",ret[i]);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) ( fabs(a-b) < EPS )\n#define PI 3.141592653589793238\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intersect Circle and Circle\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct point{\n\tdouble x,y;\n\t//construct\n\tpoint() {} \n\tpoint(double x,double y):x(x),y(y){}\n\t//演算子\n\tpoint operator + (point p) { return point(x+p.x,y+p.y); }\n\tpoint operator - (point p) { return point(x-p.x,y-p.y); }\n\tpoint operator * (double k) { return point(x*k,y*k); }\n\tpoint operator / (double k) { return point(x/k,y/k); }\n\tpoint operator / (point p) { return point( (x*p.x + y*p.y)/p.norm()  , (-x*p.y + y*p.x)/p.norm() ) ; }\n\tbool operator < (point p) { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (point p) { return equals(x,p.x) && equals(y,p.y) ; }\n\t//function\n\tdouble arg() { return atan2(y,x) ; }\n\tdouble norm(){return x*x+y*y; }\n\tdouble abs() { return sqrt(norm() ) ;}\n\tdouble dot(point p) { return p.x*x + p.y*y; }\n\tdouble cross(point p) { return x*p.y - y*p.x; }\n\n\t//input output\n\tvoid input(){cin>>x>>y;}\n\tvoid polar(double r,double theta){ x = r*cos(theta), y= r*sin(theta) ; }\n\tvoid print(){cout<<x<<' '<<y<<endl;};\n\n};\n\nbool sort_x(point a,point b){\n\treturn a.x!=b.x?a.x<b.x:a.y<b.y ;\n}\nbool sort_y(point a,point b){\n\treturn a.y!=b.y?a.y<b.y:a.x<b.x ;\n}\n\ntypedef vector<point> polygon;\n\nstruct segment{\n\tpoint s,t;\n\tsegment() {}\n\tsegment(point s,point t) : s(s),t(t){}\n\tvoid input(){s.input(),t.input(); }\n};\ntypedef segment line;\n\nstruct circle{\n\tpoint c;\n\tdouble r;\n\tcircle() {}\n\tcircle(point c,double r) : c(c),r(r){}\n\n};\n\ndouble norm(point a){\treturn a.norm(); }\ndouble abs(point a){ return a.abs(); }\ndouble arg(point a){ return a.arg(); }\ndouble dot(point a,point b) { return a.x*b.x + a.y*b.y ; }\ndouble cross(point a,point b) { return a.x * b.y - a.y * b.x ; }\npoint polar(double r,double theta){ point a; a.polar(r,theta); return a; }\npoint orth(point p){ return point(-p.y,p.x); }\n\n//isOrthgonal 垂直\nbool isOrthogonal(point a,point b) { return equals(dot(a,b), 0.0 ) ; }\nbool isOrthogonal(point a,point b,point c,point d) { return isOrthogonal(a-b,c-d) ; }\nbool isOrthogonal(line l1,line l2 ){ return isOrthogonal(l1.t-l1.s,l2.t-l2.s); }\n//isParallel 平行\nbool isParallel(point a,point b) { return equals(cross(a,b), 0.0) ; }\nbool isParallel(point a,point b,point c,point d) { return isParallel(a-b,c-d); }\nbool isParallel(line l1,line l2) { return isParallel(l1.t-l1.s,l2.t-l2.s) ; }\n\npoint project(line l,point p){\n\tpoint base = l.t-l.s;\n\tdouble r = dot(p-l.s,base) / norm(base) ;\n\treturn l.s + base*r;\n}\npoint reflect(line l,point p){\n\treturn p + (project(l,p) - p) *2.0;\n}\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\n\tif(cross(a,b) > EPS ) return CCW_COUNTER_CLOCKWISE ;\n\tif(cross(a,b) < -EPS ) return CCW_CLOCKWISE;\n\tif(dot(a,b) < -EPS ) return CCW_ONLINE_BACK;\n\tif(a.norm() < b.norm() ) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\n\n//intersect\nbool intersect(point p1,point p2,point p3,point p4){return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 ) ; }\nbool intersect(line l1,line l2) { return intersect(l1.s,l1.t,l2.s,l2.t) ; }\nbool intersect(polygon p,line l){\n\tint n = p.size();\n\tfor(int i=0;i<n;i++)  if(intersect(line(p[i],p[(i+1)%n] ) , l ) ) return true;\n\treturn false;\n}\nint intersect(circle c1,circle c2){\n\tif(c1.r < c2.r) swap(c1,c2);\n\tdouble d = abs(c1.c-c2.c);\n\tdouble r = c1.r + c2.r;\n\tif(equals(d,r) ) return ICC_CIRCUMSCRIBE;\n\tif(d > r ) return ICC_SEPARATE;\n\tif(equals(d+c2.r,c1.r) ) return ICC_INSCRIBE;\n\tif( d + c2.r < c1.r ) return ICC_CONTAIN;\n\treturn ICC_INTERSECT;\n}\n\n//bool intersectsc(line l,circle c){ return distancesp(l,c.c) <= c.r ; } distanceののち\nint intersectcs(circle c,line l ){// 0\t\t1\t\t2\n\tif(norm(project(l,c.c) - c.c )  - c.r*c.r  > EPS ) return 0;\n\tdouble d1 = abs(c.c-l.s),d2  = abs(c.c-l.t);\n\tif(d1 < c.r + EPS && d2 < c.r + EPS ) return 0;\n\tif( (d1<c.r - EPS && d2 > c.r +EPS) || (d1 > c.r +EPS &&d2 < c.r -EPS ) ) return 1;\n\tpoint h = project(l,c.c) ;\n\tif(dot(l.s-h,l.t-h) < 0 ) return 2;\n\treturn 0;\n}\n\n//distance\n//line point\ndouble distancelp(line l,point p){ return abs(cross(l.t-l.s,p-l.s)/ abs(l.t-l.s)  ); }\n//segment point\ndouble distancesp(line l,point p){ \n\tif(dot(l.t-l.s,p-l.s) < 0.0 ) return abs(p-l.s);\n\tif(dot(l.s-l.t,p-l.t) < 0.0 ) return abs(p-l.t);\n\treturn distancelp(l,p);\n}\n//segment segment \ndouble distancess(line l1,line l2){\n\tif(intersect(l1,l2) ) return 0.0;\n\treturn min( min(distancesp(l1,l2.s) ,distancesp(l1,l2.t) ) , min(distancesp(l2,l1.s),distancesp(l2,l1.t)  ) );\n}\n\nbool intersectsc(line l,circle c){ return distancesp(l,c.c) <= c.r ; }\n\n//crosspoint \n//segment segment\npoint crosspointss(line l1,line l2){\n\tfor(int k=0;k<2;k++){\n\t\tif(distancesp(l1,l2.s) < EPS ) return l2.s;\n\t\tif(distancesp(l1,l2.t) < EPS ) return l2.t;\n\t\tswap(l1,l2);\n\t}\n\tpoint base = l2.t-l2.s;\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.t-l2.s) );\n\tdouble t = d1/(d1+d2);\n\treturn l1.s + (l1.t-l1.s) * t;\n}\n//line line\npoint crosspointll(line l1,line l2){\n\tdouble a = cross(l1.t-l1.s,l2.t-l2.s);\n\tdouble b = cross(l1.t-l1.s,l1.t-l2.s);\n\tif(abs(a) < EPS && abs(b) < EPS ) return l2.s;\n\treturn l2.s + (l2.t-l2.s) * (b/a) ;\n}\n//circle line\npolygon crosspointCL(circle c,line l){\n\tpolygon ps;\n\tpoint pr = project(l,c.c);\n\tpoint e = (l.t - l.s) / abs(l.t-l.s) ;\n\tif(distancelp(l,c.c) > c.r ) return ps;//付け足した\n\tif(equals(distancelp(l,c.c),c.r) ){\n\t\tps.emplace_back(pr);\n\t}\n\tdouble base = sqrt(c.r*c.r - norm(pr-c.c) );\n\tps.emplace_back(pr + e*base ) ;\n\tps.emplace_back(pr - e*base ) ;\n\treturn ps;\n}\n//circle segment\npolygon crosspointCS(circle c,line l ){\n\tpolygon res = crosspointCL(c,l);\n\tif(intersectcs(c,l) == 2 ) return res;\n\tif(res.size() > 1u ){//一つのみ削る\n\t\tif(dot(l.s-res[0] ,l.t-res[0] ) > 0) swap(res[0],res[1] );\n\t\tres.pop_back();\n\t}\n\treturn res;\n}\npolygon crosspointcc(circle c1,circle c2){\n\tpolygon p(2);\n\tdouble d = abs(c1.c-c2.c);\n\tdouble a = acos( (c1.r *c1.r + d*d -c2.r*c2.r) /(2*c1.r*d ) );\n\tdouble t = arg(c2.c-c1.c);\n\tp[0] = c1.c + polar(c1.r,t+a);\n\tp[1] = c1.c + polar(c1.r,t-a);\n\treturn p;\n}\n\nint contains(polygon g,point p) { //IN:2 ON:1 OUT:0\n    int n = g.size();\n    bool f = false;\n    for(int i=0;i<n;i++){\n\tpoint a = g[i] - p,b = g[(i+1)%n] - p;\n\tif( fabs(cross(a,b) ) < EPS && dot(a,b) < EPS) return 1;\n\tif( a.y > b.y ) swap(a,b);\n\tif( a.y < EPS && EPS < b.y && cross(a,b) > EPS ) f = !f;\n    }\n    return (f?2:0) ;\n}\n\npolygon andrewscan(polygon &s){ //convex hull\n\tpolygon u,l;\n\tif(s.size() < 3) return s;\n\tsort(s.begin(),s.end() );\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\tfor(int i=2;i<s.size();i++){\n\t\tfor(int n = u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CCW_CLOCKWISE;n--)//凸包の辺上を含めない\n\t\t//for(int n = u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) == CCW_COUNTER_CLOCKWISE;n--)//凸包の辺上を含める場合\n\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\tfor(int i=s.size()-3;i>=0;i--){\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CCW_CLOCKWISE;n--)//凸包の辺上を含めない\n\t\t\n\t\t//for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) == CCW_COUNTER_CLOCKWISE;n--)//凸包の辺上を含める場合\n\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\treturn l;\n}\ndouble diameter(polygon &s){\n\tpolygon p = s;\n\tint n = p.size();\n\tif(n==2) return abs(p[0]-p[1]);\n\tint i=0,j=0;\n\tfor(int k=0;k<n;k++){\n\t\tif(p[i] < p[k]) i = k;\n\t\tif(!(p[j]<p[k]) ) j = k;\n\t}\n\tdouble res = 0;\n\tint si = i,sj = j;\n\twhile( i != sj || j != si ){\n\t\tres = max(res,abs(p[i]-p[j]) );\n\t\tif(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j] ) < 0.0) i = (i+1)%n;\n\t\telse j = (j+1)%n;\n\t}\n\treturn res;\n}\nbool isconvex(polygon p){\n\tbool f = 1;\n\tint n = p.size();\n\tfor(int i=0;i<n;i++){\n\t\tint t = ccw(p[(i+n-1)%n],p[i],p[(i+1)%n] );\n\t\tf&= t!=CCW_CLOCKWISE;\n\t}\n\treturn f;\n}\ndouble area(polygon p){\n\tdouble res =  0.0;\n\tfor(int i=0;i<p.size();i++) res += cross(p[i],p[ (i+1)%p.size() ]);\n\treturn res/2.0;\n}\ndouble area(circle c1,circle c2){\n\tdouble d = abs(c1.c-c2.c);\n\tif(c1.r + c2.r <= d + EPS ) return 0.0;\n\tif(d<=abs(c1.r-c2.r) ){\n\t\tdouble r = min(c1.r,c2.r);\n\t\treturn PI*r*r;\n\t}\n\tdouble rc = (d*d + c1.r*c1.r -c2.r*c2.r)/(2*d);\n\tdouble th = acos(rc/c1.r);\n\tdouble ph = acos( (d-rc)/c2.r);\n\treturn c1.r*c1.r*th + c2.r*c2.r*ph - d * c1.r * sin(th) ;\n}\n\npolygon convex_cut(polygon p,line l){\n\tpolygon q;\n\tint n = p.size();\n\tfor(int i=0;i<n;i++){\n\t\tpoint a = p[i] , b = p[(i+1)%n];\n\t\tif(ccw(l.s,l.t,a) != -1 ) q.push_back(a);\n\t\tif(ccw(l.s,l.t,a) * ccw(l.s,l.t,b) < 0) q.push_back(crosspointss(line(a,b),l) );\n\t}\n\treturn q;\n}\nint main(){\n    \tint n;\n\tcin>>n;\n    \tpolygon p(n);\n\tfor(int i=0;i<n;i++)p[i].input();\n\tint m;\n\tcin>>m;\n\tfor(int i=0;i<m;i++){\n\t\tpoint a;\n\t\ta.input();\n\t\tcout<<contains(p,a)<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\n// ???????§???¢????????¨?????? O(n)\nint inConvex(P p, const vector<P> &ps) {\n    int n = ps.size();\n    int dir = ccw(ps[0], ps[1], p);\n    rep(i,0,n) {\n        int ccwc = ccw(ps[i], ps[(i+1) % n], p);\n        if(!ccwc) return 1;\n        if(ccwc != dir) return 0;\n    }\n    return 2;\n}\n\nint main() {\n    int n; cin >> n;\n    vector<P> ps;\n    P a;\n    rep(i,0,n) {\n        cin >> a.X >> a.Y;\n        ps.pb(a);\n    }\n\n    int m; P b;\n    cin >> m;\n    rep(i,0,m) {\n        cin >> b.X >> b.Y;\n        cout << inConvex(b, ps) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdet(p,a,b)==0 and sdot(p,a,b)<=0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\tcout.precision(20);\n\trep(i,q){\n\t\tP a,b;\n\t\tcin >> a >> b;\n\t\tL l={a,b};\n\t\tcout << fixed <<  area(convex_cut(pol,l)) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int INF = INT_MAX / 3;\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\n\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {\n\t}\n\tP operator +(P p) {\n\t\treturn P(add(x, p.x), add(y, p.y));\n\t}\n\tP operator -(P p) {\n\t\treturn P(add(x, -p.x), add(y, -p.y));\n\t}\n\tP operator *(double d) {\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot(P p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det(P p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print() {\n\t\tprintf(\"%.10lf %.10lf \\n\", x, y);\n\t\treturn;\n\t}\n};\n\nint onCheck(P &p, P &q, P &r){\n\tbool a = ((q-p).det(r-p)==0);\n\tbool b = ((p-q).dot(r-q) >=0 );\n\tbool c = ((p-r).dot(q-r)  >= 0 );\n\tif(a&&b&&c){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint intersectionCheck(P &p0, P &p1, P &p2, P &p3){\n\tP q0 = p1-p0;\n\tP q1 = p3-p2;\n\tif(q0.det(q1)==0){\n\t\tbool a =onCheck(p0,p2, p3) ;\n\t\tbool b =onCheck(p1,p2, p3) ;\n\t\tbool c = onCheck(p2,p0, p1) ;\n\t\tbool d = onCheck(p3,p0, p1);\n\t\tif (!a && !b && !c && !d){\n\t\t\treturn 0;\n\t\t}else{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tP r = p0 + (p1-p0)*(q1.det(p2-p0)/q1.det(q0));\n\tbool e = onCheck(r, p0, p1);\n\tbool f = onCheck(r, p2, p3);\n\tif(e && f){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint PolygonPointContainment(vector<P> &polygon, P p){\n\tP INFpoint;\n\tINFpoint.x=100000.0;\n\tINFpoint.y=100000.0*sqrt(2); \t//????????????\n\n\tint S=0; \t//p??????????????´??????????§???¢??¨??????????????°\n\tint g = polygon.size();\n\n\tREP(i, g){\n\t\tP q= polygon[i];\n\t\tP r = polygon[i+1];\n\t\tif(onCheck(p,q,r)==1){\n\t\t\treturn 1; \t//p?????????qr??????????????´???\n\t\t}\n\t\tif(intersectionCheck(p, INFpoint, q,r)==1){\n\t\t\tS++;\n\t\t}\n\t}\n\tP q= polygon[g-1];\n\tP r = polygon[0];\n\tif(onCheck(p,q,r)==1){\n\t\treturn 1; \t//p?????????qr??????????????´???\n\t}\n\tif(intersectionCheck(p, INFpoint, q,r)==1){\n\t\tS++;\n\t}\n\n\tif(S%2==0){\n\t\treturn 0;\n\t}else{\n\t\treturn 2;\n\t}\n}\n\nint main(){\n\tint g, q;\n\tcin >> g ;\n\tvector<P> polygon;\n\tREP(i,g){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tpolygon.push_back(p);\n\t}\n\n\tcin >> q;\n\tREP(i, q){\n\t\tP p;\n\t\tcin >> p.x >> p.y ;\n\t\tcout << PolygonPointContainment(polygon, p) <<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr double EPS = 1e-10;\nusing point = complex<double>;\nusing vect = point;\nusing segment = pair<point, point>;\nusing polygon = vector<point>;\ndouble dot(vect a, vect b){\n\treturn real(a) * real(b) + imag(a) * imag(b);\n}\ndouble cross(vect a, vect b){\n\treturn real(a) * imag(b) - imag(a) * real(b);\n}\nint ccw(point p0, point p1, point p2){\n\tvect v = p1 - p0, w = p2 - p0;\n\tif(cross(v, w) > EPS) return 1; // COUNTER_CLOCKWISE\n\tif(cross(v, w) < -EPS) return -1; // CLOCKWISE\n\tif(dot(v, w) < -EPS) return 2; // ONLINE p2 - p0 - p1\n\tif(norm(v) + EPS < norm(w)) return -2; // ONLINE p0 - p1 - p2\n\treturn 0; // ONLINE p1 - p2 - p0\n}\nbool intersect(segment s1, segment s2){\n\tint t = ccw(s1.first, s1.second, s2.first) * ccw(s1.first, s1.second, s2.second);\n\tint u = ccw(s2.first, s2.second, s1.first) * ccw(s2.first, s2.second, s1.second);\n\treturn (t == 0 || t == -1 || t == -4) && (u == 0 || u == -1 || u == -4);\n}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tint n; cin >> n;\n\tpolygon p(n);\n\tfor(int i=0; i<n; ++i){\n\t\tint x, y; cin >> x >> y;\n\t\tp[i] = point(x, y);\n\t}\n\tint q; cin >> q;\n\twhile(q--){\n\t\tint x, y; cin >> x >> y;\n\t\tbool f = false;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tif(ccw(p[i], point(x, y), p[(i+1)%n]) == -2){\n\t\t\t\tcout << 1 << \"\\n\";\n\t\t\t\tf = true;\n\t\t\t}\n\t\t}\n\t\tif(f) continue;\n\t\tsegment t(point(x, y), point(1.4142e5, 1.3141e5));\n\t\tint cnt = 0;\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tif(intersect(t, segment(p[i], p[(i+1)%n])))\n\t\t\t\t++cnt;\n\t\tif(cnt % 2 == 0) cout << 0 << \"\\n\";\n\t\telse cout << 2 << \"\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n  \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n  \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n  \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n  \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n  \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > EPS)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < -EPS)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n  \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n  \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.b - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n  bool IsConvex(const Polygon& p){\n    for(int i = 0; i < p.size(); i++){\n      if(ccw(prev(p,i),curr(p,i),next(p,i)) == -1) return false;\n    }\n    return true;\n  }\n  Polygon Convex_Hull(Polygon& p){\n    int n = p.size(), k = 0;\n    if(n >= 3){\n      sort( p.begin(), p.end());\n      vector< Point > ch(2 * n);\n      for(int i = 0; i < n; ch[k++] = p[i++]){\n        while(k >= 2 && ccw( ch[k - 2], ch[k - 1], p[i]) <= 0) --k;\n      }\n      for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]){\n        while(k >= t && ccw( ch[k - 2], ch[k - 1], p[i]) <= 0) --k;\n      }\n      ch.resize( k - 1);\n      return ch;\n    } else {\n      return p;\n    }\n  }\n};\n\nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\nint main(){\n  int n;\n  cin >> n;\n  Geometory::Polygon g(n);\n  for(int i = 0; i < n; i++){\n    cin >> g[i];\n  }\n  int q;\n  cin >> q;\n  while(q--){\n    P p;\n    cin >> p;\n    cout << geo.Contains(g, p) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long lint;\n  \n//定数\nconst double EPS = 1e-5;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n  \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n  \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n  \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n  \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n    \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n    \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n    \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n    \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n  \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n  \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n  \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n  \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n  \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n  \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n        \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    qs.resize(k - 1);\n    return (qs);\n}\n  \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n  \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n  \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n  \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n  \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n    \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n    \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n    \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n  \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n  \nint main()\n{\n    int n, q;\n      \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n      \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n          \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            else {\n                assert(neq(abs(next - t), 0));\n                assert(neq(abs(p[j] - t), 0));\n                double th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n                fsum += th;\n            }\n        }\n        printf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n    }\n      \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\ndouble zz(Vector a,Vector b){\nif(a.absv()<EPS || b.absv()<EPS) return 100;\nelse{\na=a/a.absv();\nb=b/b.absv();\ndouble co=dot(a,b),si=cross(a,b);\nif(co<=-1+EPS) return 100;\nelse if(si>0) return acos(co);\nelse if(co>1-EPS) return 0.0;\nelse return -acos(co);\n}\n\n}\n\n\nint main(){\nint n,k=0,zh;\ndouble x,y;\ncin>>n;\nPoint a[110],q;\nVector v[110];\nfor(int i=0;i<n;i++){\ncin>>x>>y;\na[i].x=x;\na[i].y=y;\n}\na[n]=a[0];\ndouble henkaku=0.0;\nint qu;\ncin>>qu;\nfor(int i=0;i<qu;i++){\ncin>>x>>y;\nq.x=x,q.y=y;\nzh=0;\nhenkaku=0.0;\nfor(int i=0;i<n;i++){\nif(zz(a[i]-q,a[i+1]-q)==100) zh=1;\nelse henkaku=henkaku+zz(a[i]-q,a[i+1]-q);\n//cout<<zz(a[i]-q,a[i+1]-q)<<endl;\nif(a[i]==q) zh=1;\n}\nif(zh==1) cout<<\"1\"<<endl;\nelse if(fabs(henkaku)<1) cout<<\"0\"<<endl;\nelse cout<<\"2\"<<endl;\n//cout<<\"he \"<<henkaku<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[i_aft]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long lint;\n  \n//定数\nconst double EPS = 1e-9;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n  \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n  \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n  \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n  \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n    \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n    \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n    \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n    \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n  \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n  \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n  \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n  \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n  \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n  \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n        \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    qs.resize(k - 1);\n    return (qs);\n}\n  \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n  \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n  \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n  \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n  \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n    \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n    \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n    \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n  \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n  \nint main()\n{\n    int n, q;\n      \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n      \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n          \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            else {\n                assert(neq(abs(next - t), 0));\n                assert(neq(abs(p[j] - t), 0));\n                double th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n                fsum += th;\n            }\n        }\n        printf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n    }\n      \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-10\n\nstruct Point {\n    double x, y;\n\n    Point (double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator-(Point p) {\n        return Point(x - p.x, y - p.y);\n    }\n\n    double dot(Point p) {\n        return x * p.x + y * p.y;\n    }\n    \n    double cross(Point p) {\n        return x * p.y - y * p.x;\n    }\n};\n\nint contains(vector<Point> g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(a.cross(b)) < EPS && a.dot(b) < EPS) {\n            return 1;\n        }\n        if (a.y > b.y) {\n            swap(a, b);\n        }\n        if (a.y < EPS && EPS < b.y && a.cross(b) > EPS) {\n            x = !x;\n        }\n    }\n    return (x ? 2 : 0);\n}\n\nint main() {\n    int n, q;\n    cin >> n;\n    vector<Point> polygon(n);\n    for (int i = 0; i < n; i++) {\n        cin >> polygon[i].x >> polygon[i].y;\n    }\n    cin >> q;\n    Point p;\n    while (q--) {\n        cin >> p.x >> p.y;\n        cout << contains(polygon, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\nint main(){\n\tPolygon g;\n\tPoint p ,t;\n\tint n, q;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\tg.push_back(t);\n\t}\n\tcin>>q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin>>p.x>>p.y;\n\t\tcout<<contains(g, p)<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\n#define ROUND_PRINT(N,val) cout << fixed;cout << setprecision(N) << val << endl\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\n\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) < eps) : ((x - e.x) < eps);\n  }\n  bool operator >(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) > eps) : ((x - e.x) > eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\n\nint main(void) {\n  Plane pl;\n  int n,q;\n  P a;\n  cin >> n;\n  vector<P> point(n);\n  REP(i,n) cin >> point[i].x >> point[i].y;\n  cin >> q;\n\n  REP(i,q) {\n    cin >> a.x >> a.y;\n    long double ang,sum = 0.0;\n    bool flg = false;\n    REP(i,n-1) {\n      ang = pl.getAngle(point[i]-a,point[i+1]-a);\n      if (abs(ang - pi) < eps) {\n        flg = true;\n        break;\n      }\n      sum += ang;\n    }\n    ang = pl.getAngle(point[n-1]-a,point[0]-a);\n    if (abs(ang - pi) < eps) flg = true;\n    sum += ang;\n    if (flg) cout << 1 << endl;\n    else if (abs(2.0*pi - sum) < eps) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst double EPS = 1e-9;\nconst double PI = acos(-1);\n\nint sign(double x) {\n    if (fabs(x) < EPS) {\n        return 0;\n    } else if (x > 0) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nint dcmp(double x, double y) {\n    return sign(x - y);\n}\n\nstruct Vector;\ntypedef Vector Point;\n\nstruct Vector {\n    double x;\n    double y;\n\n    explicit Vector(double x = 0, double y = 0);\n\n    Vector operator+(const Vector &rhs) const;\n    Vector operator-() const;\n    Vector operator-(const Vector &rhs) const;\n    Vector operator*(double d) const;\n    Vector operator/(double d) const;\n    double operator*(const Vector &rhs) const;\n    double operator^(const Vector &rhs) const;\n\n    bool operator==(const Vector &rhs) const;\n    bool operator!=(const Vector &rhs) const;\n    bool operator<(const Vector &rhs) const;\n    bool operator>(const Vector &rhs) const;\n    bool operator<=(const Vector &rhs) const;\n    bool operator>=(const Vector &rhs) const;\n\n    friend std::ostream &operator<<(std::ostream &os, const Vector &vector);\n\n    double length() const;\n    double angle() const;\n    double getDistanceTo(const Point &rhs) const;\n\n    static bool cmpByAngle(const Point &a, const Point &b);\n};\n\nstruct Segment {\n    Point a;\n    Point b;\n\n    explicit Segment(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    explicit Segment(const Point &a = Point(), const Point &b = Point());\n\n    double length() const;\n    bool contains(const Point &p, bool containsEndPoints = true) const;\n    bool intersects(const Segment &rhs, bool containsEndPoints = true) const;\n};\n\nstruct Polygon {\n    std::vector<Point> points;\n\n    enum class ContainsPoint {\n        OUT,\n        ONLINE,\n        IN\n    };\n\n    explicit Polygon(const std::vector<Point> &points);\n\n    ContainsPoint contains(const Point &p) const;\n};\n\nVector::Vector(double x, double y) : x(x), y(y) {}\n\nVector Vector::operator+(const Vector &rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n}\n\nVector Vector::operator-() const {\n    return Vector(-x, -y);\n}\n\nVector Vector::operator-(const Vector &rhs) const {\n    return *this + -rhs;\n}\n\nVector Vector::operator*(double d) const {\n    return Vector(x * d, y * d);\n}\n\nVector Vector::operator/(double d) const {\n    return Vector(x / d, y / d);\n}\n\ndouble Vector::operator*(const Vector &rhs) const {\n    return x * rhs.x + y * rhs.y;\n}\n\ndouble Vector::operator^(const Vector &rhs) const {\n    return x * rhs.y - rhs.x * y;\n}\n\nbool Vector::operator==(const Vector &rhs) const {\n    return dcmp(x, rhs.x) == 0 && dcmp(y, rhs.y) == 0;\n}\n\nbool Vector::operator!=(const Vector &rhs) const {\n    return !(rhs == *this);\n}\n\nbool Vector::operator<(const Vector &rhs) const {\n    if (dcmp(x, rhs.x) != 0) {\n        return dcmp(x, rhs.x) < 0;\n    } else {\n        return dcmp(y, rhs.y) < 0;\n    }\n}\n\nbool Vector::operator>(const Vector &rhs) const {\n    return rhs < *this;\n}\n\nbool Vector::operator<=(const Vector &rhs) const {\n    return !(rhs < *this);\n}\n\nbool Vector::operator>=(const Vector &rhs) const {\n    return !(*this < rhs);\n}\n\nstd::ostream &operator<<(std::ostream &os, const Vector &vector) {\n    os << \"(\" << vector.x << \", \" << vector.y << \")\";\n    return os;\n}\n\ndouble Vector::length() const {\n    return sqrt(*this * *this);\n}\n\ndouble Vector::angle() const {\n    return atan2(y, x);\n}\n\ndouble Vector::getDistanceTo(const Point &rhs) const {\n    return sqrt(pow(x - rhs.x, 2) + pow(y - rhs.y, 2));\n}\n\nbool Vector::cmpByAngle(const Point &a, const Point &b) {\n    return dcmp(a.angle(), b.angle()) < 0;\n}\n\nSegment::Segment(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nSegment::Segment(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Segment::length() const {\n    return a.getDistanceTo(b);\n}\n\nbool Segment::contains(const Point &p, bool containsEndPoints) const {\n    const Vector &u = a - p;\n    const Vector &v = b - p;\n    return sign(u ^ v) == 0 && (containsEndPoints ? sign(u * v) <= 0 : sign(u * v) < 0);\n}\n\nbool Segment::intersects(const Segment &rhs, bool containsEndPoints) const {\n    const Vector &u = b - a;\n    const Vector &v = rhs.b - rhs.a;\n    double c1 = u ^(rhs.a - a);\n    double c2 = u ^(rhs.b - a);\n    double c3 = v ^(a - rhs.a);\n    double c4 = v ^(b - rhs.a);\n    if (containsEndPoints && (!sign(c1) || !sign(c2) || !sign(c3) || !sign(c4))) {\n        return contains(rhs.a) || contains(rhs.b) || rhs.contains(a) || rhs.contains(b);\n    }\n    return sign(c1) * sign(c2) < 0 && sign(c3) * sign(c4) < 0;\n}\n\nPolygon::Polygon(const std::vector<Point> &points) : points(points) {}\n\nPolygon::ContainsPoint Polygon::contains(const Point &p) const {\n    Segment s0(p, p + Vector(1e10, 0));\n    int sum = 0;\n    for (int i = 0; i < points.size(); i++) {\n        Point u = points[i];\n        Point v = points[(i + 1) % points.size()];\n        const Segment &s = Segment(u, v);\n        if (s.contains(p)) {\n            return ContainsPoint::ONLINE;\n        }\n        if (dcmp(u.y, v.y) <= 0) {\n            std::swap(u, v);\n        }\n        if (dcmp(p.y, u.y) > 0 || dcmp(p.y, v.y) <= 0) {\n            continue;\n        }\n        sum += s0.intersects(s) ? 1 : 0;\n    }\n    return (sum & 1) ? ContainsPoint::IN : ContainsPoint::OUT;\n}\n\n\nint main() {\n//    freopen(\"data.in\", \"r\", stdin);\n\n    int n, q;\n    while (~scanf(\"%d\", &n)) {\n        vector<Point> points;\n        points.reserve(n);\n        for (int i = 0; i < n; i++) {\n            int x, y;\n            scanf(\"%d%d\", &x, &y);\n            points.emplace_back(x, y);\n        }\n\n        Polygon polygon(points);\n\n        scanf(\"%d\", &q);\n        while (q--) {\n            int x, y;\n            scanf(\"%d%d\", &x, &y);\n            switch (polygon.contains(Point(x, y))) {\n                case Polygon::ContainsPoint::IN:{\n                    puts(\"2\");\n                    break;\n                }\n                case Polygon::ContainsPoint::ONLINE: {\n                    puts(\"1\");\n                    break;\n                }\n                case Polygon::ContainsPoint::OUT: {\n                    puts(\"0\");\n                    break;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\nusing namespace std;\n\nconstexpr double eps = (1e-10);\nbool eq(double a,double b){ return a>b?a-b<eps:b-a<eps; }\nint sgn(double a) { return (abs(a) <= eps) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(double a,double b) {return sgn(a-b);}\nclass Point { //位置ベクトルと作用ベクトルを同一視\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tPoint(const Point &m):x(m.x),y(m.y) {}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tPoint rev() {return Point(-x,-y);}\n\tbool operator<(const Point &p){return x!=p.x?x<p.x:y<p.y;}\n\tbool operator>(const Point &p){return x!=p.x?x>p.x:y>p.y;}\n\tbool operator==(const Point &p){return eq(x,p.x)&&eq(y,p.y);}\n\tdouble norm(){ return x*x+y*y; }\n\tdouble abs() { return sqrt(norm());}\n\tdouble dist(const Point &a) { return (Point(x,y)-a).abs(); }\n\tdouble dot(const Point &a) { return x*a.x + y*a.y; }\n\t//外積 -> 2vec向き付き角度判定,平行四辺形面積\n\tdouble det(const Point &a) { return x*a.y - y*a.x; }\n\tbool is_parallel(const Point &a) { return eq((x*a.y - y*a.x),0); }\n\t// a -> this の正射影\n\tPoint proj(const Point &a) { return Point(x,y)*(dot(a)/norm()); }\n\t//2ベクトルのなす角 (正 : 時計回り, 負 : 反時計)\n\tdouble ang(const Point &v) {\n\t\tdouble g1 = atan2(v.y,v.x);\n\t\tdouble g2 = atan2(y,x);\n\t\tif (g1 < 0) g1 += (2 * M_PI);\n\t\tif (g2 < 0) g2 += (2 * M_PI);\n\t\treturn (g2 - g1);\n\t}\n\t//2ベクトルのなす角(正値)を出す。\n\tdouble absAng(Point &v){ \n    \treturn acos(dot(v)/sqrt(norm() * v.norm()));\n  \t}\n\n};\n\nclass Segment {\npublic:\n\tPoint p1;\n\tPoint p2;\n\tSegment(double x1,double y1,double x2,double y2) : p1(x1,y1),p2(x2,y2) {}\n\tSegment(const Point &a,const Point &b) : p1(a),p2(b) {}\n\tdouble len (const Segment &l) { return (p2 - p1).norm(); }\n\tinline Point toVec() { return (p2 - p1); }\n};\n\n// 線分Xと線分Yの交点\nPoint intersection(Segment X,Segment Y) {\n\treturn X.p1 + (X.p2 - X.p1) * (Y.p2 - Y.p1).det((Y.p1 - X.p1)) / (Y.p2 - Y.p1).det(X.p2 - X.p1);\n}\n\n// 線分X上に点qがあるか\nbool on_seq(Segment X,Point q) {\n\treturn (eq((X.p1 - q).det(X.p2 - q),0) && eq((X.p1 - q).dot(X.p2 - q),0));\n}\n\n// 線分Xと線分Yが交点を持つか\nbool have_intersection(Segment X,Segment Y) {\n\tif (!(X.toVec()).is_parallel(Y.toVec())) {\n\t\tPoint r = intersection(X,Y);\n\t\treturn (on_seq(X,r) && on_seq(Y,r));\n    }\n    else return (on_seq(X,Y.p1) || on_seq(X,Y.p2) || on_seq(Y,X.p1) || on_seq(Y,X.p2));\n}\n\n// 二つの線分の位置関係\nint ccw(Point a,Point b,Point c) { // aが支点\n\tcomplex<double> v1(b.x-a.x,b.y-a.y),v2(c.x-a.x,c.y-a.y);\n\tcomplex<double> v = (v2*conj(v1));\n\tif(v.imag()>eps)return 1;        //反時計回り\n\tif(v.imag()<-eps)return -1;      //時計回り\n\tif(v.real()<-eps)return 2;       //真逆\n\tif(abs(v1)+eps<abs(v2))return -2;//同じ側超えてる\n\treturn 0;                        //同じ側近い側\n}\n// 線分Xと点qの距離\ndouble distance1 (Segment X,Point q) { \n\tif (eq((X.p1 - X.p2).dot(q - X.p2),0)) return X.p2.dist(q);\n\tif (eq((X.p2 - X.p1).dot(q - X.p1),0)) return X.p1.dist(q);\n\telse return (X.p1 + (X.p2-X.p1).proj(q-X.p1)).dist(q);\n}\n\n//線分Xと線分Yの距離\ndouble distance2 (Segment X,Segment Y) { \n\tif (have_intersection(X,Y)) return 0.0;\n\telse return min({distance1(X,Y.p1),distance1(X,Y.p2),distance1(Y,X.p1),distance1(Y,X.p2)});\n}\n\n//点列をx座標で昇順ソート\ninline void sort_x(vector<Point> &p) { \n\tstruct comp { bool operator() (const Point &a,const Point &b) {return (a.x!=b.x?a.x<b.x:a.y<b.y);} };\n\tsort(p.begin(),p.end(),comp());\n}\n\n//点列をy座標で昇順ソート\ninline void sort_y(vector<Point> &p) { \n\tstruct comp { bool operator() (const Point &a,const Point &b) {return (a.y!=b.y?a.y<b.y:a.x<b.x);} };\n\tsort(p.begin(),p.end(),comp());\n}\n\n//多角形の面積 (point列は順番になっていること)\ndouble getArea(vector<Point> &point){\n\tdouble s = 0;\n\tint n = point.size();\n\tfor (int i = 0;i < n;i++ ) s += point[i%n].det(point[(i+1)%n]);\n\treturn abs(s) * 0.5;\n}\n\n//0: outside, 1: on line, 2: inside (Winding Number)\nint contains(const vector<Point> &point, Point p) {\n    int flg = -1;\n    Point _a, _b = point.back();\n    for (int i = 0; i < int(point.size()); i++) {\n        _a = _b; _b = point[i];\n        Point a = _a, b = _b;\n        if (ccw(a, b, p) == 0) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (!(a.y <= p.y && p.y < b.y)) continue;\n        // (a-p).det(b-p) > eps) : 線の内側\n        if (eq(a.y,p.y) ? (a.x > p.x):((a-p).det(b-p) > eps)) flg *= -1;\n    }\n    return flg + 1;\n}\n\n//凸包を求める\nvector<Point> convexHull(vector<Point> &point){\n\tint n = point.size(),k = 0;\n\tvector<Point> qs(n*2);\n\tsort_x(point);\n\tfor(int i = 0;i < n;i++){ //下側凸包の作成\n\t\twhile(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n\t\tqs[k++] = point[i];\n\t}\n\tfor(int i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n\t\twhile(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n\t\tqs[k++] = point[i];\n\t}\n\tqs.resize(k-1);\n\treturn qs;\n}\n\nint main(void){\n\tlong n,q,x,y;\n\tcin >> n;\n\tvector<Point> pp(n);\n\tREP(i,n) {\n\t\tcin >> x >> y;\n\t\tpp[i] = Point(x,y);\n\t}\n\tcin >> q;\n\tREP(i,q) {\n\t\tcin >> x >> y;\n\t\tcout << contains(pp,Point(x,y)) << endl;\n\t}\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( dot(b,c)/abs(b)/abs(c) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.5 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint in_poly(P a, Poly p){\n  int n = p.size(), c = 0;\n  /*\n  P ex = a;\n  for(int i = 0; i < n; ++i) ex.X = max(ex.X,p[i].X+1);\n  */\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    P s = p[i]-a, t = p[i+1]-a;\n    if(!ccw(s,t,P(0,0))) return 1;//??????\n    if(s.Y > t.Y + EPS) swap(s,t);\n    if((s.Y*t.Y < 0 || (s.Y*t.Y < EPS && t.Y > EPS)) && cross(s,t) < EPS) ++c;\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    p[i] = P(x,y);\n  }\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << in_poly(P(x,y),p) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){}\n\tpoint(double _x,double _y){\n\t\tx=_x;y=_y;\n\t}\n\tinline point operator +(const point &b) const{\n\t\treturn point(x+b.x,y+b.y);\n\t}\n\tinline point operator -(const point &b) const{\n\t\treturn point(x-b.x,y-b.y);\n\t}\n\tinline double operator ^(const point &b) const{\n\t\treturn (x*b.x)+(y*b.y);\n\t}\n\tinline double operator *(const point &b) const{\n\t\treturn x*b.y-y*b.x;\n\t}\n\tinline point operator *(const double &b) const{\n\t\treturn point(x*b,y*b);\n\t}\n}c[50005],p0,p1;\nvector<point> poly;\nbool check(point p,point x,point y){\n\tif((p-x)*(y-x)==0&&min(x.x,y.x)<=p.x&&p.x<=max(x.x,y.x)&&min(x.y,y.y)<=p.y&&p.y<=max(x.y,y.y)) return 1;\n\telse return 0;\n}\nstruct matrix{\n\tdouble xmax,xmin,ymax,ymin;\n}a[2];\nbool check(point p0,point p1,point p2,point p3){\n\ta[0].xmax=max(p0.x,p1.x);\n\ta[0].xmin=min(p0.x,p1.x);\n\ta[0].ymax=max(p0.y,p1.y);\n\ta[0].ymin=min(p0.y,p1.y);\n\ta[1].xmax=max(p2.x,p3.x);\n\ta[1].xmin=min(p2.x,p3.x);\n\ta[1].ymax=max(p2.y,p3.y);\n\ta[1].ymin=min(p2.y,p3.y);\n\tif(!(a[0].xmax<a[1].xmin || a[1].xmax<a[0].xmin || a[0].ymax<a[1].ymin || a[1].ymax<a[0].ymin)){\n\t\tif(((p1-p0)*(p2-p0))*((p1-p0)*(p3-p0))<=0 &&\n\t\t   ((p3-p2)*(p1-p2))*((p3-p2)*(p0-p2))<=0) return 1;\n\t\telse return 0;\n\t}\n\telse return 0;\n}\nint main(){\n\tsrand(time(0));\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>c[i].x>>c[i].y,\n\t\tpoly.push_back(c[i]);\n\tpoly.push_back(c[1]);\n\tint q,res,flag;\n\tcin>>q;\n\tfor(int i=1;i<=q;++i){\n\t\tcin>>p0.x>>p0.y; res=0; flag=0;\n\t\tfor(int j=0;j<poly.size()-1;++j)\n\t\t\tif(check(p0,poly[j],poly[j+1])){\n\t\t\t\tputs(\"1\"); flag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif(flag) continue;\n\t\tp1=point(rand()*rand()+19260817,rand()*rand()+19491001)+p0;\n\t\tfor(int j=0;j<poly.size()-1;++j)\n\t\t\tres+=check(p0,p1,poly[j],poly[j+1]);\n\t\tif(res%2) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\n#include<string>\n#include<map>\n#include<vector>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; };\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment  Line;\n\ndouble norm(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\ndouble abs(Vector a) {\n\treturn sqrt(norm(a));\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n\n\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = fabs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = fabs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point>getCrossPoints(Circle c1, Circle c2) {\n\t//assert(intersect(c1,c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n\n\n\n}\n\ntypedef vector<Point> Polygon;\n\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (fabs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS && EPS<b.y && cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nint main() {\n\tint g,q,x1,y1;\n\tcin >> g;\n\tPolygon p;\n\tfor (int i = 0; i < g; i++) {\n\t\tcin >> x1 >> y1;\n\t\tp.push_back(Point(x1, y1));\n\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x1 >> y1;\n\t\tint ans = contains(p, Point(x1, y1));\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていれば0を返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return 0.0;\n    if(cx==bx&&cy==by)return 0.0;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            bool flag=true;\n            for(int j=0; j<n; j++){\n                double angle = angle_of_the_two_edges(p_xy[j%n][0], p_xy[j%n][1],tx,ty,p_xy[(j+1)%n][0], p_xy[(j+1)%n][1]);\n                //cout<<angle<<endl;\n                if(angle==M_PI||angle==0.0){\n                    cout<<1<<endl;\n                    flag=false;\n                    break;\n                }\n                \n                if(angle<M_PI){\n                    cout<<0<<endl;\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag)cout<<2<<endl;\n        }\n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nint intersectSS(Point a,Point b,Point c,Point d){\n    int ret1=ccw(a,b,c)*ccw(a,b,d),ret2=ccw(c,d,a)*ccw(c,d,b);\n    if(ret1==0||ret2==0||abs(ret1)>1||abs(ret2)>1) return 2;\n    else return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nPoint a[101];\nint main(){\n    int n;\n    cin>>n;\n    double x,y;\n    rep(i,n){\n        cin>>x>>y;\n        a[i]=Point(x,y);\n    }\n    int q;\n    cin>>q;\n    rep(i,q){\n        cin>>x>>y;\n        Point c(x,y),ex(100000,100000);\n        int sum=0,ans=0;\n        rep(i,n){\n            int ret=intersectSS(c,ex,a[i],a[(i+1)%n]);\n            if(ret==2){\n                ans=1;\n                break;\n            }\n            else sum+=ret; \n        }\n        if(ans==1) cout<<ans<<endl;\n        else if(sum%2==1) cout<<2<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tint type = 2;\n\t\tfor (int k = 0; k < n; k++)\n\t\t{\n\t\t\tOwnVector2 v1, v2;\n\t\t\tv1 = vertices[k] - p;\n\t\t\tv2 = vertices[(k + 1) % n] - p;\n\t\t\tdouble cross = v1.cross(v2);\n\t\t\tif (abs(cross) <= 0.000000000000001)\n\t\t\t{\n\t\t\t\ttype = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (cross < 0)\n\t\t\t{\n\t\t\t\ttype = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\", type);\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse {\n\t\t\t\tint sign = 1 - 2 * (ccw(p[j], t, next) < 0);\n\t\t\t\tdouble th = acos(getCos(p[j] - t, next - t)) * sign;\n\t\t\t\tfsum += th;\n\t\t\t}\n        }\n\t\tprintf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "//AOJ-CGL-3-C\n#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,a) for(int i = 0; i < (a); i++)\n#define ALL(a) (a).begin(),(a).end()\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( a.norm() < b.norm() ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    // assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for( int i = 0; i < n; i++ ) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nsigned main(){\n    int g;\n    cin >> g;\n    Polygon p;\n    double x, y;\n    REP(i,g){\n        cin >> x >> y;\n        p.push_back(Point(x, y));\n    }\n    int n;\n    cin >> n;\n    REP(i,n){\n        cin >> x >> y;\n        cout << contains(p, Point(x, y)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-17;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\ndouble DistAsLine(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    return fabs(V1.OuterProd(V2)) / V1.Length();\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    if (DistAsLine(P, Seg) > eps) return false;\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define repr(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define reprrev(i,a,b) for(int i=b-1;i>=a;i--) // [a, b)\n#define reprev(i,n) reprrev(i,0,n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n/* attention\n    long longのシフト演算には気をつけよう\n    タイポした時のデバッグが死ぬほどきつくなるので変数名は最低3字くらい使った方がいいかも\n*/\n\nconst ll mod = 1e9+7;\n\nvoid chmod(ll &M){\n    if(M >= mod) M %= mod;\n    else if(M < 0){\n        M += (abs(M)/mod + 1)*mod;\n        M %= mod;\n    }\n}\n\nll modpow(ll x, ll n){\n    if(n==0) return 1;\n    ll res=modpow(x, n/2);\n\n    if(n%2==0) return res*res%mod;\n    else return res*res%mod*x%mod;\n}\n\nint getl(int i, int N) { return i==0? N-1:i-1; };\nint getr(int i, int N) { return i==N-1? 0:i+1; };\n\n\n// 線分 ab の偏角 返り値は[-π, π]\ndouble argument(const pair<double, double> &a, const pair<double, double> &b){\n    double ax=a.first, ay=a.second, bx=b.first, by=b.second;\n    return atan2(by-ay, bx-ax);\n}\n\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n\n\nlong double const EPS = (1e-10);\nbool equal(long double const a, long double const b) { return fabs(a-b) < EPS; }\n\nstruct Point {\n    long double x, y;\n    Point(long double _x=0, long double _y=0) : x(_x), y(_y) {}\n\n    Point operator + (Point const & p) const { return Point{x + p.x, y + p.y}; }\n    Point & operator += (Point const & p) { x += p.x; y += p.y; return *this; }\n    Point operator - (Point const & p) const { return Point{x - p.x, y - p.y}; }\n    Point & operator -= (Point const & p) { x -= p.x; y -= p.y; return *this; }\n    Point operator * (long double a) const { return Point{a*x, a*y}; }\n    Point & operator *= (long double a) { x *= a; y *= a; return *this; }\n    Point operator / (long double a) const { return Point{x/a, y/a}; }\n\n    long double norm() { return x*x + y*y; }\n    long double abs() { return sqrt(norm()); }\n    \n    bool operator < (Point const & p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (Point const & p) const { return equal(x, p.x) && equal(y, p.y); }\n\n    void print() { cout << x << ' ' << y << \"\\n\"; }\n};\nusing Vector = Point;\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2)\n        : p1(_p1), p2(_p2) {}\n};\nusing Line = Segment;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point _c, double _r)\n        : c(_c), r(_r) {}\n};\nusing Polygon = vector<Point>;\n\n// 内積 外積 外積は大きさを返す\n// https://mathtrain.jp/gaiseki\nlong double dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\nlong double cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n// ベクトルの直交判定　平行判定\nbool isOrthogonal(Vector const & a, Vector const & b) { return equal(dot(a, b), 0.0); }\nbool isOrthogonal(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isOrthogonal(a1-a2, b1-b2); }\nbool isOrthogonal(Segment const & s1, Segment const & s2) { return isOrthogonal(s1.p1 - s1.p2, s2.p1 - s2.p2); }\nbool isParallel(Vector const & a, Vector const & b) { return equal(cross(a, b), 0); }\nbool isParallel(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isParallel(a1-a2, b1-b2); }\nbool isParallel(Segment const & s1, Segment const & s2) { return isParallel(s1.p1-s1.p2, s2.p1-s2.p2); }\n\n// 線分 s に対する点 p の射影\nPoint project(Segment const & s, Point const & p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n// 線分 s を対称軸とした点 p の線対称点\nPoint reflect(Segment const & s, Point const & p) { return p + (project(s, p) - p) * 2.0; }\n\n// 線分p0-p1 に対して線分 p0-p2 が反時計回りなのか直線上なのか線分上なのか...\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2-p0-p1\nstatic const int ONLINE_FRONT = -2; // p0-p1-p2\nstatic const int ON_SEGMENT = 0;    // p0-p2-p1\nint ccw(Point const & p0, Point const & p1, Point const & p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分 p1-p2 と線分 p3-p4 の交差判定（交点を持てば true）\nbool intersect(Point const & p1, Point const & p2, Point const & p3, Point const & p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment const & s1, Segment const & s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\n// 点と直線の距離\nlong double getDistanceLP(Line const & l, Point const & p) {\n    return abs(cross(l.p2-l.p1, p-l.p1) / (l.p2-l.p1).abs());\n}\n\n// 点と線分の距離\nlong double getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2-s.p1, p-s.p1) < 0.0) return (p-s.p1).abs();\n    if (dot(s.p1-s.p2, p-s.p2) < 0.0) return (p-s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\n// 線分と線分の距離\nlong double getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 線分と線分の交点　交点がある時\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    long double d1 = abs(cross(base, s1.p1 - s2.p1));\n    long double d2 = abs(cross(base, s1.p2 - s2.p1));\n    long double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//　円 c と直線 l の交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    assert(getDistanceLP(l, c.c) < c.r + EPS);\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    long double base = sqrt(c.r*c.r - (pr-c.c).norm());\n    return make_pair(pr + e*base, pr - e*base);\n}\n\nlong double arg(Vector p) { return atan2(p.y, p.x); }\n// a, r -> (rcos(a), rsin(a))\nVector polar(long double a, long double r) { return Point(a*cos(r), a*sin(r)); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    assert((c1.c - c2.c).norm() < (c1.r + c2.r) * (c1.r + c2.r) + EPS);\n    long double d2 = (c1.c - c2.c).norm();\n    long double a = acos((c1.r*c1.r + d2 - c2.r*c2.r) / (2*c1.r*sqrt(d2)));\n    long double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n// IN 2, ON 1, OUT 0\n// p が多角形 g に内包されるか\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    rep(i, n) {\n        Point a = g[i] - p; Point b = g[(i+1)%n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && b.y > EPS && cross(a, b) > EPS) x = !x;\n    }\n    return (x? 2:0);\n}\n\nint main(){\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n\n    int n; cin >> n;\n    Polygon g(n);\n    rep(i, n) {\n        int x, y; cin >> x >> y;\n        g[i] = Point(x, y);\n    }\n\n    int q; cin >> q;\n    while(q--) {\n        int x, y; cin >> x >> y;\n        cout << contains(g, Point(x, y)) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse {\n\t\t\t\tassert(neq(abs(next - t), 0));\n\t\t\t\tassert(neq(abs(p[j] - t), 0));\n\t\t\t\tdouble th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n\t\t\t\tfsum += th;\n\t\t\t}\n        }\n\t\tprintf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\n// ???????§???¢????????¨?????? O(n)\nint inPolygon(P p, const vector<P> &ps) {\n    int n = ps.size();\n    bool in = false;\n    rep(i,0,n) {\n        P a = ps[i] - p;\n        P b = ps[(i+1) % n] - p;\n        if(EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 2;\n        if(a.Y > b.Y) swap(a,b);\n        if((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a,b), 0)) in = !in;\n    }\n    return in;\n}\n\nint main() {\n    int n; cin >> n;\n    vector<P> ps;\n    P a;\n    rep(i,0,n) {\n        cin >> a.X >> a.Y;\n        ps.pb(a);\n    }\n\n    map<int, int> d;\n    d[2] = 1;\n    d[1] = 2;\n\n    int m; P b;\n    cin >> m;\n    rep(i,0,m) {\n        cin >> b.X >> b.Y;\n        cout << d[inPolygon(b, ps)] << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            POSITION pos_aft = get_position(s_right, poly[(i+1)%n]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i++;\n                pos_aft = get_position(s_right, poly[(i+1)%n]);\n            }\n            if (pos_pre * pos_aft == -1) count++;\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nconst double EPS = 1e-7;\nconst double INF = 1e12;\nstruct Vec {\n    double x,y;\n    Vec() {}\n    Vec(double x, double y) { \n        this->x = x, this->y = y; \n    }\n    void read() { \n        scanf(\"%lf %lf\", &x, &y); \n    }\n    void prt() {\n        printf(\"%.9f %.9f\\n\", x, y); \n    }\n    double len() { \n        return sqrt(x * x + y * y); \n    }\n    double len2() { \n        return x * x + y * y; \n    }\n    \n    Vec operator +(const Vec& o)const { \n        return Vec(x + o.x, y + o.y); \n    }\n    Vec operator -(const Vec& o)const { \n        return Vec(x - o.x, y - o.y); \n    }\n    Vec operator *(const double& k)const { \n        return Vec(k * x, k * y); \n    }\n    double operator *(const Vec& o)const {\n        return x * o.x + y * o.y; \n    }\n    double operator ^(const Vec& o)const {\n        return x * o.y - y * o.x; \n    }\n    Vec rotate(double ang){ \n        return Vec(x * cos(ang) - y * sin(ang), x * sin(ang) + y * cos(ang)); \n    }\n    Vec change(double l) { \n        if(len() < EPS) return *this; \n        return (*this) * (l/len()); \n    }\n};\n\n\nstruct Line {\n    Vec A1, A2;\n    Line() {}\n    Line(Vec A1, Vec A2) {\n        this->A1 = A1, this->A2 = A2;\n    }\n    double len() {\n        return (A2-A1).len();\n    }\n    double Len2() {\n        return (A2-A1).len2();\n    }\n};\n\n\ndouble disToLine(Vec P, Line L) {\n    return abs((P-L.A1)^(L.A2-L.A1)) / L.len();\n}\nVec projection(Vec P, Line L) {\n    double shadowLen = (P - L.A1) * (L.A2 - L.A1);\n    return L.A1 + (L.A2-L.A1).change(shadowLen);\n}\n\nbool onseg(Vec P, Line L) {\n    if(disToLine(P, L) > EPS) return 0;\n    return (P-L.A1) * (P-L.A2) <= 0;\n}\n\nVec Lineintersect(Line L1, Line L2) {\n    // 0 ~ (L2.A1 - L1.A1) ^ (L2.A2 - L1.A1);\n    // 1 ~ (L2.A1 - L1.A2) ^ (L2.A2 - L1.A2);\n    double F0 = (L2.A1 - L1.A1) ^ (L2.A2 - L1.A1);\n    double F1 = (L2.A1 - L1.A2) ^ (L2.A2 - L1.A2);\n    if (abs(F1 - F0) < EPS) return Vec(INF, INF);\n    return L1.A1 + (L1.A2 - L1.A1) * (- F0 / (F1 - F0));\n}\n\nVec Segintersect(Line L1, Line L2) {\n    Vec P = Lineintersect(L1, L2);\n    if (P.x == INF) return P;\n    if (onseg(P, L1) && onseg(P, L2)) return P;\n    return Vec(INF, INF);\n}\n\nbool disToSeg(Vec P, Line L) {\n    double ans = min((P-L.A1).len(), (P-L.A2).len());\n    ans = min(ans, (P - projection(P,L)).len());\n    return ans;\n}\n\nstruct Polygon {\n    int n; \n    vector<Vec> v;\n    void read() {\n        scanf(\"%d\", &n);\n        v.resize(2*n);\n        for(int i=0;i<n;i++){\n            Vec tmp; tmp.read();\n            v[i] = v[i+n] = tmp;\n        }\n    }\n    double getArea() {\n        double ans=0;\n        for(int i=0;i<n;i++){\n            ans=ans+(v[i]^v[i+1]);\n        }\n        return abs(ans/2);\n    }\n    bool isConvex() {\n        for(int i=0;i<n;i++){\n            if( ((v[i+1]-v[i])^(v[i+2]-v[i+1])) < 0 )\n                return 0;\n        }\n        return 1;\n    }\n    int containVec(Vec P) {\n        int flag = 0;\n        for(int i=0;i<n;i++) {\n            if (onseg(P,Line(v[i], v[i+1]))) return 1;\n            Vec Q = Lineintersect(Line(P,Vec(P.x+1,P.y)),Line(v[i],v[i+1]));\n            if (Q.x == INF) continue;\n            if (onseg(Q, Line(v[i], v[i+1]))) {\n                if (abs(Q.y - min(v[i].y, v[i+1].y)) > EPS && Q.x >= P.x)\n                    flag ^= 1;\n            }\n        }\n        return flag?2:0;\n    }\n} poly;\n\nint main(){\n    poly.read();\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        Vec P; P.read();\n        printf(\"%d\\n\", poly.containVec(P));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\nusing namespace std;\n\nconstexpr double eps = (1e-10);\nbool eq(double a,double b){ return a>b?a-b<eps:b-a<eps; }\nint sgn(double a) { return (abs(a) <= eps) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(double a,double b) {return sgn(a-b);}\nclass Point { //位置ベクトルと作用ベクトルを同一視\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tPoint(const Point &m):x(m.x),y(m.y) {}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tPoint rev() {return Point(-x,-y);}\n\tbool operator<(const Point &p){return x!=p.x?x<p.x:y<p.y;}\n\tbool operator>(const Point &p){return x!=p.x?x>p.x:y>p.y;}\n\tbool operator==(const Point &p){return eq(x,p.x)&&eq(y,p.y);}\n\tdouble norm(){ return x*x+y*y; }\n\tdouble abs() { return sqrt(norm());}\n\tdouble dist(const Point &a) { return (Point(x,y)-a).abs(); }\n\tdouble dot(const Point &a) { return x*a.x + y*a.y; }\n\t//外積 -> 2vec向き付き角度判定,平行四辺形面積\n\tdouble det(const Point &a) { return x*a.y - y*a.x; }\n\tbool is_parallel(const Point &a) { return eq((x*a.y - y*a.x),0); }\n\t// a -> this の正射影\n\tPoint proj(const Point &a) { return Point(x,y)*(dot(a)/norm()); }\n\t//2ベクトルのなす角 (正 : 時計回り, 負 : 反時計)\n\tdouble ang(const Point &v) {\n\t\tdouble g1 = atan2(v.y,v.x);\n\t\tdouble g2 = atan2(y,x);\n\t\tif (g1 < 0) g1 += (2 * M_PI);\n\t\tif (g2 < 0) g2 += (2 * M_PI);\n\t\treturn (g2 - g1);\n\t}\n\t//2ベクトルのなす角(正値)を出す。\n\tdouble absAng(Point &v){ \n    \treturn acos(dot(v)/sqrt(norm() * v.norm()));\n  \t}\n\n};\n\nclass Segment {\npublic:\n\tPoint p1;\n\tPoint p2;\n\tSegment(double x1,double y1,double x2,double y2) : p1(x1,y1),p2(x2,y2) {}\n\tSegment(const Point &a,const Point &b) : p1(a),p2(b) {}\n\tdouble len (const Segment &l) { return (p2 - p1).norm(); }\n\tinline Point toVec() { return (p2 - p1); }\n};\n\n// 線分Xと線分Yの交点\nPoint intersection(Segment X,Segment Y) {\n\treturn X.p1 + (X.p2 - X.p1) * (Y.p2 - Y.p1).det((Y.p1 - X.p1)) / (Y.p2 - Y.p1).det(X.p2 - X.p1);\n}\n\n// 線分X上に点qがあるか\nbool on_seq(Segment X,Point q) {\n\treturn (eq((X.p1 - q).det(X.p2 - q),0) && eq((X.p1 - q).dot(X.p2 - q),0));\n}\n\n// 線分Xと線分Yが交点を持つか\nbool have_intersection(Segment X,Segment Y) {\n\tif (!(X.toVec()).is_parallel(Y.toVec())) {\n\t\tPoint r = intersection(X,Y);\n\t\treturn (on_seq(X,r) && on_seq(Y,r));\n    }\n    else return (on_seq(X,Y.p1) || on_seq(X,Y.p2) || on_seq(Y,X.p1) || on_seq(Y,X.p2));\n}\n\n// 二つの線分の位置関係\nint ccw(Point a,Point b,Point c) { // aが支点\n\tcomplex<double> v1(b.x-a.x,b.y-a.y),v2(c.x-a.x,c.y-a.y);\n\tcomplex<double> v = (v2*conj(v1));\n\tif(v.imag()>eps)return 1;        //反時計回り\n\tif(v.imag()<-eps)return -1;      //時計回り\n\tif(v.real()<-eps)return 2;       //真逆\n\tif(abs(v1)+eps<abs(v2))return -2;//同じ側超えてる\n\treturn 0;                        //同じ側近い側\n}\n// 線分Xと点qの距離\ndouble distance1 (Segment X,Point q) { \n\tif (eq((X.p1 - X.p2).dot(q - X.p2),0)) return X.p2.dist(q);\n\tif (eq((X.p2 - X.p1).dot(q - X.p1),0)) return X.p1.dist(q);\n\telse return (X.p1 + (X.p2-X.p1).proj(q-X.p1)).dist(q);\n}\n\n//線分Xと線分Yの距離\ndouble distance2 (Segment X,Segment Y) { \n\tif (have_intersection(X,Y)) return 0.0;\n\telse return min({distance1(X,Y.p1),distance1(X,Y.p2),distance1(Y,X.p1),distance1(Y,X.p2)});\n}\n\n//点列をx座標で昇順ソート\ninline void sort_x(vector<Point> &p) { \n\tstruct comp { bool operator() (const Point &a,const Point &b) {return (a.x!=b.x?a.x<b.x:a.y<b.y);} };\n\tsort(p.begin(),p.end(),comp());\n}\n\n//点列をy座標で昇順ソート\ninline void sort_y(vector<Point> &p) { \n\tstruct comp { bool operator() (const Point &a,const Point &b) {return (a.y!=b.y?a.y<b.y:a.x<b.x);} };\n\tsort(p.begin(),p.end(),comp());\n}\n\n//多角形の面積 (point列は順番になっていること)\ndouble getArea(vector<Point> &point){\n\tdouble s = 0;\n\tint n = point.size();\n\tfor (int i = 0;i < n;i++ ) s += point[i%n].det(point[(i+1)%n]);\n\treturn abs(s) * 0.5;\n}\n\n//0: outside, 1: on line, 2: inside\nint contains(const vector<Point> &point, Point p) {\n    int flg = -1;\n    Point _a, _b = point.back();\n    for (int i = 0; i < int(point.size()); i++) {\n        _a = _b; _b = point[i];\n        Point a = _a, b = _b;\n        if (ccw(a, b, p) == 0) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (!(a.y <= p.y && p.y < b.y)) continue;\n        if (sgn(a.y, p.y) ? ((a-p).det(b-p) > eps) : (a.x > p.x)) flg *= -1;\n    }\n    return flg + 1;\n}\n\n//凸包を求める\nvector<Point> convexHull(vector<Point> &point){\n\tint n = point.size(),k = 0;\n\tvector<Point> qs(n*2);\n\tsort_x(point);\n\tfor(int i = 0;i < n;i++){ //下側凸包の作成\n\t\twhile(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n\t\tqs[k++] = point[i];\n\t}\n\tfor(int i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n\t\twhile(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n\t\tqs[k++] = point[i];\n\t}\n\tqs.resize(k-1);\n\treturn qs;\n}\n\nint main(void){\n\tlong n,q,x,y;\n\tcin >> n;\n\tvector<Point> pp(n);\n\tREP(i,n) {\n\t\tcin >> x >> y;\n\t\tpp[i] = Point(x,y);\n\t}\n\tcin >> q;\n\tREP(i,q) {\n\t\tcin >> x >> y;\n\t\tcout << contains(pp,Point(x,y)) << endl;\n\t}\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <tuple>\n#include <vector>\nusing namespace std;\n\nusing vec = complex<double>;\nusing line = pair<vec,vec>;\nusing polygon = vector<vec>;\nconst double eps = 0.0000001;\n\ndouble inner_product(vec u,vec v){\n    return real(u*conj(v));\n}\ndouble cross_product(vec u,vec v){\n    return imag(conj(u)*v);\n}\n\nvec projection(line l,vec p){//p???l???????°???±\n    vec s=l.first, t=l.second;\n    double k = inner_product(t-s,p-s)/inner_product(t-s,t-s);\n    return (1.0-k)*s+k*t;\n}\n\nvec reflection(line l,vec p){\n    return 2.0*projection(l,p)-p;\n}\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = cross_product(ab,ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(inner_product(ab,ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(inner_product(ab,ab)<inner_product(ac,ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isIntersect(line l0, line l1){\n    int s = ccw(l0.first,l0.second,l1.first)*ccw(l0.first,l0.second,l1.second);\n    if(s!=0&&s!=-1&&s!=-4) return false;\n    s=ccw(l1.first,l1.second,l0.first)*ccw(l1.first,l1.second,l0.second);\n    if(s!=0&&s!=-1&&s!=-4) return false;\n    else return true;\n}\n\nvec interSection(line l0, line l1){\n    vec s0, t0, s1, t1;\n    tie(s0,t0)=l0; tie(s1,t1)=l1;\n    double k = cross_product(t1-s1,s1-s0)/cross_product(t1-s1,t0-s0);\n    return s0+(t0-s0)*k;\n}\n\ndouble segLength(line l){\n    return abs(l.first-l.second);\n}\n\ndouble distLine2point(line l, vec p){\n    return abs(cross_product(l.second-l.first,p-l.first))/abs(l.second-l.first);\n}\n\ndouble distSeg2Point(line l, vec p){\n    vec x = projection(l,p);\n    double L = segLength(l);\n    if(abs(x-l.first)<L&&abs(x-l.second)<L){\n        return abs(x-p);\n    }else{\n        return min(abs(l.first-p),abs(l.second-p));\n    }\n}\n\ndouble distSeg2Seg(line l1, line l2){\n    if(isIntersect(l1,l2)) return 0;\n    double ret = 1e20;\n    ret = min(ret,distSeg2Point(l1,l2.first));\n    ret = min(ret,distSeg2Point(l1,l2.second));\n    swap(l1,l2);\n    ret = min(ret,distSeg2Point(l1,l2.first));\n    ret = min(ret,distSeg2Point(l1,l2.second));\n    return ret;\n}\n\ndouble area(polygon& g){\n    double S=0;\n    for(auto i = g.begin()+1; i!=g.end();++i){\n        S += cross_product(*(i-1),*i);\n    }\n    S/=2;\n    return S;\n}\n\nbool isConvex(polygon& g){\n    int n=g.size()-2;\n    for(int i=0;i<n;i++){\n        if(!~ccw(g[i],g[i+1],g[i+2]))return false;\n    }\n    return true;\n}\n\nbool isOnEdge(polygon& g,vec& p){\n    int n=g.size()-1;\n    for(int i=0;i<n;i++){\n        if(!ccw(g[i],g[i+1],p)) return true;\n    }\n    return false;\n}\n\nbool isInside(polygon& g,vec& p){\n    int n=g.size()-1,c=0;\n    vec O = vec(114514,123456);\n    for(int i=0;i<n;i++){\n        c+=isIntersect(line(O,p),line(g[i],g[i+1]));\n    }\n    if(c%2) return true;\n    else return false;\n}\n\n//???????????§???????????????\n\n\nint main(){\n    int n;\n    cin >> n;\n    polygon g;\n    while(n--){\n        int x,y;\n        cin>>x>>y;\n        g.emplace_back(x,y);\n    }\n    g.push_back(g[0]);\n\n    cout.precision(1);\n    cout << fixed;\n\n    cin >> n;\n    while(n--){\n        int x,y;\n        cin>>x>>y;\n        vec v(x,y);\n        if(isOnEdge(g,v)){\n            cout << 1 << endl;\n        }else if(isInside(g,v)){\n            cout << 2 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <map>\n#include <utility>\n#include <vector>\n\n#define sz(z) (int)z.size()\n#define fo(i, a, b) for (auto(i) = (a); (i) < (b); (i)++)\n#define mp make_pair\n#define pb push_back\n\nusing namespace std;\n\n#define DEBUG\n\n#ifdef DEBUG\n#define D(m...) fprintf(stderr, m)\n#else\n#define D(m...)\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> ii;\n\nconst double EPS = 1e-8;\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) { return pt(a.x - b.x, a.y - b.y); }\n\nbool zero(double x) { return fabs(x) <= EPS; }\n\ndouble cross(pt a, pt b) { return a.x * b.y - a.y * b.x; }\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) { return sqrt(sq(p.x - q.x) + sq(p.y - q.y)); }\n\nvector<pt> poly;\nint n;\nint q;\n\n#define IN 2\n#define ON 1\n#define OUT 0\n\n// taken from\n// https://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html\ndouble Angle2D(double x1, double y1, double x2, double y2) {\n    double dtheta, theta1, theta2;\n    theta1 = atan2(y1, x1);\n    theta2 = atan2(y2, x2);\n    dtheta = theta2 - theta1;\n    while (dtheta > M_PI)\n        dtheta -= 2 * M_PI;\n    while (dtheta < -M_PI)\n        dtheta += 2 * M_PI;\n    return (dtheta);\n}\n\nint check(pt p) {\n    double angle = 0;\n    pt p1, p2;\n    fo(i, 0, n) {\n        p1 = poly[i] - p;\n        p2 = poly[(i + 1) % n] - p;\n        angle += Angle2D(p1.x, p1.y, p2.x, p2.y);\n        if (dist(poly[i], p) + dist(poly[(i + 1) % n], p) ==\n            dist(poly[i], poly[(i + 1) % n])) {\n            return ON;\n        }\n    }\n    if (angle < 2 * M_PI - EPS) {\n        return OUT;\n    } else {\n        return IN;\n    }\n}\n\nint main() {\n    cin >> n;\n\n    fo(i, 0, n) {\n        double x, y;\n        cin >> x >> y;\n        poly.pb(pt(x, y));\n    }\n\n    cin >> q;\n\n    fo(i, 0, q) {\n        double x, y;\n        cin >> x >> y;\n        pt p = pt(x, y);\n        cout << check(p) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define Re real()\n#define Im imag()\nusing namespace std;\n\nconst double eps = 1e-9;\ntypedef complex<double> Point;\ntypedef Point Vector;\nPoint P[50050], s;\nint n, k, m;\nvector<Point> qs;\n\nbool cmp(Point a, Point b)\n{\n    if(fabs(a.Re - b.Re) < eps) return a.Im < b.Im;\n    else return a.Re < b.Re;\n}\n\ndouble cross(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Im;\n}\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Re;\n}\n\nint check(const Point& t)\n{\n    int res = 2;\n    for(int i = 0; i < n; i++)\n    {\n        if(cross(P[i] - t, P[(i + 1) % n] - t) == 0 && dot(P[i] - t, P[(i + 1) % n] - t) <= 0) res = 1;\n        if(cross(P[i] - t, P[(i + 1) % n] - t) < 0) res = 0;\n    }\n    return res;\n}\n\nint main()\n{\n    while(~scanf(\"%d\", &n))\n    {\n        for(int i = 0; i < n; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            P[i] = complex<double>(tx, ty);\n        }\n        scanf(\"%d\", &m);\n        for(int i = 0; i < m; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            s = Point(tx, ty);\n            printf(\"%d\\n\", check(s));\n        }\n    }\n    return 0;\n}\n\n/*\n\n5\n0 0\n2 0\n2 2\n0 2\n1 1\n\n4\n0 0\n3 1\n3 3\n0 3\n16\n1 1\n2 1\n1 2\n2 2\n3 1\n3 2\n0 3\n0 2\n2 0\n4 1\n-1 1\n0 -1\n1 4\n3 4\n4 3\n-2 3\n\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1128\n\n*/"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tbool judge = false;\n\tOwnVector2 p0 = vertices[0] - p;\n\n\tif (p0.length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n] - p;\n\t\tif (p1.length2() <= 0.00000000001 || (abs(p0.cross(p1)) <= 0.00000000000001 && p0.dot(p1) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (p0.y > p1.y)\n\t\t{\n\t\t\tswap(p0, p1);\n\t\t}\n\t\tif (p0.y <= 0 && 0 <= p1.y)\n\t\t{\n\t\t\tif (p0.cross(p1) < 0)\n\t\t\t{\n\t\t\t\tjudge = !judge;\n\t\t\t}\n\t\t}\n\t\n\t\tp0 = vertices[(i) % n];\n\t}\n\n\treturn judge ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db long double\nconst db eps = 1e-6;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nconst int N = 111;\npoi p[N];\n\nint main() {\n\t//cout << fixed << setprecision(0);\n\tios :: sync_with_stdio(false);\n\tint n; cin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tp[i].r();\n\tp[n] = p[0];\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r(); poi s = {1e4L + 7, 1e4L + 9};\n\t\t//cout << s.x << ' ' << s.y << '\\n';\n\t\tbool on = false;\n\t\tint inter = 0;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(!ccw(p[i], p[i + 1], t))\n\t\t\t\ton = true;\n\t\t\tif(si(s, t, p[i], p[i + 1]))\n\t\t\t\tinter ++;\n\t\t}\n\t\tif(on) cout << \"1\\n\";\n\t\telse if(inter & 1) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<string>\n#include<set>\n#include<map>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<((int)(n));i++)\n#define reg(i,a,b) for(int i=((int)(a));i<=((int)(b));i++)\n#define irep(i,n) for(int i=((int)(n))-1;i>=0;i--)\n#define ireg(i,a,b) for(int i=((int)(b));i>=((int)(a));i--)\ntypedef long long int lli;\ntypedef pair<int,int> mp;\n#define fir first\n#define sec second\n#define IINF INT_MAX\n#define LINF LLONG_MAX\n\nstruct pos{\n\tdouble x,y;\n\tdouble norm,norm2;\n\tpos tov(pos a){\n\t\treturn (a-(*this));\n\t}\n\tpos operator+(pos a)const{\n\t\tpos res=a;\n\t\tres.x+=x; res.y+=y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos operator-(pos a)const{\n\t\tpos res=(*this);\n\t\tres.x-=a.x; res.y-=a.y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos scalar(double a){\n\t\tpos res=(*this);\n\t\tres.x*=a; res.y*=a;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tdouble dot(pos a){\n\t\treturn x*a.x + y*a.y;\n\t}\n\tdouble cross(pos a){\n\t\treturn x*a.y - y*a.x;\n\t}\n\tpos(double ix,double iy){\n\t\tx=ix; y=iy;\n\t\tnorm2=x*x+y*y;\n\t\tnorm=sqrt(norm2);\n\t}\n\tpos(){}\n\tstring str(){\n\t\tchar ns[50];\n\t\tsprintf(ns,\"(%lf %lf)\",x,y);\n\t\treturn\tstring(ns);\n\t}\n\tstatic pos polar(double r,double t){\n\t\treturn pos(r*cos(t),r*sin(t));\n\t}\n};\n\nstruct line{\n\tpos p,q;\n\tpos vec;\n\tstring str(){\n\t\treturn (\"(\"+p.str()+\"-\"+q.str()+\")\");\n\t}\n\tbool iscross(line a){\n\t\tdouble da,db;\n\t\tda=vec.cross( p.tov(a.p) );\n\t\tdb=vec.cross( p.tov(a.q) );\n\t\tif(da*db>=0)return false;\n\t\tda=a.vec.cross( a.p.tov(p) );\n\t\tdb=a.vec.cross( a.p.tov(q) );\n\t\treturn (da*db<0);\n\t}\n\tline(pos ip,pos iq){\n\t\tp=ip; q=iq;\n\t\tvec=p.tov(q);\n\t}\n\tline(){}\n\tdouble dist(pos a){\n\t\tif(p.tov(a).dot( p.tov(q) )<0)return p.tov(a).norm;\n\t\tif(q.tov(a).dot( q.tov(p) )<0)return q.tov(a).norm;\n\t\treturn abs(vec.cross(p.tov(a))/vec.norm);\n\t}\n\tdouble dist(line a){\n\t\tif(iscross(a))return 0;\n\t\treturn min( min(dist(a.p),dist(a.q)) , min(a.dist(this->p),a.dist(this->q)));\n\t}\n};\n\ndouble lowofcos_getcos(double a,double b,double c){\n\treturn ((a*a+b*b-c*c)/(2*a*b));\n}\n\nstruct circle{\n\tpos p;\n\tdouble r;\n\t\n\tline getintersection(circle a){\n\t\tpos cv=p.tov(a.p);\n\t\tdouble br=atan2(cv.y,cv.x);\n\t\tdouble dr=acos(lowofcos_getcos( r, cv.norm, a.r));\n\t\t\n\t\tpos p1= p+pos::polar(r,br+dr);\n\t\tpos p2= p+pos::polar(r,br-dr);\n\t\t\n\t\treturn line(p1,p2);\n\t}\n\tcircle(pos ip,double ir){\n\t\tp=ip; r=ir;\n\t}\n\tcircle(){}\n};\n\nstruct polygon{\n\tvector<pos> ps;\n\tpolygon(){}\n\tdouble area(){\n\t\tdouble res=0;\n\t\trep(i,ps.size()){\n\t\t\tpos no=ps[i],to=ps[(i+1)%ps.size()];\n\t\t\tres+=(no.x+to.x)*(no.y-to.y);\n\t\t}\n\t\treturn abs(res)/2;\n\t}\n\tpolygon(pos a,pos b){\n\t\tps.push_back(a);\n\t\tps.push_back(pos(a.x,b.y));\n\t\tps.push_back(b);\n\t\tps.push_back(pos(b.x,a.y));\n\t}\n\tline gete(int a){\n\t\treturn line(ps[a],ps[(a+1)%ps.size()]);\n\t}\n\tint isin(pos a){\n\t\t//????????¢??????\n\t\t/*\n\t\tif((a.x-ps[0].x)*(a.x-ps[2].x)>0)return false;\n\t\tif((a.y-ps[0].y)*(a.y-ps[2].y)>0)return false;\n\t\treturn true;\n\t\t*/\n\t\t\n\t\t//?????´??????2,?????£????????????1,?????????0\n\t\tdouble as=0;\n\t\trep(i,ps.size()){\n\t\t\tline ne=gete(i);\n\t\t\tif(ne.dist(a)<=0)return 1;\n\t\t\tpos v1=a.tov(ne.p);\n\t\t\tpos v2=a.tov(ne.q);\n\t\t\tdouble nt=acos(v1.dot(v2)/(v1.norm*v2.norm));\n\t\t\tdouble ns=(v1.cross(v2)/(v1.norm*v2.norm));\n\t\t\tif(ns<0)nt*=-1;\n\t\t\tas+=nt;\n\t\t}\n\t\tif(abs(as)<1e-6)return 0;\n\t\treturn 2;\n\t}\n\t\n\tpolygon mult(polygon a){\n\t\treturn a;\n\t}\n};\n\n\nint main(void){\n\tint n;\n\tscanf(\"%d\",&n);\n\tpolygon pl;\n\trep(i,n){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tpl.ps.push_back(pos(p,q));\n\t}\n\t\n\tint qn;\n\tscanf(\"%d\",&qn);\n\trep(i,qn){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tprintf(\"%d\\n\",pl.isin(pos(p,q)));\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Polygon-Point Containment\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n#include <vector>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    explicit Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble arg(Vector p) {\n    return atan2(p.y, p.x);\n}\n\nVector polar(double r, double theta) {\n    return Point(cos(theta) * r, sin(theta) * r);\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    return s.p1 + (base * (dot(base, p - s.p1) / base.norm()));\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2;\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > ESP) return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -ESP) return CLOCKWISE;\n    else if (dot(a, b) < -ESP) return ONLINE_BACK;\n    else if (a.norm() < b.norm()) return ONLINE_FRONT;\n    else return ON_SEGMENT;\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n    return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 && ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistancePP(Point p1, Point p2) {\n    return (p2 - p1).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if(dot(s.p2 - s.p1, p - s.p1) < 0) {\n        return getDistancePP(s.p1, p);\n    } else if(dot(s.p1 - s.p2, p - s.p2) < 0) {\n        return getDistancePP(s.p2, p);\n    } else {\n        return getDistanceLP(s, p);\n    }\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if(intersect(s1, s2)) return 0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s1.p2 - s1.p1;\n    double d1 = fabs(cross(base, s2.p1 - s1.p1));\n    double d2 = fabs(cross(base, s2.p2 - s1.p1));\n    return s2.p1 + (s2.p2 - s2.p1) * (d1 / (d1 + d2));\n}\n\npair<Point, Point> getCrossPoint(Circle c, Line l) {\n    Vector base = l.p2 - l.p1;\n    double d = getDistanceLP(l, c.c);\n    Point m = project(l, c.c);\n    double t = sqrt(pow(c.r, 2.0) - pow(d, 2.0)) / base.abs();\n    return make_pair(m + base * t, m - base * t);\n}\n\npair<Point, Point> getCrossPoint(Circle c1, Circle c2) {\n    double d = (c1.c - c2.c).abs();\n    double a = acos((pow(d, 2.0) + pow(c1.r, 2.0) - pow(c2.r, 2.0)) / (2 * d * c1.r));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p) {\n    int n = int(g.size());\n    bool x = false;\n    for(int i = 0; i < n; i++) {\n        Vector a = g[i] - p;\n        Vector b = g[(i + 1) % n] - p;\n        if(fabs(cross(a, b)) < ESP && dot(a, b) < ESP) return 1;\n        if(a.y > b.y) swap(a, b);\n        if(cross(a, b) > ESP && a.y < ESP && b.y > ESP) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\nint main() {\n    int n, q;\n    double x, y;\n    Polygon g;\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        cin >> x >> y;\n        g.emplace_back(Point(x, y));\n    }\n    cin >> q;\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        cout << contains(g, Point(x, y)) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint windingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint wn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q)){\n\t\t\tint ps = side(a, b, p), qs = side(a, b, q);\n\t\t\tif (ps == qs) continue;\n\t\t\twn -= ps;\n\t\t}\n\t}\n\treturn wn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (windingN(po, a) ? IN : OUT);\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n  \nusing namespace std;\n\ntypedef long long ll;\n\nclass Point {\npublic:\n  ll x, y;\n  \n  Point () {}\n  Point ( ll x = 0, ll y = 0 ) : x(x), y(y) {}\n  \n  Point operator - ( const Point &p ) const { return Point(x - p.x, y - p.y); }\n};\n  \ntypedef Point Vector;\n  \ntypedef vector<Point> Polygon;\n  \nll dot( Vector a, Vector b ) { return a.x*b.x + a.y*b.y; }\nll cross( Vector a, Vector b ) { return a.x*b.y - a.y*b.x; }\n\nenum { IN, ONSEG, OUT };\n#define curr(G, i) (G[i])\n#define next(G, i) (G[(i+1)%n])\n\nint\npointInPolygon(const Polygon &G, const Point &p) {\n  \n  int n = G.size();\n  bool in = false;\n  \n  for(int i=0; i<n; i++) {\n    Vector V1 = curr(G, i) - p, V2 = next(G, i) - p;\n    \n    if( V1.y > V2.y ) swap(V1, V2);\n    if( V1.y <= 0 && 0 < V2.y && cross(V1, V2) > 0 ) in = !in;\n    if( cross(V1, V2) == 0 && dot(V1, V2) <= 0 ) return ONSEG;\n  }\n  return in ? IN : OUT;\n}\n  \nint\nmain() {\n  int n, q;\n  ll x, y;\n    \n  Polygon G;\n  cin >> n;\n    \n  for(int i=0; i<n; i++) {\n    cin >> x >> y;\n    G.push_back(Point(x, y));\n  }\n    \n  cin >> q;\n  for(int i=0; i<q; i++) {\n    cin >> x >> y;\n    int res = pointInPolygon(G, Point(x, y));\n    if(res == IN)    cout << 2 << endl;\n    if(res == ONSEG) cout << 1 << endl;\n    if(res == OUT)   cout << 0 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    }\n    else {\n        return d < 0? -1 : 1;\n    }\n}\n\nstruct Vector {\n    double x, y;\n    Vector(double x = 0, double  y = 0):x(x), y(y) {\n    }\n};\n\ntypedef Vector Point;\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble ccw(const Point& a, const Point& b, const Point& c) {\n    return cross(b - a, c - a);\n}\n\n//TZ\nvoid polygonContain(int n, vector<Point>& g, Vector& p){\n    int count = 0; //0: on segment\n    bool onseg = false;\n    for (int i = 0; i < n; i++) {\n        Vector u = g[i] - p;\n        Vector v = g[(i + 1) % n] - p;\n        //on segment\n        if (dcmp(cross(u, v)) == 0 && dcmp(dot(u, v)) <= 0) {\n            onseg = true;\n            break;\n        }\n        if (u.y > v.y) {\n            swap(u, v);\n        }\n        if (dcmp(v.y) >= 0 && dcmp(u.y) < 0 && dcmp(cross(u, v)) > 0) {\n            count++;\n        }\n    }\n    //0: on seg, 1: outside, 2: contain\n    if (onseg) {\n        cout << 1 << endl;\n    }\n    else if (count % 2 == 0) {\n        cout << 0 << endl;\n    }\n    else {\n        cout << 2 << endl;\n    }\n}\n\n//Winding number: Aoaoc training\nvoid polygonContain1(int n, vector<Point>& g, Vector& p){\n    int wn = 0; //0: on segment\n    bool onseg = false;\n    for (int i = 0; i < n; i++) {\n        Vector u = g[i] - p;\n        Vector v = g[(i + 1) % n] - p;\n        //on segment\n        if (dcmp(cross(u, v)) == 0 && dcmp(dot(u, v)) <= 0) {\n            onseg = true;\n            break;\n        }\n        \n        if (dcmp(v.y) >= 0 && dcmp(u.y) < 0 && dcmp(cross(u, v)) > 0) {\n            wn++;\n        }\n        else if (dcmp(u.y) >= 0 && dcmp(v.y) < 0 && dcmp(cross(u, v) < 0)) {\n            wn--;\n        }\n    }\n    //0: on seg, 1: outside, 2: contain\n    if (onseg) {\n        cout << 1 << endl;\n    }\n    else if (wn == 0) {\n        cout << 0 << endl;\n    }\n    else {\n        cout << 2 << endl;\n    }\n}\n\nint main() {\n    int n; \n    cin >> n;\n    vector<Point> g(n);\n    for (int i = 0; i < n; i++) {\n        cin >> g[i].x >> g[i].y;\n    }\n    \n    int q;\n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        Vector p;\n        cin >> p.x >> p.y;\n        polygonContain1(n, g, p);\n    }\n   \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tbool judge = false;\n\tOwnVector2 p0 = vertices[0] - p;\n\n\tif (p0.length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n] - p;\n\t\tif (p1.length2() <= 0.00000000001 || (abs(p0.cross(p1)) <= 0.00000000000001 && p0.dot(p1) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (p0.y > p1.y)\n\t\t{\n\t\t\tswap(p0, p1);\n\t\t}\n\t\tif (p0.y <= 0 && 0 <= p1.y)\n\t\t{\n\t\t\tif (p0.cross(p1) < 0)\n\t\t\t{\n\t\t\t\tjudge = !judge;\n\t\t\t}\n\t\t}\n\t\n\t\tp0 = vertices[i - 1];\n\t}\n\n\treturn judge ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\n#define x first\n#define y second\n\nusing namespace std;\ntypedef pair<double, double> pt;\nconst double e = 1e-8;\nconst double X = 1e4 + 1;\n\npt operator-(pt a, pt b) {\n    return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= e;\n}\n\nbool le(double x, double y) {\n  return x < y or fabs(x - y) <= e;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  double c = cross(b - a, c - a);\n  return zero(c) or c > 0;\n}\n\ndouble sq(double d) {\n  return d * d;\n}\n\ndouble dist(pt A, pt B) {\n  return sqrt(sq(A.x - B.x) + sq(A.y - B.y));\n}\n\nbool intersect(pt A, pt B, pt C, pt D) {\n  return ccw(A, B, C) != ccw(A, B, D) and ccw(C, D, A) != ccw(C, D, B);\n}\n\nbool on_line(pt A, pt B, pt C) {\n  return fabs(dist(A, C) + dist(B, C) - dist(A, B)) <= e;\n}\n\n/*\nbool on_line(pt A, pt B, pt C) {\n  auto lower_x = min(A.x, B.x);\n  auto upper_x = max(A.x, B.x);\n  auto lower_y = min(A.y, B.y);\n  auto upper_y = max(A.y, B.y);\n  return (\n      C.x >= lower_x\n      and C.x <= upper_x\n      C.x >= lower_x\n      and C.x <= upper_x\n\n}\n*/\n\nint contains(vector<pt> shape, pt C) {\n\n  int intersections = 0;\n  bool on_segment = false;\n  pt D = {C.x, X};\n\n  for (int i = 0; i < shape.size(); i++) {\n\n    pt A = shape[i];\n    pt B = shape[(i + 1) % shape.size()];\n\n    bool j = intersect(A, B, C, D);\n    intersections += j;\n    on_segment |= on_line(A, B, C);\n    /*\n    printf(\"(%.0f %.0f) - (%.0f %.0f): (%.1f %.1f) = %d\\n\",\n        A.x, A.y, B.x, B.y, C.x, C.y, j\n    );\n    */\n  }\n\n  if (on_segment) return 1;\n  else if (intersections % 2 == 0) return 0;\n  else return 2;\n\n}\n\nint main() {\n\n  vector<pt> shape;\n\n  int g;\n  cin >> g;\n  for (int i = 0; i < g; ++i) {\n    double x, y;\n    cin >> x >> y;\n    shape.emplace_back(x, y);\n  }\n\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    double x, y;\n    cin >> x >> y;\n    cout << contains(shape, {x, y}) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-5;\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( max(-1.0,min(1.0,dot(b,c)/abs(b)/abs(c))) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst pair<int, int> INF{12345, 54321};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\treturn cross1 * cross2 < 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int j = 0; j < q; j++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\nconst double  eps  = (1e-10);\n//点\nstruct Point{\n    double x,y;\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    double norm(){return x*x+y*y;}//模的平方\n    double ABS() {return sqrt(norm());}//模\n};\n//线段\nstruct Segment{\n    Point p1,p2;\n};\ndouble dot(Point a,Point b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b){\n    return a.x*b.y-a.y*b.x;\n}\n//点p和多边形的关系\nint jud(vector<Point> G,Point p){\n    int n = G.size();\n    bool x=0;\n    for(int i=0;i<n;i++){\n        Point a=G[i]-p,b=G[(i+1)%n]-p;\n        if(abs(cross(a,b))<eps && dot(a,b)<eps) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<eps&&eps<b.y&&cross(a,b)>eps) x=!x;\n    }\n    return (x?2:0);\n}\nvector<Point> Polygon;\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    double x,y;\n    for(int i=0;i<n;i++){\n        scanf(\"%lf %lf\",&x,&y);\n        Polygon.push_back({x,y});\n    }\n    int q;\n    Point que;\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf %lf\",&que.x,&que.y);\n        int ans=jud(Polygon,que);\n        // cout<<(int)Polygon.size()<<endl;\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = 1e9;\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t//\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t//\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\nusing namespace std;\n\nconst double E = 0.000000001;\nconst int MAX = 100;\n\nstruct Point {\n\tPoint operator - (const Point& pos)const {\n\t\tPoint p;\n\t\tp.x = x - pos.x;\n\t\tp.y = y - pos.y;\n\t\treturn p;\n\t}\n\tdouble x, y;\n};\n\nstruct Line {\n\tPoint p1, p2;\n};\n\nPoint sub(Point p1, Point p2) {\n\tPoint p;\n\tp.x = p1.x - p2.x;\n\tp.y = p1.y - p2.y;\n\treturn p;\n}\n\ndouble dot(Point v1, Point v2) {\n\treturn v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Point v1, Point v2) {\n\treturn v1.x * v2.y - v1.y * v2.x;\n}\n\ndouble len(Point v) {\n\treturn sqrt(pow(v.x, 2) + pow(v.y, 2));\n}\n\nbool lineCross(Line l1, Line l2) {\n\tauto func = [](Point v1, Point v2, Point v3)->bool {\n\t\tint s1 = cross(v1, v2) > 0 ? 1 : -1;\n\t\tint s2 = cross(v1, v3) > 0 ? 1 : -1;\n\t\treturn s1 != s2;\n\t};\n\n\tif (func(sub(l1.p2, l1.p1), sub(l2.p1, l1.p1), sub(l2.p2, l1.p1)) &&\n\t\tfunc(sub(l2.p2, l2.p1), sub(l1.p1, l2.p1), sub(l1.p2, l2.p1))) {\n\t\treturn true;\n\t}\n}\n\nbool lineOn(Line l, Point p) {\n\tdouble c = cross(sub(l.p2, l.p1), sub(p, l.p1));\n\tif (c < E && c > -E \n\t\t&& dot(sub(l.p2, l.p1), sub(p, l.p1)) > 0\n\t\t&& dot(sub(l.p1, l.p2), sub(p, l.p2)) > 0)return true;\n\treturn false;\n}\n\nint inPolygon(Point polygon[], int n, Point p) {\n\n\tint cnt = 0;\n\tLine line;\n\n\tline.p1 = p;\n\tline.p2.y = p.y;\n\tline.p2.x = 10001;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tLine l;\n\t\tif (i == 0) {\n\t\t\tl.p1 = polygon[n - 1];\n\t\t}\n\t\telse {\n\t\t\tl.p1 = polygon[i - 1];\n\t\t}\n\t\tl.p2 = polygon[i];\n\n\t\tif (lineOn(l, p)) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (lineCross(l, line))cnt++;\n\t}\n\n\tif (cnt & 1)return 2;\n\treturn 0;\n}\n\nint main() {\n\tint n,q;\n\tPoint polygon[MAX];\n\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint p;\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tcout << inPolygon(polygon, n, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\ndouble xmax, xmin, ymax, ymin;\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); }\n  double norm2(){ return x * x + y * y; }\n  //double ppdist(vec p){ return sqrt( (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) ); }\n  //double ppdist2(vec p){ return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y); }\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){ return a + (b - a).sca((p - a).dot(b - a) / (b - a).dot(b - a)); }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){ return abs(l.getvec().cross(getvec())) < eps; }\n  bool orth(line l){ return abs(l.getvec().dot(getvec())) < eps; }\n  bool intersec(line l){\n    bool res0 = (ccw(l.a) * ccw(l.b) == 4); //syukutai\n    bool res1 = (getvec().cross(l.a - a) * getvec().cross(l.b - a)) <= eps;\n    bool res2 = (l.getvec().cross(a - l.a) * l.getvec().cross(b - l.a)) <= eps;\n    return !res0 && res1 && res2;\n  }\n  vec crosspoint(line l){\n    return a + getvec().sca((l.a - a).cross(l.getvec()) / getvec().cross(l.getvec()));\n  }\n  double pldist(vec p){\n    double res = min((a - p).norm2(), (b - p).norm2());\n    vec h = proj(p);\n    if((a - h).dot(b - h) < 0)res = min(res, (h - p).norm2());\n    return sqrt(res);\n  }\n  double lldist(line l){\n    if(intersec(l))return 0.0;\n    return min(min(pldist(l.a), pldist(l.b)), min(l.pldist(a), l.pldist(b)));\n  }\n};\nstruct polygon{\n  vector<vec> p;  //ccw\n  double area(){\n    double res = 0.0;\n    for(int i = 0;i < p.size();++i)res += p[i].cross(p[(i + 1) % p.size()]);\n    return res / 2.0;\n  }\n  bool isconv(){\n    for(int i = 0;i < p.size();++i)\n    if((p[(i + 1) % p.size()] - p[i]).cross(p[(i + 2) % p.size()] - p[i]) < -eps)return false;\n    return true;\n  }\n  int isin(vec a){\n    line l = (line){a, a + (vec){xmax - xmin, 0.0}};\n    int cnt = 0, n = p.size();\n    for(int i = 0;i < n;++i){\n      line tmp = (line){p[i], p[(i + 1) % n]};\n      if(tmp.ccw(a) == 0)return 1; //on line\n      if(l.intersec(tmp)){\n        ++cnt;\n        if(l.ccw(p[i]) == 0 && l.ccw(p[(i + 1) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        if(l.paral(tmp)){\n          ++cnt;\n          if(l.ccw(p[(i + 2) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        }\n      }\n    }\n    return (cnt & 1) * 2;  //2:in 0:out\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  xmax = 10101.0; xmin = -10101.0;\n  polygon A;\n  int(n);\n  for(;n--;){\n    double x, y; cin >> x >> y;\n    A.p.pb((vec){x, y});\n  }\n  int(q);\n  for(;q--;){\n    vec p; cin >> p.x >> p.y;\n    printf(\"%d\\n\", A.isin(p));\n  }\n\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include<bits/stdc++.h>\n#define INF         1e9\n#define EPS         1e-9\n#define REP(i,n)    for(ll i=0,i##_len=(n);i<i##_len;++i)\n#define REP1(i,n)   for(ll i=1,i##_len=(n);i<=i##_len;++i)\n#define REPR(i,n)   for(ll i=(n)-1;i>=0;--i)\n#define REPR1(i,n)  for(ll i=(n);i>0;--i)\n#define REPC(i,obj) for(auto i:obj)\n#define R_UP(a,b)   (((a)+(b)-1)/(b))\n#define ALL(obj)    (obj).begin(),(obj).end()\n#define SETP        cout << fixed << setprecision(8)\nusing namespace std;\nusing ll = long long;\ntemplate<typename T = ll>inline T in() { T x; cin >> x; return x; }\n\nclass polygon {\nprivate:\n\tvector<pair<int, int>>vertex;\npublic:\n\tstatic const int on_vertex = 0;\n\tstatic const int on_side = 1;\n\tstatic const int inside = 2;\n\tstatic const int outside = 3;\n\tpolygon(int n) {\n\t\tvertex.reserve(n);\n\t}\n\tvoid push_back(int x, int y) {\n\t\tvertex.push_back(make_pair(x, y));\n\t}\n\tint contains(int x, int y) {\n\t\tint ret = 0;\n\t\tint num = vertex.size();\n\t\tREP(i, num) {\n\t\t\tif (make_pair(x, y) == vertex[i]) {\n\t\t\t\treturn on_vertex;\n\t\t\t} else {\n\t\t\t\tint x0 = vertex[i].first, y0 = vertex[i].second, x1 = vertex[(i + 1) % num].first, y1 = vertex[(i + 1) % num].second;\n\t\t\t\tif (y0 != y1) {\n\t\t\t\t\tdouble cross_x = (double)((x0 * y1 - x1 * y0) + (x1 - x0) * y) / (y1 - y0);\n\t\t\t\t\tif (min(y0, y1) <= y && y < max(y0, y1)) {\n\t\t\t\t\t\tif (abs(cross_x - x) < EPS) {\n\t\t\t\t\t\t\treturn on_side;\n\t\t\t\t\t\t} else if (cross_x > x) {\n\t\t\t\t\t\t\t++ret;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (y0 == y && (x0 < x && x < x1 || x1 < x && x < x0)) {\n\t\t\t\t\t\treturn on_side;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret % 2 == 1 ? inside : outside;\n\t}\n};\nsigned main() {\n\tint n = in();\n\tpolygon pol(n);\n\tREP(i, n) {\n\t\tint x = in(), y = in();\n\t\tpol.push_back(x, y);\n\t}\n\tint q = in();\n\tREP(i, q) {\n\t\tint x = in(), y = in();\n\t\tswitch (pol.contains(x, y)) {\n\t\tcase polygon::outside:\n\t\t\tcout << 0 << endl;\n\t\t\tbreak;\n\t\tcase polygon::on_vertex:\n\t\tcase polygon::on_side:\n\t\t\tcout << 1 << endl;\n\t\t\tbreak;\n\t\tcase polygon::inside:\n\t\t\tcout << 2 << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#define PB push_back\nconst double eps=1e-9;\nconst double INF=1e9;\ndouble ABS(double n){return n>=0?n:-n;}\nint dcmp(double n){return ABS(n)<eps?0:n>0?1:-1;}\ndouble min(double a,double b){return a>b?b:a;}\ndouble max(double a,double b){return a>b?a:b;}\nbool same(double a,double b){return ABS(a-b)<eps;}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){}\n\tpoint(double a,double b){x=a;y=b;}\n\tpoint operator +(const point &a){return point(x+a.x,y+a.y);}\n\tpoint operator -(const point &a){return point(x-a.x,y-a.y);}\n\tpoint operator *(const double &a){return point(x*a,y*a);}\n\tpoint operator /(const double &a){return point(x/a,y/a);}\n\tvoid operator =(const point &a){x=a.x;y=a.y;}\n\tvoid operator +=(const point &a){x+=a.x;y+=a.y;}\n\tvoid operator -=(const point &a){x-=a.x;y-=a.y;}\n\tvoid operator *=(const double &a){x*=a;y*=a;}\n\tvoid operator /=(const double &a){x/=a;y/=a;}\n\tbool operator <(const point &a){return x<a.x||(same(x,a.x)&&y<a.y);}\n\tbool operator ==(const point &a){return same(x,a.x)&&same(y,a.y);}\n\tdouble length(){return sqrt(x*x+y*y);}\n\tvoid in(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid out(){printf(\"(%.3lf,%.3lf)\",x,y);}\n};\nstruct segment{\n\tpoint a;\n\tpoint b;\n\tsegment(){}\n\tsegment(point x,point y){a=x;b=y;}\n\tvoid out(){\n\t\tprintf(\"segment::\");\n\t\ta.out();\n\t\tb.out();\n\t\tprintf(\"\\n\");\n\t\treturn ;\n\t}\n};\nstruct line{\n\tdouble A;\n\tdouble B;\n\tdouble C;\n\tvoid pull(){\n\t\tif(ABS(A)<eps){\n\t\t\tA/=B;\n\t\t\tC/=B;\n\t\t\tB/=B;\n\t\t}\n\t\telse{\n\t\t\tB/=A;\n\t\t\tC/=A;\n\t\t\tA/=A;\n\t\t}\n\t\treturn ;\n\t}\n\tline(){}\n\tline(double a,double b,double c){A=a;B=b;C=c;pull();}\n\tline(point a,point b){\n\t\tA=a.y-b.y;\n\t\tB=b.x-a.x;\n\t\tC=A*a.x+B*a.y;\n\t\tpull();\n\t}\n\tline(double a,double b,point p){\n\t\tA=a;\n\t\tB=b;\n\t\tC=A*p.x+B*p.y;\n\t\tpull();\n\t}\n\tline(segment s){\n\t\tA=s.a.y-s.b.y;\n\t\tB=s.b.x-s.a.x;\n\t\tC=A*s.a.x+B*s.a.y;\n\t\tpull();\n\t}\n\tvoid out(){\n\t\tprintf(\"line:: A=%.3lf B=%.3lf C=%.3lf\\n\",A,B,C);\n\t\treturn ;\n\t}\n};\ndouble distance(point a,point b){return (a-b).length();}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-b.x*a.y;}\n//angle only returns positive value\ndouble angle(point a,point b){return acos(dot(a,b)/(a.length()*b.length()));}\ndouble area(point a,point b,point c){return ABS(cross(b-a,c-a));}\ndouble distance(point a,line b){return (b.A*a.x+b.B*a.y-b.C)/sqrt(b.A*b.A+b.B*b.B);}\npoint arbitrary_point(line l){\n\tif(ABS(l.A)<=eps)return point(0,l.C/l.B);\n\telse return point(l.C/l.A,0);\n}\nbool between(point a,point b,point c){\n\tif((a.x-b.x<=eps&&b.x-c.x<=eps)||(eps>=b.x-a.x&&eps>=c.x-b.x))\n\tif((a.y-b.y<=eps&&b.y-c.y<=eps)||(eps>=b.y-a.y&&eps>=c.y-b.y))\n\treturn true;\n\treturn false;\n}\npoint intersect(line a,line b){\n\tdouble x,y,det;\n\tx=(a.C*b.B-b.C*a.B);\n\ty=(a.A*b.C-b.A*a.C);\n\tdet=(a.A*b.B-b.A*a.B);\n\treturn point(x,y)/det;\n}\nbool parallel(line a,line b){return same(a.A*b.B,b.A*a.B);}\ndouble distance(line a,line b){\n\tif(parallel(a,b))return distance(arbitrary_point(a),b);\n\telse return 0;\n}\ndouble distance(point p,segment s){\n\tline l(s);\n\tpoint a(intersect(line(l.B,-l.A,l.B*p.x-l.A*p.y),l));\n\tif(between(s.a,a,s.b))return distance(p,a);\n\telse return min(distance(p,s.a),distance(p,s.b));\n}\ndouble distance(segment a,segment b){\n\tpoint l(a.a),lm,rm,r(a.b);\n\tfor(int i=0;i<100;i++){\n\t\tlm=(l*2+r)/3;\n\t\trm=(l+r*2)/3;\n\t\tif(distance(lm,b)>distance(rm,b))l=lm;\n\t\telse r=rm;\n\t}\n\treturn distance(l,b);\n}\nbool same(line a,line b){return ABS(distance(a,b))<=eps;}\nbool vertical(line a,line b){return ABS(a.A*b.A+a.B*b.B)<=eps;}\nbool hasintersect(segment a,segment b){\n\tline l(a),r(b);\n\tif(parallel(l,r)){\n\t\tif(same(l,r))return between(a.a,b.a,a.b)||between(a.a,b.b,a.b)||between(b.a,a.a,b.b)||between(b.a,a.b,b.b);\n\t\telse return false;\n\t}\n\telse{\n\t\tpoint p(intersect(l,r));\n\t\treturn between(a.a,p,a.b)&&between(b.a,p,b.b);\n\t}\n}\nbool hasintersect(segment a,line b){\n\tline l(a);\n\tif(parallel(l,b))return same(l,b);\n\telse return between(a.a,intersect(l,b),a.b);\n}\npoint intersect(segment a,segment b){return intersect(line(a),line(b));}\npoint intersect(segment a,line b){return intersect(line(a),b);}\npoint projection(point a,line b){return intersect(line(b.B,-b.A,a),b);}\npoint reflection(point a,line b){return projection(a,b)*2-a;}\nbool online(point p,line l){return ABS(l.A*p.x+l.B*p.y-l.C)<eps;}\nbool onsegment(point p,segment s){return online(p,line(s))&&between(s.a,p,s.b);}\ndouble area(vector<point> &v){\n\tdouble ans=0;\n\tint n=(int)v.size();\n\tfor(int i=1;i<n;i++)ans+=cross(v[i],v[i-1]);\n\tans+=cross(v[0],v[n-1]);\n\treturn ABS(ans)/2;\n}\nbool isconvex(vector<point> &v){\n\tbool f=true;\n\tint n=(int)v.size();\n\tvector<point> nv(v);\n\tnv.PB(v[0]);\n\tnv.PB(v[1]);\n\tfor(int i=0;i<n;i++)if(cross(v[i+1]-v[i],v[i+2]-v[i])<-eps){\n\t\tf=false;\n\t\tbreak;\n\t}\n\tif(f)return true;\n\tf=true;\n\treverse(nv.begin(),nv.end());\n\tfor(int i=0;i<n;i++)if(cross(v[i+1]-v[i],v[i+2]-v[i])<-eps)return false;\n\treturn true;\n}\nbool onpolygon(point p,vector<point> &v){\n\tint n=(int)v.size();\n\tfor(int i=1;i<n;i++)if(onsegment(p,segment(v[i],v[i-1])))return true;\n\treturn onsegment(p,segment(v[0],v[n-1]));\n}\nbool inpolygon(point p,vector<point> &v){\n\tbool f=false;\n\tint n=(int)v.size();\n\tfor(int i=0,j=n-1;i<n;j=i++)if((dcmp(v[i].y-p.y)>0!=dcmp(v[j].y-p.y)>0)&&dcmp(p.x-(p.y-v[i].y)*(v[i].x-v[j].x)/(v[i].y-v[j].y)-v[i].x)<0)f=!f;\n\treturn f;\n}\nint main(){\n\tint n,q;\n\tpoint temp;\n\tvector<point> v;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t    temp.in();\n\t    v.PB(temp);\n\t}\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t    temp.in();\n\t    if(onpolygon(temp,v))printf(\"1\\n\");\n\t    else if(inpolygon(temp,v))printf(\"2\\n\");\n\t    else printf(\"0\\n\");\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return fmod(arg(c)-arg(b)+2*PI,2*PI);\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.01 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\n\t// 按顺时针方向生成凸包的点的序列\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\nint main() {\n\tPolygon g;\n\tPoint p, t;\n\tint n, q;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\tg.push_back(t);\n\t}\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf\", &p.x, &p.y);\n\t\tprintf(\"%d\\n\", contains(g, p));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n\n#define rep(i, m, n) for(int i=int(m);i<int(n);i++)\n#define all(c) begin(c),end(c)\n\ntemplate<typename T1, typename T2>\ninline void chmin(T1 &a, T2 b) { if (a > b) a = b; }\n\ntemplate<typename T1, typename T2>\ninline void chmax(T1 &a, T2 b) { if (a < b) a = b; }\n\ntypedef long long int ll;\nusing ll = long long int;\nusing ull = long long unsigned int;\nusing Int = long long int;\nusing namespace std;\n#define INF (1 << 30) - 1\n#define INFl (ll)5e15\n#define DEBUG 0\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define MOD 1000000007\n\n\n//edit\n\n\nnamespace Geometory {\n    const double EPS = 1e-10;\n\n    inline bool equals(double a, double b) {\n        return fabs(a - b) < EPS;\n    }\n\n    struct Point {\n        double x, y;\n\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n        Point operator+(const Point &p) {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator-(const Point &p) {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator*(const double k) {\n            return Point(x * k, y * k);\n        }\n\n        Point operator/(const double k) {\n            return Point(x / k, y / k);\n        }\n\n        double norm() const {\n            return x * x + y * y;\n        }\n\n        double abs() const {\n            return sqrt(norm());\n        }\n\n        double dot(Point p) {\n            return x * p.x + y * p.y;\n        }\n\n        double cross(Point p) {\n            return x * p.y - y * p.x;\n        }\n\n        bool operator<(const Point &p) const {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator==(const Point &p) const {\n            return equals(x, p.x) && equals(y, p.y);\n//            return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n        }\n\n\n    };\n\n    using Vector = Point;\n\n    struct Segment {\n        Point p1, p2;\n\n        Segment() {}\n\n        Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n        Segment(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) {}\n    };\n\n    using Line = Segment;\n\n\n    double norm(Vector p) {\n        return p.x * p.x + p.y * p.y;\n    }\n\n    double abs(Vector a) {\n        return sqrt(norm(a));\n    }\n\n    double dot(Vector a, Vector b) {\n        return a.dot(b);\n    }\n\n    double cross(Vector a, Vector b) {\n        return a.cross(b);\n    }\n\n    //直行判定\n    bool is_orthogonal(Vector a, Vector b) {\n        return equals(dot(a, b), 0.0);\n    }\n\n    bool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n        return is_orthogonal(a1 - a2, b1 - b2);\n    }\n\n    bool is_orthogonal(Segment s1, Segment s2) {\n        return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //平行判定\n    bool is_parallel(Vector a, Vector b) {\n        return equals(cross(a, b), 0.0);\n    }\n\n    bool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n        return is_parallel(a1 - a2, b1 - b2);\n    }\n\n    bool is_parallel(Segment s1, Segment s2) {\n        return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //反時計回り\n    static const int CCW = 1; // Counter Clockwise\n    static const int CW = -1; // Clockwise\n    static const int OB = 2; // Online Back\n    static const int OF = -2; // Online Front\n    static const int OS = 0; // On Segment\n\n    // p0を中心としたとき、p2は{反時計回り、時計回り、p2->p0->p1で同一直線上、p0->p1->p2で直線上、p2がp0p1線分上} (後ろの3つの説明は雑)\n    int ccw(Point p0, Point p1, Point p2) {\n        Vector a = p1 - p0;\n        Vector b = p2 - p0;\n        if (cross(a, b) > EPS) return CCW;\n        if (cross(a, b) < -EPS) return CW;\n        if (dot(a, b) < -EPS) return OB;\n        if (a.norm() < b.norm()) return OF;\n\n        return OS;\n    }\n\n    //交差判定\n    bool is_intersect(Point p1, Point p2, Point p3, Point p4) {\n        return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n               ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n    }\n\n    //交差判定\n    bool is_intersect(Segment s1, Segment s2) {\n        return is_intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n    }\n\n    //射影を求める\n    //pからsに垂直に線を引いたときの座標を返す\n    Point project(Segment s, Point p) {\n        Vector base = s.p2 - s.p1;\n        double r = dot(p - s.p1, base) / norm(base);\n        return s.p1 + base * r;\n    }\n\n    // 反射\n    // pを線分sを対称軸として線対称の位置にある点を求める。\n    Point reflect(Segment s, Point p) {\n//        return p + (project(s, p) - p) * 2;\n        return project(s, p) * 2 - p;\n    }\n\n\n    //距離シリーズ\n    //2点間の距離\n    double get_distance(Point a, Point b) {\n        return abs(a - b);\n    }\n\n    // 直線lと点pの距離\n    double get_distanceLP(Line l, Point p) {\n        return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n    }\n\n    // 線分sと点pの距離\n    double get_distanceSP(Segment s, Point p) {\n        if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n        if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n        return get_distanceLP(s, p);\n    }\n\n    //線分と線分の距離\n    double get_distance(Segment s1, Segment s2) {\n        if (is_intersect(s1, s2)) return 0.0;\n        return min({get_distanceSP(s1, s2.p1),\n                    get_distanceSP(s1, s2.p2),\n                    get_distanceSP(s2, s1.p1),\n                    get_distanceSP(s2, s1.p2),\n                   });\n    }\n\n    // 線分と線分の交点\n    Point get_cross_point(Segment s1, Segment s2) {\n        Vector base = s2.p2 - s2.p1;\n        double d1 = abs(cross(base, s1.p1 - s2.p1));\n        double d2 = abs(cross(base, s1.p2 - s2.p1));\n\n        double t = d1 / (d1 + d2);\n        return s1.p1 + (s1.p2 - s1.p1) * t;\n    }\n\n    struct Circle {\n        Point c;\n        double r;\n\n        Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n    };\n\n    //円と線分の交差判定\n    bool is_intersect(Circle c, Line l) {\n        double d = get_distanceLP(l, c.c);\n        return d - c.r < EPS;\n    }\n\n    bool is_intersect(Circle c1, Circle c2) {\n        double d = get_distance(c1.c, c2.c);\n        return d - (c1.r + c2.r) < EPS;\n    }\n\n    //円と線分の交点\n    pair<Point, Point> get_cross_points(Circle c, Line l) {\n//        assert(is_intersect(c, l));\n        if (!is_intersect(c, l)) exit(-1);\n        Vector pr = project(l, c.c);\n        Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n        double base = sqrt(c.r * c.r - norm(pr - c.c));\n        return make_pair(pr + e * base, pr - e * base);\n    }\n\n    double arg(Vector p) {\n        return atan2(p.y, p.x);\n    }\n\n    Vector polar(double a, double r) {\n        return Point(cos(r) * a, sin(r) * a);\n    }\n\n    pair<Point, Point> get_cross_points(Circle c1, Circle c2) {\n        assert(is_intersect(c1, c2));\n        double d = abs(c1.c - c2.c);\n        double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n        double t = arg(c2.c - c1.c);\n        return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n    }\n\n    using Polygon = vector<Point>;\n\n    static const int OUT = 0;\n    static const int ON = 1;\n    static const int IN = 2;\n\n    // 点pが多角形gにあるかを判定\n    // 計算量はO(|g|)\n    int contains(Polygon g, Point p) {\n        int n = g.size();\n        bool x = false;\n        for (int i = 0; i < n; ++i) {\n            Point a = g[i] - p, b = g[(i + 1) % n] - p;\n            if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON;\n            if (a.y > b.y) swap(a, b);\n            if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n//            if (a.y < p.y + EPS && p.y < b.y + EPS && cross(a, b) > EPS) x = !x;\n        }\n        return x ? IN : OUT;\n    }\n\n    std::ostream &operator<<(std::ostream &os, const Point &p) {\n//        os << \"(\" << p.x << \", \" << p.y << \")\";\n        os << \"\" << p.x << \" \" << p.y << \"\";\n        return os;\n    }\n\n};\n\nusing namespace Geometory;\n\n\nclass Solve {\npublic:\n    void solve() {\n        Int n;\n        cin >> n;\n        Polygon g(n);\n        for (int i = 0; i < n; ++i) {\n            cin >> g[i].x >> g[i].y;\n        }\n\n        Int q;\n        cin >> q;\n        while (q--) {\n            Int x, y;\n            cin >> x >> y;\n            Point p(x, y);\n            cout << contains(g, p) << endl;\n        }\n\n\n    }\n\n};\n\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n\n    Solve().solve();\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <bitset>\n#include <climits>\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n#define RFOR(i,a,b) for (int i=(a)-1;i>=(b);i--)\n#define ll long long\n#define ull unsigned long long\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\nusing namespace std;\n#include <vector>\n#include <cmath>\n#include <cstring>\n\nconst double EPS = 1e-10;\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y =0.0):x(x),y(y){}\n\tPoint operator + (const Point& p){ return Point(x+p.x,y+p.y);\t}\n\tPoint operator - (const Point& p){ return Point(x-p.x,y-p.y); }\n\tPoint operator * (double k){ return Point(x*k,y*k);\t}\n\tPoint operator / (double k){ return Point(x/k,y/k); }\n\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\n\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\n\n//??????\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){}\n\tSegment(double a,double b,double c,double d):p1(Point(a,b)),p2(Point(c,d)){}\n};\n\ntypedef Segment Line;\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c),r(r){}\n\tCircle(double x,double y, double r = 0.0): c(Point(x,y)),r(r){}\n};\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthgonal(a1-a2,b1-b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p-s.p1,base)/base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n\treturn p + (project(s,p) - p) * 2.0;\n}\n\n\n\n//????¨???¨????????§??????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Vector a, Vector b){\n\tif(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b) < -EPS)return CLOCKWISE;\n\tif(dot(a,b) < -EPS)return ONLINE_BACK;\n\tif(a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\tVector a = p2 - p1;\n\tVector b = p3 - p1;\n\tif(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b) < -EPS)return CLOCKWISE;\n\tif(dot(a,b) < -EPS)return ONLINE_BACK;\n\tif(a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n\n//??????????????????\nbool intersect(Point p1, Point p2, Point p3,Point p4){\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0;\n}\n\nbool intersect(Segment s1,Segment s2){\n\treturn intersect(s1.p1,s1.p2, s2.p1,s2.p2);\n}\n\n//??????\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base,s1.p1 - s2.p1));//?´??????§?¶????\n\tdouble d2 = abs(cross(base,s1.p2 - s2.p1));\n\tdouble t = d1 / (d1+d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//{???,??´???,??????}^2????????¢\ndouble getDistance(Point a,Point b){\n\treturn abs(a-b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p-l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2 - s.p1, p-s.p1) < 0.0) return abs(p-s.p1);\n\tif(dot(s.p1 - s.p2, p-s.p2) < 0.0) return abs(p-s.p2);\n\treturn getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1,s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\t\t\t\t min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\npair<Point, Point> getCrossPoint(Circle c, Line l){\n\t//assert(intersect(c,l));\n\tVector pr = project(l,c.c);\n\tVector e = (l.p2 - l.p1)/abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\n// x?????¨????§?????????????\ndouble arg(Vector p){return atan2(p.y,p.x);}\n\n// ?§????0?????´??????r????????¢\nVector polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\n\npair<Point, Point> getCrossPoint(Circle c1, Circle c2){\n\t//assert(intersect(c1,c2))\n\tdouble d = abs(c1.c-c2.c);//???????£?????????¢\n\tdouble a = acos((c1.r * c1.r + d*d - c2.r*c2.r)/(2*d*c1.r));//??????????????§????????¨?????????????????????????§?????±???????\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r,t+a),c1.c + polar(c1.r,t-a));\n}\n\n/*\n * ????????????\n * IN 2, ON 1, OUT 0\n */\nint contains(Polygon& g, Point p){\n\tint n = g.size();\n\tbool x = false;\n\tREP(i,n){\n\t\tPoint a = g[i] - p, b = g[(i+1)%n] - p;\n\t\tif(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\tint n;cin>>n;\n\tPolygon g;\n\twhile(n--){\n\t\tint x,y;cin>>x>>y;\n\t\tg.push_back(Point(x,y));\n\t}\n\tint q;cin>>q;\n\twhile(q--){\n\t\tint x,y;cin>>x>>y;\n\t\tcout << contains(g,Point(x,y)) << endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = a.X;\n\tfor (PT p : po)\n\t\tmx = max(mx, p.X);\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint n, q, a, b;\nint x[100], y[100];\n\nint cp(int x, int y, int u, int w, int p, int q) {\n\treturn (x - p) * (w - q) - (u - p) * (y - q);\n}\n\nint main()\n{\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> x[i] >> y[i];\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> a >> b;\n\n\t\tint t = 0;\n\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tif (cp(x[0], y[0], x[i], y[i], a, b) >= 0 && cp(x[i + 1], y[i + 1], x[0], y[0], a, b) > 0) {\n\t\t\t\tif (cp(x[i], y[i], x[i + 1], y[i + 1], a, b) == 0) {\n\t\t\t\t\tt = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (cp(x[i], y[i], x[i + 1], y[i + 1], a, b) > 0) {\n\t\t\t\t\tif (cp(x[i], y[i], x[i + 1], y[i + 1], x[0], y[0]) > 0)\n\t\t\t\t\t\tt += 2;\n\t\t\t\t\telse if (cp(x[i], y[i], x[i + 1], y[i + 1], x[0], y[0]) < 0)\n\t\t\t\t\t\tt -= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (cp(x[0], y[0], x[n - 2], y[n - 2], a, b) >= 0 && cp(x[n - 1], y[n - 1], x[0], y[0], a, b) == 0)\n\t\t\tif (cp(x[n - 2], y[n - 2], x[n - 1], y[n - 1], a, b) >= 0)\n\t\t\t\tt = 1;\n\n\t\tcout << t << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n\nusing namespace std;\n\n//typedef\n//------------------------------------------\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<bool> VB;\ntypedef vector<char> VC;\ntypedef vector<double> VD;\ntypedef vector<string> VS;\ntypedef vector<LL> VLL;\ntypedef vector<VI> VVI;\ntypedef vector<VB> VVB;\ntypedef vector<VS> VVS;\ntypedef vector<VLL> VVLL;\ntypedef vector<VVI> VVVI;\ntypedef vector<VVLL> VVVLL;\ntypedef pair<int, int> PII;\ntypedef pair<LL, LL> PLL;\ntypedef pair<int, string> PIS;\ntypedef pair<string, int> PSI;\ntypedef pair<string, string> PSS;\n\n\n//数値・文字列\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ninline LL toLongLong(string s) {\n    LL v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ntemplate<class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\ninline VC toVC(string s) {\n    VC data(s.begin(), s.end());\n    return data;\n}\n\ntemplate<typename List>\nvoid SPRIT(const std::string &s, const std::string &delim, List &result) {\n    result.clear();\n    string::size_type pos = 0;\n    while (pos != string::npos) {\n        string::size_type p = s.find(delim, pos);\n        if (p == string::npos) {\n            result.push_back(s.substr(pos));\n            break;\n        } else {\n            result.push_back(s.substr(pos, p - pos));\n        }\n        pos = p + delim.size();\n    }\n}\n\nstring TRIM(const string &str, const char *trimCharacterList = \" \\t\\v\\r\\n\") {\n    string result;\n    string::size_type left = str.find_first_not_of(trimCharacterList);\n    if (left != string::npos) {\n        string::size_type right = str.find_last_not_of(trimCharacterList);\n        result = str.substr(left, right - left + 1);\n    }\n    return result;\n}\n\ntemplate<typename T>\nbool VECTOR_EXISTS(vector<T> vec, T data) {\n    auto itr = std::find(vec.begin(), vec.end(), data);\n    size_t index = distance(vec.begin(), itr);\n    if (index != vec.size()) {\n        return true;\n    } else {\n        return 0;\n    }\n}\n\n#define UPPER(s) transform((s).begin(), (s).end(), (s).begin(), ::toupper)\n#define LOWER(s) transform((s).begin(), (s).end(), (s).begin(), ::tolower)\n\n\n\n//四捨五入 nLen=小数点第N位にする\n//------------------------------------------\n\n//切り上げ\ndouble ceil_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.9);\n    return dOut * pow(10.0, -nLen);\n}\n\n//切り捨て\ndouble floor_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut);\n    return dOut * pow(10.0, -nLen);\n}\n\n//四捨五入\ndouble round_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.5);\n    return dOut * pow(10.0, -nLen);\n}\n\n//n桁目の数の取得\nint take_a_n(int num, int n) {\n    string str = toString(num);\n    return str[str.length() - n] - '0';\n}\n\n\n//進数\n//------------------------------------------\n\n//\"1111011\" → 123\nint strbase_2to10(const std::string &s) {\n    int out = 0;\n    for (int i = 0, size = s.size(); i < size; ++i) {\n        out *= 2;\n        out += ((int) s[i] == 49) ? 1 : 0;\n    }\n    return out;\n}\n\n//\"123\" → 1111011\nint strbase_10to2(const std::string &s) {\n    int binary = toInt(s);\n    int out = 0;\n    for (int i = 0; binary > 0; i++) {\n        out = out + (binary % 2) * pow(static_cast<int>(10), i);\n        binary = binary / 2;\n    }\n    return out;\n}\n\n//\"ABC\" 2748\nint strbase_16to10(const std::string &s) {\n    int out = stoi(s, 0, 16);\n    return out;\n}\n\n//1111011 → 123\nint intbase_2to10(int in) {\n    string str = toString(in);\n    return strbase_2to10(str);\n}\n\n//123 → 1111011\nint intbase_10to2(int in) {\n    string str = toString(in);\n    return strbase_10to2(str);\n}\n\nint intbase_16to10(int in) {\n    string str = toString(in);\n    return strbase_16to10(str);\n}\n\n//123→ \"7B\"\nstring intbase_10to16(unsigned int val, bool lower = true) {\n    if (!val)\n        return std::string(\"0\");\n    std::string str;\n    const char hc = lower ? 'a' : 'A';     // 小文字 or 大文字表記\n    while (val != 0) {\n        int d = val & 15;     // 16進数一桁を取得\n        if (d < 10)\n            str.insert(str.begin(), d + '0');  //  10未満の場合\n        else //  10以上の場合\n            str.insert(str.begin(), d - 10 + hc);\n        val >>= 4;\n    }\n    return str;\n}\n\n//整数を2進数表記したときの1の個数を返す\nLL bitcount64(LL bits) {\n    bits = (bits & 0x5555555555555555) + (bits >> 1 & 0x5555555555555555);\n    bits = (bits & 0x3333333333333333) + (bits >> 2 & 0x3333333333333333);\n    bits = (bits & 0x0f0f0f0f0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f0f0f0f0f);\n    bits = (bits & 0x00ff00ff00ff00ff) + (bits >> 8 & 0x00ff00ff00ff00ff);\n    bits = (bits & 0x0000ffff0000ffff) + (bits >> 16 & 0x0000ffff0000ffff);\n    return (bits & 0x00000000ffffffff) + (bits >> 32 & 0x00000000ffffffff);\n}\n\n\n\n//comparison\n//------------------------------------------\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define C_MIN(a, b) ((a)<(b)?(a):(b))\n#define C_ABS(a, b) ((a)<(b)?(b)-(a):(a)-(b))\n\n\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define SZ(a) int((a).size())\n#define EACH(i, c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s, e) ((s).find(e)!=(s).end())\n#define COUNT(obj, v) count((obj).begin(), (obj).end(), v)\n#define SEARCH(v, w) search((v).begin(), (v).end(), (w).begin(), (w).end())\n#define B_SEARCH(obj, v) binary_search((obj).begin(), (obj).end(), v)\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define REVERSE(c) reverse((c).begin(), (c).end())\n#define SUMI(obj) accumulate((obj).begin(), (obj).end(), 0)\n#define SUMD(obj) accumulate((obj).begin(), (obj).end(), 0.)\n#define SUMLL(obj) accumulate((obj).begin(), (obj).end(), 0LL)\n#define SUMS(obj) accumulate((obj).begin(), (obj).end(), string())\n#define UB(obj, n) upper_bound((obj).begin(), (obj).end(), n)\n#define LB(obj, n) lower_bound((obj).begin(), (obj).end(), n)\n#define PB push_back\n#define MP make_pair\n\n\n\n\n//input output\n//------------------------------------------\n#define GL(s) getline(cin, (s))\n#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);\n#define OUT(d) std::cout<<(d);\n#define OUT_L(d) std::cout<<(d)<<endl;\n#define FOUT(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data);\n#define FOUT_L(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data)<<\"\\n\";\n#define EL() std::cout << \"\\n\";\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntemplate<typename T>\nstd::istream &operator>>(std::istream &is, std::vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\ntemplate<typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {\n    for (const T &x : vec) os << x << \" \";\n    return os;\n}\n\n\n//repetition\n//------------------------------------------\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define RFOR(i, a, b) for(int i=(b)-1;i>=(a);--i)\n#define REP(i, n)  FOR(i,0,n)\n#define RREP(i, n) for(int i = n-1;i >= 0;i--)\n#define FORLL(i, a, b) for(LL i=LL(a);i<LL(b);++i)\n#define RFORLL(i, a, b) for(LL i=LL(b)-1;i>=LL(a);--i)\n#define REPLL(i, n) for(LL i=0;i<LL(n);++i)\n#define RREPLL(i, n) for(LL i=LL(n)-1;i>=0;--i)\n#define FOREACH(x, v) for(auto &(x) : (v))\n#define FORITER(x, v) for(auto (x) = (v).begin(); (x) != (v).end(); ++(x))\n\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int MOD = 1000000007;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\n\n\n//math\n//--------------------------------------------\n\n//min <= aim <= max\ntemplate<typename T>\ninline bool BETWEEN(const T aim, const T min, const T max) {\n    if (min <= aim && aim <= max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\ntemplate<class T>\ninline T SQR(const T x) { return x * x; }\n\ntemplate<class T1, class T2>\ninline T1 POW(const T1 x, const T2 y) {\n    if (!y)return 1;\n    else if ((y & 1) == 0) {\n        return SQR(POW(x, y >> 1));\n    } else return POW(x, y ^ 1) * x;\n}\n\n\ntemplate<typename T>\nconstexpr T ABS(T x) {\n    return x < 0 ? -x : x;\n}\n\n//partial_permutation nPr 順列\n//first・・最初の数\n//middle・・r(取り出す数)\n//last・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last) {\n    reverse(middle, last);\n    return next_permutation(first, last);\n}\n\n//combination nCr 組み合わせ\n//first1・・最初の数\n//last1==first2・・r(取り出す数)\n//last2・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_combination(BidirectionalIterator first1, BidirectionalIterator last1, BidirectionalIterator first2,\n                      BidirectionalIterator last2) {\n    if ((first1 == last1) || (first2 == last2)) {\n        return false;\n    }\n    BidirectionalIterator m1 = last1;\n    BidirectionalIterator m2 = last2;\n    --m2;\n    while (--m1 != first1 && !(*m1 < *m2)) {\n    }\n    bool result = (m1 == first1) && !(*first1 < *m2);\n    if (!result) {\n        while (first2 != m2 && !(*m1 < *first2)) {\n            ++first2;\n        }\n        first1 = m1;\n        std::iter_swap(first1, first2);\n        ++first1;\n        ++first2;\n    }\n    if ((first1 != last1) && (first2 != last2)) {\n        m1 = last1;\n        m2 = first2;\n        while ((m1 != first1) && (m2 != last2)) {\n            std::iter_swap(--m1, m2);\n            ++m2;\n        }\n        std::reverse(first1, m1);\n        std::reverse(first1, last1);\n        std::reverse(m2, last2);\n        std::reverse(first2, last2);\n    }\n    return !result;\n}\n\n\n//confirmation\n//--------------------------------------------\n\n//clear memory\n#define CLR(arr, d) memset((arr), (d),sizeof(arr))\n\n//debug\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\n\n\n//平面幾何\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n\n//宣言\n//--------------------------------------------\n\n//long double or double\ntypedef double Real;\n\n//ポイントクラス\ntypedef complex<Real> Point;\n\n//線分クラス\ntypedef pair<Point, Point> Line;\n\n//円\ntypedef pair<Point, Real> Circle;\n\n//ポリゴン\ntypedef vector<Point> Poly;\n\n\n//x座標優先で比較する\nnamespace std {\n    bool operator<(const Point &a, const Point &b) {\n        return real(a) == real(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n}\n\n\n//doubleの誤差\n#define EPS (1e-4)\n//double同士の比較\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n//Pointの比較\n#define EQP(a, b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n\n//角度\n//--------------------------------------------\nReal toRadian(double degree) {\n    return degree * PI / 180.0;\n}\n\nReal toDegree(double radian) {\n    return radian * 180.0 / PI;\n}\n\n\n\n\n\n\n\n//内積・外積・単位・法線\n//--------------------------------------------\n\n//ベクトルpの向きの単位ベクトルを返す\nPoint unit_vector(Point p) {\n    return p / abs(p);\n}\n\n\n//pの法線ベクトルを両方返す\npair<Point, Point> norm_vectors(Point p) {\n    return make_pair(p * Point(0, 1), p * Point(0, -1));\n}\n\n//ベクトルを反時計に回す sはラジアン\nPoint rotate_vector(Point v, double s) {\n    return Point(v.real() * cos(s) - v.imag() * sin(s), v.real() * sin(s) + v.imag() * cos(s));\n}\n\n//内積 a・b = |a||b|cosθ\ninline double dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積 a×b = |a||b|sinθ\ninline double cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n//凸包\nvector<Point> convex_hull(vector<Point> v) {\n    int n = v.size(), k = 0;\n    sort(v.begin(), v.end());\n    vector<Point> r(2 * n);\n    for (int i = 0; i < n; i++) {\n        while (k > 1 && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n        while (k > t && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    r.resize(k - 1);\n    return r;\n}\n\n\n//三角形　角度・面積\n//--------------------------------------------\n//3点a, b, cのおける、角bacを返す\nReal args_bac(Point a, Point b, Point c) {\n    return acos(dot(b - a, c - a) / (abs(b - a) * abs(c - a)));\n}\n\n//各辺の長さがa, b, cの三角形の、aの対角の角度を返す\nReal args_bac(Real a, Real b, Real c) {\n    return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n//三角形の面積\nReal heron_area(Real a, Real b, Real c) {\n    Real s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\n//Real heron_area(Point a, Point b, Point c) {\n//    b -= a;\n//    c -= a;\n//    return (cross(b, c) / 2.0);\n//}\n\n//三角形の重心\nPoint centerOfGravity(Point a, Point b, Point c) {\n    return Point((a.real() + b.real() + c.real()) / 3.0, (a.imag() + b.imag() + c.imag()) / 3.0);\n}\n\n//三角形の外接円の半径\nReal circumScribedCircleRadius(Point a, Point b, Point c) {\n    Real edgeA = abs(b - c);\n    Real angleA = args_bac(a, b, c);\n    return (edgeA / sin(angleA) / 2.0);\n}\n\n//三角形の外接円の中心座標　外心\nPoint circumScribedCircleXY(Point a, Point b, Point c) {\n    Real angleA = args_bac(a, b, c);\n    Real angleB = args_bac(b, a, c);\n    Real angleC = args_bac(c, a, b);\n    Real A = sin(2.0 * angleA);\n    Real B = sin(2.0 * angleB);\n    Real C = sin(2.0 * angleC);\n    Point point((a.real() * A + b.real() * B + c.real() * C) / (A + B + C),\n                (a.imag() * A + b.imag() * B + c.imag() * C) / (A + B + C));\n    return point;\n}\n\n//三角形が点Pを含むか\nbool point_in_triangle(Point a, Point b, Point c, Point p) {\n    Point ab = b - a;\n    Point bp = p - b;\n\n    Point bc = c - b;\n    Point cp = p - c;\n\n    Point ca = a - c;\n    Point ap = p - a;\n\n    Real c1 = cross(ab, bp);\n    Real c2 = cross(bc, cp);\n    Real c3 = cross(ca, ap);\n\n    //内側\n    if ((c1 > 0 && c2 > 0 && c3 > 0) || (c1 < 0 && c2 < 0 && c3 < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n//直線・線分\n//--------------------------------------------\n\n//頂点a, b, cの位置関係判定\n//別名ccw couter-clock-wise\nint points_relation(Point a, Point b, Point c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS) return 1; //counter-clockwise\n    if (cross(b, c) < -EPS) return -1; //clockwise\n    if (dot(b, c) < -EPS) return 2; //c--a--b on line\n    if (abs(b) < abs(c)) return -2; //a--b--c on line\n    return 0; //on segment\n}\n\n//2直線の直行判定 Point版\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の直行判定 Line版\nbool is_orthogonal(Line line1, Line line2) {\n    return EQ(dot(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//2直線の平行判定 Point版\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の平行判定 Line版\nbool is_parallel(Line line1, Line line2) {\n    return EQ(cross(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//点cが**直線**a-b上にあるか\nbool is_point_on_long_line(Point a, Point b, Point c) {\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\n//点cが**線分**a-b上にあるか\nbool is_point_on_line(Point a, Point b, Point c) {\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n//点a, bを通る**直線**と,点cとの距離d\ndouble distance_longline_point(Point a, Point b, Point c) {\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//直線と点との距離　円用\nReal line_dis(Line a, Point x) {\n    return abs(cross(a.second - a.first, x - a.first)) / abs(a.second - a.first);\n}\n\n//点a, bを端点とする**線分**と、点cとの距離d\nReal distance_line_point(Point a, Point b, Point c) {\n    if (dot(b - a, c - a) < EPS) return abs(c - a);\n    if (dot(a - b, c - b) < EPS) return abs(c - b);\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交差判定\nbool is_intersected_lines(Point a1, Point a2, Point b1, Point b2) {\n    return (points_relation(a1, a2, b1) * points_relation(a1, a2, b2) <= 0 &&\n            points_relation(b1, b2, a1) * points_relation(b1, b2, a2) <= 0);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の距離\nReal distance_line_line(Point a1, Point a2, Point b1, Point b2) {\n    if (is_intersected_lines(a1, a2, b1, b2)) {\n        return 0;\n    } else {\n        return min({\n                           distance_line_point(a1, a2, b1),\n                           distance_line_point(a1, a2, b2),\n                           distance_line_point(b1, b2, a1),\n                           distance_line_point(b1, b2, a2)\n                   });\n    }\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交点\nPoint intersection_lines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2 - b1;\n    double d1 = abs(cross(b, a1 - b1));\n    double d2 = abs(cross(b, a2 - b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2 - a1) * Point(t, 0);\n}\n\n//点a1, a2を通る直線と点b1, b2を通る直線の交点計算\nPoint intersection_longlines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1;\n    Point b = b2 - b1;\n    return a1 + a * Point(cross(b, b1 - a1), 0) / Point(cross(b, a), 0);\n}\n\n\n//直線a-bに点pから垂線をおろしたときの交点\nPoint projection_point(Point a, Point b, Point p) {\n    Real t = dot(p - a, a - b) / (abs(a - b) * abs(a - b));\n    return a + (a - b) * t;\n}\n\n//点pを線対称移動させる\nPoint reflection_point(Point a, Point b, Point p) {\n    return p + (projection_point(a, b, p) - p) * (Real) 2.0;\n}\n\n\n\n\n//多角形\n//--------------------------------------------\n\n//面積を返す 反時計回りに整列させておく\n//正なら反時計回り　負なら時計回り\nReal poly_area(Poly p) {\n    if (p.size() < 3)return 0;\n    Real res = cross(p[p.size() - 1], p[0]);\n    for (int i = 1; i < p.size(); i++) {\n        res += cross(p[i - 1], p[i]);\n    }\n    return abs(res) / 2;\n}\n\n//凸多角形か判定する\n//凸出ない場合、各辺から次の辺までの\n//時計回り・反時計回りに反対のものが出てくる\nbool is_convec_poly(Poly p) {\n    if (p.size() < 3) {\n        return false;\n    }\n\n    //sはstartのs　最初の回り方を保存する\n    int s = -3;\n    for (int i = 0; i < p.size(); i++) {\n        //2辺隣接した辺を選ぶ\n        int r = points_relation(p[i], p[(i != 0 ? i - 1 : p.size() - 1)], p[(i + 1 != p.size() ? i + 1 : 0)]);\n\n        //外積が1 時計回りか反時計なら更新\n        if (abs(r) == 1 && s == -3) s = r;\n\n        //sとrの積が-1なら異なる回り方が出てきている\n        //すべて時計回りなら-1*-1=1 反時計なら1*1=1\n        if (s * r == -1) return false;\n    }\n    return true;\n}\n\n//最遠点対　凸多角形で最も長い距離を返す\n//凸包の後に使うとよい\nReal longest_points_distance(Poly p) {\n    int n = p.size();\n    if (n == 2) {\n        return abs(p[0] - p[1]);\n    }\n\n    int i = 0, j = 0;\n    for (int k = 0; k < n; k++) {\n        if (!(p[i] < p[k])) i = k;\n        if (p[j] < p[k]) j = k;\n    }\n\n    Real res = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        res = max(res, abs(p[i] - p[j]));\n        if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n    }\n\n    return res;\n}\n\n//頂点pが多角形pの内外か判定する\n//2･･･in 1･･･on 0･･･out\nint point_in_poly(Poly v, Point p) {\n    bool in = false;\n    for (int i = 0; i < v.size(); ++i) {\n        Point a = v[i] - p, b = v[(i + 1 != v.size() ? i + 1 : 0)] - p;\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= EPS && EPS < b.imag() && cross(a, b) < -EPS) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n    }\n    return in ? 2 : 0;\n}\n\n\n\n//円 第一引数は中点　第二引数は半径\n//--------------------------------------------\n\n//円の面積\nReal circle_area(Circle c) {\n    return PI * c.second * c.second;\n}\n\n//円の中に点xが内部にあるか\nbool circle_in_x(Circle c, Point x) {\n    return (abs(x - c.first) + EPS < c.second);\n}\n\n//円状に点xがあるか\nbool circle_on_x(Circle c, Point x) {\n    return EQ(abs(x - c.first), c.second);\n}\n\n//2つの円a, bの関係\nint circle_relation(Circle a, Circle b) {\n    double d = abs(a.first - b.first);\n\n    if (a.second + b.second + EPS < d) return -1; //no cross point outside\n    if (b.second + d + EPS < a.second) return 1; //no cross point(inside B in A)\n    if (a.second + d + EPS < b.second) return 2; //no cross point(inside A in B)\n\n    if (abs(a.second + b.second - d) < EPS) return -3; //one cross point(outside)\n    if (abs(b.second + d - a.second) < EPS) return 3; //one cross point(inside B in A)\n    if (abs(a.second + d - b.second) < EPS) return 4; //one cross point(inside A in B)\n\n    return 0; //two cross point\n}\n\n//2円a, bの共通面積\nReal intersection_area(Circle a, Circle b) {\n    Real d = abs(a.first - b.first);\n\n    if (a.second + b.second < d + EPS) return 0;\n\n    //円aを半径が大きい方にする\n    if (a.second < b.second) swap(a, b);\n\n    //円bが円aに入ってたら\n    if (b.second + d < a.second + EPS || b.second < EPS) return circle_area(b);\n\n    Real t1 = args_bac(b.second, a.second, d);\n    Real t2 = args_bac(a.second, b.second, d);\n    Real tri = (a.second * a.second * sin(t1 * 2) + b.second * b.second * sin(t2 * 2)) / 2.0;\n    return a.second * a.second * t1 + b.second * b.second * t2 - tri;\n}\n\n//2つの円の交点を返す\nvector<Point> circle_inter_points(Circle a, Circle b) {\n    vector<Point> v;\n    int pos = circle_relation(a, b);\n    if (pos == 0) {\n        Real s = args_bac(b.second, abs(b.first - a.first), a.second);\n        Point x = a.second * unit_vector(b.first - a.first);\n        v.push_back(a.first + rotate_vector(x, s));\n        v.push_back(a.first + rotate_vector(x, -s));\n    } else if (abs(pos) >= 3) {\n        v.push_back(a.first + a.second * unit_vector(b.first - a.first));\n    }\n    return v;\n}\n\n//円と直線の交点\nvector<Point> circle_inter_line_points(Circle a, Line l) {\n    vector<Point> v;\n    Real d = line_dis(l, a.first);\n    if (d < a.second + EPS) {\n        Point x = a.second * unit_vector(l.second - l.first);\n        if (points_relation(l.first, l.second, a.first) == 1) x = a.first + x * Point(0, -1);\n        else x = a.first + x * Point(0, 1);\n        if (d + EPS < a.second) {\n            Real y = sqrt(a.second * a.second - d * d);\n            if (d == 0) d += EPS;\n            Real s = args_bac(y, d, a.second);\n            v.push_back(rotate_vector(x, s));\n            v.push_back(rotate_vector(x, -s));\n        } else if (EQ(d, a.second)) {\n            v.push_back(x);\n        }\n    }\n    return v;\n}\n\n//点pを通る円cの接線\nvector<Line> adjust_line(Circle c, Point p) {\n    vector<Line> res;\n    if (circle_in_x(c, p)) return res;\n    if (circle_on_x(c, p)) {\n        pair<Point, Point> n = norm_vectors(c.first - p);\n        res.push_back(Line(n.first + p, p));\n        return res;\n    }\n    Real x = c.second, z = abs(c.first - p);\n    Real y = sqrt(z * z - x * x);\n    Real s = args_bac(y, x, z);\n    Point v = unit_vector(p - c.first) * c.second;\n\n    res.push_back(Line(rotate_vector(v, s) + c.first, p));\n    res.push_back(Line(rotate_vector(v, -s) + c.first, p));\n    return res;\n}\n\n//円の共通接線を求める\nvector<Line> common_adjust_line(Circle a, Circle b) {\n    vector<Line> res;\n    if (a.second + EPS < b.second) return common_adjust_line(b, a);\n    if (EQ(a.first.real(), b.first.real()) && EQ(a.first.imag(), b.first.imag()) && EQ(a.second, b.second)) return res;\n\n    Point pos = (b.first - a.first) * a.second / (a.second + b.second) + a.first;\n    if (!circle_in_x(a, pos)) res = adjust_line(a, pos);\n\n    if (EQ(a.second, b.second)) {\n        pair<Point, Point> n = norm_vectors(unit_vector(b.first - a.first) * a.second);\n        res.push_back(Line(a.first + n.first, b.first + n.first));\n        res.push_back(Line(a.first + n.second, b.first + n.second));\n    } else {\n        Real c = abs(b.first - a.first);\n        pos = unit_vector(b.first - a.first) * ((a.second * c) / (a.second - b.second)) + a.first;\n        if (!circle_in_x(a, pos)) {\n            vector<Line> tmp = adjust_line(a, pos);\n            for (int i = 0; i < tmp.size(); i++) res.push_back(tmp[i]);\n        }\n    }\n\n    return res;\n}\n\n\n//使い方\n//--------------------------------------------\n\n//xとyの取り出し型\n//a.real(); //x\n//a.imag(); //y\n\n//単位ベクトル\n//Point unit = a / abs(a);\n\n//ベクトルの長さをk倍する\n// a = a * Point(k, 0);\n\n//ベクトルaのk倍の法線ベクトル\n//P p1 = a * P(0, k);\n//P p2 = a * P(0, -k);\n\n//ベクトルaの単位法線ベクトル\n//P p1 = (a * P(0, 1)) /abs(a);\n//P p2 = (a * P(0, -1)) /abs(a);\n\n/*\n *\n *\n *   ~~~~Below My Answer~~~~\n *\n *\n **/\n\n\n\nint main() {\n\n    int n;\n    cin >> n;\n\n    Poly poly(n);\n    for (int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n        poly[i] = Point(x, y);\n    }\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        cout << point_in_poly(poly, p);\n        EL();\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\nint main() {\n\tvector<Point>vec;\n\tPoint P;\n\tint n;\n\twhile (cin >> n) {\n\t\tvec.clear();\n\t\tvec.push_back(P);\n\t\tfor (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n\t\tcin >> P.px >> P.py;\n\t\tint v = contain(vec, P); cout << v << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define For(i, a, b) for(int (i)=(int)(a); (i)<(int)(b); ++(i))\n#define rFor(i, a, b) for(int (i)=(int)(a)-1; (i)>=(int)(b); --(i))\n#define rep(i, n) For((i), 0, (n))\n#define rrep(i, n) rFor((i), (n), 0)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long lint;\ntypedef unsigned long long ulint;\ntypedef pair<int, int> pii;\ntypedef pair<lint, lint> pll;\ntemplate<class T> bool chmax(T &a, const T &b){if(a<b){a=b; return true;} return false;}\ntemplate<class T> bool chmin(T &a, const T &b){if(a>b){a=b; return true;} return false;}\ntemplate<class T> T div_floor(T a, T b){\n    if(b < 0) a *= -1, b *= -1;\n    return a>=0 ? a/b : (a+1)/b-1;\n}\ntemplate<class T> T div_ceil(T a, T b){\n    if(b < 0) a *= -1, b *= -1;\n    return a>0 ? (a-1)/b+1 : a/b;\n}\n\nconstexpr lint mod = 1000000007;\nconstexpr lint INF = mod * mod;\nconstexpr int MAX = 200010;\n\nnamespace geo{\n    using real_num = double;\n    constexpr real_num eps = 1e-9;\n    constexpr real_num PI = 3.14159265358979323846264338327950;\n\n    inline int sgn(real_num x){\n        if(x < -eps) return -1;\n        if(x > eps) return 1;\n        return 0;\n    }\n \n    inline bool eq(real_num x, real_num y){\n        return sgn(x-y) == 0;\n    }\n \n    inline bool ge(real_num x, real_num y){\n        return sgn(x-y) == 1;\n    }\n \n    inline bool le(real_num x, real_num y){\n        return sgn(x-y) == -1;\n    }\n \n    inline bool geq(real_num x, real_num y){\n        return sgn(x-y) >= 0;\n    }\n \n    inline bool leq(real_num x, real_num y){\n        return sgn(x-y) <= 0;\n    }\n\n    struct Point{\n        real_num x, y;\n        Point(real_num x=0, real_num y=0): x(x), y(y){}\n \n        Point operator+(const Point &p){\n            return {x+p.x, y+p.y};\n        }\n \n        Point operator-(const Point &p){\n            return {x-p.x, y-p.y};\n        }\n \n        Point operator*(const real_num k){\n            return {k*x, k*y};\n        }\n \n        Point operator/(const real_num k){\n            return {x/k, y/k};\n        }\n \n        real_num operator*(const Point &p){\n            return x*p.x + y*p.y;\n        }\n \n        real_num operator^(const Point &p){\n            return x*p.y - y*p.x;\n        }\n \n        bool operator==(const Point &p){\n            return eq(x, p.x) && eq(y, p.y);\n        }\n \n        bool operator<(const Point &p) const{\n            if(eq(x, p.x)) return le(y, p.y);\n            return le(x, p.x);\n        }\n    };\n\n    using Vec = Point;\n    using Points = vector<Point>;\n    using Polygon = vector<Point>;\n\n    real_num norm(Point p){\n        return p.x*p.x+p.y*p.y;\n    }\n \n    real_num abs(Point p){\n        return sqrt(norm(p));\n    }\n \n    real_num arg(Point p){\n        return atan2(p.y, p.x);\n    }\n \n    Point rot(Point p, real_num t){\n        return {p.x*cos(t)-p.y*sin(t), p.x*sin(t)+p.y*cos(t)};\n    }\n \n    Point proj(Point a, Vec v, Point p){\n        real_num t=v*(p-a)/norm(v);\n        return a+v*t;\n    }\n \n    Point refl(Point a, Vec v, Point p){\n        return proj(a, v, p)*2-p;\n    }\n\n    constexpr int CCW_COUNTER_CLOCKWISE=1;\n    constexpr int CCW_CLOCKWISE=-1;\n    constexpr int CCW_ONLINE_BACK=-2; // C->A->B\n    constexpr int CCW_ONLINE_FRONT=2; // A->B->C\n    constexpr int CCW_ON_SEGMENT=0; // A->C->B\n \n    inline int ccw(Point a, Point b, Point c){\n        Vec v=b-a, w=c-a;\n        if(ge(v^w, 0)) return CCW_COUNTER_CLOCKWISE;\n        if(le(v^w, 0)) return CCW_CLOCKWISE;\n        if(le(v*w, 0)) return CCW_ONLINE_BACK;\n        if(le((a-b)*(c-b), 0)) return CCW_ONLINE_FRONT;\n        return CCW_ON_SEGMENT;\n    }\n\n    bool is_parallel(Vec v, Vec w){\n        return eq(v^w, 0);\n    }\n\n    bool is_orthogonal(Vec v, Vec w){\n        return eq(v*w, 0);\n    }\n\n    bool has_intersection_ss(Point a, Point b, Point c, Point d){\n        return ccw(a, b, c)*ccw(a, b, d) <= 0 && ccw(c, d, a)*ccw(c, d, b) <= 0;\n    }\n\n    Point intersection_ll(Point a, Vec v, Point b, Vec w){\n        real_num t = ((b-a)^w) / (v^w);\n        return a + v*t;\n    }\n\n    real_num distance_lp(Point a, Vec v, Point p){\n        return abs(v^(p-a)/abs(v));\n    }\n\n    real_num distance_sp(Point a, Point b, Point p){\n        if(le((b-a)*(p-a), 0)) return abs(p-a);\n        if(le((a-b)*(p-b), 0)) return abs(p-b);\n        return distance_lp(a, b-a, p);\n    }\n\n    real_num distance_ll(Point a, Vec v, Point b, Vec w){\n        if(is_parallel(v, w)) return distance_lp(a, v, b);\n        return 0;\n    }\n\n    real_num distance_ls(Point a, Vec v, Point c, Point d){\n        Point b = a + v;\n        if(ccw(a, b, c)*ccw(a, b, d) <= 0) return 0;\n        return min(distance_lp(a, v, c), distance_lp(a, v, d));\n    }\n\n    real_num distance_ss(Point a, Point b, Point c, Point d){\n        if(has_intersection_ss(a, b, c, d)) return 0;\n        return min({distance_sp(a, b, c), distance_sp(a, b, d),\n                distance_sp(c, d, a), distance_sp(c, d, b)});\n    }\n\n    real_num area(Polygon &p){\n        real_num ret = 0;\n        rep(i, p.size()) ret += p[i] ^ p[(i+1)%p.size()] / 2;\n        return abs(ret);\n    }\n\n    bool is_convex(Polygon &p){\n        int n = p.size();\n        bool flag1 = false, flag2 = false;\n        rep(i, n){\n            int tmp = ccw(p[(i+n-1)%n], p[i], p[(i+1)%n]);\n            if(tmp == CCW_COUNTER_CLOCKWISE){\n                if(flag2) return false;\n                flag1=true;\n            }\n            else if(tmp == CCW_CLOCKWISE){\n                if(flag1) return false;\n                flag2 = true;\n            }\n        }\n        return true;\n    }\n\n    int point_in_polygon(Point a, Polygon &p){\n        int n = p.size(), wn = 0;\n        rep(i, n){\n            int j = (i+1) % n;\n            if(distance_sp(p[i], p[j], a) == 0) return 1;\n            else if(p[i].y <= a.y && a.y < p[j].y){\n                wn += (ccw(a, p[i], p[j]) == CCW_COUNTER_CLOCKWISE);\n            }\n            else if(p[j].y <= a.y && a.y < p[i].y){\n                wn -= (ccw(a, p[i], p[j]) == CCW_CLOCKWISE);\n            }\n        }\n        return wn == 0 ? 0 : 2;\n    }\n\n    Polygon convex_hull(Points p){\n        int n = p.size();\n        sort(p.begin(), p.end());\n        Polygon ch(2*n);\n        int k = 0;\n        rep(i, n){\n            while(k>1 && le((ch[k-1]-ch[k-2])^(p[i]-ch[k-1]), 0)) --k;\n            ch[k++] = p[i];\n        }\n        for(int i=n-2, t=k; i>=0; --i){\n            while(k>t && le((ch[k-1]-ch[k-2])^(p[i]-ch[k-1]), 0)) --k;\n            ch[k++] = p[i];\n        }\n        ch.resize(k-1);\n        return ch;\n    }\n\n    int has_intersection_cc(Point c1, real_num r1, Point c2, real_num r2){\n        if(r1 < r2){\n            swap(c1, c2);\n            swap(r1, r2);\n        }\n        real_num d = abs(c1-c2), r = r1 + r2;\n        if(ge(d, r)) return 4;\n        if(eq(d, r)) return 3;\n        if(eq(d+r2, r1)) return 1;\n        if(le(d+r2, r1)) return 0;\n        return 2;\n    }\n\n    bool has_intersection_cl(Point c, real_num r, Point a, Vec v){\n        return leq(distance_lp(a, v, c), r);\n    }\n\n    bool has_intersection_cs(Point c, real_num r, Point a, Point b){\n        return leq(distance_sp(a, b, c), r) && geq(max(abs(a-c), abs(b-c)), r);\n    }\n\n    Points intersection_cl(Point c, real_num r, Point a, Vec v){   \n        Points ps;\n        if(!has_intersection_cl(c, r, a, v)) return ps;\n        Point p = proj(a, v, c);\n        real_num t = sqrt(max((real_num)0.0, (r*r-norm(p-c)) / norm(v)));\n        ps.push_back(p + v*t);\n        if(!eq(t, 0)) ps.push_back(p - v*t);\n        return ps;\n    }\n\n    Points intersection_cc(Point c1, real_num r1, Point c2, real_num r2){\n        Points ps;\n        Vec v = c2-c1, w = {v.y*-1, v.x};\n        real_num d = abs(v);\n        real_num x = (d*d + r1*r1 - r2*r2) / (2*d);\n        real_num y = sqrt(max(r1*r1-x*x, (real_num)0.0));\n        ps.push_back(c1 + v*x/d + w*y/d);\n        if(has_intersection_cc(c1, r1, c2, r2)!=2) return ps;\n        ps.push_back(c1 + v*x/d - w*y/d);\n        return ps;\n    }\n\n    real_num commn_area_cc(Point c1, real_num r1, Point c2, real_num r2){\n        int flag = has_intersection_cc(c1, r1, c2, r2);\n        if(flag >= 3) return 0;\n        if(flag <= 1){\n            real_num r = min(r1, r2);\n            return PI*r*r;\n        }\n        real_num d = abs(c1-c2);\n        real_num ret = 0;\n        rep(i, 2) {\n            real_num x = (d*d + r1*r1 - r2*r2) / (2*d);\n            real_num t = acos(x/r1)* 2;\n            ret += (t-sin(t))*r1*r1/2;\n            swap(c1, c2);\n            swap(r1, r2);\n        }\n        return ret;\n    }\n\n    Points tangent(Point c, real_num r, Point p){\n        Points ps;\n        real_num d = abs(p-c);\n        real_num t = acos(r/d);\n        ps.push_back(c + rot(p-c, t)*r/d);\n        ps.push_back(c + rot(p-c, -t)*r/d);\n        return ps;\n    }\n\n    Points common_tangent(Point c1, real_num r1, Point c2, real_num r2){       \n        Points ps;\n        int flag = has_intersection_cc(c1, r1,c2, r2);\n        if(flag >= 2){\n            real_num d = abs(c2-c1);\n            real_num t = acos(abs(r1-r2)/d);\n            if(le(r1, r2)) t = PI-t;\n            ps.push_back(c1 + rot(c2-c1, t)*r1/d);\n            ps.push_back(c1 + rot(c2-c1, -t)*r1/d);\n        }\n        if(flag == 4){\n            real_num d = abs(c2-c1);\n            real_num L = d*r1/(r1+r2);\n            real_num t = acos(r1/L);\n            ps.push_back(c1 + rot(c2-c1, t)*r1/d);\n            ps.push_back(c1 + rot(c2-c1, -t)*r1/d);\n        }\n        if(flag == 3 || flag == 1){\n            Polygon tg = intersection_cc(c1, r1, c2, r2);\n            ps.push_back(tg[0]);\n        }\n        return ps;\n    }\n\n    Point get_o(Point a, Point b, Point c){\n        Point M = (a+b)/2, N = (a+c)/2;\n        Vec v = {-(b-a).y, (b-a).x}, w = {-(c-a).y, (c-a).x};\n        return intersection_ll(M, v, N, w);\n    }\n\n    Point get_i(Point a, Point b, Point c){\n        real_num A = abs(b-c), B = abs(c-a), C = abs(a-b);\n        return (a*A+b*B+c*C)/(A+B+C);\n    }\n\n    Point get_h(Point a, Point b, Point c){\n        Vec v = {-(c-b).y, (c-b).x}, w = {-(c-a).y, (c-a).x};\n        return intersection_ll(a, v, b, w);\n    }\n\n    pair<Point, real_num> minimum_bounding_circle(Points &p){\n        Point C;\n        real_num r;\n        if(p.size() == 1) C = p[0], r = 0;\n        else if(p.size() == 2) C = (p[0]+p[1])/2, r = abs(p[0]-C);\n        else{\n            r = INF;\n            Points ch = convex_hull(p);\n            int K = ch.size();\n            auto check = [&](Point tc, real_num tr){\n                rep(i, K){\n                    if(ge(abs(ch[i]-tc), tr)) return false;\n                }\n                return true;\n            };\n            rep(i, K)For(j, i+1, K){\n                Point tc = (ch[i]+ch[j])/2;\n                real_num tr = abs(ch[i]-tc);\n                if(check(tc, tr) && chmin(r, tr)) C = tc;\n                For(k, j+1, K){\n                    int ccw_flag = ccw(ch[i], ch[j], ch[k]);\n                    if(ccw_flag != CCW_COUNTER_CLOCKWISE && ccw_flag != CCW_CLOCKWISE) continue;\n                    tc = get_o(ch[i], ch[j], ch[k]);\n                    tr = abs(ch[i]-tc);\n                    if(check(tc, tr) && chmin(r, tr)) C=tc;\n                }\n            }\n        }\n        return {C, r};\n    }\n}\n\nusing namespace geo;\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    Polygon p(n);\n    rep(i, n) scanf(\"%lf%lf\", &p[i].x, &p[i].y);\n\n    int q;\n    scanf(\"%d\", &q);\n    rep(_, q){\n        Point a;\n        scanf(\"%lf%lf\", &a.x, &a.y);\n        printf(\"%d\\n\", point_in_polygon(a, p));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\n#define ROUND_PRINT(N,val) cout << fixed;cout << setprecision(N) << val << endl\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\n\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) < eps) : ((x - e.x) < eps);\n  }\n  bool operator >(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) > eps) : ((x - e.x) > eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nstatic bool cmp_rad(const P &p1,const P &p2){\n    return atan2(p1.y,p1.x) > atan2(p2.y,p2.x);\n}\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\n\nint main(void) {\n  Plane pl;\n  int n,q,n2;\n  P a;\n  cin >> n;\n  vector<P> point(n);\n  REP(i,n) cin >> point[i].x >> point[i].y;\n  cin >> q;\n  REP(i,q) {\n    cin >> a.x >> a.y;\n    P tmp = P(10001.0,a.y+0.1);\n    LL cnt = 0;\n    bool flg = false;\n    REP(i,n-1) {\n      if (pl.on_seq(point[i],point[i+1],a)) flg = true;\n      if (pl.have_intersection(tmp,a,point[i],point[i+1])) {\n        cnt++;\n        if ((point[i]-point[i+1]).is_parallel(tmp-a)) cnt--;\n      }\n    }\n\n    if (pl.on_seq(point[0],point[n-1],a)) flg = true;\n    if (pl.have_intersection(tmp,a,point[0],point[n-1])) {\n      cnt++;\n      if ((point[0]-point[n-1]).is_parallel(tmp-a)) cnt--;\n    }\n    \n    if (flg) cout << 1 << endl;\n    else if(cnt%2) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#include <vector>\n#include <stack>\n#include <queue>\n#define ESP (1e-13)\n#define INF 2000000000\nusing namespace std;\n\n//??§?¨????????§???????\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(const Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(const double& a) {\n\t\treturn Point(x*a, y*a);\n\t}\n\n\tPoint operator/(const double& a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tPoint operator=(const Point& p1) {\n\t\treturn Point(p1.x,p1.y);\n\t}\n\n};\n\n//??´??§?????????????§???????\ntypedef Point Vector;\n\n//??´???????§???????\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n\tLine operator=(const Line& l) {\n\t\treturn Line(l.p1, l.p2);\n\t}\n};\n\n //??????????§???????\n typedef Line Segment;\n\n //???????§???????\n struct Circle {\n\t Point c;\n\t double r;\n\t Circle(){ }\n\t Circle(const Point& p,const double& r) : c(p),r(r) { }\n };\n\n//2??????????????¢????±?????????¢??°\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\n//????????¢??°\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\n//????????¢??°\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\n//3??????????????¢???????±?????????¢??°\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\n//??????????????´????????????????°???±?????§?¨?????±?????????¢??°\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble x = abs(base, Point(0.0, 0.0))*abs(base, Point(0.0, 0.0));\n\tdouble r = product(p - s.p1, base) / x;\n\treturn s.p1 + base*r;\n}\n\n//????????????????±??????¨??????????????????????§°????????§?¨?????±?????????¢??°\nPoint reflect(Segment s, Point p) {\n\treturn (project(s, p) - p)*2.0 + p;\n}\n\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\n//????????????????????£??????????????????????????¢??°\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??´?????¨???????????¢????±?????????¢??°\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\n//????????¨???????????¢????±?????????¢??°\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < -ESP) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < -ESP) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\n//2??????????????¢????±?????????¢??°\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\n//?????´???????\\???¢????±?????????¢??°\nPoint CrossPoint(Line s1,Line s2) {\n\tdouble d1=DistanceLP(s2, s1.p1);\n\tdouble d2 = DistanceLP(s2, s1.p2);\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//?????¨??´?????????????????????????????¢??°\nbool intersect(Circle c, Line l) {\n\treturn DistanceLP(l, c.c) < c.r;\n}\n\n//?????¨??´????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c, Line l) {\n\tVector prpr = project(l, c.c);\n\tVector hshs = (l.p2 - l.p1)/abs(l.p2 ,l.p1);\n\tdouble base = sqrt(c.r*c.r - abs(c.c, prpr)*abs(c.c, prpr));\n\treturn make_pair(prpr - hshs*base, prpr + hshs*base);\n}\n\n//????§???¨?\\?\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r)*a, sin(r)*a); }\n\n//?????¨????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c ,c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d)); //????????????\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//2??´??????????????¢???????±?????????¢??°???\n   //??´?????????\nbool isOrth(Vector a, Vector b) {\n\treturn abs(product(a, b)) < ESP;\n   }\nbool isOrth(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrth(a1 - a2, b1 - b2);\n}\nbool isOrth(Segment s1, Segment s2) {\n\treturn isOrth(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n    //????????????\nbool isPara(Vector a, Vector b) {\n\treturn abs(cross(a, b)) < ESP;\n}\nbool isPara(Point a1, Point a2, Point b1, Point b2) {\n\treturn isPara(a1 - a2, b1 - b2);\n}\nbool isPara(Segment s1, Segment s2) {\n\treturn isPara(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tPoint g[100];\n\tfor (int i = 0;i < n;i++) {\n\t\tcin >> g[i].x;\n\t\tcin >> g[i].y;\n\t}\n\tSegment s[100];\n\tfor (int j = 0;j < n;j++) {\n\t\tint k = (j + 1) % n;\n\t\ts[j].p1.x = g[j].x; s[j].p1.y = g[j].y;\n\t\ts[j].p2.x = g[k].x; s[j].p2.y = g[k].y;\n\t}\n\tPoint p;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tint flag = 0;\n\t\tcin >> p.x; cin >> p.y;\n\t\tSegment ps;\n\t\tps.p1.x = p.x; ps.p1.y = p.y;\n\t\tps.p2.x = 10001; ps.p2.y = p.y;\n\t\tfor (int j = 0;j < n;j++) {\n\t\t\tif (ccw(g[j], g[(j + 1) % n], p) == 0) {\n\t\t\t\tcout << 1 << endl;\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tint cnt = 0;\n\t\t\tp.x += 0.1;p.y += 0.1;\n\t\t\tfor (int j = 0;j < n;j++) {\n\t\t\t\tif (intersect(s[j], ps)) cnt++;\n\t\t\t}\n\t\t\t\n\t\t\tif (cnt % 2 == 1) cout << 2 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst double eps = 1e-8;\nconst double pi = acos(-1.0);\ntypedef long long ll;\nconst int maxp = 110;\nint sgn(double x){\n    if(fabs(x)<eps){\n        return 0;\n    }\n    if(x<0){\n        return -1;\n    }else{\n        return 1;\n    }\n}\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    bool operator < (Point b)const{\n        return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;\n    }\n    bool operator == (Point b)const{\n        return sgn(x-b.x)==0&&sgn(y-b.y)==0;\n    }\n    Point operator -(const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    double operator ^(const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    double distance(Point p){\n        return hypot(x-p.x,y-p.y);\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e){\n        s  = _s;\n        e = _e;\n    }\n    // 这不能判断点是不是在线段区间内，在线段的延长线也满足\n    // bool pointonseg(Point p){\n    //     return sgn((p-s)^(e-s))==0&&sgn((p-s)^(p-e))<=0;\n    // }\n    //1 点在线段的逆时针方向\n    //2 点在线段的顺时针方向\n    //3 点在线段上\n    int relation(Point p){\n        int c = sgn((p-s)^(e-s));\n        if(c < 0){\n            return 1;\n        }else if(c>0){\n            return 2;\n        }else{\n            return 3;\n        }\n    }\n    //4 点在线段上\n    //6 点在线段后面\n    //7 点在线段的前面\n    int pointonseg(Point p){\n        int c = sgn((p-s)^(p-e));\n        if(c<0){\n            return 4;\n        }else{\n            if((p.x-s.x)*(s.x-e.x)>0.0||(p.x==s.x&&(p.y-s.y)*(s.y-e.y)>0.0)){\n                return 6;\n            }else if((p.x-e.x)*(e.x-s.x)>0.0||(p.x==e.x&&(p.y-e.y)*(e.y-s.y)>0.0)){\n                return 7;\n            }else{\n                return 4;\n            }\n        }\n    }\n};\nstruct polygon{\n    int n;\n    Point p[maxp];\n    Line l[maxp];\n    void input(int _n){\n        n = _n;\n        for(int i = 0;i < n;++i ){\n            p[i].input();\n        }\n    }\n    // 给凸包连边\n    void getline(){\n        for(int i = 0;i < n;++i ){\n            l[i] = Line(p[i],p[(i+1)%n]);\n        }\n    }\n    // 点和多边形的关系\n    // 3 点上\n    // 2 边上\n    // 1 内部\n    // 0 外部\n    int relationpoint(Point q){\n        for(int i = 0;i < n;++i ){\n            if(p[i] == q){\n                return 3;\n            }\n        }\n        getline();\n        for(int i = 0;i < n;++i ){\n            // if(l[i].pointonseg(q)){\n            //     return 2;\n            // }\n            if(l[i].relation(q)==3&&l[i].pointonseg(q)==4){\n                return 2;\n            }\n        }\n        int cnt = 0;\n        for(int i = 0;i < n;++i ){\n            int j = (i+1)%n;\n            int k = sgn((q-p[j])^(p[i]-p[j]));\n            int u = sgn(p[i].y-q.y);\n            int v = sgn(p[j].y-q.y);\n            if(k>0&&u<0&&v>=0){\n                cnt++;\n            }\n            if(k<0&&v<0&&u>=0){\n                cnt--;\n            }\n        }\n        return cnt!=0;\n    }\n};\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    polygon pp;\n    pp.input(N);\n    int q;\n    scanf(\"%d\",&q);\n    Point p;\n    while(q--){\n        p.input();\n        int ans = pp.relationpoint(p);\n        if(ans==1){\n            printf(\"2\\n\");\n        }else if(ans == 2 || ans == 3){\n            printf(\"1\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n    }\n  \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db long double\nconst db eps = 0;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > 0) return 1;\n\tif(u.cross(v) < 0) return -1;\n\tif(u.dot(v) < 0) return -2;\n\tif(u.len2() < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nconst int N = 111;\npoi p[N];\n\nint main() {\n\tcout << fixed << setprecision(12);\n\tios :: sync_with_stdio(false);\n\tint n; cin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tp[i].r();\n\tp[n] = p[0];\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r(); poi s = poi{100007, 100009} + t;\n\t\tbool on = false;\n\t\tint inter = 0;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(!ccw(p[i], p[i + 1], t))\n\t\t\t\ton = true;\n\t\t\tif(si(s, t, p[i], p[i + 1])) {\n\t\t\t\tinter ++;\n\t\t\t\t//p[i].w(); p[i + 1].w();\n\t\t\t}\n\t\t}\n\t\tif(on) cout << \"1\\n\";\n\t\telse if(inter & 1) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\n\nnamespace geometry2d {\n\n\t//eps　浮動小数点誤差\n\tconst double EPS = 1e-10;\n\n\t//a > 0ならば+1, a == 0ならば0, a < 0ならば-1　を返す。　基本的にEPS込みの評価はこれで行う。\n\t//不等式は、加減算に直してこれに適用する。\n\tint sgn(const double a) {\n\t\treturn (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n\t}\n\n\tstruct Point {\n\t\t//2次元ベクトルのクラス\n\n\t\tdouble x, y;\n\t\tPoint(double _x, double _y) {\n\t\t\tx = _x, y = _y;\n\t\t}\n\t\tPoint() {\n\t\t\tx = 0, y = 0;\n\t\t}\n\n\t\tPoint operator+() const {\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-() const {\n\t\t\treturn{ -x, -y };\n\t\t}\n\t\tPoint operator+ (const Point& b) const {\n\t\t\treturn{ x + b.x, y + b.y };\n\t\t}\n\t\tPoint operator- (const Point& b) const {\n\t\t\treturn{ x - b.x, y - b.y };\n\t\t}\n\t\tPoint operator* (const double b) const {\n\t\t\treturn{ x * b, y * b };\n\t\t}\n\t\tPoint operator/ (const double b) const {\n\t\t\treturn{ x / b, y / b };\n\t\t}\n\t\tPoint operator+= (const Point& b) {\n\t\t\tx += b.x, y += b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-= (const Point& b) {\n\t\t\tx -= b.x, y -= b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator*= (const double b) {\n\t\t\tx *= b, y *= b;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator/= (const double b) {\n\t\t\tx /= b, y /= b;\n\t\t\treturn *this;\n\t\t}\n\t\tbool operator== (const Point& b) {\n\t\t\treturn b.x == x && b.y == y;\n\t\t}\n\n\t\tdouble lengthSquare() const {\n\t\t\treturn (x * x + y * y);\n\t\t}\n\t\tdouble length() const {\n\t\t\treturn std::sqrt(lengthSquare());\n\t\t}\n\t\tdouble dot(const Point& b) const {\n\t\t\treturn x * b.x + y * b.y;\n\t\t}\n\t\tdouble cross(const Point& b) const {\n\t\t\t//Generally, cross product is vector, but in 2D, cross product is also scalar.\n\t\t\treturn x * b.y - y * b.x;\n\t\t}\n\t\tdouble distanceFrom(const Point& b) const {\n\t\t\treturn std::sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t\t}\n\t\tPoint normalized() const {\n\t\t\treturn{ x / length(), y / length() };\n\t\t}\n\t\tbool isZero() const {\n\t\t\treturn sgn(x) == 0 && sgn(y) == 0;\n\t\t}\n\t\t//単位法線ベクトル\n\t\tPoint normalUnitVector() const {\n\t\t\treturn{ -normalized().y, normalized().x };\n\t\t}\n\t\t//(0, 0)中心にarg(弧度法)回転した座標\n\t\tPoint rotation(double arg) const {\n\t\t\tdouble cs = cos(arg), sn = sin(arg);\n\t\t\treturn Point(x * cs - y * sn, x * sn + y * cs);\n\t\t}\n\t\t//(0, 0)中心の円上に乗ってるとしたときの、偏角\n\t\tdouble angle() const {\n\t\t\treturn atan2(y, x);\n\t\t}\n\t};\n\n\tinline Point operator*(double a, const Point& b) {\n\t\treturn{ b.x * a, b.y * a };\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Point& v)\n\t{\n\t\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_istream<Char>& operator >> (std::basic_istream<Char>& is, Point& v)\n\t{\n\t\treturn is >> v.x >> v.y;\n\t}\n\n\t//幾何ライブラリにおいて、解なしのような状態の時に返される点の値\n\tconst Point error_val = { 114514.0, -191981.0 };\n\n\tinline bool operator==(const Point& a, const Point& b) {\n\t\treturn (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0);\n\t}\n\n\tinline bool operator!=(const Point& a, const Point& b) {\n\t\treturn !(a == b);\n\t}\n\n\t//第一にx, 第二にyを小さい順にソートするためのオーバーロード\n\tinline bool operator<(const Point& a, const Point& b) {\n\t\tif (sgn(a.x - b.x) != 0)return sgn(a.x - b.x) < 0;\n\t\telse return sgn(a.y - b.y) < 0;\n\t}\n\n\t/*\n\t3点A, B, Cの位置関係を返す関数 A, Bがすべて異なった点であるのが前提\n\t//ABから見てBCは左に曲がるのなら +1\n\t//ABから見てBCは右に曲がるのなら -1\n\t//ABC(CBA)の順番で一直線上に並ぶなら +2\n\t//ACB(BCA)の順番で一直線上に並ぶなら 0\n\tBAC(CAB)の順番で一直線上に並ぶなら -2\n\t*/\n\tint iSP(const Point& a, const Point& b, const Point& c) {\n\t\tint flg = sgn((b - a).cross(c - a));\n\t\tif (flg == 1) {\n\t\t\treturn +1;\n\t\t}\n\t\telse if (flg == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t//ABC(CBA)\n\t\t\tif (sgn((b - a).dot(c - b)) > 0)\n\t\t\t\treturn +2;\n\t\t\t//BAC(CAB)\n\t\t\telse if (sgn((a - b).dot(c - a)) > 0)\n\t\t\t\treturn -2;\n\t\t\t//ACB(BCA)　CがA or Bと一致しても、こっちに含まれる。\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\t//角ABCが鋭角なら0、直角なら1、鈍角なら2を返す。\n\tint angletype(const Point& a, const Point& b, const Point& c) {\n\t\tauto v = (a - b).dot(c - b);\n\t\tif (sgn(v) > 0)return 0;\n\t\telse if (sgn(v) == 0)return 1;\n\t\telse return 2;\n\t}\n\n\t//直線に関する操作や判定\n\tnamespace line2d {\n\n\t\t//向きつき直線を想定。Segment\n\t\tstruct Line {\n\n\t\t\t//直線の通る二点。有向直線でないのならば、beginやendに違いはない。\n\t\t\tPoint begin, end;\n\n\t\t\tLine() {\n\t\t\t\tbegin = Point(), end = Point();\n\t\t\t}\n\n\t\t\tLine(const Point& b, const Point& e) {\n\t\t\t\tbegin = b, end = e;\n\t\t\t}\n\n\t\t\t//ax+by+c=0\n\t\t\tLine(const double a, const double b, const double c) {\n\t\t\t\tif (sgn(a) == 0 && sgn(b) == 0) {\n\t\t\t\t\tassert(-1);\n\t\t\t\t}\n\n\t\t\t\tif (sgn(b) == 0) {\n\t\t\t\t\t//ax+c=0になる。\n\t\t\t\t\tbegin = Point(-c / a, 0.0);\n\t\t\t\t\tend = Point(-c / a, 1.0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//y=-(ax+c)/b　傾きは-a/bで、y切片が-c/b\n\t\t\t\t\tbegin = Point(0, -c / b);\n\t\t\t\t\tend = Point(1.0, -(a + c) / b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPoint vec() const {\n\t\t\t\treturn end - begin;\n\t\t\t}\n\n\t\t\tPoint countervec() const {\n\t\t\t\treturn begin - end;\n\t\t\t}\n\n\t\t};\n\n\t\t//半直線なら、Lineと同じだけど、はっきりと区別する。\n\t\ttypedef Line Ray;\n\t\t//線分の場合、Lineと同じものになるが、はっきりと区別する\n\t\ttypedef Line Segment;\n\n\n\t\t//直線の交点を返す。交わってなければ、error_valを返す。\n\t\tPoint lineIntersection(const Line& l1, const Line& l2) {\n\t\t\tif (sgn(l1.vec().cross(l2.vec())) == 0)return error_val;\n\n\t\t\tPoint ret;\n\t\t\tret = l1.begin + l1.vec() *\n\t\t\t\tabs((l2.end - l1.begin).cross(l2.vec()) / l1.vec().cross(l2.vec()));\n\t\t\treturn ret;\n\t\t}\n\n\t\t//線分が共通部分を持つかどうか？と線分の交点を返す。共通部分がない、もしくは交点が一意ではないなら、error_valを返す。\n\t\t//trueなら、共通部分を持つ。falseなら、共通部分を持たない。\n\t\tpair<bool, Point> segmentIntersection(const Segment& s1, const Segment& s2) {\n\n\t\t\tif (iSP(s1.begin, s1.end, s2.begin) * iSP(s1.begin, s1.end, s2.end) <= 0 &&\n\t\t\t\tiSP(s2.begin, s2.end, s1.begin) * iSP(s2.begin, s2.end, s1.end) <= 0) {\n\n\t\t\t\t//平行ならば、交点は定まらない。(完全に重なってるので)\n\t\t\t\tif (s1.vec().cross(s2.vec()) == 0)\n\t\t\t\t\treturn make_pair(true, error_val);\n\t\t\t\telse //そうでないのなら、lineIntersection()で交点を返しておく。\n\t\t\t\t\treturn make_pair(true, lineIntersection(s1, s2));\n\n\t\t\t}\n\t\t\treturn make_pair(false, error_val);\n\t\t}\n\n\n\t\t//点と直線の距離。引数は、点、直線上の2点\n\t\tdouble distanceBetweenPointAndLine(const Point& p, const Line& l) {\n\t\t\treturn abs(l.vec().cross(p - l.begin) / l.vec().length());\n\t\t}\n\n\t\t//点と半直線の距離。引数は、点、半直線(始点から終点方向に延びる)\n\t\tdouble distanceBetweenPointAndRay(const Point& p, const Ray& r) {\n\t\t\t//始点との距離のパターン\n\t\t\tif (sgn((p - r.begin).dot(r.vec())) < 0)\n\t\t\t\treturn r.begin.distanceFrom(p);\n\t\t\treturn abs(r.vec().cross(p - r.begin) / r.vec().length());\n\t\t}\n\n\t\t//点と線分の距離。引数は、点、線分の両端\n\t\tdouble distanceBetweenPointAndSegment(const Point& p, const Segment& s) {\n\t\t\tif (sgn(s.vec().dot(p - s.begin)) < 0 || sgn(s.countervec().dot(p - s.end)) < 0) {\n\t\t\t\t//下した垂線は線分の上にはない\n\t\t\t\treturn min(p.distanceFrom(s.begin), p.distanceFrom(s.end));\n\t\t\t}\n\t\t\treturn distanceBetweenPointAndLine(p, s);\n\t\t}\n\n\t\t//二線分間の距離\n\t\tdouble distanceBetweenSegmentAndSegment(const Segment& s1, const Segment& s2) {\n\t\t\tif (segmentIntersection(s1, s2).first)return 0;//交点を持つ\n\n\t\t\tdouble ans = distanceBetweenPointAndSegment(s1.begin, s2);\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s1.end, s2));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.begin, s1));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.end, s1));\n\t\t\treturn ans;\n\t\t}\n\n\t\t//正射影\n\t\t//引数は点A, B, Cで、BAベクトルの直線BC上の正射影を求める。\n\t\tPoint projection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = l.begin +\n\t\t\t\tl.vec().normalized() * (a - l.begin).dot(l.vec()) / l.vec().length();\n\t\t\treturn ret;\n\t\t}\n\n\t\t//鏡映変換。引数は点A, B, Cで、直線BCにおいて、Aと線対称な点を求める。\n\t\tPoint reflection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = a + 2 * (projection(a, l) - a);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tnamespace circle2d {\n\n\t\tstruct Circle {\n\t\t\tPoint o;\n\t\t\tdouble r;\n\n\t\t\tCircle() {\n\t\t\t\to = Point();\n\t\t\t\tr = 0;\n\t\t\t}\n\n\t\t\tCircle(const Point& C, const double& R) {\n\t\t\t\to = C, r = R;\n\t\t\t}\n\t\t};\n\n\t\t//直線と円の交点を返す。\n\t\t//存在しないのならば、空のvectorになる。\n\t\tvector<Point> intersectionCircleAndLine(const Circle& c, const line2d::Line& l) {\n\t\t\t//交点を持たない\n\t\t\tif (sgn(line2d::distanceBetweenPointAndLine(c.o, l) - c.r) > 0) {\n\t\t\t\treturn vector<Point>();\n\t\t\t}\n\t\t\telse if (sgn(line2d::distanceBetweenPointAndLine(c.o, l)) == 0) {\n\t\t\t\t//中心を通るなら\n\t\t\t\tvector<Point> ret;\n\t\t\t\tret.push_back(c.o + l.vec().normalized() * c.r);\n\t\t\t\tret.push_back(c.o - l.vec().normalized() * c.r);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t//垂線の足\n\t\t\t\tPoint H = line2d::projection(c.o, l);\n\t\t\t\tvector<Point> ret;\n\n\t\t\t\tret.push_back(\n\t\t\t\t\tH + (c.o - H).normalUnitVector() *\n\t\t\t\t\tsqrt(max(0.0, pow(c.r, 2) - pow(line2d::distanceBetweenPointAndLine(c.o, l), 2)))\n\t\t\t\t);\n\t\t\t\tret.push_back(\n\t\t\t\t\tH - (c.o - H).normalUnitVector() *\n\t\t\t\t\tsqrt(max(0.0, pow(c.r, 2) - pow(line2d::distanceBetweenPointAndLine(c.o, l), 2)))\n\t\t\t\t);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\n\t\t//線分と円の交点を返す。1つ目のbool値は,trueなら交わっている。\n\t\t//交点はたかだか2つであり、1つしか交点を持たない場合は同じものを2つ返す。\n\t\tvector<Point> intersectionCircleAndSegment(const Circle& c, const line2d::Segment& s) {\n\t\t\tauto tmp = intersectionCircleAndLine(c, s);\n\t\t\tvector<Point> ret;\n\t\t\tfor (int i = 0; i < tmp.size(); i++) {\n\t\t\t\tif (sgn(line2d::distanceBetweenPointAndSegment(tmp[i], s)) == 0)\n\t\t\t\t\tret.push_back(tmp[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/*2つの円の位置関係を返す。交点を持つのなら、その交点も返す。\n\t\t1つ目のintの意味は下の通り\n\t\t円AがBを内包してる。+1\n\t\t円BがAを内包してる。-1\n\t\t円AとBは内接してる。0\n\t\t円AとBは2つの交点を持つ。+2\n\t\t円AとBは外接してる。+3\n\t\t円AとBは交わらない+4\n\t\t交点が存在しないのなら、error_val2つが返される。\n\t\t*/\n\t\tpair<int, vector<Point>> intersectionCircleAndCircle(const Circle& c1, const Circle& c2) {\n\t\t\tPoint d = c2.o - c1.o;\n\t\t\tvector<Point> ret;\n\t\t\tint mode;\n\n\t\t\t//遠すぎて交点を持たない or　内包してる\n\t\t\tif (sgn(d.length() - c1.r - c2.r) > 0 || sgn(d.length() - abs(c1.r - c2.r)) < 0) {\n\t\t\t\tif (sgn(d.length() - c1.r - c2.r) > 0)mode = +4;\n\t\t\t\telse {\n\t\t\t\t\tif (sgn(c1.r - c2.r) > 0)mode = +1;\n\t\t\t\t\telse mode = -1;\n\t\t\t\t}\n\t\t\t\treturn make_pair(mode, ret);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (sgn(d.length() - c1.r - c2.r) == 0)mode = +3;\n\t\t\t\telse if (sgn(d.length() - (c1.r + c2.r)) < 0 &&\n\t\t\t\t\tsgn(d.length() - abs(c1.r - c2.r)) > 0)mode = +2;\n\t\t\t\telse mode = 0;\n\t\t\t}\n\t\t\tdouble AH = (pow(c1.r, 2) - pow(c2.r, 2) + d.lengthSquare()) / (2.0 * d.length());\n\t\t\tdouble CH = sqrt(max(0.0, pow(c1.r, 2) - pow(AH, 2)));\n\n\t\t\tret.push_back(c1.o + d.normalized() * AH + d.normalUnitVector() * CH);\n\t\t\tif (mode != 0 && mode != +3)\n\t\t\t\tret.push_back(c1.o + d.normalized() * AH - d.normalUnitVector() * CH);\n\t\t\treturn make_pair(mode, ret);\n\t\t}\n\n\t\t//与えられた点を通る円の接線の円上の点を(2つ)返す。接する場合は同じのを2つ返す。\n\t\t//円の内部に点があるのなら、error_valを2つ返す。\n\t\tvector<Point> tangentToCircle(const Point& p, const Circle& c) {\n\t\t\tif (sgn(c.o.distanceFrom(p) - c.r) < 0) {\n\t\t\t\t//円の内部にある\n\t\t\t\treturn vector<Point>();\n\t\t\t}\n\t\t\treturn intersectionCircleAndCircle(c,\n\t\t\t\tCircle(p,\n\t\t\t\t\tsqrt(max(0.0, (p - c.o).lengthSquare() - pow(c.r, 2))))\n\t\t\t).second;\n\t\t}\n\n\t\tvector<geometry2d::line2d::Line> tangentBetweenCircleAndCircle(const Circle& c1, const Circle& c2) {\n\t\t\tvector<geometry2d::line2d::Line> ret;\n\t\t\tif (sgn(abs(c1.r - c2.r) - (c1.o - c2.o).length()) > 0) {\n\t\t\t\t//包含関係にある\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\tdouble d = (c1.o - c2.o).length();\n\t\t\tfor (double s : {-1.0, 1.0}) {\n\t\t\t\t//外接or内接してるのなら\n\t\t\t\tif (d == abs(c1.r + c2.r * s)) {\n\t\t\t\t\tgeometry2d::line2d::Line tmp;\n\t\t\t\t\ttmp.begin = c1.o +\n\t\t\t\t\t\t(sgn(c1.r + c2.r * s) >= 0 ?\n\t\t\t\t\t\t(c2.o - c1.o).normalized() * c1.r :\n\t\t\t\t\t\t\t(c1.o - c2.o).normalized() * c1.r\n\t\t\t\t\t\t\t);\n\t\t\t\t\ttmp.end = tmp.begin + (c2.o - c1.o).normalUnitVector();//適当にその向きでもう1点を取ってる\n\t\t\t\t\tret.push_back(tmp);\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t\telse if (sgn(d - (c1.r + c2.r * s)) > 0) {\n\t\t\t\t\tdouble cs = (c1.r + c2.r * s) / d;//cos\n\t\t\t\t\tdouble sn = sqrt(max(0.0, 1 - cs * cs));//sin\n\t\t\t\t\tPoint U = (c2.o - c1.o).normalized(), V = U.normalUnitVector();\n\t\t\t\t\tU *= cs, V *= sn;\n\t\t\t\t\tgeometry2d::line2d::Line tmp1, tmp2;\n\t\t\t\t\ttmp1 = geometry2d::line2d::Line(c1.o + (U + V) * c1.r, c2.o - (U + V) * c2.r * s);\n\t\t\t\t\ttmp2 = geometry2d::line2d::Line(c1.o + (U - V) * c1.r, c2.o - (U - V) * c2.r * s);\n\t\t\t\t\tret.push_back(tmp1), ret.push_back(tmp2);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t}\n\n\t//多角形の頂点は反時計回りで与えるように\n\tnamespace polygon2d {\n\t\t\n\t\ttypedef vector<Point> Polygon;//リネーム\n\n\t\t//点集合から凸包を作る。参照渡しをする。\n\t\t//凸包の頂点にならない点も含む->f==true\n\t\t//反時計回りとなってる。\n\t\tvector<Point> convexHull(vector<Point>& p, bool f) {\n\n\t\t\t\n\t\t\tsort(p.begin(), p.end());\n\t\t\t\n\t\t\tvector<Point> ret(2 * p.size());\n\t\t\tint k = 0;//凸包のサイズ\n\t\t\t\n\t\t\t//下側凸包の構築\n\t\t\tfor (int i = 0; i < p.size(); i++) {\n\t\t\t\twhile (k > 1 &&\n\t\t\t\t\t((!f && iSP(ret[k - 2], ret[k - 1], p[i]) != +1) ||\n\t\t\t\t\t(f && iSP(ret[k - 2], ret[k - 1], p[i]) == -1)))k--;\n\t\t\t\tret[k] = p[i];\n\t\t\t\tk++;\n\t\t\t}\n\n\t\t\t//上側凸包の構築\n\t\t\tfor (int i = p.size() - 2, t = k; i >= 0; i--) {\n\t\t\t\twhile (k > t &&\n\t\t\t\t\t((!f && iSP(ret[k - 2], ret[k - 1], p[i]) != +1) ||\n\t\t\t\t\t(f && iSP(ret[k - 2], ret[k - 1], p[i]) == -1)))k--;\n\t\t\t\tret[k] = p[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tret.resize(k - 1);//最後の戻った始点のWカウント防止\n\t\t\treturn ret;\n\t\t}\n\n\t\t//任意の多角形の面積を求める。退化した場合でもできる\n\t\tdouble polygonArea(const Polygon& p) {\n\t\t\tdouble ret = 0;\n\t\t\tfor (int i = 0; i < p.size(); i++) {\n\t\t\t\tret += p[i].cross(p[(i + 1) % p.size()]);\n\t\t\t}\n\t\t\treturn ret / 2.0;\n\t\t}\n\n\t\t//点が多角形に包含されてるか？\n\t\t//0->包含されてない\n\t\t//1->包含されてる\n\t\t//2->辺上に包含されてる\n\t\tint enclose(const Polygon& pol, const Point& poi) {\n\t\t\tint cnt = 0;\n\t\t\tfor (int i = 0; i < pol.size(); i++) {\n\t\t\t\tPoint u = pol[i] - poi, v = pol[(i + 1) % pol.size()] - poi;\n\n\t\t\t\tif (sgn(u.cross(v)) == 0 && sgn(u.dot(v)) <= 0) {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (sgn(u.y - v.y) > 0)swap(u, v);\n\t\t\t\tif (sgn(u.y) <= 0 && sgn(v.y) > 0 && sgn(u.cross(v)) > 0)cnt++;\n\n\t\t\t}\n\t\t\treturn cnt % 2 ? 1 : 0;\n\t\t}\n\n\t\tint enclose2(const Polygon& pol, const Point& poi) {\n\t\t\tline2d::Ray ray(poi, poi + Point(11.4, 5.14)); //適当な方向に半直線を伸ばす\n\t\t\tint cnt = 0;\n\t\t\tfor (int i = 0; i < pol.size(); i++) {\n\t\t\t\tline2d::Segment s(pol[i], pol[(i + 1) % pol.size()]);\n\n\t\t\t\tif (sgn(line2d::distanceBetweenPointAndSegment(poi, s)) == 0) {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\n\t\t\t\t//直線同士ならば、交わってるはずの交点を求める。(仮想交点)\n\t\t\t\tPoint vi = line2d::lineIntersection(s, ray);\n\t\t\t\tif (vi == error_val)continue;\n\t\t\t\t//半直線上にも、線分上にも載っていて、かつ線分の両端(多角形の頂点を通ってない)のならば、\n\t\t\t\t//多角形の辺と1回交わるということである。\n\t\t\t\tif (sgn(line2d::distanceBetweenPointAndRay(vi, ray)) == 0 &&\n\t\t\t\t\tsgn(line2d::distanceBetweenPointAndSegment(vi, s)) == 0 &&\n\t\t\t\t\ts.begin != vi && s.end != vi)cnt++;\n\n\t\t\t}\n\t\t\treturn cnt % 2 ? 1 : 0;\n\t\t}\n\n\t\t//encloseの3つ目。非推奨かも\n\t\tint enclose3(const Polygon& pol, const Point& poi) {\n\t\t\tdouble ang = 0;\n\t\t\tfor (int i = 0; i < pol.size(); i++) {\n\n\t\t\t\t//poiは辺上に存在してるか？\n\t\t\t\tif (sgn(line2d::distanceBetweenPointAndSegment(poi, \n\t\t\t\t\tline2d::Segment(pol[i], pol[(i + 1) % pol.size()]))) == 0) {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\n\t\t\t\tPoint u = (pol[i] - poi), v = (pol[(i + 1) % pol.size()] - poi);\n\t\t\t\tdouble ASIN = u.cross(v) / u.length() / v.length();\n\t\t\t\tif (angletype(pol[i], poi, pol[(i + 1) % pol.size()]) == 2) {\n\t\t\t\t\t//鈍角なら\n\t\t\t\t\tdouble tmp = asin(max(-1.0, min(ASIN, 1.0)));\n\t\t\t\t\tif(sgn(tmp) > 0)ang += (acos(-1) - tmp);\n\t\t\t\t\telse ang += (-acos(-1) - tmp);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tang += asin(max(-1.0, min(ASIN, 1.0)));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//ang==0ならば外　ang==2*piならば回ってる\n\t\t\t//誤差を考えて判定境界をpiにした\n\t\t\tif (sgn(ang - acos(-1)) > 0) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse return 0;\n\t\t}\n\n\t\t//重心　三角形に限定しない。\n\t\tPoint centerOfGravity(const Polygon& p) {\n\t\t\tif (p.size() <= 2)return error_val;\n\t\t\tPoint ret;\n\t\t\tfor (int i = 0; i < p.size(); i++) {\n\t\t\t\tPoint u = p[i], v = p[(i + 1) % p.size()];\n\t\t\t\tret += Point((u.x + v.x) / 3, (u.y + v.y) / 3) * u.cross(v);\n\t\t\t}\n\t\t\tdouble S = polygonArea(p);\n\t\t\tcout << S << endl;\n\t\t\tret /= 2.0, ret /= S;\n\t\t\treturn ret;\n\t\t}\n\n\t\t//内心　三角形限定\n\t\tPoint incenter(const Polygon& p) {\n\t\t\tif (p.size() != 3)return error_val;\n\t\t\tPoint a = p[0], b = p[1], c = p[2];\n\t\t\tPoint f, e;\n\n\t\t\tf = b + (c - b) * (b - a).length() / ((b - a).length() + (c - a).length());\n\t\t\te = c + (a - c) * (c - b).length() / ((c - b).length() + (a - b).length());\n\t\t\treturn line2d::lineIntersection(line2d::Line(b, e), line2d::Line(a, f));\n\t\t}\n\n\t\t//外心　三角形限定\n\t\tPoint circumcenter(const Polygon& p) {\n\t\t\tif (p.size() != 3)return error_val;\n\t\t\tPoint a = p[0], b = p[1], c = p[2];\n\n\t\t\tline2d::Line d, e;\n\t\t\td = line2d::Line((b + a) / 2.0, (b + a) / 2.0 + (b - a).normalUnitVector());\n\t\t\te = line2d::Line((c + a) / 2.0, (c + a) / 2.0 + (c - a).normalUnitVector());\n\t\t\treturn line2d::lineIntersection(d, e);\n\t\t}\n\n\t\t//垂心　三角形限定\n\t\tPoint orthocenter(const Polygon& p) {\n\t\t\tif (p.size() != 3)return error_val;\n\t\t\tPoint a = p[0], b = p[1], c = p[2];\n\n\t\t\tPoint d, e;\n\t\t\td = line2d::projection(c, line2d::Line(a, b));\n\t\t\te = line2d::projection(a, line2d::Line(b, c));\n\t\t\treturn line2d::lineIntersection(line2d::Line(d, c), line2d::Line(e, a));\n\t\t}\n\n\t}\n\n}\n\nint main() {\n\tint N;\n\tcin >> N;\n\tvector<geometry2d::Point> p(N);\n\tfor (int i = 0; i < N; i++)cin >> p[i];\n\t\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tgeometry2d::Point xy;\n\t\tcin >> xy;\n\t\tauto ret = geometry2d::polygon2d::enclose(p, xy);\n\t\tif (ret == 0)cout << 0 << endl;\n\t\telse if (ret == 1) cout << 2 << endl;\n\t\telse cout << 1 << endl;\n\t}\n\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <algorithm>\n#include <iomanip>\n#include <set>\n#include <map>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <array>\n#include <functional>\n\nusing namespace std;\n\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define REV(i,n) for(ll (i) = (n) - 1;(i) >= 0;--i)\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {REP(WW,n)cerr << v[WW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,WW,HH) {REP(W_,WW){REP(H_,HH)cerr << v[W_][H_] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 998244353\n\ntypedef long long ll;\ntypedef pair<ll,ll> P;\n//--------geometry original ------------------\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\n#define diff(PP, i) (next(PP, i) - curr(PP, i))\n#define eq(n,m) (abs((n)-(m)) < EPS)\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-8;\nconst double EPS_GIG = 1e-3;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\n\n// 扇型、中心と半径、二つの端点\n// 現在中心角が180未満の前提\nstruct sector {\n\tpoint o;\n\tpoint a, b;\n\tdouble r;\n\tsector(){}\n\tsector(point O, point A, point B, double _r) :o(O), a(A), b(B), r(_r) {}\n};\n\nstruct segment : public array<point, 2> {\n\tsegment(const point &a, const point &b) {\n\t\tat(0) = a;\n\t\tat(1) = b;\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > 2 * PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble x = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(x, y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS)   return +1;       // counter clockwise\n\tif (cross(b, c) + EPS < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\tauto a = s[0] - p;\n\tauto b = s[1] - p;\n\treturn (abs(cross(a, b)) < EPS && dot(a, b) <= EPS); // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n//端点の交差hは考えない\nbool strictIntersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) == -1 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) == -1;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n/*多角形内包判定\nhalf-line crossing method\nOUT:0\nON:1\nIN:2\n*/\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) < EPS && EPS < imag(b) && cross(a, b) > EPS)in = !in;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n/*\nOUT:0\nON:1\nIN:2\n*/\nint contain_sector(const sector &sec, point &p){\n\tif(eq(abs(p - sec.o), sec.r))return 1;\n\tif(intersectSP(segment(sec.o, sec.a), p))return 1;\n\tif(intersectSP(segment(sec.o, sec.b), p))return 1;\n\tif(abs(p - sec.o) + EPS > sec.r)return 0;\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(angle(vec, vecA) + EPS < angle(vecA, vecB) && angle(vec, vecB) + EPS < angle(vecA, vecB))return 2;\n\treturn 0;\n}\n\n//交点\npoint crosspointSS(const segment &l, const segment &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\nvector<point> crosspointCL(const circle &c, const segment &l) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto pro_p = projection(l, c.p);\n\tauto dist = distanceLP(l, c.p);\n\tif(abs(dist - c.r) < EPS){\n\t\tret[0] = pro_p;\n\t\treturn ret;\n\t}\n\tif(c.r < dist){\n\t\treturn ret;\n\t}\n\tpoint vec = (l[1] - l[0]) * sqrt(c.r * c.r - dist * dist) / abs(l[1] - l[0]);\n\tret[0] = pro_p + vec;\n\tret[1] = pro_p - vec;\n\treturn ret;\n}\n\nvector<point> crosspointCC(const circle c1, const circle c2) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto dist = abs(c2.p - c1.p);\n\tif(eq(dist, c1.r + c2.r) || eq(dist, abs(c2.r - c1.r))){\n\t\tauto tmp = c2.p - c1.p;\n\t\tret[0] = c1.p + tmp * (c1.r / dist);\n\t\treturn ret;\n\t}\n\tif(c1.r + c2.r < dist || dist < abs(c1.r - c2.r)){\n\t\treturn ret;\n\t}\n\tauto alpha = acos((c1.r * c1.r + dist * dist - c2.r * c2.r) / (2 * c1.r * dist));\n\tauto theta = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n\tret[0] = c1.p + point(cos(theta + alpha) * c1.r, sin(theta + alpha) * c1.r);\n\tret[1] = c1.p + point(cos(theta - alpha) * c1.r, sin(theta - alpha) * c1.r);\n\treturn ret;\n}\n\nbool isOnSector(const sector sec, const point p) {\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(eq(angle(vec, vecA) + angle(vec, vecB), angle(vecA, vecB)))return true;\n\treturn false;\n}\n\nvector<point> crosspointSecS(const sector sec, const segment s) {\n\tcircle c = circle(sec.o, sec.r);\n\tauto ret = crosspointCL(c, s);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(eq(ret[i], inf))continue;\n\t\tif(!isOnSector(sec, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!intersectSP(s, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\nvector<point> crosspointSecSec(const sector sec1, const sector sec2) {\n\tcircle c1 = circle(sec1.o, sec1.r);\n\tcircle c2 = circle(sec2.o, sec2.r);\n\tauto ret = crosspointCC(c1, c2);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(!isOnSector(sec1, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!isOnSector(sec2, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tfor (int i = n-2, t = k+1;i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n//見えるか(可視グラフ用)\nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a + b) * 0.5;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= EPS) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//凸包判定\nbool isConvex(vector<point> poly){\n\tint sz = poly.size();\n\tREP(i,sz){\n\t\tif(ccw(poly[i],poly[(i+1)%sz],poly[(i+2)%sz]) == -1)return false;\n\t}\n\treturn true;\n}\n\ndouble convex_diameter(const vector<point> &pt) {\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(pt[i]) > imag(pt[is])) is = i;\n    if (imag(pt[i]) < imag(pt[js])) js = i;\n  }\n  double maxd = norm(pt[is]-pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i]-pt[j]) > maxd) {\n      maxd = norm(pt[i]-pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}\n\nvector<point> convex_cut(const vector<point> P, const segment& l) {\n  vector<point> Q;\n  for (int i = 0; i < P.size(); ++i) {\n    point A = curr(P, i), B = next(P, i);\n    if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n    if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n      Q.push_back(crosspointSS(segment(A, B), l));\n  }\n  return Q;\n}\n\npoint max_circle_size_in_polygon_check(double mid, vector<point> &v){\n\tll n = v.size();\n\tvector<point> now(v);\n\tREP(i, n){\n\t\tauto a = v[i];\n\t\tauto b = v[(i+1)%n];\n\t\tauto vec = b - a;\n\t\tvec /= abs(vec);\n\t\tvec *= mid;\n\t\tvec = rotate(vec, PI/2);\n\t\tsegment seg = segment(a + vec, b + vec);\n\t\tnow = convex_cut(now, seg);\n\t}\n\treturn (now.empty() ? point(INF, INF): now[0]);\n}\n\n// 凸多角形に入る最大の円\ncircle max_circle_size_in_polygon(vector<point> &v){\n\tdouble l = 0;\n\tdouble r = convex_diameter(v);\n\tpoint ret;\n\tREP(_, 1000){\n\t\tif(abs(l - r) < EPS)break;\n\t\tdouble mid = (l + r) / 2;\n\t\tret = max_circle_size_in_polygon_check(mid, v);\n\t\tif(ret != point(INF, INF))l = mid;\n\t\telse r = mid;\n\t}\n\treturn circle(ret, l);\n}\n\ncircle circumscribed_circle(vector<point> p) {\n\tsegment seg_a = segment((p[1] + p[0]) * 0.5,\n\t(p[1] + p[0]) * 0.5 + (p[1] - p[0]) * point(0, 1));\n\tsegment seg_b = segment((p[2] + p[1]) * 0.5,\n\t(p[2] + p[1]) * 0.5 + (p[2] - p[1]) * point(0, 1));\n\tcircle ret;\n\tret.p = crosspointSS(seg_a, seg_b);\n\tret.r = distancePP(p[0], ret.p);\n\treturn ret;\n}\n\nint main(){\n\tcin.tie(0);cout.tie(0);ios::sync_with_stdio(false);\n\n\tll n;cin >> n;\n\tvector<point> p;\n\tREP(i, n){\n\t\tll x, y;cin >> x >> y;\n\t\tp.EB(x, y);\n\t}\n\n\tll q;cin >> q;\n\tREP(i, q){\n\t\tll x, y;cin >> x >> y;\n\t\tcout << contains(p, point(x, y)) << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\n#include <cstdio>\n\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define repc(i, s, n) for (int i = (s); i <= (n); i++)\n#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)\n#define rrepc(i, s, n) for (int i = (s); i >= (n); i--)\n#define swap(a, b, type) { type _tmp = a; a = b; b = _tmp; }\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n/*================================================\n\tGeometry\n================================================*/\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment { Point p1, p2; };\ntypedef Segment Line;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0); }\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\ndouble Distance_PP(Point a, Point b) { return (a - b).abs(); }\ndouble Distance_PL(Point p, Line l) { return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs(); }\ndouble Distance_PS(Point p, Segment s) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn Distance_PL(p, s);\n}\ndouble Distance_SS(Segment s1, Segment s2) {\n\tdouble op1, op2, op3, op4, distance;\n\n\tif (intersect(s1, s2)) return 0.0;\n\n\top1 = Distance_PS(s1.p1, s2);\n\top2 = Distance_PS(s1.p2, s2);\n\top3 = Distance_PS(s2.p1, s1);\n\top4 = Distance_PS(s2.p2, s1);\n\n\tdistance = min(op1, op2);\n\tdistance = min(distance, op3);\n\tdistance = min(distance, op4);\n\n\treturn distance;\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\nPoint CrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\npair<Point, Point> CrossPoint(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e * base, pr - e * base);\n}\npair<Point, Point> CrossPoint(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\t/* IN: 2, ON: 1, OUT: 0 */\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b, Point);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nint main()\n{\n\tint n, q, ans;\n\tPoint p;\n\tPolygon g;\n\n\tcin >> n;\n\trep(i, n) {\n\t\tcin >> p.x >> p.y;\n\t\tg.push_back(p);\n\t}\n\tcin >> q;\n\trep(i, q) {\n\t\tcin >> p.x >> p.y;\n\n\t\tans = contains(g, p);\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint n, q, a, b;\n\tint x[102], y[102];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> x[i] >> y[i];\n\n\tx[n] = x[0];\n\ty[n] = y[0];\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> a >> b;\n\n\t\tint t = 2;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif ((x[i] - a) * (y[i + 1] - b) - (x[i + 1] - a) * (y[i] - b) == 0)\n\t\t\t\tt = 1;\n\t\t\telse if ((x[i] - a) * (y[i + 1] - b) - (x[i + 1] - a) * (y[i] - b) < 0) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tcout << t << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <vector>\nusing namespace std;\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() {return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\nvoid swap(Point& a, Point& b) {\n  Point tmp = a;\n  a.x = b.x;\n  a.y = b.y;\n  b.x = tmp.x;\n  b.y = tmp.y;\n}\n\nint contains(Polygon& g, Point& p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; i++) {\n    Point a = g[i] - p, b = g[(i+1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) {\n      swap(a, b);\n    }\n    if (cross(a, b) > EPS && a.y < EPS && b.y > EPS) {\n      x = !x;\n    }\n  }\n  return (x ? 2 : 0);\n}\n\n\nint main() {\n  Polygon poly;\n  int n;\n  cin >> n;\n  poly.resize(n);\n  for (int i = 0; i < n; i++) {\n    cin >> poly[i].x >> poly[i].y;\n  }\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    Point p;\n    cin >> p.x >> p.y;\n    cout << contains(poly, p) << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\n\nPoint a[101];\nint main(){\n    int n;\n    cin>>n;\n    double x,y;\n    rep(i,n){\n        cin>>x>>y;\n        a[i]=Point(x,y);\n    }\n    int q;\n    cin>>q;\n    rep(i,q){\n        cin>>x>>y;\n        Point c(x,y),ex(100000,100000);\n        int sum=0,ans=0;\n        rep(i,n){\n            if(ccw(a[i],a[(i+1)%n],c)==0){\n                ans=1;\n                break;\n            }\n            else{\n                Point s=a[i]-c,t=a[(i+1)%n]-c;\n                if(s.y>t.y) swap(s,t);\n                if(s.y<=0&&t.y>0&&s.det(t)<0) ++sum;\n            }; \n        }\n        if(ans==1) cout<<ans<<endl;\n        else if(sum%2==1) cout<<2<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11; //[-1000:1000]->EPS=1e-8\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\ninline R dat(P o,P a,P b){a-=o,b-=o; return imag(a*b);}\n\nusing L=struct{P s,t;};\ninline P vec(L l){return l.t-l.s;}\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\n// ?????´ ?????? verify AOJ CGL_2_A\nbool vertical(L a, L b) {return sgn(dot(O,vec(a),vec(b)))==0;}\nbool parallel(L a, L b) {return sgn(det(O,vec(a),vec(b)))==0;}\n\n// ????????´????????? \nbool eql(L a,L b){ return (parallel(a,b) && sgn(det(a.s,a.t,b.s))==0);}\n\n// ???????????????verify AOJ CGL_2_B ???????????????????????´??????1,????????´??????0\nbool ill(L a,L b){ return parallel(a,b)==false;}\nbool ils(L l,L s,int end=0){ return sgn(det(l.s,l.t,s.s)*det(l.s,l.t,s.t))<=-end;}\nbool iss(L a,L b,int end=0){\n\tint s1=ccw(a.s,a.t,b.s)|ccw(a.s,a.t,b.t);\n\tint s2=ccw(b.s,b.t,a.s)|ccw(b.s,b.t,a.t);\n\tif(end) return (s1&s2)==(LEFT|RIGHT);\n\treturn (s1|s2)&ON || (s1&s2)==(LEFT|RIGHT);\n}\n\n// ?????? verify AOJ CGL_2_C\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t);\n\tR s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\t\n// ?????¢ verify AOJ CGL_2_D\nR dlp(L l,P p){return abs(det(l.s,l.t,p))/abs(vec(l));}\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn dlp(s,p);\n}\nR dll(L a,L b){return ill(a,b)?0:dlp(a,b.s);}\nR dls(L l,L s){return ils(l,s)?0:min(dlp(l,s.s),dlp(l,s.t));}\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\nusing VP=vector<P>;\n\n// ????§???¢\n// ??¢??? Verify AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0);\n}\n\n// ???????§???¢????????? verify CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(ccw(pol[(i+n-1)%n],pol[i],pol[(i+1)%n])==RIGHT) return false;\n\treturn true;\n}\n\n\n\n// ????§???¢??????????????? ?????? 2 ?????? 1 ???????????? 0???(???????§???¢??????) verify AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==ON) return 1;\n\t\tbool f=(sgn(imag(p-pol[i]))>=0);\n\t\tbool s=(sgn(imag(p-pol[(i+1)%n]))<0);\n\t\tint sign=sgn(imag(pol[(i+1)%n]-pol[i]));\n\t\tbool can=(sgn(sign*det(pol[i],pol[(i+1)%n],p))>0);\n\t\tif(can&&f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n// (a*d-b*c)*b\n/*\ncerr << \"A :\" << real(pol[i]-p)+imag(p-pol[i])/imag(pol[(i+1)%n]-pol[i])*real(pol[(i+1)%n]-pol[i]) << endl;\ncerr << \"B1:\" << det(pol[i],pol[(i+1)%n],p) << endl;\ncerr << \"B2:\" << sgn(imag(pol[(i+1)%n]-pol[i])) << endl;\n*/\n\n// ????§???¢??????????????? ?????? 2 ?????? 1 ???????????? 0???(???????§???¢??????)\n//verify AOJ CGL_3-C\n\n/*\nint in_polygon(VP pol,P p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==ON) return 1;\n\t\tbool can=(sgn(imag((pol[i]-p)*(pol[(i+1)%n]-p)))<=0);\n\t\tbool f=(sgn(imag(p-pol[i]))>=0);\n\t\tbool s=(sgn(imag(p-pol[(i+1)%n]))<0);\n\t\tif(0<sgn(real(pol[i]-p)+imag(p-pol[i])/imag(pol[(i+1)%n]-pol[i])*real(pol[(i+1)%n]-pol[i]))&&f==s) f?res++:res--;\n\t}\n\treturn res?2:0;\n}\n\n//sgn(real(pol[i]-p)*imag(pol[(i+1)%n]-pol[i])+imag(p-pol[i])*real(pol[(i+1)%n]-pol[i])\nA.x*B.y-A.y*B.x\n\n// real(p-pol[i])*imag(pol[(i+1)%n]-pol[i])+imag(p-pol[i])*real(pol[(i+1)%n]-pol[i]);\n\n//(p.X-pol[i].X)*(pol[(i+1)%n].Y-pol[i].Y) < (p.Y-pol[i].Y)* (pol[(i+1)%n].X-pol[i].X)\n//0 < (p.Y-pol[i].Y)* (pol[(i+1)%n].X-pol[i].X) - p.X-pol[i].X*(pol[(i+1)%n].Y-pol[i].Y)\n*/\n\n/*\n// ????§???¢??????????????????(???????§???¢??????) Verify AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.push_back(cross(l,edge));\n\t}\n\tsort(_all(check),cmp);\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/R(2.0);\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_hull Verify AOJ 0063 Verify AOJ CGL_4_A\nVP convex_hull(const VP& pol,int ban=0){\n\tint n=pol.size(),k=0;\n\tsort(_all(pol));\n\tVP res(2*n);\n\n\t//??\\??????while????????????????????? ???????????????????????????????????? >=0 ????????????>0\n\t// down\n\trep(i,n){\n\t\twhile(k>1&&sgn(dot(res[k-1],res[k-2],pol[i]))>-ban) k--;\n\t\tres[k++]=pol[i];\n\t}\n\t// up\n\tint t=k;\n\trrep(i,n-1){\n\t\twhile(k>t&&dot(res[k-1],res[k-2],pol[i])>-ban) k--;\n\t\tres[k++]=pol[i];\n\t}\n\tres.resize(k-1);\n\treturn res;\n}\n\n// ????????????\n// verify AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tif(ccw(l.s,l.t,a)!=RIGHT)res.push_back(a);\n\t\tif((ccw(l.s,l.t,a)|ccw(l.s,l.t,b))==(LEFT|RIGHT)) res.push_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( dot(b,c)/abs(b)/abs(c) );\n  if(cross(a,b)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if(eq(sum,0))return 0;\n  else return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\ndouble polygonArea(const vector<Point>& p) {\n\tint n = p.size();\n\tdouble ret = 0.0;\n\tfor(int i = 0; i < n; ++i) {\n\t\tret += cross(p[i], p[(i+1)%n]);\n\t}\n\n\treturn abs(ret) / 2.0;\n}\n\nbool isConvex(const vector<Point>& p) {\n\tint n = p.size();\n\trep(i, n) {\n\t\tif(ccw(p[i], p[(i+1)%n], p[(i+2)%n]) == -1) return false;\n\t}\n\treturn true;\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(const vector<Point>& v, Point p) {\n\tint n = v.size();\n\tbool flag = false;\n\trep(i, n) {\n\t\tPoint a = v[i] - p, b = v[(i+1)%n] - p;\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a, b) > EPS) flag = !flag;\n\t\tif(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t}\n\n\treturn flag ? 2 : 0;\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l1.a)) < EPS; }\n\nbool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }\n\nbool isIntersectLS(Line l, Seg s) {\n\treturn cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;\n}\n\nbool isIntersectSS(Seg s1, Seg s2) { \n\treturn ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 \n\t\t&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\ndouble distanceLS(Line l, Seg s) {\n\tif (isIntersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.a), distanceLP(l, s.b));\n}\n\ndouble distanceSP(Seg s, Point p) {\n\tif (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);\n\tif (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);\n\treturn distanceLP(Line(s.a, s.b) , p);\n}\n\ndouble distanceSS(Seg s1, Seg s2) {\n    if (isIntersectSS(s1, s2)) return 0.0;\n\treturn min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );\n}\n\n// if isIntersectLL(l1, l2)\nPoint crossPointLL(Line l1, Line l2) {\n\tPoint base = l2.b - l2.a;\n\tdouble d = abs(cross(base, l1.a - l2.a));\n\tdouble d2 = abs(cross(base, l1.b - l2.a));\n\tdouble t = d / (d + d2);\n\treturn l1.a + (l1.b - l1.a) * t;\n}\n\n// if isIntersectLS(l, s)\nPoint crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }\n\n// if isIntersectSS(s1, s2)\nPoint crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }\n\nPoint project(Line l, Point p) {\n\tPoint base = l.b - l.a;\n\tdouble t = dot(base, p-l.a) / dot(base, base);\n\treturn l.a + base * t;\n}\n\nPoint reflect(Line l, Point p) {\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\n\tvector<Point> v(n);\n\trep(i, n) cin >> v[i].x >> v[i].y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tcout << contains(v, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<string>\n#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstring>\n#include<stack>\nusing namespace std;\n#define EPS 1e-10\n#define INF 1000000\n \nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x=_x; y=_y;\n    }\n    Point operator +(const Point p)const{\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point p)const{\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(const double d)const{\n        return Point(x*d,y*d);\n    }\n    bool operator <(const Point &p)const{\n        if(x==p.x) return y<p.y;\n        return x<p.x;\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n\tbool input(){\n\t\tif(cin>>x>>y) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point _a,Point _b){\n        a=_a; b=_b;\n    }\n\tbool input(){\n\t\tif(a.input() && b.input()) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point _c,double _r){\n        c=_c; r=_r;\n    }\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Point p,Point q){\n    return p.x*q.x+p.y*q.y;\n}\n \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n \nint ccw(Point a,Point b,Point c){ //a,b,c,は全て異なる\n\tPoint v1 = Point(b-a);\n\tPoint v2 = Point(c-a);\n    if(cross(v1,v2)>EPS) return +1; //a->b->c が反時計回り\n    if(cross(v1,v2)<-EPS) return -1; //a->b->c が時計回り\n\tif(dot(v1,v2)<-EPS) return +2; //cがa-bより後ろ c<-a->b\n\tif(v1.norm()<v2.norm()) return -2; //cがa-bより前 a->b->c\n    return 0; //cがa-b上 a->c->b\n}\n \nbool intersect_ss(Line l,Line m){\n    return ccw(l.a,l.b,m.a)*ccw(l.a,l.b,m.b)<=0 && ccw(m.a,m.b,l.a)*ccw(m.a,m.b,l.b)<=0;\n}\n \nbool crosspoint_ll(Line l,Line m,Point &p){\n    Point a1,a2,b1,b2;\n    a1 = l.b-l.a; a2 = m.b-m.a;\n    b1 = m.a-l.a; b2 = l.a-m.b;\n    double s1,s2;\n    s1 = cross(a1,b1)/2; s2 = cross(a1,b2)/2;\n    if(s1+s2<EPS) return false; //平行\n    p = Point(m.a.x+a2.x*s1/(s1+s2),m.a.y+a2.y*s1/(s1+s2));\n    return true;\n}\n \nint crosspoint_ss(Line l,Line m,Point &p){\n    if(intersect_ss(l,m)==false) return 0; //交差していない\n    if(crosspoint_ll(l,m,p)==true) return 1;\n\treturn -1; //交点が無限個(平行かつ交差)\n}\n \nint crosspoint_cc(Circle c1,Circle c2,Point &p1,Point &p2){\n    double d,a,t;\n    d = sqrt((c2.c-c1.c).norm());\n\tif(abs(c1.c.x-c2.c.x)<EPS && abs(c1.c.y-c2.c.y)<EPS && abs(c1.r-c2.r)<EPS)\n\t\treturn -1; //2つの円が重なっている\n    if(d<abs(c1.r-c2.r) || c1.r+c2.r<d) return 0; //どちらかが内包している\n    a = acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    t = atan2(c2.c.y-c1.c.y,c2.c.x-c1.c.x);\n    p1 = Point(c1.c.x+c1.r*cos(t+a),c1.c.y+c1.r*sin(t+a));\n    p2 = Point(c1.c.x+c1.r*cos(t-a),c1.c.y+c1.r*sin(t-a));\n    if(abs(p1.x-p2.x)<EPS && abs(p1.y-p2.y)<EPS) return 1; //交点が1つ\n    return 2; //交点が2つ\n}\n\nint contains(Polygon g,Point p){\n\tLine l = Line(p,Point(INF,p.y));\n\tint cnt = 0, n = g.size();\n\tfor(int i=0;i<n;i++){\n\t\tPoint a = g[i]-p;\n\t\tPoint b = g[(i+1)%n]-p;\n\t\tif(ccw(g[i],g[(i+1)%n],p)==0) return 1; //線分上\n\t\tif(a.y>b.y) swap(a,b);\n\t\tif(a.y<=EPS && EPS<b.y && cross(a,b)>EPS) cnt++;\n\t}\n\tif((cnt&1)==1) return 2; //内包している\n\treturn 0; //内包していない\n}\n \nint main(){\n\tPolygon g;\n\tint N,Q;\n\tcin>>N; g.resize(N);\n\tfor(int i=0;i<N;i++){\n\t\tg[i].input();\n\t}\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tPoint p;\n\t\tp.input();\n\t\tprintf(\"%d\\n\",contains(g,p));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "/*\n幾何\nhttps://gist.github.com/zeptometer/3719669\n複素数平面による幾何ライブラリ←もっと短くなる可能生アリ\nhttp://osrehun.hatenadiary.jp/entry/2016/12/31/145827\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing DD=double;\n\n\n#define EPS 1e-10\n#define eq(a,b) (abs( (a) - (b) )<EPS)\nconst DD PI=acosl(-1.0);\nconstexpr DD INF=1LL<<62;\n\n//点\nusing P=complex<DD>;\n//ベクトル\nusing V=P;\n//線分\nstruct Segment{\n    P a,b;\n    Segment()=default;\n    Segment(P a,P b) :a(a),b(b){}\n    Segment(DD ax,DD ay,DD bx,DD by):a(ax,ay),b(bx,by){}\n\n};\n//直線\nusing Line=Segment;\n//円\nstruct Circle{\n    P p;\n    DD r;\n    Circle()=default;\n    Circle(P p,DD r):p(p),r(r){}\n};\nusing Polygon=vector<P>;\n\n//++++++++++++++++基本計算++++++++++++++//\ninline DD torad(const DD &deg){return deg*PI/180;}\ninline DD todeg(const DD &rad){return rad*180/PI;}\n//内積\ninline DD dot(const V &a,const V &b){\n    return real(a*conj(b));\n}\n//外積\ninline DD cross(const V &a,const V &b){\n    return imag(conj(a)*b);\n}\n//ベクトルvを反時計回りにr度回転\ninline V rotate(const V &v,const DD r){\n    return v*V(cos(r),sin(r));\n}\ninline bool xy(const P &a,const P &b){\n    if(real(a)+EPS<=real(b)) return true;\n    if(eq(real(a),real(b)) && imag(a)+EPS<imag(b)) return true;\n    return false;\n}\ninline bool yx(const P &a,const P &b){\n    if(imag(a)+EPS<imag(b)) return true;\n    if(eq(imag(a),imag(b)) && real(a)+EPS<real(b)) return true;\n    return false;\n}\n\n//++++++++++++++++平行や直交+++++++++++++++//\ninline bool isOrthogonal(const V &a,const V &b){\n    return eq(dot(a,b),0.0);\n}\ninline bool isOrthogonal(const Segment &a,const Segment &b){\n    return eq(dot(a.a-a.b,b.a-b.b),0);\n}\ninline bool isParallel(const V &a,const V &b){\n    return eq(cross(a,b),0.0);\n}\ninline bool isParallel(const Segment &a,const Segment &b){\n    return eq(cross(a.a-a.b,b.a-b.b),0);\n}\n//線分a-bに対してcがどの位置にあるか\n//ccwの簡略版 反時計回り:1 時計回り:-1 直線上:0\ninline int ccw(const P &a,const P &b,const P &c){\n    DD cr=cross(b-a,c-a);\n    if(cr>EPS) return 1;\n    if(cr<-EPS) return -1;\n    return 0;\n}\n\n//線分a-bに対してcがどの位置にあるか\n//反時計回り:1　時計回り:-1 直線上(a,b,c:-2 a,c,b:0 c,a,b:2) \ninline int ccwH(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS) return 1;\n    if(cross(b,c)<-EPS) return -1;\n    if(dot(b,c)<-EPS) return 2;\n    if(norm(b)<norm(c)) return -2;\n    return 0;\n}\n\n\n//+++++++++++++++射影+++++++++++++++++++++//\ninline P project(const P &p,const Segment &s){\n    V base=s.b-s.a;\n    DD r=dot(p-s.a,base)/norm(base);\n    return s.a+base*r;\n}\ninline P reflect(const P &p,const Segment &s){\n    return p+(project(p,s)-p)*2.0;\n}\n/*++++++++++点との距離++++++++++++++++++*/\n//点と直線の距離\ninline DD dis(const P &p,const Line &l){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\n//点と線分の距離\ninline DD disPS(const P &p,const Segment &s){\n    if( dot(s.b-s.a,p-s.a)<0.0 ) return abs(p-s.a);\n    if( dot(s.a-s.b,p-s.b)<0.0 ) return abs(p-s.b);\n    return dis(p,s); //点と直線の距離\n}\n\n\n//+++++++++++++++線分と直線+++++++++++++++++//\n\n//線分a-b,c-dは交差するか?\ninline bool intersect(const P &a,const P &b,const P &c,const P &d){\n    return(ccwH(a,b,c)*ccwH(a,b,d)<=0 && ccwH(c,d,a)*ccwH(c,d,b)<=0);\n}\n//線分s,tは交差するか？\ninline bool intersect(const Segment &s,const Segment &t){\n    return intersect(s.a,s.b,t.a,t.b);\n}\n//線分と線分の交点\n//これをやる前にintersectで判定\ninline P crossPoint(const Segment &s,const Segment &t){\n    V base=t.b-t.a;\n    DD d1=abs(cross(base,s.a-t.a));\n    DD d2=abs(cross(base,s.b-t.a));\n    DD r=d1/(d1+d2);\n    return s.a+(s.b-s.a)*r;\n}\n//線分と線分の距離\ninline DD dis(const Segment &s,const Segment t){\n    if(intersect(s,t)) return 0.0;\n    return min(min(disPS(t.a,s),disPS(t.b,s)),min(disPS(s.a,t),disPS(s.b,t)) );\n}\n\n//+++++++++++円++++++++++++++++//\n\n//円cと直線lの交点\n//abs(l,c.p)<c.r+EPSが必要\npair<P,P> crossPoint(const Line &l,const Circle &c){\n    P pr=project(c.p,l);\n    V e=(l.b-l.a)/(abs(l.b-l.a));\n    DD base=sqrt(c.r*c.r-norm(pr-c.p));\n    return make_pair(pr+e*base,pr-e*base);\n}\n//線分sと円cの交点\nvector<P> crossPointSC(const Segment &s,const Circle &c){\n    vector<P> ret;\n    if(dis(c.p,s)>=c.r+EPS) return ret;\n    auto p=crossPoint(s,c);\n    if(dot(p.first-s.a,s.b-s.a)>0 && dot(p.first-s.b,s.a-s.b)>0) ret.push_back(p.first);\n    if(dot(p.second-s.a,s.b-s.a)>0 && dot(p.second-s.b,s.a-s.b)>0) ret.push_back(p.second);\n    if(xy(s.a,s.b)) sort(ret.begin(),ret.end(),xy);\n    else sort(ret.rbegin(),ret.rend(),xy);\n    return ret;\n}\n\n//共通接線の数\n//離れている:4 外接:3 交わる:2 内接:1 内包:0\ninline int intersect(const Circle &a,const Circle &b){\n    DD d=abs(a.p-b.p);\n    if(d>a.r+b.r+EPS) return 4;\n    if(eq(d,a.r+b.r)) return 3;\n    if(eq(d,abs(a.r-b.r))) return 1;\n    if(d<abs(a.r-b.r)-EPS) return 0;\n    return 2;\n}\n\n//円c1と円c2の交点\n//これを使う前に交点があるかどうかを判定する\nvector<P> crossPoint(const Circle &a,const Circle &b){\n    vector<P> ret;\n    if(abs(a.p-b.p)<a.r+b.r+EPS) return ret;\n    DD d=abs(a.p-b.p);\n    DD s=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n    DD t=arg(b.p-a.p);\n    if(eq(s,0)) ret.emplace_back(a.p+polar(a.r,t+s));\n    else ret.emplace_back(a.p+polar(a.r,t+s)),ret.emplace_back(a.p+polar(a.r,t-s));\n    return ret;\n}\n\n//pがcの外にあるかの判定が必要\nvector<P> TanLine(const P &p,const Circle &c){\n    vector<P> ret;\n    DD d=abs(p-c.p);\n    if(d<=c.r-EPS) return ret;\n    if(eq(d,c.r)){\n        ret.push_back(p);\n        return ret;\n    } \n    return crossPoint(c,Circle(p,sqrt(d*d-c.r*c.r)));\n}\n//https://ei1333.github.io/luzhiled/snippets/geometry/template.html\n//↑すごい。丸写し\n//円c1,c2の共通接線\n//接点をつないで線にしている(１個だけ追加するときに注意)\nvector<Line> TanLine(Circle a,Circle b){\n    vector<Line> ret;\n    if(a.r<b.r) swap(a,b);\n    DD g=abs(a.p-b.p);\n    if(eq(g,0)) return ret;\n    V u=(b.p-a.p)/g;\n    V v=rotate(u,PI*0.5);\n    for(DD s:{-1,1}){\n        DD h=(a.r+s*b.r)/g;\n        if(eq(1-h*h,0)){\n            ret.emplace_back(a.p+u*a.r,a.p+(u+v)*a.r);\n        }else if(1-h*h>0){\n            V uu=u*h,vv=v*sqrt(1-h*h);\n            ret.emplace_back(a.p+(uu+vv)*a.r,b.p-(uu+vv)*b.r*s);\n            ret.emplace_back(a.p+(uu-vv)*a.r,b.p-(uu-vv)*b.r*s);\n        }\n    }\n    return ret;\n}\n\n/*+++++++++++++++++++三角形+++++++++++++++++*/\n//外心\n//isParallel()を使って判定を忘れずに\nP circumcenter(const P &a,const P &b,const P &c){\n    P ab=(a+b)/2.0,bc=(b+c)/2.0;\n    Segment s(ab,ab+polar(1.0,arg(b-a)+PI*0.5));\n    Segment t(bc,bc+polar(1.0,arg(c-b)+PI*0.5));\n    return crossPoint(s,t);\n}\n\n/*+++++++++++++++++++多角形+++++++++++++++++++*/\n//IN:2 ON:1 OUT:0\n//点がどの位置にあるか\nint contains(const P &p,const Polygon &g){\n    int n=(int)g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        V a=g[i]-p,b=g[(i+1)%n]-p;\n        if(eq(cross(a,b),0) && dot(a,b)<EPS) return 1;\n        if(imag(a)>imag(b)) swap(a,b);\n        if(imag(a)<EPS && EPS<imag(b) && cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n//凸性判定\nbool isConvex(const Polygon &g){\n    int n=(int)g.size();\n    int flag=0;\n    int t;\n    for(int i=0;i<n;i++){\n        V a(g[(i+1)%n]-g[i]),b(g[(i+2)%n]-g[i]);\n        if(cross(a,b)>EPS) t=1;\n        else if(cross(a,b)<-EPS) t=-1;\n        else continue;\n        if(flag==-t) return false;\n        flag=t;\n    }\n    return true;\n}\n\n//凸包　アンドリューのアルゴリズム\n//https://github.com/drken1215/algorithm/blob/master/Geometry/All.cpp←螺旋本より早そう\n//j=1:返上の点を含まない　j=-1:含む\n//反時計回りの多角形を返す\n//sはソートされる\nPolygon ConvexHull(Polygon &s,const int j){\n    int sz=(int)s.size();\n    if(sz<3) return s;\n    sort(s.begin(),s.end(),yx);\n\n    int n=0;\n    Polygon res(2*sz);\n    for(int i=0;i<sz;i++){\n        while(n>=2 && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    int t=n+1;\n    for(int i=sz-2;i>=0;i--){\n        while(n>=t && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    res.resize(n-1);\n    return res;\n}\n\n//符号付き面積\n//反時計回りの図形なら正\n//https://imagingsolution.net/math/calc_n_point_area/\nDD Area(const Polygon &g){\n    DD ret=0.0;\n    int n=(int)g.size();\n    for(int i=0;i<n;i++){\n        ret+=cross(g[i],g[(i+1)%n]);\n    }\n    return ret/2.0L;\n}\n\n//反時計回り\n//理解が浅い←大体分かった（本当か？）\nDD Diameter(Polygon g){\n    g=ConvexHull(g,1);\n    int gz=g.size();\n    int m=0,M=0;\n    for(int i=1;i<gz;i++){\n        if(imag(g[i])<imag(g[m])) m=i;\n        if(imag(g[i])>imag(g[M])) M=i;\n    }\n    DD ret=0;\n    int sm=m,sM=M;\n    while(m!=sM || M!=sm){\n        ret=max(ret,norm(g[m]-g[M]));\n        if(cross(g[(m+1)%gz]-g[m],g[(M+1)%gz]-g[M])<0) m=(m+1)%gz;\n        else M=(M+1)%gz;\n    }\n    return sqrt(ret);\n}\n\n//凸多角形gをlで切断\n//l.p1-l.p2の左側\n//gは反時計回り→反時計回りで返す\n//時計回り→時計回り\nPolygon ConvexCut(const Polygon &g,const Line &l){\n    Polygon ret;\n    int gz=(int)g.size();\n    for(int i=0;i<gz;i++){\n        P now=g[i],next=g[(i+1)%gz];\n        if(ccw(l.a,l.b,now)>=0) ret.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,next)<0){\n            ret.push_back(crossPoint(Line(now,next),l));\n        }\n    }\n    return ret;\n}\n\ninline DD calc(const P &a,const P &b,const DD &r,const bool triangle){\n    if(triangle) return cross(a,b);\n    else return r*r*arg(b-a);\n}\n\nDD calcArea(const DD &r,const P &a,const P &b){\n    if(eq(abs(a-b),0)) return 0;\n    bool ina=abs(a)<r+EPS;\n    bool inb=abs(b)<r+EPS;\n    if(ina && inb) return cross(a,b);\n    auto cr=crossPointSC(Segment(a,b),Circle((0,0),r));\n    if(cr.empty()) return calc(a,b,r,false);\n    auto s=cr[0],t=cr.back();\n    return calc(s,t,r,true)+calc(a,s,r,ina)+calc(t,b,r,inb);\n}\n\n//円と多角形の共通部分の面積\n//http://drken1215.hatenablog.com/entry/2020/02/02/091000\nDD Area(const Circle &c,const Polygon &g){\n    DD ret=0.0;\n    int gz=g.size();\n    if(gz<3) return ret;\n    for(int i=0;i<gz;i++){\n        P a=g[i]-c.p,b=g[(i+1)%gz]-c.p;\n        ret+=calcArea(c.r,g[i]-c.p,g[(i+1)%gz]-c.p);\n    }\n    return ret/2.0;\n}\n\n//++++なんか凄いの+++++++++++++++\n\n//最近点対\nDD RecClosetPair(Polygon::iterator it,const int n){\n    if(n<=1) return INF;\n    int m=n/2;\n    DD x=real(it[m]);\n    DD d=min(RecClosetPair(it,m),RecClosetPair(it+m,n-m));\n    inplace_merge(it,it+m,it+n,yx);\n    Polygon v;\n    for(int i=0;i<n;i++){\n        if(abs(real(it[i])-x)>=d) continue;\n        for(int j=0;j<v.size();j++){\n            DD dy=imag(it[i])-imag(v[v.size()-1-j]);\n            if(dy>=d) break;\n            DD dx=real(it[i])-real(v[v.size()-1-j]);\n            d=min(d,sqrt(dx*dx+dy*dy));\n        }\n        v.push_back(it[i]);\n    }\n    return d;\n}\n\nDD ClosetPair(Polygon g){\n    sort(g.begin(),g.end(),xy);\n    return RecClosetPair(g.begin(),g.size());\n}\n\n\n\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); \n    cout<<fixed<<setprecision(10);\n\n    int n;\n    cin>>n;\n    Polygon g;\n    for(int i=0;i<n;i++){\n        int x,y;\n        cin>>x>>y;\n        g.emplace_back(x,y);\n    }\n    int Q;\n    cin>>Q;\n    while(Q--){\n        int x,y;\n        cin>>x>>y;\n        cout<<contains(P(x,y),g)<<endl;;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst pair<int, int> INF{329083291, 23409802};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\tif(!cross2) {\n\t\treturn true;\n\t}\n\treturn cross1 * cross2 < 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int j = 0; j < q; j++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point(double x, double y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef Segment Line;\n\nbool is_online(Point p, Segment s){\n    return abs(cross(s.p1 - p, s.p2 - p)) <= 1e-10;\n}\n\nbool is_intersect(Line l, Segment s){\n    Vector vl  = l.p2 - l.p1;\n    Vector vp1 = s.p1 - l.p1;\n    Vector vp2 = s.p2 - l.p1;\n    if (cross(vl, vp1) * cross(vl, vp2) <= 0) return true;\n    return false;\n}\n\ntypedef vector<Point> Polygon;\nint determine_containment(Point p, Polygon poly){\n    int c = 0;\n    Line l_right(p, Point(p.x + 1, p.y));\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        Segment s(poly[i], poly[(i+1)%n]);\n        if (is_online(p, s)) return 1;\n        c += is_intersect(l_right, s);\n    }\n    if (c % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n//point\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\t\t\t\t\t\t\t\t  // a--c--b on line\n}\n\n// line\nstruct L : public vector<P> {\n\tL(const P& a, const P& b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\n// polygon\ntypedef vector<P> G;\n\nP extreme(const vector<P> &po, const L &l) {\n  int k = 0;\n  for (int i = 1; i < po.size(); ++i)\n    if (dot(po[i], l[1]-l[0]) > dot(po[k], l[1]-l[0])) k = i;\n  return po[k];\n}\n\nenum { OUT, ON, IN };\nint contains(const G& po, const P& p) {\n  bool in = false;\n  for (int i = 0; i < po.size(); ++i) {\n  \tP a = po[i] - p, b = po[(i+1)%po.size()] - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b))\n      if (cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\ndouble area2(const G& po) {\n\tdouble A = 0;\n  \tfor (int i = 0; i < po.size(); ++i) \n    \tA += cross(po[i], po[(i+1)%po.size()]);\n\t//????????????????????????????????¨????????????\n  \treturn A/2;\n}\n\nbool isconvex(const G &p) {\n\tint n = p.size();\n\tif(cross(p[0]-p[n-1],p[n-2]-p[n-1]) < 0) return false;\n\tfor(int i = 1; i < n-1; ++i) {\n\t\tif(cross(p[i+1]-p[i],p[i-1]-p[i]) < 0) return false;\n\t}\n\treturn true;\n\n}\n\t\nint main() {\n\tint n;\n\tcin >> n;\n\tG po;\n\tfor(int i=0; i<n; ++i) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tP p(x, y);\n\t\tpo.push_back(p);\n\t}\n\tint q;\n\tcin >> q;\n\tfor(int i=0; i<q; ++i) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tP p(x, y);\n\t\tif(contains(po, p) == IN) cout << 2 << endl;\n\t\telse if(contains(po, p) == ON) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db long double\nconst db eps = 0;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nconst int N = 111;\npoi p[N];\n\nint main() {\n\t//cout << fixed << setprecision(0);\n\tios :: sync_with_stdio(false);\n\tint n; cin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tp[i].r();\n\tp[n] = p[0];\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r(); poi s = {1e4L + 7, 1e4L + 9};\n\t\t//cout << s.x << ' ' << s.y << '\\n';\n\t\tbool on = false;\n\t\tint inter = 0;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(!ccw(p[i], p[i + 1], t))\n\t\t\t\ton = true;\n\t\t\tif(si(s, t, p[i], p[i + 1]))\n\t\t\t\tinter ++;\n\t\t}\n\t\tif(on) cout << \"1\\n\";\n\t\telse if(inter & 1) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#define EPS 1e-10\nusing namespace std;\n\ndouble add(double a,double b){\n\tif(fabs(a+b)<EPS*(fabs(a)+fabs(b)))return 0.0;\n\treturn a+b;\n}\n\nclass P{\npublic:\n\tdouble x,y;\n\tP(double xx=0.0,double yy=0.0){\n\t\tx=xx;\n\t\ty=yy;\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x),add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x),add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(x*d,y*d);\n\t}\n\tP operator /(double d){\n\t\treturn P(x/d,y/d);\n\t}\n};\n\ntypedef P Vector;\ntypedef vector<P> Polygon;\n\ndouble norm(Vector p){\n\treturn add(p.x*p.x,p.y*p.y);\n}\n\ndouble abs(Vector p){\n\treturn sqrt(norm(p));\n}\n\ndouble dot(Vector a,Vector b){\n\treturn add(a.x*b.x,a.y*b.y);\n}\n\ndouble cross(Vector a,Vector b){\n\treturn add(a.x*b.y,-a.y*b.x);\n}\n\n\nint contains(Polygon g,P p){\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++){\n\t\tP a=g[i]-p,b=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS && dot(a,b)<EPS)return 1;\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<EPS && EPS<EPS && cross(a,b)>EPS)x=!x;\n\t}\n\treturn (x?2:0);\n}\n\nint main(void){\n\tint n;\n\tscanf(\"%d\",&n);\n\tPolygon g;\n\tfor(int i=0;i<n;i++){\n\t\tP p;\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\t\tg.push_back(P(p.x,p.y));\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tP p;\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\t\tprintf(\"%d\\n\",contains(g,p));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)(s); i < (int)(e); i++)\n#define pb push_back\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) real(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i+P.size()-1)%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\ntypedef complex<double> P;\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\ntypedef vector<P> polygon;\n\nstruct C {\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n//??????????????????\nint ccw(P a, P b, P c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const L &l, const L &m) {\n\treturn abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n\t\t\tabs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n\treturn cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n\t\t\tcross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n\treturn abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n\treturn abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n// enum { OUT, ON, IN };\n// int contains(const G& pol, const P& p){\n// \tif(pol.size() < 2) return OUT;\n// \tif(intersectSP({pol[0], pol[1]}, p)) return ON;\n// \tbool f = cross(pol[1]-pol[0], p - pol[0]) > 0;\n// \tfor(int i = 1; i < pol.size(); i++) {\n// \t\tauto& now = curr(pol, i);\n// \t\tauto& nxt = next(pol, i);\n// \t\tif(intersectSP({nxt, now}, p)) return ON;\n// \t\tif(f^(cross(nxt-now, p-now)>0)) return OUT;\n// \t}\n// \treturn IN;\n// }\n//??????????§???¢?????????????????????(polygon??????????¨???????)\nenum { OUT, ON, IN };\nint contains(const polygon& P, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < P.size(); ++i) {\n\t\tpoint a = curr(P,i) - p, b = next(P,i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n\t}\n\treturn in ? IN : OUT;\n}\nbool contains(const polygon& a, const polygon& b) {\n\trep(i, a.size()) if(contains(b, a[i]) == OUT) return false;\n\treturn true;\n}\n//????????´???????£???????????????????(??????????????£???????????????)\nenum{NO_HIT, HIT, A_IN_B, B_IN_A};\nint isHit(const polygon& a, const polygon& b){\n\tif(contains(a, b)) return A_IN_B;\n\tif(contains(b, a)) return B_IN_A;\n\trep(i, a.size()) rep(j, b.size()){\n\t\tL la(curr(a, i), next(a, i)), lb(curr(b, j), next(b, j));\n\t\tif(intersectSS(la, lb)) return HIT;\n\t}\n\treturn NO_HIT;\n}\n\n//point???theta???????????¢\npoint spinP(const point& p, double theta, double ext = 1.0) {\n\treturn p*P(cos(theta),sin(theta))*ext;\n}\n\npoint makeP(double r, double arg) {return P(r*cos(arg), r*sin(arg));}\n\n//?????¨????????????????±???????\nvector<P> crossPoint(const C& a, const C& b){\n\tdouble d = abs(b.p-a.p);\n\tdouble arg = atan2(y(b.p-a.p), x(b.p-a.p));\n\tdouble arg2 = acos((d*d+a.r*a.r-b.r*b.r)/(2*d*a.r));\n\tif(abs(arg2)<EPS) return {a.r*makeP(1.0, arg)+a.p};\n\tif(abs(a.r-b.r)<d && d < a.r+b.r) return {a.r*makeP(1.0, arg+arg2)+a.p, a.r*makeP(1.0, arg-arg2)+a.p};\n\treturn {};\n}\n\n//????????±?????\\???\nvector<L> comonTang(C c1, C c2) {\n\tvector<L> ret;\n\tif(c1.r > c2.r) swap(c1, c2);\n\tP sub = c1.p;\n\tc1.p -= sub;\n\tc2.p -= sub;\n\tdouble theta = atan2(c2.p.Y, c2.p.X);\n\n\tc2.p = spinP(c2.p, -theta);\n\tint signX = 0;\n\tif(c2.p.X > 0) signX = 1;\n\tif(c2.p.X < 0) signX = -1;\n\n\tdouble x = abs(c2.p.X), r1 = c1.r, r2 = c2.r;\n\tif(x*x > (r2 - r1) * (r2 - r1)) {\n\t\tdouble theta2 = asin((r2-r1)/x);\n\t\tret.pb({spinP({0, r1}, theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), r1}, theta2)});\n\t\tret.pb({spinP({0, -r1}, -theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), -r1}, -theta2)});\n\t}\n\tif(x > r1+r2) {\n\t\tdouble theta3 = PI / 2 - acos((r1+r2)/x);\n\t\tdouble len = sqrt((r1*x)*(r1*x)/(r1+r2)/(r1+r2)-r1*r1) + sqrt((r2*x)*(r2*x)/(r1+r2)/(r1+r2)-r2*r2);\n\t\tret.pb({spinP({0, r1}, -theta3), spinP({len, r1}, -theta3)});\n\t\tret.pb({spinP({0, -r1}, -theta3), spinP({len, -r1}, theta3)});\n\t}\n\n\tfor(auto& l : ret) {\n\t\tif(signX == -1) l[1] = {-l[1].X, l[1].Y};\n\t\tl[0] = spinP(l[0], theta);\n\t\tl[1] = spinP(l[1], theta);\n\t\tl[0] += sub;\n\t\tl[1] += sub;\n\t}\n\treturn ret;\n}\n\ndouble getArea(const polygon& pol) {\n\tint n = pol.size();\n\tdouble s = 0.0;\n\tfor(int i = 0; i < n; i++) {\n\t\tint now = i, nxt = (i + 1) % n;\n\t\ts += (pol[now].X - pol[nxt].X) * (pol[now].Y + pol[nxt].Y);\n\t}\n\treturn abs(s/2.0);\n}\n\n//?????? - convex hull\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n  \tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n  \t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  \tfor (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n  \t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  \tch.resize(k-1);\n  \treturn ch;\n}\n//???????¨??????????polygon????????????????????????\t\t\tCGL_3_B\nbool isHull(const G& g) {\n\tint n = g.size();\n\tif(n < 3) return false;\n\trep(i, n) if(ccw(prev(g, i), curr(g, i), next(g, i)) == -1) return false;\n\treturn true;\n}\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tG g;\n\trep(i, n) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tg.pb({x, y});\n\t}\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tcout << contains(g, P{x, y}) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint in_poly(P a, Poly p, P ex){\n  int n = p.size(), c = 0;\n  /*\n  P ex = a;\n  for(int i = 0; i < n; ++i) ex.X = max(ex.X,p[i].X+1);\n  */\n  L l = L(a,ex);\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    if(cross(l.second-l.first,p[i+1]-p[i]) && is_cross(l,L(p[i],p[i+1]))){\n      if(abs(a-p[i]) > EPS) ++c;\n      if(!ccw(p[i],p[i+1],a)) return 1;//??????\n    }\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    Mx = max(Mx,x);\n    My = max(My,y);\n    p[i] = P(x,y);\n  }\n  ++Mx;\n  ++My;\n  P ex = P(Mx,My);\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << in_poly(P(x,y),p,ex) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<iomanip>\n#include<utility>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long int ll;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw_online(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tint c=ccw_online(p0,p1,p2);\n\tif(c==counter_clockwise||c==clockwise)return c;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nconst int Bottom=0;\nconst int Left=1;\nconst int Right=2;\nconst int Top=3;\n\nclass endPoint\n{\npublic:\n\tPoint p;\n\tint seg;//id of Point\n\tint st;//kind of Point\n\tendPoint(){}\n\tendPoint(Point inp,int inseg,int inst):p(inp),seg(inseg),st(inst){}\n\tbool operator<(const endPoint &ep)const\n\t{\n\t\tif(p.y==ep.p.y)\n\t\t{\n\t\t\treturn st<ep.st;//Bottom->Left->Right->Top\n\t\t}\n\t\telse return p.y<ep.p.y;\n\t}\n};\n\nendPoint EP[200000];\n\nint manhattanintersection(vector<Segment> s)\n{\n\tint n=s.size();\n\tdouble sto;\n\t\n\tfor(int i=0,k=0;i<n;i++)\n\t{\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tif(s[i].p1.x>s[i].p2.x)\n\t\t\t{\n\t\t\t\tsto=s[i].p1.x;\n\t\t\t\ts[i].p1.x=s[i].p2.x;\n\t\t\t\ts[i].p2.x=sto;\n\t\t\t}\n\t\t}\n\t\telse if(s[i].p1.y>s[i].p2.y)\n\t\t{\n\t\t\tsto=s[i].p1.y;\n\t\t\ts[i].p1.y=s[i].p2.y;\n\t\t\ts[i].p2.y=sto;\n\t\t}\n\t\t\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Left);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Right);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Bottom);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Top);\n\t\t}\n\t}\n\t\n\tsort(EP,EP+2*n);\n\t\n\tset<int> BT;\n\tBT.insert(1000000001);\n\tint cnt=0;\n\t\n\tfor(int i=0;i<2*n;i++)\n\t{\n\t\tif(EP[i].st==Top)BT.erase(EP[i].p.x);\n\t\telse if(EP[i].st==Bottom)BT.insert(EP[i].p.x);\n\t\telse if(EP[i].st==Left)\n\t\t{\n\t\t\tset<int>::iterator b=lower_bound(BT.begin(),BT.end(),s[EP[i].seg].p1.x);\n\t\t\tset<int>::iterator e=upper_bound(BT.begin(),BT.end(),s[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\t\n\treturn cnt;\n}\nPolygon andrewscan(Polygon s)\n{\n\tPolygon u,l;\n\tif(s.size()<=2)return s;\n\tsort(s.begin(),s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\t\n\tfor(int i=2;i<s.size();i++)\n\t{\n\t\tfor(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t\n\tfor(int i=s.size()-3;i>=0;i--)\n\t{\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\t\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\nconst int in=2;\nconst int on=1;\nconst int out=0;\n\nint contain(Polygon g,Point p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tPoint a,b;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta=g[i]-p;\n\t\tb=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return on;\n\t\tif(a.y>b.y)\n\t\t{\n\t\t\tPoint sto=a;\n\t\t\ta=b;\n\t\t\tb=sto;\n\t\t}\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn x?in:out;\n}\nint main()\n{\n\tPolygon p;\n\tint n;cin>>n;\n\tPoint a;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tcin>>a.x>>a.y;\n\t\tp.push_back(a);\n\t}\n\tint q;cin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>a.x>>a.y;\n\t\tcout<<contain(p,a)<<endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n    return a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){//?????????????????°\n    return sign(a-b);\n}\n\nstruct P {//???\n    db x, y;\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    P operator+(P p) { return P(x + p.x, y + p.y); }\n    P operator-(P p) { return P(x - p.x, y - p.y); }\n    P operator*(db d) { return P(x * d, y * d); }\n    P operator/(db d) { return P(x / d, y / d); }\n    bool operator<(P p) const {\n        int c = cmp(x, p.x);\n        if (c) return c == -1;\n        return cmp(y, p.y) == -1;\n    }\n    db dot(P p) { return x * p.x + y * p.y; }//????§?\n    db det(P p) { return x * p.y - y * p.x; }//????§?\n    db distTo(P p) { return (*this-p).abs(); }//??????\n    db alpha() { return atan2(y, x); }//?±?????§?\n    void read() { cin>>x>>y; }//?????\\\n    db abs() { return sqrt(abs2());}//??????\n    db abs2() { return x * x + y * y; }//???????????????\n    P rot90() { return P(-y,x);}//?????¶????????¬90???\n    P unit() { return *this/abs(); }//?????????\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }//????§?????????¨[0,180)?????´\n};\n\nstruct L{ //ps[0] -> ps[1]\n    P ps[2];\n    P& operator[](int i) { return ps[i]; }\n    P dir() { return ps[1] - ps[0]; }//??´??????????????????\n    bool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }//????????¨?????????????????¢????????¶????????¨???\n    L push(){ // push eps outward\n        const double eps = 1e-6;\n        P delta = (ps[1] - ps[0]).rot90().unit() * eps;\n        return {ps[0] - delta, ps[1] - delta};\n    }\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {//?±??????´?????????\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }//?±??????´?????????\n\nbool intersect(db l1,db r1,db l2,db r2){\n    if(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n    return !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){//?±???????????????????  ?????¬????§??????????\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n           crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n                                                         * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {//??????m????????¨a,b?????´\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {//?????????m?????????????????¨a,b?????´\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){//?????????????????¨??´??????\n    return crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {//????????´???????????±\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){//????????´??????????§°\n    return proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n    P h = proj(p1,p2,q);\n    if(isMiddle(p1,h,p2))\n        return q.distTo(h);\n    return min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n    if(isSS(p1,p2,q1,q2)) return 0;\n    return min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb disSS(L l1,L l2){\n    return disSS(l1[0],l1[1],l2[0],l2[1]);\n}\n\ndb rad(P p1,P p2){\n    return atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n    db A = p1.distTo(p2);\n    db B = p2.distTo(p3);\n    db C = p3.distTo(p1);\n    return sqrtl(A*B*C/(A+B+C));\n}\n\ndb area(vector<P> ps){\n    db ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]);\n    return abs(ret/2);\n}\n//??¬?§???????????????¨????????¢??¢???\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n    int n = ps.size(), ret = 0;\n    rep(i,0,n){\n        P u=ps[i],v=ps[(i+1)%n];\n        if(onSeg(u,v,p)) return 1;\n        if(cmp(u.y,v.y)<=0) swap(u,v);\n        if(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n        ret ^= crossOp(p,u,v) > 0;\n    }\n    return ret*2;\n}\n\n\n\nint main(){\n    int n;\n    cin >> n;\n    vector<P> ps;\n    for(int i = 1;i <= n;i++){\n        P p;\n        p.read();\n        ps.push_back(p);\n    }\n    int q;\n    scanf(\"%d\",&q);\n    for(int i = 1;i <= q;i++){\n        P p;\n        p.read();\n        printf(\"%d\\n\",contain(ps,p));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nconst double eps=1e-13;\nstruct Point{double x,y;}p[105],p0;\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\ndouble cross(Point a,Point b){return a.x*b.y-a.y*b.x;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\nvoid read(Point &a){a.x=read(),a.y=read();}\nint n;\nint contain(Point p0)\n{\n\tbool x=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tPoint a=p[i]-p0,b=p[(i+1)%n]-p0;\n\t\tif(fabs(cross(a,b))<eps&&dot(a,b)<eps)return 1;\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<eps&&b.y>eps&&cross(a,b)>eps)x^=1;\n\t}\n\treturn x?2:0;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=0;i<n;i++)read(p[i]);\n\tint q=read();while(q--)\n\t{\n\t\tread(p0);\n\t\tprintf(\"%d\\n\",contain(p0));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n    // convex version : O(log n)\n    int ConvexContain(const Point &p) const;\n\n};\n\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\nint Polygon::ConvexContain(const Point &p) const {\n    const int n = (*this).size();\n    Point g = ((*this)[0] + (*this)[n / 3] + (*this)[2 * n / 3]) / 3.0; // inner point\n    int a = 0, b = n;\n\n    while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n        int c = (a + b) * 0.5;\n        if (sign(abs_cross((*this)[a] - g, (*this)[c] - g)) == 1) { // angle < 180 deg\n            if (sign(abs_cross((*this)[a] - g, p - g)) >= 0 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == -1)\n                b = c;\n            else\n                a = c;\n        }\n        else {\n            if (sign(abs_cross((*this)[a] - g, p - g)) == -1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == 1)\n                a = c;\n            else\n                b = c;\n        }\n    }\n\n    b %= n;\n\n    int res = sign(abs_cross((*this)[a] - p, (*this)[b] - p));\n    return (res == -1 ? OUT : (res == 1 ? IN : ON));\n}\n\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    bool is_convex = poly.IsConvex();\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << (is_convex ? poly.ConvexContain(p) : poly.Contain(p)) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;  \n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;// on\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;//out\n  else  return 2;//in\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define all(c) c.begin(),c.end()\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nbool eq(P a, P b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool operator < (const P& l, const P& r){\t\t//sort x -> y\n\treturn eq(l.real(),r.real()) ? l.imag()<r.imag() : l.real() < r.real();\n}\nbool compxy (const P& l, const P& r){\t\t//sort x -> y\n\treturn eq(l.real(),r.real()) ? l.imag()<r.imag() : l.real() < r.real();\n}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=-2, BACK=2, ON=0};\t//!!MAEHARAと一緒(convが書きやすい(次の点を取る条件をccw>0とかける))\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,s.sc,p)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i]-p,b=pol[(i+1)%pol.size()]-p;\n\t\tif(ccw(a,b,P(0,0))==ON) return ONP;\n\t\tif(imag(a)>imag(b)) swap(a,b);\n\t\tif(sig(imag(a))<=0 && 0<sig(imag(b)) && ccw(P(0,0),a,b)==CCW) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\ninline Pol conv(Pol p){\t\t//convex\n\tint n=p.size(),k=0;\n\tassert(n>=3);\n\tsort(all(p),compxy);\n//\tif(p[0]<p[1]) ;\n\tPol ret(2*n);\n\trep(i,n){\n\t\twhile(k>=2 && ccw(ret[k-2],ret[k-1],p[i])<=0) --k;\n\t\tret[k++]=p[i];\n\t}\n\tfor(int i=n-2,t=k+1;i>=0;i--){\n\t\twhile(k>=t && ccw(ret[k-2],ret[k-1],p[i])<=0) --k;\n\t\tret[k++]=p[i];\n\t}\n\tret.resize(k-1);\n\treturn ret;\n}\ninline Pol convall(Pol p){\t\t//conv上の点全部\t\t//点が2回以上出てくる\n\tint n=p.size(),k=0;\n\tassert(n>=3);\n\tsort(all(p),compxy);\n//\tif(p[0]<p[1]) ;\n\tPol ret(2*n);\n\trep(i,n){\n\t\twhile(k>=2 && ccw(ret[k-2],ret[k-1],p[i])==-1) --k;\n\t\tret[k++]=p[i];\n\t}\n\tfor(int i=n-2,t=k+1;i>=0;i--){\n\t\twhile(k>=t && ccw(ret[k-2],ret[k-1],p[i])==-1) --k;\n\t\tret[k++]=p[i];\n\t}\n\tret.resize(k-1);\n//\tPol ret1=ret;\n//\tsort(all(ret),compxy);\n\tret.erase(unique(all(ret)),ret.end());\n\treturn ret;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tPol p;\n\trep(i,n){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tp.pb(P(a,b));\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tint k=contain(p,P(x,y));\n\t\tif(k==INP) printf(\"2\\n\");\n\t\tif(k==ONP) printf(\"1\\n\");\n\t\tif(k==OUTP) printf(\"0\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\n// ???/????????????\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0):x(x), y(y){}\n  \n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(x * a, y * a); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point& p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point& p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;\n\n// ???\nstruct Circle {\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0):c(c), r(r){}\n};\n\n// ????§???¢\ntypedef vector<Point> Polygon;\n\n// ??????/??´???\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\n\n// ????????????????????????\ndouble norm(Vector v)\n{\n  return v.x*v.x + v.y*v.y;\n}\n// ?????????????????§??????\ndouble abs(Vector v)\n{\n  return sqrt(norm(v));\n}\n// ?????????????????????\ndouble dot(Vector a, Vector b)\n{\n  return a.x*b.x + a.y*b.y;\n}\n// ??????????????????????????§??????\ndouble cross(Vector a, Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ????????????\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2)\n{\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ?°???±\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / norm(base);\n  return s.p1 + base * r;\n}\n// ????°?\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE         = -1;\nstatic const int ONLINE_BACK       = 2;\nstatic const int ONLINE_FRONT      = -2;\nstatic const int ON_SEGMENT        = 0;\n// ???????¨???????\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a, b) < -EPS) return CLOCKWISE;\n  if(dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// ????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t  ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2)\n{\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n// ?????????????????¢\ndouble getDistance(Point a, Point b)\n{\n  return abs(a - b);\n}\n// ??´?????¨?????¨????????¢\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n// ????????¨?????¨????????¢\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n}\n// ????????????????????¢\ndouble getDistance(Segment s1, Segment s2)\n{\n  if(intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t     min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n// ???????????????\nPoint getCrossPoint(Segment s1, Segment s2)\n{\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n// ???c??¨??????l?????????\npair<Point, Point> getCrossPoints(Circle c, Line l)\n{\n  // assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r*c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n}\n// ???c1??¨???c2?????????\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\npair<Point, Point> getCrossPoints(Circle c1, Circle c2)\n{\n  // assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2*c1.r*d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n// ????????????\nstatic const int IN_POLYGON = 2;\nstatic const int ON_POLYGON = 1;\nstatic const int OUT_POLYGON = 0;\nint contains(Polygon g, Point p)\n{\n  int n = g.size();\n  bool x = false;\n  for(int i = 0; i < n; i++) {\n    Point a = g[i] - p, b = g[(i+1) % n] - p;\n    if(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON_POLYGON;\n    if(a.y > b.y) swap(a, b);\n    if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? IN_POLYGON : OUT_POLYGON);\n}\n\nint main()\n{\n  int n; cin >> n;\n  Polygon g(n);\n  for(Point& p : g) cin >> p.x >> p.y;\n  int q; cin >> q;\n  while(q--) {\n    Point p; cin >> p.x >> p.y;\n    cout << contains(g, p) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-20;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていれば0を返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            bool flag=true;\n            for(int j=0; j<n; j++){\n                double angle = angle_of_the_two_edges(p_xy[j%n][0], p_xy[j%n][1],tx,ty,p_xy[(j+1)%n][0], p_xy[(j+1)%n][1]);\n                //cout<<angle<<endl;\n                if(angle==M_PI){\n                    cout<<1<<endl;\n                    flag=false;\n                    break;\n                }\n                \n                if(angle<M_PI){\n                    cout<<0<<endl;\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag)cout<<2<<endl;\n        }\n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-9\n\ndouble toRadian(double deg) {return ((deg*PI)/180.0);}\ndouble toDegree(double radian) {return ((radian*180.0)/PI);}\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct point_i { int x, y;     // whenever possible, work with point_i\n  point_i() { x = y = 0; }                      // default constructor\n  point_i(int _x, int _y) : x(_x), y(_y) {} };         // user-defined\n\nstruct Point { //Integer Point\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\ndouble pointDistaceSquared2D (Point a, Point b) {return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);}\ndouble dist (Point a, Point b) {return sqrt(pointDistaceSquared2D(a, b));}\n// rotate p by theta degrees CCW w.r.t origin (0, 0)\nPoint rotate(Point p, double theta) {\n    double rad = toRadian(theta);\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nstruct line {double a, b, c;};\nvoid pointsToLine(Point p1, Point p2, line &l) {\n    if(fabs(p1.x-p2.x) < EPS) {\n        l.a = 1.0; l.b = 0.0; l.c = -p1.x;\n    } else {\n        l.a = -(double)(p1.y-p2.y) / (p1.x-p2.x);\n        l.b = 1.0;\n        l.c = -(double)(l.a*p1.x)-p1.y;\n    }\n}\n\nbool areParallel(line l1, line l2) {\n    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);\n}\n\nbool areSame(line l1, line l2) {\n    return areParallel(l1, l2) && (fabs(l1.c-l2.c) < EPS);\n}\n\nbool areIntersect(line l1, line l2, Point &p) {\n    if(areParallel(l1, l2)) return false;\n    p.x = (l2.b*l1.c-l1.b*l2.c) / (l2.a*l1.b-l1.a*l2.b);\n    if(fabs(l1.b) > EPS) p.y = -(l1.a*p.x+l1.c);\n    else                 p.y = -(l2.a*p.x+l2.c);\n    return true;\n}\n\n// Given three colinear points p, q, r, the function checks if\n// point q lies on line segment 'pr'\nbool onSegment(Point p, Point q, Point r)\n{\n    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&\n        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))\n       return true;\n\n    return false;\n}\n\n// To find orientation of ordered triplet (p, q, r).\n// The function returns following values\n// 0 --> p, q and r are colinear\n// 1 --> Clockwise\n// 2 --> Counterclockwise\nint orientation(Point p, Point q, Point r)\n{\n    // See 10th slides from following link for derivation of the formula\n    // http://www.dcs.gla.ac.uk/~pat/52233/slides/Geometry1x1.pdf\n    int val = (q.y - p.y) * (r.x - q.x) -\n              (q.x - p.x) * (r.y - q.y);\n\n    if (val == 0) return 0;  // colinear\n\n    return (val > 0)? 1: 2; // clock or counterclock wise\n}\n\n// The main function that returns true if line segment 'p1q1'\n// and 'p2q2' intersect.\nbool LineSegmentIntersect(Point p1, Point q1, Point p2, Point q2)\n{\n    // Find the four orientations needed for general and\n    // special cases\n    int o1 = orientation(p1, q1, p2);\n    int o2 = orientation(p1, q1, q2);\n    int o3 = orientation(p2, q2, p1);\n    int o4 = orientation(p2, q2, q1);\n\n    // General case\n    if (o1 != o2 && o3 != o4)\n        return true;\n\n    // Special Cases\n    // p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    if (o1 == 0 && onSegment(p1, p2, q1)) return true;\n\n    // p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    if (o2 == 0 && onSegment(p1, q2, q1)) return true;\n\n    // p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    if (o3 == 0 && onSegment(p2, p1, q2)) return true;\n\n     // p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    if (o4 == 0 && onSegment(p2, q1, q2)) return true;\n\n    return false; // Doesn't fall in any of the above cases\n}\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\nvec scale(vec v, double s) {return vec(v.x*s, v.y*s);}\nPoint translate(Point p, vec v) {return Point(p.x + v.x, p.y + v.y);}// translate p according to v\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm_sq(vec v) {return v.x*v.x + v.y*v.y;}\n\n// returns the distance from p to the line defined by\n// two points a and b (a and b must be different)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLine(Point p, Point a, Point b, Point &c) {\n    // formula: c = a + u* ab\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    c = translate(a, scale(ab, u));\n    return dist(p, c);\n}\n\n// returns the distance from p to the line segment ab defined by\n// two points a and b (still OK if a == b)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLineSegment(Point p, Point a, Point b, Point &c) {\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    if (u < 0.0) {\n        c = Point(a.x, a.y);\n        return dist(p, a);\n    }\n\n    if(u > 1.0) {\n        c = Point(b.x, b.y);\n        return dist(p, b);\n    }\n\n    return distToLine(p, a, b, c);\n}\n\ndouble angle(Point a, Point o, Point b) { // returns angle aob in rad\n    vec oa = toVec(o, a), ob = toVec(o, b);\n    return acos(dot(oa, ob) / sqrt(norm_sq(oa) * norm_sq(ob)));\n}\n\ndouble cross(vec a, vec b) {return a.x*b.y - a.y*b.x;}\n// note: to accept collinear points, we have to change the '> 0'\n// returns true if point r is on the left side of line pq\nbool ccw(Point p, Point q, Point r) {return cross(toVec(p, q), toVec(p, r)) >= 0;}\n// returns true if point r is on the same line as the line pq\nbool collinear(Point p, Point q, Point r) {\n    return fabs(cross(toVec(p, q), toVec(p, r))) < EPS;\n}\n\ndouble trianglePerimeter(double a, double b, double c) {return (a+b+c)*0.5;}\ndouble triangleArea(double b, double h) {return (b*h)*0.5;}\ndouble triangleArea(double a, double b, double c) {\n    double s = trianglePerimeter(a, b, c);\n    return sqrt( s*(s-a)*(s-b)*(s-c) );\n}\n\n//in radian\ndouble triangleAngle(double a, double b, double c) {//angle opposite to line c\n    double nume = a*a+b*b-c*c;\n    double denom = 2.0*a*b;\n    return acos(nume/denom);\n}\n\nint insideCircle(point_i p, point_i c, int r) { // all integer version\n  int dx = p.x - c.x, dy = p.y - c.y;\n  int Euc = dx * dx + dy * dy, rSq = r * r;             // all integer\n  return Euc < rSq ? 0 : Euc == rSq ? 1 : 2;\n} //inside/border/outside\n\n//Given the intersection point p1, p2 and radius r find centers\nbool circle2PtsRad(Point p1, Point p2, double r, Point &c) {\n  double d2 = (p1.x - p2.x) * (p1.x - p2.x) +\n              (p1.y - p2.y) * (p1.y - p2.y);\n  double det = r * r / d2 - 0.25;\n  if (det < 0.0) return false;\n  double h = sqrt(det);\n  c.x = (p1.x + p2.x) * 0.5 + (p1.y - p2.y) * h;\n  c.y = (p1.y + p2.y) * 0.5 + (p2.x - p1.x) * h;\n  return true;\n}         // to get the other center, reverse p1 and p2\n\ndouble circleCircumference(double r) {return 2.0*PI*r;}\ndouble circleArea(double r){return PI*r*r;}\ndouble circleSectorArea(double r, double theta) {\n    return (circleArea(r)*theta)/360.0;\n}\n\n//Given three sides of a triangle\ndouble inCircleRadius(double a, double b, double c) {\n    double area = triangleArea(a, b, c);\n    double s = trianglePerimeter(a, b, c);\n    return (area/s);\n}\n\n//Given three sides of a triangle\ndouble circumCircleRadius(double a, double b, double c) {\n    double  A = triangleAngle(b, c, a);\n    double  d = a / sin(A);\n    return d*=0.5;\n}\n\ndouble coneArea(double h, double r) {return (PI*r*r*h)/3.0;}\ndouble coneFrustumArea(double R, double r, double h) {return ((R*R+R*r+r*r)*PI*h)/3.0;}\n\n//Polygon\n// returns the perimeter, which is the sum of Euclidian distances\n// of consecutive line segments (polygon edges)\ndouble perimeter(const vector<Point> &P) {\n  double result = 0.0;\n  for (int i = 0; i < (int)P.size()-1; i++)  // remember that P[0] = P[n-1]\n    result += dist(P[i], P[i+1]);\n  return result; }\n\n// returns the area, which is half the determinant\ndouble area(const vector<Point> &P) {\n  double result = 0.0, x1, y1, x2, y2;\n  for (int i = 0; i < (int)P.size()-1; i++) {\n    x1 = P[i].x; x2 = P[i+1].x;\n    y1 = P[i].y; y2 = P[i+1].y;\n    result += (x1 * y2 - x2 * y1);\n  }\n  return fabs(result) / 2.0; }\n\n// returns true if we always make the same turn while examining\n// all the edges of the polygon one by one\nbool isConvex(const vector<Point> &P) {\n  int sz = (int)P.size();\n  if (sz <= 3) return false;   // a point/sz=2 or a line/sz=3 is not convex\n  bool isLeft = ccw(P[0], P[1], P[2]);               // remember one result\n  for (int i = 1; i < sz-1; i++)            // then compare with the others\n    if (ccw(P[i], P[i+1], P[(i+2) == sz ? 1 : i+2]) != isLeft)\n      return false;            // different sign -> this polygon is concave\n  return true; }                                  // this polygon is convex\n\n// returns true if point p is in either convex/concave polygon P\nbool inPolygon(Point pt, const vector<Point> &P) {\n  if ((int)P.size() == 0) return false;\n  double sum = 0;    // assume the first vertex is equal to the last vertex\n  for (int i = 0; i < (int)P.size()-1; i++) {\n    if (ccw(pt, P[i], P[i+1]))\n         sum += angle(P[i], pt, P[i+1]);                   // left turn/ccw\n    else sum -= angle(P[i], pt, P[i+1]); }                 // right turn/cw\n  return fabs(fabs(sum) - 2*PI) < EPS; }\n\n// line segment p-q intersect with line A-B.\nPoint lineIntersectSeg(Point p, Point q, Point A, Point B) {\n  double a = B.y - A.y;\n  double b = A.x - B.x;\n  double c = B.x * A.y - A.x * B.y;\n  double u = fabs(a * p.x + b * p.y + c);\n  double v = fabs(a * q.x + b * q.y + c);\n  return Point((p.x * v + q.x * u) / (u+v), (p.y * v + q.y * u) / (u+v)); }\n\n// cuts polygon Q along the line formed by Point a -> Point b\n// (note: the last Point must be the same as the first Point)\nvector<Point> cutPolygon(Point a, Point b, const vector<Point> &Q) {\n  vector<Point> P;\n  for (int i = 0; i < (int)Q.size(); i++) {\n    double left1 = cross(toVec(a, b), toVec(a, Q[i])), left2 = 0;\n    if (i != (int)Q.size()-1) left2 = cross(toVec(a, b), toVec(a, Q[i+1]));\n    if (left1 > -EPS) P.push_back(Q[i]);       // Q[i] is on the left of ab\n    if (left1 * left2 < -EPS)        // edge (Q[i], Q[i+1]) crosses line ab\n      P.push_back(lineIntersectSeg(Q[i], Q[i+1], a, b));\n  }\n  if (!P.empty() && !(P.back() == P.front()))\n    P.push_back(P.front());        // make P's first Point = P's last Point\n  return P; }\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    int n, q;\n    double x, y;\n    vector<Point> v;\n\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%lf %lf\", &x, &y);\n        v.push_back(Point(x, y));\n    }\n\n    v.push_back(v[0]);\n\n    scanf(\"%d\", &q);\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x, &y);\n        if(inPolygon(Point(x, y), v)) {\n            bool onseg = false;\n            for(int j = 0; j < n; j++) {\n                onseg = onseg || (collinear(v[j], Point(x, y), v[j+1]) && onSegment(v[j], Point(x, y), v[j+1]));\n            }\n\n            if(onseg) {\n                printf(\"1\\n\");\n            } else {\n                printf(\"2\\n\");\n            }\n        } else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*******************??????********************/\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {//??????\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??????\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\nstruct C {//???\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {//??????????????????\n\tb -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n\t//non-parallel || sameline\n\treturn abs(cross(l[1]-l[0],m[1]-m[0])) > EPS || abs(cross(l[1]-l[0],m[0]-l[0])) < EPS;\n}\nbool intersectLS(const L& l,const L& s){\n\t// s[0] is left of l,s[1] is right of l\n\treturn cross(l[1]-l[0],s[0]-l[0]) * cross(l[1]-l[0],s[1]-l[0]) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n\treturn ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n\t\tccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectLP(const L& l,const P& p){\n\treturn abs(cross(l[1]-p,l[0]-p)) < EPS;\n}\nbool intersectSP(const L& s,const P& p){\n\treturn abs(s[0]-p)+abs(s[1]-p) - abs(s[1]-s[0]) < EPS;// triangle inequality\n}\n// ??´???????????????\nbool orthogonalLL(const L &l1, const L &l2){\n\treturn (dot(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && dot(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n// ??????????????????\nbool parallelLL(const L &l1, const L &l2){\n\treturn (cross(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && cross(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n// p??????l?????????????????????????????????\nP projection(const L& l,const P& p){\n\tdouble t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n// l???????§°?????¨????????????p??¨???????§°?????????????????????\nP reflection(const L& l,const P& p){\n\treturn p + 2. * (projection(l,p) - p);\n}\ndouble distancePP(const P &a, const P &b){\n\treturn abs(a - b);\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceLP(const L& l,const P& p){\n\treturn abs(p - projection(l,p));\n}\ndouble distanceLL(const L& l,const L& m){\n\treturn intersectLL(l,m) ? 0 : distanceLP(l,m[0]);\n}\ndouble distanceLS(const L& l,const L& s){\n\tif(intersectLS(l,s)) return 0;\n\treturn min(distanceLP(l, s[0]),distanceLP(l, s[1]));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n// ??????\nP crosspointLL(const L &l, const L &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n// ????§???¢?????¢???\ndouble area(const G &g){\n\tdouble A = 0.0;\n\tfor(int i=0;i<g.size();i++)\n\t\tA += cross(g[i],g[(i+1)%g.size()]);\n\treturn A / 2.0;\n}\n// ?????????\nbool isconvex(const G &g){\n\tfor(int i=0;i<g.size();i++){\n\t\tif(ccw(g[(i-1+g.size())%g.size()], g[i], g[(i+1)%g.size()]) == -1)return false;\n\t}\n\treturn true;\n}\n// convex full\nG convex_full(G &ps){\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tG ch(2*n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])//lower-hull\n\t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tfor (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--])//upper-hull\n\t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tch.resize(k-1);\n\treturn ch;\n}\nbool is_convex(G &g){\n\tG cf = convex_full(g);\n\tif(cf.size() == g.size())return true;\n\treturn false;\n}\n// ??????????§???¢????????????\nenum{ OUT, ON, IN};\nint contains(const G &g, const P &p){\n\tbool in = false;\n\tfor(int i=0;i<g.size();i++){\n\t\tP a = g[i] - p, b = g[(i+1)%g.size()] - p;\n\t\tif( imag(a) > imag(b) )swap(a, b);\n\t\tif( imag(a) <= 0 && 0 < imag(b) )\n\t\t\tif( cross(a, b) < 0) in = !in;\n\t\tif( cross(a, b) == 0 && dot(a, b) <= 0 )return ON;\n\t}\n\treturn in ? IN : OUT;\n}\nint main(void){\n\tint n;\n\tcin >> n;\n\tG g(n);\n\tfor(int i=0;i<n;i++){\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\tg[i] = P(x,y);\n\t}\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\tP p(x,y);\n\t\tcout << contains( g, p ) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define Re real()\n#define Im imag()\nusing namespace std;\n\nconst double eps = 1e-9;\ntypedef complex<double> Point;\ntypedef Point Vector;\nPoint P[50050], s;\nint n, k, m;\nvector<Point> qs;\n\nbool cmp(Point a, Point b)\n{\n    if(fabs(a.Re - b.Re) < eps) return a.Im < b.Im;\n    else return a.Re < b.Re;\n}\n\ndouble cross(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Im;\n}\n\nint check(const Point& t)\n{\n    int res = 2;\n    for(int i = 0; i < n; i++)\n    {\n        if(cross(P[i] - t, P[(i + 1) % n] - t) == 0) res = 1;\n        if(cross(P[i] - t, P[(i + 1) % n] - t) < 0) res = 0;\n    }\n    return res;\n}\n\nint main()\n{\n    while(~scanf(\"%d\", &n))\n    {\n        for(int i = 0; i < n; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            P[i] = Point(tx, ty);\n        }\n        scanf(\"%d\", &m);\n        for(int i = 0; i < m; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            s = Point(tx, ty);\n            printf(\"%d\\n\", check(s));\n        }\n    }\n    return 0;\n}\n\n/*\n\n5\n0 0\n2 0\n2 2\n0 2\n1 1\n\n*/"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-17;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\ndouble DistAsLine(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    return fabs(V1.OuterProd(V2)) / V1.Length();\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    if (DistAsLine(P, Seg) > eps) return false;\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 100007, P.y + 100009)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 100007, P.y + 100009)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct F {\n\tlong long a, b;\n\tF() {}\n\tF(long long _a, long long _b) : a(_a), b(_b) {}\n\tF operator + (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a + a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator - (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a - a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator * (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator / (const F &f) {\n\t\tlong long x = a * f.b, y = b * f.a;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n};\nconst double pi = acos(-1);\nconst double eps = 1e-8;\ninline int sign(double a) {\n\treturn a < -eps ? -1 : a > eps;\n}\ninline int cmp(double a, double b) {\n\treturn sign(a - b);\n}\ndouble add(double a, double b) {\n\tif (abs(a + b) < eps * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\ntypedef double data;\nstruct P {\n\tdata x, y;\n\tP() {}\n\tP(data x, data y) : x(x), y(y) {}\n\tP operator + (const P &p) { return P(x + p.x, y + p.y); }\n\tP operator - (const P &p) { return P(x - p.x, y - p.y); }\n\tP operator * (data d) { return P(x * d, y * d); }\n\tP operator / (data d) { return P(x / d, y / d); }\n\tdata dot(const P &p) { return x * p.x + y * p.y; }\n\tdata det(const P &p) { return x * p.y - y * p.x; }\n\tdata disto(const P &p) { return (*this - p).abs(); }\n\tdata alpha() { return atan2(y, x); }\n\tdata abs() { return sqrt(abs2()); }\n\tdata abs2() { return x * x + y * y; }\n\tP rot90() { P(-y, x); }\n\tP unit() { return *this / abs(); }\n\tbool operator < (P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tfriend istream& operator>>(istream &in, P &p) {\n\t\tin >> p.x >> p.y;\n\t\treturn in;\n\t}\n\tfriend ostream& operator<<(ostream& out, P &p) {\n\t\tout << p.x << ' ' << p.y;\n\t\treturn out;\n\t}\n};\nP projection(P p1, P p2, P q) {\n\tP dir = p2 - p1;\n\treturn p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\nP reflection(P p1, P p2, P q) {\n\treturn projection(p1, p2, q) * 2 - q;\n}\nbool is_midddle(data a, data m, data b) {\n\treturn sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\nbool is_midddle(P a, P m, P b) {\n\treturn is_midddle(a.x, m.x, b.x) && is_midddle(a.y, m.y, b.y);\n}\nbool on_seg(P p1, P p2, P q) {\n\treturn (p1 - q).det(p2 - q) == 0 && (p1 - q).dot(p2 - q) <= 0;\n\t// return (p1 - q).det(p2 - q) == 0 && is_middle(p1, q, p2);\n}\nbool intersect(data l1, data r1, data l2, data r2) {\n\tif(l1 > r1) swap(l1, r1);\n\tif(l2 > r2) swap(l2, r2);\n\treturn cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nbool intersect(P p1, P p2, P q1, P q2) {\n\treturn intersect(p1.x, p2.x, q1.x, q2.x) && intersect(p1.y, p2.y, q1.y, q2.y)\n\t&& sign((p2 - p1).det(q1 - p1)) * sign((p2 - p1).det(q2 - p1)) <= 0\n\t&& sign((q2 - q1).det(p1 - q1)) * sign((q2 - q1).det(q2 - q1)) <= 0;\n}\nP intersection(P p1, P p2, P q1, P q2) {\n\tdata a1 = (q2 - q1).det(p1 - q1), a2 = -(q2 - p1).det(p2 - q1);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n\t//line return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n}\ndata nearest(P p1, P p2, P q) {\n\tP h = projection(p1, p2, q);\n\tif(is_midddle(p1, h, p2)) return q.disto(h);\n\treturn min(p1.disto(q), p2.disto(q));\n}\ndata seg_dist(P p1, P p2, P q1, P q2) {\n\tif(intersect(p1, p2, q1, q2)) return 0;\n\treturn min(min(nearest(p1, p2, q1), nearest(p1, p2, q2)), min(nearest(q1, q2, p1), nearest(q1, q2, p2)));\n}\ndata area(vector<P> &ps) {\n\tdata res = 0;\n\tint n = ps.size();\n\tfor(int i = 0; i < n; i++) {\n\t\tres += ps[i].det(ps[(i + 1) % n]);\n\t}\n\treturn abs(res / 2);\n}\nbool is_convex(vector<P> &ps) {\n\tint n = ps.size();\n\tfor(int i = 0; i < n; i++) {\n\t\tdata a1 = (ps[(i + 1) % n] - ps[i]).det(ps[(i + 2) % n] - ps[(i + 1) % n]);\n\t\tdata a2 = (ps[(i + 2) % n] - ps[(i + 1) % n]).det(ps[(i + 3) % n] - ps[(i + 2) % n]);\n\t\tif(a1 * a2 < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint contain(vector<P> &ps, P p) {\n\tint n = ps.size(), res = 0;\n\tfor(int i = 0; i < n; i++) {\n\t\tP u = ps[i], v = ps[(i + 1) % n];\n\t\tif(on_seg(u, v, p)) return 1;\n\t\tif(cmp(u.y, v.y) <= 0) swap(u, v);\n\t\tif(cmp(p.y, u.y) > 0 || cmp(p.y, v.y) <= 0) continue;\n\t\tres ^= (u - p).det(v - p) > 0;\n\t}\n\treturn res * 2;\n\t//2:inside 1:on_seg 0:outside\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n\t//freopen(\"data.in\", \"rt\", stdin);\n\t//freopen(\"data.out\", \"w\", stdout);\n\tauto _start = chrono::high_resolution_clock::now();\n#endif\n\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout << fixed << setprecision(1);\n\tint n;\n\tcin >> n;\n\tvector<P> ps(n);\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> ps[i];\n\t}\n\tint q;\n\tcin >> q;\n\twhile(q--) {\n\t\tP t;\n\t\tcin >> t;\n\t\tcout << contain(ps, t) << '\\n';\n\t}\n\n#ifdef LOCAL_DEFINE\n\tauto _end = chrono::high_resolution_clock::now();\n\tcerr << \"elapsed time: \" << chrono::duration<double, milli>(_end - _start).count() << \" ms\\n\";\n#endif\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse {\n\t\t\t\tint sign = 1 - 2 * (ccw(p[j], t, next) < 0);\n\t\t\t\tdouble th = acos(getCos(p[j] - t, next - t)) * sign;\n\t\t\t\tfsum += th;\n\t\t\t}\n        }\n\t\tprintf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n\t\tif (q == 288) fprintf(stderr, \"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                          // \"ON_SEGMENT\"\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n// Projection\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_A\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Projection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// Reflection\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_B\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Reflection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// ccw\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_C\n// int main() {\n//   const vector<string> ans{\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n//   Point p0, p1;\n//   cin >> p0 >> p1;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p2;\n//     cin >> p2;\n//     cout << ans[ccw(p0, p1, p2) + 2] << endl;\n//   }\n// }\n\n// Parallel and Orthogonal\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_A\n// int main() {\n//   int n;\n//   cin >> n;\n//   while (n--) {\n//     Line a, b;\n//     cin >> a >> b;\n//     if (Parallel(a, b))\n//       puts(\"2\");\n//     else if (Orthogonal(a, b))\n//       puts(\"1\");\n//     else\n//       puts(\"0\");\n//   }\n// }\n\n// Intersect(S, S)\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_B\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     cout << Intersect(a, b) << endl;\n//   }\n// }\n\n// Crosspoint(S, S)\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_C\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     Point ans = Crosspoint(a, b);\n//     cout << ans << endl;\n//   }\n// }\n\n// Distance(S, S);\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_D\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     cout << fixed << setprecision(10) << Distance(a, b) << endl;\n//   }\n// }\n\n// Area2\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/3/CGL_3_A\n// int main() {\n//   int n;\n//   cin >> n;\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   cout << fixed << setprecision(1) << Area2(p) / 2.0 << endl;\n// }\n\n// IsConvex\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/3/CGL_3_B\n// int main() {\n//   int n;\n//   cin >> n;\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   cout << IsConvex(p) << endl;\n// }\n\n// Contains\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/3/CGL_3_C\nint main() {\n  int n;\n  cin >> n;\n  Polygon p(n);\n  for (auto &i : p) cin >> i;\n\n  int q;\n  cin >> q;\n  while (q--) {\n    Point a;\n    cin >> a;\n\n    cout << Contains(p, a) << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct P {\n    int x, y;\n\n    P() : x(0), y(0) { }\n    P(int x, int y) : x(x), y(y) { }\n\n    int norm() { return x * x + y * y; }\n    int dot(P p) { return x * p.x + y * p.y; }\n    int cross(P p) { return x * p.y - y * p.x; }\n\n    P operator -() { return P(-x, -y); }\n    P operator +(P p) { return P(x + p.x, y + p.y); }\n    P operator -(P p) { return P(x - p.x, y - p.y); }\n    P operator *(int k) { return P(x * k, y * k); }\n};\n\nconst int MAX_N = 100;\n\nint ccw(P p0, P p1, P p2) {\n    P a = p1 - p0;\n    P b = p2 - p0;\n\n    if (a.cross(b) > 0) return 1;\n    if (a.cross(b) < 0) return -1;\n    if (a.dot(b) < 0) return 2;\n    if (a.norm() < b.norm()) return -2;\n\n    return 0;\n}\n\nint n;\nP ps[MAX_N + 2];\n\nint solve(int x, int y) {\n    int c = 0;\n    P p(x, y);\n\n    for (int i = 0; i < n; i++) {\n        P a = ps[i] - p;\n        P b = ps[i + 1] - p;\n        if (a.cross(b) == 0 && a.dot(b) <= 0) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y <= 0 && b.y > 0 && a.cross(b) > 0) c++;\n    }\n\n    return c % 2 ? 2 : 0;\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n\n        ps[i] = P(x, y);\n    }\n    ps[n] = ps[0];\n    ps[n + 1] = ps[1];\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << solve(x, y) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define eps 1e-9\n#define pi acos(-1)\n#define nmax 200\n#define f(c,a,b) for(int c=a; c<=b; c++)\n\nusing namespace std;\ntypedef double db;\nstruct P{\n    db x, y;\n    P(){}\n    P(db x, db y) : x(x) , y(y) {}\n    P operator - (P a){ return P(x-a.x, y-a.y); }\n    db dot(P a){ return x*a.x+y*a.y; }\n    db clen() { return sqrt(x*x+y*y); }\n    db times(P a){ return x*a.y-y*a.x; }\n}po[nmax];\ntypedef P V;\nint n;\n\nint sign(db x){ return x<-eps ? -1 : x>eps; }\n\nint contain(P a){\n    bool flag=false;\n    f(i,1,n){\n        P b = po[i]-a, c = po[i-1]-a;\n        if( !sign(b.times(c)) && b.dot(c)<eps ) return 1;\n        if(b.y < c.y) { P t=b; b=c; c=t; }\n        if(c.times(b)>eps && b.y>eps && c.y<eps ) flag=!flag;\n    }    \n    return flag?2:0;\n}\n\nint main(){\n    //freopen(\"owo.in\",\"r\",stdin);\n    cin >> n;\n    f(i,1,n) scanf(\"%lf%lf\", &po[i].x, &po[i].y);\n    po[0] = po[n];\n    int q;\n    cin >> q;\n    while(q--) {\n        P in;\n        scanf(\"%lf%lf\", &in.x, &in.y);\n        printf(\"%d\\n\", contain(in));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/* template.cpp {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n \n// #define int long long\n#define GET_MACRO(a, b, c, d, NAME, ...) NAME\n#define REP1(n) REP2(i_, n)\n#define REP2(i, n) REP3(i, 0, n)\n#define REP3(i, a, b) REP4(i, a, b, 1)\n#define REP4(i, a, b, s) for (long long i = (a); i < (long long)(b); i += (long long)(s))\n#define RREP1(n) RREP2(i_, n)\n#define RREP2(i, n) RREP3(i, 0, n)\n#define RREP3(i, a, b) RREP4(i, a, b, 1)\n#define RREP4(i, a, b, s) for (long long i = (b) - 1; i >= (long long)(a);  i -= (long long)(s))\n#define rep(...) GET_MACRO(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define rrep(...) GET_MACRO(__VA_ARGS__, RREP4, RREP3, RREP2, RREP1)(__VA_ARGS__)\n#define fs first\n#define sc second\n#define all(c) std::begin(c), std::end(c)\n#define rall(c) (c).begin(), (c).end()\n#define pcnt(x) __builtin_popcountll(x)\n#define each(x, c) for (auto &&x : c)\n#define endl \"\\n\"\n#define y0 y0_\n#define y1 y1_\n#define yn yn_\n#define left left_\n#define right right_\n \n#define TMP_T template<typename T>\n#define TMP_TU template<typename T, typename U>\n#define TMP_Ts template<typename ...T>\n#define TMP_NTs template<size_t N, typename ...T>\n#define TMP_CT template<bool C, typename T = void>\n \n#ifndef DEBUG\n#define cerr no_output\nstruct NoOutput : ostream {\n  TMP_T ostream &operator<<(const T &){ return *this; }\n} no_output;\n#endif\n \nusing uint = unsigned;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nTMP_T using PQL = priority_queue<T, vector<T>, greater<T>>;\nTMP_T using PQG = priority_queue<T>;\nTMP_CT using enable_if_t = typename enable_if<C, T>::type;\n \nconst ll LLINF = 1e18 + 10;\n#ifndef int\nconst int INF = 1e9 + 10;\n#else\nconst int INF = LLINF;\n#endif\n \nconst int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nconst int dy[] = {0, -1, 0, 1, -1, -1, 1, 1};\n \nTMP_T inline constexpr T sq(T x){ return x * x; }\nTMP_TU inline T& chmin(T &x, U y){ if (x > y) x = y; return x; }\nTMP_TU inline T& chmax(T &x, U y){ if (x < y) x = y; return x; }\n \nTMP_NTs enable_if_t<(N >= sizeof...(T))> input_tuple(istream &, tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> input_tuple(istream &is, tuple<T...> &x){ is >> get<N>(x); input_tuple<N + 1, T...>(is, x); }\nTMP_Ts ostream &operator>>(istream &is, tuple<T...> &x){ input_tuple<0, T...>(is, x); return is; }\nTMP_TU ostream &operator>>(istream &is, pair<T, U> &x){ return is >> x.first >> x.second; }\nTMP_NTs enable_if_t<(N >= sizeof...(T))> print_tuple(ostream &, const tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> print_tuple(ostream &os, const tuple<T...> &x){ os << (N > 0 ? \" \" : \"\") << get<N>(x); print_tuple<N + 1, T...>(os, x); }\nTMP_Ts ostream &operator<<(ostream &os, const tuple<T...> &x){ print_tuple<0, T...>(os, x); return os; }\nTMP_TU ostream &operator<<(ostream &os, const pair<T, U> &x){ return os << x.first << \" \" << x.second; }\nTMP_T vector<T> reversed(const vector<T> &c){ auto d = c; reverse(all(d)); return d; }\nstring reversed(const string &s){ auto t = s; reverse(all(t)); return t; }\nTMP_T void unique(vector<T> &c){ sort(all(c)); c.erase(unique(all(c)), end(c)); }\nTMP_T vector<T> uniqued(const vector<T> &c){ auto d = c; unique(d); return d; }\n\n#undef TMP_T\n#undef TMP_TU\n#undef TMP_Ts\n#undef TMP_NTs\n#undef TMP_CT\n\nll gcd(ll a, ll b){ return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b){ return a / gcd(a, b) * b; }\ntuple<ll, ll, ll> extgcd(ll a, ll b){\n  if (b){\n    ll g, x, y;\n    tie(g, x, y) = extgcd(b, a % b);\n    return make_tuple(g, y, x - a / b * y);\n  }\n  return make_tuple(a, 1, 0);\n}\nll invmod(ll a, ll m = 1000000007){\n  ll g, x;\n  tie(g, x, ignore) = extgcd(a, m);\n  return g == 1 ? (x + m) % m : 0;\n}\n\ninline ll in(){ ll x; cin >> x; return x; }\n \nstruct prepare {\n  prepare(){\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(12);\n    cerr << fixed << setprecision(12);\n#ifndef DEBUG\n    cin.tie(nullptr);\n#endif\n  }\n} prepare_;\n/* }}} */\n/* geometry.cpp {{{ */\n/* object {{{ */\nusing Real = long double;\nusing Point = complex<Real>;\n\nstruct Line {\n  Point p, q;\n  Line(){}\n  Line(const Point &p, const Point &q): p(p), q(q){}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n  Circle(){}\n  Circle(const Point &p, Real r): p(p), r(r){}\n};\n\nusing Segment = Line;\nusing Polygon = vector<Point>;\n\nint sgn(Real, Real);\nnamespace std {\n  bool operator<(const Point &a, const Point &b){\n    return sgn(real(a), real(b)) ? sgn(real(a), real(b)) < 0 : sgn(imag(a), imag(b)) < 0;\n  }\n  bool operator==(const Point &a, const Point &b){\n    return sgn(real(a), real(b)) == 0 && sgn(imag(a), imag(b)) == 0;\n  }\n}\n/* }}} */\n/* const {{{ */\nconst Real EPS = 1e-8l;\nconst Real PI = acos(-1.0l);\n/* }}} */\n/* compare {{{ */\nint sgn(Real x){\n  return (x > EPS) - (x < -EPS);\n}\n\nint sgn(Real x, Real y){\n  return sgn(x - y);\n}\n/* }}} */\n/* input {{{ */\nistream &operator>>(istream &is, Point &p){\n  Real x, y;\n  is >> x >> y;\n  p.real(x), p.imag(y);\n  return is;\n}\n\nistream &operator>>(istream &is, Line &l){\n  return is >> l.p >> l.q;\n}\n\nistream &operator>>(istream &is, Circle &c){\n  return is >> c.p >> c.r;\n}\n\nistream &operator>>(istream &is, Polygon &g){\n  each(p, g) is >> p;\n  return is;\n}\n/* }}} */\n/* output {{{ */\nostream &operator<<(ostream &os, const Point &p){\n  return os << p.real() << \" \" << p.imag();\n}\n\nostream &operator<<(ostream &os, const Line &l){\n  return os << l.p << \" \" << l.q;\n}\n\nostream &operator<<(ostream &os, const Circle &c){\n  return os << c.p << \" \" << c.r;\n}\n\nostream &operator<<(ostream &os, const Polygon &g){\n  for (int i = 0; i < (int)g.size(); i++){\n    os << g[i];\n    if (i + 1 < (int)g.size()) os << endl;\n  }\n  return os;\n}\n/* }}} */\n/* dot, cross {{{ */\nReal dot(const Point &a, const Point &b){\n  return real(conj(a) * b);\n}\n\nReal cross(const Point &a, const Point &b){\n  return imag(conj(a) * b);\n}\n/* }}} */\n/* ccw {{{ */\nint ccw(const Point &a, const Point &b, const Point &c){\n  Point u = b - a, v = c - a;\n  if (sgn(cross(u, v)) > 0) return 1;\n  if (sgn(cross(u, v)) < 0) return -1;\n  if (sgn(dot(u, v)) < 0) return 2;\n  if (sgn(norm(u), norm(v)) < 0) return -2;\n  return 0;\n}\n/* }}} */\n/* orthogonal, parallel {{{ */\nbool orthogonal(const Line &l, const Line &m){\n  return sgn(dot(l.q - l.p, m.q - m.p)) == 0;\n}\n\nbool parallel(const Line &l, const Line &m){\n  return sgn(cross(l.q - l.p, m.q - m.p)) == 0;\n}\n/* }}} */\n/* intersect {{{ */\nbool intersectLL(const Line &l, const Line &m){\n  return !parallel(l, m) ? true : parallel(l, Line(l.p, m.p));\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n  return sgn(cross(l.q - l.p, s.p - l.p)) * sgn(cross(l.p - l.p, s.q - l.p)) <= 0;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n  return ~ccw(l.p, l.q, p) & 1;\n}\n\nbool intersectSS(const Segment &s, const Segment &t){\n  return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0\n      && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n  return !ccw(s.p, s.q, p);\n}\n/* }}} */\n/* project, refrect {{{ */\nPoint project(const Line &l, const Point &p){\n  Real t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n  return l.p + t * (l.p - l.q);\n}\n\nPoint reflect(const Line &l, const Point &p){\n  return p + 2.0l * (project(l, p) - p);\n}\n/* }}} */\n/* distance {{{ */\nReal distanceLP(const Line &l, const Point &p){\n  return abs(p - project(l, p));\n}\n\nReal distanceLL(const Line &l, const Line &m){\n  return intersectLL(l, m) ? 0.0l : distanceLP(l, m.p);\n}\n\nReal distanceLS(const Line &l, const Segment &s){\n  if (intersectLS(l, s)) return 0.0l;\n  return min(distanceLP(l, s.p), distanceLP(l, s.q));\n}\n\nReal distanceSP(const Segment &s, const Point &p){\n  if (sgn(dot(s.q - s.p, p - s.p)) <= 0) return abs(s.p - p);\n  if (sgn(dot(s.p - s.q, p - s.q)) <= 0) return abs(s.q - p);\n  return distanceLP(s, p);\n}\n\nReal distanceSS(const Segment &s, const Segment &t){\n  if (intersectSS(s, t)) return 0.0l;\n  return min({\n    distanceSP(s, t.p), distanceSP(s, t.q),\n    distanceSP(t, s.p), distanceSP(t, s.q)\n  });\n}\n/* }}} */\n/* cross point {{{ */\nPoint crossPoint(const Line &l, const Line &m){\n  Real a = cross(l.q - l.p, m.q - m.p);\n  Real b = cross(l.q - l.p, l.q - m.p);\n  if (sgn(a) == 0 && sgn(b) == 0) return m.p;\n  if (sgn(a) == 0) assert(false);\n  return m.p + b / a * (m.q - m.p);\n}\n/* }}} */\n/* area {{{ */\nReal area(const Polygon &g){\n  Real s = 0.0l;\n  for (int i = 0; i < (int)g.size(); i++){\n    s += cross(g[i], g[(i + 1) % g.size()]);\n  }\n  return abs(s / 2.0l);\n}\n/* }}} */\nint contains(const Polygon &g, const Point &p){\n  int in = 0;\n  rep(i, g.size()){\n    Point a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (sgn(imag(a)) <= 0 && sgn(imag(b)) > 0){\n      if (sgn(cross(a, b)) < 0) in ^= 1;\n    }\n    if (sgn(cross(a, b)) == 0 && sgn(dot(a, b)) <= 0) return 2;\n  }\n  return in;\n}\n/* }}} */\n\nsigned main()\n{\n  Polygon g(in());\n  cin >> g;\n  int q = in();\n  rep(q){\n    Point p;\n    cin >> p;\n    int t = contains(g, p);\n    if (t) t = 3 - t;\n    cout << t << endl;\n  } \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\n\n// code from slides\nconst double EPS = 1e-6;\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\n\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nbool gradDir(seg a) {\n\treturn a.b.x - a.a.x >= 0;\n}\n\nbool intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n    double maxDist = 0;\n    maxDist = max(maxDist, dist(a.a, a.b));\n    maxDist = max(maxDist, dist(a.a, b.a));\n    maxDist = max(maxDist, dist(a.a, b.b));\n    maxDist = max(maxDist, dist(a.b, b.a));\n    maxDist = max(maxDist, dist(a.b, b.b));\n    maxDist = max(maxDist, dist(b.a, b.b));\n    return maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS;\n  }\n  return ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b);\n}\n\nvoid printPt(pt p) {\n\tcout << \"(\" << p.first << \", \" << p.second << \")\";\n}\n\nint main() {\n\tint numPolyPoints;\n\tcin >> numPolyPoints;\n\n\tvector<pt> polyPoints;\n\n\tfor (int i = 0; i < numPolyPoints; i++) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tpolyPoints.push_back(make_pair(x, y));\n\t}\n\n\tvector<seg> polygon;\n\tfor (int i = 0; i < numPolyPoints; i++) {\n\t\tif (i == numPolyPoints-1) {\n\t\t\tpolygon.push_back(make_pair(polyPoints[i], polyPoints[0]));\n\t\t\tbreak;\n\t\t}\n\n\t\tpolygon.push_back(make_pair(polyPoints[i], polyPoints[i+1]));\n\t}\n\n\n\tint numQueries;\n\tcin >> numQueries;\n\n\tfor (int q = 0; q < numQueries; q++) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tpt p = make_pair(x, y);\n\n\t\tbool colin = false;\n\t\tfor (auto side : polygon) {\n\t\t\tif ((p == side.first) || (zero(cross(p - side.first, side.second - side.first)) &&\n\t\t\t\tgradDir(make_pair(side.first, p)) == gradDir(make_pair(p, side.second)))) {\n\t\t\t\t// printPt(side.first);\n\t\t\t\t// cout << \", \";\n\t\t\t\t// printPt(p);\n\t\t\t\t// cout << \", \";\n\t\t\t\t// printPt(side.second);\n\t\t\t\t// cout << endl;\n\n\t\t\t\t// cout << grad(make_pair(side.first, p)) << \" // \" << grad(make_pair(p, side.second)) << endl;\n\n\t\t\t\tcolin = true;\n\t\t\t\tcout << \"1\" << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (colin) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tseg test = make_pair(p, make_pair(p.first + 1, 10001));\n\n\t\tint numIntersect = 0;\n\t\tfor (auto side : polygon) {\n\t\t\tif (intersect(side, test)) {\n\t\t\t\tnumIntersect++;\n\t\t\t}\n\t\t}\n\n\t\tif (numIntersect % 2 == 0) {\n\t\t\tcout << \"0\" << endl;\n\t\t} else {\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db long double\nconst db eps = 1e-6;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nconst int N = 111;\npoi p[N];\n\nint main() {\n\tios :: sync_with_stdio(false);\n\tint n; cin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tp[i].r();\n\tp[n] = p[0];\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r(); poi s = {1e9L + 7, 1e9L + 9};\n\t\tbool on = false;\n\t\tint inter = 0;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(!ccw(p[i], p[i + 1], t))\n\t\t\t\ton = true;\n\t\t\tif(si(s, t, p[i], p[i + 1]))\n\t\t\t\tinter ++;\n\t\t}\n\t\tif(on) cout << \"1\\n\";\n\t\telse if(inter & 1) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* template.cpp {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n \n// #define int long long\n#define GET_MACRO(a, b, c, d, NAME, ...) NAME\n#define REP1(n) REP2(i_, n)\n#define REP2(i, n) REP3(i, 0, n)\n#define REP3(i, a, b) REP4(i, a, b, 1)\n#define REP4(i, a, b, s) for (long long i = (a); i < (long long)(b); i += (long long)(s))\n#define RREP1(n) RREP2(i_, n)\n#define RREP2(i, n) RREP3(i, 0, n)\n#define RREP3(i, a, b) RREP4(i, a, b, 1)\n#define RREP4(i, a, b, s) for (long long i = (b) - 1; i >= (long long)(a);  i -= (long long)(s))\n#define rep(...) GET_MACRO(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define rrep(...) GET_MACRO(__VA_ARGS__, RREP4, RREP3, RREP2, RREP1)(__VA_ARGS__)\n#define fs first\n#define sc second\n#define all(c) std::begin(c), std::end(c)\n#define rall(c) (c).begin(), (c).end()\n#define pcnt(x) __builtin_popcountll(x)\n#define each(x, c) for (auto &&x : c)\n#define endl \"\\n\"\n#define y0 y0_\n#define y1 y1_\n#define yn yn_\n#define left left_\n#define right right_\n \n#define TMP_T template<typename T>\n#define TMP_TU template<typename T, typename U>\n#define TMP_Ts template<typename ...T>\n#define TMP_NTs template<size_t N, typename ...T>\n#define TMP_CT template<bool C, typename T = void>\n \n#ifndef DEBUG\n#define cerr no_output\nstruct NoOutput : ostream {\n  TMP_T ostream &operator<<(const T &){ return *this; }\n} no_output;\n#endif\n \nusing uint = unsigned;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nTMP_T using PQL = priority_queue<T, vector<T>, greater<T>>;\nTMP_T using PQG = priority_queue<T>;\nTMP_CT using enable_if_t = typename enable_if<C, T>::type;\n \nconst ll LLINF = 1e18 + 10;\n#ifndef int\nconst int INF = 1e9 + 10;\n#else\nconst int INF = LLINF;\n#endif\n \nconst int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nconst int dy[] = {0, -1, 0, 1, -1, -1, 1, 1};\n \nTMP_T inline constexpr T sq(T x){ return x * x; }\nTMP_TU inline T& chmin(T &x, U y){ if (x > y) x = y; return x; }\nTMP_TU inline T& chmax(T &x, U y){ if (x < y) x = y; return x; }\n \nTMP_NTs enable_if_t<(N >= sizeof...(T))> input_tuple(istream &, tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> input_tuple(istream &is, tuple<T...> &x){ is >> get<N>(x); input_tuple<N + 1, T...>(is, x); }\nTMP_Ts ostream &operator>>(istream &is, tuple<T...> &x){ input_tuple<0, T...>(is, x); return is; }\nTMP_TU ostream &operator>>(istream &is, pair<T, U> &x){ return is >> x.first >> x.second; }\nTMP_NTs enable_if_t<(N >= sizeof...(T))> print_tuple(ostream &, const tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> print_tuple(ostream &os, const tuple<T...> &x){ os << (N > 0 ? \" \" : \"\") << get<N>(x); print_tuple<N + 1, T...>(os, x); }\nTMP_Ts ostream &operator<<(ostream &os, const tuple<T...> &x){ print_tuple<0, T...>(os, x); return os; }\nTMP_TU ostream &operator<<(ostream &os, const pair<T, U> &x){ return os << x.first << \" \" << x.second; }\nTMP_T vector<T> reversed(const vector<T> &c){ auto d = c; reverse(all(d)); return d; }\nstring reversed(const string &s){ auto t = s; reverse(all(t)); return t; }\nTMP_T void unique(vector<T> &c){ sort(all(c)); c.erase(unique(all(c)), end(c)); }\nTMP_T vector<T> uniqued(const vector<T> &c){ auto d = c; unique(d); return d; }\n\n#undef TMP_T\n#undef TMP_TU\n#undef TMP_Ts\n#undef TMP_NTs\n#undef TMP_CT\n\nll gcd(ll a, ll b){ return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b){ return a / gcd(a, b) * b; }\ntuple<ll, ll, ll> extgcd(ll a, ll b){\n  if (b){\n    ll g, x, y;\n    tie(g, x, y) = extgcd(b, a % b);\n    return make_tuple(g, y, x - a / b * y);\n  }\n  return make_tuple(a, 1, 0);\n}\nll invmod(ll a, ll m = 1000000007){\n  ll g, x;\n  tie(g, x, ignore) = extgcd(a, m);\n  return g == 1 ? (x + m) % m : 0;\n}\n\ninline ll in(){ ll x; cin >> x; return x; }\n \nstruct prepare {\n  prepare(){\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(12);\n    cerr << fixed << setprecision(12);\n#ifndef DEBUG\n    cin.tie(nullptr);\n#endif\n  }\n} prepare_;\n/* }}} */\n/* geometry.cpp {{{ */\n/* object {{{ */\nusing Real = long double;\nusing Point = complex<Real>;\n\nstruct Line {\n  Point p, q;\n  Line(){}\n  Line(const Point &p, const Point &q): p(p), q(q){}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n  Circle(){}\n  Circle(const Point &p, Real r): p(p), r(r){}\n};\n\nusing Segment = Line;\nusing Polygon = vector<Point>;\n\nint sgn(Real, Real);\nnamespace std {\n  bool operator<(const Point &a, const Point &b){\n    return sgn(real(a), real(b)) ? sgn(real(a), real(b)) < 0 : sgn(imag(a), imag(b)) < 0;\n  }\n  bool operator==(const Point &a, const Point &b){\n    return sgn(real(a), real(b)) == 0 && sgn(imag(a), imag(b)) == 0;\n  }\n}\n/* }}} */\n/* const {{{ */\nconst Real EPS = 1e-8l;\nconst Real PI = acos(-1.0l);\n/* }}} */\n/* compare {{{ */\nint sgn(Real x){\n  return (x > EPS) - (x < -EPS);\n}\n\nint sgn(Real x, Real y){\n  return sgn(x - y);\n}\n/* }}} */\n/* input {{{ */\nistream &operator>>(istream &is, Point &p){\n  Real x, y;\n  is >> x >> y;\n  p.real(x), p.imag(y);\n  return is;\n}\n\nistream &operator>>(istream &is, Line &l){\n  return is >> l.p >> l.q;\n}\n\nistream &operator>>(istream &is, Circle &c){\n  return is >> c.p >> c.r;\n}\n\nistream &operator>>(istream &is, Polygon &g){\n  each(p, g) is >> p;\n  return is;\n}\n/* }}} */\n/* output {{{ */\nostream &operator<<(ostream &os, const Point &p){\n  return os << p.real() << \" \" << p.imag();\n}\n\nostream &operator<<(ostream &os, const Line &l){\n  return os << l.p << \" \" << l.q;\n}\n\nostream &operator<<(ostream &os, const Circle &c){\n  return os << c.p << \" \" << c.r;\n}\n\nostream &operator<<(ostream &os, const Polygon &g){\n  for (int i = 0; i < (int)g.size(); i++){\n    os << g[i];\n    if (i + 1 < (int)g.size()) os << endl;\n  }\n  return os;\n}\n/* }}} */\n/* dot, cross {{{ */\nReal dot(const Point &a, const Point &b){\n  return real(conj(a) * b);\n}\n\nReal cross(const Point &a, const Point &b){\n  return imag(conj(a) * b);\n}\n/* }}} */\n/* ccw {{{ */\nint ccw(const Point &a, const Point &b, const Point &c){\n  Point u = b - a, v = c - a;\n  if (sgn(cross(u, v)) > 0) return 1;\n  if (sgn(cross(u, v)) < 0) return -1;\n  if (sgn(dot(u, v)) < 0) return 2;\n  if (sgn(norm(u), norm(v)) < 0) return -2;\n  return 0;\n}\n/* }}} */\n/* orthogonal, parallel {{{ */\nbool orthogonal(const Line &l, const Line &m){\n  return sgn(dot(l.q - l.p, m.q - m.p)) == 0;\n}\n\nbool parallel(const Line &l, const Line &m){\n  return sgn(cross(l.q - l.p, m.q - m.p)) == 0;\n}\n/* }}} */\n/* intersect {{{ */\nbool intersectLL(const Line &l, const Line &m){\n  return !parallel(l, m) ? true : parallel(l, Line(l.p, m.p));\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n  return sgn(cross(l.q - l.p, s.p - l.p)) * sgn(cross(l.p - l.p, s.q - l.p)) <= 0;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n  return ~ccw(l.p, l.q, p) & 1;\n}\n\nbool intersectSS(const Segment &s, const Segment &t){\n  return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0\n      && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n  return !ccw(s.p, s.q, p);\n}\n/* }}} */\n/* project, refrect {{{ */\nPoint project(const Line &l, const Point &p){\n  Real t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n  return l.p + t * (l.p - l.q);\n}\n\nPoint reflect(const Line &l, const Point &p){\n  return p + 2.0l * (project(l, p) - p);\n}\n/* }}} */\n/* distance {{{ */\nReal distanceLP(const Line &l, const Point &p){\n  return abs(p - project(l, p));\n}\n\nReal distanceLL(const Line &l, const Line &m){\n  return intersectLL(l, m) ? 0.0l : distanceLP(l, m.p);\n}\n\nReal distanceLS(const Line &l, const Segment &s){\n  if (intersectLS(l, s)) return 0.0l;\n  return min(distanceLP(l, s.p), distanceLP(l, s.q));\n}\n\nReal distanceSP(const Segment &s, const Point &p){\n  if (sgn(dot(s.q - s.p, p - s.p)) <= 0) return abs(s.p - p);\n  if (sgn(dot(s.p - s.q, p - s.q)) <= 0) return abs(s.q - p);\n  return distanceLP(s, p);\n}\n\nReal distanceSS(const Segment &s, const Segment &t){\n  if (intersectSS(s, t)) return 0.0l;\n  return min({\n    distanceSP(s, t.p), distanceSP(s, t.q),\n    distanceSP(t, s.p), distanceSP(t, s.q)\n  });\n}\n/* }}} */\n/* cross point {{{ */\nPoint crossPoint(const Line &l, const Line &m){\n  Real a = cross(l.q - l.p, m.q - m.p);\n  Real b = cross(l.q - l.p, l.q - m.p);\n  if (sgn(a) == 0 && sgn(b) == 0) return m.p;\n  if (sgn(a) == 0) assert(false);\n  return m.p + b / a * (m.q - m.p);\n}\n/* }}} */\n/* area {{{ */\nReal area(const Polygon &g){\n  Real s = 0.0l;\n  for (int i = 0; i < (int)g.size(); i++){\n    s += cross(g[i], g[(i + 1) % g.size()]);\n  }\n  return abs(s / 2.0l);\n}\n/* }}} */\nint contains(const Polygon &g, const Point &p){\n  int in = 0;\n  rep(i, g.size()){\n    Point a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (sgn(imag(a)) * sgn(imag(b)) <= 0){\n      if (sgn(cross(a, b)) < 0) in ^= 1;\n    }\n    if (sgn(cross(a, b)) == 0 && sgn(dot(a, b)) <= 0) return 2;\n  }\n  return in;\n}\n/* }}} */\n\nsigned main()\n{\n  Polygon g(in());\n  cin >> g;\n  int q = in();\n  rep(q){\n    Point p;\n    cin >> p;\n    int t = contains(g, p);\n    if (t) t = 3 - t;\n    cout << t << endl;\n  } \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-9;\nstruct dot{\n\tdouble x,y;\n\tdouble len(){return sqrt(x*x+y*y);}\n\tdot(double a=0.0,double b=0.0){x=a,y=b;}\n\tdot operator +(const dot&b)const {return dot(x+b.x,y+b.y);}\n\tdot operator -(const dot&b)const {return dot(x-b.x,y-b.y);}\n\tdot operator *(const double&z)const {return dot(x*z,y*z);}\n\tbool operator <(const dot&b)const {return (x<b.x)||(x==b.x&&y<b.y);}\n\tbool operator ==(const dot&b)const {return fabs(x-b.x)<eps&&fabs(y-b.y)<eps;}\t\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);} \n};\nstruct line{\n\tdot x1,x2;\n\tvoid read(){x1.read();x2.read();};\n\tline(dot a=dot(0.0,0.0),dot b=dot(0.0,0.0)){x1=a,x2=b;} \n\tdot getdot(){return x2-x1;}\n};\ndouble chaji(dot x,dot y){\n\treturn x.x*y.y-x.y*y.x;\n}\ndouble neiji(dot x,dot y){\n\treturn x.x*y.x+x.y*y.y;\n}\ndouble cos(dot x,dot y){\n\tif (!x.len()||!y.len())return 0;\n\treturn neiji(x,y)/x.len()/y.len();\n}\ndot Projection(dot x,line y){//求x关于直线y的投影点（垂足） \n\ty.x2=y.x2-y.x1;\n\tx=x-y.x1;\n\tdouble len=cos(x,y.x2)*x.len()/y.x2.len();\n\ty.x2=y.x2*len;\n\treturn y.x2+y.x1;\n}\ndot Reflection(dot x,line y){//求x关于直线y的对称点 \n\tdot z=Projection(x,y);\n\treturn z*2-x;\n}\nint Counter_Clockwise(dot x,line y){//求两个向量的五种关系 \n\tx=x-y.x1;y.x2=y.x2-y.x1;\n\tif (chaji(y.x2,x)!=0){\n\t\tif (chaji(y.x2,x)>0)return 1;\n\t\treturn 2;\n\t} \n\tif (fabs(cos(x,y.x2)+1)<eps)return 3;\n\tif (x.len()>y.x2.len())return 4;\n\treturn 5;\n} \nint Parallel_Orthogonal(line x,line y){//求两个直线是垂直还是平行还是其他 \n\tdot a=x.getdot(),b=y.getdot();\n\tif (chaji(a,b)==0)return 2;\n\tif (neiji(a,b)==0)return 1;\n\treturn 0;\n}\nint Intersection(line x,line y){//求两条直线是否相交 \n\tint Minx1=min(x.x1.x,x.x2.x),Maxx1=max(x.x1.x,x.x2.x);\n\tint Minx2=min(y.x1.x,y.x2.x),Maxx2=max(y.x1.x,y.x2.x);\n\tint Miny1=min(x.x1.y,x.x2.y),Maxy1=max(x.x1.y,x.x2.y);\n\tint Miny2=min(y.x1.y,y.x2.y),Maxy2=max(y.x1.y,y.x2.y);\n\tif (Minx1>Maxx2||Minx2>Maxx1)return 0;\n\tif (Miny1>Maxy2||Miny2>Maxy1)return 0;\n\tif (chaji(x.getdot(),y.x1-x.x1)*chaji(x.getdot(),y.x2-x.x1)>0)return 0;\n\tif (chaji(y.getdot(),x.x1-y.x1)*chaji(y.getdot(),x.x2-y.x1)>0)return 0;\n\treturn 1;\n}\ndot CrossPoint(line x,line y){//求两条线段的交点 \n\tif (fabs(cos(x.getdot(),y.getdot())-1)<eps){\n\t\tif (x.x2<y.x2)return y.x2;\n\t\telse return x.x2;\n\t}\n\telse {\n\t\tif (x.x2.x-x.x1.x==0){\n\t\t\tdouble k2=(y.x2.y-y.x1.y)/(y.x2.x-y.x1.x),b2=y.x2.y-y.x2.x*k2;\n\t\t\treturn dot(x.x2.x,x.x2.x*k2+b2);\n\t\t}\n\t\tif (y.x2.x-y.x1.x==0){\n\t\t\tdouble k1=(x.x2.y-x.x1.y)/(x.x2.x-x.x1.x),b1=x.x2.y-x.x2.x*k1;\n\t\t\treturn dot(y.x2.x,y.x2.x*k1+b1);\t\t\t\n\t\t}\n\t\tdouble k1=(x.x2.y-x.x1.y)/(x.x2.x-x.x1.x),b1=x.x2.y-x.x2.x*k1;\n\t\tdouble k2=(y.x2.y-y.x1.y)/(y.x2.x-y.x1.x),b2=y.x2.y-y.x2.x*k2;\n\t\tdot ans;\n\t\tans.x=(b2-b1)/(k1-k2);ans.y=ans.x*k1+b1;\n\t\treturn ans;\n\t}\n} \ndouble Dis(dot x,dot y){//点到点的距离 \n\treturn sqrt((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));\n}\ndouble dist(line x,dot y){//点到线段的距离 \n\tdot P=Projection(y,x);\n\tdouble k=neiji(x.getdot(),P-x.x1)/neiji(x.getdot(),x.getdot());\n\tif (k<=0)return Dis(x.x1,y);\n\tif (k>=1)return Dis(x.x2,y);\n\treturn Dis(y,P);\n}\ndouble Distance(line x,line y){//线段之间距离 \n\treturn min(min(dist(x,y.x1),dist(x,y.x2)),min(dist(y,x.x1),dist(y,x.x2)));\n}\nstruct polygon{\n\tvector<dot > A;\n\tdouble S(){//多边形面积\n\t\tdouble ans=0;\n\t\tfor (int i=0;i+1<A.size();i++)ans+=chaji(A[i],A[i+1])/2;\n\t\tif (A.size()>1)ans+=chaji(A[A.size()-1],A[0])/2;\n\t\treturn ans;\t\t\n\t}\n\tdouble C(){//多边形周长 \n\t\tdouble ans=0;\n\t\tfor (int i=0;i+1<A.size();i++)ans+=Dis(A[i],A[i+1]);\n\t\tif (A.size()>1)ans+=Dis(A[A.size()-1],A[0]);\n\t\treturn ans;\n\t}\n\tvoid read(){\n\t\tint n;scanf(\"%d\",&n);A.resize(n);\n\t\tfor (int i=0;i<n;i++)A[i].read();\n\t}\n\tint Is_Convex(){//是否是凸多边形 \n\t\tfor (int i=0;i<A.size();i++)\n\t\t\tif (chaji(A[(i+1)%A.size()]-A[i],A[(i+2)%A.size()]-A[(i+1)%A.size()])<0)\n\t\t\t\treturn 0;\n\t\treturn 1;\t\n\t}\n};\nint PolygonPointContainment(polygon G,dot x){//射线和多边形的关系\n\tfor (int i=0;i<G.A.size();i++)\n\t\tif (Counter_Clockwise(x,line(G.A[i],G.A[(i+1)%G.A.size()]))==5)return 1;\n\tfor (int i=0;i<G.A.size();i++)\n\t\tif (x==G.A[i])return 1;\n\tdouble k=sqrt(2)+1,b=x.y-x.x*k;\n\tdot x2=dot(-1000000000,-1000000000*k+b);line R=line(x,x2);\n\tint ans=0;\n\tfor (int i=0;i<G.A.size();i++)\n\t\tif (Intersection(R,line(G.A[i],G.A[(i+1)%G.A.size()])))ans++;\n\tif (ans&1)return 2;\n\treturn 0;\t\n}\nint main(){\n\tpolygon A;\n\tA.read();\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tdot x;x.read();\n\t\tprintf(\"%d\\n\",PolygonPointContainment(A,x));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\ninline double add(double a, double b){\n    return abs(a+b)<(1e-10)*(abs(a)+abs(b)) ? 0.0 : a+b;\n}\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        return (vec){add(x,-b.x),add(y,-b.y)};\n    }\n    vec operator+(vec b){\n        return (vec){add(x,b.x),add(y,b.y)};\n    }\n    vec operator*(double d){\n        return (vec){x*d,y*d};\n    }\n    double dot(vec v){\n        return add(x*v.x,y*v.y);\n    }\n    double cross(vec v){\n        return add(x*v.y,-y*v.x);\n    }\n    double norm(){\n        return sqrt(x*x+y*y);\n    }\n};\ntypedef vector<vec> polygon;\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = ab.cross(ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(ab.dot(ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(ab.dot(ab)<ac.dot(ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isOnEdge(polygon& g,vec& p){\n    int n=g.size()-1;\n    for(int i=0;i<n;i++){\n        if(!ccw(g[i],g[i+1],p)) return true;\n    }\n    return false;\n}\n/**\nbool isInterSection(vec& p0,vec& p1,vec& p2,vec& p3){//??????p[0]p[1]??¨p[2]p[3]\n    switch(ccw(p0,p1,p2)*ccw(p0,p1,p3)){//\n        case -1:\n        case -4:\n        case 0://?????§?§???????????????????????????????????????????????????????0??§return true;?????????\n            break;\n        default:\n            return false;\n    }\n    switch(ccw(p2,p3,p0)*ccw(p2,p3,p1)){\n        case -1:\n        case -4:\n        case 0://?????§?§???????????????????????????????????????????????????????0??§return true;?????????\n            break;\n        default:\n            return false;\n    }\n   return true;\n}\n**/\n\nint isInterSection(vec& p0,vec& p1,vec& p2,vec& p3){//??????p[0]p[1]??¨p[2]p[3]\n    switch(ccw(p0,p1,p2)*ccw(p0,p1,p3)){\n        case -1:\n        case -4:\n            break;\n        case 0:\n            return ~(ccw(p0,p1,p2)|ccw(p0,p1,p3))?2:-1;\n        default:\n            return 0;\n    }\n    switch(ccw(p2,p3,p0)*ccw(p2,p3,p1)){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}\n\nbool isInside(polygon& g,vec& p){\n    int n=g.size()-1,c=0;\n    vec O = (vec){-10001,-10001};\n    for(int i=0;i<n;i++){\n        c+=isInterSection(O,p,g[i],g[i+1]);\n    }\n    if(c%2) return true;\n    else return false;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    polygon g;\n    vec v;\n    while(n--){\n        cin >> v.x >> v.y;\n        g.push_back(v);\n    }\n    g.push_back(g[0]);\n\n    cout.precision(1);\n    cout << fixed;\n\n    cin >> n;\n    while(n--){\n        cin >> v.x >> v.y;\n        if(isOnEdge(g,v)){\n            cout << 1 << endl;\n        }else if(isInside(g,v)){\n            cout << 2 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <iomanip>\n#include <algorithm>\n#define EPS (1e-10)\nusing namespace std;\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT=0;\nclass Point{\npublic:\n    double x,y;\n    Point(double x=0, double y=0):x(x),y(y){}\n    Point operator +(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(double k){\n        return Point(k*x,k*y);\n    }\n    Point operator /(double k){\n        return Point(x/k,y/k);\n    }\n\n    double norm(){\n        return x*x+y*y;\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n};\ntypedef Point Vector;\nvector<Point>g;\nstruct segment{\n    Point p1,p2;\n};\ntypedef segment Line;\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle (double x=0, double y=0,double r=0):c(x,y),r(r){}\n};\ndouble dot(const Vector &v1,const Vector &v2){\n    return v1.x*v2.x+v1.y*v2.y;\n}\ndouble cross(const Vector &v1,const Vector &v2){\n    return v1.x*v2.y-v1.y*v2.x;\n}\nbool isParallel(const Vector &v1,const Vector &v2){\n    if(fabs(cross(v1,v2)-0.0)<EPS)return true;\n    return false;\n}\nbool isOrthogonal(const Vector &v1,const Vector &v2){\n    if(fabs(dot(v1,v2)-0.0)<EPS)return true;\n    return false;\n}\nPoint projection( Point &p, Point &p1, Point &p2){\n    Vector a=p-p1;\n    Vector b=p2-p1;\n    double r=dot(a,b);\n    double pro_abs=r/b.norm();\n    Vector res=b*pro_abs;\n    return Point(res.x+p1.x,res.y+p1.y);\n}\nPoint reflection(Point &p, Point &p1, Point &p2){\n    Point pro=projection(p,p1,p2);\n    Vector v=pro-p;\n    v=v*2;\n    return Point(v.x+p.x,v.y+p.y);\n}\nint ccw(Point &p, Point &p1, Point &p2){\n    Vector a=p-p1;\n    Vector b=p2-p1;\n    if(cross(a,b)>0)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<0)return CLOCKWISE;\n    if(dot(a,b)<0)return ONLINE_BACK;\n    if(a.norm()>b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersect(segment &s1,segment &s2){\n    if(ccw(s1.p1,s2.p1,s2.p2)*ccw(s1.p2,s2.p1,s2.p2)<=0 && ccw(s2.p1,s1.p1,s1.p2)*ccw(s2.p2,s1.p1,s1.p2)<=0)\n        return true;\n    return false;\n}\ndouble getDistanceSP(Point &p,segment &s){\n    if(dot(p-s.p1,s.p2-s.p1)<0)return (p-s.p1).abs();\n    if(dot(p-s.p2,s.p1-s.p2)<0)return (p-s.p2).abs();\n    return fabs(cross(p-s.p1,s.p2-s.p1)/(s.p2-s.p1).abs());\n}\ndouble Distance(segment &s1,segment &s2){\n    if(intersect(s1,s2))return 0;\n    return min(min(getDistanceSP(s1.p1,s2),getDistanceSP(s1.p2,s2)),min(getDistanceSP(s2.p1,s1),getDistanceSP(s2.p2,s1)));\n}\nPoint CrossPoint(segment &s1,segment &s2){\n    Vector base =s2.p2-s2.p1;\n    double d1=fabs(cross(base,s1.p1-s2.p1));\n    double d2=fabs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return (s1.p2-s1.p1)*t+s1.p1;\n}\npair<Point,Point> getCrossPoints(Circle &c,Line &l){\n    Vector e = (l.p2-l.p1)/(l.p2-l.p1).abs();\n    Point p=projection(c.c,l.p1,l.p2);\n    double len=sqrt(c.r*c.r-(p-c.c).norm());\n    return make_pair(p-e*len,p+e*len);\n }\npair<Point,Point> getCrossPoints(Circle &c1,Circle &c2){\n    double d=(c1.c-c2.c).abs();\n    double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    double t=atan2((c2.c-c1.c).y,(c2.c-c1.c).x);\n    Point p1(c1.r*cos(t+a),c1.r*sin(t+a));\n    Point p2(c1.r*cos(t-a),c1.r*sin(t-a));\n    return make_pair(c1.c+p1,c1.c+p2);\n}\n//点的内包\nint PPC(Point &p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++)\n    {\n        Vector a=g[i]-p;\n        Vector b=g[(i+1)%n]-p;\n        if(fabs(cross(a,b)-0)<EPS && dot(a,b)<=0)return 1;\n        if(a.y>b.y)swap(a,b);\n        if(a.y<EPS && 0<b.y && cross(a,b)>0)x=!x;\n    }\n    return x?2:0;\n}\nint main()\n{\n    int n,q,x,y;\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>x>>y;\n        Point p(x,y);\n        g.push_back(p);\n    }\n    cin>>q;\n    for(int i=0;i<q;i++)\n    {\n        cin>>x>>y;\n        Point p(x,y);\n        cout<<PPC(p)<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n  \nusing namespace std;\n\ntypedef long long ll;\n\nclass Point {\npublic:\n  ll x, y;\n  \n  Point () {}\n  Point ( ll x = 0, ll y = 0 ) : x(x), y(y) {}\n  \n  Point operator - ( const Point &p ) const { return Point(x - p.x, y - p.y); }\n};\n  \ntypedef Point Vector;\n  \ntypedef vector<Point> Polygon;\n  \nll dot( Vector a, Vector b ) { return a.x*b.x + a.y*b.y; }\nll cross( Vector a, Vector b ) { return a.x*b.y - a.y*b.x; }\n\n/*\n  contain: 2\n  on segment: 1\n  the other case: 0\n*/\nint\npointInPolygon(Polygon G, Point p) {\n  \n  int n = G.size();\n  bool x = false;\n  \n  for(int i=0; i<n; i++) {\n    Vector V1 = G[i] - p, V2 = G[(i+1)%n] - p;\n    \n    if( V1.y > V2.y ) swap(V1, V2);\n    if( V1.y <= 0 && 0 < V2.y && cross(V1, V2) > 0 ) x = !x;\n    if( cross(V1, V2) == 0 && dot(V1, V2) <= 0 ) return 1;\n  }\n  return (x?2:0);\n}\n  \nint\nmain() {\n  int n, q;\n  ll x, y;\n    \n  Polygon G;\n  cin >> n;\n    \n  for(int i=0; i<n; i++) {\n    cin >> x >> y;\n    G.push_back(Point(x, y));\n  }\n    \n  cin >> q;\n  for(int i=0; i<q; i++) {\n    cin >> x >> y;\n    cout << pointInPolygon(G, Point(x, y)) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cassert>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\n#define pb push_back\n#define mp make_pair\n#define mt make_tuple\n\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\ntypedef vector<P> Polygon;\n\nnamespace std {\n    bool operator < (const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\n// ??????\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ????¬?????????????2??????\n// not verified\ndouble norm(const P& a) {\n    return real(conj(a)*a);\n}\n\n// ??????\ndouble cross(const P& a, const P& b) {\n    return imag(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\n// projection?????\\??¨???\n// not verified\nP projection(const L &l, const P &p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n}\n\n// ???p0, p1???????????´??????????§°?????¨????????????p2??¨????§°??????\nP reflection(const P& p0, const P& p1, const P& p2) {\n    P proj = projection(p0, p1, p2);\n    return proj - (p2 - proj);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;                               // a--c--b on line\n}\n\n// 2??´?????????????????????\nbool is_parallel(const L& l1, const L& l2) {\n    P p1 = l1[1] - l1[0];\n    P p2 = l2[1] - l2[0];\n    auto res = ccw(p1, p2, P(0,0));\n    return (res == 2 || res == -2 || res == 0);\n}\n\n// 2??´???????????´?????????\nbool is_ortho(const L& l1, const L& l2) {\n    P p1 = l1[1] - l1[0];\n    P p2 = l2[1] - l2[0];\n    return dot(p1, p2) == 0;\n}\n\n// l: line(??´???)\n// s: segment(??????)\n// not verified\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\n\n// not verified\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n        cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\n\n// not verified\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\n\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\n// not verified\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\n// not verified\ndouble distanceLP(const L &l, const P &p) {\n    return abs(p - projection(l, p));\n}\n\n// not verified\ndouble distanceLL(const L &l, const L &m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\n\n// not verified\ndouble distanceLS(const L &l, const L &s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\n\ndouble distanceSP(const L &s, const P &p) {\n    const P r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n               min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\n// 2??´????????????\nP crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n}\n\n// ????§???¢?????¢???????±???????\n// P???????????¨???????????????\ndouble area(const Polygon& poly) {\n    double area = 0.0;\n    REP(i, SIZE(poly))\n        area += cross(curr(poly, i), next(poly, i));\n    return abs(area) * 0.5;\n}\n\n// ??????????±???????\n// ????????????????¨?????????§????????????\nPolygon convexHull(const Polygon& poly) {\n    Polygon ps = poly;\n\n    int n = ps.size(), k = 0;\n    sort(ALL(ps));\n    Polygon ch(2*n);\n    for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n        while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n    for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n        while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n    ch.resize(k-1);\n    return ch;\n}\n\n// ?????§??????\n// poly?????????????¨???¨?????§?????????????´?????????????????????¨???????????????\n// ???????????´??????????????¶???????¨±???\nbool isConvex(const Polygon &poly) {\n    REP(i, SIZE(poly)) {\n        if (ccw(prev(poly, i), curr(poly, i), next(poly, i)) == -1)\n            return false;\n    }\n    return true;\n}\n\n// poly????????§???????????¨?????????\n// 0: OUT\n// 1: ON\n// 2: IN\n// not verified\nenum { OUT, ON, IN };\nint convexContains(const Polygon &poly, const P &p) {\n  const int n = poly.size();\n  P g = (poly[0] + poly[n/3] + poly[2*n/3]) / 3.0; // inner-P\n  int a = 0, b = n;\n  while (a+1 < b) { // invariant: c is in fan g-poly[a]-poly[b]\n    int c = (a + b) / 2;\n    if (cross(poly[a]-g, poly[c]-g) > 0) { // angle < 180 deg\n      if (cross(poly[a]-g, p-g) > 0 && cross(poly[c]-g, p-g) < 0) b = c;\n      else                                                  a = c;\n    } else {\n      if (cross(poly[a]-g, p-g) < 0 && cross(poly[c]-g, p-g) > 0) a = c;\n      else                                                  b = c;\n    }\n  }\n  b %= n;\n  if (cross(poly[a] - p, poly[b] - p) < 0) return OUT;\n  if (cross(poly[a] - p, poly[b] - p) > 0) return IN;\n  return ON;\n}\n\n// poly????????§???????????????\n// 0: OUT\n// 1: ON\n// 2: IN\nint contains(const Polygon& poly, const P& p) {\n    bool in = false;\n    REP(i, SIZE(poly)) {\n        P a = curr(poly,i) - p, b = next(poly,i) - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b))\n            if (cross(a, b) < 0) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n\n\nint main(){\n    int N;\n    cin >> N;\n    Polygon poly;\n    REP(n, N) {\n        double x, y;\n        cin >> x >> y;\n        poly.pb( P(x,y) );\n    }\n\n    int Q;\n    cin >> Q;\n    REP(q, Q) {\n        double x, y;\n        cin >> x >> y;\n        cout << contains(poly, P(x,y)) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\n#define rep(i, n) for (int64_t i = 0; i < (n); i++)\n#define irep(i, n) for (int64_t i = 0; i <= (n); i++)\n#define rrep(i, n) for (int64_t i = (n)-1; i >= 0; i--)\n#define rirep(i, n) for (int64_t i = n; i >= 0; i--)\n\nclass Vec;\nVec operator/(const Vec& v, const double& divisor);\nVec operator*(const double& scale, const Vec& v);\n\nclass Vec {\n  using F = double;\n  vector<F> container;\n\n public:\n  Vec(size_t size) : container(size) {}\n  Vec(initializer_list<F> elements)\n      : container(elements.begin(), elements.end()) {}\n  size_t dim() const { return container.size(); }\n  F& operator[](const size_t size) { return container.at(size); }\n  const F& operator[](const size_t size) const { return container.at(size); }\n  Vec operator+(const Vec& other) const {\n    Vec ret(*this);\n    for (size_t i = 0; i < dim(); i++) ret[i] += other[i];\n    return ret;\n  }\n  Vec operator-(const Vec& other) const { return (*this) + (-other); }\n  Vec operator-() const { return -1.0 * (*this); }\n  F inner(const Vec& other) const {\n    F acc = 0;\n    for (size_t i = 0; i < dim(); i++) {\n      acc += (*this)[i] * other[i];\n    }\n    return acc;\n  }\n  F norm() const { return sqrt(inner(*this)); }\n  Vec unit() const { return (*this) / this->norm(); }\n  F ccw(const Vec& other) const {\n    return (*this)[0] * other[1] - other[0] * (*this)[1];\n  }\n  Vec normal() const { return Vec({-(*this)[1], (*this)[0]}); }\n};\nVec operator/(const Vec& v, const double& divisor) { return 1.0 / divisor * v; }\nVec operator*(const double& scale, const Vec& v) {\n  Vec ret(v);\n  for (size_t i = 0; i < ret.dim(); i++) ret[i] *= scale;\n  return ret;\n}\n\nclass Segment {\n  const Vec m_start;\n  const Vec m_end;\n\n public:\n  Segment(const Vec& start, const Vec& end) : m_start(start), m_end(end) {}\n  static const int ONLINE = 0x7;\n  static const int ONSEGMENT = 0x1;\n  static const int FRONT = 0x2;\n  static const int BACK = 0x4;\n  static const int OFFLINE = 0x18;\n  static const int CCW = 0x8;\n  static const int CW = 0x10;\n  int check_rel(const Vec& p, double eps) const {\n    const Vec u = direction();\n    const Vec v = p - m_start;\n    const double uLen = u.norm();\n\n    const double a = u.ccw(v);\n\n    int result = 0;\n    if (a > eps) {\n      result |= CCW;\n    } else if (a < -eps) {\n      result |= CW;\n    } else {\n      const double det = u.inner(v) / uLen;\n      if (det < -eps) {\n        result |= BACK;\n      } else if (det > uLen + eps) {\n        result |= FRONT;\n      } else {\n        result |= ONSEGMENT;\n      }\n    }\n    return result;\n  }\n  bool intersect(const Segment& other, const double eps) const {\n    const Vec u = other.m_start - m_start, w = other.m_end - m_start;\n    const Vec v0 = m_end - m_start, v1 = other.m_end - other.m_start;\n\n    const double vn = v0.norm();\n    double u_v = v0.inner(u) / vn;\n    double w_v = v0.inner(w) / vn;\n    if (abs(abs(u_v / u.norm()) - 1) < eps &&\n        abs(abs(w_v / w.norm()) - 1) < eps) {\n      if (u_v > w_v) {\n        swap(u_v, w_v);\n      }\n      return !(u_v > vn + eps || w_v < -eps);\n    }\n    bool cond1 =\n        v0.ccw(other.m_start - m_start) * v0.ccw(other.m_end - m_start) < eps;\n    bool cond2 =\n        v1.ccw(m_start - other.m_start) * v1.ccw(m_end - other.m_start) < eps;\n    return cond1 && cond2;\n  }\n  Vec direction() const { return m_end - m_start; }\n  double dist(const Vec& p) const {\n    const Vec dir = direction();\n    const Vec d = dir.unit();\n    const Vec q = p - m_start;\n    const double a = d.inner(q);\n    if (a < 0) {\n      return (m_start - p).norm();\n    } else if (dir.norm() < a) {\n      return (m_end - p).norm();\n    } else {\n      return abs(d.normal().inner(q));\n    }\n  }\n  double dist(const Segment& other) const {\n    if (intersect(other, 0.0)) {\n      return 0.0;\n    }\n    return min(min(dist(other.m_start), dist(other.m_end)),\n               min(other.dist(m_start), other.dist(m_end)));\n  }\n};\n\nclass Polygon {\n  const vector<Vec>& vert;\n\n public:\n  Polygon(const vector<Vec>& vert) : vert(vert) {}\n  double area() const {\n    const size_t n = vert.size();\n    double acc = 0;\n    for (size_t i = 0; i < n; i++) {\n      acc += vert[i].ccw(vert[(i + 1) % n]);\n    }\n    return acc / 2.0;\n  }\n  bool isConvex(double eps) const {\n    const size_t n = vert.size();\n    for (size_t i = 0; i < n; i++) {\n      const Vec a = vert[(i + 1) % n] - vert[i],\n                b = vert[(i + 2) % n] - vert[i];\n      const double c = a.ccw(b);\n      if (c < -eps) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static const int ON_EDGE = 0x3;\n  static const int CONTAINED = 0x1;\n  static const int NOT_CONTAINED = 0x2;\n  int check_rel(const Vec& p, double eps) const {\n    const size_t n = vert.size();\n    double angle = 0;\n    for (size_t i = 0; i < n; i++) {\n      const Vec &s = vert[i], &t = vert[(i + 1) % n];\n\n      if (Segment(s, t).check_rel(p, eps) == Segment::ONSEGMENT) {\n        return ON_EDGE;\n      }\n\n      const Vec u = s - p, v = t - p;\n      const double theta = atan2(u.ccw(v), u.inner(v));\n      angle += theta;\n    }\n    if (angle < 3) {  // check if 0 or 2*PI\n      return NOT_CONTAINED;\n    } else {\n      return CONTAINED;\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<Vec> v;\n  rep(i, n) {\n    double x, y;\n    cin >> x >> y;\n    v.push_back(Vec({x, y}));\n  }\n\n  int q;\n  cin >> q;\n  rep(i, q) {\n    double x, y;\n    cin >> x >> y;\n    Vec p({x, y});\n\n    const double EPS = 1e-9;\n    int result = Polygon(v).check_rel(p, EPS);\n    if (result == Polygon::ON_EDGE) {\n      cout << 1 << endl;\n    } else if (result == Polygon::CONTAINED) {\n      cout << 2 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint in_poly(P a, Poly p, P ex){\n  int n = p.size(), c = 0;\n  /*\n  P ex = a;\n  for(int i = 0; i < n; ++i) ex.X = max(ex.X,p[i].X+1);\n  */\n  L l = L(a,ex);\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    if(cross(l.second-l.first,p[i+1]-p[i]) && is_cross(l,L(p[i],p[i+1]))){\n      if(ccw(a,ex,p[i])) ++c;\n      if(!ccw(p[i],p[i+1],a)) return 1;//??????\n    }\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    Mx = max(Mx,x);\n    My = max(My,y);\n    p[i] = P(x,y);\n  }\n  ++Mx;\n  ++My;\n  P ex = P(Mx,My);\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << in_poly(P(x,y),p,ex) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;              // 誤差怖い\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= 0.0 && 0.0 < b.y && cross(a, b) < EPS) in = !in;                // 誤差怖い\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n//   // C\n//   int a, b, c, d;\n//   cin >> a >> b >> c >> d;\n//   Segment s(Point(a, b), Point(c, d));\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     switch(ccw(s.initial, s.terminal, Point(x, y))) {\n//     case COUNTER_CLOCKWISE:\n//       cout << \"COUNTER_CLOCKWISE\" << endl;\n//       break;\n//     case CLOCKWISE:\n//       cout << \"CLOCKWISE\" << endl;\n//       break;\n//     case ONLINE_BACK:\n//       cout << \"ONLINE_BACK\" << endl;\n//       break;\n//     case ONLINE_FRONT:\n//       cout << \"ONLINE_FRONT\" << endl;\n//       break;\n//     case ON_SEGMENT:\n//       cout << \"ON_SEGMENT\" << endl;\n//       break;\n//     }\n//   }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n  int n;\n  Polygon polygon;\n  for(cin >> n; n > 0; --n) {\n    int x, y;\n    cin >> x >> y;\n    polygon.add(Point(x, y));\n  }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator+(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const double &a){\n        return Point(a*x,a*y);\n    }\n    Point operator/(const double &a){\n        return Point(x/a,y/a);\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n    bool operator<(const Point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p){\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle{\n    public:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0):c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;   \n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2;\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1))/(l.p2-l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0){\n        return (p-s.p1).abs();\n    }\n    if(dot(s.p1-s.p2,p-s.p2)<0){\n        return (p-s.p2).abs();\n    }\n    return getDistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return 1;\n    if(cross(a,b)<-EPS) return -1;\n    if(dot(a,b)<-EPS) return 2;\n    if(a.norm()<b.norm()) return -2;\n    return 0;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n        ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n        min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nbool intersect(Circle c,Line l){\n    double x=getDistanceLP(l,c.c);\n    return (x<=c.r);    \n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n    assert(intersect(c,l));\n    Vector pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n    double base=sqrt(c.r*c.r-(pr-c.c).norm());\n    return make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){\n    return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n    return Point(a*cos(r),a*sin(r));\n}\n\nbool intersect(Circle c1,Circle c2){\n    int x=(c1.c-c2.c).abs();\n    return (abs(c1.r-c2.r)<=x&&x<=(c1.r+c2.r));\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    assert(intersect(c1,c2));\n    double d=(c1.c-c2.c).abs();\n    double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n\nint main(){\n    Polygon g;\n    int gn;\n    cin>>gn;\n    Point a,b;\n    for(int i=0;i<gn;i++){\n        cin>>a.x>>a.y;\n        g.push_back(a);\n    }\n\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        cin>>b.x>>b.y;\n        cout<<contains(g,b)<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cassert>\nusing namespace std;\n\n// definition of turning\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point (double x = 0, double y = 0) : x(x), y(y) {}\n  Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n  Point operator * (double a) {return Point(a * x, a * y); }\n  Point operator / (double a) {return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment\n{\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  Segment(double x1, double y1, double x2, double y2)\n  {\n    p1 = Point(x1, y1);\n    p2 = Point(x2, y2);\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\n// dot and cross product\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\n// orthogonality\nbool isOrthagonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthagonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthagonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthagonal(Segment s1, Segment s2)\n{\n  return isOrthagonal(s1.p1 - s1.p2, s2.p1 - s2.p2);\n}\n\n// parallelism\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n  return isParallel(s1.p1 - s1.p2, s2.p1 - s2.p2);\n}\n\n// projection & reflection\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\n\n// distance\ndouble getDistance(Point a, Point b)\n{\n  return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p1 - l.p2, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n  if (dot(p - s.p1, s.p2 - s.p1) < 0) return getDistance(p, s.p1);\n  if (dot(p - s.p2, s.p1 - s.p2) < 0) return getDistance(p, s.p2);\n  return getDistanceLP(s, p);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\ndouble getDistanceSS(Segment s1, Segment s2)\n{\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), \\\n            min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//ccw\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\n// intersection\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && \\\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// Cross point\nPoint getCrossPoint(Segment s1, Segment s2)\n{\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n// Cross points of a circle and a line\npair<Point, Point> getCrossPoints(Circle c, Line l)\n{\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n  double base = sqrt(c.r * c.r - (pr - c.c).norm());\n  return make_pair(pr + e * base, pr - e * base);\n}\n\n// Cross points of two circles\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\npair<Point, Point> getCrossPoints(Circle c1, Circle c2)\n{\n  double d = (c1.c - c2.c).abs();\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p)\n{\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; i++)\n  {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS && EPS < b.y && cross(a, b) < EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nint main()\n{\n  int n;\n  scanf(\"%d\", &n);\n  Polygon g;\n  for (int i = 0; i < n; i++)\n  {\n    Point t;\n    scanf(\"%lf%lf\", &t.x, &t.y);\n    g.push_back(t);\n  }\n  int q;\n  scanf(\"%d\", &q);\n  while (q--)\n  {\n    Point t;\n    scanf(\"%lf%lf\", &t.x, &t.y);\n    printf(\"%d\\n\", contains(g, t));\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値, Polygonのメンバ変数\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\nclass Polygon;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    bool parallel(const Line&) const;\n    bool orthogonal(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\nclass Polygon {\n    std::vector<Point> point;\npublic:\n    Polygon() {}\n    const std::vector<Point>& vertex() const {return point;}\n    const Point& vertex(int i) const {return point.at(i);}\n    int size() const {return point.size();}\n    void add(const Point&);\n    double area() const;\n    bool convex() const;\n    int include(const Point&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return COUNTER_CLOCKWISE;\n    if(v1.cross(v2) < -EPS) return CLOCKWISE;\n    if(v1.dot(v2) < -EPS) return ONLINE_BACK;\n    if(v2.norm() - v1.norm() > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nbool Line::parallel(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dxl - dyl * dx) <= EPS;\n}\nbool Line::orthogonal(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dyl + dxl * dx) <= EPS;\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n// Polygon\nvoid Polygon::add(const Point& p) {point.push_back(p);}\ndouble Polygon::area() const {\n    double sum = 0.0;\n    for(int i = 0; i < size(); ++i) sum += vertex(i).cross(vertex((i+1) % size()));\n    return fabs(sum) / 2.0;\n}\nbool Polygon::convex() const {\n    POSITION direction = ONLINE_BACK;\n    for(int i = 1; i < size(); ++i) {\n        POSITION d = vertex(i - 1).ccw(vertex(i), vertex((i + 1) % size()));\n        if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) continue;\n        if(direction == ONLINE_BACK) direction = d;\n        if(direction != d) return false;\n    }\n    return true;\n}\nint Polygon::include(const Point& p) const {\n    POSITION direction = ONLINE_BACK;\n    for(int i = 0; i < size(); ++i) {\n        POSITION d = Segment(vertex((i + 1) % size()), vertex(i)).ccw(p);\n        if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) return 1;\n        if(direction == ONLINE_BACK) direction = d;\n        if(direction != d) return 0;\n    }\n    return 2;\n}\n// bool Polygon::include(const Point& p) const {\n//     POSITION direction = ONLINE_BACK;\n//     for(int i = 0; i < size(); ++i) {\n//         POSITION d = Segment(vertex((i + 1) % size()), vertex(i)).ccw(p);\n//         if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) continue;\n//         if(direction == ONLINE_BACK) direction = d;\n//         if(direction != d) return false;\n//     }\n//     return true;\n// }\n\nusing namespace std;\nint main() {\n    int n;\n    cin >> n;\n    Polygon polygon;\n    while(n--) {\n        double x, y;\n        cin >> x >> y;\n        polygon.add(Point(x, y));\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        cout << polygon.include(Point(x, y)) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n \ndouble eps=1e-8;\ndouble PI=acos(-1);\n \nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n \n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n \nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n \n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n \ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n \ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n \ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n \nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;\n  else  return 2;\n}\n \nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <limits>\n#include <cmath>\n#include <cstdio>\n#include <vector>\n\nusing namespace std;\n\n#define EPS (numeric_limits<double>::epsilon())\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point &p) const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator-(const Point &p) const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator*(const double &a) const\n    {\n        return Point(a * x, a * y);\n    }\n\n    Point operator/(const double &a) const\n    {\n        return Point(x / a, y / a);\n    }\n\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    double norm()\n    {\n        return x * x + y * y;\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n};\n\n\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(cross(a2 - a1, b2 - b1), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(dot(a2 - a1, b2 - b1), 0.0);\n}\n\nPoint project(Segment s, Point p)\n{\n    Vector hypo = p - s.p1;\n    Vector base = s.p2 - s.p1;\n    return base * (dot(hypo, base) / base.norm()) + s.p1;\n}\n\nPoint reflect(Segment s, Point p)\n{\n    return (project(s, p) - p) * 2.0 + p;\n}\n\ndouble getDistance(Point a, Point b)\n{\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return getDistance(p, s.p1);\n    else if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return getDistance(p, s.p2);\n    else\n        return getDistanceLP(s, p);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0)\n        return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < 0.0)\n        return CLOCKWISE;\n    else if (dot(a, b) < 0.0)\n        return ONLINE_BACK;\n    else if (a.norm() < b.norm())\n        return ONLINE_FRONT;\n    else\n        return ON_SEGMENT;\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3)\n{\n    return ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0\n           && ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0;\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n    if (intersect(s1.p1, s1.p2, s2.p1, s2.p2))\n        return 0.0;\n    else\n        return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                   min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2)\n{\n    double d1 = getDistanceLP(s2, s1.p1);\n    double d2 = getDistanceLP(s2, s1.p2);\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> CrossPoints(Circle c, Line l)\n{\n    Point foot = project(l, c.c);\n    double scale = sqrt(c.r * c.r - (foot - c.c).norm());\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    return make_pair(foot + e * scale, foot - e * scale);\n}\n\npair<Point, Point> getRotatePoints(Point x, Point center, double cosine)\n{\n    double sine = sqrt(1 - cosine * cosine);\n    Vector v = x - center;\n    Vector u, u_inv;\n    u.x = cosine * v.x - sine * v.y;\n    u.y = sine * v.x + cosine * v.y;\n    u_inv.x = cosine * v.x + sine * v.y;\n    u_inv.y = -sine * v.x + cosine * v.y;\n    return make_pair(u + center, u_inv + center);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2)\n{\n    double d = (c2.c - c1.c).abs();\n    double cosine = (c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d);\n    Point x = (c2.c - c1.c) * (c1.r / d) + c1.c;\n    return getRotatePoints(x, c1.c, cosine);\n}\n\nclass Polygon {\nprivate:\n    vector<Point> points;\n    int n;\n\npublic:\n    explicit Polygon(int n = 0) : n(n)\n    {\n        points.reserve(n);\n        int x, y;\n        for (int i = 0; i < n; i++)\n        {\n            cin >> x >> y;\n            points.emplace_back(x, y);\n        }\n    }\n\n    int contains(Point p)\n    {\n        \n        bool is_contain = false;\n\n        for (int i = 0; i < n; i++)\n        {\n            Vector a = points[i] - p;\n            Vector b = points[(i + 1) % n] - p;\n\n            if (equals(cross(a, b), 0.0) && dot(a, b) < EPS) // 線分上にある\n                return 1;\n            \n\n            if (a.y > b.y)\n                swap(a, b);\n            if (cross(a, b) > EPS && a.y<EPS && b.y>EPS) // 交差\n                is_contain = !is_contain;\n        }\n        return is_contain ? 2 : 0;\n    }\n};\n\nint main()\n{\n    int n;\n    cin >> n;\n    Polygon polygon(n);\n    int query;\n    cin >> query;\n    for (int q = 0; q < query; q++)\n    {\n        int x, y;\n        cin >> x >> y;\n        cout << polygon.contains(Point(x, y)) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\nusing namespace std;\n\ntypedef double D;\nconst D EPS = 1e-8;\nconst D INF = 1e10;\nconst D PI = M_PI;\nint sign(D a, D b = 0.0) {\n    if(a < b - EPS) return -1;\n    if(a > b + EPS) return +1;\n    return 0;\n}\n\nstruct P {\n    D x, y;\n    P(D xs, D ys) : x(xs), y(ys) { }\n    P() { }\n};\nP operator +(P a, P b) { return P(a.x + b.x, a.y + b.y); }\nP operator -(P a, P b) { return P(a.x - b.x, a.y - b.y); }\nP operator *(P p, D s) { return P(p.x * s, p.y * s); }\nP vec(P from, P to) { return to - from; }\n\nD inp(P a, P b) { return a.x*b.x + a.y*b.y; }\nD outp(P a, P b) { return a.x*b.y - a.y*b.x; }\nD norm(P p) { return inp(p, p); }\nD abs(P p) { return sqrt(norm(p)); }\nbool eq(P a, P b) { return abs(a - b) < EPS; }\nD arg(P p) { return atan2(p.y, p.x); }\nP rot90(P p) {\n    return P(-p.y, p.x);\n}\nP rot(P p, D radian) {\n    P q;\n    q.x = cos(radian)*p.x - sin(radian)*p.y;\n    q.y = sin(radian)*p.x + cos(radian)*p.y;\n    return q;\n}\nstruct L {\n    P a, b;\n    L(P as, P bs) : a(as), b(bs) { }\n};\nP projection(L l, P p) { // ??´???l???????????????p?????????\n    P a = vec(l.a, l.b);\n    P b = vec(l.a, p);\n    D t = inp(b, a) / norm(a);\n    return l.a + a * t;\n}\nP reflection(L l, P p) { // ??´???l???????????????p???????°?\n    return p + vec(p, projection(l, p)) * 2;\n}\nint ccw(P a, P b, P c) {\n    b = vec(a, b); c = vec(a, c);\n\n    // a - b - c ????????????????????¨???\n    if(sign(outp(b, c)) > 0) return +1; // ???????¨???????\n    if(sign(outp(b, c)) < 0) return -1; // ????¨???????\n\n    // a - b - c ?????´??????????????¶??¨???\n    if(sign(inp(b, c)) < 0) return +2; // c - a - b\n    if(norm(b) < norm(c))   return -2; // a - b - c\n    return 0;                          // a - c - b\n}\nbool iSS(L s, L t) { // ????????????\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nbool iSP(L s, P p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nD dSP(L s, P p) {\n    P r = projection(s, p);\n    if(iSP(s, r)) return abs(vec(p, r));\n    return min(abs(vec(p, s.a)), abs(vec(p, s.b)));\n}\nD dSS(L s, L t) {\n    if(iSS(s, t)) return 0;\n    return min(min(dSP(s, t.a), dSP(s, t.b)),\n               min(dSP(t, s.a), dSP(t, s.b)));\n}\n/* ?????????????????¨??????iSS(s,t)????¢???????????????¨ */\nP cLL(L l, L m) {\n    D d = outp(vec(m.a, m.b), vec(l.a, l.b));\n    return l.a + vec(l.a, l.b) * outp(vec(m.a, m.b), vec(l.a, m.b)) * (1.0 / d);\n}\n\ntypedef vector<P> G;\nP at(G g, int i) { return g[i % g.size()]; }\nD areaG(G g) {\n    D res = 0.0;\n    for(int i = 0; i < (int)g.size(); i++) {\n        res += outp(at(g, i), at(g, i + 1));\n    }\n    return res / 2.0;\n}\n// ON = 0, IN = 1, OUT = -1\nint containsGP(G g, P p) {\n    int side = -1;\n    for(int i = 0; i < (int)g.size(); i++) {\n        if(ccw(at(g, i), at(g, i + 1), p) == 0) return 0;\n        P a = vec(p, at(g, i));\n        P b = vec(p, at(g, i + 1));\n        if(a.y > b.y) swap(a, b);\n        if(sign(a.y) <= 0 && sign(b.y) > 0 && sign(outp(a, b)) > 0) side *= -1;\n    }\n    return side;\n}\nstruct C {\n    P p; D r;\n    C(P ps, D rs) : p(ps), r(rs) { }\n    C() { }\n};\n\nint main() {\n    int N; cin >> N;\n    G g(N);\n    for(int i = 0; i < N; i++) {\n        cin >> g[i].x >> g[i].y;\n    }\n    int M; cin >> M;\n    for(int i = 0; i < M; i++) {\n        int x, y; cin >> x >> y;\n        int res = containsGP(g, P(x, y));\n        cout << res + 1 << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isPointOnSegment(int px, int py, int sx, int sy, int ex, int ey){\n\tint ip = (px*ex+py*ey) - ((ex+px)*sx+(ey+py)*sy) + (sx*sx+sy*sy);\n\treturn (py - ey)*(sx - ex) - (px - ex)*(sy - ey) == 0 && ip >=0 && ip <= (ex-sx)*(ex-sx)+(ey-sy)*(ey-sy);\n}\n\nint sign(int n){\n\tif(n>0)return 1;\n\tif(n<0)return -1;\n\treturn 0;\n}\n\nfloat angle(int ax, int ay, int bx, int by, int cx, int cy){\n\t//angle between ab and ac\n\tfloat ab = atan2(by-ay,bx-ax);\n\tfloat ac = atan2(cy-ay,cx-ax);\n\tif(ab < 0)ab += 2*M_PI;\n\tif(ac < 0)ac += 2*M_PI;\n\tfloat ang = ac - ab;\n\treturn (fabs(ang) < M_PI ? ang : -sign(ang) * 2 * M_PI + ang) * 180 / M_PI;\n}\n\nint main() {\n\tint n, q, x, y, res;\n\tvector< int > vtx, vty;\n\tfloat sum;\n\t\n\tcin >> n;\n\tvtx.resize(n);\n\tvty.resize(n);\n\t\n\tfor(int i=0;i<n;++i){\n\t\tcin >> vtx[i] >> vty[i];\n\t}\n\t\n\tcin >> q;\n\tfor(int i=0;i<q;++i){\n\t\tcin >> x >> y;\n\t\tres = 0;\n\t\t\n\t\t//is the point on segments\n\t\tfor(int k=0;k<n;++k){\n\t\t\tif(isPointOnSegment(x,y,vtx[k],vty[k],vtx[(k+1)%n],vty[(k+1)%n])){\n\t\t\t\tres = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsum = 0;\n\t\tif(!res){\n\t\t\t//is the point in the polygon\n\t\t\tfor(int k=0;k<n;++k){\n\t\t\t\tsum += angle(x,y,vtx[k],vty[k],vtx[(k+1)%n],vty[(k+1)%n]);\n\t\t\t}\n\t\t\t\n\t\t\tif(sum >= 180){\n\t\t\t\tres = 2;\n\t\t\t}else{\n\t\t\t\tres = 0;\n\t\t\t}\n\t\t}\n\t\tcout << res << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n    bool in = false;\n    for (int i = 0; i < v.size(); ++i) {\n        Point a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n        if (a.py > b.py) swap(a, b);\n        if (a.py <= 0 && 0 < b.py)\n            if (crs(a, b) < 0) in = !in;\n        if (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n    }\n    return in ? 2 : 0;\n}\nint main() {\n    vector<Point>vec;\n    Point P;\n    int n, q; cin >> n;\n    vec.clear();\n    for (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        cin >> P.px >> P.py;\n        int v = contain(vec, P); cout << v << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-17;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\ndouble DistAsLine(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    return fabs(V1.OuterProd(V2)) / V1.Length();\n}\n\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    if (Dist(P, Seg) > eps) return false;\n    return true;\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 100007, P.y + 100009)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 100007, P.y + 100009)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct P {\n    int x, y;\n\n    P() : x(0), y(0) { }\n    P(int x, int y) : x(x), y(y) { }\n\n    int norm() { return x * x + y * y; }\n    int dot(P p) { return x * p.x + y * p.y; }\n    int cross(P p) { return x * p.y - y * p.x; }\n\n    P operator -() { return P(-x, -y); }\n    P operator +(P p) { return P(x + p.x, y + p.y); }\n    P operator -(P p) { return P(x - p.x, y - p.y); }\n    P operator *(int k) { return P(x * k, y * k); }\n};\n\nint ccw(P p0, P p1, P p2) {\n    P u = p1 - p0;\n    P v = p2 - p0; \n\n    if (u.cross(v) > 0) return 1;\n    if (u.cross(v) < 0) return -1;\n    if (u.dot(v) < 0) return 2;\n    if (u.norm() < v.norm()) return -2;\n\n    return 0;\n}\n\nconst int MAX_N = 100;\n\nint n;\nP ps[MAX_N + 1];\n\nint solve(int x, int y) {\n    int c = 0;\n\n    P d1(x, y);\n    P d2(10001, y);\n\n    for (int i = 0; i < n; i++) {\n        if (ccw(ps[i], ps[i + 1], d1) == 0) return 1;\n\n        if (ccw(d1, d2, ps[i]) * ccw(d1, d2, ps[i + 1]) < 0 &&\n            ccw(ps[i], ps[i + 1], d1) * ccw(ps[i], ps[i + 1], d2) < 0) c++;\n\n        if (ccw(d1, d2, ps[i]) == 0) c++;\n    }\n\n    return c % 2 ? 2 : 0;\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n\n        ps[i] = P(x, y);\n    }\n    ps[n] = ps[0];\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << solve(x, y) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-8;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nint main()\n{\n    int n;RI(n);\n    vector<Point> g(n);\n    REP(i,n) cin>>g[i].x>>g[i].y; \n    g.pb(g[0]);\n    int q;RI(q);\n    while(q--)\n    {\n        Point p;cin>>p.x>>p.y;\n        {\n            bool x=0;\n            REP(i,n) if(Line(g[i],g[i+1]).onsegment(p))\n                x=1;\n            if(x){PL(1);continue;}\n        }\n        Line X(p,p+Point(20001,1));\n        bool out=1;\n        REP(i,n)\n        {\n            Line Y(g[i],g[i+1]);\n            Point o=X.intersect(Y).S;\n            out^=X.onsegment(o)&&Y.onsegment(o);\n\n        }\n        PL(out?0:2);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\t\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n \ntypedef pair<point,point> pp;\ntypedef vector<point> VP;\nconst point O{0,0};\n \nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble ip=IP(A,X),cp=CP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"Counter_Clockwise\";\n\t\tif(cp<-eps) return \"Clockwise\";\n\t\tif(ip<-eps) return \"Online_Back\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"On_Segment\";\n\t\treturn \"Online_Front\";\n\t}\n\tstring Parallel_Orthogonal(pp a,pp b){\n\t\tpoint A=a.second-a.first,B=b.second-b.first;\n\t\tdouble ip=IP(A,B),cp=CP(A,B);\n\t\tstring f=Counter_Clockwise(pp(a.first,a.second),b.first),s=Counter_Clockwise(pp(a.first,a.second),b.second);\n\t\tif(f[0]!='C'&&s[0]!='C') return \"Agreement\";\n\t\tif(cp<eps&&cp>-eps) return \"Parallel\";\n\t\tif(ip<eps&&ip>-eps) return \"Orthogonal\";\n\t\telse return \"Commonly\";\n\t}\n\tpoint Inter(pp  a,double x,double y){\n\t\treturn (a.first*y+a.second*x)/(x+y);\n\t}\n\tpoint Exterior(pp a,double x,double y){\n\t\treturn (a.first*-y+a.second*x)/(x-y);\n\t}\n\tpoint Projection(pp a,point x){\n\t\tpoint A=x-a.first,B=a.second-a.first;\n\t\tdouble l=Length(O,B);\n\t\treturn B*IP(A,B)/(l*l)+a.first;\n\t}\t\n\tpoint Cross_Point(pp a,pp b){\n\t\tstring s=Parallel_Orthogonal(a,b);\n\t\tif(s[0]=='A') return point{inf,inf};\n\t\tif(s[0]=='P') return point{inf,0};\n\t\tpoint p=Projection(a,b.first),q=Projection(a,b.second);\n\t\tdouble pl=Length(b.first,p),ql=Length(b.second,q);\n\t\tstring S=Counter_Clockwise(a,b.first),T=Counter_Clockwise(a,b.second);\n\t\tif(S==T) return Exterior(b,pl,ql);\n\t\telse return Inter(b,pl,ql);\n\t}\n\tstring Containment_polyon_point(VP p,point x){\n\t\tpoint c;\n\t\tvector<double> cp(p.size());\n\t\tstring s,t;\n\t\tint ans=0;\n\t\tp.push_back(p[0]);\n\t\tp.push_back(p[1]);\n\t\tcp[0]=CP(point{1,0},p[1]-p[0]);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end()-1;i++){\n\t\t\tpp tmp(*i,*(i+1));\n\t\t\tif(i!=p.end()-2) cp[i-p.begin()]=CP(point{1,0},*(i+1)-*i);\n\t\t\tc=Cross_Point(tmp,pp(x,point{x.x+1,x.y}));\n\t\t\ts=Counter_Clockwise(tmp,x);\n\t\t\tt=Counter_Clockwise(tmp,c);\n\t\t\tif(s[3]=='S') return \"On_side\";\n\t\t\tdouble cp1=cp[i-p.begin()],cp2=cp[i-p.begin()-1];\n\t\t\tif(c.x==inf||c.x<x.x||c==*(i+1)||t[3]!='S') continue;\n\t\t\tif(c==*i&&((cp1<0&&cp2>0)||(cp1>0&&cp2<0))) continue;\n\t\t\tans++;\n\t\t}\n\t\tif(ans%2==0) return \"not_Containment\";\n\t\treturn \"Containment\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n};\n\nint N,Q;\npoint x;\nstring s;\nVP p;\n\nint main(){\n\tGeom geo;\n\tcin>>N;\n\tp=VP(N);\n\tfor(int i=0;i<N;i++) geo.Point_in(p[i]);\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tgeo.Point_in(x);\n\t\ts=geo.Containment_polyon_point(p,x);\n\t\tif(s==\"Containment\") cout<<2<<endl;\n\t\telse if(s==\"On_side\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint n, q, xp, yp, r;\n\tint x[101], y[101];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> x[i] >> y[i];\n\n\tx[n] = x[0];\n\ty[n] = y[0];\n\n\tcin >> q;\n\n\tfor (int k = 0; k < q; k++) {\n\t\tcin >> xp >> yp;\n\n\t\tr = 2;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif ((x[i] - xp) * (x[i + 1] - xp) <= 0 &&\n\t\t\t\t(y[i] - yp) * (y[i + 1] - yp) <= 0 &&\n\t\t\t\t(x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) == 0) {\n\t\t\t\tr = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (r != 1) {\n\t\t\tint t = 0;\n\t\t\tfor (int i = 1; i < n - 1; i++) {\n\t\t\t\tif ((x[0] - xp) * (y[i] - yp) - (x[i] - xp) * (y[0] - yp) >= 0 &&\n\t\t\t\t\t(x[i + 1] - xp) * (y[0] - yp) - (x[0] - xp) * (y[i + 1] - yp) >= 0 &&\n\t\t\t\t\t(x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) >= 0)\n\t\t\t\t\tt++;\n\t\t\t\telse if ((x[0] - xp) * (y[i] - yp) - (x[i] - xp) * (y[0] - yp) <= 0 &&\n\t\t\t\t\t(x[i + 1] - xp) * (y[0] - yp) - (x[0] - xp) * (y[i + 1] - yp) <= 0 &&\n\t\t\t\t\t(x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) < 0)\n\t\t\t\t\tt--;\n\t\t\t}\n\t\t\tif (t <= 0)\n\t\t\t\tr = 0;\n\t\t}\t\n\n\t\tcout << r << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nclass Point {\npublic:\n\tint x, y;\n\tPoint(int x, int y) :\n\t\t\tx(x), y(y) {\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\ndouble cross(Point p1, Point p2) {\n\treturn p1.x * p2.y - p1.y * p2.x;\n}\ndouble norm(Point p) {\n\treturn p.x * p.x + p.y * p.y;\n}\ndouble abs(Point p) {\n\treturn sqrt(norm(p));\n}\n\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.y > b.y) {\n\t\t\tswap(a, b);\n\t\t}\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {\n\t\t\tx = !x;\n\t\t}\n\t}\n\treturn x ? 2 : 0;\n}\n\nint main() {\n\n\tint n;\n\tscanf(\"%d\", &n);\n\tPolygon g;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint x, y;\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tPoint p(x, y);\n\t\tg.push_back(p);\n\t}\n\n\tint q;\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; ++i) {\n\t\tint x, y;\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tPoint p(x, y);\n\t\tcout << contains(g, p) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define FOR(i,bg,ed) for(int i=(bg);i<(ed);i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(v) (v).begin(),(v).end()\n#define fi first\n#define se second\n#define pb push_back\n\n#define IL inline \nnamespace geo {\n    typedef double D;\n    typedef bool B;\n    typedef complex<D> P;\n#define X real()\n#define Y imag()\n    B comp(const P& l, const P& r){ return (l.X == r.X) ? l.Y < r.Y : l.X < r.X; }\n    typedef pair<P, P> L;  //line\n    typedef pair<P, P> LS; //line segment\n    typedef pair<P, D> C;  //circle\n    typedef vector<P> Poly;\n    const D EPS = 1e-8;\n    //Decompotision Macro\n#define DCl(a,b,l) P (a),(b);tie(a,b)=l; \n#define DCc(a,b,c) P (a);D (b);tie(a,b)=c; \n    \n    //A dot B\n    IL D dot(P a, P b) { return a.X*b.X + a.Y*b.Y; }\n    //A cross B\n    IL D cross(P a, P b) { return a.X*b.Y - a.Y*b.X; }\n    IL D ccw(P a,P b,P c){\n        return cross(b - a, c - a);\n    }\n\n    IL int sgn(P a,P b, P c){\n        if(cross(b-a,c-a) > EPS)return 1;\n        if(cross(b-a,c-a) < -EPS)return -1;\n        if(dot(b-a,c-a) < -EPS)return 2; // b-a-c\n        if(dot(a-b,c-b) < -EPS)return -2; // a-b-c\n        return 0;\n    }\n    IL D signed_distance_P_L(P p, L l) {\n        DCl(a,b,l);\n        return ccw(a,b,p)/ abs(b - a);\n    }\n    \n    IL D distance_P_L(P p, L l) {\n        return abs(signed_distance_P_L(p,l));\n    }\n\n    IL D distance_P_LS(P p, LS ls) {\n        DCl(a,b,ls);\n        if (dot(b - a, p - a) < EPS) return abs(p - a);\n        if (dot(a - b, p - b) < EPS) return abs(p - b);\n        return abs(cross(b - a, p - a)) / abs(b - a);\n    }\n\n    \n    IL B is_L_L(L p, L q) {\n        DCl(a,b,p);\n        DCl(c,d,q);\n        return\n            abs(cross(a - b, c - d)) > EPS ||\n            abs(cross(a - b ,d - b)) < EPS;\n    }\n    IL B is_L_LS(L l, LS ls) {\n        DCl(a,b,l);\n        DCl(c,d,ls);\n        return ccw(a,b,c)*ccw(a,b,d)<EPS;\n    }\n    IL B is_LS_LS(LS p, LS q) {\n        DCl(a,b,p);\n        DCl(c,d,q);\n        return sgn(a,b,c)*sgn(a,b,d) <= 0\n            && sgn(c,d,a)*sgn(c,d,b) <= 0;\n    }\n\n    IL D distance_LS_LS(LS p,LS q){\n        if(is_LS_LS(p,q))return 0;\n        return min({\n                distance_P_LS(p.fi,q),\n                distance_P_LS(p.se,q),\n                distance_P_LS(q.fi,p),\n                distance_P_LS(q.se,p)    \n                    });\n    }\n\n    //caution: have to use isintersected_L_L before this function\n    IL P cross_point_L_L(L p, L q) {\n        DCl(a,b,p);\n        D d1 = signed_distance_P_L(a, q);\n        D d2 = signed_distance_P_L(b, q);\n        return (a * d2 - b * d1) / (d2 - d1);\n    }\n    \n    IL B is_C_C(C p, C q) {\n        DCc(cp,rp,p);\n        DCc(cq,rq,q);\n        D d = abs(cp - cq);\n        return abs(rp - rq) - d <EPS &&\n                                 rp + rq - d > -EPS;\n    }\n    IL LS cross_C_C(C p, C q) {\n        DCc(cp,rp,p);\n        DCc(cq,rq,q);\n        D d = abs(cp - cq);\n        D rc = (d*d + rp*rp - rq*rq) / (2 * d);\n        D rs = sqrt(rp*rp - rc*rc);\n        P diff = (cq - cp) / d;\n        return {cp + P(rc, rs)*diff, cp + P(rc, -rs)*diff};\n    }\n    IL Poly convex_hull(Poly& p) {\n        int n = p.size();\n        Poly res(2 * n);\n        int k = 0, t;\n        sort(ALL(p),comp);\n        REP(i,n) {\n            while (k > 1 && ccw(res[k-2],res[k-1],p[i]) < EPS)k--;\n            res[k++] = p[i];\n        }\n        t = k;\n        REP(j,n-1){\n            int i= n - 2 - j;\n            while (k > t && ccw(res[k - 2],res[k - 1], p[i]) < EPS)k--;\n            res[k++] = p[i];\n        }\n        res.resize(k - 1);\n        return res;\n    }\n    IL B convex_in(Poly& l,P& p) {\n        int a = 0, b = l.size(), c;\n        D A, C;\n        P g = (l[a] + l[b - 1] + l[b / 2]) / 3.0;\n        while (b - a > 1) {\n            c = (a + b) / 2;\n            A = cross(l[a] - g, p - l[a]);\n            C = cross(l[c] - g, p - l[c]);\n            if (cross(l[a] - g, l[c] - g) >= 0) {\n                if (A > -EPS&&C < -EPS)b = c;\n                else a = c;\n            }\n            else {\n                if (C < -EPS || A > -EPS)b = c;\n                else a = c;\n            }\n        }\n        return(cross(l[b%l.size()] - l[a], p - l[b%l.size()]) > -EPS);\n    }\n    //not necessary?\n    IL D convex_area(Poly& l) {\n        double res = 0;\n        int n = l.size();\n        FOR(i,2,n)\n            res += (abs(cross(l[i - 1] - l[0], l[i] - l[i - 1]))) / 2.0;\n        return res;\n    }\n    IL D area(Poly& l){\n        double res=0;\n        int n=l.size();\n        REP(i,n)res+=cross(l[i],l[(i+1)%n]);\n        return abs(res)/2.0;\n    }\n    inline vector<L> tangent_line(C c, P p) {\n        vector<L> res;\n        DCc(cp,r,c);\n        P v = p - cp;\n        D dist = abs(v);\n        if (dist - r > -EPS) {\n            double _cos = r / dist;\n            double _sin = sqrt(1.0 - _cos*_cos);\n            v = v * (r / dist);\n            {\n                P e = P(_cos * v.X - _sin * v.Y, _sin*v.X + _cos*v.Y);\n                res.push_back({p, cp + e});\n            }\n            if(dist-r > EPS){\n                P e = P( _cos*v.X + _sin*v.Y ,-_sin*v.X + _cos*v.Y );\n                res.push_back({p, cp + e});\n            }\n        }\n        return res;\n    }\n    IL vector<L> inner_common_tangent_line(C p, C q) {\n        vector<L> res;\n        DCc(Mp,Rp,p);\n        DCc(Mq,Rq,q);\n        D dist = abs(Mp - Mq);\n        if (dist - (Rp + Rq) > -EPS) {\n            P mid = (Mq*Rp + Mp*Rq) / (Rp + Rq);\n            res = tangent_line(p, mid);\n        }\n        return res;\n    }\n    IL vector<L> outer_common_tangent_line(C p, C q) {\n        vector<L> res;\n        DCc(Mp,Rp,p);\n        DCc(Mq,Rq,q);\n        P v = Mp - Mq;\n        D dist = abs(v);\n        if (dist - abs(Rp - Rq) >- EPS) {\n            if (abs(Rp - Rq) < EPS) {\n                P e = v*P( 0, 1 );\n                e = e / dist;\n                res.pb(L(Mp + e, Mq + e));\n                res.pb(L(Mp - e, Mq - e));\n            }\n            else {\n                P mid = Mp + (Mq - Mp) * Rp / (Rp - Rq);\n                res = tangent_line(p, mid);\n            }\n        }\n        return res;\n    }\n\n    vector<Poly> decomposition(Poly p){\n        int n = p.size();\n        vector<Poly> res;\n        while(n>=3){\n            [&](){\n                FOR(i, 0, n){\n                    P a = p[i];\n                    P b = p[(i+1)%n];\n                    P c = p[(i+2)%n];\n                    if (ccw(a,b,c)<0)continue;\n                    if([&](){\n                            FOR(j,3,n){\n                                P d=p[(i+j)%n];\n                                if(ccw(a,b,d)>-EPS&&ccw(b,c,d)>-EPS&&ccw(c,a,d)>-EPS)\n                                    return true;\n                            }\n                            return false;\n                        }()\n                        )continue;\n                    Poly nxt;\n                    REP(j,n)if((i+j)%n!=(i+1)%n)nxt.push_back(p[(i+j)%n]);\n                    swap(p,nxt);\n                    res.push_back({a,b,c});\n                    n--;\n                    return;\n                }\n            }();\n        }\n        return res;\n    }\n    int in_triangle(P p,Poly q){\n        REP(i,3)if(abs(p-q[i])<EPS)return 3;//on point\n        REP(i,3){\n            int s=sgn(q[i],q[(i+1)%3],p);\n            if(s!=1){\n                if(s==0)return 2;//on line\n                else return 0;\n            }\n        }\n        return 1; // inside triangle\n    }\n    \n}\n\nusing namespace geo;\n\nint main(){\n    cout<<fixed;\n    cout<<setprecision(1);\n    int n;\n    cin >> n;\n    Poly p(n);\n    REP(i, n){\n        int x, y;\n        cin >> x >> y;\n        p[i] = P(x, y);\n    }\n    int q;\n    cin>>q;\n    \n    auto pp=decomposition(p);\n    REP(i,q){\n        vector<int> cnt(4,0);\n        int x,y;\n        cin>>x>>y;\n        P query(x,y);\n        for(auto &it:pp)cnt[in_triangle(query,it)]++;\n        if(cnt[3]>=1)cout<<1<<endl;\n        else if(cnt[2]==1)cout<<1<<endl;\n        else if(cnt[2]>1||cnt[1]>=1)cout<<2<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef complex<double> Point;\nconst double epx = 1e-10;\n\nbool eq(double a,double b)\n{\n    return abs(a-b)<epx;\n}\n\nbool onSeg(Point a,Point b,Point c)\n{\n    return eq(abs(a-b),abs(a-c)+abs(b-c));\n}\n\ndouble getArg(Point a,Point b,Point c)\n{\n    b -= a; c -= a;\n    a = c*conj(b);\n    return arg(a);\n}\n\nint contain(const vector<Point> &points,int sz,Point p)\n{\n    if(sz<3) return 0;\n    for(int i=0;i<sz;i++)\n    {\n        if(onSeg(points[i],points[(i+1)%sz],p)) return 1;\n    }\n    double angle = 0;\n    for(int i=0;i<sz;i++)\n    {\n        angle += getArg(p,points[i],points[(i+1)%sz]);\n    }\n    if(eq(angle,0)) return 0;\n    return 2;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    int n;\n    cin>>n;\n    vector<Point> points;\n    for(int i=0;i<n;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n        points.emplace_back(x,y);\n    }\n\n    int q;\n    cin>>q;\n    while(q--)\n    {\n        int x,y;\n        cin>>x>>y;\n        cout<<contain(points,n,Point(x,y))<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nconst double eps=1e-10,Pi=acos(-1.0);\nstruct node{\n\tdouble x,y;\n\tnode operator+(node b){return (node){x+b.x,y+b.y};}\n\tnode operator-(node b){return (node){x-b.x,y-b.y};}\n\tnode operator*(double b){return (node){x*b,y*b};}\n\tdouble len(){return sqrt(x*x+y*y);}\n};\nint fh(double a){return fabs(a)<eps?0:a>eps?1:-1;}\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\nnode projection(node p1,node p2,node p){node v=p2-p1;return p1+v*(dot(v,p-p1)/dot(v,v));}\nnode reflection(node p1,node p2,node p){node P=projection(p1,p2,p);P=P*2-p;return P;}\nvoid Counter_Clockwise(node p1,node p2,node p){\n\tif(cross(p2-p1,p-p1)>eps){puts(\"COUNTER_CLOCKWISE\");return;}\n\tif(cross(p2-p1,p-p1)<-eps){puts(\"CLOCKWISE\");return;}\n\tif(dot(p2-p1,p-p1)<-eps){puts(\"ONLINE_BACK\");return;}\n\tif(dot(p2-p1,p2-p1)>=dot(p-p1,p2-p1)){puts(\"ON_SEGMENT\");return;}\n\tputs(\"ONLINE_FRONT\");\n}\nbool insegment(node A,node B,node p){\n\tif(fh(cross(B-A,p-A)))return false;\n\treturn ((fh(p.x-A.x)>=0 && fh(B.x-p.x)>=0) || (fh(p.x-A.x)<=0 && fh(B.x-p.x)<=0)) && ((fh(p.y-A.y)>=0 && fh(B.y-p.y)>=0) || (fh(p.y-A.y)<=0 && fh(B.y-p.y)<=0));\n}\nint parallel(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1)))return 2;\n\tif(!fh(dot(B2-B1,A2-A1)))return 1;\n\treturn 0;\n}\nbool intersection(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1))){\n\t\tif(insegment(A1,A2,B1) || insegment(A1,A2,B2) || insegment(B1,B2,A1) || insegment(B1,B2,A2))return true;\n\t\treturn false;\n\t}\n\treturn fh(cross(A1-B1,B2-B1)*cross(A2-B1,B2-B1))<=0 && (fh(cross(B1-A1,A2-A1)*cross(B2-A1,A2-A1))<=0);\n}\nnode getintersection(node A1,node A2,node B1,node B2){\n\tnode v=A2-A1;\n\treturn A1+v*(cross(B2-B1,B1-A1)/cross(B2-B1,A2-A1));\n}\ndouble distance(node A1,node A2,node B1,node B2){\n\tif(intersection(A1,A2,B1,B2))return 0.0;\n\tnode p;double ans=1e18;\n\tans=min(ans,(A1-B1).len());ans=min(ans,(A1-B2).len());ans=min(ans,(A2-B1).len());ans=min(ans,(A2-B2).len());\n\tp=projection(A1,A2,B1);\n\tif(insegment(A1,A2,p))ans=min(ans,(B1-p).len());\n\tp=projection(A1,A2,B2);\n\tif(insegment(A1,A2,p))ans=min(ans,(B2-p).len());\n\tp=projection(B1,B2,A1);\n\tif(insegment(B1,B2,p))ans=min(ans,(A1-p).len());\n\tp=projection(B1,B2,A2);\n\tif(insegment(B1,B2,p))ans=min(ans,(A2-p).len());\n\treturn ans;\n}\ndouble area(node *p,int n){\n\tdouble area=0;\n\tfor(int i=1;i<n;i++)area+=cross(p[i]-p[1],p[i+1]-p[1]);\n\tarea+=cross(p[n]-p[1],p[1]-p[1]);\n\treturn area*0.5;\n}\nbool is_convex(node *p,int n){\n\tfor(int i=2;i<n;i++)if(cross(p[i]-p[i-1],p[i+1]-p[i-1])<0)return false;\n\tif(cross(p[n]-p[n-1],p[1]-p[n-1])<0)return false;\n\tif(cross(p[1]-p[n],p[2]-p[n])<0)return false;\n\treturn true;\n}\nint inConvex(node O,node *p,int n){\n\tint cnt=0;\n\tfor(int i=0;i<n;i++){\n\t\tif(insegment(p[i],p[(i+1)%n],O))return 1;\n\t\tnode A=p[i]-O,B=p[(i+1)%n]-O;\n\t\tif(A.y>B.y)swap(A,B);\n\t\tif(A.y<eps && B.y>eps && cross(A,B)>eps)cnt++;\n\t}\n\treturn cnt&1?2:0;\n}\nnode p[110],O;\nint main(){\n\tint n=gi();\n\tfor(int i=0;i<n;i++)p[i].x=gi(),p[i].y=gi();\n\tint Q=gi();\n\twhile(Q--){\n\t\tO.x=gi();O.y=gi();\n\t\tprintf(\"%d\\n\",inConvex(O,p,n));\n\t}\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_set>\n#include<unordered_map>\n#include<fstream>\n#include<list>\n#include<functional>\n#include<bitset>\n#include<complex>\n#include<tuple>\nusing namespace std;\ntypedef unsigned long long int ull;\ntypedef long long int ll;\ntypedef pair<ll,ll> pll;\ntypedef long double D;\ntypedef complex<D> P;\n#define F first\n#define S second\nconst ll E=1e18+7;\nconst ll MOD=1000000007;\n\n\ntemplate<typename T,typename U>istream & operator >> (istream &i,pair<T,U> &A){i>>A.F>>A.S; return i;}\ntemplate<typename T>istream & operator >> (istream &i,vector<T> &A){for(auto &I:A){i>>I;} return i;}\ntemplate<typename T,typename U>ostream & operator << (ostream &o,pair<T,U> &A){o<<A.F<<\" \"<<A.S; return o;}\ntemplate<typename T>ostream & operator << (ostream &o,vector<T> &A){ll i=A.size(); for(auto &I:A){o<<I<<(--i?\" \":\"\");} return o;}\ntemplate<typename T>vector<T> & cset(vector<T> &A,T e=T()){for(auto &I:A){I=e;} return A;}\n\n\nnamespace Geometry{\n    typedef long double D;\n    typedef complex<long double> P;\n    typedef pair<P,D> C;\n    \n    const D EPS=1e-9;\n    const D PI=asin(1)*2;\n    const D INF=1e18;\n    \n    const static bool comp(const P &p1,const P &p2){\n        if(p1.real()==p2.real()){return p1.imag()<p2.imag();}\n        return p1.real()<p2.real();\n    }\n    \n    const static bool comp_y(const P &p1,const P &p2){\n        if(p1.imag()==p2.imag()){return p1.real()<p2.real();}\n        return p1.imag()<p2.imag();\n    }\n    \n    D dot(P p1,P p2){return p1.real()*p2.real()+p1.imag()*p2.imag();}\n    \n    D cross(P p1,P p2){return p1.real()*p2.imag()-p1.imag()*p2.real();}\n    \n    P project(P vec,P x){return vec*(x/vec).real();}\n    \n    P project(P p1,P p2,P x){return p1+project(p2-p1,x-p1);}\n    \n    P reflect(P vec,P x){return vec*conj(x/vec);}\n    \n    P reflect(P p1,P p2,P x){return p1+reflect(p2-p1,x-p1);}\n    \n    bool intersectSL(P p1,P p2,P vec){\n        vec/=abs(vec); p1/=vec; p2/=vec;\n        return (p1.imag()<EPS && p2.imag()>-EPS) || (p1.imag()>-EPS && p2.imag()<EPS);\n    }\n    \n    bool intersectSL(P p1,P p2,P p3,P p4){return intersectSL(p1-p4,p2-p4,p3-p4);}\n    \n    bool intersectSS(P p1,P p2,P p3,P p4){\n        if(dot(p2-p1,p3-p1)<-EPS && dot(p2-p1,p4-p1)<-EPS){return false;}\n        if(dot(p1-p2,p3-p2)<-EPS && dot(p1-p2,p4-p2)<-EPS){return false;}\n        return intersectSL(p1,p2,p3,p4) && intersectSL(p3,p4,p1,p2);\n    }\n    \n    D distLP(P vec,P x){return abs((x/vec).imag())*abs(vec);}\n    \n    D distLP(P p1,P p2,P x){return distLP(p2-p1,x-p1);}\n    \n    D distSP(P p1,P p2,P x){\n        if(dot(p2-p1,x-p1)<-EPS){return abs(x-p1);}\n        if(dot(p1-p2,x-p2)<-EPS){return abs(x-p2);}\n        return distLP(p1,p2,x);\n    }\n    \n    D distSS(P p1,P p2,P p3,P p4){\n        if(intersectSS(p1,p2,p3,p4)){return 0.0;}\n        return min({distSP(p1,p2,p3),distSP(p1,p2,p4),\n            distSP(p3,p4,p1),distSP(p3,p4,p2)});\n    }\n    \n    P crosspointLL(P p1,P p2,P vec){\n        if(abs(cross(p2-p1,vec))<EPS){return vec;}\n        return vec*cross(p2-p1,p2)/cross(p2-p1,vec);\n    }\n    \n    P crosspointLL(P p1,P p2,P p3,P p4){\n        return p4+crosspointLL(p1-p4,p2-p4,p3-p4);\n    }\n    \n    P crosspointSS(P p1,P p2,P p3,P p4){\n        if(distSP(p1,p2,p3)<EPS){return p3;}\n        if(distSP(p1,p2,p4)<EPS){return p4;}\n        return crosspointLL(p1,p2,p3,p4);\n    }\n    \n    bool intersectShL(P p1,P p2,P vec){\n        vec/=abs(vec);\n        return intersectSL(p1,p2,vec) &&\n        crosspointLL(p1/vec,p2/vec,vec/vec).real()>-EPS;\n    }\n    \n    bool intersectShL(P p1,P p2,P p3,P p4){\n        return intersectShL(p1-p3,p2-p3,p4-p3);\n    }\n    \n    //1::in,0::on edge,-1::out\n    int contain(const vector<P> &poly,const P &p){\n        vector<P> A={{65537,96847},{-24061,6701},{56369,-86509},{-93763,-78049},{56957,10007}};\n        int s=A.size();\n        vector<bool> cnt(s,false);\n        for(int i=0;i<(int)poly.size();i++){\n            int k=(i+1)%poly.size();\n            if(distSP(poly[i],poly[k],p)<EPS){return 0;}\n            for(int j=0;j<s;j++){\n                if(intersectShL(poly[i],poly[k],p,p+A[j])){cnt[j]=!cnt[j];}\n            }\n        }\n        int in=0;\n        for(int j=0;j<s;j++){if(cnt[j]){in++;}}\n        return in>s/2?1:-1;\n    }\n    \n    vector<P> convexcut(const vector<P> &poly,P p1,P p2){\n        vector<P> ret;\n        for(int i=0;i<(int)poly.size();i++){\n            int j=(i+1)%poly.size();\n            if(cross(p2-p1,poly[i]-p1)>-EPS){ret.push_back(poly[i]);}\n            if(intersectSL(poly[i],poly[j],p1,p2) &&\n               distLP(p1,p2,poly[i])>EPS && distLP(p1,p2,poly[j])>EPS){\n                ret.push_back(crosspointLL(poly[i],poly[j],p1,p2));\n            }\n        }\n        return ret;\n    }\n    \n    D area(const vector<P> &poly){\n        D ans=0;\n        for(int i=2;i<(int)poly.size();i++){\n            ans+=cross(poly[i-1]-poly[0],poly[i]-poly[0]);\n        }\n        return abs(ans)/2;\n    }\n    \n    vector<P> convexhull(vector<P> pts){\n        vector<P> ret;\n        sort(pts.begin(),pts.end(),comp);\n        auto fnc=[&](){\n            for(auto &I:pts){\n                if(!ret.empty() && I==ret.back()){continue;}\n                while(ret.size()>=2 && cross(ret.back()-ret[ret.size()-2],I-ret.back())<-EPS){\n                    ret.pop_back();\n                }\n                ret.push_back(I);\n            }\n        };\n        fnc();\n        reverse(pts.begin(),pts.end());\n        fnc();\n        if(ret[0]==ret.back()){ret.pop_back();}\n        return ret;\n    }\n    \n    //4::seperate,3::circumscribe,2::intersect,1::inscribe,0::contain,-1::same\n    int intersectCC(C c1,C c2){\n        D d=abs(c1.F-c2.F),r=c1.S+c2.S,dif=abs(c2.S-c1.S);\n        if(d<EPS && dif<EPS){return -1;}\n        if(d-r>EPS){return 4;}\n        if(d-r>-EPS){return 3;}\n        if(d-dif>EPS){return 2;}\n        if(d-dif>-EPS){return 1;}\n        return 0;\n    }\n    \n    vector<P> crosspointLC(P p1,P p2,C c){\n        vector<P> ret;\n        P pr=project(p1,p2,c.F);\n        D d=distLP(p1,p2,c.F);\n        if(d-c.S>EPS){return ret;}\n        if(d-c.S>-EPS){ret.push_back(pr); return ret;}\n        P vec=p2-p1; vec*=sqrt(c.S*c.S-d*d)/abs(vec);\n        ret.push_back(pr-vec);\n        ret.push_back(pr+vec);\n        return ret;\n    }\n    \n    vector<P> crosspointSC(P p1,P p2,C c){\n        vector<P> ret;\n        for(auto &I:crosspointLC(p1,p2,c)){\n            if(distSP(p1,p2,I)<EPS){ret.push_back(I);}\n        }\n        return ret;\n    }\n    \n    vector<P> crosspointCC(C c1,C c2){\n        vector<P> ret;\n        P vec=c2.F-c1.F;\n        D base=(c1.S*c1.S+norm(vec)-c2.S*c2.S)/(2*abs(vec));\n        D h=sqrt(c1.S*c1.S-base*base);\n        vec/=abs(vec);\n        ret.push_back(c1.F+vec*P(base,-h));\n        ret.push_back(c1.F+vec*P(base,h));\n        return ret;\n    }\n    \n    vector<P> tangentCP(C c,P p){\n        return crosspointCC(c,C(p,sqrt(norm(c.F-p)-c.S*c.S)));\n    }\n    \n    vector<pair<P,P>> tangentCC(C c1,C c2){\n        vector<pair<P,P>> ret;\n        P d=c2.F-c1.F;\n        for(D i:{-1,1}){\n            D r=c1.S+c2.S*i;\n            if(intersectCC(c1,c2)>i+1){\n                for(P s:{-1i,1i}){\n                    P p=r+s*sqrt(norm(d)-norm(r));\n                    ret.push_back({c1.F+d*c1.S/norm(d)*p,c2.F-d*i*c2.S/norm(d)*p});\n                }\n            }\n        }\n        return ret;\n    }\n    \n    D area(const vector<P> &poly,C c){\n        D ret=0;\n        for(int i=0;i<(int)poly.size();i++){\n            P a=poly[i]-c.F,b=poly[(i+1)%poly.size()]-c.F;\n            if(abs(a)<c.S+EPS && abs(b)<c.S+EPS){ret+=cross(a,b);}\n            else{\n                vector<P> A=crosspointSC(a,b,{0,c.S});\n                if(A.empty()){ret+=c.S*c.S*arg(b/a);}\n                else{\n                    ret+=(abs(a)<c.S?cross(a,A[0]):c.S*c.S*arg(A[0]/a));\n                    ret+=(abs(b)<c.S?cross(A.back(),b):c.S*c.S*arg(b/A.back()));\n                    ret+=cross(A[0],A.back());\n                }\n            }\n        }\n        return abs(ret)/2;\n    }\n    \n    //反時計回り\n    D diameter(const vector<P> &poly){\n        D ret=0;\n        ll l=0,r=0,n=poly.size();\n        if(n==2){return abs(poly[0]-poly[1]);}\n        for(int i=0;i<n;i++){\n            if(comp(poly[l],poly[i])){l=i;}\n            if(comp(poly[i],poly[r])){r=i;}\n        }\n        ll sl=r,sr=l;\n        while(sl!=l || sr!=r){\n            ret=max(ret,abs(poly[r]-poly[l]));\n            if(cross(poly[(l+1)%n]-poly[l],poly[(r+1)%n]-poly[r])<0){(++l)%=n;}\n            else{(++r)%=n;}\n        }\n        return ret;\n    }\n    \n    D closestpair(vector<P> pt){\n        sort(pt.begin(),pt.end(),comp);\n        D ret=INF;\n        int N=pt.size();\n        for(int i=1;i<N;i<<=1){\n            for(int j=0;i+j<N;j+=i*2){\n                int m=i+j;\n                vector<P> R;\n                D l=-INF,r=INF;\n                for(int k=j;k<m;k++){l=max(l,pt[k].real());}\n                for(int k=0;m+k<N && k<i;k++){r=min(r,pt[m+k].real());}\n                for(int k=0;m+k<N && k<i;k++){\n                    if(pt[m+k].real()-l<ret){R.push_back(pt[m+k]);}\n                }\n                int idx=0;\n                for(int k=j;k<m;k++){\n                    if(r-pt[k].real()>ret){continue;}\n                    int M=R.size();\n                    while(idx<M && pt[k].imag()-R[idx].imag()>ret){idx++;}\n                    for(int s=idx;s<M && R[s].imag()-pt[k].imag()<ret;s++){\n                        ret=min(ret,abs(R[s]-pt[k]));\n                    }\n                }\n                auto ed=(j+i*2<N?pt.begin()+j+2*i:pt.end());\n                inplace_merge(pt.begin()+j,pt.begin()+m,ed,comp_y);\n            }\n        }\n        return ret;\n    }\n    \n    P centerofgravity(const vector<P> &pt){\n        P ret(0,0);\n        D wt=0;\n        for(int i=2;i<(int)pt.size();i++){\n            D w2=cross(pt[i-1]-pt[0],pt[i]-pt[0]);\n            P p=(pt[0]+pt[i-1]+pt[i])/(D)3;\n            wt+=w2;\n            ret+=p*w2;\n        }\n        return ret/wt;\n    }\n    \n    istream & operator >> (istream &i,P &p){D x,y; i>>x>>y; p={x,y}; return i;}\n    istream & operator >> (istream &i,C &p){D x,y; i>>x>>y>>p.S; p.F={x,y}; return i;}\n};\n\nusing namespace Geometry;\n\n\nint main(){\n    cout<<fixed<<setprecision(12);\n    ll n;\n    cin>>n;\n    vector<P> A(n);\n    cin>>A;\n    ll q;\n    cin>>q;\n    while(q--){\n        P X;\n        cin>>X;\n        cout<<contain(A,X)+1<<endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n#define EPS (1E-10)\nconst int maxn=100000+10;\nint n;\n\nstruct Point\n{\n    int x,y;\n    Point() {}\n    Point(int _x,int _y):x(_x),y(_y) {}\n    Point operator -(Point p)\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    bool operator <(Point p)\n    {\n        return x==p.x?y<p.y:x<p.x;\n    }\n    int cross(Point p)\n    {\n        return x*p.y-y*p.x;\n    }\n    int dot(Point p)\n    {\n        return x*p.x+y*p.y;\n    }\n    int norm()\n    {\n        return x*x+y*y;\n    }\n\n};\nvector<Point> ps;\n\nint ccw(Point p,Point p1,Point p2)\n{\n    #define COUNT_CLOCKWISE 1\n    #define CLOCKWISE -1\n    #define ONLINE_FRONT 2\n    #define ONLINE_BACK -2\n    #define ON_SEGMENT 0\n    Point a=p1-p;\n    Point b=p2-p;\n    if(a.cross(b)<-EPS) return CLOCKWISE;\n    if(fabs(a.cross(b)<EPS)) return CLOCKWISE;\n    if(a.cross(b)>EPS) return COUNT_CLOCKWISE;\n    if(a.dot(b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n\n}\nint is_contain(vector<Point> ps,Point p)\n{\n    Point a,b;\n    int n=(int)ps.size();\n    bool flag=false;\n    for(int i=0;i<n;i++)\n    {\n        a=ps[i]-p;\n        b=ps[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<=EPS&&b.y>EPS&&a.cross(b)>EPS) flag=!flag;\n        if(abs(a.cross(b))<EPS&&a.dot(b)<EPS) return 1;\n    }\n    return flag?2:0;\n}\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    int x,y;\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        ps.push_back(Point(x,y));\n    }\n    int q;\n    Point p;\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        scanf(\"%d%d\",&p.x,&p.y);\n        printf(\"%d\\n\",is_contain(ps,p));\n    }\n\n\n\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = -1, ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0;\nconst int IN = 2, ON = 1, OUT = 0;\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point rhs) {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\tPoint operator - (Point rhs) {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tbool operator < (const Point& rhs) const {\n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\tbool operator == (const Point& rhs) const {\n\t\treturn equals(x, rhs.x) && equals(y, rhs.y);\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0);\n}\nbool isOrthogonal(Segment a, Segment b) {\n\treturn isOrthogonal(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0);\n}\nbool isParallel(Segment a, Segment b) {\n\treturn isParallel(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nPoint project(Point p, Segment s) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + (base * r);\n}\nPoint reflect(Point p, Segment s) {\n\treturn p + (project(p, s) - p) * 2;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\telse if (cross(a, b) < -EPS) return CLOCKWISE;\n\telse if (dot(a, b) < -EPS) return ONLINE_BACK;\n\telse if (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 && ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0); \n}\ndouble getDistance(Point a, Point b) {\n\treturn (b - a).abs();\n}\ndouble getDistancePL(Point p, Line l) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\ndouble getDistancePS(Point p, Segment s) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n\telse if (dot(s.p1 - s.p2, p - s.p2) < 0) return (p - s.p2).abs();\n\telse return getDistancePL(p, s);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0;\n\treturn min(min(getDistancePS(s2.p1, s1), getDistancePS(s2.p2, s1)), min(getDistancePS(s1.p1, s2), getDistancePS(s1.p2, s2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = fabs(cross(base, s1.p1 - s2.p1)), d2 = fabs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\npair<Point, Point> getCrossPoints(Line l, Circle c) {\n\tPoint pr = project(c.c, l);\n\tVector e = (l.p2 - l.p1) * (1 / (l.p2 - l.p1).abs());\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\tif (e.x > EPS || (fabs(e.x) < EPS && e.y > EPS)) return make_pair(pr - e * base, pr + e * base);\n\telse return make_pair(pr + e * base, pr - e * base);\n}\ndouble arg(Vector v) {\n\treturn atan2(v.y, v.x);\n}\nVector polar(double r, double theta) {\n\treturn Vector(r * cos(theta), r * sin(theta));\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs(), phi = acos((c1.r * c1.r + d * d - c2.r * c2.r) * (1 / (2 * c1.r * d)));\n\tdouble theta = arg(c2.c - c1.c);\n\tif (polar(c1.r, theta + phi).x > polar(c1.r, theta - phi).x || (equals(polar(c1.r, theta + phi).x, polar(c1.r, theta - phi).x) && polar(c1.r, theta + phi).y > polar(c1.r, theta - phi).y)) return make_pair(c1.c + polar(c1.r, theta - phi), c1.c + polar(c1.r, theta + phi));\n\telse return make_pair(c1.c + polar(c1.r, theta + phi), c1.c + polar(c1.r, theta - phi));\n}\nint contains(Point p, Polygon g) {\n\tint n = g.size();\n\tbool flag = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tVector a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (fabs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && b.y > EPS && cross(a, b) > EPS) flag = !flag;\n\t}\n\treturn flag ? IN : OUT;\n}\nint main() {\n    int n, q;\n    double x, y;\n    Polygon g;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n    \tscanf(\"%lf%lf\", &x, &y);\n    \tg.push_back(Point(x, y));\n\t}\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tscanf(\"%lf%lf\", &x, &y);\n\t\tprintf(\"%d\\n\", contains(Point(x, y), g));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int INF = INT_MAX / 3;\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\n\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {\n\t}\n\tP operator +(P p) {\n\t\treturn P(add(x, p.x), add(y, p.y));\n\t}\n\tP operator -(P p) {\n\t\treturn P(add(x, -p.x), add(y, -p.y));\n\t}\n\tP operator *(double d) {\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot(P p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det(P p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print() {\n\t\tprintf(\"%.10lf %.10lf \\n\", x, y);\n\t\treturn;\n\t}\n};\n\nint onCheck(P &p, P &q, P &r){\n\tbool a = ((q-p).det(r-p)==0);\n\tbool b = ((p-q).dot(r-q) >=0 );\n\tbool c = ((p-r).dot(q-r)  >= 0 );\n\tif(a&&b&&c){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint intersectionCheck(P &p0, P &p1, P &p2, P &p3){\n\tP q0 = p1-p0;\n\tP q1 = p3-p2;\n\tif(q0.det(q1)==0){\n\t\tbool a =onCheck(p0,p2, p3) ;\n\t\tbool b =onCheck(p1,p2, p3) ;\n\t\tbool c = onCheck(p2,p0, p1) ;\n\t\tbool d = onCheck(p3,p0, p1);\n\t\tif (!a && !b && !c && !d){\n\t\t\treturn 0;\n\t\t}else{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tP r = p0 + (p1-p0)*(q1.det(p2-p0)/q1.det(q0));\n\tbool e = onCheck(r, p0, p1);\n\tbool f = onCheck(r, p2, p3);\n\tif(e && f){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint PolygonPointContainment(vector<P> &polygon, P p){\n\tP INFpoint;\n\tINFpoint.x=100000.0;\n\tINFpoint.y=100000.0*sqrt(2); \t//????????????\n\n\tint S=0; \t//p??????????????´??????????§???¢??¨??????????????°\n\tint g = polygon.size();\n\n\tREP(i, g){\n\t\tP q= polygon[i];\n\t\tP r = polygon[i+1];\n\t\tif(onCheck(p,q,r)==1){\n\t\t\treturn 1; \t//p?????????qr??????????????´???\n\t\t}\n\t\tif(intersectionCheck(p, INFpoint, q,r)==1){\n\t\t\tS++;\n\t\t}\n\t}\n\tP q= polygon[g-1];\n\tP r = polygon[0];\n\tif(onCheck(p,q,r)==1){\n\t\treturn 1; \t//p?????????qr??????????????´???\n\t}\n\tif(intersectionCheck(p, INFpoint, q,r)==1){\n\t\tS++;\n\t}\n\n\tif(S%2==0){\n\t\treturn 0;\n\t}else{\n\t\treturn 2;\n\t}\n}\n\nint main(){\n\tint g, q;\n\tcin >> g ;\n\tvector<P> polygon;\n\tREP(i,g){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tpolygon.push_back(p);\n\t}\n\n\tcin >> q;\n\tREP(i, q){\n\t\tP p;\n\t\tcin >> p.x >> p.y ;\n\t\tcout << PolygonPointContainment(polygon, p) <<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define all(v) v.begin(), v.end()\n#define Graph vector< vector<int> >\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1000000007;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x0, double y0){\n        x = x0; y = y0;\n    }\n\n    Point operator +(const Point &p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator *(const double &a){\n        return Point(a * x, a * y);\n    }\n    Point operator /(const double &a){\n        return Point(x / a, y / a);\n    }\n\n    bool operator == (const Point &p){\n        return equals(x, p.x) && equals(y, p.y);\n    }\n\n    bool operator < (const Point &p){\n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n};\n\ndouble norm(Point p){\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble v_abs(Point p){\n    return sqrt(norm(p));\n}\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c0, double r0){\n        c.x = c0.x;\n        c.y = c0.y;\n        r = r0;\n    }\n    Circle(double x0, double y0, double r0){\n        c.x = x0;\n        c.y = y0;\n        r = r0;\n    }\n};\n\nint N;\nvector<Point> G(110);\nint contains(Point p){\n    bool con = false;\n    for(int i = 0; i < N; i++){\n        Vector a = G[i] - p, b = G[i + 1] - p; // G[(i + 1) % N]\n        if(equals(cross(a, b), 0.0) && dot(a, b) < EPS) return 1;\n        if(a.y > b.y) swap(a, b);\n        if(b.y > EPS && a.y < EPS && cross(a, b) > EPS) con = !con;\n    }\n    if(con) return 2;\n    else return 0;\n}\n\nint main(){\n    cin >> N;\n    rep(i, N) cin >> G[i].x >> G[i].y;\n    G[N] = G[0]; \n\n    int Q;\n    cin >> Q;\n    rep(i, Q){\n        Point p;\n        cin >> p.x >> p.y;\n        cout << contains(p) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <numeric>\n#include <iomanip>\n#include <utility>\n#include <cstdlib>\n#include <sstream>\n#include <bitset>\n#include <vector>\n#include <cstdio>\n#include <ctime>\n#include <queue>\n#include <deque>\n#include <cmath>\n#include <stack>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define sz size()\n\nconst double EPS = 1e-10;\nconst int INF = 100000000;\n\n\n\nint isPointInsidePolygon(vector<pair<double,double>> angle,pair<double,double> point){    //点が多角形の内側にあるかどうかを求める\n    long angleSum=angle.size();\n    int count=0;\n    \n    for(int i=0;i<angleSum;i++){\n        double x1=angle[i].first;\n        double y1=angle[i].second;\n        double x2=angle[(i+1)%angleSum].first;\n        double y2=angle[(i+1)%angleSum].second;\n        double xp=point.first;\n        double yp=point.second;\n        \n        double result=(x2-x1)*(yp-y1) - (xp-x1)*(y2-y1);\n        \n        if(result<0)return 0;       //点は外側にある\n        \n        if(result==0)count+=2;\n        else if(result>0)count++;\n        \n    }\n    if(count==angleSum)return 2;    //点は内側にある\n    else return 1;                  //点は周上にある\n    \n}\n\n\nint main(){\n    int g,q;\n    cin>>g;\n\n    vector<pair<double,double>> angle;\n    \n    rep(i,g){\n        int x,y;\n        cin>>x>>y;\n        angle.pb(pair<double,double>(x,y));\n    }\n\n\n    cin>>q;\n    \n    rep(i,q){\n        int x,y;\n        cin>>x>>y;\n        cout<<isPointInsidePolygon(angle,pair<double,double>(x,y))<<endl;\n\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint in_poly(P a, Poly p, P ex){\n  int n = p.size(), c = 0;\n  /*\n  P ex = a;\n  for(int i = 0; i < n; ++i) ex.X = max(ex.X,p[i].X+1);\n  */\n  L l = L(a,ex);\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    if(cross(l.second-l.first,p[i+1]-p[i]) && is_cross(l,L(p[i],p[i+1]))){\n      ++c;\n      if(!ccw(p[i],p[i+1],a)) return 1;//??????\n    }\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    Mx = max(Mx,x);\n    My = max(My,y);\n    p[i] = P(x,y);\n  }\n  ++Mx;\n  ++My;\n  P ex = P(Mx,My);\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << in_poly(P(x,y),p,ex) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"[ answer ]: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"[ answer ]: \"; cout << setprecision(27) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg(var0) {}\n#define dbg2(var0, var1) {}\n#define dbg3(var0, var1, var2) {}\n#define dbgArray(a,n) {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p - s.p1));\n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\n//poly ??????????¨?????????????????????¶\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() <= 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n//?????§????????£????????????????????? ????????????????§????180?°??\\???\nbool isConvex(Polygon poly) {\n\tPolygon conv = ConvexHull(poly,true);\n\treturn conv.size() == poly.size();\n}\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint n; put n;\n\tPolygon poly;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tpoly.push_back(p);\n\t}\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p; put p.x >> p.y;\n\t\tcout << contains(poly,p) << endl;\n\t}\n\nEND:\n\treturn 0;\n}\n/*\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tdputans(dist);\n\t}\n\t*/\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n  int ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0; // a--c--b on line\n  }\n  int linejudge(const L &ab,const L &cd){ //2??´???????????¢???\n    P a = ab[1] - ab[0],b = cd[1] - cd[0];\n    if(abs(cross(a,b)) < EPS){ // Parallel\n      return 2;\n    }\n    else if(abs(dot(a,b)) < EPS){ //Orthogonal\n      return 1;\n    }\n    return 0;\n  }\n  // L:line,S:segment,P:point\n  bool intersectLL(const L &l, const L &m) {\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n      abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n  }\n  bool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n      cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n  }\n  bool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n  }\n  bool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n      ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n  }\n  bool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n  }\n  // L & P intersection\n  P projection(const L &l, const P &p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n  }\n  // L????????????P???????°????\n  P reflection(const L &l, const P &p) {\n    return p + 2.0 * (projection(l, p) - p);\n  }\n  double distanceLP(const L &l, const P &p) {\n    return abs(p - projection(l, p));\n  }\n  double distanceLL(const L &l, const L &m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n  }\n  double distanceLS(const L &l, const L &s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n  }\n  double distanceSP(const L &s, const P &p) {\n    const P r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n  }\n  double distanceSS(const L &s, const L &t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n  }\n  double distancePP(const P &p,const P &q){\n    return abs(p - q) ;\n  }\n  P crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n  }\n  P verticalvector(const P &a,const P &b){//2???????????????????????????????????????\n    if(a.real() == b.real()){\n      return {1.0,0};\n    }\n    if(a.imag() == b.imag()){\n      return {0,1.0};\n    }\n    P p = a - b;\n    P res = {-p.imag(),p.real()};\n    return res / abs(p);\n  }\n  pair<P,P> crosspointCircle(const C &a,const C &b){\n    P m = (a.p+b.p)/2.0;\n    P vv = verticalvector(a.p,b.p);\n    double u = sqrt( a.r * a.r - norm(a.p - b.p) / 4.0);\n    P A = m + u * vv,B = m - u * vv;\n    return mp(A,B);\n  }\n  double calc_triangle(P a,P b,P c){\n    P ba = (b - a);\n    P ca = (c - a);\n    return (real(ba) * imag(ca) - imag(ba) * real(ca))/2.0;\n  }\n  double calc_area(const G &g){\n    double res = 0;\n    rep(i,g.size()-2){\n      res += calc_triangle(g[0],g[(i+1) % g.size()],g[(i+2) % g.size()]);\n    }\n    return res;\n  }\n  bool is_convex(const G &g){\n    if(g.size() == 3) return true;\n    rep(i,g.size()){\n      if(ccw(g[i],g[(i+1) % g.size()],g[(i+2) % g.size()]) != 1 && ccw(g[i],g[(i+1) % g.size()],g[(i+2) % g.size()]) != -2){\n        return false;\n      }\n    }\n    return true;\n  }\n  int convex_point(const G &g,const P &p){\n    rep(i,g.size()){\n      int k = ccw(g[i],g[(i+1) % g.size()],p);\n      if(k == 0){\n        return 1; // p on g\n      }\n      if(k != 1){\n        return 0; // p out g\n      }\n    }\n    return 2; // p in g\n  }\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll n;\n  double x,y;\n  cin >> n;\n  G g;\n  rep(i,n){\n    cin >> x >> y;\n    g.push_back({x,y});\n  }\n  ll q;\n  cin >> q;\n  rep(i,q){\n    cin >> x >> y;\n    std::cout << convex_point(g,P(x,y)) << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n#include <array>\n\nusing namespace std;\n\nconst double eps = 1e-10;\nconst double sv = 0.01;\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n  \n  static int ccw( Vector v1, Vector v2, Vector v3);\n  static int crossCheck( Vector v1, Vector v2, Vector v3, Vector v4 );\n  static bool boundaryCheck( Vector v1, Vector v2, Vector v3);\n  void print() { cout << fixed << setprecision(10) << x << \" \" << y << endl; }\n};\n\nint Vector::ccw( Vector v1, Vector v2, Vector v3 )\n{\n  Vector v21 = v2 - v1;\n  Vector v31 = v3 - v1;\n  Vector v12 = v1 - v2;\n  Vector v32 = v3 - v2;\n\n  double crv = Vector::cross( v21, v31 );\n  double dtv = Vector::dot( v21, v31 );\n  double rdtv = Vector::dot( v12, v32 );\n  \n  if ( fabs( crv ) < eps )\n    {\n      if ( dtv < -eps )\n        return 2;\n      else if ( rdtv < -eps )\n        return 3;\n      else\n        return 0;\n    }\n  else if ( crv > 0 )\n    return 1;\n  else \n    return -1;\n}\n\nbool Vector::boundaryCheck( Vector v1, Vector v2, Vector v3 )\n{\n  if ( ccw( v1, v2, v3 ) == 0 )\n    return true;\n  else\n    return false;\n}\n\nint Vector::crossCheck( Vector v1, Vector v2, Vector v3, Vector v4 )\n{\n\n  double c123 = ccw( v1, v2, v3 );\n  double c124 = ccw( v1, v2, v4 );\n  double c341 = ccw( v3, v4, v1 );\n  double c342 = ccw( v3, v4, v2 );\n\n  if ( c123 * c124 == 1 || c341 * c342 == 1 )\n    return 0;\n  else if ( c123 * c124 == -1 && c341 * c342 == -1 )\n    return 1;\n  else if ( c123 * c124 == 0 )\n    return 2;\n  else\n    return 0;\n}\n\nclass Polygon\n{\npublic:\n  int n;\n  vector<Vector> pt;\n  Polygon(){}\n  Polygon( int n ) : n(n), pt(n) {}\n  int solve( Vector p );\n};\n\nint Polygon::solve( Vector p )\n{\n  Vector inf = Vector( 20000, p.y );\n  Vector pd = Vector( p.x, p.y + sv );\n  Vector infd = Vector( 20000, p.y + sv );\n\n  int cnt = 0;\n\n  for ( auto i = 0; i < n; ++i )\n    {\n      if ( Vector::boundaryCheck( pt[i], pt[(i+1) % n], p ) )\n        {\n          cout << \"1\" << endl;\n          return 0;\n        }\n    }\n  \n  for ( auto i = 0; i < n; ++i )\n    {\n      int rcc = Vector::crossCheck( p, inf, pt[i], pt[(i+1) % n] );\n      if ( rcc == 1 )\n        ++cnt;\n      else if ( rcc == 2 )\n        {\n          int rccd = Vector::crossCheck( pd, infd, pt[i], pt[(i+1) % n] );\n          \n          if ( rccd == 1 )\n            ++cnt;\n        }\n    }\n\n  if ( cnt % 2 == 0 )\n    cout << \"0\" << endl;\n  else\n    cout << \"2\" << endl;\n  \n  return 0;\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n\n  Polygon g( n );\n  \n  for ( auto i = 0; i < n; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.pt[i] = Vector( x, y );\n    }\n  \n  int q;\n  cin >> q;\n  \n  for ( auto i = 0; i < q; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.solve( Vector(x, y) );\n    }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<vector>\n#include<iomanip>\n\nusing namespace std;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define EPS 1e-9\n#define shosu(x) fixed<<setprecision(x)\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n  L(){;}\n};\nstruct C{\n  P c;double r;\n  C(const P &c,double r):c(c),r(r){}\n};\n\nnamespace std{//演算子の定義\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real() && a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {//3点の関係性\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nP projection(const L &l, const P &p){//pの直線l上の射影の点\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nP reflection(const L &l, const P &p){//点pの直線lに関して対称な点\n  return p+2.0*(projection(l,p)-p);\n}\n\nbool isorthogonal(const L &l, const L &m){//2直線の直交判定\n  return fabs(dot(l[1]-l[0], m[1]-m[0])) < EPS;\n}\n\nbool isparallel(const L &l, const L &m){//2直線の平行判定\n  return fabs(cross(l[1]-l[0],m[1]-m[0])) < EPS;\n}\n\nbool intersectLL(const L &l, const L &m){//2直線の交差判定\n  return !isparallel(l,m);\n}\n\nbool intersectSS(const L &s, const L &t) { //2線分の交差判定(完全に交差してないとだめ)\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\nbool intersectSP(const L &s, const P &p) { //直線と点の交差判定\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP crosspointSS(const L &a, const L &b){ //2線分の交点\ndouble t1=abs(cross(a[1]-a[0],b[0]-a[0]));\ndouble t2=abs(cross(a[1]-a[0],b[1]-a[0]));\nreturn b[0]+(b[1]-b[0])*t1/(t1+t2);\n}\n\ndouble distanceSP(const L &s, const P &p) {//直線と点との距離\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {//2線分の距離\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\ndouble area(const G &g){ //多角形の面積\n    double S =0;\n    for(int i = 0; i < g.size(); i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\n\nbool isconvex(const G &g){ //凸かどうか(全ての内角の大きさが180度以下)\n\tint n=g.size();\n  for(int i = 0; i < n; i++)\n    if(ccw(g[(i+n-1)%n],g[i%n],g[(i+1)%n])==-1)return false;\n\treturn true;\n}\n\nint inconvex(const G& g, const P& p) { //多角形と点の関係\n\tbool in = false;\n\tint n = g.size();\n\tfor(int i = 0; i < n; i++){\n\t\tP a=g[i%n]-p;\n\t\tP b=g[(i+1)%n]-p;\n\t\tif(imag(a)>imag(b))swap(a, b);\n\t\tif(imag(a)<EPS&&0<imag(b))if(cross(a,b)<0)in=!in;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;//ON\n\t}\n\treturn in?2:0;//IN : OUT;\n}\n\nP inP(){\n  double x,y;\n  cin >> x >> y;\n  P p(x,y);\n  return p;\n}\n\nL inL(){\n  P p1=inP();\n  P p2=inP();\n  L l(p1,p2);\n  return l;\n}\n\nint main(){\n\n  int n;\n  cin >> n;\n  G g;\n  for(int i = 0; i< n; i++){\n    P p = inP();\n    g.push_back(p);\n  }\n  int q;\n  cin >> q;\n  for(int i = 0; i < q; i++){\n    P p = inP();\n    cout << inconvex(g, p) << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC target(\"avx2\")\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"unroll-loops\")\n#include \"bits/stdc++.h\"\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n\n// Begin Header {{{\nusing namespace std;\n\n#ifndef DEBUG\n#define dump(...)\n#endif\n\n#define all(x) x.begin(), x.end()\n#define rep(i, b, e) for (intmax_t i = (b), i##_limit = (e); i < i##_limit; ++i)\n#define reps(i, b, e) for (intmax_t i = (b), i##_limit = (e); i <= i##_limit; ++i)\n#define repr(i, b, e) for (intmax_t i = (b), i##_limit = (e); i >= i##_limit; --i)\n#define var(Type, ...) Type __VA_ARGS__; input(__VA_ARGS__)\n\nconstexpr size_t    operator\"\"_zu(unsigned long long value) { return value; };\nconstexpr intmax_t  operator\"\"_jd(unsigned long long value) { return value; };\nconstexpr uintmax_t operator\"\"_ju(unsigned long long value) { return value; };\n\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr intmax_t LINF = 0x3f3f3f3f3f3f3f3f_jd;\n\ntemplate <class T, class Compare = less<>>\nusing MaxHeap = priority_queue<T, vector<T>, Compare>;\ntemplate <class T, class Compare = greater<>>\nusing MinHeap = priority_queue<T, vector<T>, Compare>;\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head&& head, Tail&&... tail) {\n    cin >> head;\n    input(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline istream& operator>>(istream &is, vector<T> &vec) {\n    for (auto &e: vec) {\n        is >> e;\n    }\n    return is;\n}\n\ninline void output() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void output(Head&& head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) {\n        cout << \" \";\n    }\n    output(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<<(ostream &os, const vector<T> &vec) {\n    static constexpr const char *delim[] = {\" \", \"\"};\n    for (const auto &e: vec) {\n        os << e << delim[&e == &vec.back()];\n    }\n    return os;\n}\n\ntemplate <class T>\ninline vector<T> makeVector(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\n\ntemplate <class T, class... Args>\ninline auto makeVector(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(makeVector<T>(initValue, args...))>(sz, makeVector<T>(initValue, args...));\n}\n\ntemplate <class Func>\nclass FixPoint : Func {\npublic:\n    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}\n\n    template <class... Args>\n    constexpr decltype(auto) operator()(Args&&... args) const {\n        return Func::operator()(*this, std::forward<Args>(args)...);\n    }\n};\n\ntemplate <class Func>\nstatic inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {\n    return FixPoint<Func>{forward<Func>(f)};\n}\n\ntemplate <class Container>\nstruct reverse_t {\n    Container &c;\n    reverse_t(Container &c) : c(c) {}\n    auto begin() { return c.rbegin(); }\n    auto end() { return c.rend(); }\n};\n\ntemplate <class Container>\nauto reversed(Container &c) {\n    return reverse_t<Container>(c);\n}\n\ntemplate <class T>\ninline bool chmax(T &a, const T &b) noexcept {\n    return b > a && (a = b, true);\n}\n\ntemplate <class T>\ninline bool chmin(T &a, const T &b) noexcept {\n    return b < a && (a = b, true);\n}\n\ntemplate <class T>\ninline T diff(const T &a, const T &b) noexcept {\n    return a < b ? b - a : a - b;\n}\n// End Header }}}\n\n// Geometry {{{\nconst long double EPS = 1e-10;\nconst long double PI = acos(-1);\n\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Real {\n    long double x;\n\n    Real(long double x = 0) : x(x) {}\n    Real(const Real& rhs) { x = rhs.x; }\n\n    Real operator+(const Real& rhs) const { return Real(x + rhs.x); }\n    Real& operator+=(const Real& rhs) { return x += rhs.x, *this; }\n    Real operator-(const Real& rhs) const { return Real(x - rhs.x); }\n    Real& operator-=(const Real& rhs) { return x -= rhs.x, *this; }\n    Real operator*(const Real& rhs) const { return Real(x * rhs.x); }\n    Real& operator*=(const Real& rhs) { return x *= rhs.x, *this; }\n    Real operator/(const Real& rhs) const { return Real(x / rhs.x); }\n    Real& operator/=(const Real& rhs) { return x /= rhs.x, *this; }\n    Real operator-() const { return Real(-x); }\n    Real& operator++() { return ++x, *this; }\n    Real& operator--() { return --x, *this; }\n    Real operator++(int) { Real tmp(x); return ++x, tmp; }\n    Real operator--(int) { Real tmp(x); return --x, tmp; }\n    bool operator==(const Real& rhs) const { return fabs(x - rhs.x) < EPS; }\n    bool operator!=(const Real& rhs) const { return !(*this == rhs); }\n    bool operator<(const Real& rhs) const { return (*this == rhs) ? false : x < rhs.x; }\n    bool operator>(const Real& rhs) const { return (*this == rhs) ? false : x > rhs.x; }\n    bool operator<=(const Real& rhs) const { return (*this == rhs) ? true : x < rhs.x; }\n    bool operator>=(const Real& rhs) const { return (*this == rhs) ? true : x > rhs.x; }\n    template <class T> explicit operator T() const { return static_cast<T>(x); }\n\n    friend istream& operator>>(istream& is, Real& rhs) {\n        is >> rhs.x;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Real& rhs) {\n        os << rhs.x;\n        return os;\n    }\n\n    friend Real pow(const Real& n, const Real& p) { return pow(n.x, p.x); }\n    friend Real pow(Real n, intmax_t p) {\n        Real ret = 1;\n        for (; p > 0; p >>= 1) {\n            if (p & 1) ret *= n;\n            n *= n;\n        }\n        return ret;\n    }\n    friend Real abs(const Real& rhs) { return abs(rhs.x); }\n    friend Real sin(const Real& rhs) { return sin(rhs.x); }\n    friend Real cos(const Real& rhs) { return cos(rhs.x); }\n    friend Real tan(const Real& rhs) { return tan(rhs.x); }\n    friend Real asin(const Real& rhs) { return asin(rhs.x); }\n    friend Real acos(const Real& rhs) { return acos(rhs.x); }\n    friend Real atan(const Real& rhs) { return atan(rhs.x); }\n    friend Real atan2(const Real& lhs, const Real& rhs) { return atan2(lhs.x, rhs.x); }\n    friend Real sqrt(const Real& rhs) { return sqrt(rhs.x); }\n    friend Real ceil(const Real& rhs) { return ceil(rhs.x); }\n    friend Real floor(const Real& rhs) { return floor(rhs.x); }\n    friend Real round(const Real& rhs) { return round(rhs.x); }\n};\n\nusing real_t = Real;\nreal_t operator\"\"_r(long double value) { return value; };\n\nstruct Point {\n    real_t x, y;\n\n    Point(real_t x = 0, real_t y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point& rhs) const { return Point(x + rhs.x, y + rhs.y); }\n    Point operator-(const Point& rhs) const { return Point(x - rhs.x, y - rhs.y); }\n    Point operator*(const real_t& rhs) const { return Point(x * rhs, y * rhs); }\n    Point operator/(const real_t& rhs) const { return Point(x / rhs, y / rhs); }\n    Point operator-() const { return Point(-x, -y); }\n    bool operator==(const Point& rhs) const { return x == rhs.x && y == rhs.y; }\n    bool operator!=(const Point& rhs) const { return !(*this == rhs); }\n    bool operator<(const Point& rhs) const { return (x == rhs.x) ? y < rhs.y : x < rhs.x; }\n    bool operator>(const Point& rhs) const { return (x == rhs.x) ? y > rhs.y : x > rhs.x; }\n    bool operator<=(const Point& rhs) const { return (*this == rhs) ? true : *this < rhs; }\n    bool operator>=(const Point& rhs) const { return (*this == rhs) ? true : *this > rhs; }\n\n    friend istream& operator>>(istream& is, Point& rhs) {\n        is >> rhs.x >> rhs.y;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Point& rhs) {\n        os << rhs.x << ' ' << rhs.y;\n        return os;\n    }\n};\n\nusing Vector = Point;\nusing Polygon = vector<Point>;\n\nreal_t norm(const Vector& a) { return a.x * a.x + a.y * a.y; }\nreal_t len(const Vector& a) { return sqrt(norm(a)); }\nreal_t dot(const Vector& a, const Vector& b) { return a.x * b.x + a.y * b.y; }\nreal_t cross(const Vector& a, const Vector& b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator==(const Segment& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }\n    bool operator!=(const Segment& rhs) const { return !(*this == rhs); }\n\n    friend istream& operator>>(istream& is, Segment& rhs) {\n        is >> rhs.p1 >> rhs.p2;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Segment& rhs) {\n        os << rhs.p1 << ' ' << rhs.p2;\n        return os;\n    }\n};\n\nusing Line = Segment;\n\nstruct Circle {\n    Point c;\n    real_t r;\n\n    Circle(Point c = Point(), real_t r = 0) : c(c), r(r) {}\n\n    bool operator==(const Circle& rhs) const { return c == rhs.c && r == rhs.r; }\n    bool operator!=(const Circle& rhs) const { return !(*this == rhs); }\n\n    friend istream& operator>>(istream& is, Circle& rhs) {\n        is >> rhs.c >> rhs.r;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Circle& rhs) {\n        os << rhs.c << rhs.r;\n        return os;\n    }\n};\n\nreal_t len(const Segment& s) { return len(s.p1 - s.p2); }\n\nbool isParallel(const Vector& a, const Vector& b) {\n    return cross(a, b) == 0.0_r;\n}\nbool isParallel(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(const Segment& s1, const Segment& s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isOrthogonal(const Vector& a, const Vector& b) {\n    return dot(a, b) == 0.0_r;\n}\nbool isOrthogonal(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(const Segment& s1, const Segment& s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(const Segment& s, const Point& p) {\n    const Vector base = s.p2 - s.p1;\n    const Vector hypo = p - s.p1;\n    const real_t r = dot(hypo, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(const Segment& s, const Point& p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nreal_t arg(const Vector& p) {\n    return atan2(p.y, p.x);\n}\n\nVector polar(real_t r, real_t ang) {\n    return Point(r * cos(ang), r * sin(ang));\n}\n\nint ccw(const Point& p0, const Point& p1, const Point& p2);\nbool intersectSS(const Point& p1, const Point& p2, const Point& p3, const Point& p4);\nbool intersectSS(const Segment& s1, const Segment& s2);\nbool intersectSG(const Segment& s, const Polygon& g);\nint intersectCC(Circle c1, Circle c2);\nbool intersectLC(const Line& l, const Circle& c);\nint intersectSC(const Segment& s, const Circle& c);\nreal_t getDistancePP(const Point& p1, const Point& p2);\nreal_t getDistanceLP(const Line& l, const Point& p);\nreal_t getDistanceSP(const Segment& s, const Point& p);\nreal_t getDistanceSS(const Segment& s1, const Segment& s2);\nPoint getcrossPointSS(const Segment& s1, const Segment& s2);\nPoint getcrossPointLL(const Line& l1, const Line& l2);\nPolygon getcrossPointLC(const Line& l, const Circle& c);\nPolygon getcrossPointSC(const Segment& s, const Circle& c);\nPolygon getcrossPointCC(const Circle &c1, const Circle &c2);\nbool isConvex(const Polygon& g);\nint contains(const Polygon& g, const Point& p);\nPolygon convexFull(Polygon g, bool ONSEG);\nreal_t area(const Polygon& g);\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0_r) return CCW_COUNTER_CLOCKWISE;\n    if (cross(a, b) < 0.0_r) return CCW_CLOCKWISE;\n    if (dot(a, b) < 0.0_r) return CCW_ONLINE_BACK;\n    if (norm(a) < norm(b)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\nbool intersectSS(const Segment& s1, const Segment& s2) {\n    return intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool intersectSG(const Segment& s, const Polygon& g) {\n    const size_t N = g.size();\n    for (size_t i = 0; i < N; ++i) {\n        if (intersectSS(Segment(g[i], g[(i + 1) % N]), s)) return true;\n    }\n    return false;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n    if (c1.r < c2.r) swap(c1, c2);\n    const real_t d = len(c1.c - c2.c);\n    const real_t r = c1.r + c2.r;\n    if (d == r) return ICC_CIRCUMSCRIBE;\n    if (d > r) return ICC_SEPARATE;\n    if (d + c2.r == c1.r) return ICC_INSCRIBE;\n    if (d + c2.r < c1.r) return ICC_CONTAIN;\n    return ICC_INTERSECT;\n}\n\nbool intersectLC(const Line& l, const Circle& c) {\n    return getDistanceSP(l, c.c) <= c.r;\n}\n\nint intersectSC(const Segment& s, const Circle& c) {\n    const Point h = project(s, c.c);\n    if (norm(h - c.c) - c.r * c.r > 0.0_r) return 0;\n    const real_t d1 = getDistancePP(c.c, s.p1);\n    const real_t d2 = getDistancePP(c.c, s.p2);\n    if (d1 < c.r && d2 < c.r) return 0;\n    if ((d1 < c.r && d2 > c.r) || (d1 > c.r && d2 < c.r)) return 1;\n    if (dot(s.p1 - h, s.p2 - h) < 0.0_r) return 2;\n    return 0;\n}\n\nreal_t getDistancePP(const Point& p1, const Point& p2) {\n    return len(p2 - p1);\n}\n\nreal_t getDistanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / len(l.p2 - l.p1));\n}\n\nreal_t getDistanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0_r) return getDistancePP(p, s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0_r) return getDistancePP(p, s.p2);\n    return getDistanceLP(s, p);\n}\n\nreal_t getDistanceSS(const Segment& s1, const Segment& s2) {\n    if (intersectSS(s1, s2)) return 0.0;\n    const real_t opt1 = getDistanceSP(s1, s2.p1);\n    const real_t opt2 = getDistanceSP(s1, s2.p2);\n    const real_t opt3 = getDistanceSP(s2, s1.p1);\n    const real_t opt4 = getDistanceSP(s2, s1.p2);\n    return min({opt1, opt2, opt3, opt4});\n}\n\nPoint getcrossPointSS(const Segment& s1, const Segment& s2) {\n    Vector base = s2.p2 - s2.p1;\n    const real_t d1 = abs(cross(base, s1.p1 - s2.p1));\n    const real_t d2 = abs(cross(base, s1.p2 - s2.p1));\n    const real_t t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nPolygon getcrossPointLC(const Line& l, const Circle& c) {\n    Polygon ps;\n    const Point pr = project(l, c.c);\n    const Vector e = (l.p2 - l.p1) / len(l.p2 - l.p1);\n    if (getDistanceLP(l, c.c) == c.r) {\n        ps.emplace_back(pr);\n        return ps;\n    }\n    const real_t base = sqrt(c.r * c.r - norm(pr - c.c));\n    ps.emplace_back(pr + e * base);\n    ps.emplace_back(pr - e * base);\n    return ps;\n}\n\nPolygon getcrossPointSC(const Segment& s, const Circle& c) {\n    const Line l(s);\n    Polygon ret = getcrossPointLC(l, c);\n    if (intersectSC(s, c) == 2) return ret;\n    if (ret.size() > 1) {\n        if (dot(l.p1 - ret[0], l.p2 - ret[0]) > 0.0) swap(ret[0], ret[1]);\n        ret.pop_back();\n    }\n    return ret;\n}\n\nPolygon getcrossPointCC(const Circle& c1, const Circle& c2) {\n    Polygon p(2);\n    const real_t d = getDistancePP(c1.c, c2.c);\n    const real_t a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0_r * c1.r * d));\n    const real_t t = arg(c2.c - c1.c);\n    p[0] = c1.c + polar(c1.r, t + a);\n    p[1] = c1.c + polar(c1.r, t - a);\n    return p;\n}\n\nbool isConvex(const Polygon& g) {\n    const size_t N = g.size();\n    for (size_t i = 0; i < N; ++i) {\n        const int state = ccw(g[i], g[(i + 1) % N], g[(i + 2) % N]);\n        if (state == CCW_CLOCKWISE) return false;\n    }\n    return true;\n}\n\n// OUT:0 ON:1 IN:2\nenum {\n    OUT, ON, IN\n};\n\nint contains(const Polygon& g, const Point& p) {\n    const size_t N = g.size();\n    bool valid = false;\n    for (size_t i = 0; i < N; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % N] - p;\n        if (abs(cross(a, b)) == 0.0_r && dot(a, b) <= 0.0_r) return ON;\n        if (a.y > b.y) swap(a, b);\n        if (a.y <= 0.0_r && 0.0_r < b.y && cross(a, b) > 0.0_r) valid ^= 1;\n    }\n    return (valid ? IN : OUT);\n}\n\nint convexContains(const Polygon& g, const Point& p) {\n    const size_t N = g.size();\n    const Point G = (g[0] + g[N / 3] + g[2 * N / 3]) / 3.0_r;\n    size_t l = 0, r = N;\n    while (r - l > 1) {\n        const size_t m = (l + r) / 2;\n        if (cross(g[l] - G, g[m] - G) > 0.0_r) {\n            if (cross(g[l] - G, p - G) > 0.0_r && cross(g[m] - G, p - G) < 0.0_r) r = m;\n            else l = m;\n        } else {\n            if (cross(g[l] - G, p - G) < 0.0_r && cross(g[m] - G, p - G) > 0.0_r) l = m;\n            else r = m;\n        }\n    }\n    r %= N;\n    if (cross(g[l] - p, g[r] - p) < 0.0_r) return OUT;\n    if (cross(g[l] - p, g[r] - p) > 0.0_r) return IN;\n    return ON;\n}\n\n// Counter Clockwise\nPolygon convexFull(Polygon g, bool ONSEG) {\n    Polygon u, l;\n    if (g.size() < 3) return g;\n    sort(g.begin(), g.end());\n    u.emplace_back(g[0]);\n    u.emplace_back(g[1]);\n    l.emplace_back(g[g.size() - 1]);\n    l.emplace_back(g[g.size() - 2]);\n\n    if (ONSEG) {\n        for (int i = 2; i < g.size(); ++i) {\n            for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], g[i]) == CCW_COUNTER_CLOCKWISE; --n) {\n                u.pop_back();\n            }\n            u.emplace_back(g[i]);\n        }\n        for (int i = g.size() - 3; i >= 0; --i) {\n            for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], g[i]) == CCW_COUNTER_CLOCKWISE; --n) {\n                l.pop_back();\n            }\n            l.emplace_back(g[i]);\n        }\n    } else {\n        for (int i = 2; i < g.size(); ++i) {\n            for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], g[i]) != CCW_CLOCKWISE; --n) {\n                u.pop_back();\n            }\n            u.emplace_back(g[i]);\n        }\n        for (int i = g.size() - 3; i >= 0; --i) {\n            for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], g[i]) != CCW_CLOCKWISE; --n) {\n                l.pop_back();\n            }\n            l.emplace_back(g[i]);\n        }\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\nreal_t area(const Polygon& g) {\n    const size_t N = g.size();\n    real_t res = 0;\n    for (size_t i = 0; i < g.size(); ++i) {\n        res += cross(g[i], g[(i + 1) % N]) / 2.0;\n    }\n    return res;\n}\n// }}}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.setf(ios_base::fixed);\n    cout.precision(10);\n\n    var(size_t, N);\n\n    Polygon g(N);\n    input(g);\n\n    var(size_t, Q);\n    while (Q--) {\n        var(Point, p);\n        output(contains(g, p));\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define Re real()\n#define Im imag()\nusing namespace std;\n\nconst double eps = 1e-9;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nPoint P[50050], s;\nint n, k, m;\nvector<Point> qs;\n\nbool cmp(Point a, Point b)\n{\n    if(fabs(a.Re - b.Re) < eps) return a.Im < b.Im;\n    else return a.Re < b.Re;\n}\n\ndouble cross(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Im;\n}\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Re;\n}\n\nint check(const Point& t)\n{\n    int cnt = 0;\n    for(int i = 0; i < n; i++)\n    {\n        Vector v1 = P[i] - t, v2 = P[(i + 1) % n] - t;\n        if(v1.Im > v2.Im) swap(v1, v2);\n        if(v1.Im <= 0 && v2.Im > 0 && cross(v1, v2) < 0) cnt ^= 1;\n        if(cross(v1, v2) == 0 && dot(v1, v2) <= 0) return 1;\n    }\n    return cnt ? 2 : 0;\n}\n\nint main()\n{\n    while(~scanf(\"%d\", &n))\n    {\n        for(int i = 0; i < n; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            P[i] = complex<double>(tx, ty);\n        }\n        scanf(\"%d\", &m);\n        for(int i = 0; i < m; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            s = Point(tx, ty);\n            printf(\"%d\\n\", check(s));\n        }\n    }\n    return 0;\n}\n\n/*\n\n5\n0 0\n2 0\n2 2\n0 2\n1 1\n\n4\n0 0\n3 1\n3 3\n0 3\n16\n1 1\n2 1\n1 2\n2 2\n3 1\n3 2\n0 3\n0 2\n2 0\n4 1\n-1 1\n0 -1\n1 4\n3 4\n4 3\n-2 3\n\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1128\n\n\n\n#include <iostream>\n#include <complex>\n#include <vector>\nusing namespace std;\n\ntypedef complex<double> point;\ndouble cross(const point& a, const point& b) {\n    return imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n    return real(conj(a)*b);\n}\n\ntypedef vector<point> polygon;\nenum { OUT, ON, IN };\nint contains(const polygon& P, const point& p) {\n    bool in = false;\n    for (int i = 0; i < P.size(); ++i) {\n        point a = P[i] - p, b = P[(i+1)%P.size()] - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b))\n            if (cross(a, b) < 0) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n\nint main() {\n    int n;\n    while (cin >> n) {\n        polygon pol(n);\n        for (auto& p : pol) {\n            int x, y;\n            cin >> x >> y;\n            p = point(x, y);\n        }\n        int q;\n        cin >> q;\n        for (int i = 0; i < q; i++) {\n            int x, y;\n            cin >> x >> y;\n            cout << contains(pol, point(x, y)) << endl;\n        }\n    }\n    return 0;\n}\n\n*/"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#define EPS (1e-10)\nusing namespace std;\n\nstruct Point {\n  double x;\n  double y;\n\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double k) { return Point(k * x, k * y); }\n  Point operator / (double k) { return Point(x / k, y / k); }\n\n};\n/*\ndouble dot(Point p0, Point p1, Point p2) {\n  return (p1.x - p0.x) * (p2.x - p0.x) + (p1.y - p0.y) * (p2.y - p0.y);\n}\n*/\n\ndouble dot2(Point p0, Point p1) {\n  return p0.x * p1.x + p0.y * p1.y; \n}\n\n/*\ndouble cross(Point p0, Point p1, Point p2) {\n  return ( p1.x - p0.x ) * ( p2.y - p0.y ) - ( p2.x - p0.x) * (p1.y - p0.y);\n}\n*/\n\ndouble cross2(Point p0, Point p1) {\n  return p0.x * p1.y - p0.y * p1.x;\n}\n\nint isContained(vector<Point> polygon, Point p) {\n  int n = polygon.size();\n  bool flag = false;\n  for(int i = 0; i < n; i++) {\n    Point pre = polygon[i] - p; \n    Point next = polygon[ ( i + 1 ) % n ] - p;\n    if(abs(cross2(pre, next)) < EPS && dot2(pre, next) < EPS)\n      return 1;\n    if(pre.y > next.y) \n      swap(pre, next);\n    if(pre.y < EPS && next.y > EPS && cross2(pre, next) > EPS) \n      flag = !flag;\n  }\n  if(flag) \n    return 2;\n  return 0;\n}\n\nint main(void) {\n  int n;\n  cin >> n;\n  vector<Point> polygon;\n\n  for(int i = 0; i < n; i++) {\n    Point pi;\n    cin >> pi.x >> pi.y;\n    polygon.push_back(pi);\n  }\n\n  int q;\n  cin >> q;\n  for(int i = 0; i < q; i++) {\n    Point p;\n    cin >> p.x >> p.y;\n    cout << isContained(polygon, p) << endl;\n  }\n    \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n// Can't use x and y for first and second\n#define x real()\n#define y imag()\n#define cpt const Pt&\n//#define Pt Pt//const Pt&\n\nconst double EPS = 1e-9;\nconst double pi=acos(-1);\nbool dequal(double a,double b) {return abs(a-b)<EPS;}\nenum Orientation {CCW, CW, CNEITHER};\n\n\n//using namespace std;\ntypedef complex<double> cpx;\n\nstruct Pt : public cpx {\n    Pt() = default;\n\tusing cpx::cpx;\n\tPt(cpx a) : cpx(a) {}\n    double& x const {\n        return (double&)*this;\n    }\n    double& y const {\n        return ((double*)this)[1];\n    }\n\n\tbool operator ==(cpt b) const {return abs(*this-b) < EPS; }\n\tbool operator <(cpt b) const {return x<b.x || (x==b.x && y<b.y); }\n\t//by x first then break ties with y\n};\n\n//Allow points to be read in by input streams\nistream& operator >>(istream& is, Pt& p) {\n\treturn is >> p.x >> p.y;\n}\n\ndouble dot(cpt a, cpt b) {return (conj(a) * b).x;}// Dot product\ndouble det(cpt a, cpt b) {return (conj(a) * b).y;}//Determinant/\"Cross Product\"\ndouble angle(cpt a, cpt b) {return arg(b - a);}// [-pi,pi] a to b with x axis\ndouble angle (cpt a, cpt b, cpt c) {return arg((a-b)/(c-b));}//[-pi,pi]\n//double slope(cpt a, cpt b) {return tan(arg(b - a));}// m for line segment (a,b)\ndouble slope(cpt a, cpt b) {return (b.y-a.y)/(b.x-a.x);}\n\nPt rotate(cpt a, double theta) {return a * polar(1.0, theta);}//anticlockwise\n//around p by theta anticlockwise\nPt rotate(cpt a, cpt p, double theta) {return rotate(a - p,theta) + p;}\nPt project(cpt p, cpt v) {return v * dot(p, v) / norm(v);}// p onto v\nPt project(cpt p, cpt a, cpt b) {return a+project(p-a,b-a);}//p onto line (a,b)\n//reflect p across the line (a,b)\nPt reflect(cpt p, cpt a, cpt b) {return a + conj((p - a) / (b - a)) * (b - a);}\n\n//bool colinear(Pt a, Pt b, Pt c) {return dequal(det(b-a,c-b),0);}\n\n// Orientation test (1 anticlockwise, -1 clockwise, 0 colinear)\nint orient(cpt a, cpt b, cpt c) {\n\tdouble d=det(b-a,c-b);\n\treturn d>EPS?1:d<-EPS?-1:0;\n}\n\n// Point on line segment (including endpoints)\nbool ptonseg(cpt a, cpt b, cpt p) {\n\tPt u=b-a,v=p-a;\n\treturn a==p || b==p ||\n\t\t((0 < dot(u,v) && dot(u,v) < norm(u)) && dequal(det(u,v),0));\n}\n\n// Signed area of polygon\n// Positive for anticlockwise orientation\ndouble polygonarea(const vector<Pt>& p) {\n\tdouble r=0;\n\tint n=p.size();\n\tfor (int j=0,i=n-1;j<n;i=j++) r+=det(p[i],p[j]);\n\treturn r/2;\n}\n\n// Convex hull O(NlogN)\n// if all points are colinear the middle points come up twice forwards and\n// backwards e.g. a-b-c-d becomes a-b-c-d-c-b\n// To remove colinear points change <-EPS and >EPS to <EPS and >-EPS.\nvector<Pt> convexhull(vector<Pt> p) {\n  sort(p.begin(),p.end()); p.resize(unique(p.begin(),p.end())-p.begin());\n  int l=0,u=0;\n  vector<Pt> L(p),U(p);\n  if (p.size()<=2) return p;\n  for (Pt& i:p) {\n    while (l>1 && det(i-L[l-1],L[l-2]-i)<-EPS) l--;\n    while (u>1 && det(i-U[u-1],U[u-2]-i)>EPS) u--;\n    L[l++]=U[u++]=i;\n  }\n  L.resize(l+u-2);\n  copy(U.rend()-u+1,U.rend()-1,L.begin()+l);\n\n  return L;\n}\n\n//Point in polygon test O(N)\n//Returns:\n// 0 if not in polygon\n// 1 if on boundary\n// 2 if in interior\nint ptinpoly(const vector<Pt>& p, cpt q) {\n\tint n=p.size();\n\tint i,j,r=0;\n\tfor (j=0,i=n-1;j<n;i=j++) { //that trick to avoid modding\n\t\tif (ptonseg(p[i],p[j],q)) return 1;\n\t\tif (((p[i].y <= q.y && q.y < p[j].y)\n\t\t\t|| (p[j].y <= q.y && q.y < p[i].y))\n\t\t\t&& q.x < (p[j].x-p[i].x) * (q.y-p[i].y)/(p[j].y-p[i].y) + p[i].x)\n\t\t\tr^=2;\n\t}\n\treturn r;\n}\n\nPt solve(cpt a, cpt b, cpt v) {// solves [a b]x==v with Cramer's rule.\n\treturn Pt(det(v,b)/det(a,b),det(a,v)/det(a,b));\n}\n\n//Intersection of 2 line segments. Divides by 0 if they are parallel.\n//Returns {nan,nan} if they don't intersect.\n//Uncomment if statements below to get infinite lines.\nPt intersectline(Pt a, Pt b, Pt p, Pt q) {\n\tPt ab=b-a,qp=p-q,ap=p-a;\n\tdouble s=det(ap,qp)/det(ab,qp),t=det(ab,ap)/det(ab,qp);\n\t//double s,t;\n\t//tie(s,t)=solve(b-a,p-q,p-a);\n\t//a+t(b-a)=p+s(q-p)\n\t\n\t//Can also just use ptonseg.\n\tif (-EPS<s && s<1+EPS //Answer is on ab\n\t\t&& -EPS<t && t<1+EPS) //Answer is on pq \n\t\treturn a+s*(b-a);\n\treturn Pt(NAN,NAN);\n}\n\n//Distance between infinite line and point.\ndouble distlinept(cpt a, cpt b, cpt p) {\n\treturn abs(det(b-a,p-a)/abs(b-a));\n}\n\n//Distance between finite line and point\ndouble distfinitelinept(Pt a, Pt b, Pt p) {\n\tb-=a;p-=a;\n\tdouble sp=(p/b).x;//dot(b,p)/norm(b);\n\tPt closest;\n\tif (sp>=0) {\n\t\tif (sp>1) closest=b;\n\t\telse closest=sp*b;\n\t}\n\treturn abs(closest-p); // Note that actual closest Pt on line is closest + a\n}\n\n\n\n//Are lines parallel?\nbool arepara(cpt a, cpt b, cpt p, cpt q) {\n\treturn dequal(det(b-a,q-p),0);\n}\n\n//Distance between 2 finite lines\ndouble distfinitelineline(Pt a,Pt b,Pt p,Pt q) {\n\tif (!arepara(a,b,p,q) && std::isnan(intersectline(a,b,p,q).x)) return 0;\n\t\n\t/*if (arepara(a,b,p,q)) {\n\t\tb-=a;p-=a;q-=a;\n\t\tdouble sp=dot(b,p)/norm(b);\n\t\tif (0<sp && sp<1) return det(b,p)/abs(b);\n\t}*/\n\t\n\treturn min({\n\t\t\tdistfinitelinept(a,b,p),\n\t\t\tdistfinitelinept(a,b,q),\n\t\t\tdistfinitelinept(p,q,a),\n\t\t\tdistfinitelinept(p,q,b)\n\t});\n}\n\n//This is kind of unnecessary\ndouble distpara(Pt a, Pt b, Pt p, Pt q) {\n\treturn distlinept(a,b,p);\n}\n\n\n\n\n/*\n// Intersection of lines (a,b) and (p,q)\nPt intersection(Pt a, Pt b, Pt p, Pt q) {\t\t\n  double c1 = cross(p - a, b - a), c2 = cross(q - a, b - a);\n  return (c1 * q - c2 * p) / (c1 - c2); // undefined if parallel\n}\n*/\n\nnamespace Test {\n\tvoid solve() {\n\t\tPt a{3,2};\n\t\tPt b(2,-7);\n\t\tvector<Pt> aa{{1,2},{3,4},{5,6}};\n\t\t//for (Pt p:convexhull(aa)) cout << p << endl;\n\t\t//cout << endl;\n\n\n\t\t//cout << a + b << endl;\n\t\t//cout << a - b << endl;\n\n\t\tPt c(0,0);\n\t\tPt d(1e-10, 1e-10);\n\n\t\t//cout << (a == b) << endl;\n\t\t//cout << (c == d) << endl;\n\n\t\tcout << \"dot det\\n\";\n\t\t//cout << dot(a,b) << endl;\n\t\t//cout << det(a,b) << endl;\n\t\t//cout << rotate({1,0},pi/2) << endl;\n\n\n\t\ta.x=0;\n\t\t//cout << a.x << endl;\n\n\t\t//cout << ((double*)a)[0] << endl;\n\t\t//a[0]=50;\n\t\t//cout << a[0] << endl;\n\n\t\t//cout << intersectline({10,1},{11,2},{11,1},{10,2}) << endl;\n\t\tcout << intersectline({10,1},{9,0},{11,1},{10,2}) << endl;\n\n\t\tcout << ptonseg({3,2},{5,4},{4,3}) << endl;\n\t\tcout << ptonseg({3,2},{5,4},{3,4}) << endl;\n\t\tcout << ptonseg({3,2},{5,4},{5,2}) << endl;\n\n\t\tvector<Pt> poly{{0,0},{2,2},{0,1}};\n\t\tcout << ptinpoly(poly,{1,1}) << endl;\n\t\tcout << ptinpoly(poly,{2,2}) << endl;\n\t\tcout << ptinpoly(poly,{-1,2}) << endl;\n\t\tcout << ptinpoly(poly,{4,3}) << endl;\n\t\tcout << ptinpoly(poly,{0.5,.75}) << endl;\n\t}\n}\n\n\nnamespace UVA_920 {\n\tvoid solve() {\n\t\tint T,n;\n\t\tcin >> T;\n\t\tcout << fixed << setprecision(2);\n\t\twhile (T--) {\n\t\t\tcin >> n;\n\t\t\tvector<Pt> pts(n);\n\t\t\tfor (Pt &p:pts) cin >> p;\n\t\t\tsort(pts.rbegin(),pts.rend());\n\t\t\tdouble ans=0,M=0;\n\t\t\tfor (int i=1;i<n;i++) {\n\t\t\t\tPt cept=intersectline(pts[i-1],pts[i],{-1,M},{30001,M});\n\t\t\t\tif (pts[i].y>M) ans+=abs(cept-pts[i]);\n\t\t\t\tM=max(M,pts[i].y);\n\t\t\t}\n\n\t\t\tcout << ans << '\\n';\n\t\t}\n\t}\n}\n\nnamespace UVA_10263 {\n\tPt distfinitelinept(Pt a, Pt b, Pt p) {\n\t\tb-=a;p-=a;\n\t\tdouble sp=(p/b).x;//dot(b,p)/norm(b);\n\t\tPt closest;\n\t\tif (sp>=0) {\n\t\t\tif (sp>1) closest=b;\n\t\t\telse closest=sp*b;\n\t\t}\n\t\treturn closest+a;\n\t}\n\tvoid solve() {\n\t\tcout << fixed << setprecision(4);\n\t\tPt M;\n\t\tint n;\n\t\twhile (cin >> M) {\n\t\t\tPt ans(1e100,1e100);\n\t\t\tcin >> n;\n\t\t\tvector<Pt> pts(n+1);\n\t\t\tfor (Pt &p:pts) cin >> p;\n\t\t\tfor (int i=1;i<=n;i++) {\n\t\t\t\tPt cur=UVA_10263::distfinitelinept(pts[i-1],pts[i],M);\n\t\t\t\tif (abs(cur-M)<abs(ans-M)) ans=cur;\n\t\t\t}\n\t\t\tcout << ans.x << '\\n' << ans.y << '\\n';\n\t\t}\n\t}\n}\n\nnamespace UVA_10927 {\n\tdouble safearg(cpt a) {\n\t\tdouble ag=arg(a);\n\t\tif (dequal(ag,-pi)) return pi;\n\t\treturn ag;\n\t}\n\tbool less(cpt a,cpt b) {\n\t\tdouble ag=safearg(a),bg=safearg(b);\n\t\treturn ag<bg-EPS || (dequal(ag,bg) && abs(a)<abs(b));\n\t}\n\n#define X first\n#define Y second\n\n\ttypedef pair<Pt,int> Pole;\n\n\tvoid solve() {\n\t\tint n;\n\t\tint cas=1;\n\t\tcout << fixed  << setprecision(0);\n\t\twhile (cin >> n && n) {\n\t\t\tvector<Pole> poles(n);\n\t\t\tfor (Pole &pol:poles) {\n\t\t\t\tcin >> pol.X >> pol.Y;\n\t\t\t}\n\t\t\tsort(poles.begin(),poles.end(), [](const Pole& a,const Pole& b) {return less(a.X,b.X);});\n\n\t\t\tvector<Pt> ans;\n\n\t\t\tfor (int i=0,j=0;i<n;i=j) {\n\t\t\t\tfor (;j<n && dequal(safearg(poles[i].X),safearg(poles[j].X));j++);\n\t\t\t\tint M=-1;\n\t\t\t\tfor (int k=i;k<j;k++) {\n\t\t\t\t\tif (poles[k].Y<=M) ans.push_back(poles[k].X);\n\t\t\t\t\tM=max(M,poles[k].Y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcout << \"Data set \" << cas++ << \":\\n\";\n\t\t\tif (ans.empty()) {\n\t\t\t\tcout << \"All the lights are visible.\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsort(ans.begin(),ans.end());\n\t\t\t\tcout << \"Some lights are not visible:\\n\";\n\t\t\t\tfor (int i=0;i<ans.size();i++) {\n\t\t\t\t\tcout << \"x = \" << ans[i].x << \", y = \" << ans[i].y;\n\t\t\t\t\tif (i+1==ans.size()) cout << \".\\n\";\n\t\t\t\t\telse cout << \";\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n#undef X\n#undef Y\n}\n\nnamespace UVA_378 {\n\tPt intersectline(Pt a, Pt b, Pt p, Pt q) {\n\t\tPt ab=b-a,qp=p-q,ap=p-a;\n\t\tdouble s=det(ap,qp)/det(ab,qp),t=det(ab,ap)/det(ab,qp);\n\t\t//double s,t;\n\t\t//tie(s,t)=solve(b-a,p-q,p-a);\n\t\t//a+t(b-a)=p+s(q-p)\n\n\t\t//Can also just use ptonseg.\n\t\t//if (-EPS<s && s<1+EPS //Answer is on ab\n\t\t//\t&& -EPS<t && t<1+EPS) //Answer is on pq \n\t\treturn a+s*(b-a);\n\t\treturn Pt(NAN,NAN);\n\t}\n\n\tvoid solve() {\n\t\tint N;\n\t\tcin >> N;\n\t\tcout << \"INTERSECTING LINES OUTPUT\\n\" << fixed << setprecision(2);\n\t\twhile (N--) {\n\t\t\tPt a,b,c,d;\n\t\t\tcin >> a >> b >> c >> d;\n\t\t\tif (arepara(a,b,c,d)) {\n\t\t\t\tif (distlinept(a,b,c)>EPS) cout << \"NONE\\n\";\n\t\t\t\telse cout << \"LINE\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tPt ans=UVA_378::intersectline(a,b,c,d);\n\t\t\t\tcout << \"POINT \" << ans.x << ' ' << ans.y << '\\n';\n\t\t\t}\n\t\t}\n\t\tcout << \"END OF OUTPUT\\n\";\n\t}\n}\n\nnamespace UVA_191 {\n\tvoid solve() {\n\t\tint n;\n\t\tcin >> n;\n\t\twhile (n--) {\n\t\t\tPt a,b,c,d;\n\t\t\tcin >> a >> b >> c >> d;\n\t\t\tif (c.x>d.x) swap(c.x,d.x);\n\t\t\tif (c.y>d.y) swap(c.y,d.y);\n\t\t\tif ((c.x-EPS<a.x && a.x<d.x+EPS && c.y-EPS<a.y && a.y<d.y+EPS)\n\t\t\t\t\t|| !std::isnan(intersectline(a,b,{c.x,c.y},{c.x,d.y}).x)\n\t\t\t\t\t|| !std::isnan(intersectline(a,b,{c.x,c.y},{d.x,c.y}).x)\n\t\t\t\t\t|| !std::isnan(intersectline(a,b,{c.x,d.y},{d.x,d.y}).x)\n\t\t\t\t\t|| !std::isnan(intersectline(a,b,{d.x,c.y},{d.x,d.y}).x))\n\t\t\t\tcout << \"T\\n\";\n\t\t\telse cout << \"F\\n\";\n\t\t}\n\t}\n}\n\nnamespace AIZU_CGL_3_C {\n\tvoid solve() {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<Pt> poly(n);\n\t\tfor (Pt &p:poly) cin >> p;\n\t\tint q;\n\t\tcin >> q;\n\t\twhile (q--) {\n\t\t\tPt p;\n\t\t\tcin >> p;\n\t\t\tcout << ptinpoly(poly,p) << '\\n';\n\t\t}\n\t}\n}\n\n\n//namespace UVA_634 {\n\n\nint main() {\n\t\n\t//Test::solve();\n\t//UVA_920::solve();\n\t//UVA_10263::solve();\n\t//UVA_10927::solve(); // Ensure EPS=1e-10\n\t//UVA_378::solve();\n\t//UVA_191::solve();\n\tAIZU_CGL_3_C::solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db long double\nconst db eps = 1e-6;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nconst int N = 111;\npoi p[N];\n\nint main() {\n\t//cout << fixed << setprecision(0);\n\tios :: sync_with_stdio(false);\n\tint n; cin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tp[i].r();\n\tp[n] = p[0];\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r(); poi s = {1e4L + 7, 1e4L + 9};\n\t\tcout << s.x << ' ' << s.y << '\\n';\n\t\tbool on = false;\n\t\tint inter = 0;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(!ccw(p[i], p[i + 1], t))\n\t\t\t\ton = true;\n\t\t\tif(si(s, t, p[i], p[i + 1]))\n\t\t\t\tinter ++;\n\t\t}\n\t\tif(on) cout << \"1\\n\";\n\t\telse if(inter & 1) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint x[300];\nint y[300];\nint n, q;\n\nbool pointOnLine(int i, int j, int xx, int yy) {\n    if (!((min(x[i], x[j]) <= xx && xx <= max(x[i], x[j])) &&\n          (min(y[i], y[j]) <= yy && yy <= max(y[i], y[j]))))\n        return false;\n    return (x[j] - x[i]) * (yy - y[i]) == (y[j] - y[i]) * (xx - x[i]);\n}\n\nbool onLine(int xx, int yy) {\n    for (int i = 0; i < n; i++)\n        if (pointOnLine(i, (i + 1) % n, xx, yy))\n            return true;\n    return false;\n}\n\nbool intersects(int i, int j, int xx, int yy) {\n    if (!(min(x[i], x[j]) <= xx && xx < max(x[i], x[j])))\n        return false;\n    double yint = ((double) (xx - x[i]) * (y[j] - y[i])) / ((double)(x[j] - x[i]));\n    return yint > yy;\n}\n\nbool inPoly(int xx, int yy) {\n    int c = 0;\n    for (int i = 0; i < n; i++)\n        c ^= intersects(i, (i+1) % n, xx, yy);\n    return c;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d\", x+i, y+i);\n    }\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        int xx, yy;\n        scanf(\"%d %d\", &xx, &yy);\n        if (onLine(xx, yy))\n            printf(\"1\\n\");\n        else if (inPoly(xx, yy))\n            printf(\"2\\n\");\n        else\n            printf(\"0\\n\");\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if(a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if(a > b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntypedef long long int ll;\n\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define endl \"\\n\"\nconst double EPS = 1e-8;\nconst int INF = 1 << 30;\nconst ll LLINF = 1LL << 60;\nconst double PI = acos(-1);\nconst int MOD = 1000000007;\nconst int dx[4] = {1, 0, -1, 0};\nconst int dy[4] = {0, 1, 0, -1};\n\n//-------------------------------------\n\nnamespace geometry {\n// Point : 複素数型を位置ベクトルとして扱う\n// 実軸(real)をx軸、挙軸(imag)をy軸として見る\nusing Point = complex<double>;\n\ninline bool equal(const double &a, const double &b) {\n    return fabs(a - b) < EPS;\n}\n\n// 単位ベクトル(unit vector)を求める\nPoint unitVector(const Point &a) { return a / abs(a); }\n\n// 法線ベクトル(normal vector)を求める\n// 90度回転した単位ベクトルをかける\n// -90度がよければPoint(0, -1)をかける\nPoint normalVector(const Point &a) { return a * Point(0, 1); }\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点pを反時計回りにtheta度回転\nPoint rotate(const Point &p, const double &theta) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(),\n                 sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアン->度\ndouble radianToDegree(const double &radian) { return radian * 180.0 / PI; }\n\n// 度->ラジアン\ndouble degreeToRadian(const double &degree) { return degree * PI / 180.0; }\n\n// 点の回転方向\n// 点a, b, cの位置関係について(aが基準点)\nint ccw(const Point &a, Point b, Point c) {\n    b -= a, c -= a;\n    // 点a, b, c が\n    // 反時計回りの時、\n    if(cross(b, c) > EPS) {\n        return 1;\n    }\n    // 時計回りの時、\n    if(cross(b, c) < -EPS) {\n        return -1;\n    }\n    // c, a, bがこの順番で同一直線上にある時、\n    if(dot(b, c) < 0) {\n        return 2;\n    }\n    // a, b, cがこの順番で同一直線上にある場合、\n    if(norm(b) < norm(c)) {\n        return -2;\n    }\n    // cが線分ab上にある場合、\n    return 0;\n}\n\n// Line : 直線を表す構造体\n// b - a で直線・線分を表せる\nstruct Line {\n    Point a, b;\n    Line() = default;\n    Line(Point a, Point b) : a(a), b(b) {}\n    // Ax+By=C\n    Line(double A, double B, double C) {\n        if(equal(A, 0)) {\n            a = Point(0, C / B), b = Point(1, C / B);\n        } else if(equal(B, 0)) {\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        } else {\n            a = Point(0, C / B), b = Point(C / A, 0);\n        }\n    }\n};\n\n// Segment : 線分を表す構造体\n// Lineと同じ\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n// Circle : 円を表す構造体\n// pが中心の位置ベクトル、rは半径\nstruct Circle {\n    Point p;\n    double r;\n\n    Circle() = default;\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nbool isOrthogonal(const Line &a, const Line &b) {\n    return equal(dot(a.b - a.a, b.b - b.a), 0);\n}\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nbool isParallel(const Line &a, const Line &b) {\n    return equal(cross(a.b - a.a, b.b - b.a), 0);\n}\n\n// 点cが直線ab上にあるか\nbool isPointOnLine(const Point &a, const Point &b, const Point &c) {\n    return isParallel(Line(a, b), Line(a, c));\n}\n\n// 点cが\"線分\"ab上にあるか\nbool isPointOnSegment(const Point &a, const Point &b, const Point &c) {\n    // |a-c| + |c-b| <= |a-b| なら線分上\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n// 直線lと点pの距離を求める\ndouble distanceBetweenLineAndPoint(const Line &l, const Point &p) {\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 線分lと点pの距離を求める\n// 定義：点pから「線分lのどこか」への最短距離\ndouble distanceBetweenSegmentAndPoint(const Segment &l, const Point &p) {\n    if(dot(l.b - l.a, p - l.a) < EPS) {\n        return abs(p - l.a);\n    }\n    if(dot(l.a - l.b, p - l.b) < EPS) {\n        return abs(p - l.b);\n    }\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 直線s, tの交点の計算\nPoint crossPoint(const Line &s, const Line &t) {\n    double d1 = cross(s.b - s.a, t.b - t.a);\n    double d2 = cross(s.b - s.a, s.b - t.a);\n    if(equal(abs(d1), 0) && equal(abs(d2), 0)) {\n        return t.a;\n    }\n    return t.a + (t.b - t.a) * (d2 / d1);\n}\n\n// 線分s, tの交点の計算\nPoint crossPoint(const Segment &s, const Segment &t) {\n    return crossPoint(Line(s), Line(t));\n}\n\n// 線分sと線分tが交差しているかどうか\nbool isIntersect(const Segment &s, const Segment &t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// 線分sとtの距離\ndouble distanceBetweenSegments(const Segment &s, const Segment &t) {\n    if(isIntersect(s, t)) {\n        return (double)(0);\n    }\n    double ans = distanceBetweenSegmentAndPoint(s, t.a);\n    chmin(ans, distanceBetweenSegmentAndPoint(s, t.b));\n    chmin(ans, distanceBetweenSegmentAndPoint(t, s.a));\n    chmin(ans, distanceBetweenSegmentAndPoint(t, s.b));\n    return ans;\n}\n\n// 射影(projection)\n// 直線(線分)lに点pから引いた垂線の足を求める\nPoint projection(const Line &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 反射(reflection)\n// 直線lを対称軸として点pと線対称の位置にある点を求める\nPoint reflection(const Line &l, const Point &p) {\n    return p + (projection(l, p) - p) * 2.0;\n}\n\n// 2つの円の交差判定\n// 返り値は共通接線の数\nint isIntersect(const Circle &c1, const Circle &c2) {\n    double d = abs(c1.p - c2.p);\n    // 2つの円が離れている場合\n    if(d > c1.r + c2.r + EPS) {\n        return 4;\n    }\n    // 外接している場合\n    if(equal(d, c1.r + c2.r)) {\n        return 3;\n    }\n    // 内接している場合\n    if(equal(d, abs(c1.r - c2.r))) {\n        return 1;\n    }\n    // 内包している場合\n    if(d < abs(c1.r - c2.r) - EPS) {\n        return 0;\n    }\n    return 2;\n}\n\n// 2つの円の交点\nvector<Point> crossPoint(const Circle &c1, const Circle &c2) {\n    vector<Point> res;\n    int mode = isIntersect(c1, c2);\n    // 2つの中心の距離\n    double d = abs(c1.p - c2.p);\n    // 2円が離れている場合\n    if(mode == 4) {\n        return res;\n    }\n    // 1つの円がもう1つの円に内包されている場合\n    if(mode == 0) {\n        return res;\n    }\n    // 2円が外接する場合\n    if(mode == 3) {\n        double t = c1.r / (c1.r + c2.r);\n        res.emplace_back(c1.p + (c2.p - c1.p) * t);\n        return res;\n    }\n    // 内接している場合\n    if(mode == 1) {\n        if(c2.r < c1.r - EPS) {\n            res.emplace_back(c1.p + (c2.p - c1.p) * (c1.r / d));\n        } else {\n            res.emplace_back(c2.p + (c1.p - c2.p) * (c2.r / d));\n        }\n        return res;\n    }\n    // 2円が重なる場合\n    double rc1 = (c1.r * c1.r + d * d - c2.r * c2.r) / (2 * d);\n    double rs1 = sqrt(c1.r * c1.r - rc1 * rc1);\n    if(c1.r - abs(rc1) < EPS) {\n        rs1 = 0;\n    }\n    Point e12 = (c2.p - c1.p) / abs(c2.p - c1.p);\n    res.emplace_back(c1.p + rc1 * e12 + rs1 * e12 * Point(0, 1));\n    res.emplace_back(c1.p + rc1 * e12 + rs1 * e12 * Point(0, -1));\n    return res;\n}\n\n// 点pが円cの内部(円周上も含む)に入っているかどうか\nbool isInCircle(const Circle &c, const Point &p) {\n    double d = abs(c.p - p);\n    return (equal(d, c.r) || d < c.r - EPS);\n}\n\n// 円cと直線lの交点\nvector<Point> crossPoint(const Circle &c, const Line &l) {\n    vector<Point> res;\n    double d = distanceBetweenLineAndPoint(l, c.p);\n    // 交点を持たない\n    if(d > c.r + EPS) {\n        return res;\n    }\n    // 接する\n    Point h = projection(l, c.p);\n    if(equal(d, c.r)) {\n        res.emplace_back(h);\n        return res;\n    }\n    Point e = unitVector(l.b - l.a);\n    double ph = sqrt(c.r * c.r - d * d);\n    res.emplace_back(h - e * ph);\n    res.emplace_back(h + e * ph);\n    return res;\n}\n\n// 点pを通る円cの接線\n// 2本あるので、接点のみを返す\nvector<Point> tangentToCircle(const Point &p, const Circle &c) {\n    return crossPoint(c, Circle(p, sqrt(norm(c.p - p) - c.r * c.r)));\n}\n\nvector<Line> tangent(const Circle &a, const Circle &b) {\n    vector<Line> ret;\n    // 2円の中心間の距離\n    double g = abs(a.p - b.p);\n    // 円が内包されている場合\n    if(equal(g, 0)) {\n        return ret;\n    }\n    Point u = unitVector(b.p - a.p);\n    Point v = rotate(u, PI / 2);\n    for(int s : {-1, 1}) {\n        double h = (a.r + b.r * s) / g;\n        if(equal(h * h, 1)) {\n            ret.emplace_back(a.p + (h > 0 ? u : -u) * a.r,\n                             a.p + (h > 0 ? u : -u) * a.r + v);\n\n        } else if(1 - h * h > 0) {\n            Point U = u * h, V = v * sqrt(1 - h * h);\n            ret.emplace_back(a.p + (U + V) * a.r, b.p - (U + V) * (b.r * s));\n            ret.emplace_back(a.p + (U - V) * a.r, b.p - (U - V) * (b.r * s));\n        }\n    }\n    return ret;\n}\n\n// 多角形の面積を求める\ndouble PolygonArea(const vector<Point> &p) {\n    double res = 0;\n    int n = p.size();\n    for(int i = 0; i < n - 1; i++) {\n        res += cross(p[i], p[i + 1]);\n    }\n    res += cross(p[n - 1], p[0]);\n    return res * 0.5;\n}\n\n// 凸多角形かどうか\nbool isConvex(const vector<Point> &p) {\n    int n = p.size();\n    int now, pre, nxt;\n    for(int i = 0; i < n; i++) {\n        pre = (i - 1 + n) % n;\n        nxt = (i + 1) % n;\n        now = i;\n        if(ccw(p[pre], p[now], p[nxt]) == -1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// 凸包 O(NlogN)\nvector<Point> ConvexHull(vector<Point> &p) {\n    int n = (int)p.size(), k = 0;\n    sort(ALL(p), [](const Point &a, const Point &b) {\n        return (real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b));\n    });\n    vector<Point> ch(2 * n);\n    // 一直線上の3点を含める -> (< -EPS)\n    // 含め無い -> (< EPS)\n    for(int i = 0; i < n; ch[k++] = p[i++]) { // lower\n        while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -EPS)\n            --k;\n    }\n    for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) { // upper\n        while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -EPS)\n            --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 多角形gに点pが含まれているか?\n// 含まれる:2, 辺上にある:1, 含まれない:0\nint isContained(const vector<Point> &g, const Point &p) {\n    bool in = false;\n    int n = (int)g.size();\n    for(int i = 0; i < n; i++) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if(imag(a) > imag(b)) {\n            swap(a, b);\n        }\n        if(imag(a) <= EPS && EPS < imag(b) && cross(a, b) < -EPS) {\n            in = !in;\n        }\n        if(cross(a, b) == 0 && dot(a, b) <= 0) {\n            return 1;\n        }\n    }\n    return (in ? 2 : 0);\n}\n\n} // namespace geometry\n\nusing namespace geometry;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    int n;\n    cin >> n;\n    vector<Point> g(n);\n    for(int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n        g[i] = Point(x, y);\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        cout << isContained(g, p) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <iostream>\nvoid out(int);\nclass Point{\npublic:\n\tPoint(const int &n, const int &m):x(n), y(m){};\n\tPoint(){}\n\tint x, y;\n};\nclass Line{\npublic:\n\tLine(const int &x1, const int &y1, const int &x2, const int &y2){\n\t\tif (y1 > y2){\n\t\t\tp1 = Point(x1, y1);\n\t\t\tp2 = Point(x2, y2);\n\t\t}else{\n\t\t\tp1 = Point{x2, y2};\n\t\t\tp2 = Point{x1, y1};\n\t\t}\n\t};\n\tLine() = default;\n\tPoint p1, p2;\n\tint is_cross(const Point &p) const {\n\t\tif (p2.y != p1.y and p2.y != p.y and (p1.y - p.y) * (p2.y - p.y) <= 0){//辺がx軸に平行でなく、yが辺と交わる\n\t\t\tif (((p.y - p2.y) * (p1.x - p2.x)) > (p.x - p2.x) * (p1.y - p2.y)){//辺を通る\n\t\t\t\treturn 1;\n\t\t\t}else if (((p.y - p2.y) * (p1.x - p2.x) == (p.x - p2.x) * (p1.y - p2.y))){//辺に乗る\n\t\t\t\treturn 1000;\n\t\t\t}else{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}else if (p2.y == p1.y and p1.y == p.y){//x軸と平行な辺と触れる\n\t\t\tif ((p1.x - p.x) * (p2.x - p.x) <= 0){//辺と交わる\n\t\t\t\treturn 1000;\n\t\t\t}else{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}else{\n\t\t\treturn 0;\n\t\t}\n\t}\n};\nint fold(const std::vector<Line> &vertex, const Point p){\n\tint sum = 0;\n\tfor (auto l : vertex){\n\t\tsum += l.is_cross(p);\n\t}\n\tif (sum >= 1000){\n\t\treturn 1;\n\t}else if (sum % 2 == 1){\n\t\treturn 2;\n\t}else{\n\t\treturn 0;\n\t}\n}\nint main(){\n\tint n;\n\tstd::cin >> n;\n\tstd::vector<Line> lines;\n\tint sx, sy;\n\tstd::cin >> sx >> sy;\n\tint px = sx, py = sy;\n\tfor (auto i = 1; i < n; ++i){\n\t\tint x, y;\n\t\tstd::cin >> x >> y;\n\t\tlines.push_back(Line(px, py, x, y));\n\t\tpx = x; py = y;\n\t}\n\tlines.push_back(Line(px, py, sx, sy));\n\tint q;\n\tstd::cin >> q;\n\tfor (auto i = 0; i < q; ++i){\n\t\tint x, y;\n\t\tstd::cin >> x >> y;\n\t\tstd::cout << fold(lines, Point(x, y)) << \"\\n\";\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn ON;\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tcout << setprecision(1) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-9\n\ndouble toRadian(double deg) {return ((deg*PI)/180.0);}\ndouble toDegree(double radian) {return ((radian*180.0)/PI);}\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct point_i { int x, y;     // whenever possible, work with point_i\n  point_i() { x = y = 0; }                      // default constructor\n  point_i(int _x, int _y) : x(_x), y(_y) {} };         // user-defined\n\nstruct Point { //Integer Point\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\ndouble pointDistaceSquared2D (Point a, Point b) {return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);}\ndouble dist (Point a, Point b) {return sqrt(pointDistaceSquared2D(a, b));}\n// rotate p by theta degrees CCW w.r.t origin (0, 0)\nPoint rotate(Point p, double theta) {\n    double rad = toRadian(theta);\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nstruct line {double a, b, c;};\nvoid pointsToLine(Point p1, Point p2, line &l) {\n    if(fabs(p1.x-p2.x) < EPS) {\n        l.a = 1.0; l.b = 0.0; l.c = -p1.x;\n    } else {\n        l.a = -(double)(p1.y-p2.y) / (p1.x-p2.x);\n        l.b = 1.0;\n        l.c = -(double)(l.a*p1.x)-p1.y;\n    }\n}\n\nbool areParallel(line l1, line l2) {\n    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);\n}\n\nbool areSame(line l1, line l2) {\n    return areParallel(l1, l2) && (fabs(l1.c-l2.c) < EPS);\n}\n\nbool areIntersect(line l1, line l2, Point &p) {\n    if(areParallel(l1, l2)) return false;\n    p.x = (l2.b*l1.c-l1.b*l2.c) / (l2.a*l1.b-l1.a*l2.b);\n    if(fabs(l1.b) > EPS) p.y = -(l1.a*p.x+l1.c);\n    else                 p.y = -(l2.a*p.x+l2.c);\n    return true;\n}\n\n// Given three colinear points p, q, r, the function checks if\n// point q lies on line segment 'pr'\nbool onSegment(Point p, Point q, Point r)\n{\n    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&\n        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))\n       return true;\n\n    return false;\n}\n\n// To find orientation of ordered triplet (p, q, r).\n// The function returns following values\n// 0 --> p, q and r are colinear\n// 1 --> Clockwise\n// 2 --> Counterclockwise\nint orientation(Point p, Point q, Point r)\n{\n    // See 10th slides from following link for derivation of the formula\n    // http://www.dcs.gla.ac.uk/~pat/52233/slides/Geometry1x1.pdf\n    int val = (q.y - p.y) * (r.x - q.x) -\n              (q.x - p.x) * (r.y - q.y);\n\n    if (val == 0) return 0;  // colinear\n\n    return (val > 0)? 1: 2; // clock or counterclock wise\n}\n\n// The main function that returns true if line segment 'p1q1'\n// and 'p2q2' intersect.\nbool LineSegmentIntersect(Point p1, Point q1, Point p2, Point q2)\n{\n    // Find the four orientations needed for general and\n    // special cases\n    int o1 = orientation(p1, q1, p2);\n    int o2 = orientation(p1, q1, q2);\n    int o3 = orientation(p2, q2, p1);\n    int o4 = orientation(p2, q2, q1);\n\n    // General case\n    if (o1 != o2 && o3 != o4)\n        return true;\n\n    // Special Cases\n    // p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    if (o1 == 0 && onSegment(p1, p2, q1)) return true;\n\n    // p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    if (o2 == 0 && onSegment(p1, q2, q1)) return true;\n\n    // p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    if (o3 == 0 && onSegment(p2, p1, q2)) return true;\n\n     // p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    if (o4 == 0 && onSegment(p2, q1, q2)) return true;\n\n    return false; // Doesn't fall in any of the above cases\n}\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\nvec scale(vec v, double s) {return vec(v.x*s, v.y*s);}\nPoint translate(Point p, vec v) {return Point(p.x + v.x, p.y + v.y);}// translate p according to v\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm_sq(vec v) {return v.x*v.x + v.y*v.y;}\n\n// returns the distance from p to the line defined by\n// two points a and b (a and b must be different)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLine(Point p, Point a, Point b, Point &c) {\n    // formula: c = a + u* ab\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    c = translate(a, scale(ab, u));\n    return dist(p, c);\n}\n\n// returns the distance from p to the line segment ab defined by\n// two points a and b (still OK if a == b)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLineSegment(Point p, Point a, Point b, Point &c) {\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    if (u < 0.0) {\n        c = Point(a.x, a.y);\n        return dist(p, a);\n    }\n\n    if(u > 1.0) {\n        c = Point(b.x, b.y);\n        return dist(p, b);\n    }\n\n    return distToLine(p, a, b, c);\n}\n\ndouble angle(Point a, Point o, Point b) { // returns angle aob in rad\n    vec oa = toVec(o, a), ob = toVec(o, b);\n    //cout << \"angle \" << a.x << \" \" << a.y << \" \" << o.x << \" \" << o.y << \" \" << b.x << \" \" << b.y << \" \" << sqrt(norm_sq(oa) * norm_sq(ob)) << endl;\n    return acos(dot(oa, ob) / sqrt(norm_sq(oa) * norm_sq(ob)));\n}\n\ndouble cross(vec a, vec b) {return a.x*b.y - a.y*b.x;}\n// note: to accept collinear points, we have to change the '> 0'\n// returns true if point r is on the left side of line pq\nbool ccw(Point p, Point q, Point r) {return cross(toVec(p, q), toVec(p, r)) >= 0;}\n// returns true if point r is on the same line as the line pq\nbool collinear(Point p, Point q, Point r) {\n    return fabs(cross(toVec(p, q), toVec(p, r))) < EPS;\n}\n\ndouble trianglePerimeter(double a, double b, double c) {return (a+b+c)*0.5;}\ndouble triangleArea(double b, double h) {return (b*h)*0.5;}\ndouble triangleArea(double a, double b, double c) {\n    double s = trianglePerimeter(a, b, c);\n    return sqrt( s*(s-a)*(s-b)*(s-c) );\n}\n\n//in radian\ndouble triangleAngle(double a, double b, double c) {//angle opposite to line c\n    double nume = a*a+b*b-c*c;\n    double denom = 2.0*a*b;\n    return acos(nume/denom);\n}\n\nint insideCircle(point_i p, point_i c, int r) { // all integer version\n  int dx = p.x - c.x, dy = p.y - c.y;\n  int Euc = dx * dx + dy * dy, rSq = r * r;             // all integer\n  return Euc < rSq ? 0 : Euc == rSq ? 1 : 2;\n} //inside/border/outside\n\n//Given the intersection point p1, p2 and radius r find centers\nbool circle2PtsRad(Point p1, Point p2, double r, Point &c) {\n  double d2 = (p1.x - p2.x) * (p1.x - p2.x) +\n              (p1.y - p2.y) * (p1.y - p2.y);\n  double det = r * r / d2 - 0.25;\n  if (det < 0.0) return false;\n  double h = sqrt(det);\n  c.x = (p1.x + p2.x) * 0.5 + (p1.y - p2.y) * h;\n  c.y = (p1.y + p2.y) * 0.5 + (p2.x - p1.x) * h;\n  return true;\n}         // to get the other center, reverse p1 and p2\n\ndouble circleCircumference(double r) {return 2.0*PI*r;}\ndouble circleArea(double r){return PI*r*r;}\ndouble circleSectorArea(double r, double theta) {\n    return (circleArea(r)*theta)/360.0;\n}\n\n//Given three sides of a triangle\ndouble inCircleRadius(double a, double b, double c) {\n    double area = triangleArea(a, b, c);\n    double s = trianglePerimeter(a, b, c);\n    return (area/s);\n}\n\n//Given three sides of a triangle\ndouble circumCircleRadius(double a, double b, double c) {\n    double  A = triangleAngle(b, c, a);\n    double  d = a / sin(A);\n    return d*=0.5;\n}\n\ndouble coneArea(double h, double r) {return (PI*r*r*h)/3.0;}\ndouble coneFrustumArea(double R, double r, double h) {return ((R*R+R*r+r*r)*PI*h)/3.0;}\n\n//Polygon\n// returns the perimeter, which is the sum of Euclidian distances\n// of consecutive line segments (polygon edges)\ndouble perimeter(const vector<Point> &P) {\n  double result = 0.0;\n  for (int i = 0; i < (int)P.size()-1; i++)  // remember that P[0] = P[n-1]\n    result += dist(P[i], P[i+1]);\n  return result; }\n\n// returns the area, which is half the determinant\ndouble area(const vector<Point> &P) {\n  double result = 0.0, x1, y1, x2, y2;\n  for (int i = 0; i < (int)P.size()-1; i++) {\n    x1 = P[i].x; x2 = P[i+1].x;\n    y1 = P[i].y; y2 = P[i+1].y;\n    result += (x1 * y2 - x2 * y1);\n  }\n  return fabs(result) / 2.0; }\n\n// returns true if we always make the same turn while examining\n// all the edges of the polygon one by one\nbool isConvex(const vector<Point> &P) {\n  int sz = (int)P.size();\n  if (sz <= 3) return false;   // a point/sz=2 or a line/sz=3 is not convex\n  bool isLeft = ccw(P[0], P[1], P[2]);               // remember one result\n  for (int i = 1; i < sz-1; i++)            // then compare with the others\n    if (ccw(P[i], P[i+1], P[(i+2) == sz ? 1 : i+2]) != isLeft)\n      return false;            // different sign -> this polygon is concave\n  return true; }                                  // this polygon is convex\n\n// returns true if point p is in either convex/concave polygon P\nbool inPolygon(Point pt, const vector<Point> &P) {\n  if ((int)P.size() == 0) return false;\n  double sum = 0;    // assume the first vertex is equal to the last vertex\n  for (int i = 0; i < (int)P.size()-1; i++) {\n    if (ccw(pt, P[i], P[i+1]))\n         sum += angle(P[i], pt, P[i+1]);                   // left turn/ccw\n    else sum -= angle(P[i], pt, P[i+1]); }                 // right turn/cw\n    //cout << \"inpoly \" << pt.x << \" \" << pt.y << \" \" << sum << endl;\n  return fabs(fabs(sum) - 2*PI) < EPS; }\n\n// line segment p-q intersect with line A-B.\nPoint lineIntersectSeg(Point p, Point q, Point A, Point B) {\n  double a = B.y - A.y;\n  double b = A.x - B.x;\n  double c = B.x * A.y - A.x * B.y;\n  double u = fabs(a * p.x + b * p.y + c);\n  double v = fabs(a * q.x + b * q.y + c);\n  return Point((p.x * v + q.x * u) / (u+v), (p.y * v + q.y * u) / (u+v)); }\n\n// cuts polygon Q along the line formed by Point a -> Point b\n// (note: the last Point must be the same as the first Point)\nvector<Point> cutPolygon(Point a, Point b, const vector<Point> &Q) {\n  vector<Point> P;\n  for (int i = 0; i < (int)Q.size(); i++) {\n    double left1 = cross(toVec(a, b), toVec(a, Q[i])), left2 = 0;\n    if (i != (int)Q.size()-1) left2 = cross(toVec(a, b), toVec(a, Q[i+1]));\n    if (left1 > -EPS) P.push_back(Q[i]);       // Q[i] is on the left of ab\n    if (left1 * left2 < -EPS)        // edge (Q[i], Q[i+1]) crosses line ab\n      P.push_back(lineIntersectSeg(Q[i], Q[i+1], a, b));\n  }\n  if (!P.empty() && !(P.back() == P.front()))\n    P.push_back(P.front());        // make P's first Point = P's last Point\n  return P; }\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    int n, q;\n    double x, y;\n    vector<Point> v;\n    Point temp;\n    vec tvec;\n\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%lf %lf\", &x, &y);\n        v.push_back(Point(x, y));\n    }\n\n    v.push_back(v[0]);\n\n    scanf(\"%d\", &q);\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x, &y);\n        bool iscorner = false;\n        for(int j = 0; j < n; j++) {\n            iscorner = (iscorner || (v[j] == Point(x, y)));\n        }\n\n        if(iscorner) {\n            printf(\"1\\n\");\n            continue;\n        }\n\n        if(inPolygon(Point(x, y), v)) {\n            bool onseg = false;\n\n            for(int j = 0; j < n; j++) {\n                onseg = onseg || (collinear(v[j], Point(x, y), v[j+1]) && onSegment(v[j], Point(x, y), v[j+1]));\n            }\n\n            if(onseg) {\n                printf(\"1\\n\");\n            } else {\n                printf(\"2\\n\");\n            }\n        } else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = a.X;\n\tfor (PT p : po)\n\t\tmx = max(mx, p.X);\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t//\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t//\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define EPS 1e-10\n#define PI 3.141592653589793238\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef long long ll;\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// 点\nstruct Point {\n    double x,y;\n    Point(){}\n    Point(double x, double y) : x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x, y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x, y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    Point operator/(double k){return Point(x/k,y/k);}\n    double norm(){return x*x+y*y;}\n    double abs(){sqrt(norm());}\n    bool operator == (const Point &p) const {return equals(x,p.x)&&equals(y,p.y);}\n};\n\ntypedef Point P;\ntypedef vector<Point> Polygon;\n\ndouble norm(P a){return a.x*a.x+a.y*a.y;}\ndouble abs(P a){return sqrt(norm(a));}\n\n// 線分\nstruct Segment {\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c, double r):c(c),r(r){}\n};\n\n// 法線ベクトル\nPoint normal(Point p){return Point(-p.y,p.x);}\n\n// 内積\ndouble dot(Point a, Point b) {return a.x*b.x + a.y*b.y;}\n\n// 外積\ndouble cross(Point a, Point b) {return a.x*b.y-a.y*b.x;}\n// 2直線の直行判定\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return equals(dot(a1-a2, b1-b2), 0.0);\n}\n// 2直線の平行判定\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return equals(cross(a1-a2, b1-b2), 0.0);\n}\n// 点cが直線ab上にあるかないか\nbool is_point_on_INF_line(Point a, Point b, Point c) {\n    return equals(cross(b-a,c-a), 0.0);\n}\n// 点cが線分ab上にあるかないか\nbool is_point_on_LIMITED_line(Point a, Point b, Point c) {\n    return (Point(a-c).abs()+Point(c-b).abs() < Point(a-b).abs() + EPS);\n}\n// 直線と点の距離\ndouble distance_l_p(Point a, Point b, Point c) {return abs(cross(b-a, c-a)) / (b-a).abs();}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_ls_p(Point a, Point b, Point c) {\n    if (dot(b-a, c-a) < EPS) return (c-a).abs();\n    if (dot(a-b, c-b) < EPS) return (c-b).abs();\n    return abs(cross(b-a, c-a)) / (b-a).abs();\n}\n\n// 点が線分のどちら側にあるかを計算\nint ccw(Point p0,Point p1,Point p2) {\n    P a = p1-p0;\n    P b = p2-p0;\n    if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS) return CLOCKWISE;\n    if(dot(a,b) < -EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0&&ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nbool intersectSS(Segment s1, Segment s2) {\n    return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n// 直線と点の距離\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\n// 線分と点の距離\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\n// 線分と線分の距離\ndouble getDistanceSS(Segment s1,Segment s2){\n    if(intersectSS(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\n// 前提として交差していることが必要\nP getCrossPointSS(P a1, P a2, P b1, P b2) {\n    P b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\n// 前提として平行でないことが必要\nP intersection_l(P a1, P a2, P b1, P b2) {\n    P a = a2-a1; P b = b2-b1;\n    return a1+a*cross(b, b1-a1)/cross(b, a);\n}\n\n// 射影\nPoint project(Segment s, Point p) {\n    Point base = s.p2-s.p1;\n    double r = dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\ndouble area(Polygon s){\n    double res=0;\n    for(int i=0;i<(int)s.size();i++){\n        res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n    }\n    return res;\n}\n\nbool isConvex(Polygon p){\n    bool f=1;\n    int n=p.size();\n    for(int i=0;i<n;i++){\n        int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n        f&=t!=CLOCKWISE;\n    }\n    return f;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n    }\n    return (x?2:0);\n}\n\n\nint main(int argc, char const *argv[]) {\n    int n;cin>>n;\n    Polygon pl;\n    rep(i,n) {\n        double x,y;cin>>x>>y;\n        pl.push_back(Point(x,y));\n    }\n    int q;cin>>q;\n    rep(i,q) {\n        double x,y;cin>>x>>y;\n        Point p(x,y);\n        cout << contains(pl,p) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\ndouble polygonArea(const vector<Point>& p) {\n\tint n = p.size();\n\tdouble ret = 0.0;\n\tfor(int i = 0; i < n; ++i) {\n\t\tret += cross(p[i], p[(i+1)%n]);\n\t}\n\n\treturn abs(ret) / 2.0;\n}\n\nbool isConvex(const vector<Point>& p) {\n\tint n = p.size();\n\trep(i, n) {\n\t\tif(ccw(p[i], p[(i+1)%n], p[(i+2)%n]) == -1) return false;\n\t}\n\treturn true;\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(const vector<Point>& v, Point p) {\n\tint n = v.size();\n\tbool flag = false;\n\trep(i, n) {\n\t\tPoint a = v[i] - p, b = v[(i+1)%n] - p;\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a, b) < EPS) flag = !flag;\n\t\tif(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t}\n\n\treturn flag ? 2 : 0;\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l1.a)) < EPS; }\n\nbool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }\n\nbool isIntersectLS(Line l, Seg s) {\n\treturn cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;\n}\n\nbool isIntersectSS(Seg s1, Seg s2) { \n\treturn ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 \n\t\t&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\ndouble distanceLS(Line l, Seg s) {\n\tif (isIntersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.a), distanceLP(l, s.b));\n}\n\ndouble distanceSP(Seg s, Point p) {\n\tif (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);\n\tif (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);\n\treturn distanceLP(Line(s.a, s.b) , p);\n}\n\ndouble distanceSS(Seg s1, Seg s2) {\n    if (isIntersectSS(s1, s2)) return 0.0;\n\treturn min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );\n}\n\n// if isIntersectLL(l1, l2)\nPoint crossPointLL(Line l1, Line l2) {\n\tPoint base = l2.b - l2.a;\n\tdouble d = abs(cross(base, l1.a - l2.a));\n\tdouble d2 = abs(cross(base, l1.b - l2.a));\n\tdouble t = d / (d + d2);\n\treturn l1.a + (l1.b - l1.a) * t;\n}\n\n// if isIntersectLS(l, s)\nPoint crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }\n\n// if isIntersectSS(s1, s2)\nPoint crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }\n\nPoint project(Line l, Point p) {\n\tPoint base = l.b - l.a;\n\tdouble t = dot(base, p-l.a) / dot(base, base);\n\treturn l.a + base * t;\n}\n\nPoint reflect(Line l, Point p) {\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\n\tvector<Point> v(n);\n\trep(i, n) cin >> v[i].x >> v[i].y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tcout << contains(v, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\nusing Point = complex<double>;\nusing Polygon = vector<Point>;\n\ninline int sgn(const double &a) { return (a < -EPS ? -1 : (a > EPS ? 1 : 0)); }\n\ninline bool eq(const Point &a, const Point &b) { return abs(a - b) < EPS; }\n\nnamespace std {\ninline bool operator<(const Point &a, const Point &b) {\n    if (sgn(a.real() - b.real()))\n        return sgn(a.real() - b.real()) < 0;\n    return sgn(a.imag() - b.imag()) < 0;\n}\n} // namespace std\n\ndouble dot(const Point &a, const Point &b) { return real(conj(a) * b); }\n\ndouble det(const Point &a, const Point &b) { return imag(conj(a) * b); }\n\nstruct Line {\n    Point p1, p2;\n\n    Line(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator<(const Line &rhs) const {\n        if (eq(p2, rhs.p2))\n            return p1 < rhs.p1;\n        return p2 < rhs.p2;\n    }\n    bool operator==(const Line &rhs) const {\n        return (eq(p1, rhs.p1) && eq(p2, rhs.p2)) ||\n               (eq(p1, rhs.p2) && eq(p2, rhs.p1));\n    }\n};\n\ninline Point curr(const Polygon &p, const int &i){\n    return p[i % p.size()];\n}\n\ninline Point next(const Polygon &p, const int &i){\n    return p[(i+1) % p.size()];\n}\n\ninline Point prev(const Polygon &p, const int &i){\n    return p[(i+p.size()-1) % p.size()];\n}\n\nenum { OUT, ON, IN };\n\nint contains(const Polygon &poly, const Point &p){\n    bool in = false;\n    for(int i=0;i<poly.size();i++){\n        Point a = curr(poly, i) - p, b = next(poly, i) - p;\n        if(sgn(a.imag() - b.imag()) == 1)swap(a, b);\n        if(sgn(a.imag()) <= 0 && sgn(b.imag()) > 0)\n            if(sgn(det(a, b)) > 0)in = !in;\n        if(sgn(det(a, b)) == 0 && sgn(dot(a, b)) <= 0)return ON;\n    }\n    return in ? IN : OUT;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    Polygon pg;\n    for(int i=0;i<n;++i){\n        double x, y;\n        cin >> x >> y;\n        Point p = Point(x, y);\n        pg.push_back(p);\n    }\n\n    int q;\n    cin >> q;\n    for(int i=0;i<q;++i){\n        double x, y;\n        cin >> x >> y;\n        Point p = Point(x, y);\n        cout << contains(pg, p) << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\n//点のクラス\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n\n        double norm(Point p){return p.x*p.x+p.y*p.y;}\n        double abs(Point p){return sqrt(norm(p));}    \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\nstruct Segment{ Point p1,p2; };\ntypedef Segment Line;\ndouble norm(Vector v){return v.x*v.x+v.y*v.y;} \ndouble abs(Vector v){return sqrt(norm(v));}    \n//円\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n//多角形\ntypedef vector<Point> Polygon;\n//内積\ndouble dot(Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\n//外戚\ndouble cross(Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n//点の内包\nint contains(Polygon g,Point p){\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++){\n\t\tPoint a=g[i]-p;\n\t\tPoint b=g[(i+1)%n]-p;\n\tif( abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}   \nint main(){\n    Polygon g;\n    Point p;\n    int n;\n    cin>>n;\n\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        g.push_back(p);\n    }\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        cout<<contains(g,p)<<\"\\n\";\n    }\n    return 0;\n}\n    \n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdet(a,b,p)==0 and sdot(a,b,p)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long unsigned int ll;\n\n// 参考サイト\n// http://www.prefield.com/algorithm/index.html\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> Point; //複素数で平面定義\nusing P = Point ;\n\n// system {{{\n// オペレーター< を定義、後々楽\nnamespace std{\n    bool operator < ( const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\n// 外積\ndouble cross( const P& a, const P& b ){\n    return imag(conj(a)*b);\n}\n// 内積\ndouble dot( const P& a, const P& b ){\n    return real(conj(a)*b);\n}\n// }}}\n// Line L:vector<P> PolyGon G:vector<P> Circle C(P,int rad) {{{\n// 直線 Line 線分 Segment {{{\nstruct L : public vector<P> {\n    L(const P &a, const P &b ){\n        push_back(a); push_back(b);\n    }\n};\n// }}}\n// 単純多角形 Polygon {{{\nstruct G : public vector<P> {\n    Point curr( int i ){\n        return *(begin()+i);\n    }\n    Point next( int i ){\n        return *(begin()+(i+1)%size());\n    }\n    Point prev( int i ){\n        i += size();\n        return *(begin()+(i-1)%size());\n    }\n    double area2(){\n        double A = 0.0;\n        for( int i = 0; i < size(); i++ ){\n            A += cross( curr(i),next(i) );\n        }\n        return A;\n    }\n    int contains( P &p ){\n        bool in = false;\n        for( int i = 0; i < size(); i++ ){\n            Point a = curr(i) - p, b = next(i) - p;\n            if( imag(a) > imag(b) ) {\n                Point c = a;\n                a = b; b = c;\n            }\n            if( imag(a) <= 0 && 0 < imag(b))\n                if( cross(a,b) < 0) in = !in;\n            if( cross(a,b) == 0 && dot(a, b) <= 0 ) return 1;\n        }\n        return in*2;\n    }\n    /*{{{\n    int PointContainment( Point &p ){\n        const int n = size();\n        Point g = ( curr(0) + curr(n/3) + curr(2*n/3) ) / 3.0; // 重心\n        Point pa, pb, pc;\n        int a=0, b=n;\n        // 二分たん\n        while( a+1 < b ){\n            int c = (a+b) / 2;\n            pa = curr(a);\n            pb = curr(b);\n            pc = curr(c);\n            if( cross( pa-g , pc-g ) > 0 ){\n                if( cross( pa - g, p-g ) > 0 && cross( pc - g, p - g ) < 0 ) b=c;\n                else                                                         a=c;\n            }else{\n                if( cross( pa - g, p-g ) < 0 && cross( pc - g, p - g ) > 0 ) b=c;\n                else                                                         a=c;\n            }\n        }\n        pa = curr(a);\n        pb = curr(b);\n        if( cross( pa - p, pb - p ) < -EPS ) return 0;\n        if( cross( pa - p, pb - p ) > EPS ) return 2;\n        return 1;\n    }\n    }}}*/\n};\nusing Polygon = G;\n//}}}\n// 円 cirlce {{{\nstruct C {\n    P p; double r;\n    C(const P &p, double r ) : p(p), r(r) {}\n};\n// }}}\n// }}}\n// counter clockwise {{{\n//\nint ccw( P a, P b, P c ){\n    b -= a; c -= a;\n    if( cross(b,c) > 0 )   return +1; //counter clockwise\n    if( cross(b,c) < 0 )   return -1; //clockwise\n    if( dot(b,c) < 0 )     return +2; //online_back\n    if( norm(b) < norm(c)) return -2; //online_front\n    return 0; // on_segment\n} //}}}\n// 交点判定 交点座標 LSPtoLSP {{{\nbool intersectLL( const L &l, const L &m ){\n    return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n           abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n}\nbool intersectLS( const L &l, const L &s ){\n    return cross( l[1]-l[0], s[0]-l[0] ) *\n           cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n}\nbool intersectLP( const L &l, const P &p ){\n    return abs( cross(l[0]-p, l[1]-p) );\n}\nbool intersectSS( const L &s, const L &t ){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n           ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP( const L &s, const P &p ){\n    return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n}\nP crossPoint( const L &l, const L &m ){\n    double A = cross( l[1] - l[0], m[1] - m[0] );\n    double B = cross( l[1] - l[0], l[1] - m[0] );\n    // A は に直線の成す平行四辺形\n    // B は そのA のうちの片側\n    // 書いたら分かる\n    // 参考サイト\n    // http://www.fumiononaka.com/Business/html5/FN1312003.html\n    if( abs(A) < EPS && abs(B) < EPS ) return m[0];\n    return m[0] + B / A * ( m[1] - m[0] );\n}\n// }}}\n// 射影 反射 距離 LSPtoLSP  {{{\nP projection( const L &l, const P &p ){\n    double t = dot( p-l[0], l[0]-l[1] ) / norm( l[0]-l[1] );\n    return l[0] + t*(l[0]-l[1]);\n}\nP reflection( const L &l, const P &p ){\n    return p + 2.0*( projection(l,p) - p );\n}\ndouble distanceSP( const L &s, const P &p ){\n    const P r = projection(s,p);\n    if( intersectSP(s,r) ) return abs(r-p);\n    else return min( abs(s[0] - p), abs(s[1] - p) );\n}\ndouble distanceSS( const L &s, const L &t ){\n    if( intersectSS(s,t) ) return 0.0;\n    return min( min( distanceSP(s,t[0]), distanceSP(s,t[1]) ),\n                min( distanceSP(t,s[0]), distanceSP(t,s[1]) ) );\n}\n// }}}\n// 多角形面積 G {{{\ndouble area2( const Polygon &P ){\n    double A = 0.0;\n    for( int i = 0; i < P.size(); i++ ){\n        A += cross( P[i], P[(i+1)%P.size()] );\n    }\n    return A;\n}\n// }}}\n// imagePointDescription(点表示) {{{ \nvoid imagePointDescription( const vector<P> &p, double scale = 1 ){\n    int here[51][51] = {};\n    int i = 0;\n    for( P t : p ){\n        i++;\n        int y = round(imag(t)/scale);\n        int x = round(real(t)/scale);\n        if( abs(y) > 25 ) continue;\n        if( abs(x) > 25 ) continue;\n        here[y+25][x+25] = i;\n    }\n\n    for( i = 50; i >= 0; i-- ){\n        for( int j = 0; j <= 50; j++ ){\n            if( here[i][j] ) printf (\"%2d\", here[i][j] );\n            else if( i == 25 && j == 25 ) printf (\"-+\");\n            else if( i == 25 ) printf (\"--\");\n            else if( j == 25 ) printf (\" |\");\n            else if( j % 5 == 0 && i % 5 == 0)printf (\" .\");\n            else printf (\"  \");\n        }\n        printf (\"\\n\");\n    }\n\n}\n// }}}\n\nint main() {\n\n    double a,b,c,d;\n    G pol;\n\n\n    int q;\n    cin >> q;\n    int n = q;\n    while(q--){\n        cin >> a >> b;\n        P p(a,b);\n        pol.push_back(p);\n        // printf (\"%1.10lf %1.10lf\\n\", real(x), imag(x) );\n    }\n    // imagePointDescription(pol,1);\n    cin >> q;\n    while(q--){\n        cin >> a >> b;\n        P p(a,b);\n        printf (\"%d\\n\", pol.contains(p) );\n    }\n\n\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)(s); i < (int)(e); i++)\n#define pb push_back\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) real(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i+P.size()-1)%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\ntypedef complex<double> P;\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\ntypedef vector<P> polygon;\n\nstruct C {\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n//??????????????????\nint ccw(P a, P b, P c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const L &l, const L &m) {\n\treturn abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n\t\t\tabs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n\treturn cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n\t\t\tcross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n\treturn abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n\treturn abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\nenum { OUT, ON, IN };\nint contains(const G& pol, const P& p){\n\tif(pol.size() < 2) return OUT;\n\tif(intersectSP({pol[0], pol[1]}, p)) return ON;\n\tbool f = cross(pol[1]-pol[0], p - pol[0]) > 0;\n\tfor(int i = 1; i < pol.size(); i++) {\n\t\tauto& now = curr(pol, i);\n\t\tauto& nxt = next(pol, i);\n\t\tif(intersectSP({nxt, now}, p)) return ON;\n\t\tif(f^(cross(nxt-now, p-now)>0)) return OUT;\n\t}\n\treturn IN;\n}\nbool contains(const polygon& a, const polygon& b) {\n\trep(i, a.size()) if(contains(b, a[i]) == OUT) return false;\n\treturn true;\n}\n//????????´???????£???????????????????(??????????????£???????????????)\nenum{NO_HIT, HIT, A_IN_B, B_IN_A};\nint isHit(const polygon& a, const polygon& b){\n\tif(contains(a, b)) return A_IN_B;\n\tif(contains(b, a)) return B_IN_A;\n\trep(i, a.size()) rep(j, b.size()){\n\t\tL la(curr(a, i), next(a, i)), lb(curr(b, j), next(b, j));\n\t\tif(intersectSS(la, lb)) return HIT;\n\t}\n\treturn NO_HIT;\n}\n\n//point???theta???????????¢\npoint spinP(const point& p, double theta, double ext = 1.0) {\n\treturn p*P(cos(theta),sin(theta))*ext;\n}\n\npoint makeP(double r, double arg) {return P(r*cos(arg), r*sin(arg));}\n\n//?????¨????????????????±???????\nvector<P> crossPoint(const C& a, const C& b){\n\tdouble d = abs(b.p-a.p);\n\tdouble arg = atan2(y(b.p-a.p), x(b.p-a.p));\n\tdouble arg2 = acos((d*d+a.r*a.r-b.r*b.r)/(2*d*a.r));\n\tif(abs(arg2)<EPS) return {a.r*makeP(1.0, arg)+a.p};\n\tif(abs(a.r-b.r)<d && d < a.r+b.r) return {a.r*makeP(1.0, arg+arg2)+a.p, a.r*makeP(1.0, arg-arg2)+a.p};\n\treturn {};\n}\n\n//????????±?????\\???\nvector<L> comonTang(C c1, C c2) {\n\tvector<L> ret;\n\tif(c1.r > c2.r) swap(c1, c2);\n\tP sub = c1.p;\n\tc1.p -= sub;\n\tc2.p -= sub;\n\tdouble theta = atan2(c2.p.Y, c2.p.X);\n\n\tc2.p = spinP(c2.p, -theta);\n\tint signX = 0;\n\tif(c2.p.X > 0) signX = 1;\n\tif(c2.p.X < 0) signX = -1;\n\n\tdouble x = abs(c2.p.X), r1 = c1.r, r2 = c2.r;\n\tif(x*x > (r2 - r1) * (r2 - r1)) {\n\t\tdouble theta2 = asin((r2-r1)/x);\n\t\tret.pb({spinP({0, r1}, theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), r1}, theta2)});\n\t\tret.pb({spinP({0, -r1}, -theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), -r1}, -theta2)});\n\t}\n\tif(x > r1+r2) {\n\t\tdouble theta3 = PI / 2 - acos((r1+r2)/x);\n\t\tdouble len = sqrt((r1*x)*(r1*x)/(r1+r2)/(r1+r2)-r1*r1) + sqrt((r2*x)*(r2*x)/(r1+r2)/(r1+r2)-r2*r2);\n\t\tret.pb({spinP({0, r1}, -theta3), spinP({len, r1}, -theta3)});\n\t\tret.pb({spinP({0, -r1}, -theta3), spinP({len, -r1}, theta3)});\n\t}\n\n\tfor(auto& l : ret) {\n\t\tif(signX == -1) l[1] = {-l[1].X, l[1].Y};\n\t\tl[0] = spinP(l[0], theta);\n\t\tl[1] = spinP(l[1], theta);\n\t\tl[0] += sub;\n\t\tl[1] += sub;\n\t}\n\treturn ret;\n}\n\ndouble getArea(const polygon& pol) {\n\tint n = pol.size();\n\tdouble s = 0.0;\n\tfor(int i = 0; i < n; i++) {\n\t\tint now = i, nxt = (i + 1) % n;\n\t\ts += (pol[now].X - pol[nxt].X) * (pol[now].Y + pol[nxt].Y);\n\t}\n\treturn abs(s/2.0);\n}\n\n//?????? - convex hull\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n  \tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n  \t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  \tfor (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n  \t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  \tch.resize(k-1);\n  \treturn ch;\n}\n//???????¨??????????polygon????????????????????????\t\t\tCGL_3_B\nbool isHull(const G& g) {\n\tint n = g.size();\n\tif(n < 3) return false;\n\trep(i, n) if(ccw(prev(g, i), curr(g, i), next(g, i)) == -1) return false;\n\treturn true;\n}\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tG g;\n\trep(i, n) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tg.pb({x, y});\n\t}\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tcout << contains(g, P{x, y}) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n, q;\n\t\n\tscanf(\"%d\", &n);\n\tPolygon p(n);\n\tfor (int i = 0; i < n; i++){\n\t\tscanf(\"%lf %lf\", &p[i].x, &p[i].y);\n\t}\n\t\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++){\n\t\tPoint t;\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\t\n\t\tint state = 0;\n\t\tint pl = 0, m = 0;\n\t\t\n\t\tfor (int j = 0; j < n; j++){\n\t\t\tPoint next = p[(j + 1) % n];\n\t\t\tif (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse if (ccw(p[j], next, t) < 0) m++;\n\t\t\telse pl++;\n\t\t}\n\t\tif (state) puts(\"1\");\n\t\telse if (m == n || pl == n) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n \ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n \nconst int N = -1;\nconst ld EPS = 1e-12;\n \nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n \ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n \nistream& operator>> (istream& is, complex<ld>& p){\n    ld val;\n    is >> val;\n    p.real(val);\n    is >> val;\n    p.imag(val);\n    return is;\n}\n \nld dot(PT a, PT b){ return real(conj(a)*b); }\nint crossCall = 0;\nclock_t crossClock = 0;\nld cross(PT a, PT b){\n\tclock_t st = clock();\n\tcrossCall++; \n\tld res = imag(conj(a)*b); \n\tcrossClock += clock()-st;\n\treturn res;\n}\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n \nPT proj(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + b*real(c/b);\n}\n \nPT reflect(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + conj(c/b)*b;\n}\n \nPT rotate(PT a, PT b, ld theta){\n    return (b-a)*polar<ld>(1, theta) + a;\n}\n \nint relpos(PT a, PT b, PT c){\n    b -= a, c -= a;\n\tld Imag = cross(b, c);\n    if (Grt(Imag, 0)) return LEFT;\n    if (Lss(Imag, 0)) return RIGHT;\n\tld Real = dot(b, c);\n    if (Lss(Real, 0)) return BACK;\n    if (Grt(Real, 1)) return FRONT;\n    return ON;\n}\n \nint side(PT a, PT b, PT c){\n    b -= a, c -= a;\n    ld cr = cross(b, c);\n    return Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n \n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n    int as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n    if (as && as == bs || cs && cs == ds) return false;\n    else if (as || bs || cs || ds) return true;\n    for (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n        ld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n        for (int k = 0; k < 2; k++, swap(c, d))\n            if (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n                return true;\n    }\n    return false;\n}\n \n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n    ld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n    return (c1*d - c2*c)/(c1-c2);\n}\n \nld distLSP(PT a, PT b, PT c){\n    int rpos = relpos(a, b, proj(a, b, c));\n    if (rpos == BACK) return len(c-a);\n    if (rpos == FRONT) return len(c-b);\n    b -= a, c -= a;\n    return abs(cross(b, c)/len(b));\n}\n \nld distLS(PT a, PT b, PT c, PT d){\n    if (intersect(a, b, c, d)) return 0;\n    return min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n \nld signedArea(Poly &po){\n    int n = po.size();\n    ld res = 0;\n    for (int i = 0; i < n; i++)\n        res += cross(po[i], po[(i+1)%n]);\n    return res/2;\n}\n \nld area(Poly &poly){\n    return abs(signedArea(poly));\n}\n \nbool isConvex(Poly &po){\n    int n = po.size();\n    bool neg = false, pos = false;\n    for (int i = 0; i < n; i++){\n        int rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n        if (rpos == LEFT) pos = true;\n        if (rpos == RIGHT) neg = true;\n    }   \n    return (neg&pos) == false;\n}\n \nint crossingN(Poly &po, PT a){\n    int cn = 0;\n    ld mx = 1e9;\n    PT b(mx, a.Y);\n    int n = po.size();\n    for (int i = 0; i < n; i++){\n        PT p = po[i], q = po[(i+1)%n];\n        if (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n            cn++;\n    }\n    return cn;\n}\n \nint pointInPoly(Poly &po, PT a){\n    int n = po.size();\n    for (int i = 0; i < n; i++)\n        if (relpos(po[i], po[(i+1)%n], a) == ON)\n            return ON;  \n    return (crossingN(po, a)%2 ? IN : OUT);\n}\n \nint main(){ \n    Poly poly;\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        poly.pb(p);\n    }\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        int s = pointInPoly(poly, p);\n        cout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-9\n#define Vector Point\n#define INF 2000000000\n#define DOUBLE_INF 1e50\n#define sq(x) ((x)*(x))\n#define fi first\n#define sec second\n#define all(x) (x).begin(),(x).end()\n#define EQ(a,b) (abs((a)-(b))<eps)\n\n// Geometry Library\n// written by okuraofvegetable\n\ninline double add(double a,double b){\n\tif(abs(a+b)<eps*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint() {}\n\tPoint(double x,double y) : x(x),y(y){}\n\tPoint operator + (Point p){return Point(add(x,p.x),add(y,p.y));}\n\tPoint operator - (Point p){return Point(add(x,-p.x),add(y,-p.y));}\n\tPoint operator * (double d){return Point(x*d,y*d);}\n\tdouble dot(Point p){return add(x*p.x,y*p.y);}\n\tdouble det(Point p){return add(x*p.y,-y*p.x);}\n\tdouble norm(){return sqrt(x*x+y*y);}\n\tdouble norm2(){return x*x+y*y;}\n\tdouble dist(Point p){return ((*this)-p).norm();}\n\tdouble dist2(Point p){return sq(x-p.x)+sq(y-p.y);}\n\tPoint vert(){return Point(y,-x);}\n\tvoid dump(const char* msg=\"\"){printf(\"%s%.12f %.12f\\n\",msg,x,y);return;}\n\t\n\t// following functions for vector operation\n\n\t// signed area of triange (0,0) (x,y) (p.x,p.y)\n\tdouble area(Point p){\n\t\treturn (x*p.y-p.x*y)/2.0;\n\t}\n};\n// direction a -> b -> c\n// verified AOJ CGL_1_C\nenum {COUNTER_CLOCKWISE,\n\t\tCLOCKWISE,\n\t\tONLINE_BACK,\n\t\tONLINE_FRONT,\n\t\tON_SEGMENT};\nint ccw(Point a,Point b,Point c){\n\tVector p = b-a;\n\tVector q = c-a;\n\tif(p.det(q)>0.0)return COUNTER_CLOCKWISE; // counter clockwise\n\tif(p.det(q)<0.0)return CLOCKWISE; // clockwise\n\tif(p.dot(q)<0.0)return ONLINE_BACK; // c--a--b online_back\n\tif(p.norm()<q.norm())return ONLINE_FRONT; // a--b--c online_front \n\treturn ON_SEGMENT;// a--c--b on_segment\n}\nstruct Line{\n\tPoint a,b;\n\tLine(){}\n\tLine(Point a,Point b):a(a),b(b){}\n\tbool on(Point q){\n\t\treturn (a-q).det(b-q)==0; \n\t}\n\t// folloing 2 functions verified AOJ CGL_2_A\n\tbool is_parallel(Line l){return (a-b).det(l.a-l.b)==0;}\n\tbool is_orthogonal(Line l){return (a-b).dot(l.a-l.b)==0;}\n\tPoint intersection(Line l){\n\t\t//assert(!is_parallel(l));\n\t\treturn a+(b-a)*((l.b-l.a).det(l.a-a)/(l.b-l.a).det(b-a));\n\t}\n\t// projection of p to this line\n\t// verified AOJ CGL_1_A\n\tPoint projection(Point p){\n\t\treturn (b-a)*((b-a).dot(p-a)/(b-a).norm2())+a;\n\t}\n\t// reflection point of p onto this line\n\t// verified AOJ CGL_1_B\n\tPoint refl(Point p){\n\t\tPoint proj = projection(p);\n\t\treturn p+((proj-p)*2.0);\n\t}\n};\nstruct Segment{\n\tPoint a,b;\n\tSegment(){}\n\tSegment(Point a,Point b):a(a),b(b){}\n\tLine line(){\n\t\treturn Line(a,b);\n\t}\n\tbool on(Point q){\n\t\treturn ((a-q).det(b-q)==0&&(a-q).dot(b-q)<=0); \n\t}\n\t// verified AOJ CGL_2_B\n\tbool is_intersect(Segment s){\n\t\tif(line().is_parallel(s.line())){\n\t\t\tif(on(s.a)||on(s.b))return true;\n\t\t\tif(s.on(a)||s.on(b))return true;\n\t\t\treturn false;\n\t\t}\n\t\tPoint p = line().intersection(s.line());\n\t\tif(on(p)&&s.on(p))return true;\n\t\telse return false;\n\t}\n\tbool is_intersect(Line l){\n\t\tif(line().is_parallel(l)){\n\t\t\tif(l.on(a)||l.on(b))return true;\n\t\t\telse return false;\n\t\t}\n\t\tPoint p = line().intersection(l);\n\t\tif(on(p))return true;\n\t\telse return false;\n\t}\n\t// following 2 distance functions verified AOJ CGL_2_D\n\tdouble distance(Point p){\n\t\tdouble res = DOUBLE_INF;\n\t\tPoint q = line().projection(p);\n\t\tif(on(q))res = min(res,p.dist(q));\n\t\tres = min(res,min(p.dist(a),p.dist(b)));\n\t\treturn res;\n\t}\n\tdouble distance(Segment s){\n\t\tif(is_intersect(s))return 0.0;\n\t\tdouble res = DOUBLE_INF;\n\t\tres = min(res,s.distance(a));\n\t\tres = min(res,s.distance(b));\n\t\tres = min(res,this->distance(s.a));\n\t\tres = min(res,this->distance(s.b));\n\t\treturn res;\n\t}\n};\n\n// Polygon \n\ntypedef vector<Point> Polygon;\n// verified AOJ CGL_3_A\n// Polygon don't need to be convex\ndouble area(Polygon& pol){\n\tvector<Point> vec;\n\tdouble res = 0.0;\n\tint M = pol.size();\n\tfor(int i=0;i<M;i++){\n\t\tres += (pol[i]-pol[0]).area(pol[(i+1)%M]-pol[0]);\t\n\t}\n\treturn res;\n}\nbool is_convex(Polygon& pol){\n\tint n = pol.size();\n\tfor(int i=0;i<n-1;i++){\n\t\tif(ccw(pol[i],pol[i+1],pol[(i+2)%n])==-1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nenum {OUT,ON,IN};\nint contained(Polygon& pol,Point p){\n\tint n = pol.size();\n\tPoint outer(1e9,p.y);\n\tSegment s = Segment(outer,p);\n\tint cnt = 0;\n\tfor(int i=0;i<n;i++){\n\t\tSegment e = Segment(pol[i],pol[(i+1)%n]);\n\t\tif(e.on(p))return ON;\n\t\tVector a = pol[i]-p;\n\t\tVector b = pol[(i+1)%n]-p;\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<=0.0&&b.y>0.0){\n\t\t\tif(a.det(b)<0.0)cnt++;\n\t\t}\n\t}\n\t// cout << cnt << endl;\n\tif((cnt&1)==1)return IN;\n\telse return OUT;\n}\n// for input\nPoint input_point(){\n\tPoint p;\n\tcin >> p.x >> p.y;\n\treturn p;\n}\nSegment input_segment(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Segment(a,b);\n}\nLine input_line(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Line(a,b);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tPolygon pol;\n\tfor(int i=0;i<n;i++){\n\t\tpol.pb(input_point());\n\t}\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tPoint p = input_point();\n\t\tint ans = contained(pol,p);\n\t\tif(ans==IN)cout << 2 << endl;\n\t\telse if(ans==ON)cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint is_included(P a, Poly p, P ex){\n  int n = p.size(), c = 0;\n  L l = L(a,ex);\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    if(is_cross(l,L(p[i],p[i+1]))) ++c;\n    if(!ccw(p[i],p[i+1],a)) return 1;//??????\n    if(!ccw(a,ex,p[i])) --c;\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    Mx = max(Mx,x);\n    My = max(My,y);\n    p[i] = P(x,y);\n  }\n  ++Mx;\n  ++My;\n  P ex = P(Mx,My);\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << is_included(P(x,y),p,ex) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#include <vector>\n#include <stack>\n#include <queue>\n#define ESP (1e-13)\n#define INF 2000000000\nusing namespace std;\n\n//??§?¨????????§???????\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(const Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(const double& a) {\n\t\treturn Point(x*a, y*a);\n\t}\n\n\tPoint operator/(const double& a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tPoint operator=(const Point& p1) {\n\t\treturn Point(p1.x,p1.y);\n\t}\n\n};\n\n//??´??§?????????????§???????\ntypedef Point Vector;\n\n//??´???????§???????\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n\tLine operator=(const Line& l) {\n\t\treturn Line(l.p1, l.p2);\n\t}\n};\n\n //??????????§???????\n typedef Line Segment;\n\n //???????§???????\n struct Circle {\n\t Point c;\n\t double r;\n\t Circle(){ }\n\t Circle(const Point& p,const double& r) : c(p),r(r) { }\n };\n\n//2??????????????¢????±?????????¢??°\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\n//????????¢??°\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\n//????????¢??°\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\n//3??????????????¢???????±?????????¢??°\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\n//??????????????´????????????????°???±?????§?¨?????±?????????¢??°\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble x = abs(base, Point(0.0, 0.0))*abs(base, Point(0.0, 0.0));\n\tdouble r = product(p - s.p1, base) / x;\n\treturn s.p1 + base*r;\n}\n\n//????????????????±??????¨??????????????????????§°????????§?¨?????±?????????¢??°\nPoint reflect(Segment s, Point p) {\n\treturn (project(s, p) - p)*2.0 + p;\n}\n\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\n//????????????????????£??????????????????????????¢??°\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??´?????¨???????????¢????±?????????¢??°\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\n//????????¨???????????¢????±?????????¢??°\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < -ESP) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < -ESP) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\n//2??????????????¢????±?????????¢??°\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\n//?????´???????\\???¢????±?????????¢??°\nPoint CrossPoint(Line s1,Line s2) {\n\tdouble d1=DistanceLP(s2, s1.p1);\n\tdouble d2 = DistanceLP(s2, s1.p2);\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//?????¨??´?????????????????????????????¢??°\nbool intersect(Circle c, Line l) {\n\treturn DistanceLP(l, c.c) < c.r;\n}\n\n//?????¨??´????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c, Line l) {\n\tVector prpr = project(l, c.c);\n\tVector hshs = (l.p2 - l.p1)/abs(l.p2 ,l.p1);\n\tdouble base = sqrt(c.r*c.r - abs(c.c, prpr)*abs(c.c, prpr));\n\treturn make_pair(prpr - hshs*base, prpr + hshs*base);\n}\n\n//????§???¨?\\?\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r)*a, sin(r)*a); }\n\n//?????¨????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c ,c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d)); //????????????\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//2??´??????????????¢???????±?????????¢??°???\n   //??´?????????\nbool isOrth(Vector a, Vector b) {\n\treturn abs(product(a, b)) < ESP;\n   }\nbool isOrth(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrth(a1 - a2, b1 - b2);\n}\nbool isOrth(Segment s1, Segment s2) {\n\treturn isOrth(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n    //????????????\nbool isPara(Vector a, Vector b) {\n\treturn abs(cross(a, b)) < ESP;\n}\nbool isPara(Point a1, Point a2, Point b1, Point b2) {\n\treturn isPara(a1 - a2, b1 - b2);\n}\nbool isPara(Segment s1, Segment s2) {\n\treturn isPara(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tPoint g[100];\n\tfor (int i = 0;i < n;i++) {\n\t\tcin >> g[i].x;\n\t\tcin >> g[i].y;\n\t}\n\tSegment s[100];\n\tfor (int j = 0;j < n;j++) {\n\t\tint k = (j + 1) % n;\n\t\ts[j].p1.x = g[j].x; s[j].p1.y = g[j].y;\n\t\ts[j].p2.x = g[k].x; s[j].p2.y = g[k].y;\n\t}\n\tPoint p;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tint flag = 0;\n\t\tcin >> p.x; cin >> p.y;\n\t\tSegment ps;\n\t\tps.p1.x = p.x; ps.p1.y = p.y;\n\t\tps.p2.x = 10001; ps.p2.y = p.y;\n\t\tfor (int j = 0;j < n;j++) {\n\t\t\tif (ccw(g[j], g[(j + 1) % n], p) == 0) {\n\t\t\t\tcout << 1 << endl;\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tint cnt = 0;\n\t\t\tps.p1.y += 0.1; ps.p2.y+= 0.1;\n\t\t\tfor (int j = 0;j < n;j++) {\n\t\t\t\tif (intersect(s[j], ps)) cnt++;\n\t\t\t}\n\t\t\t\n\t\t\tif (cnt % 2 == 1) cout << 2 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-5;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( max(-1.0,min(1.0,dot(b,c)/abs(b)/abs(c))) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.5 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// I haven't implement assertion in two getCrossPoints function.\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\n#include<iomanip>\nusing namespace std;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n\tpublic:\n\t\tdouble x, y;\n\n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n\n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p){\n\treturn p + (project(s, p) - p) * 2.0;\n}\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < -EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && \n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\ndouble getDistance(Point a, Point b){\n\treturn (a - b).abs();\n}\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\ndouble getDistanceSP(Segment s, Point p){\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l){\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p){return atan2(p.y, p.x);}\nVector polar(double a, double r){return Point(cos(r) * a, sin(r) * a);}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/*\n   IN 2\n   ON 1\n   OUT 0\n   */\nint contains(Polygon g, Point p){\n\tint n = g.size();\n\tbool x = false;\n\tfor(int i = 0; i < n; i++){\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nint main(void){\n\tint m, n;\n\tPolygon g;\n\tPoint p_polygon, p_points;\n\tcin >> m;\n\tfor(int i = 1; i <= m; i++){\n\t\tcin >> p_polygon.x >> p_polygon.y;\n\t\tg.push_back(p_polygon);\n\t}\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++){\n\t\tcin >> p_points.x >> p_points.y;\n\t\tcout << contains(g, p_points) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n  \nusing namespace std;\n\ntypedef long long ll;\n\nclass Point {\npublic:\n  ll x, y;\n  \n  Point () {}\n  Point ( ll x = 0, ll y = 0 ) : x(x), y(y) {}\n  \n  Point operator - ( const Point &p ) const { return Point(x - p.x, y - p.y); }\n};\n  \ntypedef Point Vector;\n  \ntypedef vector<Point> Polygon;\n  \nll dot( Vector a, Vector b ) { return a.x*b.x + a.y*b.y; }\nll cross( Vector a, Vector b ) { return a.x*b.y - a.y*b.x; }\n\n/*\n  contain: 2\n  on segment: 1\n  the other case: 0\n*/\nint\npointInPolygon(Polygon G, Point p) {\n  \n  int n = G.size();\n  bool x = false;\n  \n  for(int i=0; i<n; i++) {\n    Vector V1 = G[i] - p, V2 = G[(i+1)%n] - p;\n    \n    if( V1.y > V2.y ) swap(V1, V2);\n    if( V1.y <= 0 && 0 < V2.y && cross(V1, V2) > 0 ) x = !x;\n    if( llabs(cross(V1, V2)) == 0 && dot(V1, V2) <= 0 ) return 1;\n  }\n  return (x?2:0);\n}\n  \nint\nmain() {\n  int n, q;\n  ll x, y;\n    \n  Polygon G;\n  cin >> n;\n    \n  for(int i=0; i<n; i++) {\n    cin >> x >> y;\n    G.push_back(Point(x, y));\n  }\n    \n  cin >> q;\n  for(int i=0; i<q; i++) {\n    cin >> x >> y;\n    cout << pointInPolygon(G, Point(x, y)) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(x * a, y * a);}\n    Point operator / (double a) {return Point(x / a, y / a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x * x + y * y;}\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};typedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++)\n    {\n        Point a = g[i] - p, b = g[(i+1)%n] - p;\n        if (fabs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n        if (a.y > b.y)swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return (x ? 2 : 0);\n}\nint main(){\n    int g; cin >> g;\n    Polygon G;\n    for (int i = 0; i < g; i++)\n    {\n        int x, y; cin >> x >> y;\n        Point p = Point(x, y);\n        G.push_back(p);\n    }\n    int q; cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        int x, y; cin >> x >> y;\n        Point p = Point(x, y);\n        cout << contains(G, p) << endl;\n    }\n    \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\n#define ROUND_PRINT(N,val) cout << fixed;cout << setprecision(N) << val << endl\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\n\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) < eps) : ((x - e.x) < eps);\n  }\n  bool operator >(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) > eps) : ((x - e.x) > eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nstatic bool cmp_rad(const P &p1,const P &p2){\n    return atan2(p1.y,p1.x) > atan2(p2.y,p2.x);\n}\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\n\nint main(void) {\n  Plane pl;\n  int n,q,n2;\n  P a;\n  cin >> n;\n  vector<P> point(n);\n  REP(i,n) cin >> point[i].x >> point[i].y;\n  cin >> q;\n  REP(i,q) {\n    cin >> a.x >> a.y;\n    LL cnt = 0;\n    bool flg = false;\n    REP(i,n-1) {\n      if (pl.on_seq(P (10001.0,a.y),a,point[i])) cnt--;\n      if (pl.on_seq(point[i],point[i+1],a)) flg = true;\n      if (pl.have_intersection(P(10001.0,a.y),a,point[i],point[i+1])) cnt++;\n    }\n    if (pl.on_seq(P (10001.0,a.y),a,point[n-1])) cnt--;\n    if (pl.on_seq(point[0],point[n-1],a)) flg = true;\n    if (pl.have_intersection(P(10001.0,a.y),a,point[0],point[n-1])) cnt++;\n    \n    if (flg) cout << 1 << endl;\n    else if(cnt%2) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\n#define ROUND_PRINT(N,val) cout << fixed;cout << setprecision(N) << val << endl\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\n\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) < eps) : ((x - e.x) < eps);\n  }\n  bool operator >(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) > eps) : ((x - e.x) > eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nstatic bool cmp_rad(const P &p1,const P &p2){\n    return atan2(p1.y,p1.x) > atan2(p2.y,p2.x);\n}\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\n\nint main(void) {\n  Plane pl;\n  int n,q,n2;\n  P a;\n  cin >> n;\n  vector<P> point(n);\n  REP(i,n) cin >> point[i].x >> point[i].y;\n  cin >> q;\n  REP(i,q) {\n    cin >> a.x >> a.y;\n    LL cnt = 0;\n    bool flg = false;\n    REP(i,n-1) {\n      if (pl.on_seq(P (10001.0,a.y),a,point[i])) cnt--;\n      if (pl.on_seq(point[i],point[i+1],a)) flg = true;\n      if (pl.have_intersection(P(10001.0,a.y),a,point[i],point[i+1])) {\n        cnt++;\n        if ((point[i]-point[i+1]).is_parallel(P(10001.0,a.y)-a)) cnt++;\n      }\n    }\n    if (pl.on_seq(P (10001.0,a.y),a,point[n-1])) cnt--;\n    if (pl.on_seq(point[0],point[n-1],a)) flg = true;\n    if (pl.have_intersection(P(10001.0,a.y),a,point[0],point[n-1])) {\n      cnt++;\n      if ((point[0]-point[n-1]).is_parallel(P(10001.0,a.y)-a)) cnt++;\n    }\n    if (flg) cout << 1 << endl;\n    else if(cnt%2) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <ctime>\n#include <vector>\n#include <fstream>\n#include <list>\n#include <iomanip>\n#include <numeric>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define REP(i, lim) for(int i=0;i<lim;++i)\n#define REPP(i, lim) for(int i=1;i<=lim;++i)\n#define DEC(i, lim) for(int i=lim;i>=1;--i)\n#define FOR(i,l,r)  for(int i=l;i<r;++i)\n#define deBug cout<<\"===================================\"<<endl;\n#define clr(s) memset(s, 0, sizeof(s))\n#define lowclr(s) memset(s, -1, sizeof(s))\nconst int MAXN = 1000055;\nconst int inf = 0x3f3f3f3f;\nconst double pi = acos(-1.0);\nconst db eps = 1e-9;\n\ninline int sgn(db x) { return x<-eps ? -1 : x>eps; }\ninline db sqr(db x) { return x*x; }\n\n#define cross(p1, p2, p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1, p2, p3) sgn(cross(p1, p2, p3))\n\nstruct P {\n    // information\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    db x, y;\n    // operation\n    P operator + (P p)   const{ return P(x+p.x, y+p.y); }\n    P operator - (P p)   const{ return P(x-p.x, y-p.y); }\n    P operator * (db d)  const{ return P(x*d, y*d); }\n    P operator / (db d)  const{ return P(x/d, y/d); }\n    db dot(P p) { return x * p.x + y * p.y; } // 点积\n    db det(P p) { return x * p.y - y * p.x; } // 叉积\n    // other\n    void input() { scanf(\"%lf%lf\", &x, &y); }\n    void print() { printf(\"(%lf, %lf)\\n\", x, y); }\n    db disTo(P p) { return sqrt(sqr(x-p.x) + sqr(y-p.y)); }\n    db abs() { return sqrt(x*x + y*y); }\n    db abs2(){ return x*x + y*y; }\n    db getw(){ return atan2(y,x); }\n    int getP() const{ return sgn(y)==1||(sgn(y)==0&&sgn(x)>=0); }\n};\nint cmpAngle (P a, P b){\n    if(a.getP()!=b.getP())  return a.getP()<b.getP();\n    else                    return sgn(a.det(b)) > 0;\n}\nbool chkLL(P p1, P p2, P q1, P q2) {\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return sgn(a1+a2) != 0;\n}\nP getLL(P p1, P p2, P q1, P q2) {\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return (p1 * a2 + p2 * a1) / (a1 + a2);\n}\nbool intersect(db l1, db r1, db l2, db r2) {\n    if(l1>r1) swap(l1, r1); if(l2>r2) swap(l2, r2);\n    return !( sgn(r1-l2) == -1 || sgn(r2-l1) == -1 );\n}\nbool chkSS(P p1, P p2, P q1, P q2) {\n    return intersect(p1.x, p2.x, q1.x, q2.x) && intersect(p1.y, p2.y, q1.y, q2.y) &&\n    crossOp(p1, p2, q1) * crossOp(p1, p2, q2) <= 0 &&\n    crossOp(q1, q2, p1) * crossOp(q1, q2, p2) <=0;\n}\nbool chkSS_strict(P p1, P p2, P q1, P q2) {\n    return crossOp(p1, p2, q1) * crossOp(p1, p2, q2) < 0 &&\n           crossOp(q1, q2, p1) * crossOp(q1, q2, p2) < 0;\n}\nbool inMiddle(db a, db m, db b) { return sgn(a-m)==0 || sgn(b-m)==0 || (a<m != b<m); }\nbool inMiddle(P a, P m, P b) { return inMiddle(a.x, m.x, b.x) && inMiddle(a.y, m.y, b.y); }\nbool onSeg(P p1, P p2, P q) { return crossOp(p1, p2, q) == 0 && inMiddle(p1, q, p2); }\nbool onSeg_strict(P p1, P p2, P q) {\n    return crossOp(p1, p2, q) == 0 && sgn((q-p1).dot(p1-p2)) * sgn((q-p2).dot(p1-p2)) < 0;\n}\nP getProj(P a, P b, P p) { return a + (b-a) * ( (b-a).dot(p-a) / sqr(a.disTo(b)));}\nP getReflect(P a, P b, P p) { return getProj(a, b, p) * 2 - p; }\ndb nearest(P p1, P p2, P q) {\n    P h = getProj(p1, p2, q);\n    if(inMiddle(p1, h, p2)) return q.disTo(h);\n    return min(p1.disTo(q), p2.disTo(q));\n}\ndb disSS(P p1, P p2, P q1, P q2) {\n    if(chkSS(p1, p2, q1, q2)) return 0;\n    return min(min(nearest(p1,p2,q1), nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)));\n}\n\nvector<P> convexHull (vector<P> ps) {\n    int n = ps.size(); if(n<=1) return ps;\n    sort(ps.begin(), ps.end(), cmpAngle);\n    vector<P> qs(n*2); int k = 0;\n    for(int i=0;i<n;qs[k++]=ps[i++])\n        while(k>1 && crossOp(qs[k-2], qs[k-1], ps[i])<=0) --k;\n    for(int i=n-2,t=k;i>=0;qs[k++]=ps[i--])\n        while(k>t && crossOp(qs[k-2], qs[k-1], ps[i])<=0) --k;\n    qs.resize(k-1);\n    return qs;\n}\n\nvector<P> convexHull_noStrict (vector<P> ps) {\n    int n = ps.size(); if(n<=1) return ps;\n    sort(ps.begin(), ps.end(), cmpAngle);\n    vector<P> qs(n*2); int k = 0;\n    for(int i=0;i<n;qs[k++]=ps[i++])\n        while(k>1 && crossOp(qs[k-2], qs[k-1], ps[i])<0) --k;\n    for(int i=n-2,t=k;i>=0;qs[k++]=ps[i--])\n        while(k>t && crossOp(qs[k-2], qs[k-1], ps[i])<0) --k;\n    qs.resize(k-1);\n    return qs;\n}\nint chkConvex(vector<P> ps){\n    int n = ps.size();\n    ps.push_back(ps[0]); ps.push_back(ps[1]);\n    for(int i=0;i<n;++i) if(sgn((ps[i+1]-ps[i]).det(ps[i+2]-ps[i]))==-1) return 0;\n    return 1;\n}\nint contain(vector<P>A,P q){ // 2 内部 1 边界 0 外部\n    int pd=0; A.push_back(A[0]);\n    for (int i=1;i<A.size();i++){\n        P u=A[i-1],v=A[i];\n        if (onSeg(u,v,q)) return 1; if (sgn(u.y-v.y)>0) swap(u,v);\n        if (sgn(u.y-q.y)>=0||sgn(v.y-q.y)<0) continue;\n        if (sgn((u-v).det(q-v))<0) pd^=1;\n    }\n    return pd<<1;\n}\n\nint main()\n{\n//    freopen(\"in.txt\", \"r\", stdin);\n//    freopen(\"out.txt\", \"w\", stdout);\n//    std::ios::sync_with_stdio(false); cin.tie(0);\n\n    vector<P> poly;\n    int n;\n    scanf(\"%d\", &n);\n    REP(i, n) {\n        P tmp; tmp.input();\n        poly.push_back(tmp);\n    }\n\n    int q;\n    scanf(\"%d\", &q);\n    REP(i, q) {\n        P tmp; tmp.input();\n        cout<<contain(poly, tmp)<<endl;\n    }\n\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) verify AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(sdot(p,pol[i],pol[(i+1)%n])<0) return 1;\n\t\tbool f=sgn(imag(p-pol[i]))>=0;\n\t\tbool s=sgn(imag(p-pol[(i+1)%n]))<0;\n\t\tint sign=sgn(imag(pol[(i+1)%n]-pol[i]));\n\t\tbool can=sgn(sign*det(pol[i],pol[(i+1)%n],p))>0; // (a*d-b*c)*b\n\t\tif(can&&f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n/*\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a)*sdet(a,b,p))==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n*/\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*<<head>> {{{*/\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef double db;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define dd(x) cout << #x << \" = \" << x << \", \"\n#define de(x) cout << #x << \" = \" << x << endl\n#define rep(i,a,b) for(int i=(a);i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;\n//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;\nconst int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1\nconst ll LINF = 0x3f3f3f3f3f3f3f3f;\n/*}}}*/                         // zr, zm\nconst int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004\nconst int N = (int)-1;\n\n// ------- 变量 ------- //\n\n/* 注意\n  1. 点、向量\n    1. 如果角度出现 -pi ，可以加上 2pi 修正为 pi\n    2. atan2(y, x) 的参数是浮点数时，可能出现 -pi ，如 atan2(-0.0, -1.0)\n  2. 线段、直线\n    1. 线段严格相交定义为：每条线段的两个端点落在另一条线段两边，形象来说，就是可以在图形里看到四个端点和一个交点\n*/\n\ntypedef db T;\nconst db eps = 1e-7, pi = acosl(-1.);\nint sgn(T x) { return (x > eps) - (x < -eps); }\nbool inMid(T l, T x, T r) { return sgn(l - x) * sgn(r - x) <= 0; }  // 数 x 在区间 [l, r] 内（包括边界）\n\n// 点、向量\nstruct P {\n    T x, y; P () {} P(T x, T y) : x(x), y(y) {}\n    P operator + (const P &b) const { return P(x + b.x, y + b.y); }  // 向量加\n    P operator - (const P &b) const { return P(x - b.x, y - b.y); }  // 向量减\n    T operator * (const P &b) const { return x * b.x + y * b.y; }    // 向量点积\n    T operator / (const P &b) const { return x * b.y - y * b.x; }    // 向量叉积\n    P operator * (const T &k) const { return P(x * k, y * k); }      // 向量数乘\n    P operator / (const T &k) const { return P(x / k, y / k); }      // 向量数除\n    bool operator < (const P &b) const { return sgn(x - b.x) ? x < b.x : y < b.y; }  // 左小右大，下小上大\n    bool operator == (const P &b) const { return !sgn(x - b.x) && !sgn(y - b.y); }   // 向量相等\n    P rot(T t) { return P(x * cos(t) - y * sin(t), x * sin(t) + y * cos(t)); }  // 向量逆时针旋转 t 弧度\n    P rot90() { return P(-y, x); }           // 向量逆时针旋转 90 度\n    db arg() const { return atan2(y, x); }   // 方位角 (-pi, pi]\n    T abs() { return sqrt(x * x + y * y); }  // 向量模长\n    T abs2() { return x * x + y * y; }       // 向量模长的平方\n    P unit() { return (*this) / abs(); }     // 单位向量\n    void scan() { db tx, ty; scanf(\"%lf%lf\", &tx, &ty); x = tx; y = ty; }  // 输入\n    void print() { printf(\"%.11lf %.11lf\\n\", x, y); }                      // 输出\n    P toR() { return (sgn(x) == -1 || !sgn(x) && sgn(y) == -1) ? (*this)*(-1) : (*this); }  // 若向量在 2 3 象限，则取相反向量\n    bool isUp() const { return sgn(y) == 1 || !sgn(y) && sgn(x) == -1; }                    // 向量是否在 1 2 象限\n};\nT dis(P a, P b) { return (b - a).abs(); }   // 点 a 到点 b 的距离\nP symmetry(P p, P a) { return a + a - p; }  // 点 p 关于点 a 的中心对称点\nT cross(P o, P a, P b) { return (a - o) / (b - o); }         // 向量 oa 与 ob 的叉积\nint crossSgn(P o, P a, P b) { return sgn(cross(o, a, b)); }  // 向量 oa 与 ob 的叉积符号\ndb rad(P a, P b) { return atan2(a / b, a * b); }             // 向量 a 与 b 的夹角（弧度制）\nbool order(const P &a, const P &b) { return a.isUp() < b.isUp() || a.isUp() == b.isUp() && sgn(a/b) > 0; }  // 极角排序\n\n// 线段、直线\nstruct L { P s, t; L () {} L(P s, P t) : s(s), t(t) {} };\nbool onPS(P p, L a) { return sgn((a.t-a.s)/(p-a.s))==0 && sgn((p-a.s)*(p-a.t))<=0; }   // 点 p 是否在线段 a 上\nbool inRec(P p, L a) { return inMid(a.s.x, p.x, a.t.x) && inMid(a.s.y, p.y, a.t.y); }  // 点 p 在以直线 a 为对角线的矩形内\nP proj(P p, L a) { return (a.t-a.s) * ( (p-a.s) * (a.t-a.s) / (a.t-a.s).abs2() ) + a.s; }  // 点 p 关于直线 a 的投影点\nP reflect(P p, L a) { return proj(p, a) * 2 - p; }                                         // 点 p 关于直线 a 的对称点\nbool xSSr(const L &a, const L &b) {  // 线段 a 和线段 b 严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) < 0 && sgn(c3) * sgn(c4) < 0;\n}\nbool xSS(L a, L b) {                 // 线段 a 和线段 b 不严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n           sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n           sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n           sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n           sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool xSL(L a, L b) {  // 线段 a 与直线 b 相交 ( 不严格 : <= ; 严格 : < )\n    return sgn( (b.t - b.s) / (a.s - b.s) ) * sgn( (b.t - b.s) / (a.t - b.s) ) <= 0;\n}\nP xLL(L a, L b) {  // 直线 a 和直线 b 的交点\n    T s1 = (b.t - b.s) / (a.s - b.s), s2 = -( (b.t - b.s) / (a.t - b.s) );\n    return (a.s * s2 + a.t * s1) / (s1 + s2);\n}\ndb disPL(P p, L a) { return fabs( (a.t-a.s) / (p-a.s) ) / (a.t-a.s).abs(); }  // 点 p 到直线 a 的距离\ndb disPS(P p, L a) {                                                          // 点 p 到线段 a 的距离\n    return sgn( (a.t-a.s) * (p-a.s) ) * sgn( (a.s-a.t) * (p-a.t) ) == 1\n           ? disPL(p, a) : min( (p-a.s).abs(), (p-a.t).abs() );\n}\ndb disSS(L a, L b){                                                           // 线段 a 到线段 b 的距离\n    if (xSS(a,b)) return 0;\n    return min( min( disPS(a.s,b), disPS(a.t,b) ), min( disPS(b.s,a), disPS(b.t,a) ) );\n}\ndb disLL(L a, L b) { return (a.t-a.s) / (b.t-b.s) ? 0 : disPL(a.s, b); }      // 直线 a 到直线 b 的距离\n\n// 多边形、凸包\ntypedef vector<P> polygon;\npolygon Convex(polygon A) {  // 求凸包，逆时针排序（ 内角 <180 : (<=) ; 内角 <=180 : (<) ）\n    int n = sz(A); if (n <= 1) return A;\n    sort(all(A));\n    polygon B;\n    for (int i = 0; i < n; B.pb(A[i++]))\n        while (sz(B) > 1 && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 更改这里的 <\n    for (int i = n - 2, t = sz(B); i >= 0; B.pb(A[i--]))\n        while (sz(B) > t && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 同上\n    B.pop_back(); return B;\n}\nT area(polygon A) {  // 多边形 A 的面积，整型可以返回面积的两倍，保持精度\n    T res = 0;\n    rep(i, 0, sz(A)) res += A[i] / A[ (i+1) % sz(A) ];\n    return fabs(res) / 2;\n}\nbool isConvex(polygon A) {  // 多边形 A 是否是凸包，要求 A 的点集按逆时针排序\n    rep(i, 0, 2) A.pb(A[i]);\n    rep(i, 0, sz(A)-2) if ( sgn( (A[i+1]-A[i]) / (A[i+2]-A[i]) ) < 0 ) return 0;\n    return 1;\n}\nint inPpo(P p, polygon A) {  // 点和多边形关系 ( 2 : in , 1 : on , 0 : out )\n    int res = 0; A.pb(A[0]);\n    rep(i, 1, sz(A)) {\n        P u = A[i-1], v = A[i];\n        if (onPS(p, L(u, v))) return 1;\n        if (sgn(u.y - v.y) > 0) swap(u, v);\n        if (sgn(u.y - p.y) >= 0 || sgn(v.y - p.y) < 0) continue;\n        if (crossSgn(v, u, p) < 0) res ^= 1;\n    }\n    return res << 1;\n}\n\nstruct C {\n    P o; db r; C () {} C (P o, db r) : o(o), r(r) {}\n};\n\nC getC(P a,P b,P c){  // 三点确定一个圆 （ 三角形外接圆 ）\n    db a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1 * a1 + b1 * b1) / 2;\n    db a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2 * a2 + b2 * b2) / 2;\n    db d = a1 * b2 - a2 * b1;\n    P o = P(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    return C(o, dis(a, o));\n}\n\nint n;\npolygon A;\n\n// ------- 函数 ------- //\n\nvoid Init() {\n    A.clear();\n\n    rep(i, 0, n) {\n        P p; p.scan();\n        A.pb(p);\n    }\n}\n\nint Solve() {\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        P p; p.scan();\n        printf(\"%d\\n\", inPpo(p, A));\n    }\n    return 0;\n}\n\n// ------- main ------- //\n\nint main ()\n{\n    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n\n    //Pre();\n    //int t; scanf(\"%d\", &t); while (t--) {\n    while (~scanf(\"%d\", &n)) {\n    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符\n        //if (n == 0) break;\n        //static int kase = 0; printf(\"Case %d: \", ++kase);\n        Init();\n        Solve();\n        //if (t) puts(\"\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint x[300];\nint y[300];\nint n, q;\n\nbool pointOnLine(int i, int j, int xx, int yy) {\n    if (!((min(x[i], x[j]) <= xx && xx <= max(x[i], x[j])) &&\n          (min(y[i], y[j]) <= yy && yy <= max(y[i], y[j]))))\n        return false;\n    return (x[j] - x[i]) * (yy - y[i]) == (y[j] - y[i]) * (xx - x[i]);\n}\n\nbool onLine(int xx, int yy) {\n    for (int i = 0; i < n; i++)\n        if (pointOnLine(i, (i + 1) % n, xx, yy))\n            return true;\n    return false;\n}\n\nbool intersects(int i, int j, int xx, int yy) {\n    if (!(min(x[i], x[j]) <= xx && xx < max(x[i], x[j])))\n        return false;\n    int yint = ((float) (xx - x[i]) * (y[j] - y[i])) / ((float)(x[j] - x[i]));\n    return yint > yy;\n}\n\nbool inPoly(int xx, int yy) {\n    int c = 0;\n    for (int i = 0; i < n; i++)\n        c ^= intersects(i, (i+1) % n, xx, yy);\n    return c;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d\", x+i, y+i);\n    }\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        int xx, yy;\n        scanf(\"%d %d\", &xx, &yy);\n        if (onLine(xx, yy))\n            printf(\"1\\n\");\n        else if (inPoly(xx, yy))\n            printf(\"2\\n\");\n        else\n            printf(\"0\\n\");\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nstruct pt {\n\tint x, y;\n\tpt(){};\n\tpt(int _x, int _y) : x(_x), y(_y){};\n\tbool operator==(pt p) const {\n\t\treturn(x == p.x && y == p.y);\n\t};\n};\n\npt points[100];\n\ninline pt operator-(pt a, pt b) {\n\treturn pt(a.x-b.x, a.y-b.y);\n}\n\ninline double cross(pt a, pt b) {\n\treturn(a.x*b.y - a.y*b.x);\n}\n\ninline double ccw(pt a, pt b, pt c) {\n\treturn cross(b-a, c-a);\n\t// if A to B via c is left: > 0\n\t// if A to B via c is straight: < 1\n\t// if A to B via c is right: < 0\n}\n\n\nvoid find(pt p, int numPoints) {\n\tdouble r;\n\tpt a, b;\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tif (p == points[i]) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\t\tr = ccw(points[i], p, points[(i+1)%numPoints]);\n\n\t\tif (r==0) {\n\t\t\t\n\t\t\tif (p.x >= std::min(points[i].x, points[(i+1)%numPoints].x) &&\n\t\t\t\tp.y >= std::min(points[i].y, points[(i+1)%numPoints].y) &&\n\t\t\t\tp.x <= std::max(points[i].x, points[(i+1)%numPoints].x) &&\n\t\t\t\tp.y <= std::max(points[i].y, points[(i+1)%numPoints].y)) {\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprintf(\"0\\n\");\n\n\t\t\treturn;\n\t\t} else if (r > 0) {\n\t\t\tprintf(\"0\\n\");\n\t\t\treturn;\n\t\t} \n\t}\n\tprintf(\"2\\n\");\n}\n\nint main() {\n\tint numPoints, numTests, val, a, b;\n\tscanf(\"%d\", &numPoints);\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tpoints[i] = pt(a, b);\n\t}\n\n\tscanf(\"%d\", &numTests);\n\tfor (int i = 0; i < numTests; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tfind(pt(a,b), numPoints);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int INF = INT_MAX / 3;\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\n\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {\n\t}\n\tP operator +(P p) {\n\t\treturn P(add(x, p.x), add(y, p.y));\n\t}\n\tP operator -(P p) {\n\t\treturn P(add(x, -p.x), add(y, -p.y));\n\t}\n\tP operator *(double d) {\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot(P p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det(P p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print() {\n\t\tprintf(\"%.10lf %.10lf \\n\", x, y);\n\t\treturn;\n\t}\n};\n\nint onCheck(P &p, P &q, P &r){\n\tbool a = ((q-p).det(r-p)==0);\n\tbool b = ((p-q).dot(r-q) >=0 );\n\tbool c = ((p-r).dot(q-r)  >= 0 );\n\tif(a&&b&&c){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint intersectionCheck(P &p0, P &p1, P &p2, P &p3){\n\tP q0 = p1-p0;\n\tP q1 = p3-p2;\n\tif(q0.det(q1)==0){\n\t\tbool a =onCheck(p0,p2, p3) ;\n\t\tbool b =onCheck(p1,p2, p3) ;\n\t\tbool c = onCheck(p2,p0, p1) ;\n\t\tbool d = onCheck(p3,p0, p1);\n\t\tif (!a && !b && !c && !d){\n\t\t\treturn 0;\n\t\t}else{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tP r = p0 + (p1-p0)*(q1.det(p2-p0)/q1.det(q0));\n\tbool e = onCheck(r, p0, p1);\n\tbool f = onCheck(r, p2, p3);\n\tif(e && f){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint PolygonPointContainment(vector<P> &polygon, P p){\n\tP INFpoint;\n\tINFpoint.x=100000.0;\n\tINFpoint.y=100000.0*sqrt(2); \t//????????????\n\n\tint S=0; \t//p??????????????´??????????§???¢??¨??????????????°\n\tint g = polygon.size();\n\n\tREP(i, g){\n\t\tP q= polygon[i];\n\t\tP r = polygon[i+1];\n\t\tif(onCheck(p,q,r)==1){\n\t\t\treturn 1; \t//p?????????qr??????????????´???\n\t\t}\n\t\tif(intersectionCheck(p, INFpoint, q,r)==1){\n\t\t\tS++;\n\t\t}\n\t}\n\tP q= polygon[g-1];\n\tP r = polygon[0];\n\tif(onCheck(p,q,r)==1){\n\t\treturn 1; \t//p?????????qr??????????????´???\n\t}\n\tif(intersectionCheck(p, INFpoint, q,r)==1){\n\t\tS++;\n\t}\n\n\tif(S%2==0){\n\t\treturn 0;\n\t}else{\n\t\treturn 2;\n\t}\n}\n\nint main(){\n\tint g, q;\n\tcin >> g ;\n\tvector<P> polygon;\n\tREP(i,g){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tpolygon.push_back(p);\n\t}\n\n\tcin >> q;\n\tREP(i, q){\n\t\tP p;\n\t\tcin >> p.x >> p.y ;\n\t\tcout << PolygonPointContainment(polygon, p) <<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <vector>\n#include <cfloat>\n#include <string>\n#include <cmath>\n#include <set>\n#include <cstdlib>\n#include <map>\n#include <ctime>\n#include <iomanip>\n#include <functional>\n#include <deque>\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <cstdio>\n#include <stack>\n#include <climits>\n#include <sys/time.h>\n#include <cctype>\n\nusing namespace std;\n\ntypedef long long ll;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double norm() { return x*x+y*y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\ntypedef vector <Vector> Polygon;\n\nclass Segment {\n public:\n  Point p1, p2;\n\n  Segment(Point p1 = Point(), Point p2 = Point()): p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\n// ?????????|a||b|cos\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y-a.y*b.x;\n}\n// ?????????|a||b|sin\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x+a.y*b.y;\n}\n\n// 1:???????¨??????? -1:????¨??????? 2:p2-p0-p1 -2:p0-p1-p2 0:p2???p0-p1???\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if (cross(a, b) > EPS) return 1;\n  if (cross(a, b) < -EPS) return -1;\n  if (dot(a, b) < -EPS) return 2;\n  if (a.norm() < b.norm()) return -2;\n\n  return 0;\n}\n\n// ??????(??¢???????????\\????????¢?????´??????????????????):????????????????????????????????????????°????????§???¢?????????\nPolygon andrewScan(Polygon s) {\n  Polygon u, l;\n  if (s.size() < 3) return s;\n  sort(s.begin(), s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n\n  // ??????????????¨?????????\n  for (int i = 2; i < s.size(); i++) {\n    for (int n = u.size(); n >= 2 && ccw(u[n-2], u[n-1], s[i]) != -1; n--) {\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  // ??????????????¨?????????\n  for (int i = s.size()-3; i >= 0; i--) {\n    for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; n--) {\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n\n  // ????¨????????????????????????????????????????????????????\n  reverse(l.begin(), l.end());\n  for (int i = u.size()-2; i >= 1; i--) l.push_back(u[i]);\n\n  return l;\n}\n\n// ????§???¢???????????????????????????3?????\\??????????????\\?????§????????????????????¨????????¶???\nbool isConvex(Polygon s) {\n  int n = s.size();\n  int a;\n  for (int i = 0; i < n; i++) {\n    a = ccw(s[i], s[(i+1)%n], s[(i+2)%n]);\n    if (abs(a) == 1) break;\n  }\n  for (int i = 0; i < n; i++) {\n    int b = ccw(s[i], s[(i+1)%n], s[(i+2)%n]);\n    if (a*b < 0 && abs(b) == 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// ????§???¢g??¨????????¢??????2:?????´???1:?????????0:?????´\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; i++) {\n    Point a = g[i]-p, b = g[(i+1)%n]-p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nint main() {\n  Polygon poly;\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    int x, y;\n    cin >> x >> y;\n    poly.push_back(Vector(x, y));\n  }\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Vector p;\n    cin >> p.x >> p.y;\n    cout << contains(poly, p) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x * a, y * a); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\nclass Circle {\n    public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x; \n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if ( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if ( cross(a, b) < -EPS ) return CLOCKWISE;\n    if ( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = fabs(cross(s1.p1 - s2.p1, base));\n    double d2 = fabs(cross(s1.p2 - s2.p1, base));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt((c.r * c.r) - (pr - c.c).norm());\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    double d = (c2.c - c1.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i != n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( fabs(cross(a, b)) < EPS && dot(a, b) < EPS ) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nint main()\n{\n    int n, q;\n    double x, y;\n    Polygon g;\n    cin >> n;\n    for (int i = 0; i != n; ++i)\n    {\n        cin >> x >> y;\n        g.push_back(Point(x, y));\n    }\n    cin >> q;\n    for (int i = 0; i != q; ++i)\n    {\n        cin >> x >> y;\n        cout << contains(g, Point(x, y)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <set>\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <string>\n#include <utility>\n#include <map>\n#include <queue>\n#include <list>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <tuple>\n\nusing namespace std;\nint dx[4] = { -1,0,1,0 };\nint dy[4] = { 0,1,0,-1 };\nconst int INF = 100000000;\nconst long long LINF = 1000000000000000000;\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-6;\nusing pii = std::pair<int, int>;\nusing ll = long long;\nusing pLL = std::pair<ll, ll>;\n#define SORT(v) std::sort(v.begin(), v.end())\n#define RSORT(v) std::sort(v.rbegin(), v.rend())\nusing Point = complex<double>; //点\nusing Poly = vector<Point>;\n#define X real() //実部\n#define Y imag() //虚部\ndouble dot(Point a, Point b) { //内積\n    return (a.X * b.X + a.Y * b.Y);\n}\nusing Line = pair<Point, Point>; //直線\nPoint Projection(Line s, Point p) { //点から直線への射影\n    Point vase = s.second - s.first;\n    p -= s.first;\n    return s.first + dot(p, vase) / norm(vase) * vase;\n}\nPoint Reflection(Line s, Point p) { //直線に対して線対称な点\n    return p + (Projection(s, p) - p) * 2.0;\n}\ndouble cross(Point a, Point b) { //外積\n    return a.X * b.Y - a.Y * b.X;\n}\nint ccw(Point a, Point b, Point c) { //直線に対する点の位置\n    if (cross(b - a, c - a) > EPS)return 1;\n    if (cross(b - a, c - a) < -EPS)return -1;\n    if (dot(b - a, c - a) < -EPS)return 2;\n    if (abs(b - a) + EPS < abs(c - a))return -2;\n    return 0;\n}\nbool isOrthogonal(Line a, Line b) { //直行判定\n    return dot(a.second - a.first, b.second - b.first) ? 0 : 1;\n}\nbool isParallel(Line a, Line b) { //平行判定\n    return cross(a.second - a.first, b.second - b.first) ? 0 : 1;\n}\nbool isCross(Line a, Line b) { //交差判定\n    if (ccw(a.first, a.second, b.first) * ccw(a.first, a.second, b.second)<=0 and\n        ccw(b.first, b.second, a.first) * ccw(b.first, b.second, a.second)<=0) {\n        return true;\n    }\n    return false;\n}\nPoint CrossPoint(Line a, Line b) { //直線の交点\n    double x, d;\n    Point p1, p2, p3, p4;\n    p1 = a.first;\n    p2 = a.second;\n    p3 = b.first;\n    p4 = b.second;\n    x = (p4.Y - p3.Y) * (p4.X - p1.X) - (p4.X - p3.X) * (p4.Y - p1.Y);\n    d = (p4.Y - p3.Y) * (p2.X - p1.X) - (p4.X - p3.X) * (p2.Y - p1.Y);\n    return p1 + x / d * (p2 - p1);\n}\ndouble PointLineDis(Line l, Point p) {\n    Point a = l.first, b = l.second, c = p;\n    return abs(cross(c - a, b - a)) / abs(b - a);\n}\ndouble PointSegDis(Line a,Point p) {\n    Point p1 = a.first, p2 = a.second;\n    if (dot(p2 - p1, p - p1) < EPS)return abs(p - p1);\n    if (dot(p1 - p2, p - p2) < EPS)return abs(p - p2);\n    return PointLineDis(a, p);\n}\ndouble SegSegDis(Line a, Line b) {\n    double res = PointSegDis(a, b.first);\n    cout << res << endl;\n    res = min(res, PointSegDis(a, b.second));\n    cout << res << endl;\n    res = min(res, PointSegDis(b, a.first));\n    cout << res << endl;\n    res = min(res, PointSegDis(b, a.second));\n    cout << res << endl;\n    return res;\n}\ndouble PolyArea(const Poly &p) {\n    if (p.size() < 3)return 0;\n    double res = cross(p[p.size() - 1], p[0]);\n    for (size_t i = 0; i < p.size() - 1; ++i) {\n        res += cross(p[i], p[i + 1]);\n    }\n    return res / 2.0;\n}\nbool isConvex(const Poly &p) {\n    for (size_t i = 0; i < p.size(); ++i) {\n        if (ccw(p[i], p[(i + 1) % p.size()], p[(i + 2) % p.size()]) == -1)return false;\n    }\n    return true;\n}\nint inPoly(Poly &p,Point a){\n    \n    int count = 0;\n    Point cp;\n\n    int n = (int)p.size();\n    p.push_back(p[0]);\n    Point b = Point(a.X + 1, a.Y);\n    for (int i = 0; i < n; ++i) {\n        Point s = p[i] - a, t = p[i + 1] - a;\n        if (ccw(s,t, Point(0,0))==0)return 1;\n        if (s.Y > t.Y + EPS)swap(s, t);\n        if ((s.Y*t.Y<0||(s.Y * t.Y<EPS&&t.Y>EPS))&&cross(s,t)<EPS)count++;\n    }\n    if (count % 2)return 2;\n    else return 0;\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    Poly poly;\n    for (int i = 0; i < n; ++i) {\n        double x1, y1;\n        cin >> x1 >> y1;\n        Point p = Point(x1, y1);\n        poly.push_back(p);\n    }\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x1, y1;\n        cin >> x1 >> y1;\n        Point p1 = Point(x1, y1);\n        cout << inPoly(poly, p1) << endl;\n    }\n    return 0;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = a.X;\n\tfor (PT p : po)\n\t\tmx = max(mx, p.X);\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// ConsoleApplication.cpp : コンソール アプリケーションのエントリ ポイントを定義します。\n//\n\n#include \"stdio.h\"\n#include <cstdlib>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <functional>\n#include <string>\n#include <vector>\n#include <array>\n\nusing namespace std;\nusing NUM = double;\n\nstatic const NUM  EPS = 1e-10;\n\ntemplate<typename T>\nstruct Point {\n\tT x, y;\n\tPoint<T> operator+(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x + rhs.x;\n\t\tp.y = this->y + rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator-(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x - rhs.x;\n\t\tp.y = this->y - rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator*(const T rhs) const {\n\t\tPoint<T> p;\n\t\tp.x = this->x * rhs;\n\t\tp.y = this->y * rhs;\n\t\treturn p;\n\t}\n\tPoint<T> operator/(const T rhs) const {\n\t\tPoint<T> p;\n\t\tp.x = this->x / rhs;\n\t\tp.y = this->y / rhs;\n\t\treturn p;\n\t}\n\tPoint<T> operator-() const {\n\t\tPoint<T> p;\n\t\tp.x = this->x * -1.0;\n\t\tp.y = this->y * -1.0;\n\t\treturn p;\n\t}\n\tstatic bool compByCrd(const Point<T>& p1, const Point<T>& p2) {\n\t\tif (abs(p1.x - p2.x) < EPS) return p1.y < p2.y;\n\t\treturn p1.x < p2.x;\n\t}\n\t//Point<T>& operator+=(const rhs) {\n\t//\tx += rhs;\n\t//\ty += rhs;\n\t//\treturn *this;\n\t//}\n\t//Point<T>& operator-=(const rhs) {\n\t//\tconst_cast<Point<T>>(*this) += -rhs;\n\t//\treturn *this;\n\t//\t/*x -= rhs;\n\t//\ty -= rhs;\n\t//\treturn *this;*/\n\t//}\n};\n\ntemplate <typename T>\nusing Vector = Point<T>;\n\ntemplate<typename T>\nPoint<T> operator*(const T val, const Point<T>& p)\n{\n\treturn p*val;\n}\n\ntemplate<typename T>\nstruct Segment {\n\tPoint<T> p1, p2;\n};\n\ntemplate<typename T>\nstruct Circle {\n\tPoint<T> center;\n\tT radius;\n};\n\ntemplate<typename T>\nbool isZero(const T val)\n{\n\treturn fabs(val) < 1e-10;\n}\n\ntemplate<typename T>\nT dot(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * x1 + y0 * y1;\n}\n\ntemplate<typename T>\nT cross(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * y1 - y0 * x1;\n}\n\ntemplate<typename T>\nT norm(const Point<T>& p)\n{\n\tdouble x = p.x;\n\tdouble y = p.y;\n\treturn x*x + y*y;\n}\n\ntemplate<typename T>\nT absolute(const Point<T>& p)\n{\n\treturn sqrt(norm(p));\n}\n\ntemplate<typename T>\nPoint<T> unit(const Point<T>& p)\n{\n\treturn p / absolute(p);\n}\n\ntemplate<typename T>\nvoid readPoint(Point<T>& p)\n{\n\tcin >> p.x;\n\tcin >> p.y;\n}\n\ntemplate<typename T>\nvoid readSegment(Segment<T>& s)\n{\n\tcin >> s.p1.x;\n\tcin >> s.p1.y;\n\tcin >> s.p2.x;\n\tcin >> s.p2.y;\n}\n\ntemplate<typename T>\nvoid readCircle(Circle<T>& c)\n{\n\tcin >> c.center.x;\n\tcin >> c.center.y;\n\tcin >> c.radius;\n}\n\ntemplate<typename T>\nvoid outputComponentesOfPoint(const Point<T>& p)\n{\n\tcout << fixed;\n\tcout << setprecision(8) << p.x;\n\tcout << \" \";\n\tcout << setprecision(8) << p.y;\n\tcout << endl;\n}\n\ntemplate<typename T>\nT getDistanceFromPointToLine(const Point<T>& p, const Segment<T>& s) {\n\tconst Point<T> a = p - s.p1;\n\tconst Point<T> b = s.p2 - s.p1;\n\tconst T outer = cross(a, b);\n\treturn abs( outer / absolute(b) );\n}\n\ntemplate<typename T>\nPoint<T> getIntersectionPointOfLineSegments(const Segment<T>& s1, const Segment<T>& s2)\n{\n\tconst T d1 = getDistanceFromPointToLine(s1.p1, s2);\n\tconst T d2 = getDistanceFromPointToLine(s1.p2, s2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\n\ntemplate<typename T>\nT distanceOfPoints(const Point<T>& p1, const Point<T>& p2)\n{\n\treturn absolute(p2 - p1);\n}\n\n\n//template<typename T>\n//T getDistanceFromPointToSegment(const Point<T>& p, const Segment<T>& s) {\n//\tconst T zero = static_cast<T>(0);\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst Point<T> c = p - s.p2;\n//\tconst T innerAB = dot(a, b);\n//\tconst T innerc_b = dot(c, -b);\n//\n//\tif (innerAB < zero) {\n//\t\treturn distance(p, s.p1);\n//\t}\n//\telse if (innerc_b < zero) {\n//\t\treturn distance(p, s.p2);\n//\t}\n//\telse {\n//\t\treturn fabs(cross(a, b) / absolute(b) );\n//\t}\n//}\n//\n\n//template<typename T>\n//double getParameterOfProjectedPointToSegment(const Point<T>& p, const Segment<T>& s)\n//{\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst T normB = norm(b);\n//\tconst T ab = dot(a, b);\n//\treturn ab / normB;\n//}\n//\n//template<typename T>\n//int getPositionOnSegment(const Point<T>& p, const Segment<T>& s)\n//{\n//\tconst T position = getParameterOfProjectedPointToSegment(p, s);\n//\tif (position < 0.0) {\n//\t\treturn -1;\n//\t}\n//\telse if (1.0 < position) {\n//\t\treturn 1;\n//\t}\n//\telse {\n//\t\treturn 0;\n//\t}\n//}\n\n//static const int counter_clockwise = 2;\n//static const int clockwise = -2;\n//static const int online_back = -1;\n//static const int online_front = 1;\n//static const int onSegment = 0;\n//\n//template<typename T>\n//int getPointPositionToSegment(const Point<T>& p, const Segment<T>& s)\n//{\n//\tconst Point<NUM> a = s.p2 - s.p1;\n//\tconst Point<NUM> b = p - s.p1;\n//\tconst NUM outer = cross(a, b);\n//\tif (outer > EPS) return counter_clockwise;\n//\tif (outer < -EPS) return clockwise;\n//\tif (dot(a, b) < -EPS) return online_back;\n//\tif (norm(b) > norm(a) + EPS) return online_front;\n//\treturn onSegment;\n//}\n//\n//template<typename T>\n//bool intersects(const Segment<T>& s1, const Segment<T>& s2) {\n//\treturn getPointPositionToSegment(s2.p1, s1) * getPointPositionToSegment(s2.p2, s1) <= 0\n//\t\t&& getPointPositionToSegment(s1.p1, s2) * getPointPositionToSegment(s1.p2, s2) <= 0;\n//}\n\n//\n//template<typename T>\n//T getDistanceFromSegmentToSegment(const Segment<T>& s1, const Segment<T>& s2) {\n//\tif (intersects(s1, s2)) {\n//\t\treturn static_cast<T>(0.0);\n//\t}else{\n//\t\treturn min(\n//\t\t\tmin(getDistanceFromPointToSegment(s1.p1, s2), getDistanceFromPointToSegment(s1.p2, s2))\n//\t\t\t, min(getDistanceFromPointToSegment(s2.p1, s1), getDistanceFromPointToSegment(s2.p2, s1))\n//\t\t);\n//\t}\n//}\n\n//template<typename T>\n//void projectPointToSegment(const Point<T>& p, const Segment<T>& s, Point<T>& foot, T& param)\n//{\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst T normB = norm(b);\n//\tconst T ab = dot(a, b);\n//\tparam = ab / normB;\n//\tfoot = s.p1 + (s.p2 - s.p1)*param;\n//}\n\ntemplate<typename T>\nPoint<T> projectPointToSegment(const Point<T>& p, const Segment<T>& s)\n{\n\tconst Point<T> a = p - s.p1;\n\tconst Point<T> b = s.p2 - s.p1;\n\treturn s.p1 + (s.p2 - s.p1)*(dot(a, b) /norm(b));\n}\n\ntemplate<typename T>\nT getRadianFromCosineLaw(const T a, const T b, const T c)//get radian oppose to a\n{\n\treturn acos( 0.5*(b*b + c*c - a*a) / (b*c) );\n}\n\n//template<typename T>\n//array<Point<T>, 2> getIntersectionOfCircleAndLine(const Circle<T>& c, const Segment<T>& s)\n//{\n//\tconst T h = getDistanceFromPointToLine(c.center, s);\n//\t// supposing c,radius >= h\n//\tconst T d = sqrt(c.radius*c.radius - h*h);\n//\tconst Point<T> v = unit(s.p2 - s.p1);\n//\tconst Point<T> foot = projectPointToSegment(c.center, s);\n//\t\n//\tarray<Point<T>, 2> ret;\n//\tret.at(0) = foot + v*d;\n//\tret.at(1) = foot - v*d;\n//\treturn ret;\n//}\n\ntemplate<typename T>\nPoint<T> rotateVector(const Point<T>& p, const T rad)\n{\n\tconst T c = cos(rad);\n\tconst T s = sin(rad);\n\n\tPoint<T> ret;\n\tret.x = p.x*c - p.y*s;\n\tret.y = p.x*s + p.y*c;\n\treturn ret;\n}\n\ntemplate<typename T>\narray<Point<T>, 2> getIntersectionOfCircles(const Circle<T>& c1, const Circle<T>& c2)\n{\n\n\tconst Point<T> v = c2.center - c1.center;\n\tconst T d = absolute(v);\n\tconst T rad = getRadianFromCosineLaw(c2.radius, c1.radius, d);\n\tconst Point<T> unitV = unit(v);\n\n\tarray<Point<T>, 2> ret;\n\tret.at(0) = c1.center + rotateVector(unitV, rad)*c1.radius;\n\tret.at(1) = c1.center + rotateVector(unitV, -rad)*c1.radius;\n\treturn ret;\n}\n\ntemplate<typename T>\nint contains(const vector<Point<T>>& polygon, const Point<T>&p)\n{\n#if 1\n\tbool isIn = false;\n\tfor (int end = polygon.size(), prev = end - 1, next = 0 ; next != end ; prev = next++) {\n\t\tPoint<T> a = polygon.at(prev) - p;\n\t\tPoint<T> b = polygon.at(next) - p;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tconst T outer = cross(a,b);\n\t\tif (outer < -EPS) continue;\n\t\tif (abs(outer) < EPS && dot(a, b) < EPS) return 1;\n\t\t\n\t\t//a.y < -EPS でなく、a.y < EPS としているのがポイント\n\t\t//境界の取り方が非常に巧妙。構成点が半直線上に存在しても、折れ線が半直線をを横切るときのみ、交差と判定されるのは2回でなく1回になる\n\t\tif (a.y < EPS && EPS < b.y)isIn = !isIn;\n\t}\n\treturn isIn ? 2 : 0;\n#else\n\tbool isIn = false;\n\tfor (int end = polygon.size(), prev = end - 1, next = 0; next != end; prev = next++) {\n\t\tPoint<T> a = polygon.at(prev) - p;\n\t\tPoint<T> b = polygon.at(next) - p;\n\t\tif (abs(cross(a, b) < EPS && dot(a, b) < EPS))return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)isIn = !isIn;\n\t}\n\treturn isIn ? 2 : 0;\n#endif\n}\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tvector < Point<NUM> > polygon(q);\n\tfor (auto& p : polygon) {\n\t\treadPoint(p);\n\t}\n\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i != n; ++i) {\n\t\tPoint<NUM> p;\n\t\treadPoint(p);\n\t\tcout << contains(polygon, p) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n\nconst int MAX = 1e3 + 5;\nconst int MAXN = 1000 + 5;\nconst int L = 2;\nconst LL MOD = 10000;\nconst int dir[MAX][MAX] = {{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{-1,1},{1,1},{1,-1}};\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\n\ntypedef struct Point Point;\ntypedef struct Line Line;\ntypedef struct Polygon Polygon;\n\nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\nPoint PointProjLine(Point p, Line l, Point &ans);\nPoint reflect(Line l, Point p);\ndouble dis_point_segment(Point p, Line l);\ndouble dis_segment_segment(Line a, Line b);\nLine point_make_line(Point a, Point b);\nbool in_segment(Line l, Point p);\nint dcmp(double k);\ndouble mysqrt(double n);\nPoint rotate(Point p, double cost, double sint);\npair<Point, Point> crosspoint(Point ap, double ar, Point bp, double br);\nbool PointOnSegment(Point p, Point s, Point t);\nnstruct Point\n{\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double a, double b): x(a), y(b) {}\n\n\tfriend Point operator -(Point a, Point b)\n\t{\n\t\treturn Point(a.x-b.x,a.y-b.y);\n\t}\n\tfriend Point operator +(Point a, Point b)\n\t{\n\t\treturn Point(a.x+b.x,a.y+b.y);\n\t}\n\tfriend bool operator ==(Point a, Point b)\n\t{\n\t\treturn cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n\t}\n\tfriend Point operator *(Point a, double b)\n\t{\n\t\treturn Point(a.x*b,a.y*b);\n\t}\n\tfriend Point operator *(double a, Point b)\n\t{\n\t\treturn Point(a*b.x,a*b.y);\n\t}\n\tfriend Point operator /(Point a, double b)\n\t{\n\t\treturn Point(a.x/b,a.y/b);\n\t}\n\tdouble norm()\n\t{\n\t\treturn sqrt(sqr(x)+sqr(y));\n\t}\n};\n\nstruct Line\n{\n\tPoint a, b;\n\tLine() {}\n\tLine(Point x, Point y): a(x), b(y) {}\n};\n\nstruct Polygon\n{\n\tint n;\n\tPoint a[MAXN];\n\tPolygon() {}\n\tint Point_In(Point t)\n\t{\n\t\tint num = 0;\n\t\ta[n] = a[0];\n\t\trep(i, 0, n - 1)\n\t\t{\n\t\t\tif(PointOnSegment(t, a[i], a[i + 1]))\n\t\t\t\treturn 2;\n\t\t\tint k = cmp(det(a[i + 1] - a[i], t - a[i]));\n\t\t\tint d1 = cmp(a[i].y - t.y);\n\t\t\tint d2 = cmp(a[i + 1].y - t.y);\n\t\t\tif(k > 0 && d1 <= 0 && d2 > 0)\n\t\t\t\tnum++;\n\t\t\tif(k < 0 && d2 <= 0 && d1 > 0)\n\t\t\t\tnum--;\n\t\t}\n\t\treturn num != 0;\n\t}\n};\n\nbool PointOnSegment(Point p, Point s, Point t)\n{\n\treturn cmp(det(p-s,t-s)) == 0 && cmp(dot(p-s,p-t))<=0;\n}\n\nbool parallel(Line a, Line b)\n{\n\treturn !cmp(det(a.a-a.b,b.a-b.b));\n}\n\t\nbool orthogonal(Line a, Line b)\n{\n\treturn !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nPoint PointProjLine(Point p, Line l)\n{\n\tPoint ans;\n\tdouble r = dot((l.b-l.a),(p-l.a))/dot(l.b-l.a,l.b-l.a);\n\tans = l.a + r*(l.b-l.a);\n\treturn ans;\n}\n\nint cmp(double x)\n{\n\tif(abs(x) < EPS)\n\t\treturn 0;\n\tif(x > 0)\n\t\treturn 1;\n\treturn -1;\n}\n\ndouble dis_point_segment(Point p, Line l)\n{\n\tif(cmp(dot(p-l.a,l.b-l.a))<0)\n\t\treturn (p-l.a).norm();\n\tif(cmp(dot(p-l.b,l.a-l.b))<0)\n\t\treturn (p-l.b).norm();\n\treturn abs(det(l.a-p,l.b-p))/dist(l.a,l.b);\n}\n\nbool line_make_point(Line a, Line b, Point &res)\n{\n\tif(parallel(a,b))\n\t\treturn false;\n\tdouble s1 = det(a.a-b.a,b.b-b.a);\n\tdouble s2 = det(a.b-b.a,b.b-b.a);\n\tres = (s1*a.b-s2*a.a)/(s1-s2);\n\treturn true;\n}\n\ndouble dis_segment_segment(Line a, Line b)\n{\n\tPoint res;\n\tif(line_make_point(a, b, res) && in_segment(a, res) && in_segment(b, res))\n\t\treturn 0.;\n\treturn min(min(dis_point_segment(b.a, a), dis_point_segment(b.b, a)), min(dis_point_segment(a.a, b), dis_point_segment(a.b, b)));\n}\n\ndouble sqr(double x)\n{\n\treturn x * x;\n}\n\ndouble det(Point a, Point b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble dist(Point a, Point b)\n{\n\treturn (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n\tdouble tx = p.x, ty = p.y;\n\treturn Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nPoint reflect(Line l, Point p)\n{\n\treturn p + ((PointProjLine(p, l) - p) * 2.0);\n}\n\nbool in_segment(Line l, Point p)\n{\n\tbool fa = false, fb = false;\n\tif((cmp(p.x-l.a.x) != -1 && cmp(p.x-l.b.x) != 1) || (cmp(p.x-l.a.x) != 1 && cmp(p.x-l.b.x) != -1))\n\t\tfa = true;\n\tif((cmp(p.y-l.a.y) != -1 && cmp(p.y-l.b.y) != 1) || (cmp(p.y-l.a.y) != 1 && cmp(p.y-l.b.y) != -1))\n\t\tfb = true;\n\treturn fa && fb;\n}\n\nint dcmp(double k)\n{\n\treturn k < -EPS ? -1 : k > EPS ? 1 : 0;\n}\n\ndouble mysqrt(double n)\n{\n\treturn sqrt(max(0.0, n));\n}\n\nvoid circle_cross_line(Point a, Point b, Point o, double r, Point ret[], int &num)\n{\n\tdouble x0 = o.x, y0 = o.y;\n\tdouble x1 = a.x, y1 = a.y;\n\tdouble x2 = b.x, y2 = b.y;\n\tdouble dx = x2 - x1, dy = y2 - y1;\n\tdouble A = dx*dx+dy*dy;\n\tdouble B = 2*dx*(x1-x0)+2*dy*(y1-y0);\n\tdouble C = sqr(x1-x0)+sqr(y1-y0)-sqr(r);\n\tdouble delta = B*B-4*A*C;\n\tnum = 0;\n\tif(dcmp(delta) >= 0)\n\t{\n\t\tdouble t1 = (-B - mysqrt(delta)) / (2*A);\n\t\tdouble t2 = (-B + mysqrt(delta)) / (2*A);\n\t\tret[num++] = Point(x1 + t1*dx, y1 + t1*dy);\n\t\tret[num++] = Point(x1 + t2*dx, y1 + t2*dy);\n\t}\n\t\n}\n\nPoint rotate(Point p, double cost, double sint)\n{\n\tdouble x = p.x, y = p.y;\n\treturn Point(x*cost - y*sint, x*sint + y*cost);\n}\n\npair<Point, Point> crosspoint(Point ap, double ar, Point bp, double br)\n{\n\tdouble d = (ap - bp).norm();\n\tdouble cost = (ar*ar + d*d - br*br) / (2*ar*d);\n\tdouble sint = sqrt(1. - cost*cost);\n\tPoint v = (bp - ap) / (bp - ap).norm() * ar;\n\treturn make_pair(ap+rotate(v,cost,-sint),ap+rotate(v,cost,sint));\n}\n\nPolygon polygon;\n\nint main()\n{\t\n#ifdef LOCAL\n\t//~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tint n;\n\tsfi(n);\n\tpolygon.n = n;\n\tdow(i, n - 1, 0)\n\t\tscanf(\"%lf%lf\", &polygon.a[i].x, &polygon.a[i].y);\n\t\n\tint q;\n\tsfi(q);\n\twhile(q--)\n\t{\n\t\tPoint a;\n\t\tscanf(\"%lf%lf\", &a.x, &a.y);\n\t\tint ans = polygon.Point_In(a);\n\t\tif(ans == 1)\n\t\t\tputs(\"2\");\n\t\telse if(ans == 2)\n\t\t\tputs(\"1\");\n\t\telse\n\t\t\tputs(\"0\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//By Vlgd\n#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nusing namespace std;\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\tPoint operator + (Point p){return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p){return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble abs() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\nint contain(Polygon g,Point p){\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++){\n\t\tVector a=p-g[i],b=p-g[(i+1)%n];\n\t\tif(fabs(cross(a,b))<EPS && dot(a,b)<EPS) return 1;\n\t\tif(a.y>b.y) swap(a,b);\n\t\tif(a.y<EPS && b.y>EPS && cross(a,b)>EPS) x=!x;\n\t}\n\treturn x?2:0;\n}\nmain(){\n\tint x,y,n,q;\n\tPolygon p;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d%d%\",&x,&y);\n\t\tPoint o(x,y);\n\t\tp.push_back(o);\n\t}\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tPoint q(x,y);\n\t\tprintf(\"%d\\n\",contain(p,q));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<vector>\n#define f first\n#define s second\n#define mp make_pair\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){ return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){ return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps)return CLOCKWISE;\n  if(dot(a,b)<-eps)return ONLINE_BACK;\n  if(a.norm()<b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return (s1.p1+(s1.p2-s1.p1)*t);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return mp(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){ return atan2(p.y,p.x);}\nVector polar(double a,double r){ return Point(cos(r)*a,sin(r)*a);}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return mp(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\ndouble getPolygonArea(Polygon p){\n  double area=0.0;\n  int n=p.size();\n  for(int i=0;i<n;i++)area+=cross(p[i%n],p[(i+1)%n]);\n  return area/2;\n}\n\nbool isConvex(Polygon p){\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    if(ccw(p[(i+1)%n],p[i%n],p[(i+2)%n])==1)return false;\n  }\n  return true;\n}\n\n// in 2,out 0,on 1\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Vector a=g[i]-p,b=g[(i+1)%n]-p;\n    if(abs(cross(a,b))<eps && dot(a,b)<eps)return 1;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<eps && eps<b.y && cross(a,b)>eps)x=!x;\n  }\n  if(x)return 2;\n  return 0;\n}\n\nint main()\n{\n  int n,q,a,b;\n  Polygon p;\n\n  cin>>n;\n  p.resize(n);\n  for(int i=0;i<n;i++)cin>>p[i].x>>p[i].y;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>a>>b;\n    cout<<contains(p,Point(a,b))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a-b)<EPS)\nstatic const int CCW=1;//?????¶???\nstatic const int CW=-1;//?????¶???\nstatic const int BACK=-2;//?????¢\nstatic const int FRONT=2;//?????¢\nstatic const int ON=0;//?????????\n\nstruct Point//???\n{\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){}\n};\ntypedef Point Vector;//??????\n\nstruct Segment{ Point p1, p2; };//??????\ntypedef Segment Line;//??´???\n\nclass Circle//???\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0):c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;//????????¢\n\nPoint operator + (Point a, Point b){ return Point(a.x+b.x, a.y+b.y); }\nPoint operator - (Point a, Point b){ return Point(a.x-b.x, a.y-b.y); }\nPoint operator * (Point a, double p){ return  Point(a.x*p, a.y*p); }\nPoint operator / (Point a, double p){ return Point(a.x/p, a.y/p); }\n\ndouble norm(Vector a){ return a.x*a.x+a.y*a.y; }//?????°????¨?????????????\ndouble abs(Vector a){ return sqrt(norm(a)); }//?¨?\ndouble dot(Vector a, Vector b){ return a.x*b.x+a.y*b.y; }//??????\ndouble cross(Vector a, Vector b){ return a.x*b.y-a.y*b.x; }//??????\n\nbool isOrthgonal(Vector a, Vector b){ return equals(dot(a, b), 0.0); }//???????????´????????????\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){ return isOrthgonal(a1-a2, b1-b2); }//???????????´???4?????????\nbool isOrthgonal(Segment s1, Segment s2){ return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0); }//???????????´????????????\n\nbool isParallel(Vector a, Vector b){ return equals(cross(a, b), 0.0); }//????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2){ return isParallel(a1-a2, b1-b2); }//???????????????4?????????\nbool isParallel(Segment s1, Segment s2){ return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0); }//????????????????????????\n\nPoint project(Segment s, Point p)//?±?????¶?\n{\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1, base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s, Point p)//?±??????°??´??????????§°???\n{\n    return p+(project(s, p)-p)*2.0;\n}\n\nint ccw(Point p0, Point p1, Point p2)//??????P0,P1,P2??????????????????\n{\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if( cross(a, b)>EPS ) return CCW;\n    if( cross(a, b)<-EPS ) return CW;\n    if( dot(a, b)<-EPS ) return BACK;\n    if( norm(a)<norm(b) ) return FRONT;\n    return ON;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){ return (ccw(p1, p2, p3)*ccw(p1, p2, p4)<=0 &&ccw(p3, p4, p1)*ccw(p3, p4, p2)<=0); }//???????????????4?????????\nbool intersect(Segment s1, Segment s2){ return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }//???????????????????????????\n\ndouble getDistance(Point a, Point b){ return abs(a-b); }//????????´?????????\ndouble getDistanceLP(Line l, Point p){ return abs(cross(l.p2-l.p1, p-l.p1)/abs(l.p2-l.p1)); }//?????°??´????????????\ndouble getDistanceSP(Segment s, Point p)//?????°???????????????\n{\n    if(dot(s.p2-s.p1, p-s.p1)<0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2, p-s.p2)<0.0) return abs(p-s.p2);\n    return getDistanceLP(s, p);\n}\ndouble getDistanceSS(Segment s1, Segment s2)//???????????´?????????\n{\n    if(intersect(s1, s2)) return 0.0;\n    return min( min(getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2)),\n                min(getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)) );\n}\n\nPoint getCrossPoint(Segment s1, Segment s2)//??????????????????\n{\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base, s1.p1-s2.p1));\n    double d2=abs(cross(base, s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n/*\n???????????¨????????¢?????¨\nIN 2\nON 1\nOUT 0\n*/\nint contains(Polygon g, Point p)\n{\n    int n=g.size();\n    bool x=false;\n    for(int i=0; i<n; i++)\n    {\n        Point a=g[i]-p;\n        Point b=g[(i+1)%n]-p;\n        if(abs(cross(a, b))<EPS && dot(a, b)<EPS) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<EPS && EPS<b.y && cross(a,b)>EPS) x=!x;\n    }\n    return (x? 2 : 0);\n}\n\nint main()\n{\n    int n, q;\n    vector<Point> g;\n    scanf(\"%d\", &n);\n    while(n--)\n    {\n        Point p;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        g.push_back(p);\n    }\n    scanf(\"%d\", &q);\n    while(q--)\n    {\n        Point p;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        printf(\"%d\\n\", contains(g, p));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n//  main.cpp\n//  C_-_Polygon_Point_Containment\n//\n//  Created by Andy on 21/5/18.\n//  Copyright © 2018 Andy. All rights reserved.\n//\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <stdio.h>\n\nstruct point {\n    int x;\n    int y;\n    point(int x, int y) : x{x}, y{y} { };\n};\n\nint q;\nint n;\n\nconst double EPS = 1e-8;\nbool double_equal(double x, double y) {\n    if (std::fabs(x-y) < EPS) return true;\n    return false;\n}\n\n\npoint operator-(point a, point b) {\n    return point(a.x - b.x, a.y - b.y);\n}\ndouble cross(point a, point b) {\n    return a.x*b.y - a.y*b.x;\n}\ndouble ccw(point a, point b, point c) {\n//    return cross(b - a, c - a) >= 0;\n    return cross(b - a, c - a);\n}\n\n\nint main(int argc, const char * argv[]) {\n    \n    std::vector<point> polygon_points;\n    int largest_x = 0;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        int x,y;\n        scanf(\"%d %d\", &x, &y);\n        polygon_points.push_back(point(x, y));\n        largest_x = std::max(x, largest_x);\n    }\n    ++largest_x;\n    \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        int x,y;\n        int result = 0;\n        scanf(\"%d %d\", &x, &y);\n        point query_point = point(x, y);\n        int intersections = 0;\n        for (int i = 0; i < polygon_points.size(); i++) {\n            int j = i + 1;\n            if (j == polygon_points.size()) j = 0;\n            \n            if (polygon_points[i].y < polygon_points[j].y) {\n                if (polygon_points[i].y < query_point.y && query_point.y <= polygon_points[j].y) {\n                    if (polygon_points[i].x < polygon_points[j].x) { //  /  up\n                        if (query_point.x < polygon_points[i].x) ++intersections;\n                        else if (query_point.x <= polygon_points[j].x) {\n                            if (double_equal(ccw(polygon_points[i], query_point, polygon_points[j]), 0)) result = 1;\n                            if (ccw(query_point, polygon_points[i], polygon_points[j]) >= 0) ++intersections;\n                        }\n                    }\n                    else if (polygon_points[i].x > polygon_points[j].x) { // \\ up\n                        if (query_point.x < polygon_points[j].x) ++intersections;\n                        else if (query_point.x <= polygon_points[i].x) {\n                            if (double_equal(ccw(polygon_points[i], query_point, polygon_points[j]), 0)) result = 1;\n                            if (ccw(query_point, polygon_points[i], polygon_points[j]) >= 0) ++intersections;\n                        }\n                    }\n                    else if (polygon_points[i].x == polygon_points[j].x) {\n                        if (query_point.x < polygon_points[i].x) ++intersections;\n                        else if (query_point.x == polygon_points[i].x) result = 1;\n                    }\n                }\n            }\n            else if (polygon_points[i].y > polygon_points[j].y) {\n                if (polygon_points[i].y > query_point.y && query_point.y >= polygon_points[j].y) {\n                    if (polygon_points[i].x < polygon_points[j].x) { // \\ down\n                        if (query_point.x < polygon_points[i].x) ++intersections;\n                        else if (query_point.x <= polygon_points[j].x) {\n                            if (double_equal(ccw(polygon_points[i], query_point, polygon_points[j]), 0)) result = 1;\n                            if (ccw(query_point, polygon_points[j], polygon_points[i]) >= 0) ++intersections;\n                        }\n                    }\n                    else if (polygon_points[i].x > polygon_points[j].x) { //  / down\n                        if (query_point.x < polygon_points[j].x) ++intersections;\n                        else if (query_point.x <= polygon_points[i].x) {\n                            if (double_equal(ccw(polygon_points[i], query_point, polygon_points[j]), 0)) result = 1;\n                            if (ccw(query_point, polygon_points[j], polygon_points[i]) >= 0) ++intersections;\n                        }\n                    }\n                    else if (polygon_points[i].x == polygon_points[j].x) {\n                        if (query_point.x < polygon_points[i].x) ++intersections;\n                        else if (query_point.x == polygon_points[i].x) result = 1;\n                    }\n                }\n            }\n        }\n        if (result == 0) {\n            if (intersections % 2 == 1) result = 2;\n        }\n        printf(\"%d\\n\", result);\n        \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\n// c++ 11,14\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { \n\tpoint s,e;\n} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\nline lmake(){\n\tpoint p0=make();\n\tpoint p1=make();\n\treturn make(p0,p1);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2))\treturn 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n//面積\ndouble area(vector<point> p,int n){\n\tdouble ans=0.0;\n\tfor(int i=0;i<n-2;i++){\n\tans+=cross(p[i+2]-p[0],p[i+1]-p[0]);\n\t}\n\treturn abs(ans)/2;\n}\ndouble area(vector<point> p){\n\treturn area(p,p.size());\n}\n//内包\nint contains(vector<point> g,point p){\nint n=g.size();\nbool flag=false;\n\tfor(int i=0;i<n;i++){\n\t\tpoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b) )<EPS && dot(a,b) <EPS)return 1;\n\t\tif(a.y>b.y) swap(a,b);\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS) flag=!flag;\n\t}\n\treturn (flag? 2:0);\n}\n\nint main(){\n\tint n,q;\n\tcin>>n;\n\tvector<point> g(n);\n\tfor(int i=0;i<n;i++)g[i]=make();\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tpoint p=make();\n\tcout<<contains(g,p)<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define Re real()\n#define Im imag()\nusing namespace std;\n\nconst double eps = 1e-9;\ntypedef complex<double> Point;\ntypedef Point Vector;\nPoint P[50050], s;\nint n, k, m;\nvector<Point> qs;\n\nbool cmp(Point a, Point b)\n{\n    if(fabs(a.Re - b.Re) < eps) return a.Im < b.Im;\n    else return a.Re < b.Re;\n}\n\ndouble cross(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Im;\n}\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Re;\n}\n\nint check(const Point& t)\n{\n    int res = 2;\n    for(int i = 0; i < n; i++)\n    {\n        if(cross(P[i] - t, P[(i + 1) % n] - t) == 0 && dot(P[i] - t, P[(i + 1) % n] - t) < 0) res = 1;\n        if(cross(P[i] - t, P[(i + 1) % n] - t) < 0) res = 0;\n    }\n    return res;\n}\n\nint main()\n{\n    while(~scanf(\"%d\", &n))\n    {\n        for(int i = 0; i < n; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            P[i] = complex<double>(tx, ty);\n        }\n        scanf(\"%d\", &m);\n        for(int i = 0; i < m; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            s = Point(tx, ty);\n            printf(\"%d\\n\", check(s));\n        }\n    }\n    return 0;\n}\n\n/*\n\n5\n0 0\n2 0\n2 2\n0 2\n1 1\n\n4\n0 0\n3 1\n3 3\n0 3\n16\n1 1\n2 1\n1 2\n2 2\n3 1\n3 2\n0 3\n0 2\n2 0\n4 1\n-1 1\n0 -1\n1 4\n3 4\n4 3\n-2 3\n\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1128\n\n*/"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    }\n    else {\n        return d < 0? -1 : 1;\n    }\n}\n\nstruct Vector {\n    double x, y;\n    Vector(double x = 0, double  y = 0):x(x), y(y) {\n    }\n};\n\ntypedef Vector Point;\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble ccw(const Point& a, const Point& b, const Point& c) {\n    return cross(b - a, c - a);\n}\n\nint main() {\n    int n; \n    cin >> n;\n    vector<Point> g(n);\n    for (int i = 0; i < n; i++) {\n        cin >> g[i].x >> g[i].y;\n    }\n    \n    int q;\n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        Vector p;\n        cin >> p.x >> p.y;\n        \n        int count = 0; //0: on segment\n        bool onseg = false;\n        for (int i = 0; i < n; i++) {\n            Vector u = g[i] - p;\n            Vector v = g[(i + 1) % n] - p;\n            //on segment\n            if (dcmp(cross(u, v)) == 0 && dcmp(dot(u, v)) <= 0) {\n                onseg = true;\n                break;\n            }\n            if (u.y > v.y) {\n                swap(u, v);\n            }\n            if (dcmp(cross(u, v)) > 0) {\n                count++;\n            }\n        }\n        if (onseg) {\n            cout << 1 << endl;\n        }\n        else if (count % 2 == 0) {\n            cout << 0 << endl;\n        }\n        else {\n            cout << 2 << endl;\n        }\n    }\n   \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n\n    \n    \n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            int ans=0;\n            bool flag=false;\n            for(int j=0; j<n; j++){\n                double a,b,c;\n                straight_line_passing_through_the_two_points(p_xy[j][0], p_xy[j][1], p_xy[(j+1)%n][0], p_xy[(j+1)%n][1], &a, &b, &c);\n                if(min(p_xy[j][0],p_xy[(j+1)%n][0])<=tx&&tx<=max(p_xy[j][0],p_xy[(j+1)%n][0])){\n                    if(min(p_xy[j][1],p_xy[(j+1)%n][1])<=ty&&ty<=max(p_xy[j][1],p_xy[(j+1)%n][1])){\n                        if(a*tx+b*ty+c==0){\n                            flag = true;\n                            break;\n                        }\n                    }\n                }\n                \n                ans+=line_segment_cross_decision(p_xy[j][0], p_xy[j][1], p_xy[(j+1)%n][0], p_xy[(j+1)%n][1], tx, ty, tx, ty+100000.0);\n                \n                \n            }\n            \n            if(flag)cout<<1<<endl;\n            else if(ans%2==1)cout<<2<<endl;\n            else cout<<0<<endl;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\ntypedef vector<Point> Poly; \nconst double EPS = 1e-10;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\nint in_poly(Poly p, Point x){\n    int n = p.size();\n    bool in = false;\n    for(int i = 0; i < n; i++){\n        Point a = p[i] - x, b = p[(i + 1) % n] - x;\n        if(imag(a) > imag(b)) swap(a, b);\n        if(imag(a) <= 0 && 0 < imag(b)){\n            if(cross(a, b) < 0) in = !in;\n        }\n        // 線上判定\n        if(cross(a, b) == 0 && dot(a, b) <= 0) return 2;\n    }\n    return in;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    Poly pl(n);\n    for(int i = 0; i < n; i++){\n        double x, y;\n        cin >> x >> y;\n        pl[i] = {x, y};\n    }\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        cin >> x >> y;\n        int res = in_poly(pl, {x, y});\n        if(res == 1) res++;\n        else if(res == 2) res--;\n        cout << res << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\n#define endl '\\n'\n#define FOR(i, a, n) for (int i = (a); i < (n); ++i)\n#define REP(i, n) FOR(i, 0, n)\nusing namespace std;\n\nusing T = double;\nconst T EPS = 1e-10;\nT torad(int deg) {return (T)(deg) * M_PI / 180;}\nT todeg(T ang) {return ang * 180 / M_PI;}\n\n/* Point */\nusing P = complex<T>;\n#define x real()\n#define y imag()\ntemplate <typename T> inline bool eq(T p, T q) { return abs(p - q) < EPS; }\ninline int sgn(T x) { return (T(0) < x) - (x < T(0)); }\ninline T dot(P v, P w) { return (conj(v) * w).x; }\ninline T cross(P v, P w) { return (conj(v) * w).y; }\ninline bool isOrth(P v, P w) { return dot(v, w) == 0; }\ninline bool isPara(P v, P w) { return cross(v, w) == 0; }\ninline P unit(P v) { return v / abs(v); }\ninline P translate(P p, P v) { return p + v; }\ninline P scale(P p, P c, T k) { return c + (p - c) * k; }\ninline P rot(P p, T a) { return p * polar(1.0, a); }\ninline P rot90(P p) { return {-p.y, p.x}; }\ninline T orient(P a, P b, P c) { return cross(b - a, c - a); }\nistream& operator>>(istream& is, P& p) { T xx, yy; is >> xx >> yy; p = P(xx, yy); return is; }\nbool cmpX(const P& a, const P& b) { return a.x != b.x ? a.x < b.x : a.y < b.y; }\nbool cmpY(const P& a, const P& b) { return a.y != b.y ? a.y < b.y : a.x < b.x; }\nnamespace std {\n    bool operator < (const P& a, const P& b) { return cmpX(a, b); }\n}\n\nP linearTransform(P p, P q, P fp, P fq, P r) {\n    return fp + (r - p) * (fq - fp) / (q - p);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0) return +1;      // counter clockwise\n    if (cross(b, c) < 0) return -1;      // clockwise\n    if (dot(b, c) < 0) return +2;        // c--a--b on line\n    if (norm(b) < norm(c)) return -2;    // a--b--c on line or a==b\n    return 0;                            // a--c--b on line or a==c or b==c\n}\n\nT angle(P v, P w) {\n    T cosTheta = dot(v, w) / abs(v) / abs(w);\n    return acos(max(-1.0, min(1.0, cosTheta)));\n}\nT orientedAngle(P a, P b, P c) {\n    if (orient(a, b, c) >= 0) return angle(b - a, c - a);\n    return 2 * M_PI - angle(b - a, c - a);\n}\nbool inAngle(P a, P b, P c, P p) {\n    assert(abs(orient(a, b, c)) != 0);\n    if (orient(a, b, c) < 0) swap(b, c);\n    return orient(a, b, p) >= 0 && orient(a, c, p) <= 0;\n}\n\n// polar sort\nbool half(P p) {\n    assert(p.x != 0 || p.y != 0);\n    return p.y > 0 || (p.y == 0 && p.x < 0);\n}\nvoid polarSort(vector<P>& v, P o = P(0.0, 0.0)) {\n    sort(v.begin(), v.end(), [&](P v, P w) {\n        return make_tuple(half(v - o), 0, norm(v - o)) <\n            make_tuple(half(w - o), cross(v - o, w - o), norm(w - o));\n    });\n}\n\n/* Line */\nstruct L : array<P, 2> {\n    P v; T c;\n    L(P a = P(0.0, 0.0), P b = P(0.0, 0.0)) : array<P, 2>({a, b}), v(b - a), c(cross(v, a)) {}\n    T side(P p) { return cross(v, p) - c; }\n    P proj(P p) { return p - rot90(v) * side(p) / norm(v); }\n    P refl(P p) { return p - rot90(v) * T(2) * side(p) / norm(v); }\n    friend istream& operator>>(istream& is, L& l) { P a, b; is >> a >> b; l = L(a, b); return is; }\n    friend ostream& operator<<(ostream& os, const L& l) { return os << '{' << l[0] << \", \" << l[1] << '}'; }\n};\n\n/* Circle */\nstruct C : P {\n    T r;\n    C(P p = P(0.0, 0.0), T r = 0.0) : P(p), r(r) {}\n    friend ostream& operator<<(ostream& os, const C& c) { return os << '(' << c.x << \", \" << c.y << \", \" << c.r << ')'; }\n};\n\nP circumCenter(P a, P b, P c) {\n    b -= a, c -= a;\n    assert(cross(b, c) != 0);\n    return a + rot90(b * norm(c) - c * norm(b)) / cross(b, c) / T(2);\n}\n\nvector<P> tangentPoints(C c, P p) {\n    if (eq(abs(p - c), c.r)) return vector<P>{p};\n    vector<P> res;\n    T t = acos(c.r / abs(p - c));\n    P q = (p - c) / abs(p - c) * c.r;\n    res.push_back(c + q * polar(1.0, t));\n    res.push_back(c + q * polar(1.0, -t));\n    sort(res.begin(), res.end(), cmpX);\n    return res;\n}\n\nvector<L> tangentLines(C c1, C c2, bool inner) {\n    if (inner) c2.r = -c2.r;\n    vector<L> res;\n    P d = c2 - c1;\n    T dr = c1.r - c2.r, d2 = norm(d), h2 = d2 - dr * dr;\n    if (d2 == 0 || h2 < 0) { assert(h2 != 0); return res; }\n    for (T sign : {-1, 1}) {\n        P v = (d * dr + rot90(d) * sqrt(h2) * sign) / d2;\n        res.emplace_back(c1 + v * c1.r, c2 + v * c2.r);\n    }\n    return res;\n}\n\n// intersect\nbool isInterPL(P p, L l) { return (ccw(l[0], l[1], p) != 1); }\nbool isInterPS(P p, L s) { return (ccw(s[0], s[1], p) == 0); }\nbool isInterLL(L l, L m) { return (!isPara(l.v, m.v)); }\nbool isInterLS(L l, L s) {\n    if (eq(s[0], s[1])) return isInterPL(s[0], l);\n    return (ccw(l[0], l[1], s[0]) * ccw(l[0], l[1], s[1]) <= 0);\n}\nbool isInterSS(L s, L t) {\n    if (eq(s[0], s[1])) return isInterPL(s[0], t);\n    if (eq(t[0], t[1])) return isInterPL(t[0], s);\n    return (ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n            ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0);\n}\nint isInterCC(C a, C b) {\n    T d = abs(b - a);\n    if (a == b && a.r == b.r) return 0;         // ∞ cp (A = B)\n    if (a.r + d - b.r < -EPS) return +1;        // 0 cp (A in B)\n    if (b.r + d - a.r < -EPS) return -1;        // 0 cp (B in A)\n    if (abs(a.r + d - b.r) < EPS) return +2;    // 1 cp (A in B)\n    if (abs(b.r + d - a.r) < EPS) return -2;    // 1 cp (B in A)\n    if (abs(a.r + b.r - d) < EPS) return 3;     // 1 cp (outside)\n    if (a.r + b.r - d < -EPS) return 4;         // 0 cp (outside)\n    return 5;                                   // 2 cp\n}\n \n// distance\nT distancePL(P p, L l) { return (abs(p - l.proj(p))); }\nT distancePS(P p, L s) {\n    P h = s.proj(p);\n    if (isInterPS(h, s)) return abs(p - h);\n    return min(abs(p - s[0]), abs(p - s[1]));\n}\nT distanceLL(L l, L m) {\n    if (isInterLL(l, m)) return T(0);\n    return distancePL(m[0], l);\n}\nT distanceLS(L l, L s) {\n    if (isInterLS(l, s)) return 0;\n    return min(distancePL(s[0], l), distancePL(s[1], l));\n}\nT distanceSS(L s, L t) {\n    if (isInterSS(s, t)) return 0;\n    return min({distancePS(s[0], t), distancePS(s[1], t), distancePS(t[0], s), distancePS(t[1], s)});\n}\n\n// crosspoint\nvector<P> crosspointLL(L l, L m) {\n    if (!isInterLL(l, m)) return vector<P>();\n    vector<P> res;\n    T d = cross(m[1] - m[0], l[1] - l[0]);\n    res.push_back(l[0] + (l[1] - l[0]) * cross(m[1] - m[0], m[1] - l[0]) / d);\n    return res;\n}\nvector<P> crosspointLS(L l, L s) {\n    if (!isInterLS(l, s)) return vector<P>();\n    vector<P> res;\n    T d = cross(s[1] - s[0], l[1] - l[0]);\n    res.push_back(l[0] + (l[1] - l[0]) * cross(s[1] - s[0], s[1] - l[0]) / d);\n    return res;\n}\nvector<P> crosspointLC(L l, C c) {\n    if (abs(c - l.proj(c)) > c.r) return vector<P>();\n    vector<P> res;\n    T d = distancePL(c, l), h2 = c.r * c.r - d * d;\n    assert(h2 >= 0);\n    P p = l.proj(c), h = l.v * sqrt(h2) / abs(l.v);\n    res.push_back(p - h);\n    if (abs(h) > 0) res.push_back(p + h);\n    return res;\n}\nvector<P> crosspointSS(L s, L t) {\n    if (!isInterSS(s, t)) return vector<P>();\n    vector<P> res;\n    if (unit(s.v) != unit(t.v)) {\n        T d = cross(t[1] - t[0], s[1] - s[0]);\n        res.push_back(s[0] + (s[1] - s[0]) * cross(t[1] - t[0], t[1] - s[0]) / d);\n    } else {\n        if (ccw(s[0], s[1], t[0]) == 0) res.push_back(t[0]);\n        if (ccw(s[0], s[1], t[1]) == 0) res.push_back(t[1]);\n        if (ccw(t[0], t[1], s[0]) == 0) res.push_back(s[0]);\n        if (ccw(t[0], t[1], s[1]) == 0) res.push_back(s[1]);\n    }\n    return res;\n}\nvector<P> crosspointSC(L s, C c) {\n    if (abs(c - s.proj(c)) > c.r) return vector<P>();\n    vector<P> res;\n    T d = distancePL(c, s), h2 = c.r * c.r - d * d;\n    assert(h2 >= 0);\n    P p = s.proj(c), h = s.v * sqrt(h2) / abs(s.v);\n    if (ccw(s[0], s[1], p - h) == 0) res.push_back(p - h);\n    if (abs(h) > 0 && ccw(s[0], s[1], p + h) == 0) res.push_back(p + h);\n    return res;\n}\nvector<P> crosspointCC(C c1, C c2) {\n    P d = c2 - c1; T d2 = norm(d);\n    if (d2 == 0) { assert(c1.r != c2.r); return vector<P>(); }\n    vector<P> res;\n    T pd = (d2 + c1.r * c1.r - c2.r * c2.r) / 2;\n    T h2 = c1.r * c1.r - pd * pd / d2;\n    if (h2 >= 0) {\n        P p = c1 + d * pd / d2, h = rot90(d) * sqrt(h2 / d2);\n        res.push_back(p - h);\n        if (abs(h) > 0) res.push_back(p + h);\n    }\n    return res;\n}\n\n/* Polygon */\n// p[0] has minimum y and p is counterclockwise\nvector<P> makeStandard(vector<P> p) {\n    int n = p.size(), j = -1;\n    for (int i = 0; i < n; ++i) {\n        if (j == -1 || p[i].y < p[j].y) j = i;\n    }\n    vector<P> res;\n    if (p[(j - 1 + n) % n].x <= p[j].x && p[j].x <= p[(j + 1) % n].x) {\n        for (int i = 0; i < n; ++i) {\n            res.push_back(p[(i + j) % n]);\n        }\n    } else {\n        for (int i = 0; i < n; ++i) {\n            res.push_back(p[(i - j + n) % n]);\n        }\n    }\n    return res;\n}\nbool isConvex(vector<P> p) {\n    p = makeStandard(p);\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        P a = p[i], b = p[(i + 1) % n], c = p[(i + 2) % n];\n        if (orient(a, b, c) < 0) return false;\n        if (b.y != p[0].y && b.y < min(a.y, c.y)) return false;\n        if (b.y != p[0].y && a.y == b.y && b.y == c.y && a.x <= b.x && b.x <= c.x) return false;\n    }\n    return true;\n}\nT areaTriangle(P a, P b, P c) {\n    return abs(cross(b - a, c - a)) / T(2);\n}\nT area(vector<P> p) {\n    T res = 0;\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return abs(res) / T(2);\n}\nP centroid(vector<P> p) {\n    P c; T sumA = 0;\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        T a = cross(p[i], p[(i + 1) % n]);\n        sumA += abs(a);\n        c += (p[i] + p[(i + 1) % n]) * a;\n    }\n    return T(1) / T(3) / sumA * c;\n}\n// If A is strictly inside P, return 1.\n// If A is on the boundary, return 2.\n// Else return 0.\nint inConvexCcw(vector<P> p, P a) {\n    int n = p.size();\n    P g = (p[0] + p[n / 2]) / T(2);\n    if (g == a) return 1;\n    P ga = a - g;\n    int l = 0, r = n;\n    while (r - l > 1) {\n        int m = (l + r) / 2;\n        P gl = p[l] - g, gm = p[m] - g;\n        if (cross(gl, gm) > EPS) {\n            if (cross(gl, ga) > -EPS && cross(gm, ga) < EPS) r = m;\n            else l = m;\n        } else {\n            if (cross(gl, ga) < EPS && cross(gm, ga) > -EPS) l = m;\n            else r = m;\n        }\n    }\n    r %= n;\n    int c = ccw(a, p[l], p[r]);\n    return (c == 2 || c == -2 || c == 0) ? 2 : c == -1 ? 0 : 1;\n}\nbool above(P a, P p) { return p.y >= a.y; }\nbool crossesRay(P a, P p, P q) {\n    return (above(a, q) - above(a, p)) * orient(a, p, q) > 0;\n}\n// If A is strictly inside P, return 1.\n// If A is on the boundary, return 2.\n// Else return 0.\nint inPolygon(vector<P> p, P a) {\n    int numCrossing = 0;\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        if (ccw(p[i], p[(i + 1) % n], a) == 0) return 2;\n        numCrossing += crossesRay(a, p[i], p[(i + 1) % n]);\n    }\n    return numCrossing & 1;\n}\nvector<P> convexHull(vector<P> p) {\n    int n = p.size(), k = 0;\n    sort(p.begin(), p.end(), cmpX);\n    vector<P> res(2 * n);\n    for (int i = 0; i < n; res[k++] = p[i++])\n        while (k >= 2 && ccw(res[k - 2], res[k - 1], p[i]) <= 0) --k;\n    for (int i = n - 2, t = k + 1; i >= 0; res[k++] = p[i--])\n        while (k >= t && ccw(res[k - 2], res[k - 1], p[i]) <= 0) --k;\n    res.resize(k - 1);\n    return res;\n}\nvector<P> convexHullCollinearOK(vector<P> p) {\n    int n = p.size(), k = 0;\n    sort(p.begin(), p.end(), cmpX);\n    vector<P> res(2 * n);\n    for (int i = 0; i < n; res[k++] = p[i++])\n        while (k >= 2 && ccw(res[k - 2], res[k - 1], p[i]) == -1) --k;\n    for (int i = n - 2, t = k + 1; i >= 0; res[k++] = p[i--])\n        while (k >= t && ccw(res[k - 2], res[k - 1], p[i]) == -1) --k;\n    res.resize(k - 1);\n    return res;\n}\nvector<P> convexCut(vector<P> p, L l) {\n    vector<P> res;\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        int ccwc = ccw(l[0], l[1], p[i]);\n        if (ccwc != -1) res.push_back(p[i]);\n        int ccwn = ccw(l[0], l[1], p[(i + 1) % n]);\n        if (ccwc * ccwn == -1) res.push_back(crosspointLL(l, L(p[i], p[(i + 1) % n]))[0]);\n    }\n    return res;\n}\npair<int, int> convexDiameter(const vector<P>& p) {\n    int i = min_element(p.begin(), p.end()) - p.begin();\n    int j = max_element(p.begin(), p.end()) - p.begin();\n    int maxI, maxJ;\n    T maxD = 0;\n    for (int k = 0, n = p.size(); k < 2 * n; ++k) {\n        if (maxD < norm(p[i] - p[j]) - EPS) {\n            maxD = norm(p[i] - p[j]);\n            maxI = i;\n            maxJ = j;\n        }\n        if (cross(p[i] - p[(i + 1) % n], p[(j + 1) % n] - p[j]) < EPS) j = (j + 1) % n;\n        else i = (i + 1) % n;\n    }\n    return make_pair(maxI, maxJ);\n}\nT closest_pair(vector<P>& a, int l = 0, int r = -1) {\n    if (r < 0) {\n        r = a.size();\n        sort(a.begin(), a.end());\n    }\n    if (r - l <= 1) return abs(a[0] - a[1]);\n    int m = (l + r) >> 1;\n    T amx = a[m].x, d = min(closest_pair(a, l, m), closest_pair(a, m, r));\n    inplace_merge(a.begin() + l, a.begin() + m, a.begin() + r, cmpY);\n    vector<P> b;\n    for (int i = l; i < r; ++i) {\n        if (abs(a[i].x - amx) > d - EPS) continue;\n        for (int j = 0, n = b.size(); j < n; ++j) {\n            if (a[i].y - b[n - j - 1].y > d - EPS) break;\n            d = min(d, abs(a[i] - b[n - j - 1]));\n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout << fixed << setprecision(10);\n\n    int n;\n    cin >> n;\n    vector<P> p(n);\n    REP (i, n) cin >> p[i];\n    int q;\n    cin >> q;\n    REP (i, q) {\n        P g;\n        cin >> g;\n        int t = inPolygon(p, g);\n        if (t == 0) cout << 0 << endl;\n        else if (t == 1) cout << 2 << endl;\n        else cout << 1 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdet(a,b,p)==0 and sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n#include <array>\n\nusing namespace std;\n\nconst double eps = 1e-10;\nconst double sv = 0.01;\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n  \n  static int ccw( Vector v1, Vector v2, Vector v3);\n  static int crossCheck( Vector v1, Vector v2, Vector v3, Vector v4 );\n  static bool boundaryCheck( Vector v1, Vector v2, Vector v3);\n  void print() { cout << fixed << setprecision(10) << x << \" \" << y << endl; }\n};\n\nint Vector::ccw( Vector v1, Vector v2, Vector v3 )\n{\n  Vector v21 = v2 - v1;\n  Vector v31 = v3 - v1;\n  Vector v12 = v1 - v2;\n  Vector v32 = v3 - v2;\n\n  double crv = Vector::cross( v21, v31 );\n  double dtv = Vector::dot( v21, v31 );\n  double rdtv = Vector::dot( v12, v32 );\n  \n  if ( fabs( crv ) < eps )\n    {\n      if ( dtv < -eps )\n        return 2;\n      else if ( rdtv < -eps )\n        return 3;\n      else\n        return 0;\n    }\n  else if ( crv > 0 )\n    return 1;\n  else \n    return -1;\n}\n\nbool Vector::boundaryCheck( Vector v1, Vector v2, Vector v3 )\n{\n  if ( ccw( v1, v2, v3 ) == 0 )\n    return true;\n  else\n    return false;\n}\n\nint Vector::crossCheck( Vector v1, Vector v2, Vector v3, Vector v4 )\n{\n\n  double c123 = ccw( v1, v2, v3 );\n  double c124 = ccw( v1, v2, v4 );\n  double c341 = ccw( v3, v4, v1 );\n  double c342 = ccw( v3, v4, v2 );\n\n  if ( c123 * c124 == 1 || c341 * c342 == 1 )\n    return 0;\n  else if ( c123 * c124 == -1 && c341 * c342 == -1 )\n    return 1;\n  else if ( c123 * c124 == 0 )\n    return 2;\n  else\n    return 0;\n}\n\nclass Polygon\n{\npublic:\n  int n;\n  vector<Vector> pt;\n  Polygon(){}\n  Polygon( int n ) : n(n), pt(n) {}\n  int solve( Vector p );\n};\n\nint Polygon::solve( Vector p )\n{\n  int cnt = 0;\n\n  for ( auto i = 0; i < n; ++i )\n    {\n      if ( Vector::boundaryCheck( pt[i], pt[(i+1) % n], p ) )\n        {\n          cout << \"1\" << endl;\n          return 0;\n        }\n    }\n  \n  for ( auto i = 0; i < n; ++i )\n    {\n      Vector v1 = pt[i] - p;\n      Vector v2 = pt[(i+1) % n] - p;\n\n      if ( v1.y < v2.y )\n        {\n          if ( Vector::cross( v1, v2 ) > eps  && v2.y > eps && v1.y < eps )\n            ++cnt;\n        }\n      else\n        {\n          if ( Vector::cross( v2, v1 ) > eps && v1.y > eps && v2.y < eps )\n            ++cnt;\n        }\n    }\n\n  if ( cnt % 2 == 0 )\n    cout << \"0\" << endl;\n  else\n    cout << \"2\" << endl;\n  \n  return 0;\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n\n  Polygon g( n );\n  \n  for ( auto i = 0; i < n; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.pt[i] = Vector( x, y );\n    }\n  \n  int q;\n  cin >> q;\n  \n  for ( auto i = 0; i < q; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.solve( Vector(x, y) );\n    }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint windingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint wn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q)){\n\t\t\tint ps = side(a, b, p), qs = side(a, b, q);\n\t\t\tif (ps == qs) continue;\n\t\t\twn -= ps;\n\t\t}\n\t}\n\treturn wn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (windingN(po, a) ? IN : OUT);\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\nconst double EPS = 1e-32;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nconst P pINF(sqrt(2) * INF, sqrt(21) * INF);\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint polygonPointContainment(vector<P> &G, P p){\n    int cross;\n    L infS(p, pINF);\n    for (int i=0;i<G.size()-1;i++){\n        L s(G[i], G[i+1]);\n        if(intersectSP(s, p)){\n            return 1;\n        }\n        if(intersectSS(infS, s)){\n            cross++;\n        }\n    }\n    if(cross%2){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int n, q;\n    cin >> n;\n    vector<P> G;\n    P p;\n    for (int i=0;i<n;i++){\n        cin >> p.real() >> p.imag();\n        G.push_back(p);\n    }\n    G.push_back(G[0]);\n\n    cin >> q;\n    for (int i=0;i<q;i++){\n        cin >> p.real() >> p.imag();\n        cout << polygonPointContainment(G, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) for(int i = 0; i < (b); i++)\n#define all(a) (a).begin(), (a).end()\n#define debug(x) cout << \"debug \" << x << endl;\nconst int INF = 100000000;\nusing namespace std;\n\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n//???????????¨????§???????\nstruct Segment{ Point p1, p2; };\n//??´????????¨????§???????\ntypedef Segment Line;\n//????§???¢?????¨????§???????\ntypedef vector<Point> Polygon;\n\nnamespace std{\n    bool operator < (const Point &a, const Point &b){\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool operator == (const Point &a, const Point &b){\n        return a.real() == b.real() && a.imag() == b.imag();\n    }\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// ?¨±???????????????\n#define EPS (1e-10)\n\n// ????????????a?????¶??????????±???????\n//double length = abs(a);\n\n// 2???a,b???????????¢????±???????\n//double distance = abs(a-b);\n\n/*\n// ????????????a?????????????????????????±???????\nPoint b = a / abs(a);\n\n// ????????????a?????????????????????n1,n2????±???????\nPoint n1 = a * Point(0, 1);\nPoint n2 = a * Point(0, -1);\n*/\n\nint ccw(Point, Point, Point);\n\n// 2??????????????????????????????????????????\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n// 2??????????????????????????????????????????\nbool EQV(Vector a, Vector b){\n    return ( EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()) );\n}\n\n// ?????? (dot product) : a???b = |a||b|cos??\ndouble dot(Point a, Point b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\ndouble cross(Point a, Point b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 2??´????????´????????? : a??\\b <=> dot(a, b) = 0\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\nbool isOrthogonal(Line s1, Line s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isParallel(Line s1, Line s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???c?????´???a,b????????????????????????\nbool isPointOnLine(Point a, Point b, Point c) {\n    return EQ( cross(b-a, c-a), 0.0 );\n}\nbool isPointOnLine(Line s, Point c) {\n    return isPointOnLine(s.p1, s.p2, c);\n}\n\n// ???a,b???????????´?????¨???c??¨????????¢\ndouble distanceLPoint(Point a, Point b, Point c) {\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLPoint(Line s, Point c) {\n    return distanceLPoint(s.p1, s.p2, c);\n}\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\ndouble distanceLsPoint(Point a, Point b, Point c) {\n    if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n    if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLsPoint(Segment s, Point c) {\n    return distanceLsPoint(s.p1, s.p2, c);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨???????????????????????????\nbool isIntersectedLs(Point a1, Point a2, Point b1, Point b2) {\n    return ( ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n             ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0 );\n}\nbool isIntersectedLs(Segment s1, Segment s2) {\n    return isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nPoint intersectionLs(Point a1, Point a2, Point b1, Point b2) {\n    Vector base = b2 - b1;\n    double d1 = abs(cross(base, a1 - b1));\n    double d2 = abs(cross(base, a2 - b1));\n    double t = d1 / (d1 + d2);\n\n    return Point(a1 + (a2 - a1) * t);\n}\nPoint intersectionLs(Segment s1, Segment s2) {\n    return intersectionLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´??????????????????\nbool isIntersectedL(Point a1, Point a2, Point b1, Point b2) {\n    return !EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isIntersectedL(Line l1, Line l2) {\n    return isIntersectedL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´?????????????¨????\nPoint intersectionL(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1; Point b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\nPoint intersectionL(Line l1, Line l2) {\n    return intersectionL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// ??????s1??¨??????s2????????¢\ndouble distanceLL(Segment s1, Segment s2){\n    if(isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2) ) return 0.0;\n    return min(\n            min(distanceLsPoint(s1.p1, s1.p2, s2.p1),\n                distanceLsPoint(s1.p1, s1.p2, s2.p2)),\n            min(distanceLsPoint(s2.p1, s2.p2, s1.p1),\n                distanceLsPoint(s2.p1, s2.p2, s1.p2)) );\n}\n\n// ??????s???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return Point(s.p1 + base * r);\n}\n\n//??????s???????±??????¨?????????p??????????§°??????\nPoint reflect(Segment s, Point p){\n    return Point(p + (project(s, p) - p) * 2.0);\n}\n\n//???p???angle?????????????¨???????????????¢\nPoint rotation(Point p, double angle){\n    double x, y;\n    x = p.real() * cos(angle) - p.imag() * sin(angle);\n    y = p.real() * sin(angle) + p.imag() * cos(angle);\n    return Point(x, y);\n}\n\n//???c??¨??????l?????????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????\ndouble arg(Vector p) { return atan2(p.imag(), p.real()); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) *a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(Point(c1.c + polar(c1.r, t + a)), Point(c1.c + polar(c1.r, t - a)));\n}\n\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    rep(i,n){\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if( abs(cross(a, b)) < EPS && dot(a,  b) < EPS ) return ON;\n        if( a.imag() > b.imag() ) swap(a, b);\n        if( a.imag() < EPS && EPS < b.imag() && cross(a, b) > EPS ) x = not x;\n    }\n    return ( x ? IN : OUT );\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( abs(a) < abs(b) ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nint main(){\n    int n, q;\n    Polygon g;\n\n    cin >> n;\n    rep(i,n){\n        double a, b;\n        cin >> a >> b;\n        g.emplace_back(Point(a, b));\n    }\n    cin >> q;\n    rep(i,q){\n        double a, b;\n        cin >> a >> b;\n        cout << contains(g, Point(a, b)) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate<class T>\nbool chmax(T& a, const T& b) {\n    if (a < b) { a = b; return true; }\n    return false;\n}\ntemplate<class T>\nbool chmin(T& a, const T& b) {\n    if (b < a) { a = b; return true; }\n    return false;\n}\n\n// std::vector Declaration\ntemplate<typename T>\nvector<T> make_v(size_t a) { return vector<T>(a); }\ntemplate<typename T, typename... Ts>\nauto make_v(size_t a, Ts... ts) {\n    return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));\n}\n\n// std::vector Declaration and Initialization\ntemplate<typename T>\nvector<T> make_vector(size_t a, T x) { return vector<T>(a, x); }\ntemplate<typename T, typename U, typename... Ts>\nauto make_vector(size_t a, U b, Ts... ts) {\n    return vector<decltype(make_vector<T>(b,ts...))>(a, make_vector<T>(b, ts...));\n}\n\n// std::vector Input\ntemplate<typename T>\nistream& operator>>(istream& is, vector<T>& v) {\n    for (auto &e : v) is >> e;\n    return is;\n}\n\n// std::vector Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n\n// std::array Debug\ntemplate<typename T, size_t n>\nostream& operator<<(ostream& os, const array<T, n>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n\n// std::deque Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const deque<T>& d) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : d) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n\n// std::pair Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const pair<T, U>& p) {\n    os << \"(\" << p.first << \" \" << p.second << \")\";\n    return os;\n}\n\n// std::set Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const set<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n\n// std::multiset Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const multiset<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n\n// std::map Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const map<T, U>& mp) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : mp) {\n        os << (a ? \"\" : \" \");\n        os << e.first << \":\" << e.second;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n\n// std::tuple Debug\ntemplate<int N, class Tuple>\nvoid out(ostream& os, const Tuple& t){}\ntemplate<int N, class Tuple, class H, class ...Ts>\nvoid out(ostream& os, const Tuple& t) {\n    if (N) os << \" \";\n    os << get<N>(t);\n    out<N+1,Tuple,Ts...>(os, t);\n}\ntemplate<class ...Ts>\nostream& operator<<(ostream& os, const tuple<Ts...>& t) {\n    os << \"(\";\n    out<0,tuple<Ts...>,Ts...>(os, t);\n    os << \")\";\n    return os;\n}\n\n// Debug\n#define DUMP(x) cerr<<#x<<\" = \"<<(x)<<endl\n\n// Weighted edge\ntemplate<typename T>\nstruct edge {\n    int src, to;\n    T cost;\n\n    edge() {}\n    edge(int to, T cost) : src(-1), to(to), cost(cost) {}\n    edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}\n\n    friend ostream& operator<<(ostream& os, const edge& e) {\n        return os << \"(\" << e.src << \"->\" << e.to << \":\" << e.cost << \")\";\n    }\n};\n\nusing LL = int64_t;\n\n#define fs first\n#define sc second\n\nconst int64_t MOD = 1e9+7;\n\nusing Real = double;\nReal EPS = 1e-8;\n\nusing Point = complex<Real>;\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n    friend ostream& operator<<(ostream& os, Line& l) {\n        return os << \"[\" << l.a << \",\" << l.b << \"]\";\n    }\n};\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(const Point& a, const Point& b) : Line(a, b) {}\n};\n\ninline bool eq(Real a, Real b) { return abs(b - a) < EPS; }\n\nReal radian_to_degree(Real r) {\n    return r * 180.0 / M_PI;\n}\n\nReal degree_to_radian(Real d) {\n    return d * M_PI / 180.0;\n}\n\nPoint rotate(const Point &p, Real theta) {\n    return p * polar(1., theta);\n}\n\nReal cross(const Point& a, const Point& b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nReal dot(const Point& a, const Point& b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\nPoint projection(const Line& l, const Point& p) {\n    Real A = dot(l.b - l.a, p - l.a),\n         B = dot(l.a - l.b, p - l.b);\n    return (A * l.b + B * l.a) / (A + B);\n}\n\nbool parallel(const Line& l1, const Line& l2) {\n    return eq(cross(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\n\nbool orthogonal(const Line& l1, const Line& l2) {\n    return eq(dot(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\n\nconst int COUNTER_CLOCKWISE = 1,\n          CLOCKWISE = -1,\n          ONLINE_BACK = 2,\n          ONLINE_FRONT = -2,\n          ON_SEGMENT = 0;\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0) return ONLINE_BACK;\n    if (norm(b) < norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersected(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersected(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersected(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool intersected(const Segment& s1, const Segment& s2) {\n    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 and\n           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\n\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersected(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\n\nReal distance(const Line &l, const Segment &s) {\n    if (intersected(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\n\nReal distance(const Segment& s1, const Segment& s2) {\n    if (intersected(s1, s2)) return 0.0;\n    return min({ distance(s1, s2.a), distance(s1, s2.b),\n                 distance(s2, s1.a), distance(s2, s1.b) });\n}\n\nPoint crosspoint(const Line& l1, const Line& l2) {\n    Real A = cross(l2.a - l1.a, l2.b - l1.a),\n         B = cross(l2.b - l1.b, l2.a - l1.b);\n    return (A * l1.b + B * l1.a) / (A + B);\n}\n\nusing Polygon = vector<Point>;\nPolygon convex_cut(const Polygon& U, const Line& l) {\n    Polygon ret;\n    for (int i = 0; i < U.size(); i++) {\n        Point now = U[i], nxt = U[(i + 1) % U.size()];\n        if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n        if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n            ret.push_back(crosspoint(Line{ now, nxt }, l));\n        }\n    }\n    return ret;\n}\n\nPolygon voronoi_cell(const Point& c, const vector<Point>& ps, Polygon outer) {\n    for (const Point& p : ps) {\n        Point m = (p + c) / 2.0;\n        outer = convex_cut(outer,\n                    Line{ m, m + rotate(p - c, M_PI / 2) });\n    }\n    return outer;\n}\n\nReal area(const Polygon& U) {\n    Real area = 0;\n    for (int i = 0; i < U.size(); ++i) {\n        area += cross(U[i], U[(i + 1) % U.size()]);\n    }\n    return area / 2.0;\n}\n\nbool is_convex(const Polygon &U) {\n    int n = U.size();\n    for (int i = 0; i < n; i++) {\n        if (ccw(U[i], U[(i + 1) % n], U[(i + 2) % n]) == -1) return false;\n    }\n    return true;\n}\n\nconst int OUT = 0,\n          ON = 1,\n          IN = 2;\nint contains(const Polygon &U, const Point &p) {\n    int in = 0;\n    for(int i = 0; i < U.size(); i++) {\n        Point a = U[i] - p, b = U[(i + 1) % U.size()] - p;\n        if (cross(a, b) == 0 and dot(a, b) <= 0) return ON;\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= 0 and 0 < b.imag() and cross(a, b) < 0) in ^= 1;\n    }\n    return in ? IN : OUT;\n}\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(1);\n\n    int n; cin >> n;\n    vector<Point> p(n);\n    for (int i = 0; i < n; ++i) {\n        double x, y; cin >> x >> y;\n        p[i] = { x, y };\n    }\n\n    int q; cin >> q;\n    while (q--) {\n        double x, y; cin >> x >> y;\n        cout << contains(p, Point{ x, y }) << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define Fi first\n#define Se second\n#define pb push_back\n#define mp make_pair\n#define rep(x, a, b) for(int x = (a); x <= (b); ++ x)\n#define per(x, a, b) for(int x = (a); x >= (b); -- x)\n#define rop(x, a, b) for(int x = (a); x < (b); ++ x)\n#define por(x, a, b) for(int x = (a); x > (b); -- x) \n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef unsigned int unt;\ntypedef double db;\ntypedef pair <int, int> pii;\ntypedef vector <int> vi;\n\nconst db eps  = 1e-8;\nconst db _PI  = 3.1415926535897932384;\nconst db _E   = 2.7182818284590452354;\nconst int inf = 0x3f3f3f3f;\nconst LL INF  = 0x3f3f3f3f3f3f3f3fll;\n\nint dcmp(db x) {\n\tif(x > eps) return 1;\n\tif(x < -eps) return -1;\n\treturn 0;\n}\n\nint dcmp(db x, db y) {\n\treturn dcmp(x - y);\n}\n\nstruct Point {\n\tdb x, y;\n\tPoint(db _x = 0, db _y = 0) : x(_x), y(_y) {}\n\tvoid print() { printf(\"%.10f %.10f\", x, y); }\n};\nstruct Line {\n\tPoint p1, p2;\n\tLine() {};\n\tLine(Point _p1, Point _p2) : p1(_p1), p2(_p2) {};\n};\n\ntypedef Point Vector;\ntypedef Line Segment;\ntypedef vector<Point> Polygon;\n\n// CCW\nconst int CCW_COUNTER_CLOCKWISE = 1;\nconst int CCW_CLOCKWISE = -1;\nconst int CCW_ONLINE_FRONT = -2;\nconst int CCW_ONLINE_BACK = 2;\nconst int CCW_ON_SEGMENT = 0;\n\nVector operator + (Vector a, Vector b) {\n\treturn Vector(a.x + b.x, a.y + b.y);\n}\nVector operator - (Vector a, Vector b) {\n\treturn Vector(a.x - b.x, a.y - b.y);\n}\nVector operator * (Vector a, db b) {\n\treturn Vector(a.x * b, a.y * b);\n}\nVector operator / (Vector a, db b) {\n\treturn Vector(a.x / b, a.y / b);\n}\ndb operator * (Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndb operator ^ (Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb dis(Point a, Point b) {\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\ndb dis2(Point a, Point b) {\n\treturn (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n}\ndb dis(Vector a) {\n\treturn sqrt(a.x * a.x + a.y * a.y);\n}\ndb dis2(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\nPoint Project(Line L, Point p) {\n\tVector Base = L.p2 - L.p1;\n\tdb len = Base * (p - L.p1);\n\treturn L.p1 + Base * (len / dis2(L.p1, L.p2));\n}\nPoint Reflect(Line L, Point p) {\n\treturn p + (Project(L, p) - p) * 2.0;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector p01 = p1 - p0, p02 = p2 - p0;\n\tif(dcmp(p01 ^ p02) == 1) return CCW_COUNTER_CLOCKWISE; // 逆时针 \n\tif(dcmp(p01 ^ p02) == -1) return CCW_CLOCKWISE;        // 顺时针 \n\tif(dcmp(p01 * p02) == -1) return CCW_ONLINE_BACK;\n\tif(dcmp(dis2(p01), dis2(p02)) == -1) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn dcmp(a * b) == 0;\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a2 - a1, b2 - b1);\n}\nbool isOrthogonal(Line a, Line b) {\n\treturn isOrthogonal(a.p2 - a.p1, b.p2 - b.p1);\n}\nbool isParallel(Vector a, Vector b) {\n\treturn dcmp(a ^ b) == 0;\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a2 - a1, b2 - b1);\n}\nbool isParallel(Line a, Line b) {\n\treturn isParallel(a.p2 - a.p1, b.p2 - b.p1);\n}\nbool IntersectSS(Point a1, Point a2, Point b1, Point b2) {\n\treturn ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\nbool IntersectSS(Segment a, Segment b) {\n\treturn IntersectSS(a.p1, a.p2, b.p1, b.p2);\n}\nPoint getCrossPointSS(Segment a, Segment b) {\n\tVector Base = b.p2 - b.p1;\n\tdb S1 = fabs(Base ^ (a.p1 - b.p1));\n\tdb S2 = fabs(Base ^ (a.p2 - b.p1));\n\treturn a.p1 + (a.p2 - a.p1) * (S1 / (S1 + S2));\n}\n//Point getCrossPointLL(Line a, Line b) {\n//\tdb S1 = (b.p2 - b.p1) ^ (a.p2 - a.p1);\n//\tdb S2 = (b.p2 - b.p1) ^ (b.p2 - a.p1);\n//\tif(dcmp(S1) <= 0 && dcmp(S2) <= 0) return a.p1;\n//\treturn a.p1 + (a.p2 - a.p1) * (S2 / S1); //抄的别人代码，然而并不懂为啥/kel \n//}\ndb disLP(Line a, Point p) {\n\treturn fabs(((a.p2 - a.p1) ^ (p - a.p1)) / dis(a.p1, a.p2));\n}\ndb disSP(Segment a, Point p) {\n\tif(dcmp((a.p2 - a.p1) * (p - a.p1)) == -1) return dis(a.p1, p);\n\tif(dcmp((a.p1 - a.p2) * (p - a.p2)) == -1) return dis(a.p2, p);\n\treturn disLP(a, p);\n}\ndb disSS(Segment a, Segment b) {\n\tif(IntersectSS(a, b)) return 0.0;\n\treturn min({disSP(b, a.p1), disSP(b, a.p2), disSP(a, b.p1), disSP(a, b.p2)});\n}\ndb Area(Polygon p) {\n\tdb S = p.back() ^ p[0];\n\trop(i, 0, (int) p.size() - 1) S += p[i] ^ p[i + 1];\n\treturn fabs(S) / 2;\n}\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\trop(i, 0, n) if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == CCW_CLOCKWISE) return 0;\n\treturn 1;\n}\nint Contain(Polygon g, Point p) {\n\tint n = g.size();\n\tint cnt = 0;\n\trop(i, 0, n) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif(ccw(a, b, Point(0, 0)) == CCW_ON_SEGMENT) return 1;\n\t\tif(dcmp(a.y - b.y) == 0) continue;\n\t\tif(dcmp(a.y) == 0 && dcmp(a.x) >= 0) { \n\t\t\tif(dcmp(b.y) == -1) ++ cnt;\n\t\t\tcontinue;\n\t\t}\n\t\tif(dcmp(b.y) == 0 && dcmp(b.x) >= 0) {\n\t\t\tif(dcmp(a.y) == -1) ++ cnt;\n\t\t\tcontinue;\n\t\t}\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(dcmp(a.y) <= 0 && dcmp(b.y) >= 0 && dcmp(a ^ b) == 1) ++ cnt;\n\t}\n//\tcerr << cnt << endl;\n\treturn (cnt & 1) ? 2 : 0;\n}\n\nint main() {\n\tint n; scanf(\"%d\", &n);\n\tPolygon g; g.resize(n);\n\trop(i, 0, n) scanf(\"%lf%lf\", &g[i].x, &g[i].y);\n\tint q; scanf(\"%d\", &q);\n\trep(i, 1, q) {\n\t\tPoint p;\n\t\tscanf(\"%lf%lf\", &p.x, &p.y);\n\t\tprintf(\"%d\\n\", Contain(g, p));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// Code by ajcxsu\n// Problem: contain\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct P {\n    double x,y;\n    P (double x=0.0, double y=0.0):x(x),y(y) {}\n\n    P operator + (const P &b) { return P(x+b.x, y+b.y); }\n    P operator - (const P &b) { return P(x-b.x, y-b.y); }\n\n    double norm() { return x*x+y*y; }\n    double abs() { return sqrt(norm()); }\n} ;\ntypedef P Vector;\n\ndouble dot(P x, P y) { return x.x*y.x+x.y*y.y; }\ndouble cross(P a, P b) { return a.x*b.y-a.y*b.x; }\n\ntypedef vector<P> Polygon;\n\nistream& operator >>(istream &in, P &a) {\n    in>>a.x>>a.y;\n    return in;\n}\n\nostream& operator <<(ostream &out, P a) {\n    out<<a.x<<' '<<a.y;\n    return out;\n}\n#define EPS 1e-9\n\nint contain(P x, Polygon &S) {\n    bool res=0;\n    for(int i=1, len=S.size(); i<len;i++) {\n        Vector a=S[i-1]-x, b=S[i]-x;\n        if(fabs(cross(a,b))<EPS && dot(a,b)<EPS) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<EPS && b.y>EPS && cross(a,b)>EPS) res=!res;\n    }\n    return res?2:0;\n}\n\nPolygon S;\nint n;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cout.setf(ios::fixed);\n    cout<<setprecision(10);\n    cin>>n;\n    P na;\n    for(int i=0;i<n;i++) cin>>na,S.push_back(na);\n    S.push_back(S[0]);\n    int q;\n    cin>>q;\n    while(q--) {\n        cin>>na;\n        cout<<contain(na,S)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long lint;\n  \n//定数\nconst double EPS = 1e-4;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n  \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n  \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n  \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n  \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n    \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n    \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n    \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n    \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n  \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n  \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n  \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n  \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n  \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n  \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n        \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    qs.resize(k - 1);\n    return (qs);\n}\n  \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n  \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n  \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n  \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n  \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n    \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n    \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n    \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n  \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n  \nint main()\n{\n    int n, q;\n      \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n      \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n          \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            else {\n                assert(neq(abs(next - t), 0));\n                assert(neq(abs(p[j] - t), 0));\n                double th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n                fsum += th;\n            }\n        }\n        printf(\"%d\\n\", state ? state : 2 * eq(abs(fsum), 2 * acos(-1)));\n    }\n      \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst double PI=3.14159265358979323846264338327950288419716939;\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double fx=0,double fy=0)\n\t{\n\t\tx=fx;\n\t\ty=fy;\n\t}\n\tvoid Read()\n\t{\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tvoid Write()\n\t{\n\t\tprintf(\"%.9lf %.9lf\",x,y);\n\t}\n\tdouble operator ^(Point const b)const\n\t{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator |(Point const b)const\n\t{\n\t\treturn x*b.y-b.x*y;\n\t}\n\tdouble operator ==(Point const b)const\n\t{\n\t\treturn sqrt((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));\n\t}\n\tPoint operator *(double const b)const\n\t{\n\t\treturn Point(x*b,y*b);\n\t}\n\tPoint operator +(Point const b)const\n\t{\n\t\treturn Point(x+b.x,y+b.y);\n\t}\n\tPoint operator -(Point const b)const\n\t{\n\t\treturn Point(x-b.x,y-b.y);\n\t}\n\tbool operator !=(Point const b)const\n\t{\n\t\tif(1e-5<=fabs(x-b.x))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif(1e-5<=fabs(y-b.y))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n};\nPoint Symmetrical(Point a,Point m=Point(0,0))\n{\n\treturn Point(m.x*2-a.x,m.y*2-a.y);\n}\n/**\n *      /\n *   a /\n *    m\n *   / b\n *  /\n *\n *    a\n *\n * ---m-----\n *\n *    b\n * return b;\n */\nstruct Vector\n{\n\tPoint a,b;\n\tVector(Point f=Point(0,0),Point e=Point(0,0))\n\t{\n\t\ta=f;\n\t\tb=e;\n\t}\n\tdouble operator ^(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.x-c.b.x)+(c.a.y-c.b.y)*(a.y-b.y);\n\t}\n\tdouble operator |(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.y-c.b.y)-(c.a.x-c.b.x)*(a.y-b.y);\n\t}\n};\nPoint ProjectivePoint(Point a,Vector b)\n{\n\tdouble c=Vector(b.a,a)^Vector(b.a,b.b);\n\tc/=(b.a==b.b)*(b.a==b.b);\n\treturn (b.b-b.a)*c+b.a;\n}\n/**\n *     *\n *     |\n *     |\n * *---m-----*\n *\n *         *\n *         |\n *         |\n * *----*  m\n * return m;\n */\ndouble PointToVector(Point a,Vector b)\n{\n\tPoint c=ProjectivePoint(a,b);\n\tif(\n\t\t(\n\t\t\t(b.a.x<=c.x)==(c.x<=b.b.x)\n\t\t)\n\t\t&&\n\t\t(\n\t\t\t(b.a.y<=c.y)==(c.y<=b.b.y)\n\t\t)\n\t)\n\t{\n\t\treturn a==c;\n\t}\n\treturn min(a==b.a,a==b.b);\n}\n/**\n *   *\n *   |\n * *------*\n *\n *           *\n *          /\n *  *------*\n * return min_dis;\n */\nbool InRectangle(Point a,Point b,Point c)\n{\n\treturn\n\tmin(b.x,c.x)<=a.x&&a.x<=max(b.x,c.x)\n\t&&\n\tmin(b.y,c.y)<=a.y&&a.y<=max(b.y,c.y);\n}\n/**\n *   a\n *  b---*\n *  |   |\n *  *---c\n *  return 0;\n *\n *  b---*\n *  |a  |\n *  *---c\n *  return 1;\n */\nbool RectangleIntersection(Point a0,Point a1,Point b0,Point b1)\n{\n\tint zx=fabs(a0.x+a1.x-b0.x-b1.x);\n\tint zy=fabs(a0.y+a1.y-b0.y-b1.y);\n\tint x=fabs(a0.x-a1.x)+fabs(b0.x-b1.x);\n\tint y=fabs(a0.y-a1.y)+fabs(b0.y-b1.y);\n\tif(zx<=x&&zy<=y)\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n/**\n *  *---*\n *  |   |\n *  *---*\n *\n *    *--*\n *    |  |\n *    |  |\n *    *--*\n * return 0;\n *\n *  *---*\n *  | *-+*\n *  *-+-*|\n *    |  |\n *    *--*\n * return 1;\n */\nbool Intersect(Vector a,Vector b)\n{\n\tdouble a_aa=a|Vector(a.a,b.a);\n\tdouble a_ab=a|Vector(a.a,b.b);\n\tdouble b_aa=b|Vector(b.a,a.a);\n\tdouble b_ab=b|Vector(b.a,a.b);\n\tif((a_aa==0||a_ab==0||((a_aa<0)^(a_ab<0)))&&(b_aa==0||b_ab==0||((b_aa<0)^(b_ab<0))))\n\t{\n\t\treturn RectangleIntersection(a.a,a.b,b.a,b.b);\n\t}\n\treturn 0;\n}\n/**\n *      *\n *     /\n *    /*\n *   /  \\\n *  /    \\\n * *      *\n * return 0;\n *\n *      *\n *  *  /\n *   \\/\n *   /\\\n *  /  \\\n * *    *\n * return 1;\n */\nPoint QueryIntersect(Vector a,Vector b)\n{\n\tVector u(a.a,b.a);\n\tVector v(b.a,b.b);\n\tVector w(a.a,a.b);\n\tdouble c=(w|u)/(v|w);\n\treturn Point(b.a.x+(b.b.x-b.a.x)*c,b.a.y+(b.b.y-b.a.y)*c);\n}\n/**\n *        *\n * *     /\n *  \\   /\n *   \\ /\n *    m\n *   / \\\n *  *   \\\n *       *\n * return m;\n */\ndouble VectorToVector(Vector a,Vector b)\n{\n\tif(Intersect(a,b))\n\t{\n\t\treturn 0.0;\n\t}\n\treturn min\n\t(\n\t\tmin(PointToVector(a.a,b),PointToVector(a.b,b)),\n\t\tmin(PointToVector(b.a,a),PointToVector(b.b,a))\n\t);\n}\n/**\n *   *----*\n *     |\n * *--------*\n *\n * *-----*\n *        \\\n *         *-----*\n * return min_dis;\n */\nint PolygonPoint(Point a,Point point[],int n)\n{\n\tpoint[n+1]=point[1];\n\tbool now=0;\n\tREP(i,1,n)\n\t{\n\t\tif(Intersect(Vector(a,Point(1e6,a.y)),Vector(point[i],point[i+1])))\n\t\t{\n\t\t\tif(\n\t\t\t\t(PointToVector(a,Vector(point[i],point[i+1]))<=1e-5))\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif((a.y<point[i].y)^(a.y<point[i+1].y))\n\t\t\t{\n\t\t\t\tnow^=1;\n\t\t\t}\n\t\t}\n\t}\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\treturn 2;\n}\ndouble Area(Point point[],int n)\n{\n\tdouble result=0;\n\tREP(i,2,n)\n\t{\n\t\tresult+=point[i-1]|point[i];\n\t}\n\tresult+=point[n]|point[1];\n\treturn fabs(result)/2.0;\n}\ndouble Perimeter(Point point[],int n)\n{\n\tdouble result=0;\n\tREP(i,2,n)\n\t{\n\t\tresult+=(point[i-1]==point[i]);\n\t}\n\treturn result+(point[1]==point[n]);\n}\nbool CheckConvexHull(Point point[],int n)\n{\n\tdouble first=0,c;\n\tpoint[++n]=point[1];\n\tREP(i,1,n-1)\n\t{\n\t\tif(!first)\n\t\t{\n\t\t\tfirst=Vector(point[i],point[i+1])|Vector(point[i+1],point[i+2]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=(Vector(point[i],point[i+1])|Vector(point[i+1],point[i+2]));\n\t\t\tif(c!=0&&((first<0)^(c<0)))\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nPoint f_point;\nbool Cmp(Point a,Point b)\n{\n\tdouble c=Vector(f_point,a)|Vector(f_point,b);\n\tif(0<c)\n\t{\n\t\treturn 1;\n\t}\n\tif(c==0&&(f_point==a)<(f_point==b))\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nint GetConvexHull(Point point[],Point st[],int n)\n{\n\tREP(i,2,n)\n\t{\n\t\tif(point[i].y<point[1].y||point[i].y==point[1].y&&point[i].x<point[1].x)\n\t\t{\n\t\t\tswap(point[i],point[1]);\n\t\t}\n\t}\n\tf_point=point[1];\n\tsort(point+2,point+1+n,Cmp);\n\tint top=1;\n\tst[1]=point[1];\n\tREP(i,2,n)\n\t{\n\t\twhile(1<top&&(Vector(st[top-1],st[top])|Vector(st[top],point[i]))<=0)\n\t\t{\n\t\t\t--top;\n\t\t}\n\t\tst[++top]=point[i];\n\t}\n\treturn top;\n}\ndouble GetDiam(Point point[],int n)\n{\n\tdouble result=0;\n\tif(n==2)\n\t{\n\t\treturn point[1]==point[2];\n\t}\n\tpoint[++n]=point[1];\n\tint top=2;\n\tREP(i,1,n)\n\t{\n\t\twhile(\n\t\t\t(Vector(point[i],point[top])|Vector(point[top],point[i+1]))\n\t\t\t>\n\t\t\t(Vector(point[i],point[top+1])|Vector(point[top+1],point[i+1]))\n\t\t\t)\n\t\t{\n\t\t\ttop++;\n\t\t\tif(top==n+1)\n\t\t\t{\n\t\t\t\ttop=1;\n\t\t\t}\n\t\t}\n\t\tresult=max(result,max(point[i]==point[top],point[i+1]==point[top]));\n\t}\n\treturn result;\n}\nconst int MAXN=1e5+5;\nint n;\nPoint p[MAXN];\nint main()\n{\n\tscanf(\"%d\",&n);\n\tREP(i,1,n)\n\t{\n\t\tp[i].Read();\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\tPoint a;\n\tREP(i,1,q)\n\t{\n\t\ta.Read();\n\t\tprintf(\"%d\\n\",PolygonPoint(a,p,n));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <queue>\n#include <numeric>\n#include <iomanip>\n#include <map>\n#include <complex>\nusing namespace std;\nusing ll = long long;\n#define MOD 1000000007\n#define INF 1LL << 59\n\nusing Point = complex<double>;\n\nistream &operator>>(istream &is, Point &p)\n{\n    double a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\nostream &operator<<(ostream &os, Point &p)\n{\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nconst double EPS = 1e-10, PI = acos(-1);\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\n//二つのスカラーが等しいか\n#define EQ(a, b) (abs((a) - (b)) < EPS)\n//二つのベクトルが等しいか\n#define EQV(a, b) (EQ((a), real(), (b).real()) && EQ((a), imag(), (b).imag()))\n\nnamespace std\n{\nbool operator<(const Point &a, const Point &b)\n{\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\nstruct Line\n{\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    //a, bはそれぞれ座標を指す. これより一つの「line」に対して二個の点を持つことになる\n    Line(double A, double B, double C) // Ax + By = C\n    {\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p)\n    {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a)\n    {\n        return is >> a.a >> a.b;\n    }\n};\n\nstruct Segment : Line\n{\n    Segment() {}\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle\n{\n    Point p;\n    double r;\n\n    Circle() {}\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\n\ndouble dot(const Point a, const Point b)\n{\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\ndouble cross(const Point a, const Point b)\n{\n    return real(a) * imag(b) - imag(a) * real(b);\n}\nint ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS)\n        return +1; // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -EPS)\n        return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0)\n        return +2; // \"ONLINE_BACK\"\n    if (norm(b) < norm(c))\n        return -2; // \"ONLINE_FRONT\"\n    return 0;      // \"ON_SEGMENT\"\n}\n\nbool parallel(const Line &a, const Line &b)\n{\n    return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool orthogonal(const Line &a, const Line &b)\n{\n    return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint reflection(const Line &l, const Point &p)\n{\n    return p + (projection(l, p) - p) * 2.0;\n}\n\nbool Intersect(const Line &l, const Point &p)\n{\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Line &l, const Line &m)\n{\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p)\n{\n    return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s)\n{\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool intersect(const Segment &s, const Segment &t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nPoint crosspoint(const Line &l, const Line &m)\n{\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS)\n        return m.a;\n    return m.a + (m.b - m.a) * B / A;\n}\n\nPoint crosspoint(const Segment &l, const Segment &m)\n{\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS)\n        return m.a;\n    return m.a + (m.b - m.a) * B / A;\n}\n\ndouble distance(const Point &a, const Point &b)\n{\n    return abs(a - b);\n}\n\ndouble distance(const Line &l, const Point &p)\n{\n    return abs(p - projection(l, p));\n}\n\ndouble distance(const Line &l, const Line &m)\n{\n    return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\ndouble distance(const Segment &s, const Point &p)\n{\n    Point r = projection(s, p);\n    if (intersect(s, r))\n        return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble distance(const Segment &a, const Segment &b)\n{\n    if (intersect(a, b))\n        return 0;\n    return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\ndouble distance(const Line &l, const Segment &s)\n{\n    if (intersect(l, s))\n        return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\n\ndouble area2(const Polygon &p)\n{\n    double A = 0;\n    for (int i = 0; i < (int)p.size(); ++i)\n    {\n        A += cross(p[i], p[(i + 1) % p.size()]);\n    }\n    return A;\n}\n\nbool isConvex(const Polygon &p)\n{\n    for (int i = 0; i < (int)p.size(); ++i)\n    {\n        if (cross(p[(i - 1 + p.size()) % p.size()] - p[i], p[i] - p[(i + 1) % p.size()]) < -EPS)\n            return false;\n    }\n    return true;\n}\n\nenum\n{\n    OUT,\n    ON,\n    IN\n};\n\nint contains(const Polygon &Q, const Point &p)\n{\n    bool in = false;\n    for (int i = 0; i < Q.size(); ++i)\n    {\n        Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n        if (a.imag() > b.imag())\n            swap(a, b);\n        if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0)\n            in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0)\n            return ON;\n    }\n    return in ? IN : OUT;\n}\nint main()\n{\n    int N;\n    cin >> N;\n    Polygon p(N);\n    for (auto &s : p)\n        cin >> s;\n\n    int Q;\n    cin >> Q;\n    while (Q--)\n    {\n        Point q;\n        cin >> q;\n        cout << contains(p, q) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//计算几何 板子\n#include<bits/stdc++.h>\nusing namespace std ;\n#define eps 1e-10\n#define equals(a , b) (fabs((a) - (b)) < eps)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1 ;\nstatic const int ONCLICK_BACK = 2 ;\nstatic const int ONLINE_FRONT = -2 ;\nstatic const int ON_SEGMENT = 0 ;\n\nclass Point\n{\npublic:\n    double x , y;\n\n    Point(double x = 0 ,double y = 0):x(x) , y(y) {}\n\n    Point operator +(Point p){return Point(x + p.x , y + p.y) ;}\n    Point operator -(Point p){return Point(x - p.x , y - p.y) ;}\n    Point operator *(double a){return Point(a * x , a * y) ;}\n    Point operator /(double a){return Point(x / a , y / a) ;}\n\n    double abs() {return sqrt(norm()) ;}\n    double norm() {return x * x + y * y ;}\n\n    bool operator < (const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n    bool operator == (const Point &p) const\n    {\n        return fabs(x - p.x) < eps && fabs(y - p.y) < eps ;\n    }\n\n};\n\ntypedef Point Vector ;\n\nstruct Segment  //表示线段结构体\n{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point _p1,Point _p2):p1(_p1),p2(_p2){}\n};\n\ntypedef Segment Line ;\n\nclass Circle{  //表示圆的结构体\npublic:\n    Point c ;\n    double r ;\n    Circle(Point c = Point() , double r = 0.0):c(c) ,r(r){}\n};\n\ntypedef vector<Point> Polygon ; //不规则多边形\n\ndouble dot(Vector a , Vector b)  // 向量a,b的内积,就是向量a*b\n{\n    return a.x * b.x + a.y * b.y ;\n}\n\ndouble cross(Vector a, Vector b)  //向量a,b外积\n{\n\treturn a.x * b.y - a.y * b.x ;\n}\n\nbool isOrthogonal(Vector a , Vector b)  //判断是否正交\n{\n    return equals(dot(a , b) , 0.0) ;\n}\n\nbool isOrthogonal(Point a1 , Point a2 , Point b1 , Point b2)\n{\n    return isOrthogonal(a1 - a2 , b1 - b2) ;\n}\n\nbool  isOrthogonal(Segment s1 , Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1 , s2.p2 - s2.p1) , 0.0) ;\n}\n\nbool isParallel(Vector a, Vector b)  //判断是否平行\n{\n\treturn equals(cross(a, b), 0.0) ;\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn isParallel(a1 - a2, b1 - b2) ;\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0) ;\n}\n\nPoint project(Segment s, Point p)  //p在s上的投影\n{\n    Point base = s.p2 - s.p1 ;\n    double r = dot(p - s.p1 , base) / base.norm() ;\n    return s.p1 +base * r ;\n}\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求\n*/\n\nPoint reflect(Segment s , Point p)\n{\n    return p + (project(s , p) - p) * 2.0 ;\n}\n\nint ccw(Point p0 , Point p1 , Point p2)//判断三个点相对位置  // 判断逆时针方向的时候也可以使用\n{\n\tPoint a = p1 - p0 ;\n\tPoint b = p2 - p0 ;\n\tif(cross(a , b) > eps) return 1 ;  //p0,p1,p2成逆时针方向\n\tif(cross(a , b) < -eps) return -1 ;  //p0,p1,p2成顺时针方向\n\tif(dot(a , b) < -eps) return 2 ;  //p2 p0 p1一次排列在同一直线上\n\tif(a.norm() < b.norm()) return -2 ;  // p0 p1 p2一次排列在同一直线上\n\treturn 0 ;  //p2在线段p0p1上\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)  //判断是否相交 通过ccw来判断\n{\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1 , Segment s2)\n{\n    return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2) ;\n}\n\ndouble getdis(Point a , Point b)  //求俩点间的距离\n{\n\treturn (a - b) . abs() ; //点a与点b之间的距离等于向量a-b或b-a的绝对值。\n}\n\n//注意：这里Segmet s是不规范的应该是 Line s 才对\ndouble getdis_Li(Segment s , Point p)  //点与直线的距离\n{\n\treturn fabs(cross(s.p2 - s.p1 , p - s.p1)/(s.p2-s.p1).abs());\n}\n\ndouble getdis_sp(Segment s , Point p)  //点与线段的距离\n{\n\tif(dot(s.p2 - s.p1 , p - s.p1) < 0.0) return (p-s.p1).abs();\n\tif(dot(s.p1 - s.p2 , p - s.p2) < 0.0) return (p-s.p2).abs();\n\treturn getdis_Li(s , p) ;\n}\n\ndouble getdis_ss(Segment s1 , Segment s2)  //线段与线段之间的距离\n{\n\tif(intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2)) return 0.0 ;\n\treturn min(min(getdis_sp(s1 , s2.p1) , getdis_sp(s1 , s2.p2)) , min(getdis_sp(s2 , s1.p1) , getdis_sp(s2 , s1.p2))) ;\n}\n\nPoint getCrossPoint(Segment s1 , Segment s2) //线段的交点，返回的是点\n{\n    Vector base = s2.p2 - s2.p1 ;\n    double d1 = abs(cross(base , s1.p1 - s2.p1)) ;\n    double d2 = abs(cross(base , s1.p2 - s2.p2)) ;\n    double t = d1 / (d1 + d2) ;\n    return s1.p1 + (s1.p2 - s1.p1) * t ;\n}\n\nbool intersect(Circle c , Line l) //判断线和圆是否相交\n{\n    if(getdis_Li(l , c.c) > c.r)\n    {\n        return false ;\n    }\n    else\n    {\n        return true ;\n    }\n}\n\nbool intersect(Circle c1, Circle c2) {//判断圆c1和圆c2是否相交\n\tif((c1.c - c2.c).abs() <= c1.r + c2.r)\n    {\n\t\treturn true;\n\t}\n\telse\n    {\n\t\treturn false;\n\t}\n}\n\ndouble arg(Vector p)\n{\n    return atan2(p.y , p.x) ;\n}\n\nVector polar(double a , double r)\n{\n    return Point(cos(r) * a, sin(r) * a) ;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l)  //直线与圆的交点\n{\n    assert(intersect(c , l)) ;\n    Vector pr = project(l , c.c) ;\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs() ;\n    double base = sqrt(c.r * c.r - (pr - c.c).norm()) ;\n    return make_pair(pr + e * base, pr - e * base);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2)  //圆与圆相交\n{\n    assert(intersect(c1, c2));\n    double d = (c1.c -c2.c).abs() ;\n    double a = acos((c1.r * c1.r + d * d - c2.r *c2.r) / (2 * c1.r *d)) ;\n    double t = arg(c2.c - c1.c) ;\n    return make_pair(c1.c + polar(c1.r  , t + a) , c1.c + polar(c1.r , t - a)) ;\n}\n\nint contains(Polygon g , Point p) // 点的内包\n{\n    int n = g.size() ;\n    bool x = false ;\n    for(int i = 0 ; i <n ; ++i)\n    {\n        Point a = g[i] - p ,b = g[(i + 1) % n] - p ;\n        if(abs(cross(a , b)) < eps && dot(a , b) < eps)\n            return 1 ;\n        if(a.y > b.y)\n            swap(a , b) ;\n        if(a.y < eps && eps < b.y && cross(a , b) > eps)\n            x = !x ;\n    }\n    return (x ? 2 : 0) ;\n}\n\nint main()\n{\n    int n ;\n    cin >> n ;\n    Polygon g ;\n    Point temp ;\n    while(n --)\n    {\n        cin >> temp.x >> temp.y ;\n        g.push_back(temp) ;\n    }\n    cin >> n ;\n    while(n --)\n    {\n        cin >> temp.x >> temp.y ;\n        cout << contains(g , temp) << endl ;\n    }\n    return 0 ;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\ndouble zz(Vector a,Vector b){\nif(a.absv()<EPS || b.absv()<EPS) return 100;\nelse{\na=a/a.absv();\nb=b/b.absv();\ndouble co=dot(a,b),si=cross(a,b);\nif(co<=-1+EPS) return 100;\nelse if(si>0) return acos(co);\nelse return -acos(co);\n}\n\n}\n\n\nint main(){\nint n,k=0,zh;\ndouble x,y;\ncin>>n;\nPoint a[110],q;\nVector v[110];\nfor(int i=0;i<n;i++){\ncin>>x>>y;\na[i].x=x;\na[i].y=y;\n}\na[n]=a[0];\ndouble henkaku=0.0;\nint qu;\ncin>>qu;\nfor(int i=0;i<qu;i++){\ncin>>x>>y;\nq.x=x,q.y=y;\nzh=0;\nhenkaku=0.0;\nfor(int i=0;i<n;i++){\nif(zz(a[i]-q,a[i+1]-q)==100) zh=1;\nelse henkaku=henkaku+zz(a[i]-q,a[i+1]-q);\n//cout<<zz(a[i]-q,a[i+1]-q)<<endl;\n\n}\nif(zh==1) cout<<\"1\"<<endl;\nelse if(fabs(henkaku)<1) cout<<\"0\"<<endl;\nelse cout<<\"2\"<<endl;\n//cout<<\"he \"<<henkaku<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> qua;\nvector <qua> v;\nconst double epx = 1e-7;\nint ccw(qua a,qua b, qua c)\n{\n    b-=a,c-=a,a=c*conj(b);\n    if(a.imag()>epx) return 1;\n    if(a.imag()<-epx) return -1;\n    if(a.real()<-epx) return 2;\n    if(abs(b)+epx<abs(c)) return -2;\n    return 0;\n}\ndouble Arg(qua a,qua b,qua c)\n{\n    b-=a,c-=a;\n    return arg(c*conj(b));\n}\nint inploygon(vector<qua> &ve,qua q)\n{\n    int n=ve.size();\n    double sum=0;\n    for(int i=0;i<n;i++)\n    {\n        if(ccw(ve[i],ve[(i+1)%n],q)==0) return 1;\n        sum+=Arg(q,ve[i],ve[(i+1)%n]);\n    }\n    if(abs(sum)<epx) return 0;\n    else return 2;\n}\nint main()\n{\n    int n,m;\n    double x,y;\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf\",&x,&y);\n        v.push_back(qua(x,y));\n    }\n    scanf(\"%d\",&m);\n    while(m--)\n    {\n        scanf(\"%lf%lf\",&x,&y);\n        printf(\"%d\\n\",inploygon(v,qua(x,y)));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\n  operator long double() const {\n    return val;\n  }\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator-() const {\n    return -val;\n  }\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n\n  template<typename T> Real operator-(const T& v) const {\n    return Real(*this) -= v;\n  }\n\n  template<typename T> Real operator*(const T& v) const {\n    return Real(*this) *= v;\n  }\n\n  template<typename T> Real operator/(const T& v) const {\n    return Real(*this) /= v;\n  }\n\n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  Real abs() const {\n    return std::abs(val);\n  }\n\n  Real sqrt() const {\n    return std::sqrt(val);\n  }\n\n  long double toLongDouble() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  os << fixed << setprecision(15) << a.toLongDouble();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nReal floor(const Real& r) {\n  return floor(r.toLongDouble());\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return norm().sqrt();\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline Point operator*(const Real& real, const Point& point) {\n  return point * real;\n}\n\ninline Point operator/(const Real& real, const Point& point) {\n  return point / real;\n}\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  bool operator==(const Line& line) const {\n    return ((line.vec() / vec()).y == 0) && (((line.a - a) / vec()).y == 0);\n  }\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\nclass Polygon : public vector<Point> {\npublic:\n  Polygon() {}\n\n  Polygon(int n) : vector<Point>(n) {}\n\n  Polygon(initializer_list<Point> p) : vector<Point>(p) {}\n\n  vector<Segment> getSides() const {\n    vector<Segment> res;\n    Point pre = back();\n    for (const auto& point : *this) {\n      res.emplace_back(pre, point);\n      pre = point;\n    }\n    return res;\n  }\n\n  vector<array<Point, 3>> getCorners() const {\n    vector<array<Point, 3>> res;\n    Point pre1 = *(end() - 2), pre2 = back();\n    for (const auto& point : *this) {\n      res.emplace_back(array<Point,3>({{pre1, pre2, point}}));\n      pre1 = pre2;\n      pre2 = point;\n    }\n    return res;\n  }\n\n  Point& operator[](int i) {\n    return vector::operator[](mod(i, (int)size()));\n  }\n\n  const Point& operator[](int i) const {\n    return vector::operator[](mod(i, (int)size()));\n  }\n\n  template<bool strict = false> bool cover(const Point& point) const {\n    bool res = false;\n    for (auto& side : getSides()) {\n      if (ccw(side, point) == ON) return strict ? false : true;\n      if (side.a.y > side.b.y) std::swap(side.a, side.b);\n      if (side.a.y <= point.y && point.y < side.b.y && ((side.b - point) / (side.a - point)).y > 0) res = !res;\n    }\n    return res;\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  Polygon polygon(n);\n  for (auto& p : polygon) cin >> p;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point point;\n    cin >> point;\n    if (polygon.cover<true>(point)) cout << 2 << endl;\n    else if (polygon.cover(point)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<list>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\ntypedef long long ll;\n\nbool debug = false;\nconst int NIL = -1;\nconst int INF = 1000000000;\nconst int NUM = 100010;\nconst double eps = 1e-10;\nclock_t START, END;\n\nint X, Y, E;\n\n//basic defitition\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n};\ntypedef Point Vector;\nVector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }\nVector operator - (Point A, Point B) { return Vector(A.x - B.x, A.y - B.y); }\nVector operator * (Vector A, double p) { return Vector(A.x * p, A.y * p); }\nVector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }\nbool operator < (const Point& a, const Point& b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }\nint dcmp(double x) { if (fabs(x) < eps)return 0; else return x < 0 ? -1 : 1; }\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\nstruct Line {\n\tPoint p;\n\tVector v;\n\tLine(Point p, Vector v) :p(p), v(v) {}\n\tPoint point(double t) { return p + v * t; }\n\t//Line move(double d) { return Line(p + Normal(v) * d, v); }\n};\n// basic operator\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }\ndouble Length(Vector A) { return sqrt(Dot(A, A)); }\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }\nVector Rotate(Vector A, double rad) { return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); }\nVector Normal(Vector A) { double L = Length(A); return Vector(-A.y / L, A.x / L); } //A is not zero vector\n//point and line\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n\tVector u = P - Q;\n\tdouble t = Cross(w, u) / Cross(v, w);\n\treturn P + v * t;\n}//two lines only have one intersection and Cross(v,w) is not zero\ndouble DistanceToLine(Point P, Point A, Point B) {\n\tVector v1 = B - A, v2 = P - A;\n\treturn fabs(Cross(v1, v2)) / Length(v1);\n}\ndouble DistanceToSegment(Point P, Point A, Point B) {\n\tif (A == B) return Length(P - A);\n\tVector v1 = B - A, v2 = P - A, v3 = P - B;\n\tif (dcmp(Dot(v1, v2)) < 0) return Length(v2);\n\telse if (dcmp(Dot(v1, v3)) > 0) return Length(v3);\n\telse return fabs(Cross(v1, v2)) / Length(v1);\n}\nPoint GetLineProjection(Point P, Point A, Point B) {\n\tVector v = B - A;\n\treturn A = v * (Dot(v, P - A) / Dot(v, v));\n}\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n\tdouble c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1), c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n\treturn dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\nbool OnSegment(Point p, Point a1, Point a2) {\n\treturn dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) <= 0;\n}\ndouble angle(Vector v) { return atan2(v.y, v.x); }\n//polygon\ntypedef vector<Point> Polygon;\ndouble ConvexPolygonArea(Point* p, int n) {\n\tdouble area = 0;\n\tfor (int i = 1; i < n - 1; i++)\n\t\tarea = Cross(p[i] - p[0], p[i + 1] - p[0]);\n\treturn area / 2;\n}\nint isPointInPolygon(Point p, Polygon& poly) {\n\tint wn = 0;\n\tint n = poly.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tif (OnSegment(p, poly[i], poly[(i + 1) % n])) return -1;\n\t\tint k = dcmp(Cross(poly[(i + 1) % n] - poly[i], p - poly[i]));\n\t\tint d1 = dcmp(poly[i].y - p.y);\n\t\tint d2 = dcmp(poly[(i + 1) % n].y - p.y);\n\t\tif (k > 0 && d1 <= 0 && d2 > 0) wn++;\n\t\tif (k < 0 && d2 <= 0 && d1 > 0) wn--;\n\t}\n\tif (wn != 0) return 1;\n\treturn 0;\n}\n//circle\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c, double r) :c(c), r(r) {}\n\tPoint point(double a) { return Point(c.x + cos(a) * r, c.y + sin(a) * r); }\n};\nint getLineCircleIntersection(Line L, Circle C, double& t1, double& t2, vector<Point>& sol) {\n\tdouble a = L.v.x, b = L.p.x - C.c.x, c = L.v.y, d = L.p.y - C.c.y;\n\tdouble e = a * a + c * c, f = 2 * (a * b + c * d), g = b * b + d * d - C.r * C.r;\n\tdouble delta = f * f - 4 * e * g;\n\tif (dcmp(delta) < 0)\n\t\treturn 0;\n\tif (dcmp(delta) == 0) {\n\t\tt1 = t2 = -f / (2 * e);\n\t\tsol.push_back(L.point(t1));\n\t\treturn 1;\n\t}\n\tt1 = (-f - sqrt(delta)) / (2 * e);\n\tsol.push_back(L.point(t1));\n\tt2 = (-f + sqrt(delta)) / (2 * e);\n\tsol.push_back(L.point(t2));\n\treturn 2;\n}\nint getCircleCircleIntersection(Circle C1, Circle C2, vector<Point>& sol) {\n\tdouble d = Length(C1.c - C2.c);\n\tif (dcmp(d) == 0) {\n\t\tif (dcmp(C1.r - C2.r) == 0) return -1;\n\t\treturn 0;\n\t}\n\tif (dcmp(C1.r + C2.r - d) < 0) return 0;\n\tif (dcmp(fabs(C1.r - C2.r) - d) > 0) return 0;\n\tdouble a = angle(C2.c - C1.c);\n\tdouble da = acos((C1.r * C1.r + d * d - C2.r * C2.r) / (2 * C1.r * d));\n\tPoint p1 = C1.point(a - da), p2 = C1.point(a + da);\n\tsol.push_back(p1);\n\tif (p1 == p2) return 1;\n\tsol.push_back(p2);\n\treturn 2;\n}\n\n\nint main(void)\n{\n\tif (debug) {\n\t\tSTART = clock();\n\t\tfreopen(\"in29.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t}\n\tPolygon poly;\n\tint n, q, ans;\n\tdouble x, y;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf%lf\", &x, &y);\n\t\tpoly.push_back(Point(x, y));\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf%lf\", &x, &y);\n\t\tans = isPointInPolygon(Point(x, y), poly);\n\t\tif (ans == -1)\n\t\t\tcout << \"1\" << endl;\n\t\telse if (ans == 1)\n\t\t\tcout << \"2\" << endl;\n\t\telse\n\t\t\tcout << \"0\" << endl;\n\t}\n\tif (debug) {\n\t\tEND = clock();\n\t\tdouble endtime = (double)(END - START) / 1000;\n\t\tprintf(\"total time = %lf s\", endtime);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include\"bits/stdc++.h\"\n\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define FOR(i,m,n) for(int i=(m);i<(n);i++)\n\nconst double EPS = 1e-8;\ntypedef complex<double> point;\npoint operator*(const point&p, const double &d) {\n\treturn point(real(p)*d, imag(p)*d);\n}\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\t//istream &operator>>(istream &stream, point &p) {\n\t//\tstream >> p.real >> p.imag;\n\t//\treturn stream;\n\t//}\n}\n//直線or線分\nstruct Line : public vector<point> {\n\tLine(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n//外積\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n//内積\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n//交差判定\nbool intersectLL(const Line &l1, const Line &l2) {\n\treturn abs(cross(l1[1] - l1[0], l2[1] - l2[0])) > EPS || //non-parallel\n\t\tabs(cross(l1[1] - l1[0], l2[0] - l1[0])) < EPS; //same line\n}\nbool intersectLS(const Line &l, const Line &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])* // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const Line &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSS(const Line &s, const Line &t) {\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\nbool intersectSP(const Line &s, const point &p) { //verified on 2020/04/03 https://onlinejudge.u-aizu.ac.jp/status/users/Mojumbo/submissions/1/1157/judge/4316978/C++14\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; //triangle inequality\n}\n//距離,交点\n//射影 直線lにpから下した垂線との交点\n\npoint projection(const Line &l, const point &p) { //verified on 2020/04/03 https://onlinejudge.u-aizu.ac.jp/status/users/Mojumbo/submissions/1/1157/judge/4316978/C++14\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + (l[0] - l[1])*t;\n}\n//射影 直線lを対象軸としてpと線対称にある点\npoint reflection(const Line &l, const point &p) {\n\treturn p + (projection(l, p) - p)*2;\n}\ndouble distancePP(const point& a, const point& b) {\n\treturn sqrt(norm(a - b));\n}\ndouble distanceLP(const Line &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const Line&l, const Line &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const Line &l, const Line &s) {\n\tif (intersectLS(l, s))return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const Line &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r))return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const Line &s, const Line &t) { //verified on 2020/04/03 https://onlinejudge.u-aizu.ac.jp/status/users/Mojumbo/submissions/1/1157/judge/4316978/C++14\n\tif (intersectSS(s, t))return 0;\n\treturn min({ distanceSP(s,t[0]),distanceSP(s,t[1]),distanceSP(t,s[0]),distanceSP(t,s[1]) });\n}\npoint crosspoint(const Line &l, const Line &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS&&abs(B) < EPS)return m[0];//same line\n\tif (abs(A) < EPS)assert(false); // Precondition not satisfied\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\ndouble dist(point &p1, point &p2) {\n\treturn abs(p1 - p2);\n}\n\n//円\nstruct Circle {\n\tpoint p; double r;\n\tCircle(const point &p, double r) : p(p), r(r) { }\n};\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n//2点を通る半径Rの円の中心\npair<point, point> get_circle_from_2points(point &p1, point &p2, double R) {\n\tdouble d = dist(p1, p2);\n\tdouble x1 = p1.real(), x2 = p2.real();\n\tdouble y1 = p1.imag(), y2 = p2.imag();\n\tif (p1.imag() == p2.imag()) {\n\t\tdouble x = (x1 + x2) / 2.0;\n\t\tdouble dy = sqrt(R - d * d / 4);\n\t\treturn { { x,y1 + dy },{ x,y1 - dy } };\n\t}\n\telse {\n\t\tdouble m = (x1 - x2) / (y2 - y1);\n\t\tdouble t = sqrt(R*R - d * d / 4);\n\t\tdouble dx = sqrt((t*t) / (m*m + 1));\n\t\tdouble dy = sqrt(t*t - dx * dx);\n\t\tdouble gx = (x1 + x2) / 2;\n\t\tdouble gy = (y1 + y2) / 2;\n\t\tif (m > EPS) {\n\t\t\treturn { { gx + dx,gy + dy },{ gx - dx,gy - dy } };\n\t\t}\n\t\telse {\n\t\t\treturn { { gx + dx,gy - dy },{ gx - dx,gy + dy } };\n\t\t}\n\t}\n}\n//長方形\nstruct Square {\n\tdouble lx, ly, rx, ry;\n\tSquare(double lx_, double ly_, double rx_, double ry_, double h_) :lx(lx_), ly(ly_), rx(rx_), ry(ry_){};\n\tbool include(point &p) {\n\t\treturn p.real()+EPS >= lx && p.real()-EPS <= rx && p.imag()+EPS >= ly && p.imag()-EPS <= ry;\n\t}\n};\n// TODO: コンストラクタにvector<point>を渡して初期化したい\nstruct Polygon : public vector<point>{\n\t//0->OUT, 1->ON, 2->IN\n\tint contains(const point &p) {\n\t\tbool in = false;\n\t\tint N = this->size();\n\t\tfor (int i = 0; i < N; i++){\n\t\t\tpoint a = this->at(i) - p;\n\t\t\tpoint b = this->at((i + 1) % N) - p;\n\t\t\tif (imag(a) > imag(b)) {\n\t\t\t\tstd::swap(a,b);\n\t\t\t}\n\t\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\t\tif (cross(a, b) < 0)in = !in;\n\t\t\tif (cross(a, b) == 0 && dot(a, b) <= 0)return 1;\n\t\t}\n\t\treturn in ? 2 : 0;\n\t}\n};\n\nvoid solve() {\n\tint N; cin >> N;\n\tPolygon poly;\n\tREP(i, N) {\n\t\tdouble x, y; cin >> x >> y;\n\t\tpoint p(x, y);\n\t\tpoly.push_back(p);\n\t}\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tdouble x, y; cin >> x >> y;\n\t\tpoint p(x, y);\n\t\tcout << poly.contains(p) << endl;\n\t}\n}\nsigned main() {\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tsolve();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    pprint(){\n        cout << \"(\" << x << \",\" << y << \") \";\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n// cout << c << endl;\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n// cout << get_position(s1, s2.p1) << \" \" << get_position(s1, s2.p2)  << endl;\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n// cout << endl;\n// cout << get_position(s2, s1.p1) << \" \" << get_position(s2, s1.p2)  << endl;\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            // poly[i].pprint();\n            // poly[(i+1)%n].pprint();\n            // cout << endl;\n            count++;\n        }\n    }\n// cout << \"s \" << count << endl;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n// cout << \"p \" << count << endl;\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class T>\nstruct Vec2\n{\n\tVec2(){}\n\tVec2(T _x, T _y) : x(_x), y(_y) {}\n\n\tVec2 operator+(const Vec2& rhs) const { return Vec2(x + rhs.x, y + rhs.y); }\n\tVec2 operator-(const Vec2& rhs) const { return Vec2(x - rhs.x, y - rhs.y); }\n\tVec2 operator*(T s) const { return Vec2(x*s, y*s); }\n\tVec2 operator/(T s) const { return Vec2(x/s, y/s); }\n\tT dot(const Vec2& rhs) const { return x*rhs.x + y*rhs.y; }\n\tT cross(const Vec2& rhs) const { return x*rhs.y - y*rhs.x; }\n\tT sqlength() const { return x*x + y*y; }\n\tdouble length() const { return sqrt(sqlength()); }\n\tbool operator<(const Vec2& rhs) const\n\t{\n\t\tif (x != rhs.x) return x < rhs.x;\n\t\treturn y < rhs.y;\n\t}\n\n\tT x;\n\tT y;\n};\n\ntemplate<class T>\nT cross(const Vec2<T> &O, const Vec2<T> &A, const Vec2<T> &B)\n{\n\treturn (A - O).cross(B - O);\n}\n\ntemplate<class T>\nbool IsIntSegments(const Vec2<T>& A1, const Vec2<T>& A2, const Vec2<T>& B1, const Vec2<T>& B2)\n{\n\treturn (cross(A1, A2, B1)*cross(A1, A2, B2) <= 0 && cross(B1, B2, A1)*cross(B1, B2, A2) <= 0);\n}\n\ntemplate<class T>\nbool IsPointOnSegment(const Vec2<T>& P, const Vec2<T>& S, const Vec2<T>& E)\n{\n\tVec2<T> dir = E - S;\n\tif ((P - S).cross(dir) != 0) {\n\t\treturn false;\n\t}\n\tT prd = (P - S).dot(dir);\n\tif (prd < 0) {\n\t\treturn false;\n\t}\n\treturn prd <= dir.dot(dir);\n}\n\nstatic unsigned int Rand()\n{\n\tstatic unsigned int r = 123456789;\n\tr = r ^ (r << 13);\n\tr = r ^ (r >> 17);\n\tr = r ^ (r << 5);\n\treturn r;\n}\n\ntemplate<class T>\nint CheckPolyInclude(const vector<Vec2<T> >& poly, Vec2<T> P)\n{\n\tfor (size_t i = 0; i < poly.size() - 1; i++) {\n\t\tif (IsPointOnSegment(P, poly[i], poly[i+1]) ) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tVec2<T> O;\n\twhile (1) {\n\t\tbool ok = true;\n\t\tO = Vec2<T>(10000 + Rand() % 10000, Rand() % 10000);\n\t\tfor (size_t i = 0; i < poly.size() - 1; i++) {\n\t\t\tif (IsPointOnSegment(poly[i], P, O)) {\n\t\t\t\tok = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (ok) {\n\t\t\tsize_t num = 0;\n\t\t\tfor (size_t i = 0; i < poly.size() - 1; i++) {\n\t\t\t\tif (IsIntSegments(P, O, poly[i], poly[i + 1])) {\n\t\t\t\t\tnum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn num % 2 * 2;\n\t\t}\n\t}\n}\n\nint main()\n{\n\ttypedef Vec2<long long> Vec;\n\n\tint n, q;\n\tcin >> n;\n\tvector<Vec> poly(n + 1);\n\tfor (int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpoly[i] = Vec(x, y);\n\t}\n\tpoly.back() = poly.front();\n\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tcout << CheckPolyInclude(poly, Vec(x, y)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nclass Seg{\npublic:\n    Point p1;\n    Point p2;\n    Seg(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n};\n\nclass Circle{\npublic:\n    Point p;\n    double r;\n    Circle(Point p_, double r_){\n        p = p_;\n        r = r_;\n    }\n};\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint project(Seg s, Point p0){\n    if(s.p1 == p0){\n        return p0;\n    }\n    if(s.p2 == p0){\n        return p0;\n    }\n    return s.p1 + (s.p2 - s.p1) / (s.p2 - s.p1).abs() * (p0 - s.p1).abs() * getCos(s.p2 - s.p1, p0 - s.p1);\n}\n\nPoint reflect(Seg s, Point p0){\n    Point p = project(s, p0);\n    return p0 + (p - p0) * 2;\n}\n\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nint counterClockwise(Point p0, Point p1, Point p2){\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n    if(cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(v1, v2) < -EPS) return CLOCKWISE;\n    if(dot(v1, v2) < -EPS) return ONLINE_BACK;\n    if(v1.norm() < v2.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Seg s1, Seg s2){\n    int t1 = counterClockwise(s1.p1, s1.p2, s2.p1);\n    int t2 = counterClockwise(s1.p1, s1.p2, s2.p2);\n    int t3 = counterClockwise(s2.p1, s2.p2, s1.p1);\n    int t4 = counterClockwise(s2.p1, s2.p2, s1.p2);\n    if(t1 * t2 <= 0){\n        if(t3 * t4 <= 0){\n            return true;\n        }\n    }\n    return false;\n}\n\ndouble getDistanceLP(Seg s, Point p0){\n    return (project(s, p0) - p0).abs();\n}\n\ndouble getDistanceSP(Seg s, Point p0){\n    if(dot(s.p2 - s.p1, p0 - s.p1) < 0.0) return (p0 - s.p1).abs();\n    if(dot(s.p1 - s.p2, p0 - s.p2) < 0.0) return (p0 - s.p2).abs();\n    return (project(s, p0) -  p0).abs();\n}\n\ndouble getDistance(Seg s1, Seg s2){\n    if(intersect(s1, s2)){\n        return 0.0;\n    }\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint crossPoint(Seg s1, Seg s2){\n    double d1 = getDistanceLP(s2, s1.p1);\n    double d2 = getDistanceLP(s2, s1.p2);\n\n    return (s1.p2 * d1 + s1.p1 * d2) / (d1 + d2);\n}\n\n// 円と直線の交点\npair<Point, Point> getCrossPoints(Circle c, Seg s){\n    double d1 = getDistanceLP(s, c.p);\n    double d2 = sqrt(pow(c.r, 2) - pow(d1, 2));\n\n    Point p1 = project(s, c.p);\n    Vector v1 = s.p2 - s.p1;\n\n    Point cp1 = p1 + v1 / v1.abs() * d2;\n    Point cp2 = p1 - v1 / v1.abs() * d2;\n\n    if(cp1.x < cp2.x){\n        return make_pair(cp1, cp2);\n    }else if(cp1.x > cp2.x){\n        return make_pair(cp2, cp1);\n    }else{\n        return cp1.y < cp2.y ? make_pair(cp1, cp2) : make_pair(cp2, cp1);\n    }\n\n}\n\npair<Point, Point> getCrossPointsOfCircles(Circle c1, Circle c2){\n    if(c1.p.x > c2.p.x){\n        swap(c1, c2);\n    }\n    double d = (c2.p - c1.p).abs();\n    double t = asin((c2.p.y - c1.p.y) / d);\n    double a = acos((-pow(c2.r, 2) + pow(c1.r, 2) + pow(d, 2)) / (2 * c1.r * d));\n    //printf(\"d: %f, t: %f, a: %f\\n\", d, t * (180/3.14), a * (180/3.14));\n   \n    Point p1 = c1.p + Point(cos(t + a), sin(t + a)) * c1.r;\n    Point p2 = c1.p + Point(cos(t - a), sin(t - a)) * c1.r;\n\n    if(p1.x < p2.x){\n        return make_pair(p1, p2);\n    }else if(p1.x > p2.x){\n        return make_pair(p2, p1);\n    }else{\n        return p1.y < p2.y ? make_pair(p1, p2) : make_pair(p2, p1);\n    }\n}\n\n#define N_MAX 100\n#define Q_MAX 1000\n#define INF 100000000\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n\n    Point P[N_MAX];\n    for(int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &P[i].x, &P[i].y);\n    }\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        Point Q;\n        scanf(\"%lf %lf\", &Q.x, &Q.y);\n\n        int count = 0;\n        bool on_seg = false;\n        for(int j = 0; j < n; j++){\n            Seg side = (j == n - 1) ? Seg(P[j], P[0]) : Seg(P[j], P[j + 1]);\n            if(counterClockwise(side.p1, side.p2, Q) == ON_SEGMENT){\n                on_seg = true;\n                break;\n            }\n            if(intersect(side, Seg(Q, Point(0, INF)))){\n                if (counterClockwise(Q, Point(0, INF), side.p1) == ON_SEGMENT && \n                    counterClockwise(Q, Point(0, INF), side.p2) == ON_SEGMENT){\n                }else{\n                    count++;\n                }\n            }\n        }\n        if(on_seg){\n            printf(\"1\\n\");\n        }else if(count % 2 == 1){\n            printf(\"2\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n    }\n\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define For(a,b,c) for(int a=b;a<=c;++a)\n#define Dor(a,b,c) for(int a=b;a>=c;--a)\nusing namespace std;\ntypedef double DB;\nconst DB eps=1e-8;\nbool EQ(DB x,DB y) {\n\treturn abs(x-y)<eps;\n}\nstruct O {\n\tDB x,y;\n\tO operator + (const O &_) const {return (O){x+_.x,y+_.y};}\n\tO operator - (const O &_) const {return (O){x-_.x,y-_.y};}\n\tO operator * (const DB &k) const {return (O){x*k,y*k};}\n\tO operator / (const DB &k) const {return (O){x/k,y/k};}\n\tDB operator * (const O &_) const {return x*_.y-y*_.x;}\n\tDB operator ^ (const O &_) const {return x*_.x+y*_.y;}\n\tDB len() {return sqrt(x*x+y*y);}\n\tbool dn() {return y<-eps||(EQ(y,0)&&x<0);}\n\tbool operator < (const O &_) const {return x<_.x||(x==_.x&&y<_.y);}\n};\nbool cmp(O a,O b) {\n\tif(a.dn()!=b.dn()) return a.dn()<b.dn();\n\treturn a*b>0;\n}\nvoid rd(O &P) {\n\tscanf(\"%lf%lf\",&P.x,&P.y);\n}\nvoid wt(O p,int w=2) {\n\tprintf(\"(%.*f,%.*f)\\n\",w,p.x,w,p.y);\n}\nstruct L {\n\tO p,v;\n\tO operator & (const L &_) const {\n\t\treturn p+v*((_.v*(p-_.p))/(v*_.v));\n\t}\n\tbool operator < (const L &_) const {\n\t\treturn cmp(v,_.v);\n\t}\n};\nO operator / (const O &p,const L &l) {\n\treturn l.p+l.v*((l.v^(p-l.p))/(l.v^l.v));\n}\nDB dis(O a,O b) {\n\treturn (a-b).len();\n}\nDB dis(O a,L b) {\n\treturn dis(a,a/b);\n}\nO rot(O v,DB a) {\n\treturn (O){v.x*cos(a)-v.y*sin(a),v.x*sin(a)+v.y*cos(a)};\n}\nbool beng(O a,O b,O c) {\n\treturn (b.y-a.y)*(c.x-b.x)<=(c.y-b.y)*(b.x-a.x);\n}\nbool onSeg(O a,O b,O c) {\n\treturn EQ((b-a)*(c-a),0)&&((b-a)^(c-a))<eps;\n}\nbool ri(O p,L l) {\n\treturn (p-l.p)*l.v>eps;\n}\nint n,q; O Q[107],p;\nvoid inPoly() {\n\tint wn=0;\n\tFor(i,0,n-1) {\n\t\tif(onSeg(p,Q[i],Q[i+1])) {\n\t\t\tputs(\"1\");\n\t\t\treturn;\n\t\t}\n\t\tDB k=(Q[i+1]-Q[i])*(p-Q[i]),a=Q[i].y-p.y,b=Q[i+1].y-p.y;\n\t\tif(k>eps&&a<eps&&b>eps) ++wn;\n\t\tif(k<-eps&&b<eps&&a>eps) --wn;\n\t}\n\tif(wn!=0) puts(\"2\");\n\telse puts(\"0\");\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tFor(i,1,n) rd(Q[i]); Q[0]=Q[n];\n\tscanf(\"%d\",&q);\n\twhile(q--) {\n\t\trd(p);\n\t\tinPoly();\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n \ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n \nconst int N = -1;\nconst ld EPS = 1e-12;\n \nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n \ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n \nistream& operator>> (istream& is, complex<ld>& p){\n    ld val;\n    is >> val;\n    p.real(val);\n    is >> val;\n    p.imag(val);\n    return is;\n}\n \nld dot(PT a, PT b){ return real(conj(a)*b); }\nint crossCall = 0;\nclock_t crossClock = 0;\nld cross(PT a, PT b){\n\tclock_t st = clock();\n\tcrossCall++; \n\tld res = imag(conj(a)*b); \n\tcrossClock += clock()-st;\n\treturn res;\n}\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n \nPT proj(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + b*real(c/b);\n}\n \nPT reflect(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + conj(c/b)*b;\n}\n \nPT rotate(PT a, PT b, ld theta){\n    return (b-a)*polar<ld>(1, theta) + a;\n}\n \nint relpos(PT a, PT b, PT c){\n    b -= a, c -= a;\n\tld Y = cross(b, c);\n    if (Grt(Y, 0)) return LEFT;\n    if (Lss(Y, 0)) return RIGHT;\n\tld X = dot(b, c);\n    if (Lss(X, 0)) return BACK;\n    if (Grt(Y, 1)) return FRONT;\n    return ON;\n}\n \nint side(PT a, PT b, PT c){\n    b -= a, c -= a;\n    ld cr = cross(b, c);\n    return Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n \n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n    int as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n    if (as && as == bs || cs && cs == ds) return false;\n    else if (as || bs || cs || ds) return true;\n    for (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n        ld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n        for (int k = 0; k < 2; k++, swap(c, d))\n            if (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n                return true;\n    }\n    return false;\n}\n \n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n    ld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n    return (c1*d - c2*c)/(c1-c2);\n}\n \nld distLSP(PT a, PT b, PT c){\n    int rpos = relpos(a, b, proj(a, b, c));\n    if (rpos == BACK) return len(c-a);\n    if (rpos == FRONT) return len(c-b);\n    b -= a, c -= a;\n    return abs(cross(b, c)/len(b));\n}\n \nld distLS(PT a, PT b, PT c, PT d){\n    if (intersect(a, b, c, d)) return 0;\n    return min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n \nld signedArea(Poly &po){\n    int n = po.size();\n    ld res = 0;\n    for (int i = 0; i < n; i++)\n        res += cross(po[i], po[(i+1)%n]);\n    return res/2;\n}\n \nld area(Poly &poly){\n    return abs(signedArea(poly));\n}\n \nbool isConvex(Poly &po){\n    int n = po.size();\n    bool neg = false, pos = false;\n    for (int i = 0; i < n; i++){\n        int rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n        if (rpos == LEFT) pos = true;\n        if (rpos == RIGHT) neg = true;\n    }   \n    return (neg&pos) == false;\n}\n \nint crossingN(Poly &po, PT a){\n    int cn = 0;\n    ld mx = 1e9;\n    PT b(mx, a.Y);\n    int n = po.size();\n    for (int i = 0; i < n; i++){\n        PT p = po[i], q = po[(i+1)%n];\n        if (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n            cn++;\n    }\n    return cn;\n}\n \nint pointInPoly(Poly &po, PT a){\n    int n = po.size();\n    for (int i = 0; i < n; i++)\n        if (relpos(po[i], po[(i+1)%n], a) == ON)\n            return ON;  \n    return (crossingN(po, a)%2 ? IN : OUT);\n}\n \nint main(){ \n    Poly poly;\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        poly.pb(p);\n    }\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        int s = pointInPoly(poly, p);\n        cout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p)\n  {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator-(Point p)\n  {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator*(double a)\n  {\n    return Point(a * x, a * y);\n  }\n  Point operator/(double a)\n  {\n    return Point(x / a, y / a);\n  }\n\n  double abs()\n  {\n    return sqrt(norm());\n  }\n  double norm()\n  {\n    return x * x + y * y;\n  }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator==(const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  void print()\n  {\n    printf(\"%.10f %.10f\\n\", x, y);\n  }\n\n  double arg()\n  {\n    return atan2(y, x);\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint projection(Line l, Point p)\n{\n  return l.p1 + (l.p2 - l.p1) * (dot(p - l.p1, l.p2 - l.p1) / (l.p2 - l.p1).norm());\n}\n\nPoint reflection(Line l, Point p)\n{\n  Point x = projection(l, p);\n  return p + (x - p) * 2;\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  if (cross(a, b) > EPS)\n  {\n    return COUNTER_CLOCKWISE;\n  }\n  if (cross(a, b) < -EPS)\n  {\n    return CLOCKWISE;\n  }\n  if (dot(a, b) < -EPS)\n  {\n    return ONLINE_BACK;\n  }\n  if (a.norm() < b.norm())\n  {\n    return ONLINE_FRONT;\n  }\n  return ON_SEGMENT;\n}\n\nbool is_parallel(Line l1, Line l2)\n{\n  Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n  return equals(cross(a, b), 0);\n}\n\nbool is_orthogonal(Line l1, Line l2)\n{\n  Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n  return equals(dot(a, b), 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  Point p0 = s1.p1, p1 = s1.p2, p2 = s2.p1, p3 = s2.p2;\n  return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0) && (ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nPoint intersection(Segment s1, Segment s2)\n{\n  Point p0 = s1.p1, p1 = s1.p2, p2 = s2.p1, p3 = s2.p2;\n  double a0 = fabs(cross(p2 - p0, p3 - p0)), a1 = fabs(cross(p2 - p1, p3 - p1));\n  return (p0 * a1 + p1 * a0) / (a0 + a1);\n}\n\ndouble line_distance(Line l, Point p)\n{\n  Point p0 = l.p1, p1 = l.p2;\n  return fabs(cross(p1 - p0, p - p0)) / (p1 - p0).abs();\n}\n\ndouble distance(Segment c, Point p)\n{\n  Point p0 = c.p1, p1 = c.p2;\n  if (dot(p1 - p0, p - p0) < -EPS)\n  {\n    return (p0 - p).abs();\n  }\n  if (dot(p0 - p1, p - p1) < -EPS)\n  {\n    return (p1 - p).abs();\n  }\n  return fabs(cross(p1 - p0, p - p0)) / (p1 - p0).abs();\n}\n\ndouble distance(Segment s1, Segment s2)\n{\n  if (intersect(s1, s2))\n  {\n    return 0;\n  }\n  double res = distance(s1, s2.p1);\n  res = min(res, distance(s1, s2.p2));\n  res = min(res, distance(s2, s1.p1));\n  res = min(res, distance(s2, s1.p2));\n  return res;\n}\n\npair<Point, Point> intersection(Circle c, Line l)\n{\n  Point x = projection(l, c.c);\n  double d = line_distance(l, c.c);\n  if (equals(d, c.r))\n  {\n    return make_pair(x, x);\n  }\n  Point p0 = l.p1, p1 = l.p2;\n  Vector u = p1 - p0;\n  Vector v = u * (sqrt(c.r * c.r - d * d)) / u.abs();\n  Point a0 = x + v, a1 = x - v;\n  if (a1 < a0)\n  {\n    swap(a0, a1);\n  }\n  return make_pair(a0, a1);\n}\n\nPoint polar(double r, double a)\n{\n  return Point{r * cos(a), r * sin(a)};\n}\n\npair<Point, Point> intersection(Circle c1, Circle c2)\n{\n  double d = (c2.c - c1.c).abs();\n  double t = (c2.c - c1.c).arg();\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  Point a0 = c1.c + polar(c1.r, t + a), a1 = c1.c + polar(c1.r, t - a);\n  if (a1 < a0)\n  {\n    swap(a0, a1);\n  }\n  return make_pair(a0, a1);\n}\n\nint contains(Polygon g, Point p)\n{\n  int n = g.size();\n  bool x = false;\n  rep(i, n)\n  {\n    Vector a = g.at(i) - p, b = g.at((i + 1) % n) - p;\n    if (equals(cross(a, b), 0) && dot(a, b) < EPS)\n    {\n      return 1;\n    }\n    if (b.y < a.y)\n    {\n      swap(a, b);\n    }\n    if (a.y < EPS && b.y > EPS && cross(a, b) > EPS)\n    {\n      x = !x;\n    }\n  }\n  return x ? 2 : 0;\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n  Polygon g;\n  rep(i, n)\n  {\n    double x, y;\n    cin >> x >> y;\n    g.push_back(Point{x, y});\n  }\n  int q;\n  cin >> q;\n  vector<int> ans(q);\n  rep(i, q)\n  {\n    double x, y;\n    cin >> x >> y;\n    ans.at(i) = contains(g, Point{x, y});\n  }\n  rep(i, q) cout << ans.at(i) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( dot(b,c)/abs(b)/abs(c) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if(eq(sum,0))return 0;\n  else {\n    // cout<<\"!\"<<sum<<endl;\n    return 2;\n  }\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long lint;\n  \n//定数\nconst double EPS = 1e-4;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n  \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n  \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n  \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n  \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n    \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n    \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n    \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n    \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n  \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n  \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n  \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n  \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n  \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n  \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n        \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    qs.resize(k - 1);\n    return (qs);\n}\n  \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n  \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n  \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n  \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n  \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n    \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n    \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n    \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n  \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n  \nint main()\n{\n    int n, q;\n      \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n      \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n          \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            else {\n                assert(neq(abs(next - t), 0));\n                assert(neq(abs(p[j] - t), 0));\n                double th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n                fsum += th;\n            }\n        }\n        printf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), acos(-1)));\n    }\n      \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define r(i,n) for(int i=0;i<n;i++)\n#define R(i,a,n) for(int i=a;i<n;i++)\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\nstruct Circle{\n  Point c;\n  double r;\n};\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´????????????\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶???????????????absolute  ?????????????????¶?????????\ndouble abs(Point p){return sqrt(norm(p));}\n//?????????????????????????????????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//?????? ????????????????????????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????????????¨?????\\?????????????????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//????????????????????¨?????\\??????????????????????????????????????????\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???± ??????????????´???????????????\nPoint project(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°??????????????????????\nPoint reflection(seg s,Point p){\n  return  p+(project(s,p)-p)*2.0;\n}\n//2???????????¢   ???????????????\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)???????????????\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢??????????????????\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????¨?????????????????¨??????????????????????????????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONLINE_BACK;\n  if(norm(a)<norm(b))return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n//????????????????????????????????????????????§?\\????\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return(CCW(p1,p2,p3)*CCW(p1,p2,p4)<=0&&CCW(p3,p4,p1)*CCW(p3,p4,p2)<=0);\n}\nbool intersect(seg s1,seg s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n//2??????????§???¢?????\\??????????????????...????????????????????????\nbool squareintersect(seg s1,seg s2){\n  if(s1.p2.x<s2.p1.x||s2.p2.x<s1.p1.x)return 0;\n  if(s1.p2.y<s2.p1.y||s2.p2.y<s1.p1.y)return 0;\n  return 1;\n}\n//??????????????¢?????????????????????????????§??¨???????????????\ndouble getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n//??????????????????????????????(?´????????`)\nPoint getCrossPoint(seg s1,seg s2){\n  Point base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n//???????£????????????¢??????????????¢??????????????????????????\\????????????????????§???????????£???????????????????????????????????§?????????????????????\nint intersectCC(Circle a,Circle b){\n  double dist=abs(a.c-b.c);\n  if(dist>a.r+b.r+EPS)return 4;\n  if(dist>a.r+b.r-EPS)return 3;\n  if(dist>abs(a.r-b.r)+EPS)return 2;\n  if(dist>abs(a.r-b.r)-EPS)return 1;\n  return 0;\n}\n//?????¨??´???????????????2?????? (LINE)\nseg getCrossPoint(Circle c,seg l){\n  //assert(intersect(cc,l));\n  Point pr=project(l,c.c);\n  Point e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base =sqrt(c.r*c.r-norm(pr-c.c));\n  seg pp;pp.p1=(pr+e*base);pp.p2=(pr-e*base);\n  return pp;\n}\n//?????¨??´??????Line??????????????°\nint getCircleLine(Circle c,seg l){\n  seg a=getCrossPoint(c,l);\n  if(isnan(a.p1.x)&&isnan(a.p2.y))return 0;\n  else if(a.p1.x==a.p2.x&&a.p1.y==a.p2.y)return 1;\n  else return 2;\n}\n//??????\nPoint gaishin(Point a, Point b, Point c){\n  double a1,a2,b1,b2,c1,c2;\n  a1=2*(b.x-a.x);b1=2*(b.y-a.y);c1=a.x*a.x-b.x*b.x+a.y*a.y-b.y*b.y;\n  a2=2*(c.x-a.x);b2=2*(c.y-a.y);c2=a.x*a.x-c.x*c.x+a.y*a.y-c.y*c.y;\n  Point p;p.x=(b1*c2-b2*c1)/(a1*b2-a2*b1);p.y=(c1*a2-c2*a1)/(a1*b2-a2*b1);\n  return p;\n}\n//2??????????????????\ndouble arg(Point p){return atan2(p.y,p.x);}\nPoint polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\nseg getCrossPoints(Circle c1,Circle c2){\n  //assert(intersect(c1,c2));\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  seg s;s.p2=c1.c+polar(c1.r,t+a);s.p1=c1.c+polar(c1.r,t-a);\n  return s;\n}\n//???????????? ????????????->2 ??????->1  ????????\\???->0\ntypedef vector<Point> Polygon;\nint contains(Polygon g, Point p) {\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++) {\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(abs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n  }\n  return x ? 2 : 0;\n}\nint main(){\n  int n,m;\n  double a,b;\n  Polygon p;\n  Point s;\n  cin>>n;\n  while(n--){\n    cin>>s.x>>s.y;\n    p.push_back(s);\n  }\n  cin>>m;\n  while(m--){\n    cin>>s.x>>s.y;\n    cout<<contains(p,s)<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS (1e-10)\nclass Point {\npublic:int x, y;Point(int x, int y) : x(x), y(y) { }\n    Point operator -(Point p) {return Point(x - p.x, y - p.y);}};\ntypedef vector<Point> Polygon;\ndouble dot(Point p1, Point p2) {\n    return p1.sx * p2.x + p1.y * p2.y;\n}\ndouble cross(Point p1, Point p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\ndouble norm(Point p) {\n    return p.x * p.x + p.y * p.y;\n}\ndouble abs(Point p) {\n    return sqrt(norm(p));\n}\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) {return 1;}\n        if (a.y > b.y) { swap(a, b);}\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {x = !x;}\n    }\n    return x ? 2 : 0;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Polygon g;\n    for (int i = 0; i < n; ++i) {\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        Point p(x, y);\n        g.push_back(p);\n    }\n    int q;\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; ++i) {\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        Point p(x, y);\n        cout << contains(g, p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(x,y,z) for(int x=y;x<=z;x++)\n#define FORD(x,y,z) for(int x=y;x>=z;x--)\n#define MSET(x,y) memset(x,y,sizeof(x))\n#define FOR(x,y) for(__typeof(y.begin()) x=y.begin();x!=y.end();x++)\n#define F first\n#define S second\n#define MP make_pair\n#define PB push_back\n#define SZ size()\n#define M \nvoid RI(){}\ntemplate<typename... T>\nvoid RI( int& head, T&... tail ) {\n    scanf(\"%d\",&head);\n    RI(tail...);\n}\nusing namespace std;\ntypedef long long LL;\nstruct P\n{\n\tdouble x,y;\n\tP(){}\n\tP(double a,double b)\n\t{\n\t\tx = a;\n\t\ty = b;\n\t}\n};\nint n,q;\nvector<P> poly;\n\ndouble dis(P a,P b)\n{\n\treturn sqrt( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) );\n}\n\nbool onPolygon(vector<P> &polygon, P p)\n{\n\tint cnt = polygon.size();\n\tP cur,nxt;\n\tdouble t;\n\t\n\tREP(i,0,cnt-1)\n\t{\n\t\tcur = polygon[i];\n\t\tnxt = polygon[(i+1)%cnt];\n\n\t\tt = dis(p,cur) + dis(p,nxt) - dis(cur,nxt);\n\t\tif( fabs(t) <= 1e-9 ) return true;\n\t}\n\treturn false;\n}\n\nbool windingNumber(vector<P> &polygon, P p)\n{\n\tint w=0;\n\tint cnt = polygon.size();\n\tP cur,nxt;\n\n\tREP(i,0,cnt-1)\n\t{\n\t\tcur = polygon[i];\n\t\tnxt = polygon[(i+1)%cnt];\n\n\t\tif( (cur.x>=p.x) ^ (nxt.x>=p.x) )\n\t\t\tw += (cur.x-p.x) * (nxt.y-p.y) >= (nxt.x-p.x) * (cur.y-p.y) ? 1 : -1;\n\t}\n\treturn w!=0;\n}\n\nint main()\n{\n\tP p;\n\tint x,y;\n\tRI(n);\n\tREP(i,1,n)\n\t{\n\t\tRI(x,y);\n\t\tpoly.PB( P(x,y) );\n\t}\n\n\tRI(q);\n\twhile(q--)\n\t{\n\t\tRI(x,y);\n\t\tp = P(x,y);\n\n\t\tif( onPolygon(poly, p) )\n\t\t\tputs(\"1\");\n\t\telse if( windingNumber(poly, p) )\n\t\t\tputs(\"2\");\n\t\telse\n\t\t\tputs(\"0\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n  \nusing namespace std;\n\ntypedef long long ll;\n\nclass Point {\npublic:\n  ll x, y;\n  \n  Point () {}\n  Point ( ll x = 0, ll y = 0 ) : x(x), y(y) {}\n  \n  Point operator - ( const Point &p ) const { return Point(x - p.x, y - p.y); }\n};\n  \ntypedef Point Vector;\n  \ntypedef vector<Point> Polygon;\n  \nll dot( Vector a, Vector b ) { return a.x*b.x + a.y*b.y; }\nll cross( Vector a, Vector b ) { return a.x*b.y - a.y*b.x; }\n\nenum { IN, ONSEG, OUT };\n#define curr(G, i) (G[i])\n#define next(G, i) (G[(i+1)%n])\n\nint\npointInPolygon(const Polygon &G, const Point &p) {\n  \n  int n = G.size();\n  bool in = false;\n  \n  for(int i=0; i<n; i++) {\n    Vector V1 = curr(G, i) - p, V2 = next(G, i) - p;\n    \n    if( V1.y > V2.y ) swap(V1, V2);\n    if( V1.y <= 0 && 0 < V2.y && cross(V1, V2) > 0 ) in = !in;\n    if( cross(V1, V2) == 0 && dot(V1, V2) <= 0 ) return ONSEG;\n  }\n  return in ? IN : OUT;\n}\n  \nint\nmain() {\n  int n, q;\n  ll x, y;\n    \n  Polygon G;\n  cin >> n;\n    \n  for(int i=0; i<n; i++) {\n    cin >> x >> y;\n    G.push_back(Point(x, y));\n  }\n    \n  cin >> q;\n  for(int i=0; i<q; i++) {\n    cin >> x >> y;\n    cout << pointInPolygon(G, Point(x, y)) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct CWW{\n    CWW(){\n        cin.tie(0);\n        ios_base::sync_with_stdio(0);\n        cout<<fixed<<setprecision(15);\n    }\n}STAR;\n\nusing D=double;\n\nconst D EPS=1e-8;\nconst D INF=1e9;\n\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_FRONT=2;\nconst int ONLINE_BACK=-2;\nconst int ON_SEGMENT=0;\n\nusing Point=complex<D>;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point c;\n    D r;\n    Circle(const Point &c=Point(),const D &r=0.0):c(c),r(r){}\n};\n\nusing Polygon=vector<Point>;\n\n#define EQ(a,b) (abs((a)-(b))<EPS)\n\nnamespace std{\n    bool operator<(const Point &a,const Point &b){\n        if(!EQ(real(a),real(b)))return real(a)<real(b);\n        return imag(a)+EPS<imag(b);\n    }\n}\n\nistream& operator>>(istream &is,Point &a){\n    D x,y;\n    is>>x>>y;\n    a=Point(x,y);\n    return is;\n}\n\nostream& operator<<(ostream& os,const Point &a){\n    os<<real(a)<<\" \"<<imag(a);\n    return os;\n}\n\nistream& operator>>(istream &is,Line &l){\n    Point p1,p2;\n    is>>p1>>p2;\n    l=Line(p1,p2);\n    return is;\n}\n\nistream& operator>>(istream &is,Segment &s){\n    Point p1,p2;\n    is>>p1>>p2;\n    s=Segment(p1,p2);\n    return is;\n}\n\nD dot(const Point &a,const Point &b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\nD cross(const Point &a,const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nPoint projection(const Point &a,const Point &b){\n    return a*real(b/a);\n}\n\nPoint projection(const Line &l,const Point &a){\n    return l.p1+projection(l.p2-l.p1,a-l.p1);\n}\n\nPoint reflection(const Line &l,const Point &a){\n    Point p=projection(l,a);\n    return 2.0*p-a;\n}\n\nint ccw(Point a,Point b,Point c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(b,c)<-EPS)return CLOCKWISE;\n    if(dot(b,c)<-EPS)return ONLINE_BACK;\n    if(norm(b)+EPS<norm(c))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool isOrthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return isOrthogonal(a2-a1,b2-b1);\n}\n\nbool isOrthogonal(const Line &l,const Line &m){\n    return isOrthogonal(l.p1,l.p2,m.p1,m.p2);\n}\n\nbool isParallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(const Line &l,const Line &m){\n    return isParallel(l.p1,l.p2,m.p1,m.p2);\n}\n\nbool intersect(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return ccw(a1,a2,b1)*ccw(a1,a2,b2)<=0&&\n            ccw(b1,b2,a1)*ccw(b1,b2,a2)<=0;\n}\n\nbool intersect(const Segment &s,const Segment &t){\n    return intersect(s.p1,s.p2,t.p1,t.p2);\n}\n\nPoint crossPoint(const Segment &s1,const Segment &s2){\n    Point  base=s2.p2-s2.p1;\n    D d1=abs(cross(base,s1.p1-s2.p1));\n    D d2=abs(cross(base,s1.p2-s2.p1));\n\n    D t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nD distance(const Line &l,const Point &p){\n    return distance(projection(l,p),p);\n}\n\nD distance(const Line &l,const Line &m){\n    if(isParallel(l,m))return distance(l,m.p1);\n    return 0.0;\n}\n\nD distance(const Segment &s,const Point &p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n    return distance(Line(s.p1,s.p2),p);\n\n}\n\nD distance(const Segment &s1,const Segment &s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(distance(s1,s2.p1),distance(s1,s2.p2)),\n               min(distance(s2,s1.p1),distance(s2,s1.p2)));\n}\n\nD area(const Polygon &g){\n    D res=0.0;\n    for(int i=0;i<g.size();i++){\n        res+=cross(g[i],g[(i+1)%g.size()]);\n    }\n    return res/2.0;\n}\n\nPolygon andrewScan(Polygon g){\n    Polygon u,l;\n    if(g.size()<3)return g;\n    sort(g.begin(),g.end());\n    u.push_back(g[0]);\n    u.push_back(g[1]);\n\n    l.push_back(g[g.size()-1]);\n    l.push_back(g[g.size()-2]);\n\n    for(int i=2;i<g.size();i++){\n        for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],g[i])!=CLOCKWISE;n--)u.pop_back();\n        u.push_back(g[i]);\n    }\n\n    for(int i=g.size()-3;i>=0;i--){\n        for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],g[i])!=CLOCKWISE;n--)l.pop_back();\n        l.push_back(g[i]);\n    }\n\n    reverse(l.begin(),l.end());\n    for(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n    return l;\n}\n\nbool isConvex(const Polygon &g){\n    for(int i=0;i<g.size();i++){\n        if(ccw(g[(i-1+g.size())%g.size()],g[i],g[(i+1)%g.size()])==CLOCKWISE)return false;\n    }\n    return true;\n}\n\nconst int IN=2;\nconst int ON=1;\nconst int OUT=0;\nint contains(const Polygon &g,const Point &p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return ON;\n        if(imag(a)>imag(b))swap(a,b);\n        if(imag(a)<EPS&&EPS<imag(b)&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?IN:OUT);\n}\n\nint main(){\n    int N;cin>>N;\n    Polygon g(N);for(int i=0;i<N;i++)cin>>g[i];\n\n    int Q;cin>>Q;\n    while(Q--){\n        Point p;\n        cin>>p;\n        cout<<contains(g,p)<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\nint main() {\n\tvector<Point>vec;\n\tPoint P;\n\tint n, q; cin >> n;\n\tvec.clear();\n\tvec.push_back(P);\n\tfor (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P.px >> P.py;\n\t\tint v = contain(vec, P); cout << v << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define equals(a, b) (fabs((a)-(b)) < EPS)\nconst double EPS = (1e-10);\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n// 外積\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\ntypedef vector<Point> Polygon;  // 多角形\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++) {\n        Point a = g[i] - p, b = g[(i+1)%n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\nint main(void) {\n    int n; cin >> n;\n    int x, y;\n\n    Polygon g;\n    for (int i = 0; i < n; i++) {\n        cin >> x >> y;\n        g.push_back(Point(x, y));\n    }\n\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> x >> y;\n        cout << contains(g, Point(x, y)) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// include\n//------------------------------------------\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// conversion\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\ntemplate <class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\n// math\n//-------------------------------------------\ntemplate <class T>\ninline T sqr(T x) {\n    return x * x;\n}\n\n// typedef\n//------------------------------------------\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\n\n// container util\n//------------------------------------------\n#define ALL(a) (a).begin(), (a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i, c) \\\n    for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define EXIST(s, e) ((s).find(e) != (s).end())\n#define SORT(c) sort((c).begin(), (c).end())\n\n// repetition\n//------------------------------------------\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPI(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)\n\n// constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int INF_INT = 2147483647;\nconst LL INF_LL = 9223372036854775807;\n\n// clear memory\n//--------------------------------------------\n#define CLR(a) memset((a), 0, sizeof(a))\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nistream &operator>>(istream &is, vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\n// pair\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, pair<T, U> &pair_var) {\n    os << \"(\" << pair_var.first << \", \" << pair_var.second << \")\";\n    return os;\n}\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const vector<T> &vec) {\n    os << \"{\";\n    for (int i = 0; i < vec.size(); i++) {\n        os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");\n    }\n    os << \"}\";\n    return os;\n}\n\n// list\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const list<T> &lst) {\n    os << \"{\";\n    REPI(itr, lst) {\n        os << *itr;\n        itr++;\n        if (itr != lst.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// map\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, map<T, U> &map_var) {\n    os << \"{\";\n    REPI(itr, map_var) {\n        os << *itr;\n        itr++;\n        if (itr != map_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// set\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, set<T> &set_var) {\n    os << \"{\";\n    REPI(itr, set_var) {\n        os << *itr;\n        itr++;\n        if (itr != set_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// dump\n//--------------------------------------------\n#define DUMPOUT cerr\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail>\nvoid dump_func(Head &&head, Tail &&... tail) {\n    DUMPOUT << head;\n    if (sizeof...(Tail) > 0) {\n        DUMPOUT << \", \";\n    }\n    dump_func(std::move(tail)...);\n}\n#ifdef DEBUG_\n#define DEB\n#define dump(...)                                                       \\\n    DUMPOUT << \"  \" << string(#__VA_ARGS__) << \": \"                     \\\n            << \"[\" << to_string(__LINE__) << \":\" << __FUNCTION__ << \"]\" \\\n            << endl                                                     \\\n            << \"    \",                                                  \\\n        dump_func(__VA_ARGS__)\n#else\n#define DEB if (false)\n#define dump(...)\n#endif\n\n// geo\n//--------------------------------------------\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(double a) { return Point(x * a, y * a); }\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator<(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\n\ndouble abs(Vector a) { return sqrt(norm(a)); }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\n\nenum Position {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ON_SEGMENT = 0,\n    ONLINE_FRONT = -2\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    enum Position p;\n    if (cross(a, b) > EPS)\n        p = COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -EPS)\n        p = CLOCKWISE;\n    else if (dot(a, b) < -EPS)\n        p = ONLINE_BACK;\n    else if (a.norm() < b.norm())\n        p = ONLINE_FRONT;\n    else\n        p = ON_SEGMENT;\n    return p;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Point a, Point b) {\n    Vector v = a - b;\n    return v.abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    double c = cross(l.p2 - l.p1, p - l.p1);\n    Vector v = l.p2 - l.p1;\n    return abs(c) / v.abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n/**\n *  IN  2\n *  ON  1\n *  OUT 0\n */\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    REP(i, n) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\nint main(void) {\n    int n;\n    cin >> n;\n    Polygon g;\n    REP(i, n) {\n        Point p;\n        cin >> p.x >> p.y;\n        g.PB(p);\n    }\n    int q;\n    cin >> q;\n    Point p[q];\n    REP(i, q) cin >> p[i].x >> p[i].y;\n    REP(i, q) cout << contains(g, p[i]) << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\n#include <stdbool.h>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(a*x, a*y); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n\n    double abs() {return sqrt(norm()); }\n    double norm() {return x*x + y*y; }\n};\n\ntypedef Point Vector;\n\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nint isContained(Point p, vector<Point> polygon);\n\nint main(){\n    #if 0\n    std::ifstream in(\"input.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    #endif\n\n    int n, q;\n    cin >> n;\n\n    std::vector<Point> polygon(n);\n    for(int i=0; i<n; i++){\n        cin >> polygon[i].x >> polygon[i].y;\n    }\n\n    cin >> q;\n    for(int j=0; j<q; j++){\n        Point p;\n        cin >> p.x >> p.y;\n        cout << isContained(p, polygon) << \"\\n\";\n    }\n\n    return 0;\n}\n\n//Is point p contained in polygon?\nint isContained(Point p, vector<Point> polygon){\n    int n = polygon.size();\n    bool out = false;\n    for(int i=0; i < n; i++){\n        Vector a = polygon[i] - p;\n        Vector b = polygon[(i+1)%n] - p;\n\n        if(cross(a,b)==0 && dot(a,b)<=0){ //辺上にある場合\n            return 1;\n        }\n        else {\n            Vector big = ( (b.y > a.y)? b : a ) ;\n            Vector small = ( (b.y > a.y)? a : b ) ;\n            if(big.y > 0 && small.y <= 0 && cross(small,big) > 0){ //small.yだけ不等号なのが肝\n                out = !out;\n            }\n        }\n    }\n    return (out? 2 : 0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/// Geometry INT\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\ninline int sign(const LL x) {\n\tif (x < 0) {\n\t\treturn -1;\n\t}\n\tif (x > 0) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstruct point {\n\tLL x, y;\n\tpoint() {}\n\tpoint(LL _x, LL _y) : x(_x), y(_y) {}\n};\n\nbool operator < (const point &P, const point &Q) {\n\tif (P.y != Q.y) {\n\t\treturn P.y < Q.y;\n\t}\n\treturn P.x < Q.x;\n}\n\nvoid normalize(point &P) {\n\tassert(P.x != 0 || P.y != 0);\n\tLL g = __gcd(P.x, P.y);\n\tP.x /= g;\n\tP.y /= g;\n}\n\npoint operator + (const point &P, const point &Q) {\n\treturn point(P.x + Q.x, P.y + Q.y);\n}\n\npoint operator - (const point &P, const point &Q) {\n\treturn point (P.x - Q.x, P.y - Q.y);\n}\n\npoint operator * (const point &P, const LL k) {\n\treturn point(P.x * k, P.y * k);\n}\n\npoint operator / (const point &P, const LL k) {\n\tassert(k != 0 && P.x % k == 0 && P.y % k == 0);\n\treturn point(P.x / k, P.y / k);\n}\n\ninline LL dot(const point &P, const point &Q) {\n\treturn P.x * Q.x + P.y * Q.y;\n}\n\ninline LL cross(const point &P, const point &Q) {\n\treturn P.x * Q.y - P.y * Q.x;\n}\n\ninline bool is_in(LL x, LL a, LL b) {\n\tif (a > b) {\n\t\tswap(a, b);\n\t}\n\treturn (a <= x && x <= b);\n}\n\ninline bool is_in(const point &P, const point &A, const point &B) {\n\tif (cross(B - A, P - A) != 0) {\n\t\treturn false;\n\t}\n\treturn (is_in(P.x, A.x, B.x) && is_in(P.y, A.y, B.y));\n}\n\ninline bool segment_segment_intersect(const point &A, const point &B, const point &C, const point &D) {\n\tif (cross(B - A, D - C) == 0) { // lines are parallel\n\t\treturn (is_in(A, C, D) || is_in(B, C, D) || is_in(C, A, B) || is_in(D, A, B));\n\t}\n\tif (sign(cross(C - A, B - A)) * sign(cross(D - A, B - A)) > 0) {\n\t\treturn false;\n\t}\n\tif (sign(cross(A - C, D - C)) * sign(cross(B - C, D - C)) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ninline bool is_convex(const vector <point> &polygon) {\n\tint n = polygon.size();\n\tassert(n >= 3);\n\tfor (int i = 0; i < n; i++) {\n\t\tint j = (i + 1) % n;\n\t\tint k = (i + 2) % n;\n\t\tif (sign(cross(polygon[j] - polygon[i], polygon[k] - polygon[i])) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst int OUT = 0;\nconst int ON = 1;\nconst int IN = 2;\n/// 0 outside, 1 boundary, 2 inside\ninline int point_inside_polygon(const point &P, const vector <point> &polygon) {\n\tint n = polygon.size();\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tpoint A = polygon[i];\n\t\tpoint B = polygon[(i + 1) % n];\n\t\tif (is_in(P, A, B)) {\n\t\t\treturn ON;\n\t\t}\n\t\tif (B.y < A.y) {\n\t\t\tswap(A, B);\n\t\t}\n\t\tif (P.y < A.y || B.y <= P.y || A.y == B.y) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (sign(cross(B - A, P - A)) > 0) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (cnt & 1) {\n\t\treturn IN;\n\t}\n\treturn OUT;\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\n// test OK\nvoid test_segment_segment_intersection() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tcout << (segment_segment_intersect(A, B, C, D) ? \"1\" : \"0\") << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\n// test OK\nvoid test_is_convex() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tcout << (is_convex(polygon) ? \"1\" : \"0\") << \"\\n\";\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n// test ???\nvoid test_point_inside_polygon() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint P;\n\t\tcin >> P.x >> P.y;\n\t\tcout << point_inside_polygon(P, polygon) << \"\\n\";\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\n\t// test_segment_segment_intersection();\n\t// test_is_convex();\n\ttest_point_inside_polygon();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\nconst pair<int, int> INF{100005, 100005};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = (diff * (b1 - a1));\n\tauto cross2 = (diff * (b2 - a1));\n\tif(!cross1) {\n\t\treturn true;\n\t}\n\treturn cross1 * cross2 < 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int i = 0; i < q; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%2])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%2])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n    // convex version : O(log n)\n    int ConvexContain(const Point &p) const;\n\n};\n\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\nint Polygon::ConvexContain(const Point &p) const {\n    const int n = (*this).size();\n    Point g = ((*this)[0] + (*this)[n / 3] + (*this)[2 * n / 3]) / 3.0; // inner point\n    int a = 0, b = n;\n    while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n        int c = (a + b) * 0.5;\n        if (sign(abs_cross((*this)[a] - g, p - g)) >= 0 &&\n            sign(abs_cross((*this)[c] - g, p - g)) == -1)\n            b = c;\n        else\n            a = c;\n    }\n    // while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n    //     int c = (a + b) * 0.5;\n    //     if (sign(abs_cross((*this)[a] - g, (*this)[c] - g)) == 1) { // angle < 180 deg\n    //         if (sign(abs_cross((*this)[a] - g, p - g)) >= 0 &&\n    //             sign(abs_cross((*this)[c] - g, p - g)) == -1)\n    //             b = c;\n    //         else\n    //             a = c;\n    //     }\n    //     else {\n    //         if (sign(abs_cross((*this)[a] - g, p - g)) == -1 &&\n    //             sign(abs_cross((*this)[c] - g, p - g)) == 1)\n    //             a = c;\n    //         else\n    //             b = c;\n    //     }\n    // }\n\n    b %= n;\n    if (IsIntersect(Segment((*this)[a], (*this)[b]), p))\n        return ON;\n    int res = sign(abs_cross((*this)[a] - p, (*this)[b] - p));\n    return (res == -1 ? OUT : (res == 1 ? IN : ON));\n}\n\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    bool is_convex = poly.IsConvex();\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << (is_convex ? poly.ConvexContain(p) : poly.Contain(p)) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i = 1, i##_end_ = (n); i <= i##_end_; ++i)\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n\nconst double eps = 1e-10;\nint sgn(double x) {\n    if(fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n    Point(double xp=0, double yp=0): x(xp), y(yp) { }\n    Point operator + (const Point& rhs) const { return Point(x+rhs.x, y+rhs.y); }\n    Point operator - (const Point& rhs) const { return Point(x-rhs.x, y-rhs.y); }\n    Point operator * (const double& k) const { return Point(x*k, y*k); }\n    Point operator / (const double& k) const { return Point(x/k, y/k); }\n    bool operator < (const Point& rhs) const { return x < rhs.x || (x==rhs.x && y<rhs.y); }\n    bool operator == (const Point& rhs) const {return sgn(x - rhs.x) == 0 && sgn(y - rhs.y) == 0; }\n    Point turn(double rad) { return Point(x*cos(rad)-y*sin(rad), x*sin(rad)+y*cos(rad)); }\n    Point turn90() { return Point(-y, x); }\n    void scan() { scanf(\"%lf%lf\", &x, &y); }\n};\ntypedef Point Vector;\n\ndouble dot(Vector x, Vector y) { return x.x*y.x + x.y*y.y; }\ndouble length(Vector x) { return sqrt(dot(x, x)); }\ndouble dist2(Point A, Point B) { return dot(A - B, A - B); }\ndouble cross(Vector A, Vector B) { return A.x*B.y - A.y*B.x; }\ndouble angle(Vector A, Vector B) { return acos(dot(A, B) / length(A) / length(B)); }\n\nPoint LineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (dot(P-A, v) / dot(v, v));\n}\nPoint LineReflection(Point P, Point A, Point B) {\n    Point proj = LineProjection(P, A, B);\n    return proj + proj - P;\n}\n\nint Clockwise(Point O, Point A, Point B) {\n    /* Clockwise: -1\n       Counterclockwise: 1\n       Otherwise: 0\n    */\n    return sgn(cross(A - O, B - O));\n}\n\nvoid SegCheck(Point a, Point b, Point p) {\n    Vector d = b - a, e = p - a;\n    if(sgn(dot(d, e)) == -1) puts(\"ONLINE_BACK\");\n    else if(sgn(length(e) - length(d)) == 1) puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n}\n\nint JudgeLLParOrth(Point a1, Point a2, Point b1, Point b2) {\n    /* 2: parallel\n       1: orthogonal\n       0: otherwise\n    */\n    Vector v = a2 - a1, w = b2 - b1;\n    if(sgn(cross(v, w)) == 0) return 2;\n    if(sgn(dot(v, w)) == 0) return 1;\n    return 0;\n}\n\nbool CheckSSProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n    double c1 = cross(a1 - b1, b2 - b1), c2 = cross(a2 - b1, b2 - b1);\n    double c3 = cross(b1 - a1, a2 - a1), c4 = cross(b2 - a1, a2 - a1);\n    return sgn(c1) * sgn(c2) == -1 && sgn(c3) * sgn(c4) == -1;\n}\nbool OnSeg(Point P, Point A, Point B) { // (A, B) not inclusive\n    Vector v = B - P, w = A - P;\n    if(sgn(cross(v, w)) != 0) return false;\n    return sgn(dot(v, w)) == -1;\n}\n\nbool CheckSSIntersection(Point a1, Point a2, Point b1, Point b2) {\n    if(a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) return true;\n    if(OnSeg(a1, b1, b2) || OnSeg(a2, b1, b2) || OnSeg(b1, a1, a2) || OnSeg(b2, a1, a2))\n        return true;\n    return CheckSSProperIntersection(a1, a2, b1, b2);\n}\n\n// Ensure lines intersect first!!! cross(v, w) != 0\nPoint LLIntersection(Point a1, Point a2, Point b1, Point b2) {\n    Vector v = a2 - a1, w = b2 - b1, u = a1 - b1;\n    assert(cross(v, w) != 0);\n    double t1 = cross(w, u) / cross(v, w);\n    return a1 + v * t1;\n} // Line: 2 Points\n\nPoint LLIntPV(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    assert(cross(v, w) != 0);\n    double t = cross(w, u) / cross(v, w);\n    return P + v * t;\n} // Line: Point + Vector\n\ndouble PLDist(Point P, Point A, Point B) { // Point-Line\n    return fabs(cross(B - P, A - P) / length(A - B));\n}\ndouble PSDist(Point P, Point A, Point B) { // Point-Segment\n    if(A == B) return length(P - A);\n    if(sgn(dot(A-P, B-A)) == 1) return length(A - P);\n    if(sgn(dot(B-P, B-A)) == -1) return length(B - P);\n    return fabs(cross(B-P, A-P) / length(A-B));\n}\ndouble SSDist(Point a1, Point a2, Point b1, Point b2) {\n    // segment - segment\n    if(CheckSSIntersection(a1, a2, b1, b2)) return 0.0;\n    return min(min(PSDist(a1,b1,b2), PSDist(a2,b1,b2)), min(PSDist(b1,a1,a2), PSDist(b2,a1,a2)));\n}\n\n\n// Polygon Operations\ntypedef vector<Point> Polygon;\ndouble PolygonArea(const Polygon& p) {\n    int sz = p.size();\n    double tot = 0.0;\n    for(int i = 1; i < sz - 1; ++i)\n        tot += cross(p[i]-p[0], p[i+1]-p[0]);\n    return fabs(tot / 2.0);\n}\nbool IsConvex(Polygon po, int strict = 1) {\n    // po should be given in counterclockwise !!!!\n    int sz = po.size(); po.push_back(po[0]), po.push_back(po[1]);\n    for(int i = 0; i < sz; ++i)\n        if(sgn(cross(po[i+1]-po[i], po[i+2]-po[i])) < strict)\n            return false;\n    return true;\n}\nint InPolygon(Point pt, Polygon po) {\n    /* 2: in polygon\n     * 1: on segment\n     * 0: not in polygon\n    */\n    int sz = po.size(), wn = 0; po.push_back(po[0]);\n    for(int i = 0; i < sz; ++i) {\n        Point u = po[i], v = po[i + 1];\n        if(OnSeg(pt, u, v)) return 1;\n        if(sgn(u.y-v.y) == 1) swap(u, v);\n        if(pt.y<=u.y || pt.y>v.y) continue;\n        if(sgn(cross(pt-u, v-u)) == -1) wn ^= 1;\n    }\n    return wn << 1;\n}\n\n// Circle\nstruct Circle {\n    Point o;\n    double r;\n    Circle(Point O, double R): o(O), r(R) { }\n    Circle(Point A, Point B, Point C) { // 三点确定圆\n        assert(sgn(cross(B-A, C-A)) != 0);\n        Point mab = (A + B) / 2.0, ab = (B - A).turn90();\n        Point mbc = (B + C) / 2.0, bc = (C - B).turn90();\n        o = LLIntPV(mab, ab, mbc, bc);\n        r = length(A - o);\n    }\n    Point at(double theta) { return o + Point(cos(theta)*r, sin(theta)*r); }\n    bool out(Point pt) { return sgn(length(o-pt) - r) == 1;}\n};\n\n\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nCircle MinCircle(vector<Point> pt) { // 最小圆覆盖，随机增量法\n    int sz = pt.size();\n    shuffle(pt.begin(), pt.end(), rng);\n    Circle cc(pt[0], 0.0);\n    for(int i = 0; i < sz; ++i) if(cc.out(pt[i])) {\n        cc = Circle(pt[i], 0.0);\n        for(int j = 0; j < i; ++j) if(cc.out(pt[j])) {\n            cc = Circle((pt[i] + pt[j]) / 2.0, length(pt[i]-pt[j]) / 2.0);\n            for(int k = 0; k < j; ++k) {\n                if(cc.out(pt[k])) {\n                    cc = Circle(pt[i], pt[j], pt[k]);\n                }\n            }\n        }\n    }\n    return cc;\n}\n\n\n\nint main() {\n    Point x;\n    Polygon pol;\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        x.scan();\n        pol.push_back(x);\n    }\n    scanf(\"%d\", &q);\n    while(q--) {\n        x.scan();\n        printf(\"%d\\n\", InPolygon(x, pol));\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\t\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n \ntypedef pair<point,point> pp;\ntypedef vector<point> VP;\nconst point O{0,0};\n \nclass Geom{\n\tpublic:\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Containment_polyon_point(VP p,point x){\n\t\tbool flag=0;\n\t\tp.push_back(p[0]);\n\t\tfor(VP::iterator i=p.begin();i!=p.end()-1;i++){\n\t\t\tpoint a=*i-x,b=*(i+1)-x;\n\t\t\tif(a.y>b.y) swap(a,b);\n\t\t\tdouble ip=IP(a,b),cp=CP(a,b);\n\t\t\tif(a.y<=0&&b.y>0&&cp<0) flag=!flag;\n\t\t\tif(cp<eps&&cp>-eps&&ip<=0) return \"On_side\";\n\t\t}\n\t\treturn flag?\"Containment\":\"not_Containment\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n};\n\nint N,Q;\npoint x;\nstring s;\nVP p;\n\nint main(){\n\tGeom geo;\n\tcin>>N;\n\tp=VP(N);\n\tfor(int i=0;i<N;i++) geo.Point_in(p[i]);\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tgeo.Point_in(x);\n\t\ts=geo.Containment_polyon_point(p,x);\n\t\tif(s==\"Containment\") cout<<2<<endl;\n\t\telse if(s==\"On_side\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "/*\n函数版本:0.4\n*/\n#include<iostream>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#define EPS (1e-15)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\n\nstruct Segment;\nclass Point;\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double xx, double yy) {\n\t\tx = xx;\n\t\ty = yy;\n\t}\n\tPoint operator + (const Point& p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point& p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double k) { return Point(x * k, y * k); }\n\tPoint operator / (const double k) { return Point(x / k, y / k); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point& p) { return x * p.y - y * p.x; }\n\tdouble distance(Point& p) { return (*this - p).abs(); }\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point& p) const {\n\t\treturn x - p.x < -EPS || (fabs(x - p.x) < EPS && y - p.y < -EPS);\n\t}\n\n\tvoid input() {\n\t\tcin >> x >> y;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tvoid input() {\n\t\tp1.input();\n\t\tp2.input();\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tvoid input() {\n\t\tc.input();\n\t\tcin >> r;\n\t}\n};\n\n\ndouble distance(Point p, Line s) {\n\tVector a = s.p2 - s.p1;\n\tVector b = p - s.p1;\n\treturn a.cross(b) / a.abs();\n}\n\ndouble distanceS(Point p, Segment s) {\n\tVector p1p = p - s.p1;\n\tVector p2p = p - s.p2;\n\tVector p1p2 = s.p2 - s.p1;\n\tVector p2p1 = s.p1 - s.p2;\n\tif (p1p.dot(p1p2) < 0) {\n\t\treturn p1p.abs();\n\t}\n\telse if (p2p.dot(p2p1) < 0) {\n\t\treturn p2p.abs();\n\t}\n\telse {\n\t\treturn distance(p, s);\n\t}\n}\n\nPoint project(Point p, Segment s) {\n\tVector hepo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tVector t = base * (hepo.dot(base) / base.norm());\n\treturn s.p1 + t;\n}\n\nint ccw(Point p0, Point p1, Point p) {\n\tVector p0p1 = p1 - p0;\n\tVector p0p;\n\tp0p = p - p0;\n\tif (p0p1.cross(p0p) > EPS) {\n\t\treturn COUNTER_CLOCKWISE;\n\t}\n\telse if (p0p1.cross(p0p) < -EPS) {\n\t\treturn CLOCKWISE;\n\t}\n\telse if (p0p1.dot(p0p) < -EPS) {\n\t\treturn ONLINE_BACK;\n\t}\n\telse if (p0p1.norm() < p0p.norm()) {\n\t\treturn ONLINE_FRONT;\n\t}\n\telse {\n\t\treturn ON_SEGMENT;\n\t}\n}\n\nbool intersection(Segment s1, Segment s2) {\n\tPoint p0 = s1.p1;\n\tPoint p1 = s1.p2;\n\tPoint p2 = s2.p1;\n\tPoint p3 = s2.p2;\n\treturn ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 &&\n\t\tccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0;\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tPoint p1 = s1.p1;\n\tPoint p2 = s1.p2;\n\tPoint p3 = s2.p1;\n\tPoint p4 = s2.p2;\n\tVector p1_p2 = p2 - p1;\n\tVector p1_p3 = p3 - p1;\n\tVector p1_p4 = p4 - p1;\n\tVector p4_p3 = p3 - p4;\n\tdouble d1 = fabs(p1_p2.cross(p1_p4)) / p1_p2.abs();\n\tdouble d2 = fabs(p1_p2.cross(p1_p3)) / p1_p2.abs();\n\tdouble r = d1 / (d1 + d2);\n\tVector p4_p = p4_p3 * r;\n\tPoint p = p4 + p4_p;\n\treturn p;\n}\npair<Point, Point> getCrossPoints(Circle circle, Line s) {\n\tPoint p, p1, p2;\n\tVector base, offset;\n\tdouble dis, d;\n\tp = project(circle.c, s);\n\tdis = distance(circle.c, s);\n\tbase = s.p2 - s.p1;\n\td = sqrt(circle.r * circle.r - dis * dis);\n\toffset = base / base.abs() * d;\n\tp1 = p + offset;\n\tp2 = p - offset;\n\tif (p1 < p2) {\n\t\treturn make_pair(p1, p2);\n\t}\n\telse {\n\t\treturn make_pair(p2, p1);\n\t}\n}\nVector getOrthogonalUnitVector(Vector v) {\n\tdouble abs = v.abs();\n\tVector unit;\n\treturn Vector(-v.y / abs, v.x / abs);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tVector c1_c2 = c2.c - c1.c;\n\tVector orth = getOrthogonalUnitVector(c1_c2);\n\n\tdouble l = c1_c2.abs(), r1 = c1.r, r2 = c2.r;\n\tdouble x = (l * l - r2 * r2 + r1 * r1) / (2 * l);\n\tdouble d = sqrt(r1 * r1 - x * x);\n\tPoint p1 = c1.c + c1_c2 * (x / l) + orth * d;\n\tPoint p2 = c1.c + c1_c2 * (x / l) - orth * d;\n\tif (p1 < p2) {\n\t\treturn make_pair(p1, p2);\n\t}\n\telse {\n\t\treturn make_pair(p2, p1);\n\t}\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tPoint a, b, t;\n\tfor (int i = 0; i < n; i++) {\n\t\ta = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (fabs(a.cross(b)) < EPS && a.dot(b) < EPS) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.y > b.y) {\n\t\t\tt = a;\n\t\t\ta = b;\n\t\t\tb = t;\n\t\t}\n\t\tif (a.y < EPS && EPS < b.y && a.cross(b)>EPS) {\n\t\t\tx = !x;\n\t\t}\n\t}\n\treturn (x ? 2 : 0);\n}\nint main() {\n\tPolygon poly;\n\tint n,i,q;\n\tcin >> n;\n\tfor (i = 0; i < n; i++) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tpoly.push_back(p);\n\t}\n\tcin >> q;\n\tPoint p;\n\twhile (q--) {\n\t\tcin >> p.x >> p.y;\n\t\tcout << contains(poly, p) << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing u64 = uint_fast64_t; \nusing pii =  pair<int, int>;\nusing pll =  pair<long long, long long>;\n#define rep(i, n) for(int i = 0; i < (n); ++i)\n#define all(x) (x).begin(),(x).end()\nconstexpr char ln =  '\\n';\n//////////////////////////////////////////////////////////////////////////////\n\n// 精度が足りないときはlong double\nusing DD = double;\nconstexpr DD EPS = 1e-11;\nconst DD PI = acos(DD(-1));\ninline int sgn(DD a) {return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;}\n\n//点\nstruct Point {\n    DD x, y;\n    Point (DD x = 0, DD y = 0): x(x), y(y) {}\n\n    Point operator+(const Point &p) const { return Point(*this) += p;}\n    Point operator-(const Point &p) const { return Point(*this) -= p;}\n    Point operator*(const Point &p) const { return Point(*this) *= p;}\n    Point operator*(DD a) const { return Point(*this) *= a;}\n    Point operator/(DD a) const { return Point(*this) /= a;}\n    Point& operator+=(const Point &p) { x += p.x; y += p.y; return *this;}\n    Point& operator-=(const Point &p) { x -= p.x; y -= p.y; return *this;}\n    Point& operator*=(const Point &p) { DD u = x*p.x - y*p.y; DD v = x*p.y + y*p.x; x = u; y = v; return *this;}\n    Point& operator*=(DD a) { x *= a; y *= a; return *this;}\n    Point& operator/=(DD a) { x /= a; y /= a; return *this;}\n    bool operator== (const Point &p) const { return !sgn(x - p.x) && !sgn(y - p.y);}\n    bool operator!= (const Point &p) const { return sgn(x - p.x) || sgn(y - p.y);}\n    bool operator< (const Point &p) const {\n        if (sgn(x - p.x)) return sgn(x - p.x) < 0;\n        return sgn(y - p.y) < 0;\n    }\n    friend istream& operator >>(istream& is, Point& p) { is >> p.x >> p.y; return is;}\n    friend ostream& operator <<(ostream& os, const Point& p) { os << p.x << \" \" << p.y; return os;}\n\n    DD norm() { return x*x + y*y;}\n    DD abs() { return sqrt(norm());}\n    DD arg() { return atan2(y,x);}\n};\n\n//ベクトル\nusing Vector = Point;\n\ninline DD norm(const Vector &a) { return a.x * a.x + a.y * a.y;}\ninline DD abs(const Vector &a) { return sqrt(norm(a));}\ninline DD dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y;}\ninline DD cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x;}\ninline Point rot(const Point &p, DD ang) { return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) { return Point(-p.y, p.x);}\ninline DD arg(const Vector &p) { return atan2(p.y, p.x);}\n//象限\nint ort(const Point &a) {\n    if (sgn(norm(a))) {\n        if (sgn(a.y) > 0) return sgn(a.x) > 0 ? 1 : 2;\n        return sgn(a.x) > 0 ? 4 : 3;\n    }\n    return 0;\n}\nbool xsort(const Point &a, const Point &b) {\n    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;\n    return sgn(a.y - b.y) < 0;\n}\nbool ysort(const Point &a, const Point &b) {\n    if (sgn(a.y - b.y)) return sgn(a.y - b.y) < 0;\n    return sgn(a.x - b.x) < 0;\n}\n\nbool argsortcross(const Point &a, const Point &b) {\n    int ao = ort(a), bo = ort(b);\n    if (ao != bo) return ao < bo;\n    return sgn(cross(a,b)) > 0;\n}\n\nbool argsortatan2(const Point &a, const Point &b) {\n    return sgn(atan2(b.y, b.x) - atan2(a.y, a.x)) > 0;\n}\n\n//線分\nstruct Segment {\n    Point p1,p2;\n    Segment() {};\n    Segment(Point p1, Point p2) : p1(p1),p2(p2) {}\n};\n\n//直線\nusing Line = Segment;\n\n// 円\nstruct Circle {\n    Point c;\n    DD r;\n    Circle(){}\n    Circle(Point c, DD r): c(c), r(r) {}\n    friend istream& operator >>(istream& is, Circle& C) { is >> C.c >> C.r; return is;}\n    friend ostream& operator <<(ostream& os, const Circle& C) { os << C.c << \" \" << C.r; return os;}\n};\n\n//多角形\nusing Polygon = vector<Point>;\n\n//点の進行方向\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (sgn(cross(a,b)) > 0) return 1; //p0,p1から見てp2は左側(反時計回り)\n    if (sgn(cross(a,b)) < 0) return -1; //p0,p1から見てp2は右側(時計回り)\n    if (sgn(dot(a,b)) < 0) return 2; //p2-p0-p1の順に一直線上\n    if (sgn(norm(b) - norm(a)) > 0) return -2; //p0-p1-p2の順に一直線上\n    return 0; //p0-p2-p1の順に一直線上\n}\n\n//直線の交差判定 交差する場合1, 平行な場合0, 同一直線のとき-1\nint intersectLP(const Vector &a, const Vector &b) {\n    if (sgn(cross(a,b))) return 1;\n    if (sgn(dot(a,b))) return 0;\n    return -1;\n} \nint intersectLP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p2-p1,p4-p3);}\nint intersectLP(const Line &l1, const Line &l2) {return intersectLP(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//直線の平行判定\nbool isParallel(const Vector &a, Vector &b) {return intersectLP(a,b) <= 0;}\nbool isParallel(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p1,p2,p3,p4) <= 0;}\nbool isParallel(const Line &l1, const Line &l2) {return intersectLP(l1,l2) <= 0;}\n\n//直線の直交判定\nbool isOrthogonal(const Vector &a, const Vector &b) {return !sgn(dot(a,b));}\nbool isOrthogonal(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return isOrthogonal(p2-p1,p4-p3);}\nbool isOrthogonal(const Line &l1, const Line &l2) {return isOrthogonal(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//線分の交差判定\nbool intersectSP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\nbool intersectSP(const Segment &s1, const Segment &s2) { return intersectSP(s1.p1, s1.p2, s2.p1, s2.p2);}\n\n//直線と線分の交差判定\nbool intersectLSP(const Line &l, const Segment &s) {return ccw(l.p1,l.p2,s.p1)*ccw(l.p1,l.p2,s.p2) <= 0;}\n\n//直線と直線の交点\nPoint getCrossPointLP(const Line &l1, const Line &l2) {\n    assert(intersectLP(l1,l2)==1);\n    return l1.p1 + (l1.p2-l1.p1)*cross(l2.p1-l1.p1,l2.p2-l2.p1)/cross(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\n//線分と線分の交点\nPoint getCrossPointSP(const Segment &s1, const Segment &s2) {\n    assert(intersectSP(s1,s2));\n    return getCrossPointLP(s1,s2);\n}\n\n//射影\nPoint project(const Segment &s, const Point &p) {\n    Vector base = s.p2 - s.p1;\n    DD r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//線対称\nPoint reflect(const Segment &s, const Point &p) {return p + (project(s,p) - p) * 2;}\n\n//点と直線の距離\nDD getDistanceLP(const Line &l, const Point &p) { return abs(cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1));}\n\n//点と線分の距離\nDD getDistanceSP(const Segment &s, const Point &p) {\n    if (sgn(dot(s.p2 - s.p1,p - s.p1)) < 0) return abs(p - s.p1);\n    if (sgn(dot(s.p1 - s.p2,p - s.p2)) < 0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n//直線と直線の距離\nDD getDistanceLP(const Line &l1, const Line &l2) {\n    if (intersectLP(l1,l2)) return 0;\n    return getDistanceLP(l1,l2.p1);\n}\n\n//直線と線分の距離\nDD getDistanceLSP(const Line &l, const Segment &s) {\n    if (intersectLSP(l,s)) return 0;\n    return min(getDistanceLP(l,s.p1),getDistanceLP(l,s.p2));\n}\n\n//線分と線分の距離\nDD getDistanceSP(const Segment &s1, const Segment &s2) {\n    if (intersectSP(s1, s2)) return 0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n//円と直線の交差判定\nbool intersectLP(const Circle &c, const Line &l) { return sgn(getDistanceLP(l, c.c) - c.r) <= 0;}\n//円と線分の交差判定\nbool intersectSP(const Circle &c, const Segment &s) {\n    return sgn(getDistanceSP(s,c.c) - c.r) <= 0 && sgn(max(abs(s.p1 - c.c),abs(s.p2 - c.c)) - c.r) >= 0;\n}\n//円と円の交差判定\nbool intersect(const Circle &c1, const Circle &c2) { return abs(c1.c - c2.c) - (c1.r + c2.r) < EPS && fabs(c1.r - c2.r) - abs(c1.c - c2.c) < EPS;}\n\n//円と直線の交点\npair<Point, Point> getCrossPoints(const Circle &c, const Line &l) {\n    assert(intersectLP(c,l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    DD base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ninline Vector polar(DD a, DD r) { return Point(cos(r) * a, sin(r) * a);}\n\n//円と円の交点\npair<Point, Point> getCrossPoints(const Circle &c1, const Circle &c2) {\n    assert(intersect(c1, c2));\n    DD d = abs(c1.c - c2.c);\n    DD a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (DD(2) * c1.r * d));\n    DD t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//多角形の面積\nDD area(const Polygon &g) {\n    const int N = g.size();\n    DD ret = 0;\n    for (int i = 0; i < N; ++i) {\n        ret += cross(g[i],g[(i+1)%N]);\n    }\n    return fabs(ret)/2;\n}\n\n// 多角形-点の包含判定\nint containment(const Polygon &g, const Point &p) {\n    const int N = g.size();\n    DD ang = 0;\n    for (int i = 0; i < N; i++) {\n        if (!ccw(g[i],g[(i+1)%N],p)) return 1;\n        ang += atan2(cross(g[(i+1)%N] - p, g[i] - p), dot(g[(i+1)%N] - p, g[i] - p));\n    }\n    if (sgn(ang)) return 2;\n    return 0;\n    // int cnt = 0;\n    // for (int i = 0; i < N; ++i) {\n    //     if (norm(g[i] - p) < EPS || norm(g[(i+1)%N] - p) < EPS || ccw(g[i], g[(i+1)%N], p) == 0) {\n    //         return 1; // pがgの辺上に存在する\n    //     }\n    //     Point I = Point(2e9 + p.x, 2e9 + 574677631 + p.y);\n    //     if (ccw(I, p, g[i]) == 0 || ccw(I, p, g[(i+1)%N]) == 0) continue;\n    //     if (intersectSP(I, p, g[i], g[(i+1)%N])) ++cnt;\n    // }\n    // if (cnt&1) return 2; // pがgに含まれる\n    // else return 0; // pがgに含まれない\n}\n\n//凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u,l;\n    const int N = s.size();\n    if (N < 3) return s;\n    sort(s.begin(), s.end(), xsort);\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n    l.emplace_back(s[N-1]);\n    l.emplace_back(s[N-2]);\n    \n    for (int i = 2; i < s.size(); ++i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = u.size(); n >= 2 && ccw(u[n-2],u[n-1],s[i]) != -1; --n) {\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for (int i = N - 3; i >= 0; --i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; --n) {\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\n//最遠点対\nDD farthestpointpair(const Polygon &g) {\n    const int N = g.size();\n    if (N == 2) return abs(g[1] - g[0]);\n    int i = 0, j = 0;\n    for (int k = 0; k < N; ++k) {\n        if (g[k].y > g[i].y) i = k;\n        if (g[k].y < g[j].y) j = k;\n    }\n\n    DD ret = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        ret = max(ret, abs(g[i]-g[j]));\n        if (cross(g[(i+1)%N] - g[i], g[(j+1)%N] - g[j]) < -EPS) {\n            i = (i+1)%N;\n        } else {\n            j = (j+1)%N;\n        }\n    }\n\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid CGL_1_A() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << project(l,p) << ln;\n    }\n}\n\nvoid CGL_1_B() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << reflect(l,p) << ln;\n    }\n}\n\nvoid CGL_1_C() {\n    Point p0,p1; cin >> p0 >> p1;\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p2; cin >> p2;\n        int v = ccw(p0,p1,p2);\n        string ans;\n        if (v==1) ans = \"COUNTER_CLOCKWISE\";\n        if (v==-1) ans = \"CLOCKWISE\";\n        if (v==2) ans = \"ONLINE_BACK\";\n        if (v==-2) ans = \"ONLINE_FRONT\";\n        if (v==0) ans = \"ON_SEGMENT\";\n        cout << ans << ln;\n    }\n}\n\nvoid CGL_2_A() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        if (isParallel(p0,p1,p2,p3)) cout << 2 << ln;\n        else if (isOrthogonal(p0,p1,p2,p3)) cout << 1 << ln;\n        else cout << 0 << ln;\n    }\n}\n\nvoid CGL_2_B() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        cout << intersectSP(p0,p1,p2,p3) << ln;\n    }\n}\n\nvoid CGL_2_C() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s0(p0,p1), s1(p2,p3);\n        cout << getCrossPointSP(s0,s1) << ln;\n    }\n}\n\nvoid CGL_2_D() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s0(p0,p1), s1(p2,p3);\n        cout << getDistanceSP(s0,s1) << ln;\n    }\n}\n\nvoid CGL_3_A() {\n    int N; cin >> N;\n    Polygon P(N);\n    rep(i,N) cin >> P[i];\n\n    cout << fixed << setprecision(1) << area(P) << ln;\n}\n\nvoid CGL_3_C() {\n    int N; cin >> N;\n    Polygon P(N);\n    rep(i,N) cin >> P[i];\n\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin>> p;\n        cout << containment(P,p) << ln;\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n    cout << fixed << setprecision(20);\n    //CGL_1_A();\n    //CGL_1_B();\n    //CGL_1_C();\n    //CGL_2_A();\n    //CGL_2_B();\n    //CGL_2_C();\n    //CGL_2_D();\n    //CGL_3_A();\n    CGL_3_C();\n}\n\n/*\n  verified on 2020/06/02\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing ld = long double;\nusing point = std::complex<ld>;\nusing polygon = std::vector<point>;\n\nconstexpr ld eps = 1e-10;\nconstexpr ld pi = std::acos(-1.0);\n\nbool comp(point a, point b) {\n    return std::real(a) < std::real(b) || (std::real(a) <= std::real(b) && std::imag(a) < std::imag(b));\n}\n\nstd::vector<point> unique(std::vector<point> ps) {\n    std::sort(std::begin(ps), std::end(ps), comp);\n    std::vector<point> res;\n    for(auto& p : ps) {\n        if(res.empty() || abs(res.back() - p) > eps) {\n            res.push_back(p);\n        }\n    }\n    return res;\n}\n\nld dot(point const& a, point const& b) {\n    return std::real(std::conj(a) * b);\n}\nld cross(point const& a, point const& b) {\n    return std::imag(std::conj(a) * b);\n}\n\nint ccw(point a, point b, point c) {\n    b -= a; c -= a;\n    if(cross(b, c) > eps) return 1;            // a -> b -> c : counterclockwise\n    if(cross(b, c) < -eps) return -1;          // a -> b -> c : clockwise\n    if(dot(b, c) < 0) return 2;                // c -> a -> b : line\n    if(std::norm(b) < std::norm(c)) return -2; // a -> b -> c : line\n    return 0;                                  // a -> c -> b : line\n}\n\nstruct segment {\n    segment() : a(0, 0), b(0, 0) {}\n    segment(point a, point b) : a(a), b(b) {}\n    point a, b;\n};\n\nstruct line {\n    line() : a(0, 0), b(0, 0) {}\n    line(point a, point b) : a(a), b(b) {}\n    line(segment s) : a(s.a), b(s.b) {}\n    point a, b;\n};\n\n\nbool isis_ll(line l, line m) {\n    return cross(l.b - l.a, m.b - m.a) < eps;\n}\n\nbool isis_ls(line l, segment s) {\n    return (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\nbool isis_lp(line l, point p) {\n    return (std::abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(segment s, point p) {\n    return (std::abs(s.a - p) + std::abs(s.b - p) - std::abs(s.b - s.a) < eps);\n}\n\nbool isis_ss(segment s, segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0\n        && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\npoint proj(line l, point p) {\n    long double t = dot(p - l.a, l.a - l.b) / std::norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\npoint is_ll(line s, line t) {\n    point sv = s.b - s.a, tv = t.b - t.a;\n    assert(cross(sv, tv) != 0);\n    return s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n\npoint is_ss(segment s1, segment s2) {\n    assert(isis_ss(s1, s2));\n    point sv = s1.b - s1.a, tv = s2.b - s2.a;\n    if(cross(sv, tv) == 0) {\n        if(std::abs(s1.a - s2.a) < eps || std::abs(s1.a - s2.b) < eps) {\n            return s1.a;\n        } else {\n            return s1.b;\n        }\n    } else {\n        return is_ll(line(s1), line(s2));\n    }\n}\n\nlong double dist_lp(line l, point p) {\n    return std::abs(p - proj(l, p));\n}\n\nlong double dist_ll(line l, line m) {\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nlong double dist_ls(line l, segment s) {\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nlong double dist_sp(segment s, point p) {\n    point r = proj(line(s), p);\n    return isis_sp(s, r) ? std::abs(r - p) : std::min(std::abs(s.a - p), std::abs(s.b - p));\n}\n\nlong double dist_ss(segment s, segment t) {\n    if(isis_ss(s, t)) return 0;\n    long double d1 = std::min(dist_sp(s, t.a), dist_sp(s, t.b));\n    long double d2 = std::min(dist_sp(t, s.a), dist_sp(t, s.b));\n    return std::min(d1, d2);\n}\n\nld area(polygon const& p) {\n    const int N = p.size();\n    ld res = 0;\n    for(int i=0; i<N; ++i) {\n        res += cross(p[i], p[(i+1)%N]);\n    }\n    return res / 2;\n}\n\n// 0 -> on, 1 -> in, 2 -> out\nint is_in_polygon(polygon const& poly, point p) {\n    const int n = poly.size();\n    ld sum = 0;\n    for(int i = 0; i < n; ++i) {\n        point p1 = poly[i], p2 = poly[(i + 1) % n];\n        if(isis_sp(segment(p1, p2), p)) {\n            return 0;\n        }\n        sum += arg((p2 - p) / (p1 - p));\n    }\n    return std::abs(sum) < pi / 2 ? 2 : 1; // @todo: should check < 0.5 ?\n}\n\n\nusing namespace std;\n\nint main() {\n    int g;\n    cin >> g;\n    polygon poly(g);\n    for(int i = 0; i < g; ++i) {\n        ld x, y; cin >> x >> y;\n        poly[i] = point(x, y);\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        ld x, y;\n        cin >> x >> y;\n        int ans = is_in_polygon(poly, point(x, y));\n        if(ans == 2) {\n            cout << 0 << endl;\n        } else if(ans == 1) {\n            cout << 2 << endl;\n        } else {\n            cout << 1 << endl;\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\ndouble polygonArea(const vector<Point>& p) {\n\tint n = p.size();\n\tdouble ret = 0.0;\n\tfor(int i = 0; i < n; ++i) {\n\t\tret += cross(p[i], p[(i+1)%n]);\n\t}\n\n\treturn abs(ret) / 2.0;\n}\n\nbool isConvex(const vector<Point>& p) {\n\tint n = p.size();\n\trep(i, n) {\n\t\tif(ccw(p[i], p[(i+1)%n], p[(i+2)%n]) == -1) return false;\n\t}\n\treturn true;\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(const vector<Point>& v, Point p) {\n\tint n = v.size();\n\tbool flag = false;\n\trep(i, n) {\n\t\tPoint a = v[i] - p, b = v[(i+1)%n] - p;\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(a.y <= 0.0 && 0 < b.y && cross(a, b) > 0.0) flag = !flag;\n\t\tif(cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn flag ? 2 : 0;\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l1.a)) < EPS; }\n\nbool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }\n\nbool isIntersectLS(Line l, Seg s) {\n\treturn cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;\n}\n\nbool isIntersectSS(Seg s1, Seg s2) { \n\treturn ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 \n\t\t&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\ndouble distanceLS(Line l, Seg s) {\n\tif (isIntersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.a), distanceLP(l, s.b));\n}\n\ndouble distanceSP(Seg s, Point p) {\n\tif (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);\n\tif (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);\n\treturn distanceLP(Line(s.a, s.b) , p);\n}\n\ndouble distanceSS(Seg s1, Seg s2) {\n    if (isIntersectSS(s1, s2)) return 0.0;\n\treturn min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );\n}\n\n// if isIntersectLL(l1, l2)\nPoint crossPointLL(Line l1, Line l2) {\n\tPoint base = l2.b - l2.a;\n\tdouble d = abs(cross(base, l1.a - l2.a));\n\tdouble d2 = abs(cross(base, l1.b - l2.a));\n\tdouble t = d / (d + d2);\n\treturn l1.a + (l1.b - l1.a) * t;\n}\n\n// if isIntersectLS(l, s)\nPoint crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }\n\n// if isIntersectSS(s1, s2)\nPoint crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }\n\nPoint project(Line l, Point p) {\n\tPoint base = l.b - l.a;\n\tdouble t = dot(base, p-l.a) / dot(base, base);\n\treturn l.a + base * t;\n}\n\nPoint reflect(Line l, Point p) {\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\n\tvector<Point> v(n);\n\trep(i, n) cin >> v[i].x >> v[i].y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tcout << contains(v, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#define EPS 1e-10\nusing namespace std;\n\ndouble add(double a,double b){\n\tif(fabs(a+b)<EPS*(fabs(a)+fabs(b)))return 0.0;\n\treturn a+b;\n}\n\nclass P{\npublic:\n\tdouble x,y;\n\tP(double xx=0.0,double yy=0.0){\n\t\tx=xx;\n\t\ty=yy;\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x),add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x),add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(x*d,y*d);\n\t}\n\tP operator /(double d){\n\t\treturn P(x/d,y/d);\n\t}\n};\n\ntypedef P Vector;\ntypedef vector<P> Polygon;\n\ndouble norm(Vector p){\n\treturn add(p.x*p.x,p.y*p.y);\n}\n\ndouble abs(Vector p){\n\treturn sqrt(norm(p));\n}\n\ndouble dot(Vector a,Vector b){\n\treturn add(a.x*b.x,a.y*b.y);\n}\n\ndouble cross(Vector a,Vector b){\n\treturn add(a.x*b.y,-a.y*b.x);\n}\n\n\nint contains(Polygon g,P p){\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++){\n\t\tP a=g[i]-p,b=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS && dot(a,b)<EPS)return 1;\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<EPS && EPS<b.y && cross(a,b)>EPS)x=!x;\n\t}\n\treturn (x?2:0);\n}\n\nint main(void){\n\tint n;\n\tscanf(\"%d\",&n);\n\tPolygon g;\n\tfor(int i=0;i<n;i++){\n\t\tP p;\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\t\tg.push_back(P(p.x,p.y));\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tP p;\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\t\tprintf(\"%d\\n\",contains(g,p));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n#include <utility>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n  double x, y;\n  Point() {};\n  Point(double x, double y): x(x), y(y) {}\n\n  Point operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n  Point operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double d) { return Point(d * x, d * y); }\n  Point operator / (double d) { return Point(x / d, y / d); }\n\n  bool operator < (const Point &p) const {\n    return (x == p.x ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend ostream& operator << (ostream &os, Point &p) {\n    return os << \"Point(\" << p.x << \", \" << p.y << \")\";\n  }\n};\n\nclass Circle {\npublic:\n  Point c;\n  double r;\n  Circle() {}\n  Circle(double x, double y, double r): c(x, y), r(r) {}\n};\n\ntypedef Point Vector;\n\ndouble norm(Point p) {\n  return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(Point p) {\n  return sqrt(norm(p));\n}\n\ndouble atanned(Point p) {\n  return atan2(p.y, p.x);\n}\n\nVector vec(double r, double deg) {\n  return Vector(r * cos(deg), r * sin(deg));\n}\n\ndouble dot(Vector v1, Vector v2) {\n  return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross (Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\nPoint PS[101];\nint N;\n\nint ppc(Point p) {\n  bool x = false;\n\n  for (int i = 0; i < N; i++) {\n    Vector a = PS[i] - p, b = PS[(i + 1) % N] - p;\n\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1; // on\n    if (a.y > b.y) swap(a, b);\n    if (cross(a, b) > EPS && a.y < EPS && b.y > EPS) x = !x;\n  }\n\n  return (x ? 2 : 0);\n}\n\nint main() {\n  cin >> N;\n\n  for (int i = 0; i < N; i++) {\n    int x, y; cin >> x >> y;\n    PS[i] = Point(x, y);\n  }\n\n  int q; cin >> q;\n\n  for (int i = 0; i < q; i++) {\n    int x, y; cin >> x >> y;\n    cout << ppc(Point(x, y)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (pos_pre * pos_aft == -1) count++;\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#include <vector>\n#include <stack>\n#include <queue>\n#define ESP (1e-13)\n#define INF 2000000000\nusing namespace std;\n\n//??§?¨????????§???????\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(const Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(const double& a) {\n\t\treturn Point(x*a, y*a);\n\t}\n\n\tPoint operator/(const double& a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tPoint operator=(const Point& p1) {\n\t\treturn Point(p1.x,p1.y);\n\t}\n\n};\n\n//??´??§?????????????§???????\ntypedef Point Vector;\n\n//??´???????§???????\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n\tLine operator=(const Line& l) {\n\t\treturn Line(l.p1, l.p2);\n\t}\n};\n\n //??????????§???????\n typedef Line Segment;\n\n //???????§???????\n struct Circle {\n\t Point c;\n\t double r;\n\t Circle(){ }\n\t Circle(const Point& p,const double& r) : c(p),r(r) { }\n };\n\n//2??????????????¢????±?????????¢??°\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\n//????????¢??°\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\n//????????¢??°\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\n//3??????????????¢???????±?????????¢??°\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\n//??????????????´????????????????°???±?????§?¨?????±?????????¢??°\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble x = abs(base, Point(0.0, 0.0))*abs(base, Point(0.0, 0.0));\n\tdouble r = product(p - s.p1, base) / x;\n\treturn s.p1 + base*r;\n}\n\n//????????????????±??????¨??????????????????????§°????????§?¨?????±?????????¢??°\nPoint reflect(Segment s, Point p) {\n\treturn (project(s, p) - p)*2.0 + p;\n}\n\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\n//????????????????????£??????????????????????????¢??°\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??´?????¨???????????¢????±?????????¢??°\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\n//????????¨???????????¢????±?????????¢??°\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < -ESP) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < -ESP) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\n//2??????????????¢????±?????????¢??°\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\n//?????´???????\\???¢????±?????????¢??°\nPoint CrossPoint(Line s1,Line s2) {\n\tdouble d1=DistanceLP(s2, s1.p1);\n\tdouble d2 = DistanceLP(s2, s1.p2);\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//?????¨??´?????????????????????????????¢??°\nbool intersect(Circle c, Line l) {\n\treturn DistanceLP(l, c.c) < c.r;\n}\n\n//?????¨??´????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c, Line l) {\n\tVector prpr = project(l, c.c);\n\tVector hshs = (l.p2 - l.p1)/abs(l.p2 ,l.p1);\n\tdouble base = sqrt(c.r*c.r - abs(c.c, prpr)*abs(c.c, prpr));\n\treturn make_pair(prpr - hshs*base, prpr + hshs*base);\n}\n\n//????§???¨?\\?\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r)*a, sin(r)*a); }\n\n//?????¨????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c ,c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d)); //????????????\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//2??´??????????????¢???????±?????????¢??°???\n   //??´?????????\nbool isOrth(Vector a, Vector b) {\n\treturn abs(product(a, b)) < ESP;\n   }\nbool isOrth(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrth(a1 - a2, b1 - b2);\n}\nbool isOrth(Segment s1, Segment s2) {\n\treturn isOrth(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n    //????????????\nbool isPara(Vector a, Vector b) {\n\treturn abs(cross(a, b)) < ESP;\n}\nbool isPara(Point a1, Point a2, Point b1, Point b2) {\n\treturn isPara(a1 - a2, b1 - b2);\n}\nbool isPara(Segment s1, Segment s2) {\n\treturn isPara(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tPoint g[100];\n\tfor (int i = 0;i < n;i++) {\n\t\tcin >> g[i].x;\n\t\tcin >> g[i].y;\n\t}\n\tSegment s[100];\n\tfor (int j = 0;j < n;j++) {\n\t\tint k = (j + 1) % n;\n\t\ts[j].p1.x = g[j].x; s[j].p1.y = g[j].y;\n\t\ts[j].p2.x = g[k].x; s[j].p2.y = g[k].y;\n\t}\n\tPoint p;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tint flag = 0;\n\t\tcin >> p.x; cin >> p.y;\n\t\tSegment ps;\n\t\tps.p1.x = p.x; ps.p1.y = p.y;\n\t\tps.p2.x = 10001; ps.p2.y = p.y;\n\t\tfor (int j = 0;j < n;j++) {\n\t\t\tif (ccw(g[j], g[(j + 1) % n], p) == 0) {\n\t\t\t\tcout << 1 << endl;\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tint cnt = 0;\n\t\t\tps.p1.y += 0.1; ps.p2.y+= 0.1;\n\t\t\tfor (int j = 0;j < n;j++) {\n\t\t\t\tif (intersect(s[j], ps)) cnt++;\n\t\t\t}\n\t\t\t\n\t\t\tif (cnt % 2 == 1) cout << 2 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    int x;\n    int y;\n    Point(int x, int y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    // cout << get_position(s1, s2.p1) << \" \" << get_position(s1, s2.p2)  << endl;\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n        }\n    }\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<cctype>\n#include<vector>\n#include<cassert>\n#include<cmath>\nusing namespace std;\n\n\n#define reg register\ntypedef long long ll;\ntypedef double db;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nnamespace Geometry{\n\tconst db eps=1e-7;\n\tconst db inf=1.0/0.0,INF=1e18;\n\tconst db Nan=0.0/0.0;\n\tconst db PI=acos(db(-1));\n\tint sign(db x){ return x<-eps?-1:x>eps; }\n\tint cmp(db x,db y){ return sign(x-y); }\n\tstruct Point{\n\t\tdb x,y;\n\t\tPoint(){; }\n\t\tPoint(db a,db b){ x=a,y=b; }\n\t\tdb len(){ return sqrt(x*x+y*y); }\n\t\tPoint Rot(db k){ return Point(x*cos(k)-y*sin(k),x*sin(k)+y*cos(k)); }\n\t\tPoint Unit(){ db t=len(); return Point(x/t,y/t); }\n\t\tvoid Read(){ x=rd(),y=rd(); }\n\t\tvoid Show(){ printf(\"(%.2lf,%.2lf)\",x,y); }\n\t};\n\ttypedef Point Vector;\n\tVector operator + (Vector a,Vector b){ return Vector(a.x+b.x,a.y+b.y); }\n\tVector operator - (Vector a,Vector b){ return Vector(a.x-b.x,a.y-b.y); }\n\tdb operator * (Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\n\tdb operator ^ (Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n\tVector operator * (Vector a,db x){ return Vector(a.x*x,a.y*x); }\n\tVector operator * (db x,Vector a){ return Vector(a.x*x,a.y*x); }\n\tVector operator / (Vector a,db x){ return Vector(a.x/x,a.y/x); }\n\tint operator == (Point a,Point b){ return cmp(a.x,b.x)==0 && cmp(a.y,b.y)==0; }\n\tdb Ang(Vector a){ return atan2(a.y,a.x); }\n\tdb Dis(Point x,Point y){ return (x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y); }\n\tdb Ang(Vector x,Vector y){ return acos(x*y/(x.len()*y.len())); }\n\n\tint Get(Vector a){\n\t\tif(a.x>0 && a.y>=0) return 0;\n\t\tif(a.x<=0 && a.y>0) return 1;\n\t\tif(a.x<0 && a.y<=0) return 2;\n\t\treturn 3;\n\t}\n\tint operator < (Vector a,Vector b) { \n\t\tif(Get(a)==Get(b)) return sign(a^b)>0;\n\t\treturn Get(a)<Get(b);\n\t}\n\tint operator <= (Vector a,Vector b){ return a==b || a<b; }\n\tint operator > (Vector a,Vector b){ return b<a; }\n\tint operator >= (Vector a,Vector b){ return b<=a; }\n\n\tdb Calc_Area(vector <Point> V){\n\t\tint n=V.size(); db res=0;\n\t\trep(i,0,V.size()-1) res+=V[i]^V[(i+1)%n];\n\t\treturn fabs(res/2);\n\t}\n\tint Check_Convex(vector <Point> V){\n\t\tint n=V.size(),fl=1;\n\t\trep(i,0,V.size()-1) {\n\t\t\tint j=(i+1)%n,k=(i+2)%n;\n\t\t\tif( ((V[i]-V[j])^(V[k]-V[j])) < 0) fl=0;\n\t\t}\n\t\treturn fl;\n\t}\n\n\tint On(Point x,Vector y,Point z,int k=0){  // z On  Segment [x,x+y]\n\t\tz=z-x; \n\t\tif(!k) return y*z>=-eps && cmp(z^y,0)==0 && y.len()+eps>=z.len();\n\t\telse return y*z>=-eps && cmp(z^y,0)==0 && y.len()>z.len();\n\t}\n\n\tstruct Line{\n\t\tdb k,b;\n\t\tLine(){ ; } \n\t\tLine(db x,db y){ k=x,b=y; }\n\t\tLine(Point x,Point y) {\n\t\t\tassert(cmp(x.x,y.x) || cmp(x.y,y.y));\n\t\t\tif(cmp(x.x,y.x)==0) k=inf,b=x.x;\n\t\t\telse {\n\t\t\t\tdb t=(y.y-x.y)/(y.x-x.x);\n\t\t\t\tk=t,b=x.y-x.x*k;\n\t\t\t}\n\t\t}\n\t\tdb operator [] (const db x){ return k==inf? Nan : k*x+b; }\n\t};\n\tint operator == (Line a,Line b){\n\t\tif(a.k==inf && b.k==inf) return cmp(a.b,b.b)==0;\n\t\tif(a.k==inf || b.k==inf) return 0;\n\t\treturn cmp(a.b,b.b)==0 && cmp(a.k,b.k)==0;\n\t}\n\tdb operator & (Line x,Line y){ \n\t\tassert(fabs(x.k-y.k)>eps);\n\t\tif(y.k==inf) swap(x,y);\n\t\tif(x.k==inf) return x.b;\n\t\treturn (x.b-y.b)/(y.k-x.k); \n\t}\n\tdb Dis(Line x,Point y){ \n\t\tif(x.k==inf) return abs(x.b-y.x);\n\t\treturn fabs((x[y.x]+y.y)/sqrt(x.k*x.k+1)); \n\t}\n\tint Parallel(Line x,Line y){ \n\t\tif(x.k==inf && y.k==inf) return 1;\n\t\tif(x.k==inf || y.k==inf) return 0;\n\t\treturn cmp(x.k,y.k)==0;\n\t}\n\n\t/*struct Circle{\n\t\tPoint x; db r;\n\t\tCircle(){ ; }\n\t\tCircle(Point _x,db _r){ x=_x,r=_r; }\n\t\tCircle(db _x,db _y,db _r){ x=Point(_x,_y),r=_r; }\n\t};\n\tint In(Circle a,Circle b){ return a.r*a.r>=Dis(a.x,b.x); }\n\tint Check_Cross(Circle a,Circle b) { return cmp((a.r+b.r)*(a.r+b.r),Dis(a.x,b.x)); }\n\tvector <Point> operator & (Circle a,Circle b){\n\t\tint t=Check_Cross(a,b);\n\t\tif(t<0) return {};\n\t\t;\n\t\t;\n\t\treturn {};\n\t}*/\n}\nusing namespace::Geometry;\n\n\nconst int N=110;\n\nint n;\nPoint V[N];\n\n\n\nint main(){\n\tn=rd();\n\trep(i,1,n) V[i].Read();\n\tdb rotk=0.3146;\n\trep(i,1,n) V[i]=V[i].Rot(rotk);\n\trep(kase,1,rd()) {\n\t\tPoint X; X.Read(); X=X.Rot(rotk); \n\t\tint c=0,fl=0;\n\t\trep(i,1,n) {\n\t\t\tint j=i%n+1;\n\t\t\tif(On(V[i],V[j]-V[i],X)) fl=1;\n\t\t\tPoint x=V[i]+((V[j]-V[i])/(V[j]-V[i]).y)*(X.y-V[i].y);\n\t\t\t//((V[j]-V[i])/(V[j]-V[i]).y).Show();\n\t\t\t//x.Show(); puts(\"\");\n\t\t\tif(x.x>=X.x && On(V[i],V[j]-V[i],x,1)) c++;\n\t\t}\n\n\t\tif(fl) puts(\"1\");\n\t\telse if(c&1) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tcout << setprecision(1) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex <double> point;\nvector <point> pol;\n\nbool eq(double a,double b){\n  return (abs(a-b)<=(1e-9));\n}\n\nbool on_segment(point a,point b,point c){\n  return eq(abs(b-a),abs(a-c)+abs(b-c));\n}\n\ndouble get_r(point a,point b,point c){\n  b-=a,c-=a;\n  b*=conj(c);\n  return arg(b);\n}\n\nint solve(point a){\n  for(int i=0;i<pol.size();i++)\n    if(on_segment(pol[i],pol[(i+1)%pol.size()],a)) return 1;\n \n  double sum=0;\n  for(int i=0;i<pol.size();i++)\n    sum+=get_r(a,pol[i],pol[(i+1)%pol.size()]);\n\n  if(abs(sum)<=0.0001)return 0;\n  return 2;\n}\n\n\nint main(){\n  int n;\n  cin>>n;\n  for(int i=0;i<n;i++) {\n    double a,b;\n    cin>>a>>b;\n    pol.push_back(point(a,b));\n  }\n\n  int q;\n  cin>>q;\n  while(q--){\n    double a,b;\n    cin>>a>>b;\n    cout<<solve(point(a,b))<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n \ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n \nconst int N = -1;\nconst ld EPS = 1e-12;\n \nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n \ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n \nistream& operator>> (istream& is, complex<ld>& p){\n    ld val;\n    is >> val;\n    p.real(val);\n    is >> val;\n    p.imag(val);\n    return is;\n}\n \nld dot(PT a, PT b){ return real(conj(a)*b); }\nint crossCall = 0;\nclock_t crossClock = 0;\nld cross(PT a, PT b){\n\tclock_t st = clock();\n\tcrossCall++; \n\tld res = imag(conj(a)*b); \n\tcrossClock += clock()-st;\n\treturn res;\n}\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n \nPT proj(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + b*real(c/b);\n}\n \nPT reflect(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + conj(c/b)*b;\n}\n \nPT rotate(PT a, PT b, ld theta){\n    return (b-a)*polar<ld>(1, theta) + a;\n}\n \nint relpos(PT a, PT b, PT c){\n    b -= a, c -= a;\n    c /= b;\n    if (Grt(c.imag(), 0)) return LEFT;\n    if (Lss(c.imag(), 0)) return RIGHT;\n    if (Lss(c.real(), 0)) return BACK;\n    if (Grt(c.real(), 1)) return FRONT;\n    return ON;\n}\n \nint side(PT a, PT b, PT c){\n    b -= a, c -= a;\n    ld cr = cross(b, c);\n    return Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n \n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n    int as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n    if (as && as == bs || cs && cs == ds) return false;\n    else if (as || bs || cs || ds) return true;\n    for (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n        ld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n        for (int k = 0; k < 2; k++, swap(c, d))\n            if (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n                return true;\n    }\n    return false;\n}\n \n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n    ld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n    return (c1*d - c2*c)/(c1-c2);\n}\n \nld distLSP(PT a, PT b, PT c){\n    int rpos = relpos(a, b, proj(a, b, c));\n    if (rpos == BACK) return len(c-a);\n    if (rpos == FRONT) return len(c-b);\n    b -= a, c -= a;\n    return abs(cross(b, c)/len(b));\n}\n \nld distLS(PT a, PT b, PT c, PT d){\n    if (intersect(a, b, c, d)) return 0;\n    return min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n \nld signedArea(Poly &po){\n    int n = po.size();\n    ld res = 0;\n    for (int i = 0; i < n; i++)\n        res += cross(po[i], po[(i+1)%n]);\n    return res/2;\n}\n \nld area(Poly &poly){\n    return abs(signedArea(poly));\n}\n \nbool isConvex(Poly &po){\n    int n = po.size();\n    bool neg = false, pos = false;\n    for (int i = 0; i < n; i++){\n        int rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n        if (rpos == LEFT) pos = true;\n        if (rpos == RIGHT) neg = true;\n    }   \n    return (neg&pos) == false;\n}\n \nint crossingN(Poly &po, PT a){\n    int cn = 0;\n    ld mx = 1e9;\n    PT b(mx, a.Y);\n    int n = po.size();\n    for (int i = 0; i < n; i++){\n        PT p = po[i], q = po[(i+1)%n];\n        if (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n            cn++;\n    }\n    return cn;\n}\n \nint pointInPoly(Poly &po, PT a){\n    int n = po.size();\n    for (int i = 0; i < n; i++)\n        if (relpos(po[i], po[(i+1)%n], a) == ON)\n            return ON;  \n    return (crossingN(po, a)%2 ? IN : OUT);\n}\n \nint main(){ \n    Poly poly;\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        poly.pb(p);\n    }\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        int s = pointInPoly(poly, p);\n        cout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)n; i++)\n\nconst double eps = 1e-10;\n\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}  \n  double norm() {return sqrt(x*x + y*y);}\n};\n\nPoint operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\nPoint operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ndouble operator * (const Point &p, const Point q) {return p.x * q.x + p.y * q.y;}\nbool operator == (const Point &p, const Point &q) {return (abs(p.x - q.x) < eps && abs(p.y - q.y) < eps);}\nbool operator != (const Point &p, const Point &q) {return !(p == q);}\ndouble cross(const Point &p, const Point &q) {return p.x*q.y - p.y*q.x;}\ndouble dist(const Point &p, const Point &q) {return (p-q).norm();}\n\nstruct Segment {\n  Point p , q;\n  Segment(Point p = Point(0.0,0.0), Point q = Point(0.0,0.0)) : p(p), q(q) {}\n};\n\nstruct Line {\n  double a, b, c;\n  Line(double a, double b, double c) : a(a), b(b), c(c) {}\n  Line(Point p, Point q) {\n    a = q.y - p.y;\n    b = p.x - q.x;\n    c = q.x * p.y - p.x * q.y;\n  }\n};\n\nstruct Circle {\n  double r;\n  Point p;\n  Circle(Point p = Point(0.0, 0.0), double r = 0.0) : p(p), r(r) {}\n};\n\n// 点の直線への射影\nPoint projection (Point p, Line l) {\n  double x = p.x - l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 線対称な点\nPoint reflection(Point p, Line l) {\n  double x = p.x - 2.0 * l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - 2.0 * l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 点の線分からの回転方向\nint ccw(Point p, Point p1, Point p2) {\n  p1 = p1 - p; p2 = p2 - p;\n  if(cross(p1,p2) > eps) return 1; \n  if(cross(p1,p2) < -eps) return -1; \n  if(p1 * p2 < 0) return 2; \n  if(p1.norm() < p2.norm()) return -2; \n  return 0; \n}\n\n// 点が線分上にあるか判定\nbool on_segment(Point p, Segment s) {\n  return (ccw(s.p,s.q,p) == 0 ? true : false);\n}\n\n// 線分の交差判定\nbool segment_segment_cross(const Segment l, const Segment s) {\n  return ccw(l.p,l.q,s.p) * ccw(l.p,l.q,s.q) <= 0 && ccw(s.p,s.q,l.p) * ccw(s.p,s.q,l.q) <= 0;\n}\n\n// 直線の平行・直交判定 (平行:2 直交:1 その他:0)\nint line_parallel_orthogonal(Line l, Line s) {\n  if(abs(l.a*s.a + l.b*s.b) < eps) return 1;\n  else if(abs(l.a*s.b - l.b*s.a) < eps) return 2;\n  else return 0;\n}\n\n// 直線と直線の交点 \nvector<Point> line_line_cross(Line l, Line s) {\n  vector<Point> vp;\n  if(line_parallel_orthogonal(l,s) != 2) {\n    Point p;\n    p.x = (l.b*s.c - s.b*l.c) / (l.a*s.b - s.a*l.b);\n    p.y = (-l.a*s.c + s.a*l.c) / (l.a*s.b - s.a*l.b);\n    vp.push_back(p);\n  }\n  return vp;\n}\n\n// 点と直線の距離\ndouble point_line_dist(Point p, Line l) {\n  return abs(l.a*p.x + l.b*p.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\n// 点と線分の距離\ndouble point_segment_dist(Point p, Segment s) {\n  Point h = projection(p,Line(s.p,s.q));\n  if(on_segment(h,s)) return dist(p,h);\n  else return min(dist(p,s.p),dist(p,s.q));\n}\n\n// 線分と線分の距離\ndouble segment_segment_dist(Segment l, Segment s) {\n  if(segment_segment_cross(l,s)) return 0.0;\n  else return min({point_segment_dist(l.p,s),point_segment_dist(l.q,s),point_segment_dist(s.p,l),point_segment_dist(s.q,l)});\n}\n\n// 直線と直線の距離\ndouble line_line_dist(Line l, Line s) {\n  if(line_parallel_orthogonal(l,s) != 2) return 0.0;\n  else if(abs(s.a) < eps) return point_line_dist(Point(0.0,-s.c/s.b),l);\n  else return point_line_dist(Point(-s.c/s.a,0),l);\n}\n\n// 直線と線分の距離\ndouble line_segment_dist(Line l, Segment s) {\n  Point a, b;\n  if(abs(l.a) < eps) a = Point(0.0,-l.c/l.b), b = Point(1.0,-l.c/l.b);\n  else if(abs(l.b) < eps) a = Point(-l.c/l.a,0.0), b = Point(-l.c/l.a,0.0);\n  else a = Point(0.0,-l.c/l.b), b = Point(-l.c/l.a,0);\n\n  if(ccw(a,b,s.p) * ccw(a,b,s.q) <= 0) return 0.0;\n  else return min(point_line_dist(s.p,l),point_line_dist(s.q,l));\n}\n\n// ★円と円の交差判定 (離れる:4 外接:3 交わる:2 内接:1 内包:0)\nint circle_circle_pos(Circle c, Circle d) {\n  if(dist(c.p,d.p) >= c.r + d.r + eps) return 4;\n  else if(abs(dist(c.p,d.p) - c.r - d.r) < eps) return 3;\n  else if(dist(c.p,d.p) >= abs(c.r-d.r) + eps) return 2;\n  else if(abs(dist(c.p,d.p) - abs(c.r-d.r)) < eps) return 1;\n  else return 0; \n}\n\n// ★円と直線の交点\nvector<Point> circle_line_cross(Circle c, Line l) {\n  vector<Point> vp;\n  Point h = projection(c.p,l);\n\n  double d = l.a*c.p.x + l.b*c.p.y + l.c;\n  double q = c.r*c.r - d*d / (l.a*l.a + l.b*l.b);\n  if(q >= eps) {\n    Point p1, p2;\n    p1.x = h.x + sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p1.y = h.y - sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    p2.x = h.x - sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p2.y = h.y + sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    vp.push_back(p1);\n    vp.push_back(p2);\n  } else if(abs(q) < eps) {\n    vp.push_back(h);\n  }\n  return vp;\n} \n\n// ★円と円の交点\nvector<Point> circle_circle_cross(Circle c, Circle d) {\n  Line l(2.0*(c.p.x-d.p.x),2.0*(c.p.y-d.p.y),-c.p.x*c.p.x+d.p.x*d.p.x-c.p.y*c.p.y+d.p.y*d.p.y+c.r*c.r-d.r*d.r);\n  return circle_line_cross(c,l);\n}\n\n// ★多角形の面積\ndouble polygon_area(vector<Point>& v) {\n  int l = v.size();\n  double s = 0.0;\n  for(int i = 0; i < l; i++) s += 1/2.0 * cross(v[i],v[(i+1)%l]);\n  return s;\n}\n\n// ★多角形の凸性\nbool polygon_convex(vector<Point>& v) {\n  int l = v.size();\n  for(int i = 0; i < l; i++) {\n    if(cross(v[(i+1)%l]-v[i],v[(i+2)%l]-v[i]) < -eps) return false;\n  }\n  return true;\n} \n\n// 点の多角形への包含 (含まれる:2 辺上:1 外:0)\nint polygon_inclusion(const vector<Point>& v, const Point p) {\n  int l = v.size();\n  bool in = false;\n  for(int i = 0; i < l; i++) {\n    Point a = v[i] - p, b = v[(i+1)%l] - p;\n    if(on_segment(Point(0.0,0.0),Segment(a,b))) return 1;\n    if(a.y > b.y) swap(a,b);\n    if(a.y <= 0 && b.y > 0 && cross(a,b) < 0) in = !in; \n  }\n  return in ? 2 : 0;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<Point> v(n);\n  rep(i,n) cin >> v[i].x >> v[i].y;\n  int q;\n  cin >> q;\n  vector<int> ans(q);\n  rep(i,q) {\n    Point p;\n    cin >> p.x >> p.y;\n    ans[i] = polygon_inclusion(v,p);\n  }\n  for(auto k : ans) cout << k << endl; \n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "// CGL_3_C.cpp\n//\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool EQ(double a, double b){return fabs(a-b) < EPS;}\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\ndouble dot(Point a, Point b){return real(conj(a) * b);}\ndouble cross(Point a, Point b){return imag(conj(a) * b);}\n\ntypedef vector<Point> Polygon;\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\n\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\nint contains(Polygon P, Point p) {\n  bool in = false;\n  for(int i = 0; i < P.size(); ++i){\n    Point a = curr(P,i) - p;\n    Point b = next(P,i) - p;\n    // 点が多角形の辺上にある場合\n    if(EQ(cross(a,b), 0.0) && dot(a,b) < EPS) return ON;\n    // 点が多角形の内側にあるか外側にあるかを調べる\n    if(a.Y > b.Y) swap(a,b);\n    if(a.Y < EPS && EPS < b.Y && cross(a,b) > EPS) in = !in;\n  }\n  return in ? IN: OUT;\n}\n\nint main() {\n  int n,x,y;\n  Polygon P;\n  cin>>n;\n  for(int i=0;i<n;++i){\n    cin>>x>>y;\n    P.push_back(Point(x,y));\n  }\n\n  int q;\n  Point p;\n  cin>>q;\n  for(int i=0;i<q;++i){\n    cin>>x>>y;\n    cout<<contains(P,Point(x,y))<<endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (pos_pre * pos_aft) count++;\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( dot(b,c)/abs(b)/abs(c) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if(eq(sum,0))return 0;\n  else return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long int64;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef complex<int64> point;\ntypedef vector<point> polygon;\n\nint64 dot(point a, point b) { return real(conj(a) * b); }\n\nint64 cross(point a, point b) { return imag(conj(a) * b); }\n\nenum { OUT, ON, IN };\nint contains(const polygon &P, const point &p)\n{\n\tbool in = false;\n\tfor (int i = 0, n = P.size(); i < n; ++i)\n\t{\n\t\tpoint a = P[i] - p, b = P[(i + 1) % n] - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n\t}\n\treturn in ? IN : OUT;\n}\n\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\n\tint n; cin >> n;\n\tpolygon v(n);\n\tfor (int i = 0; i < n; ++i){\n\t\tint64 x, y; cin >> x >> y;\n\t\tv[i] = point(x, y);\n\t}\n\n\tint q; cin >> q;\n\twhile (q--){\n\t\tint64 x, y; cin >> x >> y;\n\t\tpoint p(x, y);\n\t\tcout << contains(v, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int SIZE = 210;\nconst double eps = 1e-10;\n\ntypedef complex<double> P;\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-8; //整数の時はゼロ\n\nnamespace std{\n  template<class T> bool operator<(const complex<T> &a, const complex<T> &b){\n    return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n  }\n};\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//内積\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//外積\ndouble cross(P a, P b) {\n  return (conj(a) * b).imag();\n}\n\n//反時計回り\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > P_eps) return 1; //COUNTER_CLOCKWISE\n  if(cross(b-a,c-a) < -P_eps) return -1; //CLOCKWISE\n  if(dot(b-a,c-a) < -P_eps) return -2; //ONLINE_BACK\n  if(dot(a-b,c-b) < -P_eps) return 2; //ONLINE_FRONT\n  return 0; //ON_SEGMENT\n}\n\n/* 線分abと点cの距離 */\ndouble distanceSP(P a, P b, P c) {\n  if ( dot(b-a, c-a) < P_eps ) return abs(c-a);\n  if ( dot(a-b, c-b) < P_eps ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* 直線abと点cの距離 */\ndouble distanceLP(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* 円の点包含判定 */\ndouble isContainedCP(P c, double r, P p){\n  return abs(c-p) < r - P_eps; //円周上を含まない\n  //return abs(c-p) < r + P_eps; //円周上を含む\n}\n\n/* 直線交差判定 */\nbool isIntersectedLL(P a1, P a2, P b1, P b2){\n  return abs(cross(a1-a2, b1-b2)) > P_eps;\n}\n\n/* 線分交差判定 */\nbool isIntersectedSS(P a1, P a2, P b1, P b2){\n  \n  //線分a と 直線b\n  P_type a = ccw(b1,b2,a1);\n  P_type b = ccw(b1,b2,a2);\n  \n  //線分b と 直線a\n  P_type c = ccw(a1,a2,b1);\n  P_type d = ccw(a1,a2,b2);\n  \n  return a*b < P_eps && c*d < P_eps; // T字を除く時は -P_eps\n}\n\n/* 円交差判定 */\nbool isIntersectedCC(P c1, double r1, P c2, double r2){\n  double dist = abs(c1 - c2);\n  \n  return abs(r1 - r2) < dist + P_eps && dist - P_eps < r1 + r2; //外接内接を含む\n  //return abs(r1 - r2) < dist - P_eps && dist + P_eps < r1 + r2; //外接内接を除く\n}\n\n/* 円直線交差判定 */\nbool isIntersectedCL(P c, double r, P a1, P a2){\n  return distanceLP(a1, a2, c) < r + P_eps; //接する場合を含まない場合 - P_eps\n}\n\n/* 円線分交差判定 */\nbool isIntersectedCS(P c, double r, P a1, P a2){\n  return isContainedCP(c,r,a1) &&\n    isContainedCP(c,r,a2) &&\n    distanceLP(a1, a2, c) < r + P_eps; //接する場合を含まない場合 - P_eps\n}\n\n/* 直線/線分交点 */\nP getCrosspointLL(P a1, P a2, P b1, P b2) {\n  //assert(isIntersectedLL(a1, a2, b1, b2));\n  //assert(isIntersectedSS(a1, a2, b1, b2));\n  P a = a2 - a1;\n  P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nP getCrosspointSS(P a1, P a2, P b1, P b2){\n  return getCrosspointLL(a1, a2, b1, b2);\n}\n\n/* 円交点 */\npair<P,P> getCrosspointCC(P c1, double r1, P c2, double r2){\n  //assert(isIntersectedCC(c1, r1, c2, r2));\n  \n  double dist = abs(c1 - c2);\n  double a = acos((r1*r1 + dist * dist - r2 * r2) / (2 * r1 * dist));\n  return {c1 + polar(r1, arg(c2 - c1) + a), c1 + polar(r1, arg(c2 - c1) - a)};\n}\n\n/* 円線分交点 */\npair<P,P> getCrosspointCS(P c, double r, P a1, P a2){\n  //assert(isIntersectedCS(c1, r1, c2, r2));\n  \n  P base1 = a2 - a1;\n  P proj = a1 + base1 * dot(c - a1, base1) / norm(base1); //射影\n  P e = (a2 - a1) / abs(a2 - a1);\n  P base2 = sqrt(r*r - norm(proj - c));\n  return {proj + e*base2, proj - e*base2};\n}\n\n/* 多角形-点包含 */\nint iscontainedPolyP(int n, P *g, P p){\n  bool f = false;\n  for(int i=0;i<n;i++){\n    P a = g[i] - p, b = g[(i+1)%n] - p;\n    if(abs(cross(a,b)) < P_eps && dot(a,b) < P_eps) return 1; //辺上\n    if(a.imag() > b.imag()) swap(a,b);\n    if(a.imag() < P_eps && P_eps < b.imag() && cross(a,b) > P_eps) f = !f;\n  }\n  return f * 2; //内部 or 外部\n}\n\n/* 射影(直線abとpからの垂線との交点) */\nP getProject(P a, P b, P p){\n  P base = b - a;\n  return a + base * dot(p - a, base) / norm(base);\n}\n\n/* 反射(直線abを対称軸としたpの線対称の位置) */\nP getReflection(P a, P b, P p){\n  return p + (getProject(a, b, p) - p) * 2.0;\n}\n\nint main(){\n  int n;\n  P p[SIZE];\n\n  scanf(\"%d\",&n);\n\n  for(int i=0;i<n;i++){\n    int x, y;\n\n    scanf(\"%d%d\",&x,&y);\n    p[i] = P(x,y);\n  }\n\n  int q;\n  scanf(\"%d\",&q);\n\n  for(int i=0;i<q;i++){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n\n    printf(\"%d\\n\", iscontainedPolyP(n, p, P(x,y)));\n  }\n  \n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define Re real()\n#define Im imag()\nusing namespace std;\n\nconst double eps = 1e-9;\ntypedef complex<double> Point;\ntypedef Point Vector;\nPoint P[50050], s;\nint n, k, m;\nvector<Point> qs;\n\nbool cmp(Point a, Point b)\n{\n    if(fabs(a.Re - b.Re) < eps) return a.Im < b.Im;\n    else return a.Re < b.Re;\n}\n\ndouble cross(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Im;\n}\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Re;\n}\n\nint check(const Point& t)\n{\n    int res = 2;\n    for(int i = 0; i < n; i++)\n    {\n        if(cross(P[i] - t, P[(i + 1) % n] - t) == 0 && dot(P[i] - t, P[(i + 1) % n] - t) <= 0) res = 1;\n        if(cross(P[i] - t, P[(i + 1) % n] - t) < 0) res = 0;\n    }\n    return res;\n}\n\nint main()\n{\n    while(~scanf(\"%d\", &n))\n    {\n        for(int i = 0; i < n; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            P[i] = Point(tx, ty);\n        }\n        scanf(\"%d\", &m);\n        for(int i = 0; i < m; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            s = Point(tx, ty);\n            printf(\"%d\\n\", check(s));\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nnamespace LCY{\n\t#define double long double\n\tconst double EPS=1e-10;\n\tconst double Pi=acos(-1.0);\n\tinline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n\tstruct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n\tstruct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n\t\n\tVector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n\tVector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n\tPoint operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n\t\n\tinline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n\tinline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\tinline double norm(Vector a){return dot(a,a);}\n\tinline double abs(Vector a){return std::sqrt(norm(a));}\n\t\n\tstruct Line{\n\t\tPoint p1,p2;\n\t\tLine(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n\t};\n\tinline bool is_parallel(Line l1,Line l2){return dcmp(cross(l2.p2-l2.p1,l1.p2-l1.p1))==0;}\n\tinline bool is_vertical(Line l1,Line l2){return dcmp(dot(l2.p2-l2.p1,l1.p2-l1.p1))==0;}\n\t\n\tPoint project(Line l,Point p){\n\t\tVector base=l.p2-l.p1;\n\t\tdouble r=dot(p-l.p1,base)/norm(base);\n\t\treturn l.p1+base*r;\n\t}\n\tPoint reflect(Line l,Point p){\n\t\tPoint q=project(l,p);\n\t\tVector v=p-q;v.x=-v.x;v.y=-v.y;\n\t\treturn q+v;\n\t}\n\tint ccw(Vector v1,Vector v2){\n\t\tif(dcmp(cross(v1,v2))>0)return 1;//COUNTER_CLOCKWISE\n\t\telse if(dcmp(cross(v1,v2))<0)return 2;//CLOCKWISE\n\t\telse{\n\t\t\tif(dcmp(dot(v1,v2))<0)return 3;//ONLINE_BACK\n\t\t\telse{\n\t\t\t\tif(dcmp(norm(v1)-norm(v2))<0)return 4;//ONLINE_FRONT\n\t\t\t\telse return 5;//ON_SEGMENT\n\t\t\t}\n\t\t}\n\t}\n\tinline bool is_inter(Line l1,Line l2){\n\t\tbool flag=1;\n\t\tint t1=ccw(l1.p2-l1.p1,l2.p1-l1.p1),t2=ccw(l1.p2-l1.p1,l2.p2-l1.p1);\n\t\tif(t1==5 || t2==5) return true;\n\t\telse if(t1==t2)return false;\n\t\telse if(t1>=3 && t2<=2) return false;\n\t\telse if(t1<=2 && t2>=3) return false;\n\t\tstd::swap(l1,l2);\n\t\tt1=ccw(l1.p2-l1.p1,l2.p1-l1.p1),t2=ccw(l1.p2-l1.p1,l2.p2-l1.p1);\n\t\tif(t1==5 || t2==5) return true;\n\t\telse if(t1==t2)return false;\n\t\telse if(t1>=3 && t2<=2) return false;\n\t\telse if(t1<=2 && t2>=3) return false;\n\t\treturn true;\n\t}\n\tinline Point line_intersection(Line l1,Line l2){\n\t\tif(is_parallel(l1,l2)) return Point(233,233);\n\t\tVector u=l1.p1-l2.p1,v=l1.p2-l1.p1,w=l2.p2-l2.p1;\n\t\tdouble t=cross(w,u)/cross(v,w);\n\t\treturn l1.p1+v*t;\n\t}\n\tinline Point segment_intersection(Line l1,Line l2){\n\t\tif(!is_inter(l1,l2)) return Point(233,233);\n\t\treturn line_intersection(l1,l2);\n\t}\n\tinline double line_point_distance(Line l,Point p){\n\t\treturn std::abs(cross(l.p2-l.p1,p-l.p1))/abs(l.p2-l.p1);\n\t}\n\tinline double segment_point_distance(Line l,Point p){\n\t\tif(dcmp(dot(l.p2-l.p1,p-l.p1))<0) return abs(p-l.p1);\n\t\tif(dcmp(dot(l.p1-l.p2,p-l.p2))<0) return abs(p-l.p2);\n\t\treturn line_point_distance(l,p);\n\t}\n\tinline double segment_distance(Line l1,Line l2){\n\t\t#define spd segment_point_distance\n\t\tif(is_inter(l1,l2))return 0.0;\n\t\treturn std::min(std::min(spd(l1,l2.p1),spd(l1,l2.p2)),std::min(spd(l2,l1.p1),spd(l2,l1.p2)));\n\t}\n\tdouble area(std::vector<Point> &Q){\n\t\tint n=Q.size();\n\t\tdouble ans=0;\n\t\tPoint o=Point(0.0,0.0);\n\t\tfor(int i=0;i<n;++i)ans+=cross(Q[i]-o,Q[(i+1)%n]-o)/2.0;\n\t\treturn ans;\n\t}\n\tbool is_convex(std::vector<Point> &Q){\n\t\tint n=Q.size();\n\t\tPoint o=Point(0.0,0.0);\n\t\tfor(int i=0;i<n;++i){\n\t\t\tPoint lst=Q[(i+n-1)%n],now=Q[i],nxt=Q[(i+1)%n];\n\t\t\tif(ccw(now-lst,nxt-lst)==2)return false;\n\t\t}\n\t\treturn true;\n\t}\n\tint in_convex(std::vector<Point> &Q,Point p){\n\t\tint n=Q.size();\n\t\tPoint pp=Point(p.x+100000.0,p.y+Pi*100000.0);\n\t\tVector v=pp-p;\n\t\tint cnt=0;\n\t\tfor(int i=0;i<n;++i){\n\t\t\tPoint p1=Q[i],p2=Q[(i+1)%n];\n\t\t\t//if(ccw(p1-p,p2-p)==3)return 1;\n\t\t\tif(dcmp(cross(p1-p,p2-p))==0 && dcmp(dot(p1-p,p2-p))<=0)return 1;\n\t\t\tPoint x=line_intersection(Line(p,pp),Line(p1,p2));\n\t\t\tif(x.x==233 && x.y==233)continue;\n\t\t\tif(ccw(p1-x,p2-x)!=3)continue;\n\t\t\tif(dcmp(x.x-p.x)<0)continue;\n\t\t\tcnt++;\n\t\t}\n\t\t//std::cout<<cnt<<std::endl;\n\t\treturn (cnt&1)?2:0;\n\t}\n}\nusing namespace LCY;\nusing namespace std;\nint main(){\n\tvector<Point>Q;int n;cin>>n;for(int i=0;i<n;++i){Point p;cin>>p.x>>p.y;Q.push_back(p);}\n\tcin>>n;for(int i=0;i<n;++i){Point p;cin>>p.x>>p.y;cout<<in_convex(Q,p)<<endl;}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <iostream>\n\nclass Point{\npublic:\n\tPoint(const int &xa, const int &ya):x(xa),y(ya){};\n\tPoint() = default;\n\tint x, y;\n};\n\nclass Line{\npublic:\n\tLine(const Point &&ap1, const Point &&ap2){\n\t\tif (ap1.y > ap2.y){\n\t\t\tp1 = ap1;\n\t\t\tp2 = ap2;\n\t\t}else{\n\t\t\tp1 = ap2;\n\t\t\tp2 = ap1;\n\t\t}\n\t}\n\tPoint p1, p2;\n\tbool is_on_line(const Point &p){\n\t\treturn (((p1.x - p2.x) * (p.y - p2.y) == (p1.y - p2.y) * (p.x - p2.x)) and ((p1.x - p.x) * (p2.x - p.x) <= 0) and ((p1.y - p.y) * (p2.y - p.y) <= 0));\n\t}\n\tint cross_line(const Point &p){\n\t\tif (is_on_line(p)){\n\t\t\treturn 1000;//辺に接する\n\t\t}else if (p.y == p2.y){\n\t\t\treturn 0;//下側の頂点を通る\n\t\t}else if ((p1.y - p.y) * (p2.y - p.y) <= 0 and ((p.y - p2.y) * (p1.x - p2.x) > (p1.y - p2. y) * (p.x - p2.x))){\n\t\t\treturn 1;//上側の頂点か辺を通る\n\t\t}else{\n\t\t\treturn 0;//交わらない\n\t\t}\n\t}\n};\nint fold(std::vector<Line> &lines, const Point &&p){\n\tint sum = 0;\n\tfor (auto l : lines){\n\t\tsum += l.cross_line(p);\n\t}\n\tif (sum >= 1000){\n\t\treturn 1;\n\t}else if (sum % 2 == 1){\n\t\treturn 2;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint main(){\n\tint n;\n\tstd::cin >> n;\n\tint sx, sy;\n\tstd::cin >> sx >> sy;\n\tint px = sx, py = sy;\n\tstd::vector<Line> lines;\n\tfor (auto i = 1; i < n; ++i){\n\t\tint x, y;\n\t\tstd::cin >> x >> y;\n\t\tlines.push_back(Line(Point(px, py), Point(x, y)));\n\t\tpx = x; py = y;\n\t}\n\tlines.push_back(Line(Point(px, py), Point(sx, sy)));\n\tstd::cin >> n;\n\tfor (auto i = 0; i < n; ++i){\n\t\tint x, y;\n\t\tstd::cin >> x >> y;\n\t\tstd::cout << fold(lines, Point(x, y)) << \"\\n\";\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\ntypedef long long ll;\ntypedef long double ld;\n#define rep(i,a,b) for(register ll(i)=(ll)(a);(i)<=(ll)(b);++i)\nconst ll inf=1e9+7;\n#define y1 _y_1_\n#ifndef gc\n\t#define gc getchar\n#endif\n#ifndef pc\n\t#define pc putchar\n#endif\ninline ll read(){ll f=0,x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline ll read(ll&x){ll f=0;x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline void writeln(){pc('\\n');}\ninline void write(ll x){if(x<0)pc('-'),x=-x;if(x>9)write(x/10);pc(x%10+'0');}\ninline void writeln(const ll&x){write(x),pc('\\n');}\nusing namespace std;\nnamespace Computation_Geometry{\n\tconst ld eps=1e-9;\n\tstruct vec{\n\t\ttypedef vec point;\n\t\tld x,y;\n\t\tinline bool is_zero(){return (abs(x)<=eps)&(abs(y)<=eps);}\n\t\tinline void scan(){x=read(),y=read();}\n\t\tinline vec(){x=y=0;}\n\t\tinline vec(const ld&X,const ld&Y){x=X,y=Y;}\n\t\tinline friend vec operator +(const vec&A,const vec&B){return vec(A.x+B.x,A.y+B.y);}\n\t\tinline friend vec operator -(const vec&A,const vec&B){return vec(A.x-B.x,A.y-B.y);}\n\t\tinline friend vec operator *(const vec&A,const ld&k){return vec(A.x*k,A.y*k);}\n\t\tinline friend vec operator /(const vec&A,const ld&k){return A*(1.0/k);}\n\t\tinline ld len(){return sqrt(x*x+y*y);}\n\t\tinline ld Len(){return x*x+y*y;}\n\t\tinline friend ld len(vec A){return A.len();}\n\t\tinline friend ld Len(vec A){return A.Len();}\n\t\tinline ld len(const ll&X,const ll&Y){return sqrt((x-X)*(x-X)+(y-Y)*(y-Y));}\n\t\tinline ld k(){return (x==0)?inf:y/x;}\n\t\tinline ld k(const ll&X,const ll&Y){return (x==X)?inf:(y-Y)/(x-X);}\n\t\tinline friend ld Dot(const vec&A,const vec&B){return A.x*B.x+A.y*B.y;}\n\t\tinline friend ld Cross(const vec&A,const vec&B){return A.x*B.y-B.x*A.y;}\n\t\tinline friend ld Theta(vec A,vec B){return acos(Cross(A,B)/A.len()/B.len());}\n\t\tinline friend ld Cross(const vec&v,const vec&A,const vec&B){return Cross(A-v,B-v);}\n\t\tinline friend ld Dot(const vec&v,const vec&A,const vec&B){return Dot(A-v,B-v);}\n\t\tinline friend ll ccw(vec p0,vec p1,vec p2){\n\t\t\tp1=p1-p0,p2=p2-p0;\n\t\t\tif (Cross(p1,p2)>=eps) return 1;//COUNTER_CLOCKWISE\n\t\t\telse if (Cross(p1,p2)<-eps) return -1;//CLOCKWISE\n\t\t\telse if (Dot(p1,p2)<-eps) return 2;//ONLINE_BACK\n\t\t\telse if (p1.len()<p2.len())return -2;//ONLINE_FRONT\n\t\t\treturn 0;//ON_SEGMENT\n\t\t}\n\t\tinline friend ll collinear(const vec u,const vec v,const point P){ld p=Cross(P,u,v);return fabs(p)<=eps?1+((Dot(P,u,v))<=eps):0;}\n\t};\n\ttypedef vec point;\n\tstruct line{\n\t\tld A,B,C;\n\t\tinline line(){A=B=C=0;}\n\t\tinline line(const ld&_A,const ld&_B,const ld&_C){A=_A,B=_B,C=_C;}\n\t\tinline line(const ld&x1,const ld&y1,const ld&x2,const ld&y2){A=y2-y1,B=x1-x2,C=x2*y1-x1*y2;}\n\t\tinline line(const vec&_A,const vec&_B){A=_A.y-_B.y,B=_B.x-_A.x,C=Cross(_A,_B);}\n\t\tinline vec Vec(){return vec(A,B);}\n\t\tinline friend bool is_on_line(line A,point B){return abs(A.A*B.x+A.B*B.y+A.C)<=eps;}\n\t\tinline friend bool parallel(line A,line B){return abs(Cross(A.Vec(),B.Vec()))<=eps;}\n\t\tinline friend bool perpendicular(line A,line B){return abs(Dot(A.Vec(),B.Vec()))<=eps;}\n\t\tinline friend point intersection(const line A, const line B){return point(A.B*B.C-A.C*B.B,A.C*B.A-A.A*B.C)/(A.A*B.B-A.B*B.A);}\n\t};\n\tstruct segment{\n\t\tld x1,x2,y1,y2;\n\t\tinline point p1(){return vec(x1,y1);}\n\t\tinline point p2(){return vec(x2,y2);}\n\t\tinline segment(){x1=y1=x2=y2=0;}\n\t\tinline segment(const ld&X1,const ld&Y1,const ld&X2,const ld&Y2){x1=X1,y1=Y1,x2=X2,y2=Y2;}\n\t\tinline line Line(){return line(x1,y1,x2,y2);}\n\t\tinline friend bool is_on_segment(segment A,point B){\n\t\t\tif (!is_on_line(A.Line(),B)) return false;\n\t\t\treturn ((A.x1<=B.x&&B.x<=A.x2)||(A.x2<=B.x&&B.x<=A.x1))&&((A.y1<=B.y&&B.y<=A.y2)||(A.y2<=B.y&&B.y<=A.y1));\n\t\t}\n\t\tinline friend bool is_intersected(segment A,segment B){\n\t\t\tvec a=vec(A.x1,A.y1),b=vec(A.x2,A.y2),c=vec(B.x1,B.y1),d=vec(B.x2,B.y2);\n\t\t\treturn ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n\t\t}\n\t\tinline friend ld Distance_SP(segment s,point p){return fabs(Cross(s.p2()-s.p1(),p-s.p1())/len(s.p2()-s.p1()));}\n\t\tinline friend ld distance_SP(segment s,point p){\n\t\t\tpoint p1=s.p1(),p2=s.p2();\n\t\t\tif(Dot(p2-p1,p-p1)<0.0) return len(p-p1);\n\t\t\tif(Dot(p1-p2,p-p2)<0.0) return len(p-p2);\n\t\t\treturn Distance_SP(s,p);\n\t\t}\n\t\tinline friend ld distance_SS(segment s1,segment s2){return min(min(distance_SP(s1,s2.p1()),distance_SP(s1,s2.p2())),min(distance_SP(s2,s1.p1()),distance_SP(s2,s1.p2())));}\n\t};\n\tstruct polygon{\n\t\tvector<vec>P;\n\t\tinline void scan(){\n\t\t\tll n=read();\n\t\t\trep(i,1,n){\n\t\t\t\tll x=read(),y=read();\n\t\t\t\tP.push_back(vec(x,y));\n\t\t\t}\n\t\t}\n\t\tinline ld area(){\n\t\t\tconst ll n=P.size();\n\t\t\tld ret=Cross(P[n-1],P[0]);\n\t\t\trep(i,0,n-2) ret+=Cross(P[i],P[i+1]);\n\t\t\treturn fabs(ret)/2;\n\t\t}\n\t\tinline bool is_convex(){\n\t\t\tconst ll n=P.size();\n\t\t\trep(i,0,n-1) if (ccw(P[(i+n-1)%n],P[i],P[(i+1)%n])==-1) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tinline friend ll contain(polygon P,const vec p){\n\t\t\tconst ll n=P.P.size();\n\t\t\tbool x=false;\n\t\t\trep(i,0,n-1){\n\t\t\t\tpoint a=P.P[i]-p,b=P.P[(i+1)%n]-p;\n\t\t\t\tif(abs(Cross(a,b))<=eps&&Dot(a,b)<=eps) return 1;\n\t\t\t\tif(a.y>b.y) swap(a,b);\n\t\t\t\tif(a.y<=eps&&eps<=b.y&&Cross(a,b)>=eps) x=!x;\n\t\t\t}\n\t\t\treturn (x?2:0);\n\t\t}\n\t};\n}\nusing namespace Computation_Geometry;\npolygon p;\nll q;\nld x,y;\npoint P;\nsigned main(){\n\tp.scan();\n\tread(q);while (q--){\n\t\tx=read(),y=read();\n\t\tP=point(x,y);\n\t\twriteln(contain(p,P));\n\t}\n\tfclose(stdin);fclose(stdout);return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n    // convex version : O(log n)\n    int ConvexContain(const Point &p) const;\n\n};\n\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\nint Polygon::ConvexContain(const Point &p) const {\n    const int n = (*this).size();\n    Point g = ((*this)[0] + (*this)[n / 3] + (*this)[2 * n / 3]) / 3.0; // inner point\n    int a = 0, b = n;\n    while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n        int c = (a + b) * 0.5;\n        if (sign(abs_cross((*this)[a] - g, (*this)[c] - g)) == 1) { // angle < 180 deg\n            if (sign(abs_cross((*this)[a] - g, p - g)) == 1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == -1)\n                b = c;\n            else\n                a = c;\n        }\n        else {\n            if (sign(abs_cross((*this)[a] - g, p - g)) == -1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == 1)\n                a = c;\n            else\n                b = c;\n        }\n    }\n\n    b %= n;\n    int res = sign(abs_cross((*this)[a] - p, (*this)[b] - p));\n    return (res == -1 ? OUT : (res == 1 ? IN : ON));\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    bool is_convex = poly.IsConvex();\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << (is_convex ? poly.ConvexContain(p) : poly.Contain(p)) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\n#define ROUND_PRINT(N,val) cout << fixed;cout << setprecision(N) << val << endl\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\n\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) < eps) : ((x - e.x) < eps);\n  }\n  bool operator >(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) > eps) : ((x - e.x) > eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\n\nint main(void) {\n  Plane pl;\n  int n,q,n2;\n  P a;\n  cin >> n;\n  vector<P> point,convex(n),cov;\n  REP(i,n) cin >> convex[i].x >> convex[i].y;\n  point = convex;\n  cov = pl.convexHull(convex);\n  n2 = cov.size();\n  cin >> q;\n  REP(i,q) {\n    cin >> a.x >> a.y;\n    bool flg = false;\n    REP(i,n-1) {\n      if (pl.on_seq(point[i],point[i+1],a)) {\n        flg = true;\n        break;\n      }\n    }\n    if (pl.on_seq(point[n-1],point[0],a)) flg = true;\n    if (flg) {\n      cout << 1 << endl;\n      continue;\n    }\n    long double sum = 0.0;\n    REP(i,n2-1) {\n      sum += pl.getAngle(cov[i]-a,cov[i+1]-a);\n    }\n    sum += pl.getAngle(cov[n2-1]-a,cov[0]-a);\n    if (abs(2.0*pi - sum) < eps) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\ntypedef long long ll;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y = 0.0): x(x),y(y) {}\n\tPoint operator + (Point p){\n\t\treturn Point(x + p.x,y + p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x - p.x,y - p.y);\n\t}\n\tPoint operator * (double lambda){\n\t\treturn Point(x * lambda,y * lambda);\n\t}\n\tPoint operator / (double lambda){\n\t\treturn Point(x / lambda,y / lambda);\n\t}\n\tPoint neg(){//negative.\n\t\treturn Point(-x,-y);\n\t}\n\tdouble norm(){\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs_(){\n\t\treturn sqrt(norm());\n\t}\n\tbool operator == (const Point &p)const\n\t{\n\t\treturn abs(x - p.x) < EPS && abs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point &p)const\n\t{\n\t\tif(abs(x - p.x) < EPS) return y < p.y;\n\t\telse return x < p.x;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0): c(c),r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a,Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble det(Vector a,Vector b){\n\treturn a.x * b.y - b.x * a.y;\n}\nVector rot(Vector a,double theta){//rotate.\n\tdouble x1 = cos(theta) * a.x - sin(theta) * a.y;\n\tdouble y1 = sin(theta) * a.x + cos(theta) * a.y;\n\treturn Point(x1,y1);\n}\nbool vertical(Line l1,Line l2){\n\treturn abs(dot(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nbool parallel(Line l1,Line l2){\n\treturn abs(det(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nPoint proj(Point p,Line l){\n\tVector a = l.p2 - l.p1;\n\tdouble r = dot(a,p - l.p1) / a.norm();\n\treturn l.p1 + a * r;\n}\nPoint ref(Point p,Line l){\n\tPoint A = proj(p,l);\n\treturn A + (A - p);\n}\nint ccw(Segment/*Directed Segment*/ s,Point p){//\n\tVector a = s.p2 - s.p1,b = p - s.p1;\n\tif(det(a,b) > EPS) return 1;//COUNTER_CLOCKWISE\n\telse if(det(a,b) < -EPS) return -1;//CLOCKWISE\n\telse if(dot(a,b) < -EPS) return 2;//ONLINE_BACK\n\telse if(a.norm() < b.norm() - EPS) return -2;//ONLINE_FRONT\n\telse return 0;//ON_SEGMENT\n}\nbool intersect(Segment s1,Segment s2){\n\treturn ccw(s1,s2.p1) * ccw(s1,s2.p2) <= 0 && ccw(s2,s1.p1) * ccw(s2,s1.p2) <= 0;\n}\ndouble disSP(Segment s,Point p){\n\tVector a = s.p2 - s.p1;\n\tif(dot(a,p - s.p1) < EPS) return (p - s.p1).abs_();\n\tif(dot(a.neg(),p - s.p2) < EPS) return (p - s.p2).abs_();\n\treturn abs(det(a,p - s.p1) / a.abs_());\n}\ndouble disSS(Segment s1,Segment s2){\n\tif(intersect(s1,s2)) return 0;\n\treturn min(min(disSP(s1,s2.p1),disSP(s1,s2.p2)),min(disSP(s2,s1.p1),disSP(s2,s1.p2)));\n}\nPoint crossSS(Segment s1,Segment s2){//make sure s1 intersect s2!\n\tVector a = s2.p2 - s2.p1;\n\tdouble d1 = abs(det(a,s1.p1 - s2.p1));\n\tdouble d2 = abs(det(a,s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\nvector <Point> crossCL(Circle o,Line l){//make sure crossing.\n\tPoint A = proj(o.c,l);\n\tVector a = l.p2 - l.p1, e = a / a.abs_();\n\tdouble AP = sqrt(o.r * o.r - (A - o.c).norm());\n\tvector <Point> res;\n\tres.push_back(A + e * AP);\n\tres.push_back(A - e * AP);\n\treturn res;\n}\nvector <Point> crossCC(Circle o1,Circle o2){//make sure crossing.\n\tVector a = o2.c - o1.c;\n\tdouble alpha = acos((o1.r * o1.r + a.norm() - o2.r * o2.r) / (2 * o1.r * a.abs_()));\n\tVector b = a / a.abs_() * o1.r;\n\tvector <Point> res;\n\tres.push_back(o1.c + rot(b,alpha));\n\tres.push_back(o1.c + rot(b,-alpha));\n\treturn res;\n}\nint pointInPolygon(Point p,Polygon po){\n\tint n = po.size();\n\tint in = 0;\n\tfor(int i=0;i<n;i++){\n\t\tPoint g1 = po[i],g2 = po[(i + 1) % n];\n\t\tVector a = g1 - p,b = g2 - p;\n\t\tif(abs(det(a,b)) < EPS && dot(a,b) < EPS) return -1;//on-edge.\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && det(a,b) > EPS) in ^= 1;\n\t}\n\treturn in;//1: in,0: out.\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tPolygon po(n);\n\tfor(int i=0;i<n;i++) scanf(\"%lf%lf\",&po[i].x,&po[i].y);\n\tPoint p;\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf\",&p.x,&p.y);\n\t\tint res = pointInPolygon(p,po);\n\t\tif(res == -1) puts(\"1\");\n\t\telse if(res == 1) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> lpair;\nconst ll MOD = 1e9 + 7;\nconst ll INF = 1e18;\n#define rep(i,m,n) for(ll i = (m); i < (n); i++)\n#define rrep(i,m,n) for(ll i = (m); i >= (n); i--)\n#define print(x) cout << (x) << endl;\n#define print2(x,y) cout << (x) << \" \" << (y) << endl;\n#define printa(x,n) for(ll i = 0; i < n; i++){ cout << (x[i]) << \" \";} cout<<endl;\n\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\ntypedef complex<double> P;\ndouble dot(P a, P b){ //内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\ndouble cross(P a, P b){ //外積\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nbool is_orth(P a1, P a2, P b1, P b2){ //垂直か\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_para(P a1, P a2, P b1, P b2){ //平行か\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_online(P a, P b, P c){ //cが線分上か\n    return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\nbool distance_lp(P a, P b, P c){ //直線abと点cの距離\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\ndouble norm(P a){\n  return a.real() * a.real() +a.imag() *a.imag();\n}\n\nll ccw(P p0,P p1,P p2){\n  P a = p1-p0;\n  P b = p2-p0;\n  if(cross(a,b) > EPS) return 1;\n  if(cross(a,b) < -EPS) return -1;\n  if(dot(a,b) < -EPS) return 2;\n  if(abs(a) < abs(b)) return -2;\n  return 0;\n}\n\nbool is_intersect(P p1, P p2, P p3, P p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 &&\n      ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0 );\n}\n\nP intersect_pos(P a1, P a2, P b1, P b2){ //直線同士の交点\n    P a = a2 - a1;\n    P b = b2 - b1;\n    return a1 + a * cross(b, b1 - a1) / cross(b, a);\n}\n\ndouble getDistanceLP(P a1, P a2, P b){\n    return abs(cross(a2-a1, b-a1) / abs(a2 - a1));\n}\n\ndouble getDistanceSP(P a1, P a2, P b){\n    if(dot(a2 - a1, b - a1) < EPS) return abs(b - a1);\n    if(dot(a1 - a2, b - a2) < EPS) return abs(b - a2);\n    return getDistanceLP(a1, a2, b);\n}\ndouble getDistance(P a1, P a2, P b1, P b2){\n    if(is_intersect(a1, a2, b1, b2)) return 0.0;\n    double v1 = min(getDistanceSP(a1, a2, b1), getDistanceSP(a1, a2, b2));\n    double v2 = min(getDistanceSP(b1, b2, a1), getDistanceSP(b1, b2, a2));\n    return min(v1,v2);\n}\n\n#define printP(P) cout << \"(\" << P.real() << \", \" << P.imag() << \")\" << endl;\n\n\n\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    ll N;\n    cin >> N;\n    double x[110], y[110];\n    vector<P> p;\n    rep(i,0,N){\n        cin >> x[i] >> y[i];\n        P t(x[i], y[i]);\n        p.push_back(t);\n    }\n    ll q;\n    cin >> q;\n    P pd(12345, 13547);\n    while(q--){\n        double a,b;\n        cin >> a >> b;\n        P p2(a,b);\n        bool online = false;\n        rep(i,0,N){\n            if(is_online(p[i], p[(i+1)%N], p2)){\n                online = true;\n            }\n        }\n        if(online){\n            print(1);\n            continue;\n        }\n        ll cnt = 0;\n        rep(i,0,N){\n            if(is_intersect(p[i], p[(i+1)%N], p2, pd)){\n                cnt++;\n            }\n        }\n        if(cnt % 2 == 1){\n            print(2);\n        }else{\n            print(0);\n        }\n    }\n\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double k) {\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator /(double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator <(Point p) {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(Point p) {\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\ntypedef Segment Line;\n\ndouble dot(Vector v1, Vector v2) {\n\treturn v1.x * v2.x + v1.y * v2.y;\n}\ndouble cross(Vector v1, Vector v2) {\n\treturn v1.x * v2.y - v1.y * v2.x;\n}\nVector unitVector(Vector v) {\n\treturn v / v.abs();\n}\nVector polar(double r, double a) {\n\treturn Vector(r * cos(a), r * sin(a));\n}\ndouble arg(Vector v) {\n\treturn atan2(v.y, v.x);\n}\nbool isOrthogonal(Vector v1, Vector v2) {\n\treturn equals(dot(v1, v2), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isOrthogonal(Point l1, Point l2, Point m1, Point m2) {\n\treturn isOrthogonal(l2 - l1, m2 - m1);\n}\nbool isParallel(Vector v1, Vector v2) {\n\treturn equals(cross(v1, v2), 0.0);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isParallel(Point l1, Point l2, Point m1, Point m2) {\n\treturn isParallel(l1 - l2, m1 - m2);\n}\n\nenum PositionSP {\n\tCOUNTER_CLOCKWISE = -1,\n\tCLOCKWISE = 1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0\n};\nPositionSP ccw(Point p1, Point p2, Point p) {\n\tVector a = p2 - p1, b = p - p1;\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\telse if (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\telse if (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\telse if (a.norm() < b.norm())\n\t\treturn ONLINE_FRONT;\n\telse\n\t\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n\t\t\t&& ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nPoint intersection(Segment s1, Segment s2) {\n\tdouble d1 = abs(cross(s2.p2 - s2.p1, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(s2.p1 - s2.p2, s1.p2 - s2.p2));\n\treturn s1.p1 + (s1.p2 - s1.p1) * d1 / (d1 + d2);\n}\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\ndouble distancePP(Point p1, Point p2) {\n\treturn (p1 - p2).abs();\n}\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / distancePP(l.p2, l.p1));\n}\ndouble distanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn distancePP(s.p1, p);\n\telse if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn distancePP(s.p2, p);\n\telse\n\t\treturn distanceLP(s, p);\n}\ndouble distanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\telse {\n\t\treturn min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n\t\t\t\tmin(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n\t}\n}\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :\n\t\t\tc(c), r(r) {\n\t}\n};\npair<Point, Point> intersection(Circle c, Line l) {\n\tPoint pr = projection(l, c.c);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\tVector e = unitVector(l.p2 - l.p1);\n\treturn make_pair(pr + e * base, pr - e * base);\n}\npair<Point, Point> intersection(Circle c1, Circle c2) {\n\tdouble d = (c2.c - c1.c).abs();\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\ntypedef vector<Point> Polygon;\nenum ContainGP {\n\tOUTSIDE = 0, ON_EDGE = 1, INSIDE = 2\n};\nContainGP contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tVector a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS)\n\t\t\treturn ON_EDGE;\n\t\tif (a.y > b.y)\n\t\t\tswap(a, b);\n\t\tif (cross(a, b) > EPS && a.y < EPS && b.y > EPS)\n\t\t\tx = !x;\n\t}\n\treturn x ? INSIDE : OUTSIDE;\n}\n\nint main() {\n\tint n;\n\tPolygon g;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tg.push_back(Point(x, y));\n\t}\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tcout << contains(g, p) << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\n#include <vector>\nconst double EPS = 1e-9;\nusing namespace std;\nclass point {\npublic:\n\tdouble x, y;\n\tpoint(double a, double b) {\n\t\tx = a; y = b;\n\t}\n\tpoint operator - (point v) {\n\t\treturn point(x - v.x, y - v.y);\n\t}\n\tpoint operator + (point v) {\n\t\treturn point(x + v.x, y + v.y);\n\t}\n};\nclass Vector {\npublic:\n\tdouble x, y;\n\tVector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tVector operator * (const Vector &v)const {\n\t\treturn Vector(x*v.x, y* v.y);\n\t}\n\tVector operator * (double a) {\n\t\treturn Vector(x * a, y * a);\n\t}\n\tVector operator - (Vector v) {\n\t\treturn Vector(x - v.x, y - v.y);\n\t}\n\tVector operator + (Vector v) {\n\t\treturn Vector(x + v.x, y + v.y);\n\t}\n};\ntypedef vector<Vector> polygon;\nclass circle {\npublic:\n\tpoint p;\n\tdouble r;\n\tcircle(point a, double b) : p(a), r(b) {};\n\n};\ninline double dot(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(Vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(Vector v) {\n\treturn sqrt(squ(v));\n}\ninline void printv(Vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline void printpp(pair<point, point> p) {\n\tprintf(\"%.7f %.7f %.7f %.7f\", p.first.x, p.first.y, p.second.x, p.second.y);\n}\ninline void printc(Vector v1, Vector v2) {\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", v1.x, v1.y, v2.x, v2.y);\n}\ninline void printpg(polygon pg) {\n\tcout << pg.size() << endl;\n\tfor (int i = 0; i < pg.size(); i++)\n\t\tprintf(\"%f %f\\n\", pg[i].x, pg[i].y);\n}\ninline Vector pro(Vector base, Vector v, Vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tVector v1 = base * a;\n\treturn v1 + be;\n}\ninline Vector ref(Vector v, Vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(Vector v1, Vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(a)) return 2;\n\telse return 0;\n}\ninline int inter(Vector v1, Vector v2, Vector v3, Vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(Vector v1, Vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\tVector c = v1 - v2;\n\tVector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(Vector v1, Vector v2, Vector v3, Vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\ninline Vector getcross(Vector v1, Vector v2, Vector v3, Vector v4) {\n\tVector v5 = pro(v2 - v1, v3 - v1, v1);\n\tVector v6 = pro(v2 - v1, v4 - v1, v1);\n\tdouble a = disPP(v3, v5);\n\tdouble b = disPP(v4, v6);\n\tVector vans = (v6 - v5)*a*(1 / (a + b)) + v5;\n\treturn vans;\n\n}\ninline pair<Vector, Vector> getccl(double r, Vector o, Vector v1, Vector v2) {\n\tVector ev = (v2 - v1)*(1 / norm(v2 - v1));\n\tVector pr = pro(v2 - v1, o - v1, v1);\n\tdouble l = sqrt(r *r - squ(o - pr));\n\tVector ans1 = ev * l + pr;\n\tVector ans2 = pr - ev * l;\n\tif (ans1.x > ans2.x) swap(ans1, ans2);\n\telse if (ans1.x == ans2.x)\n\t\tif (ans1.y > ans2.y) swap(ans1, ans2);\n\treturn make_pair(ans1, ans2);\n}\ninline pair<point, point> getccc(circle c1, circle c2) {\n\tVector v1(c2.p.x - c1.p.x, c2.p.y - c1.p.y);\n\tdouble dis = norm(v1);\n\tdouble a = acos((dis*dis + c1.r*c1.r - c2.r*c2.r) / (2 * c1.r*dis));\n\tdouble b = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n\tpoint pa(c1.r*cos(a + b), c1.r*sin(a + b));\n\tpoint pb(c1.r*cos(b - a), c1.r*sin(b -a));\n\tpoint ans1(c1.p + pa);\n\tpoint ans2(c1.p + pb);\n\tif (ans1.x > ans2.x || ((ans1.x == ans2.x) && (ans1.y > ans2.y))) swap(ans1, ans2);\n\treturn make_pair(ans1, ans2);\n}\nconst int num = 100000;\ninline bool lessX(const Vector &p1, const Vector &p2) {\n\treturn (p1.x < p2.x) || ((p1.x == p2.x) && (p1.y < p2.y));\n}\ninline polygon getpg(polygon o) {\n\tsort(o.begin(), o.end(), lessX);\n\tpolygon t, u;\n\tt.push_back(o[0]);\n\tt.push_back(o[1]);\n\tu.push_back(o[0]);\n\tu.push_back(o[1]);\n\tfor (int i = 2; i < o.size(); i++) {\n\t\tfor (int j = t.size(); (t.size() > 1) && (ccw(t[t.size() - 2], t[t.size() - 1], o[i]) == 1); j--)\n\t\t\tt.pop_back();\n\t\tt.push_back(o[i]);\n\t}\n\tfor (int i = 2; i < o.size(); i++) {\n\t\tfor (int j = u.size(); (u.size() > 1) && (ccw(u[u.size() - 2], u[u.size() - 1], o[i]) == -1); j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(o[i]);\n\t}\n\treverse(t.begin(), t.end());\n\tfor (int i = 1; i < t.size() - 1; i++)\n\t\tu.push_back(t[i]);\n\treturn u;\n}\nint main() {\n\tint n;\n\tdouble x, y;\n\tpolygon o;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\to.push_back(Vector(x, y));\n\t}\n\tprintpg(getpg(o));\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  double sum=0;\n  for(int i=0;i<(int)t.size();i++){\n    P a=t[i],b=(i==0?t.back():t[i+1]);\n    if( ccw(a,b,p) == 0 )return 1;// on\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;//out\n  else  return 2;//in\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long; using ld = long double; using ull = unsigned long long; using uint = unsigned int;\nusing vi  = vector<int>; using vb  = vector<bool>; using vd  = vector<double>; using vl  = vector<ll>;\nusing vvi = vector<vi>;  using vvb = vector<vb>;   using vvd = vector<vd>;     using vvl = vector<vl>;\n\n#define REP(i,n) for(ll i=0; i<(n); ++i)\n#define FOR(i,b,n) for(ll i=(b); i<(n); ++i)\n#define ALL(v) (v).begin(), (v).end()\n#define TEN(x) ((ll)1e##x)\n\ntemplate<typename T> inline string join(const vector<T>& vec, string sep = \" \") { stringstream ss; REP(i, vec.size()) ss << vec[i] << ( i+1 == vec.size() ? \"\" : sep ); return ss.str(); }\n\n\n///////////////\n\n#define EPS (1e-10)\n#define NEXT(x, i) (x[(i + 1) % x.size()])\n\ntemplate<class T> using CR = const T &;\nusing P = complex<ld>;\nusing G = vector<P>;\n\nint sgn(ld a, ld b = 0) {\n\tif (a > b + EPS) return 1;\n\tif (a < b - EPS) return -1;\n\treturn 0;\n}\n\nld dot(P a, P b) { return real(conj(a)*b); }\nld cross(P a, P b) { return imag(conj(a)*b); }\n\nint contain(CR<G> g, P p) {\n\tbool in = false;\n\tREP(i, g.size()) {\n\t\tP a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b)) if (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return -1;\n\t}\n\treturn in ? 1 : 0;\n}\n\n//////////////\n\nint main() {\n#ifdef INPUT_FROM_FILE\n\tifstream cin(\"sample.in\");\n\tofstream cout(\"sample.out\");\n#endif\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tcout << fixed << setprecision(30);\n\tll n; cin >> n;\n\n\tG g(n);\n\tREP(i,n){\n\t\tld x, y;\n\t\tcin >> x >> y;\n\t\tg[i] = { x, y };\n\t}\n\n\tll q; cin >> q;\n\tREP(i, q) {\n\t\tld x, y;\n\t\tcin >> x >> y;\n\t\tint a = contain(g, { x, y });\n\t\tcout << (a==1 ? 2 : a==-1?1:0) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//点を表す構造体\nclass Point {\n  public:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n\n  //各種演算\n  Point operator+ (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator- (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator* (double a) {return Point(a*x,a*y); }\n  Point operator/ (double a) {return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator< (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator> (const Point &p) const{\n    return x!=p.x ? x>p.x : y>p.y;\n  }\n\n  bool operator== (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトルを表す構造体\ntypedef Point Vector;\n\n//線分を表す構造体\nstruct Segment{\n  Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n  Point p1,p2;\n};\n\n//直線を表す構造体\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle{\n  public:\n  //円の中心\n  Point c;\n  //半径\n  double r;\n  Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\n//多角形の表現\ntypedef vector<Point> Polygon;\n\n//ベクトルaとbの内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//ベクトルaとbの外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//ベクトルaとbの直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//ベクトルaとbの平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\n//線分sを対称軸とした点pの線対称の点\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n//反時計回りCCW\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS) return CLOCKWISE;\n  if(dot(a,b)<-EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n\n//点aと点bの距離\ndouble getDistace(Point a,Point b){\n  return (a-b).abs();\n}\n//直線lと点pの距離\ndouble getDistaceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n} \n//線分sと点pの距離\ndouble getDistaceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n  return getDistaceLP(s,p);\n}\n//線分s1と線分s2の距離\ndouble getDistace(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistaceSP(s1,s2.p1),getDistaceSP(s1,s2.p2))\n  ,min(getDistaceSP(s2,s1.p1),getDistaceSP(s2,s1.p2)));\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s1.p2-s1.p1;\n  double d1=abs(cross(base,s2.p2-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  if(equals(fabs(d1),0.0) && equals(fabs(d2),0.0)) return s2.p1;\n  return s2.p1+(s2.p2-s2.p1)*d2/d1;\n}\n\n//円cと線分lの交点\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n  double base=sqrt(c.r*c.r-(pr-c.c).norm());\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n//円と円の交点\ndouble arg(Vector p) { return atan2(p.y,p.x); }\nVector polar(double a,double r) {return Point(cos(r)*a,sin(r)*a); }\n//円c1と円c2の交点\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=(c1.c-c2.c).abs();\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\n/*\n  IN 2\n  ON 1\n  OUT 0\n*/\n//点の内包\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(abs(cross(a,b))<EPS && dot(a,b)<EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y<EPS && EPS<b.y && cross(a,b)>EPS) x=!x;  \n  }\n  return(x ? 2 : 0);\n}\n\nint main(){\n  cin.tie(nullptr);\n  ios_base::sync_with_stdio(false);\n  int g,q;\n  cin>>g;\n  Polygon P;\n  for(int i=0;i<g;i++){\n    int x,y;\n    cin>>x>>y;\n    Point p(x,y);\n    P.push_back(p);\n  }\n  cin>>q;\n  for(int i=0;i<q;i++){\n    int x,y;\n    cin>>x>>y;\n    Point p(x,y);\n    cout<<contains(P,p)<<'\\n';\n  }\n  return(0);\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<stack>\n#include<queue>\n#include<sstream>\n#include<string>\n#include<set>\n#include<array>\n#include<cassert>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i);\n\nusing namespace std;\n\ntypedef double Real;\n\nconst Real EPS = 1e-8;\n\nint sign(Real d){\n\treturn d > EPS ? 1 : d < -EPS ? -1 : 0;\n}\n\nstruct Point{\n\tReal x,y;\t\n\texplicit Point(Real x_ = 0,Real y_ = 0):x(x_),y(y_){}\n\tPoint operator+(const Point &p) const {return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p) const {return Point(x-p.x,y-p.y);}\n\tPoint operator*(Real s) const {return Point(x*s,y*s);}\n\tPoint operator/(Real s) const {return Point(x/s,y/s);}\n\tbool operator<(const Point &p) const{return sign(x-p.x) == -1 || (sign(x-p.x) == 0 && sign(y-p.y) == -1);}\n\tbool operator==(const Point &p) const{return sign(x-p.x) == 0 && sign(y-p.y) == 0;}\n\n};\n\nistream &operator>>(istream &is,Point &p){return is >> p.x >> p.y;}//??\\???????°???????\nostream &operator<<(ostream &os ,const Point &p){return os << '(' << p.x << \", \" << p.y << ')';}//??????????°???????\n\nstruct Segment : public array<Point,2>{\n\tSegment(const Point &a,const Point &b){\tat(0) = a; at(1) = b;}\n};\n\nstruct Line : public array<Point,2>{\n\tLine(const Point &a,const Point &b){at(0) = a; at(1) = b;}\n};\n\nstruct Circle{\n\tPoint c;\n\tReal r;\n\n\tCircle(const Point &c_, Real r_):c(c_),r(r_){}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint rotate90(const Point &p){\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p,Real theta){\n\tconst Real s = sin(theta),c = cos(theta);\n\treturn Point(c*p.x-s*p.y,s*p.x+c*p.y);\n}\n\nReal angle(const Point &p){\n\treturn atan2(p.y,p.x);\n}\n\nReal dot(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.x+a.y*b.y;\n}\n\nReal cross(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.y-a.y*b.x;\n}\n\n\nReal norm(const Point &p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\nReal abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nenum { CCW=1,CW=-1,BACK=2,FRONT=-2,ON=0 };\nint ccw(const Point &a,const Point &b,const Point &c){\n\tconst Point p = b-a;\n\tconst Point q = c-a;\n\tconst int sgn = sign(cross(p,q));\n\t\n\tif(sgn == 1) return CCW;\n\tif(sgn == -1) return CW;\n\tif(sign(dot(p,q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l,const Point &p){ //?°???±\n\tReal t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);\n\treturn l[0] + (l[1] - l[0]) * t;\n}\n\nPoint refrect(const Line &l,const Point &p){ //????°?\n\tconst Point c = project(l,p);\n\treturn c+(c-p);\n}\n\nbool intersect(const Segment &a,const Segment &b){\n\treturn ccw(a[0],a[1],b[0])*ccw(a[0],a[1],b[1]) <= 0\n\t\t&& ccw(b[0],b[1],a[0])*ccw(b[0],b[1],a[1]) <= 0;\n}\n\nbool intersect(const Segment &s,const Point &p){\n\treturn ccw(s[0],s[1],p) == ON;\n}\n\nbool intersect(const Line &l,const Segment &s){\n\treturn sign(cross(l[1]-l[0],s[0]-l[0])) * cross(l[1]-l[0],s[1]-l[0]) <= 0;\n}\n\nbool intersect(const Line &l,const Point &p){\n\treturn abs(ccw(l[0],l[1],p)) != 1;\n}\n\nbool intersect(const Line &a,const Line &b){ //????????????\n\treturn sign(cross(a[1]-a[0],b[1]-b[0])) != 0\n\t\t||\tsign(cross(a[1]-a[0],b[1]-a[0]) == 0);\n}\n\nReal dist(const Point &a,const Point &b){\n\treturn abs(a-b);\t\n}\n\nReal dist(const Line &l,const Point &p){\n\tconst Point a = l[1]-l[0];\n\tconst Point b = p-l[0];\n\treturn abs(cross(a,b))/abs(a);\n}\n\nReal dist(const Line &l,const Segment &s){\n\tif(intersect(l,s)) return 0;\n\treturn min(dist(l,s[0]),dist(l,s[1]));\n}\n\nReal dist(const Line &a,const Line &b){\n\tif(intersect(a,b)) return 0;\n\treturn dist(a,b[0]);\n}\n\nReal dist(const Segment &s,const Point &p){\n\tif(sign(dot(s[1]-s[0],p-s[0]))==-1) return dist(s[0],p);\n\tif(sign(dot(s[0]-s[1],p-s[1]))==-1) return dist(s[1],p);\n\treturn dist(Line(s[0],s[1]),p);\n}\n\nReal dist(const Segment &a,const Segment &b){\n\tif(intersect(a,b)) return 0;\n\treturn min({dist(a,b[0]),dist(a,b[1]),dist(b,a[0]),dist(b,a[1])});\n}\n\nbool intersect(const Circle &a,const Circle &b){\n\treturn sign(dist(a.c,b.c)-(a.r+b.r)) <=0\n\t\t\t&& sign(dist(a.c,b.c)-abs(a.r-b.r)) >= 0;\n}\n\nbool intersect(const Circle &c,const Segment &s){\n\treturn sign(dist(s,c.c)-c.r)<=0;\n}\n\nbool intersect(const Circle &c,const Line &l){\n\treturn sign(dist(l,c.c)-c.r)<=0;\n}\n\nbool contain(const Circle &c,const Point &p){\n\treturn sign(dist(c.c,p)-c.r) <=0;\n}\n\nint contain(const Polygon &P,const Point &p){\n\tbool res = false;\n\n\tfor(int i=0;i<P.size();++i){\n\t\tPoint v1=P[i]-p;\n\t\tPoint v2=P[(i+1)%P.size()]-p;\n\t\tif(v1.y>v2.y) swap(v1,v2);\n\n\t\tif(sign(cross(v1,v2))==0&&sign(dot(v1,v2))<=0){\n\t\t\treturn 1;//on edge\n\t\t}\n\t\tif(sign(v1.y)<=0&&sign(v2.y)==1&&sign(cross(v1,v2))==1){\n\t\t\tres=!res;\n\t\t}\n\t}\n\treturn res ? 2 : 0;\n}\n\nPoint crosspoint(const Line &a,const Line &b){\n\tassert(intersect(a,b));\n\tconst Real crs = cross(a[1]-a[0],b[1]-b[0]);\n\tif(sign(crs) == 0) return a[0];\n\treturn b[0]+(b[1]-b[0])*(cross(a[1]-a[0],a[1]-b[0])/crs);\n}\n\n\n//??¬??¢?????????????????¨?????°?????????????????????Intersect?????????\nPoint crosspoint(const Segment &a,const Segment &b){\n\tassert(intersect(a,b));\n\tconst Real crs = cross(a[1]-a[0],b[1]-b[0]);\n\tif(sign(crs)==0){\n\t\tif(intersect(a,b[0])) return b[0];\n\t\tif(intersect(a,b[1])) return b[1];\n\t\tif(intersect(b,a[0])) return a[0];\n\t\treturn a[1];\n\t}\n\treturn b[0]+(b[1]-b[0])*(cross(a[1]-a[0],a[1]-b[0])/crs);\n}\n\nvector<Point> crosspoint(const Circle &c,const Line &l){\n\tconst Point p = project(l,c.c);\n\tconst Real h = dist(p,c.c);\n\n\tvector<Point> res;\n\tif(sign(h-c.r)==1){\n\t\t//nothing\n\t}else if(sign(h-c.r)==0){\n\t\tres.emplace_back(p);\t\n\t}else{\n\t\tconst Real b = sqrt(c.r*c.r-h*h);\n\t\tconst Point e = (l[1]-l[0])/abs(l[1]-l[0]);\n\t\tres.emplace_back(p+e*b);\n\t\tres.emplace_back(p-e*b);\n\t}\n\treturn res;\n}\n\nvector<Point> crosspoint(const Circle &a,const Circle &b){\n\tif(!intersect(a,b)) return vector<Point>();\n\n\tvector<Point> res;\n\tconst Real d = dist(a.c,b.c);\n\n\tif(sign(d-(a.r+b.r))==0){\n\t\tconst Point v = b.c - a.c;\n\t\tres.emplace_back(a.c + (v * (a.r /abs(v))));\n\t}else{\n\t\tconst Real theta = acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\t\tconst Real phi = angle(b.c-a.c);\n\t\tres.emplace_back(a.c+rotate(Point(a.r,0),phi+theta));\n\t\tres.emplace_back(a.c+rotate(Point(a.r,0),phi-theta));\n\t}\n\treturn res;\n}\n\n\nint main(){\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\n\tint n;\n\tcin >> n;\n\tPolygon poly(n);\n\trep(i,n){\n\t\tPoint p;\n\t\tcin >> p;\n\t\tpoly[i]=p;\n\t}\n\tcin >> n;\n\trep(i,n){\n\t\tPoint p;\n\t\tcin >> p;\n\t\tcout << contain(poly,p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(S a,S b){\n  return eq(0, cross( Vector(a) , Vector(b) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\ndouble distSS(S s0,S s1){\n  if( isCrossSS(s0,s1) )return 0;\n  double res0 = min( distSP( s0, s1.first ) , distSP(s0, s1.second) );\n  double res1 = min( distSP( s1, s0.first ) , distSP(s1, s0.second) );\n  return min(res0,res1);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p)==0 )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  int Tc;\n  cin>>Tc;\n\n  vecP polygon;\n  while(Tc--){\n    polygon.push_back( input() );\n  }\n\n  int n;\n  cin>>n;\n  while(n--){\n    cout<< inPolygon( polygon , input() ) <<endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n    // convex version : O(log n)\n    int ConvexContain(const Point &p) const;\n\n};\n\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\nint Polygon::ConvexContain(const Point &p) const {\n    const int n = (*this).size();\n    Point g = ((*this)[0] + (*this)[n / 3] + (*this)[2 * n / 3]) / 3.0; // inner point\n    int a = 0, b = n;\n    while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n        int c = (a + b) * 0.5;\n        if (sign(abs_cross((*this)[a] - g, (*this)[c] - g)) == 1) { // angle < 180 deg\n            if (sign(abs_cross((*this)[a] - g, p - g)) == 1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == -1)\n                b = c;\n            else\n                a = c;\n        }\n        else {\n            if (sign(abs_cross((*this)[a] - g, p - g)) == -1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == 1)\n                a = c;\n            else\n                b = c;\n        }\n    }\n\n    b %= n;\n    int res = sign(abs_cross((*this)[a] - p, (*this)[b] - p));\n    return (res == -1 ? OUT : (res == 1 ? IN : ON));\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    bool is_convex = poly.IsConvex();\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << (is_convex ? poly.ConvexContain(p) : poly.Contain(p)) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\ntemplate<class T> ostream& operator<<(ostream& os, const V<T> &v) {\n    os << \"[\"; for (auto p: v) os << p << \", \"; os << \"]\";\n    return os;\n}\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nint sgn(D a) { return (abs(a) <= EPS) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\n// int rsgn(D a, D f) {\n//     if (abs(a) <= f*EPS) return 0;\n//     return (a < 0) ? -1 : 1;\n// }\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    bool operator<(const Pt2 &r) const { return 2*sgn(x, r.x)+sgn(y, r.y)<0; }\n    bool operator==(const Pt2 &r) const { return sgn((*this-r).rabs()) == 0; }\n\n    D norm() const { return x*x + y*y; }\n    D abs() const { return sqrt(norm()); }\n    D rabs() const { return max(std::abs(x), std::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    return os << \"P(\" << p.x << \", \" << p.y << \")\";\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\nostream& operator<<(ostream& os, const L &l) {\n    return os << \"L(\" << l.s << \", \" << l.t << \")\";\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n// cross(a, b) is too small?\nint sgncrs(P a, P b) {\n    D cr = cross(a, b);\n    if (abs(cr) <= (a.rabs() + b.rabs()) * EPS) return 0;\n    return (cr < 0) ? -1 : 1;\n}\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = sgncrs(b, c);\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nusing Pol = V<P>;\n\nD area2(const Pol &pol) {\n    D u = 0;\n    P a = pol.back();\n    for (auto b: pol) u += cross(a, b), a = b;\n    return u;\n}\n\n// 0: outside, 1: on line, 2: inside\nint contains(const Pol &pol, P p) {\n    int in = -1;\n    P _a, _b = pol.back();\n    for (int i = 0; i < int(pol.size()); i++) {\n        _a = _b; _b = pol[i];\n        P a = _a, b = _b;\n        if (ccw(a, b, p) == 0) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (!(a.y <= p.y && p.y < b.y)) continue;\n        if (sgn(a.y, p.y) ? (cross(a-p, b-p) > 0) : (a.x > p.x)) in *= -1;\n    }\n    return in + 1;\n}\n\nPol convex(Pol p) {\n    sort(begin(p), end(p));\n    p.erase(unique(begin(p), end(p)), end(p));\n    if (p.size() <= 1) return p;\n    Pol up, dw;\n    for (P d: p) {\n        size_t n;\n        while ((n = up.size()) > 1) {\n//            if (ccw(up[n-2], up[n-1], d) != 1) break; // line上も取る\n            if (ccw(up[n-2], up[n-1], d) == -1) break;\n            up.pop_back();\n        }\n        up.push_back(d);\n    }\n    reverse(begin(up), end(up));\n    for (P d: p) {\n        size_t n;\n        while ((n = dw.size()) > 1) {\n//            if (ccw(dw[n-2], dw[n-1], d) != -1) break; // line上も取る\n            if (ccw(dw[n-2], dw[n-1], d) == 1) break;\n            dw.pop_back();\n        }\n        dw.push_back(d);\n    }\n    dw.insert(begin(dw), begin(up) + 1, end(up) - 1);\n    return dw;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(1) << fixed;\n\n    int n;\n    cin >> n;\n    Pol pol(n);\n    for (int i = 0; i < n; i++) {\n        D x, y;\n        cin >> x >> y; pol[i] = P(x, y);\n    }\n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        P p;\n        D x, y;\n        cin >> x >> y; p = P(x, y);\n        cout << contains(pol, p) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tld mx = a.X;\n\tfor (PT &p : po)\n\t\tmx = max(mx, p.X);\n\tPT b(mx, a.Y);\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define ld long double\n#define eps 1e-9\n\nbool cmp(ld A , ld B){return A + eps > B && A - eps < B;}\n\nclass vec{\npublic:\n\tld x , y;\n\tvec(ld _x = 0 , ld _y = 0) : x(_x) , y(_y){}\n\tfriend vec operator +(vec A , vec B){return vec(A.x + B.x , A.y + B.y);}\n\tfriend vec operator -(vec A , vec B){return vec(A.x - B.x , A.y - B.y);}\n\tfriend ld operator *(vec A , vec B){return A.x * B.x + A.y * B.y;}\n\tfriend ld operator %(vec A , vec B){return A.x * B.y - A.y * B.x;}\n\tfriend vec operator *(vec A , ld B){return vec(A.x * B , A.y * B);}\n\tld len(){return sqrt(x * x + y * y);}\n\tld len2(){return x * x + y * y;}\n\tld angle(){return atan2(y , x);}\n};\nvec getvec(){ld x , y; cin >> x >> y; return vec(x , y);}\n\nclass segment{\npublic:\n\tvec st , ed , dir;\n\tsegment(vec _a = vec() , vec _b = vec()) : st(_a) , ed(_b) , dir(_b - _a){}\n\tfriend bool havesect(segment A , segment B){\n\t\tld P = A.st.x , Q = A.ed.x , X = B.st.x , Y = B.ed.x;\n\t\tif(Q < P) swap(P , Q);\n\t\tif(Y < X) swap(X , Y);\n\t\tif(X - eps > Q || P - eps > Y) return 0;\n\t\tP = A.st.y , Q = A.ed.y , X = B.st.y , Y = B.ed.y;\n\t\tif(Q < P) swap(P , Q);\n\t\tif(Y < X) swap(X , Y);\n\t\tif(X - eps > Q || P - eps > Y) return 0;\n\t\treturn\n\t\t\t((B.st - A.st) % A.dir) * (A.dir % (B.ed - A.st)) > -eps &&\n\t\t\t((B.st - A.ed) % A.dir) * (A.dir % (B.ed - A.ed)) > -eps &&\n\t\t\t((A.st - B.st) % B.dir) * (B.dir % (A.ed - B.st)) > -eps &&\n\t\t\t((A.st - B.ed) % B.dir) * (B.dir % (A.ed - B.ed)) > -eps;\n\t}\n\tfriend vec getsect(segment A , segment B){\n\t\tld t = ((A.st - B.st) % B.dir) / (B.dir % A.dir);\n\t\treturn A.st + (A.dir * t);\n\t}\n\tld len(){return dir.len();}\n\tld len2(){return dir.len2();}\n};\nsegment getseg(){vec A = getvec() , B = getvec(); return segment(A , B);}\n\nld dist(vec P , segment seg){//minimum dist from a point to a segment\n\tld T = ((P - seg.st) * seg.dir) / seg.len2();\n\tif(T < 0) return (seg.st - P).len();\n\telse if(T > 1) return (seg.ed - P).len();\n\telse return (seg.st + (seg.dir * T) - P).len();\n}\n\nclass polygon{//counter-clockwise\npublic:\n\tvector < vec > point; int sz; mt19937 rndLine;\n\tvoid input(){\n\t\tmt19937 rnd(time(0)); rndLine = rnd;\n\t\tcin >> sz; for(int i = 1 ; i <= sz ; ++i) point.push_back(getvec());\n\t\tfor(int i = 0 ; i < sz ; ++i) point.push_back(point[i]);\n\t}\n\tld area(){\n\t\tld sum = 0;\n\t\tfor(int i = 0 ; i < sz ; ++i) sum += point[i] % point[i + 1];\n\t\treturn sum / 2;\n\t}\n\tbool isconvex(){\n\t\tfor(int i = 1 ; i <= sz ; ++i)\n\t\t\tif((point[i - 1] - point[i]) % (point[i + 1] - point[i]) > eps) return 0;\n\t\treturn 1;\n\t}\n\tbool checkin(vec P){\n\t\tvec tmp(pow(rndLine() , 0.1) , pow(rndLine() , 0.2));\n\t\tsegment nowline(P , P + tmp * 1e10);\n\t\tint Count = 0;\n\t\tfor(int i = 0 ; i < sz ; ++i)\n\t\t\tCount += havesect(segment(point[i] , point[i + 1]) , nowline);\n\t\treturn Count & 1;\n\t}\n\tbool checkon(vec P){\n\t\tfor(int i = 0 ; i < sz ; ++i)\n\t\t\tif(cmp(0 , (point[i + 1] - point[i]) % (P - point[i]))){\n\t\t\t\tld t = (point[i + 1] - point[i]) * (P - point[i]) / (point[i + 1] - point[i]).len2();\n\t\t\t\tif(t > -eps && t < 1 + eps)\n\t\t\t\t\treturn 1;\n\t\t\t}\n\t\treturn 0;\n\t}\n};\n\nint main(){\n\tpolygon now; now.input(); int Q;\n\tfor(cin >> Q ; Q ; --Q){\n\t\tvec P = getvec();\n\t\tputs(now.checkon(P) ? \"1\" : now.checkin(P) ? \"2\" : \"0\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define INF 20000\nstruct Point\n{\n\tint x;\n\tint y;\n};\n\nPoint p0;\n\nint orientation(Point a, Point b, Point c)\n{\n\tint val = (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n\tif(val>0) return 1;\n\telse if(val<0) return -1;\n\telse return 0;\n}\n\nbool onLine(Point a, Point b, Point c)\n{\n\tif(b.x<=max(a.x,c.x) && b.x>=min(a.x,c.x) && b.y<=max(a.y,c.y) && b.y>=min(a.y,c.y)) return true;\n\treturn false;\n}\n\nbool intersect(Point a, Point b, Point c, Point d)\n{\n\tint o1 = orientation(a,b,c);\n\tint o2 = orientation(a,b,d);\n\tint o3 = orientation(c,d,a);\n\tint o4 = orientation(c,d,b);\n\n\tif(o1!=o2 && o3!=o4) return true;\n\tif(o1==0 && onLine(a,c,b)) return true;\n\tif(o2==0 && onLine(a,d,b)) return true;\n\tif(o3==0 && onLine(c,a,d)) return true;\n\tif(o4==0 && onLine(c,b,d)) return true;\n\treturn false;\n}\n\nint comp(const void *a, const void *b)\n{\n\tPoint *p1 = (Point*)a;\n\tPoint *p2 = (Point*)b;\t\n\treturn 0;\n}\n\nvoid inside(Point shape[], int size, Point t)\n{\n\tint intersection=0;\n\tPoint end = {INF,t.y};\n\tfor(int i=0;i<size;i++)\n\t{\n\t\tif(intersect(shape[i],shape[(i+1)%size],t,end)) \n\t\t{\n\t\t\tintersection++;\n\t\t\tint o1 = orientation(t,shape[i],shape[(i+1)%size]);\n\t\t\tif(o1==0)\n\t\t\t{\n\t\t\t\t\tif(onLine(shape[i],t,shape[(i+1)%size])) \n\t\t\t\t\t{\n\t\t\t\t\t\tcout<<\"1\"<<endl;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse intersection--; \n\t\t\t}\n\t\t\t\n\t\t\tif(onLine(t,shape[(i+1)%size],end))\n\t\t\t{\n\t\t\t\tif(shape[i].y>=t.y) intersection--;\t\n\t\t\t}\n\t\t\tif(onLine(t,shape[i],end))\n\t\t\t{\n\t\t\t\tif(shape[(i+1)%size].y>=t.y) intersection--;\t\n\t\t\t}\n\n\t\t}\n\t}\n\tif(intersection%2==0) cout<<\"0\"<<endl;\n\telse cout<<\"2\"<<endl;\n}\n\nint main()\n{\n\tint t,q;\n\tcin>>q;\n\tPoint shape[q];\n\tint x,y;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tshape[i]={x,y};\n\t}\n\tp0 = {shape[0].x,shape[0].y};\n\tfor(int i=0;i<q;i++)\n\t{\n\t\n\t}\t\n\tcin>>t;\n\tfor(int i=0;i<t;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tPoint in = {x,y};\n\t\tinside(shape,q,in);\t\n\t}\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n#define EPS 1e-9\n#define PI acos(-1.0)\n\nstruct point {\n\tdouble x, y;\n\tpoint() { x = y = 0.0; }\n\tpoint(double x, double y) : x(x), y(y) {}\n\tbool operator < (point other) const {\n\t\tif (fabs(x - other.x) > EPS) return x < other.x;\n\t\treturn y < other.y;\n\t}\n\tbool operator == (point other) const {\n\t\treturn (fabs(x - other.x) < EPS && fabs(y - other.y) < EPS);\n\t}\n    point operator - (point other) const {\n        return point(x - other.x, y - other.y);\n    }\n};\n\nint g,q;\nvector<point> cs;\n\ndouble cross(point a, point b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool ccw(point p, point q, point r) {\n    return cross(q-p, r-p) > 0;\n}\n\ndouble sqrdist(point p1, point p2) {  \n    return (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);  \n}\n\ndouble getAngle(point a, point b, point c) {\n    double A = sqrdist(a,c);\n    double B = sqrdist(a,b);\n    double C = sqrdist(b,c);\n    return acos((B+C-A)/(2*sqrt(B)*sqrt(C)));\n}\n\nint sumAngles(point p) {\n    double angle = 0;\n    for (int i = 0; i < cs.size() - 1; i++) {\n        double newAngle = getAngle(cs[i], p, cs[i+1]);\n        if (fabs(PI-fabs(newAngle)) < EPS) return 1; \n\n        if (ccw(p, cs[i], cs[i+1])) {\n            angle += newAngle;\n        } else {\n            angle -= newAngle;\n        }\n    }\n    if (fabs(2*PI-fabs(angle)) < EPS) {\n        return 2;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    cin >> g;\n    for (int i = 0; i < g; i++) {\n        int a,b; cin >> a >> b;\n        cs.push_back(point(a,b));\n    }\n    cs.push_back(cs[0]);\n\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int a,b; cin >> a >> b;\n        cout << sumAngles(point(a,b)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\nconst double EPS = 1e-20;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nconst P pINF(sqrt(2) * INF, sqrt(235) * INF);\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint polygonPointContainment(vector<P> &G, P p){\n    int inside = 0;\n    for (int i=0;i<G.size()-1;i++){\n        P q = G[i] - p;\n        P r = G[i+1] - p;\n        if(imag(q) > imag(r)) swap(q,r);\n            if(imag(q) <= 0 && imag(r) > 0 && cross(q,r) < 0){\n                inside = 1 - inside;\n            }\n        if(cross(q,r) == 0 && dot(q,r) <= 0){\n          return 1;\n        }\n    }\n    return 2*inside;\n}\n\nint main(){\n    int n, q;\n    cin >> n;\n    vector<P> G;\n    P p;\n    for (int i=0;i<n;i++){\n        cin >> p.real() >> p.imag();\n        G.push_back(p);\n    }\n    G.push_back(G[0]);\n\n    cin >> q;\n    for (int i=0;i<q;i++){\n        cin >> p.real() >> p.imag();\n        cout << polygonPointContainment(G, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint is_included(P a, Poly p, P ex){\n  int n = p.size(), c = 0;\n  L l = L(a,ex);\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    if(is_cross(l,L(p[i],p[i+1]))) ++c;\n    if(!ccw(p[i],p[i+1],a)) return 1;//??????\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    Mx = max(Mx,x);\n    My = max(My,y);\n    p[i] = P(x,y);\n  }\n  ++Mx;\n  ++My;\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << is_included(P(x,y),p,P(Mx,My)) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11; //[-1000:1000]->EPS=1e-8\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\ninline P vec(L l){return l.t-l.s;}\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\n// ?????´ ?????? verify AOJ CGL_2_A\nbool vertical(L a, L b) {return sgn(dot(O,vec(a),vec(b)))==0;}\nbool parallel(L a, L b) {return sgn(det(O,vec(a),vec(b)))==0;}\n\n// ????????´????????? \nbool eql(L a,L b){ return (parallel(a,b) && sgn(det(a.s,a.t,b.s))==0);}\n\n// ???????????????verify AOJ CGL_2_B ???????????????????????´??????1,????????´??????0\nbool ill(L a,L b){ return parallel(a,b)==false;}\nbool ils(L l,L s,int end=0){ return sgn(det(l.s,l.t,s.s)*det(l.s,l.t,s.t))<=-end;}\nbool iss(L a,L b,int end=0){\n\tint s1=ccw(a.s,a.t,b.s)|ccw(a.s,a.t,b.t);\n\tint s2=ccw(b.s,b.t,a.s)|ccw(b.s,b.t,a.t);\n\tif(end) return (s1&s2)==(LEFT|RIGHT);\n\treturn (s1|s2)&ON || (s1&s2)==(LEFT|RIGHT);\n}\n\n// ?????? verify AOJ CGL_2_C\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t);\n\tR s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\t\n// ?????¢ verify AOJ CGL_2_D\nR dlp(L l,P p){return abs(det(l.s,l.t,p))/abs(vec(l));}\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn dlp(s,p);\n}\nR dll(L a,L b){return ill(a,b)?0:dlp(a,b.s);}\nR dls(L l,L s){return ils(l,s)?0:min(dlp(l,s.s),dlp(l,s.t));}\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\nusing VP=vector<P>;\n\n// ????§???¢\n// ??¢??? Verify AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0);\n}\n\n// ???????§???¢????????? verify CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(ccw(pol[(i+n-1)%n],pol[i],pol[(i+1)%n])==RIGHT) return false;\n\treturn true;\n}\n\n\n// ????§???¢??????????????? ?????? 2 ?????? 1 ???????????? 0???(???????§???¢??????) verify AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==ON) return 1;\n\t\tP cur=p-pol[i],nxt=p-pol[(i+1)%n];\n\t\tbool f=(sgn(imag(cur))>=0);\n\t\tbool s=(sgn(imag(nxt))<0);\n\t\tbool can=(sgn(imag(cur*nxt))>0);\n\t\tif(can&&f==s) f?res++:res--;\n\t}\n\treturn res?2:0;\n}\n\n\n// ????§???¢??????????????? ?????? 2 ?????? 1 ???????????? 0???(???????§???¢??????)\n//verify AOJ CGL_3-C\n/*\nint in_polygon(VP pol,P p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==ON) return 1;\n\t\tR vt=imag(p-pol[i])/imag(pol[(i+1)%n]-pol[i]);\n\t\tR dx=real(pol[(i+1)%n]-pol[i]);\n\t\tbool can=(sgn(imag((pol[i]-p)*(pol[(i+1)%n]-p)))<=0);\n\t\t//if((imag(pol[i])<=imag(p))&&(imag(p)< imag(pol[(i+1)%n]))&&(real(p)<real(pol[i])+vt*dx))res++;\n\t\t//if((imag(pol[i])> imag(p))&&(imag(p)>=imag(pol[(i+1)%n]))&&(real(p)<real(pol[i])+vt*dx))res--;\n\t\t//if((imag(pol[i])<=imag(p))&&(imag(p)< imag(pol[(i+1)%n]))&&can)res++;\n\t\t// if((imag(pol[i])> imag(p))&&(imag(p)>=imag(pol[(i+1)%n]))&&can)res--;\n\t\tbool f=(sgn(imag(p-pol[i]))>=0);\n\t\tbool s=(sgn(imag(p-pol[(i+1)%n]))<0);\n\t\tif(0<sgn(real(pol[i]-p)+vt*dx)&&f==s) f?res++:res--;\n\t}\n\tcerr << res << endl;\n\treturn res?2:0;\n}\n*/\n\n// real(p-pol[i])*imag(pol[(i+1)%n]-pol[i])+imag(p-pol[i])*real(pol[(i+1)%n]-pol[i]);\n\n//(p.X-pol[i].X)*(pol[(i+1)%n].Y-pol[i].Y) < (p.Y-pol[i].Y)* (pol[(i+1)%n].X-pol[i].X)\n//0 < (p.Y-pol[i].Y)* (pol[(i+1)%n].X-pol[i].X) - p.X-pol[i].X*(pol[(i+1)%n].Y-pol[i].Y)\n\n\n/*\n// ????§???¢??????????????????(???????§???¢??????) Verify AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.push_back(cross(l,edge));\n\t}\n\tsort(_all(check),cmp);\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/R(2.0);\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_hull Verify AOJ 0063 Verify AOJ CGL_4_A\nVP convex_hull(const VP& pol,int ban=0){\n\tint n=pol.size(),k=0;\n\tsort(_all(pol));\n\tVP res(2*n);\n\n\t//??\\??????while????????????????????? ???????????????????????????????????? >=0 ????????????>0\n\t// down\n\trep(i,n){\n\t\twhile(k>1&&sgn(dot(res[k-1],res[k-2],pol[i]))>-ban) k--;\n\t\tres[k++]=pol[i];\n\t}\n\t// up\n\tint t=k;\n\trrep(i,n-1){\n\t\twhile(k>t&&dot(res[k-1],res[k-2],pol[i])>-ban) k--;\n\t\tres[k++]=pol[i];\n\t}\n\tres.resize(k-1);\n\treturn res;\n}\n\n// ????????????\n// verify AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tif(ccw(l.s,l.t,a)!=RIGHT)res.push_back(a);\n\t\tif((ccw(l.s,l.t,a)|ccw(l.s,l.t,b))==(LEFT|RIGHT)) res.push_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define FORR(i,a,b) for (int i=(a);i>=(b);i--)\n\ntypedef long long ll;\nconst int INF = 1e9;\nconst int MOD = 1e9+7;\nconst double EPS = 1e-9;\n\n\nstruct Edge {\n    int x0, y0, x1, y1;\n    Edge() {}\n    void set(int a, int b, int c, int d) {\n        if (a > c) {\n            swap(a, c);\n            swap(b, d);\n        }\n        x0 = a; y0 = b;\n        x1 = c; y1 = d;\n    }\n    bool operator<(const Edge& e) const {\n        return x0 < e.x0;\n    }\n};\n\nbool dequals(double a, double b) {\n    return abs(b - a) < EPS;\n}\n\nint main() {\n    int N, Q;\n    cin >> N;\n    int x0, y0, px, py, x, y;\n    vector<Edge> edge(N);\n\n    cin >> x0 >> y0;\n    px = x0; py = y0;\n    FOR(i, 1, N) {\n        cin >> x >> y;\n        edge[i-1].set(px, py, x, y);\n        px = x; py = y;\n    }\n    edge[N-1].set(px, py, x0, y0);\n    sort(begin(edge), end(edge));\n\n    cin >> Q;\n    FOR(i, 0, Q) {\n        cin >> x >> y;\n        int ecount = 0;\n        int result = 0;\n        FOR(i, 0, N) {\n            Edge &e = edge[i];\n            if (x < e.x0) {\n                break;\n            }\n            double p = (double)(y - e.y0) / (e.y1 - e.y0);\n            if (p < 0 || p > 1.0) continue;\n            double cx = e.x0 + p * (e.x1 - e.x0);\n            if (dequals((double)x, cx)) {\n                result = 1;\n                break;\n            }\n            ecount++;\n        }\n        if (result != 1 and ecount % 2 == 1) result = 2;\n        cout << result << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define INF 1<<30\n#define LINF 1LL<<60\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-9, pi = acos(-1.0);\nnamespace std {\n    bool operator<(const Point &lhs, const Point &rhs) {\n        if (lhs.real() < rhs.real() - eps) return true;\n        if (lhs.real() > rhs.real() + eps) return false;\n        return lhs.imag() < rhs.imag();\n    }\n}\nPoint input_point() {ld x, y; cin >> x >> y; return Point(x, y);} // ????????\\???\nbool eq(ld a, ld b) {return (abs(a - b) < eps);} // ????????????????????????\nld dot(Point a, Point b) {return real(conj(a) * b);} // ??????\nld cross(Point a, Point b) {return imag(conj(a) * b);} // ??????\n\n// ??´????????????\nclass Line {\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Point operator[](const int _num) {\n        if (_num == 0)return a;\n        else if (_num == 1)return b;\n        else assert(false);\n    }\n};\n\n// ????????????\nclass Circle {\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ??????????¶?\nPoint proj(Line l, Point p) {\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// CCW\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if (cross(b, c) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n    if (cross(b, c) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n    if (dot(b, c) < 0) return 2;       // c,a,b???????????´???????????¶\n    if (norm(b) < norm(c)) return -2;  // a,b,c???????????´???????????¶\n    return 0;                          // a,c,b???????????´???????????¶\n}\n\n/* ???????????? */\n// ??´?????¨??´??????????????????\nbool isis_ll(Line l, Line m) {return !eq(cross(l.b - l.a, m.b - m.a), 0);}\n// ??´?????¨?????????????????????\nbool isis_ls(Line l, Line s) {\n    return isis_ll(l, s) &&\n    (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n// ????????¨?????????????????????\nbool isis_ss(Line s, Line t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n    ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n// ????????´????????????\nbool isis_lp(Line l, Point p) {return (abs(cross(l.b - p, l.a - p)) < eps);}\n// ?????????????????????\nbool isis_sp(Line s, Point p) {return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);}\n\n\n/* ????§???¢ */\ntypedef vector<Point> Polygon;\n// ??????????????????\n//  2 => out\n//  0 => on\n//  1 => in\nint is_in_polygon(const Polygon &poly, Point p) {\n    ld angle = 0;\n    int n = (int)poly.size();\n    for (int i = 0;i < n;i++) {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p)) return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\nint main(void) {\n    cin.tie(0); ios::sync_with_stdio(false);\n    int n; cin >> n;\n    Polygon ps;\n    for(int i = 0; i < n;i++) ps.emplace_back(input_point());\n    int q; cin >> q;\n    for(int i = 0; i < q;i++){\n        cout << is_in_polygon(ps,input_point()) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define For(i,x,y) for (register int i=(x);i<=(y);i++)\n#define FOR(i,x,y) for (register int i=(x);i<(y);i++)\n#define Dow(i,x,y) for (register int i=(x);i>=(y);i--)\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define siz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define fil(a,b) memset((a),(b),sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pa;\ntypedef double db;\ninline ll read(){\n    ll x=0,f=1;char c=getchar();\n    while ((c<'0'||c>'9')&&(c!='-')) c=getchar();\n    if (c=='-') f=-1,c=getchar();\n    while (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\n\nnamespace Geometry{\n\tconst db eps = 1e-9;\n\tstruct point{\n\t\tdb x,y;\n\t\tinline point operator + (const point &p){return (point){x+p.x,y+p.y};}\n\t\tinline point operator - (const point &p){return (point){x-p.x,y-p.y};}\n\t\tinline db operator * (const point &p){return x*p.x+y*p.y;}\n\t\tinline point operator / (const db &v){return (point){x/v,y/v};}\n\t\tinline point operator * (const db &v){return (point){x*v,y*v};}\n\t};\n\ttypedef point vec;\n\tinline db dot(vec a,vec b){return a.x*b.x+a.y*b.y;}\n\tinline db sqr(db x){return x*x;}\n\tinline db dis(point a,point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\n\tinline db dis2(point a,point b){return sqr(a.x-b.x)+sqr(a.y-b.y);}\n\tinline db cross(vec a,vec b){return a.x*b.y-a.y*b.x;}\n\tstruct line{\n\t\tpoint a,b;\n\t};\n\tinline point projection(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tvec BA=A-B,BC=C-B,BD=BC*(BA*BC/dis2(B,C));\n\t\treturn B+BD;\n\t}\n\tinline point reflection(point A,line b){\n\t\tpoint D=projection(A,b);\n\t\treturn (point){D.x*2-A.x,D.y*2-A.y};\n\t}\n\tinline int Counter_Clockwise(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tdb f1=cross(C-B,A-B);\n\t\tif (fabs(f1)>eps) return (f1<0?2:1);\n\t\tdb f2=(C-B)*(A-B);\n\t\tif (f2<0) return 3;\n\t\treturn dis(B,C)<dis(A,B)?4:5;\n\t}\n\tinline int checkline(line a,line b){\n\t\tvec A=a.b-a.a,B=b.b-b.a;\n\t\tdb f1=A*B;\n\t\tif (fabs(f1)<=eps) return 1;\n\t\treturn dis(a.a,a.b)*dis(b.a,b.b)-fabs(f1)<=eps?2:0;\n\t}\n\tinline bool checkseg(line a,line b){\n\t\tpoint A=a.a,B=a.b,C=b.a,D=b.b;\n\t\tif (max(A.x,B.x)<min(C.x,D.x)) return 0;\n\t\tif (min(A.x,B.x)>max(C.x,D.x)) return 0;\n\t\tif (max(A.y,B.y)<min(C.y,D.y)) return 0;\n\t\tif (min(A.y,B.y)>max(C.y,D.y)) return 0;\n\t\tdb s=cross(B-A,C-A),h=cross(B-A,D-A);\n\t\tif (s*h>=eps) return 0;\n\t\tdb i=cross(D-C,A-C),t=cross(D-C,B-C);\n\t\treturn i*t<=eps;\n\t}\n\tinline point crosspoint(line a,line b){\n\t\tpoint A=a.a,B=a.b,C=b.a,D=b.b;\n\t\tdb s1=fabs(cross(B-A,C-A)),s2=fabs(cross(B-A,D-A));\n\t\tvec CO=(D-C)*(s1/(s1+s2));\n\t\treturn C+CO;\n\t}\n\tinline db dis(point\tA,line b){\n\t\tpoint B=b.a,C=b.b,D=projection(A,b);\n\t\tint tmp=Counter_Clockwise(D,b);\n\t\tif (tmp==3) return dis(B,A);\n\t\tif (tmp==4) return dis(C,A);\n\t\tif (tmp==5) return dis(D,A);\n\t}\n\tinline db dis(line a,line b){\n\t\tif (checkseg(a,b)) return 0;\n\t\tdb s=dis(a.a,b),h=dis(a.b,b),i=dis(b.a,a),t=dis(b.b,a);\n\t\treturn min({s,h,i,t});\n\t}\n\ttypedef vector<point> polygon;\n\tinline db S(polygon v){\n\t\tdb s=cross(v.back(),v[0]);\n\t\tFor(i,0,siz(v)-2) s+=cross(v[i],v[i+1]);\n\t\treturn s/2;\n\t}\n\tinline bool check(polygon v){\n\t\tint n=siz(v),f=(cross(v[n-1]-v[n-2],v[0]-v[n-1])>=-eps);\n\t\tFor(i,1,n-2) if ((cross(v[i]-v[i-1],v[i+1]-v[i])>=-eps)!=f) return 0;\n\t\treturn 1;\n\t}\n\tinline int check(point a,polygon v){\n\t\tdb k=sqrt(23);point b=(point){a.x+100000000,a.y+k*100000000};\n\t\tint n=siz(v);bool f=0;\n\t\tFor(i,0,n-1){\n\t\t\tif (Counter_Clockwise(a,(line){v[i],v[(i+1)%n]})==5) return 1;\n\t\t\tif (checkseg((line){v[i],v[(i+1)%n]},(line){a,b})) f^=1;\n\t\t}\n\t\treturn !f?0:2;\n\t}\n};\nusing namespace Geometry;\n\nint main(){\n\tint n=read();polygon v(n);\n\tFOR(i,0,n) scanf(\"%lf%lf\",&v[i].x,&v[i].y);\n\tint T=read();\n\twhile (T--){\n\t\tpoint a;scanf(\"%lf%lf\",&a.x,&a.y);\n\t\tprintf(\"%d\\n\",check(a,v));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#include <set>\n#include <cstdio>\n#include <climits>\n#include <cmath>\n#include <array>\n#include <functional>\n#include <sstream>\n#include <list>\n#include <iomanip>\n#include <set>\nconst int MOD=1000000007;\nconst int INF=1000000000;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nconst double eps=1e-10;\nconst int inf=1e9;\ntypedef pair<int,int> P;\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nclass Point\n{\npublic:\n  double x,y;\n  Point(double x,double y): x(x),y(y){}\n  Point operator + (const Point &p)\n  {\n    return Point(x+p.x,y+p.y);\n  }\n  Point operator - (const Point &p)\n  {\n    return Point(x-p.x,y-p.y);\n  }\n  Point operator * (double k)\n  {\n    return Point(x*k,y*k);\n  }\n  Point operator / (double k)\n  {\n    return Point(x/k,y/k);\n  }\n  bool operator < (const Point &p) const\n  {\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n  bool operator == (const Point &p) const\n  {\n    return fabs(x-p.x)<eps && fabs(y-p.y) < eps;\n  }\n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\ndouble norm(Point a)\n{\n  return a.x*a.x + a.y*a.y;\n}\ndouble abs(Vector a)\n{\n  return sqrt(norm(a));\n}\nstruct Segment\n{\n  Point p1,p2;\n  Segment(Point p1,Point p2): p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c,double r):  c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nbool isorthogonal(Vector a,Vector b)\n{\n  return fabs(dot(a,b)-0.0)<eps;\n}\n\nbool isparallel(Vector a,Vector b)\n{\n  return fabs(cross(a,b)-0.0)<eps;\n}\nPoint project(Segment s,Point p)\n{\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return  s.p1 + base*r;\n}\nPoint reflect(Segment s,Point p)\n{\n  return p+ (project(s,p)-p)*2.0;\n}\ndouble getdistance(Point a,Point b)\n{\n  return abs(a-b);\n}\ndouble getdistanceLP(Line l,Point p)\n{\n  return abs(cross(l.p2-l.p1,p-l.p1) / abs(l.p2-l.p1));\n}\ndouble getdistanceSP(Segment s,Point p)\n{\n  if(dot(s.p2-s.p1,p-s.p1) <0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) <0.0) return abs(p-s.p2);\n  return getdistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps) return CLOCKWISE;\n  if(dot(a,b)<-eps) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1) * ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1,Segment s2)\n{\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n  Vector base =s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\ndouble getdistanceSS(Segment s1,Segment s2)\n{\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getdistanceSP(s1,s2.p1),getdistanceSP(s1,s2.p2)),min(getdistanceSP(s2,s1.p1),getdistanceSP(s2,s1.p2)));\n}\n\npair<Point,Point> getcrosspoints(Circle c,Line l)\n{\n  //assert(intersect(c,l));\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r - norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){return atan2(p.y,p.x);}\nVector polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\npair <Point,Point> getcrosspoints(Circle c1,Circle c2)\n{\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r) / (2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nint contains(Polygon g,Point p)\n{\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++)\n    {\n      Point a=g[i]-p,b=g[(i+1)%n]-p;\n      if(abs(cross(a,b)) < eps && dot(a,b)<eps) return 1;\n      if(a.y>b.y) swap(a,b);\n      if(a.y <eps && eps<b.y && cross(a,b)>eps) x=!x;\n    }\n  return (x ? 2 : 0);\n}\nint main(int argc,char const* argv[])\n{\n  int g,q;\n  cin >> g;\n  Polygon po;\n  for(int i=0;i<g;i++)\n    {\n      double x,y;\n      cin >> x >> y;\n      Point p=Point(x,y);\n      po.push_back(p);\n    }\n  cin >> q;\n  for(int i=0;i<q;i++)\n    {\n      double x,y;\n      cin >> x >> y;\n      Point p=Point(x,y);\n      cout << contains(po,p) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i, N) for (int i = 0; i < (int)N; ++i)\n#define all(a) (a).begin(), (a).end()\nconst double EPS = 1e-10;\nbool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n  Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n  Point operator*(const double a) { return Point(a * x, a * y); }\n  Point operator/(const double a) { return Point(x / a, y / a); }\n\n  double abs() const { return sqrt(norm()); }\n  double norm() const { return x * x + y * y; }\n\n  Point rotate(double theta) const {\n    return Point(cos(theta) * x - sin(theta) * y,\n                 sin(theta) * x + cos(theta) * y);\n  }\n\n  Point normalize() const { return Point(*this) / abs(); }\n\n  bool operator<(const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend istream &operator>>(istream &is, Point &p) { return is >> p.x >> p.y; }\n};\n\ndouble abs(const Point &p) { return p.abs(); }\ndouble norm(const Point &p) { return p.norm(); }\n\ntypedef Point Vector;\n\nclass Segment {\n public:\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  friend istream &operator>>(istream &is, Segment &s) {\n    return is >> s.p1 >> s.p2;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle {\n public:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\n  int contains(const Point &p) const {\n    double d = abs(c - p);\n    if (equals(d, r)) return 1;  // ON\n    if (d < r + EPS) return 2;   // IN\n    return 0;                    // OUT\n  }\n};\n\ntypedef vector<Point> Polygon;\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\n\ndouble distance(Point a, Point b) { return (a - b).abs(); }\n\ndouble distanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble distanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n  return distanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min({distanceSP(s1, s2.p1), distanceSP(s1, s2.p2),\n              distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)});\n}\n\nenum CCW {\n  COUNTER_CLOCKWISE = 1,\n  CLOCKWISE = -1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\nCCW ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;      // p2, p0, p1\n  if (a.norm() < b.norm()) return ONLINE_FRONT;  // p0, p1, p2\n  return ON_SEGMENT;                             // p0, p2, p1\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Segment s1, Segment s2) {\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nbool intersect(Circle c, Line l) { return distanceLP(l, c.c) < c.r; }\n\npair<Point, Point> crossPoint(Circle c, Line l) {\n  assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nbool intersect(Circle c1, Circle c2) {\n  return (c1.c - c2.c).abs() < c1.r + c2.r;\n}\n\npair<Point, Point> crossPoint(Circle c1, Circle c2) {\n  assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/*\n  IN 2\n  ON 1\n  OUT 0\n*/\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; ++i) {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS & EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon convexHull(Polygon s) {\n  Polygon u, l;\n  if (s.size() < 3) return s;\n  sort(s.begin(), s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for (int i = 2; i < s.size(); ++i) {\n    for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for (int i = s.size() - 3; i >= 0; i--) {\n    for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n\n  reverse(l.begin(), l.end());\n  for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\n  return l;\n}\n\nCircle circumscribedCircle(const Point &a, const Point &b, const Point &c) {\n  double a1, a2, b1, b2, c1, c2;\n  a1 = 2 * (b.x - a.x);\n  b1 = 2 * (b.y - a.y);\n  c1 = a.x * a.x - b.x * b.x + a.y * a.y - b.y * b.y;\n  a2 = 2 * (c.x - a.x);\n  b2 = 2 * (c.y - a.y);\n  c2 = a.x * a.x - c.x * c.x + a.y * a.y - c.y * c.y;\n  Point p;\n  p.x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n  p.y = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);\n\n  return Circle(p, abs(p - a));\n}\n\n// https://en.wikipedia.org/wiki/Green's_theorem#Area_Calculation\ndouble area(const Polygon &p) {\n  double ans = 0;\n  const int N = p.size();\n  for (int i = 0; i < N; ++i) {\n    Point q = p[(i + 1) % N];\n    ans += (p[i].y + q.y) * (q.x - p[i].x);\n  }\n  ans /= 2.0;\n  return fabs(ans);\n}\n\n// The points must be counter-clockwise order\nbool isConvex(const Polygon &p) {\n  const int N = p.size();\n\n  for (int i = 0; i < N; ++i) {\n    Point pn = p[(i + 1) % N], pnn = p[(i + 2) % N];\n    int d = ccw(p[i], pn, pnn);\n    if (d == CLOCKWISE) return false;\n  }\n  return true;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  Polygon P(n);\n  rep(i, n) cin >> P[i];\n\n  int q;\n  cin >> q;\n  rep(i, q) {\n    Point p;\n    cin >> p;\n    cout << contains(P, p) << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\n\nusing namespace std;\n\nconst double eps = 1e-10;\ntypedef complex<double> Point;\n\ninline double cross(const Point& a, const Point& b){\n    return imag(conj(a) * b);\n}\n\ntypedef vector<Point> Polygon;\n\nint convexcontains(const Polygon& ch, const Point& p){\n    Point g = (ch[0] + ch[(int)ch.size()/3] + ch[(int)ch.size()*2/3]) / 3.0;\n    int l = 0, r = (int)ch.size();\n    while(l + 1 < r){\n        int m = (l + r) >> 1;\n        if(cross(ch[l] - g, ch[m] - g) > 0){\n            (cross(ch[l] - g, p - g) > 0 && cross(ch[m] - g, p - g) < 0? r: l) = m;\n        }\n        else{\n            (cross(ch[l] - g, p - g) < 0 && cross(ch[m] - g, p - g) > 0? l: r) = m;\n        }\n    }\n    r %= (int)ch.size();\n    if(cross(ch[l] - p, ch[r] - p) > eps)return 2;\n    if(cross(ch[l] - p, ch[r] - p) < -eps)return 0;\n    return 1;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    Polygon g;\n    while(n--){\n        int x, y;\n        cin >> x >> y;\n        g.emplace_back(x, y);\n    }\n    int q;\n    cin >> q;\n    while(q--){\n        int x, y;\n        cin >> x >> y;\n        cout << convexcontains(g, Point(x, y)) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<string>\n#include<set>\n#include<map>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<((int)(n));i++)\n#define reg(i,a,b) for(int i=((int)(a));i<=((int)(b));i++)\n#define irep(i,n) for(int i=((int)(n))-1;i>=0;i--)\n#define ireg(i,a,b) for(int i=((int)(b));i>=((int)(a));i--)\ntypedef long long int lli;\ntypedef pair<int,int> mp;\n#define fir first\n#define sec second\n#define IINF INT_MAX\n#define LINF LLONG_MAX\n\nstruct pos{\n\tdouble x,y;\n\tdouble norm,norm2;\n\tpos tov(pos a){\n\t\treturn (a-(*this));\n\t}\n\tpos operator+(pos a)const{\n\t\tpos res=a;\n\t\tres.x+=x; res.y+=y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos operator-(pos a)const{\n\t\tpos res=(*this);\n\t\tres.x-=a.x; res.y-=a.y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos scalar(double a){\n\t\tpos res=(*this);\n\t\tres.x*=a; res.y*=a;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tdouble dot(pos a){\n\t\treturn x*a.x + y*a.y;\n\t}\n\tdouble cross(pos a){\n\t\treturn x*a.y - y*a.x;\n\t}\n\tpos(double ix,double iy){\n\t\tx=ix; y=iy;\n\t\tnorm2=x*x+y*y;\n\t\tnorm=sqrt(norm2);\n\t}\n\tpos(){}\n\tstring str(){\n\t\tchar ns[50];\n\t\tsprintf(ns,\"(%lf %lf)\",x,y);\n\t\treturn\tstring(ns);\n\t}\n\tstatic pos polar(double r,double t){\n\t\treturn pos(r*cos(t),r*sin(t));\n\t}\n};\n\nstruct line{\n\tpos p,q;\n\tpos vec;\n\tstring str(){\n\t\treturn (\"(\"+p.str()+\"-\"+q.str()+\")\");\n\t}\n\tbool iscross(line a){\n\t\tdouble da,db;\n\t\tda=vec.cross( p.tov(a.p) );\n\t\tdb=vec.cross( p.tov(a.q) );\n\t\tif(da*db>=0)return false;\n\t\tda=a.vec.cross( a.p.tov(p) );\n\t\tdb=a.vec.cross( a.p.tov(q) );\n\t\treturn (da*db<0);\n\t}\n\tline(pos ip,pos iq){\n\t\tp=ip; q=iq;\n\t\tvec=p.tov(q);\n\t}\n\tline(){}\n\tdouble dist(pos a){\n\t\tif(p.tov(a).dot( p.tov(q) )<0)return p.tov(a).norm;\n\t\tif(q.tov(a).dot( q.tov(p) )<0)return q.tov(a).norm;\n\t\treturn abs(vec.cross(p.tov(a))/vec.norm);\n\t}\n\tdouble dist(line a){\n\t\tif(iscross(a))return 0;\n\t\treturn min( min(dist(a.p),dist(a.q)) , min(a.dist(this->p),a.dist(this->q)));\n\t}\n};\n\ndouble lowofcos_getcos(double a,double b,double c){\n\treturn ((a*a+b*b-c*c)/(2*a*b));\n}\n\nstruct circle{\n\tpos p;\n\tdouble r;\n\t\n\tline getintersection(circle a){\n\t\tpos cv=p.tov(a.p);\n\t\tdouble br=atan2(cv.y,cv.x);\n\t\tdouble dr=acos(lowofcos_getcos( r, cv.norm, a.r));\n\t\t\n\t\tpos p1= p+pos::polar(r,br+dr);\n\t\tpos p2= p+pos::polar(r,br-dr);\n\t\t\n\t\treturn line(p1,p2);\n\t}\n\tcircle(pos ip,double ir){\n\t\tp=ip; r=ir;\n\t}\n\tcircle(){}\n};\n\nstruct polygon{\n\tvector<pos> ps;\n\tpolygon(){}\n\tdouble area(){\n\t\tdouble res=0;\n\t\trep(i,ps.size()){\n\t\t\tpos no=ps[i],to=ps[(i+1)%ps.size()];\n\t\t\tres+=(no.x+to.x)*(no.y-to.y);\n\t\t}\n\t\treturn abs(res)/2;\n\t}\n\tpolygon(pos a,pos b){\n\t\tps.push_back(a);\n\t\tps.push_back(pos(a.x,b.y));\n\t\tps.push_back(b);\n\t\tps.push_back(pos(b.x,a.y));\n\t}\n\tline gete(int a){\n\t\treturn line(ps[a],ps[(a+1)%ps.size()]);\n\t}\n\tint isin(pos a){\n\t\t//????????¢??????\n\t\t/*\n\t\tif((a.x-ps[0].x)*(a.x-ps[2].x)>0)return false;\n\t\tif((a.y-ps[0].y)*(a.y-ps[2].y)>0)return false;\n\t\treturn true;\n\t\t*/\n\t\t\n\t\t//?????´??????2,?????£????????????1,?????????0\n\t\tdouble as=0;\n\t\trep(i,ps.size()){\n\t\t\tline ne=gete(i);\n\t\t\tif(ne.dist(a)<=0)return 1;\n\t\t\tpos v1=a.tov(ne.p);\n\t\t\tpos v2=a.tov(ne.q);\n\t\t\tdouble nt=acos(v1.dot(v2)/(v1.norm*v2.norm));\n\t\t\tdouble ns=(v1.cross(v2)/(v1.norm*v2.norm));\n\t\t\tif(ns<0)nt*=-1;\n\t\t\tas+=nt;\n\t\t}\n\t\tif(abs(as)<1e-8)return 0;\n\t\treturn 2;\n\t}\n\t\n\tpolygon mult(polygon a){\n\t\treturn a;\n\t}\n};\n\n\nint main(void){\n\tint n;\n\tscanf(\"%d\",&n);\n\tpolygon pl;\n\trep(i,n){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tpl.ps.push_back(pos(p,q));\n\t}\n\t\n\tint qn;\n\tscanf(\"%d\",&qn);\n\trep(i,qn){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tprintf(\"%d\\n\",pl.isin(pos(p,q)));\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n#define not_equal(a,b) (!equal(a,b))\n#define lt(a,b) (a-b < -EPS)\n#define PI acos(-1)\n\nstruct Point{\n  double x,y;\n\n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n\n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n  bool operator < (const Point &p)const{ return x != p.x ? x < p.x : y < p.y; }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble norm(const Point &p){ return dot(p,p); }\ndouble abs(const Point &p){ return sqrt(norm(p)); }\ndouble dist(const Point &a,const Point &b){\n  return sqrt(pow(a.x-b.x,2) + pow(a.y-b.y,2));\n}\nPoint rotate(const Point &p,double th){\n  return Point(cos(th)*p.x-sin(th)*p.y,sin(th)*p.x+cos(th)*p.y);\n}\nPoint rotate90(const Point &p){ return Point(-p.y,p.x); }\n\nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n\nostream &operator << (ostream &os,Point &p){ \n  return os << \"(\" << p.x << \",\" << p.y << \")\";\n}\n\n#define curr(G,i) (G[i%G.size()])\n#define next(G,i) (G[(i+1)%G.size()])\ntypedef vector<Point> Polygon;\n\nint containmentPoP(const Polygon &pg,const Point &p){\n  int N = pg.size();\n  bool in = false;\n  for(int i = 0 ; i < N ; i++){\n    Point a = curr(pg,i)-p, b = next(pg,i)-p;\n    if(a.y > b.y){ swap(a,b); }\n    if(a.y <= 0 && 0 < b.y && cross(a,b) > 0){ in = !in; }\n    if(cross(a,b) == 0 && dot(a,b) <= 0){ return 1; }\n  }\n  return (in ? 2 : 0); \n}\n\nint main(){\n  int N,Q;\n  cin >> N;\n  Polygon pg(N);\n  for(int i = 0 ; i < N ; i++){\n    cin >> pg[i];\n  }\n  cin >> Q;\n  while(Q--){\n    Point p;\n    cin >> p;\n    cout << containmentPoP(pg,p) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cassert>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//????§? argument\ndouble arg(Vector p) { return atan2(p.y, p.x); }\n//?\\???¢??? polar form\nVector polar(double r, double a) { return Point(cos(a)*r, sin(a)*r); }\n\n//?????? dot product\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//?????? cross product\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//(?????????????¶????)\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\n//?????¨??´??????????????????\nbool intersect(Circle c, Line l) { return getDistanceLP(l, c.c) <= c.r; }\n//?????¨??????????????????\nbool intersect(Circle c1, Circle c2) { return getDistance(c1.c, c2.c) <= c1.r + c2.r; }\n\n//????????¨???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n//?????¨??´????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n//?????¨????????????\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//????????????\nenum { OUT = 0, ON, IN };\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS)return ON;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS<b.y&&cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? IN : OUT);\n}\n\nint main() {\n\tPolygon g;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint p; scanf(\"%lf%lf\", &p.x, &p.y);\n\t\tg.push_back(p);\n\t}\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p; scanf(\"%lf%lf\", &p.x, &p.y);\n\t\tprintf(\"%d\\n\", contains(g, p));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            while (get_position(s_right, poly[i_pre]) != CCW && get_position(s_right, poly[i_pre]) != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n            }\n            int i_aft = (i + 1) % n;\n            while (get_position(s_right, poly[i_aft]) != CCW && get_position(s_right, poly[i_aft]) != CW) {\n                i_aft = (i_aft + 1) % n;\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-17;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\ndouble DistAsLine(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    return fabs(V1.OuterProd(V2)) / V1.Length();\n}\n\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    if (DistAsLine(P, Seg) > eps) return false;\n    return true;\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 100007, P.y + 100009)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 100007, P.y + 100009)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\nusing namespace std;\nusing ll = long long ;\nusing P = pair<int,int> ;\nusing pll = pair<long long,long long>;\nconstexpr int INF = 1e9;\nconstexpr long long LINF = 1e17;\nconstexpr int MOD = 1000000007;\nconstexpr double PI = 3.14159265358979323846;\n\n//circle of points\n\nusing db = double;\nconstexpr double EPS = 1e-10;\nconstexpr bool eq(const db& x,const db& y){return abs(x-y)<EPS;}\nstruct point{\n    db x=0,y=0;\n    constexpr point(const db& x=0,const db& y=0):x(x),y(y){}\n    constexpr bool operator==(const point& r)const{return eq(x,r.x)&&eq(y,r.y);};\n    constexpr bool operator!=(const point& r)const{return !(*this==r);};\n    constexpr bool operator<(const point& r)const{return (eq(x,r.x))?(y<r.y):(x<r.x);};\n    constexpr bool operator>(const point& r)const{return (eq(x,r.x))?(y>r.y):(x>r.x);};\n    constexpr point operator+(const point& r)const{return point(*this)+=r;}\n    constexpr point operator+=(const point& r){\n        x+=r.x;y+=r.y;\n        return *this;\n    }\n    constexpr point operator-(const point& r)const{return point(*this)-=r;}\n    constexpr point operator-=(const point& r){\n        x-=r.x;y-=r.y;\n        return *this;\n    }\n    constexpr point operator*(const db& r)const{return point(*this)*=r;}\n    constexpr point operator*=(const db& r){\n        x*=r;y*=r;\n        return *this;\n    }\n    constexpr point operator*(const point& r)const{return point(*this)*=r;}\n    constexpr point operator*=(const point& r){\n        db tmp=x;\n        x=x*r.x-y*r.y;\n        y=tmp*r.y+y*r.x;\n        return *this;\n    }\n    constexpr point operator/(const double& r)const{return point(*this)/=r;}\n    constexpr point operator/=(const double& r){\n        x/=r;y/=r;\n        return *this;\n    }\n};\ndb norm(const point& a){return a.x*a.x+a.y*a.y;}\ndouble abs(const point& a){return sqrt(a.x*a.x+a.y*a.y);}\ndb dot(const point& a,const point& b){return a.x*b.x+a.y*b.y;}\ndb cross(const point& a,const point& b){return a.x*b.y-a.y*b.x;}\npoint projection(const point& p,const point& b){return b*dot(p,b)/norm(b);}\npoint unit_vec(const point& p){return p/abs(p);}\npoint normal_vec(const point& p){return p*point(0,1);}\npoint rotation(const point& center,const point& p,const point& rot){return rot*(p-center)+center;}\ndouble area(const point& a,const point& b,const point& c){return cross(b-a,c-a)/2;}\n\nstruct Line{\n    point a,b;\n    constexpr Line(const point& a=point(0,0),const point& b=point(0,0)):a(a),b(b){}\n    constexpr Line(const double& A,const double& B,const double& C){ // Ax + By + C = 0\n        if(eq(A,0)&&eq(B,0)) assert(-1);\n        else if(eq(B,0)){\n            a = point(-C/A,0);\n            b = point(-C/A,1);\n        }else{\n            a = point(0,-C/B);\n            b = point(1,-(A+C)/B);\n        }\n    }\n};\nbool is_orthoonal(const Line& l,const Line& r){return eq(dot(l.b-l.a,r.b-r.a),0);}\nbool is_pararell(const Line& l,const Line& r){return eq(cross(l.b-l.a,r.b-r.a),0);}\nbool on_Line(const Line& l,const point& p){return eq(dot(p-l.a,l.b-l.a),0);}\ndouble dis_Lp(const Line& l,const point& p){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\npoint Line_intersect(const Line& l,const Line& r){\n    point lv=l.b-l.a,rv=r.b-r.a;\n    return l.a + lv * abs(cross(r.b-l.a,rv) / cross(lv,rv)); \n}\nLine vertical_bisector(const point& p,const point& q){return Line((p+q)/2,rotation((p+q)/2,q,point(0,1)));}\nusing Segment = Line;\nbool on_Segment(const Segment& s,const point& p){\n    return ( abs(s.a-p)+abs(s.b-p)<=abs(s.a-s.b)+EPS );\n}\nbool is_segment_intersect(const Segment& s,const Segment& t){\n    return  (cross(s.b-s.a,t.a-s.a) * cross(s.b-s.a,t.b-s.a) < EPS) &&\n            (cross(t.b-t.a,s.a-t.a) * cross(t.b-t.a,s.b-t.a) < EPS);\n}\npoint segment_intersect(const Segment& s,const Segment& t){\n    double d1 = dis_Lp(s,t.a);\n    double d2 = dis_Lp(s,t.b); \n    double p = d1/(d1+d2);\n    return t.a + (t.b-t.a)*p;\n}\n\nbool on_circle(point cen,point p){\n    return ( (cen.x-p.x)*(cen.x-p.x)+(cen.y-p.y)*(cen.y-p.y)<=1.0+EPS );\n}\n\nint main(){\n    int n;\n    cin >> n;\n    vector<point> polygon(n);\n    vector<Segment> s(n);\n    rep(i,n) cin >> polygon[i].x >> polygon[i].y;\n    rep(i,n) s[i] = Segment(polygon[i],polygon[(i+1)%n]);\n    //rep(i,n) cout << s[i].a.x << \" \" << s[i].a.y << \" \" << s[i].b.x << \" \" << s[i].b.y << endl;\n    int q;\n    cin >> q;\n    while(q--){\n        int ans = -1;\n        point p;\n        cin >> p.x >> p.y;\n        rep(i,n){\n            if(on_Segment(s[i],p)){\n                ans = 1;\n            }\n        }\n        if(ans==1){cout<<ans<<endl;continue;}\n        int res = 0;\n        point zero = point(13490,-18911);\n        Line l = Line(p,zero);\n        rep(i,n){\n            if(is_pararell(s[i],l)) continue;\n            if(is_segment_intersect(s[i],l)) ++ res;\n        }\n        if(res%2==1) cout << 2 << endl;\n        else cout << 0 << endl; \n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n/*????????????(??§?¨?)????????????*/\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\n/*??´???????????????*/\nclass Line\n{\npublic:\n\tVector p,q;\n\tLine(Vector p=Vector(),Vector q=Vector()):p(p),q(q){}\n};\n\n/*???????????????*/\nclass Circle\n{\npublic:\n\tVector c;\n\tdouble r;\n\tCircle(Vector c=Vector(),double r=0.0):c(c),r(r){}\n};\n\n/*????§???¢??????*/\ntypedef vector<Vector> Polygon;\n\n/*???????????????????¬????????????§??????*/\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\n\n/*??´??????????°???±*/\nVector project(Line l,Vector p)\n{\n\tVector base=l.q-l.p;\n\tdouble r=dot(p-l.p,base)/base.norm();\n\treturn l.p+base*r;\n}\n\n/*????????¨??????????????¢????????????*/\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\n/*?????????????????????*/\nbool intersect(Vector p0,Vector p1,Vector p2,Vector p3)\n{\n\treturn (ccw(p0,p1,p2)*ccw(p0,p1,p3)<=0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n}\n\n/*??´?????¨??´????????????*/\nVector LLcross(Vector p0,Vector p1,Vector p2,Vector p3)\n{\n\tdouble d1=cross(p3-p2,p0-p2);\n\tdouble d2=cross(p3-p2,p1-p3);\n\treturn p0+(p1-p0)*(d1/(d1+d2));\n}\n\n/*?????¨??´????????????*/\npair<Vector,Vector> CLcross(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=(l.q-l.p)/(l.q-l.p).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\n/*?????¨????????????*/\ndouble arg(Vector p){return atan2(p.y,p.x);}\nVector pol(double a,double r){return Vector(cos(r)*a,sin(r)*a);}\npair<Vector,Vector> CCcross(Circle c1,Circle c2)\n{\n\tdouble d=(c1.c-c2.c).abs();\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+pol(c1.r,t+a),c1.c+pol(c1.r,t-a));\n}\n\n/*????§???¢??????????????????????????????*/\nint contain(Polygon g,Vector p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tVector a=g[i]-p,b=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;//??????\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn (x?2:0);//?????????2?????????0\n}\n\n//cout<<fixed<<setprecision(10);\n////////////////////////////////////////////////\nint main()\n{\n\tint n;cin>>n;\n\tPolygon g;\n\tREP(i,n)\n\t{\n\t\tVector a;cin>>a.x>>a.y;\n\t\tg.PB(a);\n\t}\n\tint q;cin>>q;\n\tREP(i,q)\n\t{\n\t\tVector p;\n\t\tcin>>p.x>>p.y;\n\t\tcout<<contain(g,p)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    if (Dist(P, Seg) > eps) return false;\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#include <vector>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble norm(Vector a) {\n\treturn a.norm();\n}\n\ndouble abs(Vector a) {\n\treturn a.abs();\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn project(s, p)*2.0 - p;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\tint p1p2p3, p1p2p4, p3p4p1, p3p4p2;\n\tp1p2p3 = ccw(p1, p2, p3);\n\tp1p2p4 = ccw(p1, p2, p4);\n\tp3p4p1 = ccw(p3, p4, p1);\n\tp3p4p2 = ccw(p3, p4, p2);\n\n\tif (p1p2p3 == ON_SEGMENT) return true;\n\tif (p1p2p4 == ON_SEGMENT) return true;\n\tif (p3p4p1 == ON_SEGMENT) return true;\n\tif (p3p4p2 == ON_SEGMENT) return true;\n\tif (p1p2p3 == ONLINE_FRONT && p1p2p4 == ONLINE_BACK) return true;\n\tif (p1p2p3 == ONLINE_BACK && p1p2p4 == ONLINE_FRONT) return true;\n\tif (p1p2p3 == COUNTER_CLOCKWISE && p1p2p4 == CLOCKWISE && p3p4p1 == CLOCKWISE && p3p4p2 == COUNTER_CLOCKWISE) return true;\n\tif (p1p2p3 == CLOCKWISE && p1p2p4 == COUNTER_CLOCKWISE && p3p4p1 == COUNTER_CLOCKWISE && p3p4p2 == CLOCKWISE) return true;\n\treturn false;\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool intersect(Circle c, Line l) {\n\treturn (project(l, c.c) - c.c).norm() <= c.r*c.r;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\nVector rotate90(Vector v) {\n\tVector w;\n\tw.x = -v.y; w.y = v.x;\n\treturn w;\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tVector v = c1.c - c2.c;\n\tVector w = rotate90(v);\n\tdouble d = v.abs();\n\tdouble x = 0.5*(c2.r*c2.r - c1.r*c1.r + d*d) / d;\n\tdouble y = sqrt(c2.r*c2.r - x*x);\n\tVector v1, v2;\n\tv1 = c2.c + v*(x / d);\n\tv2 = w*(y / w.abs());\n\treturn make_pair(v1 + v2, v1 - v2);\n}\n\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\n\nint main() {\n\tPolygon g;\n\tPoint p;\n\tint n;\n\tcin >> n;\n\tg.resize(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> g[i].x >> g[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tcout << contains(g, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <vector>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n// ------ Functions Level 3 ------ //\nint contain(std::vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = v[i] - p, b = v[(i + 1 != v.size() ? i + 1 : 0)] - p;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() <= EPS && EPS < b.imag() && cross(a, b) < -EPS) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n#endif\n\n#include <iostream>\nusing namespace std;\nint n, q, x, y; vector<Point> v;\nint main() {\n\tcin >> n; v.resize(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tv[i] = Point(x, y);\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tcout << contain(v, p) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tbool judge = false;\n\tOwnVector2 p0 = vertices[0] - p;\n\n\tif (p0.length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n] - p;\n\t\tif (p1.length2() <= 0.00000000001 || (abs(p0.cross(p1)) <= 0.00000000000001 && p0.dot(p1) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (p0.y > p1.y)\n\t\t{\n\t\t\tOwnVector2 t = p0;\n\t\t\tp0 = p1;\n\t\t\tp1 = t;\n\t\t}\n\t\tif (p0.y <= 0 && 0 <= p1.y)\n\t\t{\n\t\t\tif (p0.cross(p1) < 0)\n\t\t\t{\n\t\t\t\tjudge = !judge;\n\t\t\t}\n\t\t}\n\t\n\t\tp0 = vertices[(i) % n] - p;\n\t}\n\n\treturn judge ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\nconst double EPS = 1e-20;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nconst P pINF(sqrt(2) * INF, sqrt(235) * INF);\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint polygonPointContainment(vector<P> &G, P p){\n    int cross;\n    L infS(p, pINF);\n    for (int i=0;i<G.size()-1;i++){\n        L s(G[i], G[i+1]);\n        if(intersectSP(s, p)){\n            return 1;\n        }\n        if(intersectSS(infS, s)){\n            cross++;\n        }\n    }\n    if(cross%2){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int n, q;\n    cin >> n;\n    vector<P> G;\n    P p;\n    for (int i=0;i<n;i++){\n        cin >> p.real() >> p.imag();\n        G.push_back(p);\n    }\n    G.push_back(G[0]);\n\n    cin >> q;\n    for (int i=0;i<q;i++){\n        cin >> p.real() >> p.imag();\n        cout << polygonPointContainment(G, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n};\nT norm(P a){return a*a;}\nT abs(P a) {return sqrtl(norm(a));}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\nstruct L{ P s,t;L(){} L(P s,P t):s(s),t(t){}};\nP insLL(L a,L b){ // line x line\n  P s = a.s - b.s , v = a.t - a.s , w = b.t - b.s;\n  db k1 = s / w , k2 = w / v;\n  if(sgn(k2) == 0) return abs(b.s - a.s) < abs(b.t - a.s) ? b.s : b.t;\n  return a.s + v * (k1 / k2);\n}\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n  T c1=(a.t-a.s)/(b.s-a.s),c2=(a.t-a.s)/(b.t-a.s);\n  T c3=(b.t-b.s)/(a.s-b.s),c4=(b.t-b.s)/(a.t-b.s);\n  return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n    sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n    sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n    sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n    sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\ndb disPL(P p,L a){return fabs((a.t-a.s)/(p-a.s)) / abs(a.t-a.s);}\ndb disPS(P p,L a){ // p x seg dis\n  if(sgn((a.t-a.s)*(p-a.s)) == -1) return abs(p-a.s);\n  if(sgn((a.s-a.t)*(p-a.t)) == -1) return abs(p-a.t);\n  return disPL(p,a);\n}\ndb disSS(L a,L b){ // seg x seg dis\n  if(isSS(a,b)) return 0;\n  return min(min(disPS(a.s,b),disPS(a.t,b)),min(disPS(b.s,a),disPS(b.t,a)));\n}\ntypedef vector<P> polygon;\nT area(polygon A) { // multiple 2 with integer type\n  T res=0;\n  rep(i,0,sz(A)) res+=A[i]/(A[(i+1)%sz(A)]);\n  return fabs(res) / 2;\n}\nbool isconvex(polygon A){ // counter-clockwise\n  bool ok=1;int n=sz(A);\n  rep(i,0,2) A.pb(A[i]);\n  rep(i,0,n) ok&=((A[i+1]-A[i])/(A[i+2]-A[i]))>=0;\n  return ok;\n}\nint inPpolygon(P p,polygon A){ // -1 : on , 0 : out , 1 : in\n  int res=0;\n  rep(i,0,sz(A)){\n    P u=A[i],v=A[(i+1)%sz(A)];\n    if(onPS(p,u,v)) return -1;\n    T cross = sgn((v-u)/(p-u)) , d1 = sgn(u.y-p.y) , d2 = sgn(v.y-p.y);\n    if(cross > 0 && d1 <= 0 && d2 > 0) ++res;\n    if(cross < 0 && d2 <= 0 && d1 > 0) --res;\n  }\n  return res != 0;\n}\n\nP a, b, c, d;\npolygon poly;\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(1);\n\twhile(q--) {\n\t\tcin >> a.x >> a.y;\n\t\tpoly.pb(a);\n\t}\n\tcin >> q;\n\twhile(q--) {\n\t\tcin >> a.x >> a.y;\n\t\tint r = inPpolygon(a, poly);\n\t\tif(r == 1) r = 2;\n\t\telse if(r == -1) r = 1;\n\t\tcout << r << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=105;\n\n#define eps (1e-10)\nstruct point{\n    double x,y;\n    point(){}\n    point(double x,double y):x(x),y(y){}\n    point operator - (point p){\n        return point(x-p.x,y-p.y);\n    }\n};\n\ntypedef vector<point>polygon;\n\ndouble dot(point a,point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(point a,point b)\n{\n    return a.x*b.y-a.y*b.x;\n}\n\nint contains(polygon g,point p)\n{\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<eps&&dot(a,b)<eps){\n            return 1;\n        }\n        if(a.y>b.y){\n            swap(a,b);\n        }\n        if(a.y<eps&&b.y>eps&&cross(a,b)>eps){\n            x=!x;\n        }\n    }\n    return (x?2:0);\n}\n\nint main()\n{\n    int n;\n    cin>>n;\n    polygon s;\n    point temp;\n    for(int i=0;i<n;i++){\n        cin>>temp.x>>temp.y;\n        s.push_back(temp);\n    }\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        cin>>temp.x>>temp.y;\n        int res=contains(s,temp);\n        cout<<res<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct P {\n    int x, y;\n\n    P() : x(0), y(0) { }\n    P(int x, int y) : x(x), y(y) { }\n\n    int norm() { return x * x + y * y; }\n    int dot(P p) { return x * p.x + y * p.y; }\n    int cross(P p) { return x * p.y - y * p.x; }\n\n    P operator -() { return P(-x, -y); }\n    P operator +(P p) { return P(x + p.x, y + p.y); }\n    P operator -(P p) { return P(x - p.x, y - p.y); }\n    P operator *(int k) { return P(x * k, y * k); }\n};\n\nint ccw(P p0, P p1, P p2) {\n    P u = p1 - p0;\n    P v = p2 - p0; \n\n    if (u.cross(v) > 0) return 1;\n    if (u.cross(v) < 0) return -1;\n    if (u.dot(v) < 0) return 2;\n    if (u.norm() < v.norm()) return -2;\n\n    return 0;\n}\n\nconst int MAX_N = 100;\n\nint n;\nP ps[MAX_N + 2];\n\nint solve(int x, int y) {\n    int c = 0;\n\n    P d1(x, y);\n    P d2(10001, y);\n\n    for (int i = 0; i < n; i++) {\n        if (ccw(ps[i], ps[i + 1], d1) == 0) return 1;\n\n        if (ccw(d1, d2, ps[i]) * ccw(d1, d2, ps[i + 1]) < 0 &&\n            ccw(ps[i], ps[i + 1], d1) * ccw(ps[i], ps[i + 1], d2) < 0) c++;\n\n        if (ccw(d1, d2, ps[i + 1]) == 0 && ccw(d1, d2, ps[i]) * ccw(d1, d2, ps[i + 2]) < 0) c++;\n    }\n\n    return c % 2 ? 2 : 0;\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n\n        ps[i] = P(x, y);\n    }\n    ps[n] = ps[0];\n    ps[n + 1] = ps[1];\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << solve(x, y) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n#include <array>\n\nusing namespace std;\n\nconst double eps = 1e-6;\nconst double pi = atan2(0, -1);\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n  \n  static double arg( Vector v1, Vector v2 );\n  void print() { cout << fixed << setprecision(10) << x << \" \" << y << endl; }\n};\n\ndouble Vector::arg( Vector v1, Vector v2 )\n{\n  Vector vd = v2 - v1;\n  double a;\n  \n  if ( v1.norm() < eps || v2.norm() < eps )\n    return pi;\n  else\n    a = acos( ( v1.norm() + v2.norm() - vd.norm() ) / ( 2 * v1.abs() * v2.abs() ) );\n  \n  if ( cross( v1, v2 ) > 0 )\n    return a;\n  else\n    return -a;\n}\n\nclass Polygon\n{\npublic:\n  int n;\n  vector<Vector> pt;\n  Polygon(){}\n  Polygon( int n ) : n(n), pt(n) {}\n  int solve( Vector p );\n};\n\nint Polygon::solve( Vector p )\n{\n  double sum = 0;\n  Vector a, b;\n\n  for ( auto i = 0; i < n; ++i )\n    {\n      if ( i )\n        {\n          a = pt[i-1] - p;\n          b = pt[i] - p;\n        }\n      else\n        {\n          a = pt[n-1] - p;\n          b = pt[i] - p;\n        }\n\n      double r = Vector::arg( a, b );\n      if ( fabs( fabs( r ) - pi ) < eps )\n        {\n          cout << \"1\" << endl;\n          return 0;\n        }\n      else\n        sum += r;\n    }\n\n  if ( fabs( sum - 2 * pi ) < eps )\n    cout << \"2\" << endl;\n  else\n    cout << \"0\" << endl;\n  \n  return 0;\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n\n  Polygon g( n );\n  \n  for ( auto i = 0; i < n; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.pt[i] = Vector( x, y );\n    }\n  \n  int q;\n  cin >> q;\n  \n  for ( auto i = 0; i < q; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.solve( Vector(x, y) );\n    }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n  const bool clockwise(const vec &v) const { return cross(v) < 0; }\n  const bool anticlockwise(const vec &v) const { return cross(v) > 0; }\n};\n\ntypedef vec point;\n\nstruct polygon {\n  // All points in ANTI-CLOCKWISE order\n  vector<point> pts;\n  const bool pointOnSide(const point &p) const {\n    for (point g : pts)\n      if (p == g)\n        return true;\n    for (int i = 0; i < pts.size(); i++) {\n      vec s = pts[(i + 1) % pts.size()] - pts[i];\n      vec v = p - pts[i];\n      if (v.unit() == s.unit() && v.len() <= s.len()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  const bool pointInPolygon(const point &p) const {\n    if (pointOnSide(p))\n      return false;\n    int cw = 0, ccw = 0;\n    for (int i = 0; i < pts.size(); i++) {\n      vec s1 = pts[(i + 1) % pts.size()] - p;\n      vec s2 = pts[i] - p;\n      if (s1.anticlockwise(s2))\n        ccw++;\n      else if (s1.clockwise(s2))\n        cw++;\n    }\n    if (!cw || !ccw)\n      return true;\n    return false;\n  }\n};\n\nint main() {\n  polygon g;\n  {\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n      point p;\n      cin >> p.x >> p.y;\n      g.pts.push_back(p);\n    }\n  }\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    point p;\n    cin >> p.x >> p.y;\n    if (g.pointOnSide(p)) {\n      puts(\"1\");\n    } else if (g.pointInPolygon(p)) {\n      puts(\"2\");\n    } else {\n      puts(\"0\");\n    }\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mset(a,b) memset(a,b,sizeof(a))\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\ntypedef long long ll;\nconst ll maxn=1e4+200;\nconst int inf=0x3f3f3f3f;\nconst double EPS=1e-10;\n//typedef pair<int,int> PA;\ndouble add(double a,double b) //考虑误差的加法运算\n{\n    if(abs(a+b)<EPS*(abs(a)+abs(b))) return  0;\n    return a+b;\n}\nint sgn(double x)\n{\n    if(abs(x)<EPS)  return 0;\n    if(x<0) return -1;\n    else return 1;\n}\nclass Point\n{\npublic:\n    double x,y;\n    Point() {}\n    Point(double x,double y):x(x),y(y)\n    {\n    }\n    Point operator+ (Point p)\n    {\n        return Point(add(x,p.x),add(y,p.y));\n    }\n    Point operator -(Point p)\n    {\n        return Point(add(x,-p.x),add(y,-p.y));\n    }\n    Point operator *(double d)\n    {\n        return Point(x*d,y*d);\n    }\n    double operator *(Point p)\n    {\n        return add(x*p.x,y*p.y);//外积\n    }\n    double operator ^(Point p) //内积\n    {\n        return add(x*p.y,-y*p.x);\n    }\n    double det(Point p) //**不要也行\n    {\n        return add(x*p.y,-y*p.x);\n    }\n    double len()\n    {\n        return sqrt(add(x*x,y*y));\n    }\n};\nclass Line\n{\npublic:\n    Point s,e;\n    Line() {}\n    Line(Point s,Point e):s(s),e(e) {}\n};\nbool onSge(Line l,Point q)\n{\n    return ((l.s-q)^(l.e-q))==0&&((l.s-q)*(l.e-q))<=0;\n}\nPoint operator *(double d,Point p)\n{\n    return Point(p.x*d,p.y*d);\n}\nPoint getProject(Point p1,Point p2,Point q) //q 在直线p1,p2上的投影坐标\n{\n    double d1=1.0/(p2-p1).len();\n    Point ans=(q-p1)*(p2-p1)*(p2-p1)*d1*d1;\n    return ans+p1;\n}\nPoint getReflect(Point p1,Point p2,Point q) //q 关于直线p1 p2的 反射坐标\n{\n    return 2.0*getProject(p1,p2,q)-q;\n}\ndouble getDisPP(Point a,Point b) //两点之间距离\n{\n    return (b-a).len();\n}\ndouble getDisPL(Line l,Point p) //点到直线距离\n{\n    Point x=getProject(l.s,l.e,p);\n    return (p-x).len();\n}\ndouble getDisPS(Line l,Point p) //点到线段最短距离\n{\n    Point x=getProject(l.s,l.e,p);\n    if(onSge(l,x))\n        return (x-p).len();\n    else\n        return min((p-l.s).len(),(p-l.e).len());\n\n}\ndouble getDisSS(Line la,Line lb) //保证两线段不相交 isInterSS==false\n{\n    return min(min(getDisPS(la,lb.s),getDisPS(la,lb.e)),\n               min(getDisPS(lb,la.s),getDisPS(lb,la.e)));\n}\n\nint getDirPPP(Point p,Point p1,Point p2)\n{\n    return sgn((p1-p)^(p2-p));//1代表 p2在p1的逆时针方向  0共线 ，-1是p2在p1的顺时针方向\n}\nint getStatePP(Point p,Point p1,Point p2) //返回 p2 关于p 在p1的什么方向\n{\n    int a=sgn((p1-p)^(p2-p));\n    int b=sgn((p1-p)*(p2-p));\n    if(a>0) //\n    {\n        puts(\"COUNTER_CLOCKWISE\");\n    }\n    else if(a<0)\n    {\n        puts(\"CLOCKWISE\");\n    }\n    else if(b<0)\n    {\n        puts(\"ONLINE_BACK\");\n    }\n    else if(b>0&&sgn((p1-p)*(p2-p1))>0)\n    {\n        puts(\"ONLINE_FRONT\");\n    }\n    else\n    {\n        puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}\nbool isInterSS(Line la,Line lb) //线段是否想交\n{\n    int d1=getDirPPP(lb.s,lb.e,la.s);\n    int d2=getDirPPP(lb.s,lb.e,la.e);\n    int d3=getDirPPP(la.s,la.e,lb.s);\n    int d4=getDirPPP(la.s,la.e,lb.e);\n    if(d1*d2<0&&d3*d4<0)\n        return true;\n    else if(d1==0&&onSge(lb,la.s))\n        return true;\n    else if(d2==0&&onSge(lb,la.e))\n        return true;\n    else if(d3==0&&onSge(la,lb.s))\n        return true;\n    else if(d4==0&&onSge(la,lb.e))\n        return true;\n    else\n        return false;\n\n}\nint getStateLL(Line la,Line lb) //两个直线 垂直，相交或者平行\n{\n    if(sgn((la.e-la.s)^(lb.e-lb.s))==0)\n    {\n        return 2;//平行\n    }//两向量平行 内积为0\n    else if(sgn((la.e-la.s)*(lb.e-lb.s))==0)\n    {\n        return 1;//垂直\n    }\n    else return 0;\n}\ntypedef Point P;\nPoint getInterLL(Point p1,Point p2,Point q1, Point q2) //得到直线交点\n{\n    return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));\n}\ndouble getAreaPolygon(Point p[],int n) //下标从0开始  计算多边形面积\n{\n    double res=0.0;\n    for(int i=0; i<n; ++i)\n        res+=(p[i]^p[(i+1)%n])/2;\n    return res;\n}\nPoint PA[110000];\nbool _cmp(Point p1,Point p2)//相对于pa[0]的\n{\n    double tmp=(p1-PA[0])^(p2-PA[0]);\n    if(sgn(tmp)>0) return true;\n    else if(sgn(tmp)==0 &&(PA[0]-p1).len()>(PA[0]-p2).len())//如果奇角相同 距离远的排在前面\n        return true;\n    else return false;\n}\nvoid sortPolarAngle(Point PA[],int n)//对数组进行极角排序  点将逆时针排序 WA\n{\n    Point p0=PA[0];\n    int k=0;\n    /* 找到最下边的一个点 靠左的一个点*/\n    for(int i=1; i<n; ++i)\n    {\n        if((p0.y>PA[i].y)||(p0.y==PA[i].y&&p0.x>PA[i].x))\n        {\n            p0=PA[i];\n            k=i;\n        }\n    }\n    swap(PA[k],PA[0]);\n    sort(PA+1,PA+n,_cmp);\n    return ;\n}\n//判断是否为凸包\n//允许共线边\n//点可以是顺时针给出也可以是逆时针给出\n//点的编号为0~n-1\nbool isConvex(Point poly[],int n)\n{\n    bool s[3];\n    memset(s,false,sizeof(s));\n    for(int i=0; i<n; ++i)\n    {\n        s[sgn( (poly[(i+1)%n]-poly[i]) ^ (poly[(i+2)%n]-poly[i]) )+1]=true;\n        if(s[0]&&s[2]) return false;//拐的方向不同\n    }\n    return true;\n}\n// 3 点上\n// 2 边上\n// 1 内部\n// 0 外部\nint getStatePolygonP(Point p[],int n,Point q)\n{\n    for(int i = 0; i < n; i++)\n    {\n        if(p[i].x==q.x&&p[i].y==q.y)return 3;\n    }\n\n    for(int i = 0; i < n; i++)\n    {\n        int j=(i+1)%n;\n        if(onSge(Line(p[j],p[i]),q))return 2;\n    }\n    int cnt = 0;\n    for(int i = 0 ; i < n; i++)\n    {\n        int j=(i+1)%n;\n        int k = sgn((q-p[j])^(p[i]-p[j]));\n        int u = sgn(p[i].y-q.y);\n        int v = sgn(p[j].y-q.y);\n        if(k > 0 && u < 0 && v >= 0)    cnt++;\n        if(k < 0 && v < 0 && u >= 0)    cnt--;\n    }\n    return cnt != 0;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0; i<n; ++i)\n    {\n        scanf(\"%lf%lf\",&PA[i].x,&PA[i].y);\n    }\n    int m;\n    scanf(\"%d\",&m);\n    while(m--)\n    {\n        Point q;\n        scanf(\"%lf%lf\",&q.x,&q.y);\n         int sta=getStatePolygonP(PA,n,q);\n         if(sta==3||sta==2)\n            puts(\"1\");\n         else if(sta==1)\n            puts(\"2\");\n         else\n            puts(\"0\");\n    }\n    return 0;\n}\n//double getDistanceSP(Segment s,Point p){\n//\tif(dot(calc_minus(s.p2,s.p1),calc_minus(p,s.p1)) < 0.0)return calc_len(calc_minus(p,s.p1));\n//\tif(dot(calc_minus(s.p1,s.p2),calc_minus(p,s.p2)) < 0.0)return calc_len(calc_minus(p,s.p2));\n//\treturn getDistanceLP(s,p);\n//}\n/*\n\n5\n0 0 1 1 2 2  2 3\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\nusing Polygon=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nenum {\n    ONLINE_FRONT=-2,\n    CLOCKWISE,\n    ON_SEGMENT,\n    COUNTER_CLOCKWISE,\n    ONLINE_BACK,\n};\n\nint ccwise(Point a, Point b, Point c) {\n    b -= a; c -= a;\n\n    if (cross_prod(b, c) > 0) {\n        return COUNTER_CLOCKWISE;\n    } else if (cross_prod(b, c) < 0) {\n        return CLOCKWISE;\n    } else if (dot_prod(b, c) < 0) {\n        return ONLINE_BACK;\n    } else if (norm(b) < norm(c)) {\n        return ONLINE_FRONT;\n    } else {\n        return ON_SEGMENT;\n    }\n}\n\nenum {\n    OUT_OF_LINE,\n    ON_LINE,\n    IN_LINE,\n};\n\nint contains(const Polygon &g, const Point &p) {\n    bool in=false;\n    size_t V=g.size();\n    for (size_t i=0; i<V; ++i) {\n        Point a=g[i]-p, b=g[(i+1)%V]-p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if ((imag(a) <= 0) && (imag(b) > 0) && (cross_prod(a, b) < 0))\n            in = !in;\n\n        if (abs(cross_prod(a, b)) < EPS && dot_prod(a, b) <= EPS)\n            return ON_LINE;\n    }\n    return in? IN_LINE : OUT_OF_LINE;\n}\n\nint main() {\n    size_t n;\n    scanf(\"%zu\", &n);\n\n    Polygon g(n);\n    for (size_t i=0; i<n; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        g[i] = Point(x, y);\n    }\n\n    size_t q;\n    scanf(\"%zu\", &q);\n\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p(x, y);\n\n        printf(\"%d\\n\", contains(g, p));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\nconst double PI = 3.141592653589793238;\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(const Point &p) const{ return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p) const{ return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n\tvoid show() { printf(\"%.10lf %.10lf\", x, y); }\n};\n\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\n\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>; \nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\ndouble getDistanceLP(Line, Point);\ndouble getDistance(Point, Point);\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn c1.r + c2.r >= getDistance(c1.c, c2.c);\n}\n\nbool intersect(Circle c, Line l) {\n\tdouble d = getDistanceLP(l, c.c);\n\treturn d <= c.r;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn absv(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / absv(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absv(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absv(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1)*(d1 / (d1 + d2));\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tPoint pr = project(l, c.c);\n\tVector lv = l.p2 - l.p1;\n\tVector le = lv / absv(lv);\n\tdouble base = sqrt(c.r*c.r - norm(c.c - pr));\n\treturn make_pair(pr + le*base, pr - le*base);\n}\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\nVector polar(double a, double r) {\n\treturn Point(a * cos(r), a * sin(r));\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = getDistance(c1.c, c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, a + t), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p; Point b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) <= 0) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS<b.y && cross(a, b)>EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n\t\n}\nint main() {\n\tint n, q, x, y;\n\tPolygon pg;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tpg.push_back(Point(x, y));\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tcout << contains(pg, Point(x, y)) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値, Polygonのメンバ変数\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\nclass Polygon;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    bool parallel(const Line&) const;\n    bool orthogonal(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\nclass Polygon {\n    std::vector<Point> point;\npublic:\n    Polygon() {}\n    const std::vector<Point>& vertex() const {return point;}\n    const Point& vertex(int i) const {return point.at(i);}\n    int size() const {return point.size();}\n    void add(const Point&);\n    double area() const;\n    bool convex() const;\n    bool include(const Point&) const;\n    bool on_edge(const Point&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return COUNTER_CLOCKWISE;\n    if(v1.cross(v2) < -EPS) return CLOCKWISE;\n    if(v1.dot(v2) < -EPS) return ONLINE_BACK;\n    if(v2.norm() - v1.norm() > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nbool Line::parallel(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dxl - dyl * dx) <= EPS;\n}\nbool Line::orthogonal(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dyl + dxl * dx) <= EPS;\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n// Polygon\nvoid Polygon::add(const Point& p) {point.push_back(p);}\ndouble Polygon::area() const {\n    double sum = 0.0;\n    for(int i = 0; i < size(); ++i) sum += vertex(i).cross(vertex((i+1) % size()));\n    return fabs(sum) / 2.0;\n}\nbool Polygon::convex() const {\n    POSITION direction = ONLINE_BACK;\n    for(int i = 1; i < size(); ++i) {\n        POSITION d = vertex(i - 1).ccw(vertex(i), vertex((i + 1) % size()));\n        if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) continue;\n        if(direction == ONLINE_BACK) direction = d;\n        if(direction != d) return false;\n    }\n    return true;\n}\nbool Polygon::include(const Point& p) const {\n    bool in = false;\n    for(int i = 0; i < size(); ++i) {\n        Point a = vertex(i) - p;\n        Point b = vertex((i + 1) % size()) - p;\n        if(a.y() > b.y()) std::swap(a, b);\n        if(a.y() <= 0.0 && 0 < b.y() && a.cross(b) < 0.0) in = !in;\n        if(fabs(a.cross(b)) <= EPS && a.dot(b) <= EPS) return true;\n    }\n    return in;\n}\nbool Polygon::on_edge(const Point& p) const {\n    for(int i = 0; i < size(); ++i) if(vertex(i).ccw(vertex((i + 1) % size()), p) == ON_SEGMENT) return true;\n    return false;\n}\n\nusing namespace std;\nint main() {\n    int n;\n    cin >> n;\n    Polygon polygon;\n    while(n--) {\n        double x, y;\n        cin >> x >> y;\n        polygon.add(Point(x, y));\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        if(polygon.on_edge(p)) cout << 1 << endl;\n        else if(polygon.include(p)) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#include <vector>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble norm(Vector a) {\n\treturn a.norm();\n}\n\ndouble abs(Vector a) {\n\treturn a.abs();\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn project(s, p)*2.0 - p;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\tint p1p2p3, p1p2p4, p3p4p1, p3p4p2;\n\tp1p2p3 = ccw(p1, p2, p3);\n\tp1p2p4 = ccw(p1, p2, p4);\n\tp3p4p1 = ccw(p3, p4, p1);\n\tp3p4p2 = ccw(p3, p4, p2);\n\n\tif (p1p2p3 == ON_SEGMENT) return true;\n\tif (p1p2p4 == ON_SEGMENT) return true;\n\tif (p3p4p1 == ON_SEGMENT) return true;\n\tif (p3p4p2 == ON_SEGMENT) return true;\n\tif (p1p2p3 == ONLINE_FRONT && p1p2p4 == ONLINE_BACK) return true;\n\tif (p1p2p3 == ONLINE_BACK && p1p2p4 == ONLINE_FRONT) return true;\n\tif (p1p2p3 == COUNTER_CLOCKWISE && p1p2p4 == CLOCKWISE && p3p4p1 == CLOCKWISE && p3p4p2 == COUNTER_CLOCKWISE) return true;\n\tif (p1p2p3 == CLOCKWISE && p1p2p4 == COUNTER_CLOCKWISE && p3p4p1 == COUNTER_CLOCKWISE && p3p4p2 == CLOCKWISE) return true;\n\treturn false;\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool intersect(Circle c, Line l) {\n\treturn (project(l, c.c) - c.c).norm() <= c.r*c.r;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\nVector rotate90(Vector v) {\n\tVector w;\n\tw.x = -v.y; w.y = v.x;\n\treturn w;\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tVector v = c1.c - c2.c;\n\tVector w = rotate90(v);\n\tdouble d = v.abs();\n\tdouble x = 0.5*(c2.r*c2.r - c1.r*c1.r + d*d) / d;\n\tdouble y = sqrt(c2.r*c2.r - x*x);\n\tVector v1, v2;\n\tv1 = c2.c + v*(x / d);\n\tv2 = w*(y / w.abs());\n\treturn make_pair(v1 + v2, v1 - v2);\n}\n\nint contains(Polygon g, Point p) {\n\tdouble minX = 20000.0, maxX = -20000.0, minY = 20000.0, maxY = -20000.0;\n\tfor (Polygon::iterator it = g.begin(); it != g.end(); it++) {\n\t\tif (it + 1 == g.end()) {\n\t\t\tif (ccw(*it, *(g.begin()), p) == ON_SEGMENT) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (ccw(*it, *(it + 1), p) == ON_SEGMENT) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tdouble x = (*it).x;\n\t\tdouble y = (*it).y;\n\t\tif (x > maxX) maxX = x;\n\t\tif (x < minX) minX = x;\n\t\tif (y > maxY) maxY = y;\n\t\tif (y < minY) minY = y;\n\t}\n\tif (p.x > maxX) return 0;\n\tif (p.x < minX) return 0;\n\tif (p.y > maxY) return 0;\n\tif (p.y < minY) return 0;\n\tSegment s;\n\ts.p1 = p;\n\ts.p2.x = maxX + 1.0; s.p2.y = p.y;\n\tint numOfCrossPoints = 0;\n\tfor (Polygon::iterator it = g.begin(); it != g.end(); it++) {\n\t\tSegment t;\n\t\tif (it + 1 == g.end()) {\n\t\t\tif (ccw(s.p1, s.p2, *it) == ON_SEGMENT) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tt.p1 = *it; t.p2 = *(g.begin());\n\t\t\tif (intersect(t,s)) {\n\t\t\t\tnumOfCrossPoints++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (ccw(s.p1, s.p2, *it) == ON_SEGMENT) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tt.p1 = *it; t.p2 = *(it + 1);\n\t\t\tif (intersect(t, s)) {\n\t\t\t\tnumOfCrossPoints++;\n\t\t\t}\n\t\t}\n\t}\n\tif (numOfCrossPoints % 2 == 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\treturn 2;\n\t}\n}\n\nint main() {\n\tPolygon g;\n\tPoint p;\n\tint n;\n\tcin >> n;\n\tg.resize(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> g[i].x >> g[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tcout << contains(g, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include  <bits/stdc++.h>\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\nusing namespace std;\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef struct {P s,t;} L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef vector <C> VC;\n\nconst D eps=1.0e-10;\nconst D pi=acos(-1.0);\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sq(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.t-l.s;}\ninline P input(){D x,y;cin >> x >> y; return P(x,y);}\n// ???????????¬????????¨???\n\n// ???????????? verify AOJ CGL_1_C\nenum CCW{\n\tLEFT = 1,\n\tRIGHT = 2,\n\tBACK = 4,\n\tFRONT = 8,\n\tMID = 16,\n\tON=FRONT|BACK|MID\n};\n\ninline int ccw(P base, P a, P b) {              //???a??¨???b???????????????????????????\n\ta -= base; b -= base;\n\tif (ep(a, b) > 0)\n\t\treturn LEFT;    // counter clockwise\n\tif (ep(a, b) < 0)\n\t\treturn RIGHT;   // clockwise\n\tif (ip(a, b) < 0)\n\t\treturn BACK;    // b--base--a on line\n\tif (norm(a) < norm(b))\n\t\treturn FRONT;   // base--a--b on line\n\t// otherwise\n\treturn MID;      // base--b--a on line  a??¨b????????????????????????\n}\n\n\n\n// ??????????????????\ninline B cmp_x(const P &a,const P &b){\n\treturn (abs(a.X-b.X)<eps ) ?  a.Y<b.Y : a.X<b.X;\n}  // base x\ninline B cmp_y(const P &a,const P &b){\n\treturn (abs(a.Y-b.Y)<eps ) ?  a.X<b.X : a.Y<b.Y;\n}  // base y\ninline B cmp_a(const P &a,const P &b){\n\treturn (abs(arg(a)-arg(b))<eps ) ?  norm(a) < norm(b) : arg(a)<arg(b);\n} // base arg\n\n// ????§???¢\n\n// Area\n// Verify AOJ 1100\nD area(VP pol){\n\tint n=pol.size();\n\tD sum=0.0;\n\trep(i,n){\n\t\tD x=pol[i%n].X-pol[(i+1)%n].X;\n\t\tD y=pol[i%n].Y+pol[(i+1)%n].Y;\n\t\tsum+=x*y;\n\t}\n\treturn abs(sum/2.0);\n}\n\nB is_convex(VP pol){\n\tint n=pol.size();\n\trep(i,n){\n\t\tP prev=pol[(i+n-1)%n];\n\t\tP next=pol[(i+1)%n];\n\t\tif(ccw(prev,pol[i],next)==RIGHT) return false;\n\t}\n\treturn true;\n}\n\n\n// Convex_hull\n// Verify AOJ 0063\n\nVP convex_hull(VP pol){\n\tint n=pol.size(),k=0;\n\tsort(pol.begin(),pol.end(),cmp_x);\n\tVP res(2*n);\n\n\t// down\n\trep(i,n){\n\t\t//????§???¢????????????????????????????????´??????<0????????´???????????¨\n\t\twhile( k>1 && ep(res[k-1]-res[k-2],pol[i]-res[k-1])<0) k--;\n\t\tres[k++]=pol[i];\n\t}\n\t// up\n\tfor(int i=n-2,t=k;i>=0;i--){\n\t\t//????§???¢????????????????????????????????´??????<0????????´???????????¨\n\t\twhile( k>t && ep(res[k-1]-res[k-2],pol[i]-res[k-1])<0) k--;\n\t\tres[k++]=pol[i];\n\t}\n\tres.resize(k-1);\n\treturn res;\n}\n\n\n// ????§???¢??????????????? ?????? 2 ?????? 1 ???????????? 0???(???????§???¢??????)\n//verify AOJ CGL_3-C\nint in_polygon(VP pol,P p){\n\tint n=pol.size();\n\tint res=0;\n\trep(i,n){\n\t\tif(ccw(pol[i],pol[(i+1)%n],p)==MID)\n\t\t\treturn 1;\n\t\tD vt=(p.Y-pol[i].Y)/(pol[(i+1)%n].Y-pol[i].Y);\n\t\tD dx=pol[(i+1)%n].X-pol[i].X;\n\t\tif((pol[i].Y<=p.Y)&&(p.Y< pol[(i+1)%n].Y)&&(p.X<pol[i].X+vt*dx))res++;\n\t\tif((pol[i].Y> p.Y)&&(p.Y>=pol[(i+1)%n].Y)&&(p.X<pol[i].X+vt*dx))res--;\n\t}\n\treturn res?2:0;\n}\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tVP pol;\n\trep(i,n) pol.push_back(input());\n\tint q;\n\tcin >> q;\n\trep(i,q){\n\t\tP point=input();\n\t\tcout << in_polygon(pol,point) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n#include <array>\n\nusing namespace std;\n\nconst double eps = 1e-10;\nconst double pi = atan2(0, -1);\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n  \n  static double arg( Vector v1, Vector v2 );\n  void print() { cout << fixed << setprecision(10) << x << \" \" << y << endl; }\n};\n\ndouble Vector::arg( Vector v1, Vector v2 )\n{\n  Vector vd = v2 - v1;\n  double a;\n  \n  if ( v1.norm() < eps || v2.norm() < eps )\n    return pi;\n  else\n    a = acos( ( v1.norm() + v2.norm() - vd.norm() ) / ( 2 * v1.abs() * v2.abs() ) );\n  \n  if ( cross( v1, v2 ) > 0 )\n    return a;\n  else\n    return -a;\n}\n\nclass Polygon\n{\npublic:\n  int n;\n  vector<Vector> pt;\n  Polygon(){}\n  Polygon( int n ) : n(n), pt(n) {}\n  int solve( Vector p );\n};\n\nint Polygon::solve( Vector p )\n{\n  double sum = 0;\n  Vector a, b;\n\n  for ( auto i = 0; i < n; ++i )\n    {\n      if ( i )\n        {\n          a = pt[i-1] - p;\n          b = pt[i] - p;\n        }\n      else\n        {\n          a = pt[n-1] - p;\n          b = pt[i] - p;\n        }\n\n      double r = Vector::arg( a, b );\n      if ( fabs( fabs( r ) - pi ) < eps )\n        {\n          cout << \"1\" << endl;\n          return 0;\n        }\n      else\n        sum += r;\n    }\n\n  if ( fabs( sum - 2 * pi ) < eps )\n    cout << \"2\" << endl;\n  else\n    cout << \"0\" << endl;\n  \n  return 0;\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n\n  Polygon g( n );\n  \n  for ( auto i = 0; i < n; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.pt[i] = Vector( x, y );\n    }\n  \n  int q;\n  cin >> q;\n  \n  for ( auto i = 0; i < q; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      g.solve( Vector(x, y) );\n    }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+10000.0);\n        if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+10000.0)==0.0)ans--;\n    }\n    if(ans%2==0)return 0;\n    else return 2;\n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n\n    \n    \n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            cout<<inside_and_outside_the_determination_of_the_polygon_and_point(n, p_xy, tx, ty)<<endl;\n\n\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\n\n#define INF 1e9\nconst double EPS = 1e-4;\ntypedef long long ll;\ntypedef complex<double> Point;\ntypedef vector<Point> VP;\n#define X real()\n#define Y imag()\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n#define LE(n,m) ((n) < (m) + EPS)\n\ndouble dot(Point a, Point b) {\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Point a, Point b) {\n  return a.X*b.Y - a.Y*b.X;\n}\n\n// ????§???¢????????¨??????\n// ?????????????????¨??????2????¢?????????????1????????¨??????0?????????\nint inPolygon(const VP& ps, Point p) {\n  int n = ps.size();\n  bool in = false;\n  rep (i, n) {\n    Point a = ps[i] - p;\n    Point b = ps[(i + 1) % n] - p;\n    if (EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 1;\n    if (a.Y > b.Y) swap(a,b);\n    if ((a.Y*b.Y < 0 || (a.Y*b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0)) in = !in;\n  }\n  return (in ? 2 : 0);\n}\n\nint main(void){\n    int n,q;\n    double x,y;\n    cin>>n;\n    VP g(n);\n    rep(i,n){\n        cin>>x>>y;\n        g[i] = {x,y};\n    }\n    cin>>q;\n    rep(i,q){\n    \tcin>>x>>y;\n    \tcout<<inPolygon(g,Point(x,y))<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\n\nstatic const int COUNTER_CLOCKWISE = 1; //??????????????¨??????\nstatic const int CLOCKWISE = -1;\nstatic const int ON_SEGMENT = 0;\nstatic const int ONLINE_FRONT = 2;\nstatic const int ONLINE_BACK = -2;\n\nint n;\n\nconst double EPS = 1e-10;\n\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tPoint operator / (double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tPoint orth() {\n\t\treturn Point(-y, x) / abs();\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint check(Vector v0, Vector v1) { //????????§??????\n\tdouble c = cross(v0, v1);\n\tif (equals(c, 0)) {\n\t\tif (dot(v0, v1) < 0) return ONLINE_BACK;\n\t\telse if (v1.norm() > v0.norm()) return ONLINE_FRONT;\n\t\telse return ON_SEGMENT;\n\t} else if (c > 0) {\n\t\treturn COUNTER_CLOCKWISE;\n\t} else {\n\t\treturn CLOCKWISE;\n\t}\n}\n\nclass Polygon {\npublic:\n\tvector<Point> Poly;\n\n\tvoid contain(Point p) {\n\t\tbool x = false;\n\t\tfor (int i = 0; i < Poly.size(); i++) {\n\t\t\tVector a = Vector((Poly[i] - p).x, (Poly[i] - p).y);\n\t\t\tVector b = Vector((Poly[(i + 1) % n] - p).x, (Poly[(i + 1) % n] - p).y);\n\t\t\tif (equals(cross(a, b), 0) && dot(a, b) <= 0) {\n\t\t\t\tcout << 1 << endl;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (a.y > b.y) swap(a, b);\n\t\t\tif (a.y <= 0 && b.y > 0 && cross(a, b) > 0) x = !x;\n\t\t}\n\t\tif (x) cout << 2 <<endl;\n\t\telse cout << 0 << endl;\n\t}\n};\n\n\nint main() {\n\tint q;\n\tcin >> n;\n\tint x, y;\n\tPolygon P;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tP.Poly.push_back(Point(x, y));\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++)\t{\n\t\tcin >> x >> y;\n\t\tP.contain(Point(x, y));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\nconst double EPS = 1e-20;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nconst P pINF(sqrt(2) * INF, sqrt(21) * INF);\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint polygonPointContainment(vector<P> &G, P p){\n    int cross;\n    L infS(p, pINF);\n    for (int i=0;i<G.size()-1;i++){\n        L s(G[i], G[i+1]);\n        if(intersectSP(s, p)){\n            return 1;\n        }\n        if(intersectSS(infS, s)){\n            cross++;\n        }\n    }\n    if(cross%2){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int n, q;\n    cin >> n;\n    vector<P> G;\n    P p;\n    for (int i=0;i<n;i++){\n        cin >> p.real() >> p.imag();\n        G.push_back(p);\n    }\n    G.push_back(G[0]);\n\n    cin >> q;\n    for (int i=0;i<q;i++){\n        cin >> p.real() >> p.imag();\n        cout << polygonPointContainment(G, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n\nusing namespace std;\n\ntemplate<typename T> bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<typename T> bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n// 実数\nusing Real = double;\n// 点\nusing Point = complex<Real>;\nconst Real EPS = 1e-10, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point& p, const Real& d) {\n    return Point(real(p) * d, imag(p) * d);\n}\n\n// 点の入力\nistream& operator>>(istream& is, Point& p) {\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//// 点の出力\n//ostream &operator<<(ostream &os, Point &p) {\n//  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n//}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point& p) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n    return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n    return (d * PI / 180.0);\n}\n\n// a-b-c の角度のうち小さい方を返す\nReal get_angle(const Point& a, const Point& b, const Point& c) {\n    const Point v(b - a), w(c - a);\n    Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n    if (alpha > beta) swap(alpha, beta);\n    Real theta = (beta - alpha);\n    return min(theta, 2 * acos(-1) - theta);\n}\n\n// ソート x座標が小さい順に並べる x座標が同じならy座標が小さい順\nnamespace std {\n    bool operator<(const Point& a, const Point& b) {\n        return !eq(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();\n    }\n}\n\n// 2点を通る直線\nstruct Line {\n    Point a, b;\n\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if (eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n        else a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream& operator<<(ostream& os, Line& p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream& operator>>(istream& is, Line& a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// 2点を結ぶ線分\nstruct Segment : Line {\n    Segment() = default;\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\nstruct Circle {\n    // 中心\n    Point p;\n    // 半径\n    Real r;\n\n    Circle() = default;\n\n    Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// 点集合\nusing Points = vector< Point >;\n// ポリゴン 反時計回り\nusing Polygon = vector< Point >;   // 注意!! 凸多角形は反時計回りに与える.(保証されない場合は面積が負なら reverse をかける)\n// 線分集合\nusing Segments = vector< Segment >;\n// 直線集合\nusing Lines = vector< Line >;\n// 円集合\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point& a, const Point& b) {\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point& a, const Point& b) {\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\n// 点の回転方向\n//          +1\n//          \n//  +2   a   0   b  -2\n//\n//          -1\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n    if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n    return 0;                         // \"ON_SEGMENT\"\n}\n\n// 線分同士の交差判定\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment& s, const Segment& t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nReal CalcDist(const Segment& s, const Point& p) {\n    double t = dot(s.b - s.a, p - s.a) / norm(s.b - s.a);\n    Point c = s.a + (s.b - s.a) * t;\n    Real res = 1000000.0;\n    if (t > -EPS && t < 1.0 + EPS) return sqrt(norm(p - c));\n    chmin(res, sqrt(norm(p - s.b)));\n    chmin(res, sqrt(norm(p - s.a)));\n    return res;\n}\n\nint InPolygon(Point& p, const Polygon& pol) {\n    int n = pol.size();\n\n    bool is_in = false;\n    for(int i = 0; i < n; ++i) {\n        Point a = pol[i] - p;\n        Point b = pol[(i + 1) % n] - p;\n\n        //　辺上にあるか\n        if (eq(cross(a, b), 0) && dot(a, b) < EPS) return 1;\n        // 交わっているか\n        if (a.imag() < b.imag()) swap(a, b);\n        if (a.imag() > EPS && b.imag() < EPS && cross(a, b) > EPS) is_in = !is_in;\n    }\n\n    return (is_in) ? 2 : 0;\n}\n\nint main() {\n\n    int n;\n    cin >> n;\n\n    Polygon polygon;\n    for (int i = 0; i < n; ++i) {\n        Point p;\n        cin >> p;\n        polygon.emplace_back(p);\n    }\n\n    int q;\n    cin >> q;\n    vector<int> ans(q, 2);\n    for (int i = 0; i < q; ++i) {\n        Point p;\n        cin >> p;\n\n        ans[i] = InPolygon(p, polygon);\n    }\n\n    for (auto res : ans) cout << res << endl;\n\n    //cout << fixed << setprecision(1) << ans << endl;\n}\n\n/*\n4\n0 0\n3 1\n3 3\n0 3\n1\n4 1\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <vector>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-8;\nconst db inf = 1e20;\nconst db pi = acos(-1.0);\nconst int maxp = 1010;\n// Compares a double to zero\nint sgn(db x){\n    if(fabs(x) < eps) return 0;\n    if(x < 0) return -1;\n    return 1;\n}\n//square of a double \ninline db sqr(db x){return x*x;}\n\nstruct Point{\n    db x, y;\n    Point(){}\n    Point(db x, db y):x(x), y(y){}\n    void input(){\n        //如果为longdouble则需要改为Lf\n        scanf(\"%lf%lf\",&x, &y);\n    }\n    void output(){\n        printf(\"%.2f %.2f\\n\", x,y);\n    }\n    bool operator == (Point b)const {\n        return sgn(x-b.x) == 0 && sgn(y-b.y) == 0;\n    }\n    bool operator < (Point b)const{\n        return sgn(x-b.x) == 0 ? sgn(y - b.y) < 0 : x < b.x;\n    }\n    Point operator - (const Point &b)const{\n        return Point(x - b.x, y - b.y);\n    }\n    //叉积\n    db operator ^ (const Point &b)const{\n        return x * b.y - y * b.x;\n    }\n    //点积\n    db operator * (const Point &b)const{\n        return x * b.x + y * b.y;\n    }\n    // 返回长度\n    db len(){\n        return hypot(x, y);\n    } \n    // 返回长度平方\n    db len2(){\n        return x * x + y * y;\n    }\n    //返回两点距离 \n    db distance(Point p){\n        return hypot(x - p.x, y - p.y);\n    }\n    Point operator + (const Point &b)const{\n        return Point(x + b.x, y + b.y);\n    }\n    Point operator * (const db &k) const {\n        return Point(x * k,  y * k);\n    }\n    Point operator /(const db &k)const {\n        return Point(x / k, y / k);\n    }\n    // 计算 pa 和 pb 的夹角\n    // 就是求这个点看 a，b所成的夹角\n    // LightOJ 1203\n    db rad(Point a, Point b){\n        Point p = *this;\n        return fabs(atan2( fabs((a-p)^(b-p)), (a-p) * (b-p) ));\n    }\n    // 化为长度为 r 的向量\n    Point trunc(db r){\n        db l = len();\n        if(!sgn(l)) return *this;\n        r /= l;\n        return Point(x*r, y*r);\n    }\n    // 逆时针旋转90度\n    Point rotleft(){\n        return Point(-y, x);\n    }\n    // 顺时针转90度\n    Point rotright(){\n        return Point(y, -x);\n    }\n    //绕点 p 逆时针旋转 angle\n    Point rotate(Point p, db angle){\n        Point v = (*this) - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n};\n\n\nstruct Line{\n    Point s, e;\n    Line(){}\n    Line(Point s, Point e):s(s),e(e){}\n    bool operator == (Line v){\n        return (s == v.s) && (e == v.e);\n    }\n    // 根据一个点和倾斜角angle确定直线， 0 <= angle < pi\n    Line (Point p, db angle){\n        s = p;\n        if(sgn(angle - pi / 2) == 0){\n            e = (s + Point(0, 1));\n        }else{\n            e = (s + Point(1, tan(angle)));\n        }\n    }\n\n    // ax + by + c = 0\n    Line (db a, db b, db c){\n        if(sgn(a) == 0){ //  y = -c / b\n            s = Point(0, -c/b);\n            e = Point(1, -c/b);\n        } else if (sgn(b) == 0){ // x = -c / a\n            s = Point(-c/a, 0);\n            e = Point(-c/a, 1);\n        }else{//(0, -c/b), (1, (-c-a)/b)\n            s = Point(0, -c/b);\n            e = Point(1, (-c-a)/b);\n        }\n    }\n    void input(){\n        s.input();\n        e.input();\n    }\n    void adjust(){\n        if(e < s) swap(s, e);\n    }\n    db length(){\n        return s.distance(e);\n    }\n    // 返回直线倾斜角 0 <= angle < pi\n    db angle(){\n        db k = atan2(e.y - s.y, e.x - s.x);\n        if(sgn(k) < 0) k += pi;\n        if(sgn(k - pi) == 0) k -= pi;\n        return k;\n    }\n    /*\n        点和直线的关系\n        1 在左侧\n        2 在右侧\n        3 在直线上\n    */\n    int relation(Point p){\n        int c = sgn((p-s) ^ (e-s));\n        if(c < 0) return 1;\n        else if(c > 0) return 2;\n        else return 3;\n    }\n    // 点在线段上的判断，包括端点 第二个判断改为小于表示不包括端点\n    bool pointonseg(Point p){\n        return sgn((p-s)^(e-s)) == 0 && sgn((p-s) * (p-e)) <= 0;\n    }\n    // 两向量平行（对应直线平行或重合）\n    bool parallel(Line v){\n        return sgn((e - s) ^ (v.e - v.s)) == 0;\n    }\n    /*\n        两线段相交判断\n        2 规范相交\n        1 非规范相交\n        0 不相交\n    */\n\n    int segcrosseg(Line v){\n        int d1 = sgn((e - s) ^ (v.s - s));  //v.s 在 线段的哪一侧\n        int d2 = sgn((e - s) ^ (v.e - s));  //v.e 在 线段的哪一侧\n        int d3 = sgn((v.e - v.s) ^ (s - v.s));  \n        int d4 = sgn((v.e - v.s) ^ (e - v.s));\n        if((d1^d2) == -2 && (d3^d4) == -2) return 2; // 跨立实验满足 一个是-1一个是1\n\n        // 1. v.s在线段上 || v.e 在线段上 || s 在另外一条线段上 || e在另外一条线段上\n        return (d1 == 0 &&  sgn((v.s - s) * (v.s - e)) <= 0) ||\n            (d2 == 0 && sgn((v.e - s) * (v.e - e)) <= 0) ||\n            (d3 == 0 && sgn((s - v.s) * (s - v.e)) <= 0) || \n            (d4 == 0 && sgn((e - v.s) * (e - v.e)) <= 0);\n    }\n    /*\n        直线与线段相交判断\n        *this line -v seg \n        2 规范相交\n        1 非规范相交\n        0 不相交\n    */\n    int linecorssseg(Line v){ // v是线段\n        int d1 = sgn((e - s) ^ (v.s - s));\n        int d2 = sgn((e - s) ^ (v.e - s));\n        if((d1 ^ d2) == -2) return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n    /*\n        两直线关系\n        0 平行\n        1 重合\n        2 相交\n    */\n    int linecrossline(Line v){\n        // 如果平行，则看点是否在直线上\n        if((*this).parallel(v)) return v.relation(s) == 3;\n        return 2;\n    }\n\n    /*\n        求两直线的交点\n        要保证两直线不平行或重合\n    */\n    Point crosspoint(Line v){\n        db a1 = (v.e - v.s) ^ (s - v.s);\n        db a2 = (v.e - v.s) ^ (e - v.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    // 点到直线的距离\n    db dispointtoline(Point p){\n        return fabs((p-s) ^ (e-s)) / length();\n    }\n\n    // 点到线段的距离\n    db dispointtoseg(Point p){\n        if(sgn((p-s)*(e-s)) < 0 || sgn((p-e) * (s-e)) < 0)\n            return min(p.distance(s), p.distance(e));\n        return dispointtoline(p);\n    } \n    /*\n        返回线段到线段的距离\n        前提是两线段不相交，相交距离就是 0 了\n    */\n    db dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s), dispointtoseg(v.e)), min(v.dispointtoseg(s), v.dispointtoseg(e)));\n    }\n\n    /*\n        返回 p 在直线上的投影\n    */\n    Point lineprog(Point p){\n        return s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n    }\n    // 返回点 p 关于直线的对称点\n    Point symmetrypoint(Point p){\n        Point q = lineprog(p);\n        return Point(2*q.x - p.x, 2 * q.y - p.y);\n    }\n};\n\nstruct circle{\n    Point p;\n    db r;\n    circle(){}\n    circle(Point p, db r):p(p), r(r){}\n    void input(){\n        p.input();\n        // 注意类型\n        scanf(\"%lf\", &r);\n    }\n    circle(db x, db y, db r){\n        p = Point(x, y);\n        this->r = r;\n    }\n    /*\n        三角形的外接圆\n        需要Point 的 + / rotate() 以及 Line 的crosspoint()\n        利用两条边的中垂线得到圆心\n        UVA 12304\n    */\n    circle(Point a, Point b, Point c){\n        Line u = Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));\n        Line v = Line((b+c)/2,((b+c)/2)+((c-b).rotleft()));\n        p = u.crosspoint(v);\n        r = p.distance(a);\n    }\n    /*\n        三角形的内切圆\n        bool t 没有作用，只是为了和上面外接圆函数区别\n        UVA 12304\n    */\n    circle(Point a, Point b, Point c, bool t){\n        Line u, v;\n        // u 为角 a 的平分线\n        db m  = atan2(b.y-a.y, b.x-a.x), n = atan2(c.y - a.y, c.x - a.x);\n        u.s = a;\n        u.e = u.s + Point(cos((n+m)/2), sin((n+m)/2));\n        // v 为角 b 的平分线\n        m = atan2(a.y-b.y, a.x-b.x), n = atan2(c.y-b.y, c.x-b.x);\n        v.s = b;\n        v.e = v.s + Point(cos((n+m)/2), sin((n+m)/2));\n        p = u.crosspoint(v);\n        r = Line(a,b).dispointtoseg(p);\n    }\n    // 通过圆心角确定圆上的一个点\n    Point point(double a){\n        return Point(p.x + cos(a) * r, p.y + sin(a) * r);\n    }\n    bool operator == (circle v){\n        return (p == v.p) && sgn(r - v.r) == 0;\n    }\n    bool operator < (circle v)const{\n        return ((p<v.p) || (p == v.p) && sgn(r - v.r) < 0);\n    }\n    // 面积\n    db area(){\n        return pi * r * r;\n    }\n    // 周长\n    db circumference(){\n        return 2 * pi * r;\n    }\n    /*\n        点和圆的关系\n        0 圆外\n        1 圆上\n        2 圆内\n    */\n   int relation(Point b){\n       db dst = b.distance(p);\n       if(sgn(dst - r) < 0) return 2;\n       else if(sgn(dst - r) == 0) return 1;\n       return 0;\n   }\n   /*\n        线段和圆的关系\n        比较的是圆心到线段的距离和半径的关系\n        2 交\n        1 切\n        0 不交\n   */\n    int relation(Line v){\n        db dst = v.dispointtoseg(p);\n        if(sgn(dst - r) < 0) return 2;\n        else if(sgn(dst - r) == 0) return 1;\n        return 0;\n    }\n    int relationline(Line v){\n        db dst = v.dispointtoline(p);\n        if(sgn(dst - r) < 0) return 2;\n        else if(sgn(dst - r) == 0) return 1;\n        return 0;\n    }\n    /*\n        两圆的关系\n        5 相离\n        4 外切\n        3 相交\n        2 内切\n        1 内含\n    */\n    int relationcircle(circle v){\n        db d = p.distance(v.p);\n        if(sgn(d - r - v.r) > 0) return 5;\n        if(sgn(d - r - v.r) == 0) return 4;\n        db l = fabs(r - v.r);\n        if(sgn(d - r - v.r) < 0 && sgn(d - l) > 0) return 3;\n        if(sgn(d - l) == 0) return 2;\n        if(sgn(d - l) < 0) return 1;\n    }\n    /*\n        求两个圆的交点，返回0表示没有交点，返回1是一个交点，2是两个交点\n    */\n    int pointcrosscircle(circle v, Point &p1, Point &p2){\n        int rel = relationcircle(v);\n        if(rel == 1 || rel == 5) return 0;\n        db d = p.distance(v.p);\n        db l = (d * d + r * r - v.r * v.r) / (2 * d);\n        db h = sqrt(r * r - l * l);\n        Point tmp = p + (v.p - p).trunc(l);\n        p1 = tmp + ((v.p - p).rotleft().trunc(h));\n        p2 = tmp + ((v.p - p).rotright().trunc(h));\n        if(rel == 2 || rel == 4)return 1;\n        return 2;\n    }\n    // 求直线与圆的交点，返回交点个数\n    int pointcrossline(Line v, Point &p1, Point &p2){\n        if(!(*this).relationline(v)) return 0;\n        Point a = v.lineprog(p);\n        db d = v.dispointtoline(p);\n        d = sqrt(r * r - d * d);\n        if(sgn(d) == 0){\n            p1 = a;\n            p2 = a;\n            return 1;\n        }\n        p1 = a + (v.e - v.s).trunc(d);\n        p2 = a - (v.e - v.s).trunc(d);\n        return 2;\n    }\n    // 得到 通过a，b两点，半径为r1的两个圆\n    int getcircle(Point a, Point b, db r1, circle &c1, circle &c2){\n        circle x(a, r1), y(b, r1);\n        int t = x.pointcrosscircle(y, c1.p, c2.p);\n        if(!t) return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n    // 得到与直线 u 相切，过点 q， 半径为 r1 的圆\n    int getcircle(Line u, Point q, db r1, circle &c1, circle &c2){\n        db dis = u.dispointtoline(q);\n        if(sgn(dis - r1 * 2) > 0) return 0;\n        if(sgn(dis) == 0){\n            c1.p = q + ((u.e - u.s).rotleft().trunc(r1));\n            c2.p = q + ((u.e - u.s).rotright().trunc(r1));\n            c1.r = c2.r = r1;\n            return 2;\n        }\n        Line u1 = Line((u.s + (u.e - u.s).rotleft().trunc(r1)), (u.e + (u.e - u.s).rotleft().trunc(r1)));\n        Line u2 = Line((u.s + (u.e - u.s).rotright().trunc(r1)), (u.e + (u.e - u.s).rotright().trunc(r1)));\n        circle cc = circle(q, r1);\n        Point p1, p2;\n        if(!cc.pointcrossline(u1, p1, p2)) cc.pointcrossline(u2, p1, p2);\n        c1 = circle(p1, r1);\n        if(p1 == p2){\n            c2 = c1;\n            return 1;\n        }\n        c2 = circle(p2, r1);\n        return 2;\n    }\n    // 同时与直线u，v相切，半径为r1的圆 \n    int getcircle(Line u, Line v, db r1, circle &c1, circle &c2, circle &c3, circle &c4){\n        if(u.parallel(v)) return 0;\n        Line u1 = Line(u.s + (u.e - u.s).rotleft().trunc(r1), u.e + (u.e - u.s).rotleft().trunc(r1));\n        Line u2 = Line(u.s + (u.e - u.s).rotright().trunc(r1), u.e + (u.e - u.s).rotright().trunc(r1));\n        Line v1 = Line(v.s + (v.e - v.s).rotleft().trunc(r1), v.e + (v.e - v.s).rotright().trunc(r1));\n        Line v2 = Line(v.s + (v.e - v.s).rotright().trunc(r1), v.e + (v.e - v.s).rotright().trunc(r1));\n        \n        c1.r = c2.r = c3.r = c4.r = r1;\n        c1.p = u1.crosspoint(v1);\n        c2.p = u1.crosspoint(v2);\n        c3.p = u2.crosspoint(v1);\n        c4.p = u2.crosspoint(v2);\n        return 4;\n    }\n    // 同时与不相交圆 cx, cy 相切，半径为r1的圆\n    int getcircle(circle cx, circle cy, db r1, circle &c1, circle &c2){\n        circle x(cx.p, r1+cx.r), y(cy.p, r1+cy.r);\n        int t = x.pointcrosscircle(y, c1.p, c2.p);\n        if(!t) return 0;\n        c1.r = c2.r = r1;\n        return t;\n    }\n    // 过一点作圆的切线 (先判断点和圆的关系)\n    int tangentline(Point q, Line &u, Line &v){\n        int x = relation(q);\n        if(x == 2) return 0; //圆内\n        if(x == 1){ //圆上\n            u = Line(q, q+(q-p).rotleft());\n            v = u;\n            return 1;\n        }\n        db d = p.distance(q);\n        db l = r * r / d;\n        db h = sqrt(r * r - l * l);\n        u = Line(q, p + ((q - p).trunc(l) + (q-p).rotleft().trunc(h)));\n        v = Line(q, p + (q - p).trunc(l) + (q - p).rotright().trunc(h));\n        return 2;\n    }\n    // 求两圆相交的面积\n    db areacircle(circle v){\n        int rel = relationcircle(v);\n        if(rel >= 4) return 0.0;\n        if(rel <= 2) return min(area(), v.area()); //内部\n        db d = p.distance(v.p);\n        db hf = (r + v.r + d) / 2.0;\n        db ss = 2 * sqrt(hf*(hf - r) * (hf - v.r) * (hf - d));\n        db a1 = acos((r * r + d * d - v.r * v.r) / (2.0 * r * d));\n        a1 = a1 * r * r;\n        db a2 = acos((v.r * v.r + d * d - r * r) / (2.0 * v.r * d));\n        a2 = a2 * v.r * v.r;\n        return a1 + a2 - ss;\n    }\n    // 求圆和三角形 pab 的相交面积\n    // POJ3675 HDU3982 HDU2892\n    db areatriangle(Point a, Point b){\n        if(sgn((p-a)^(p-b)) == 0)return 0.0;\n        Point q[5];\n        int len = 0;\n        q[len++] = a;\n        Line l(a, b);\n        Point p1, p2;\n        if(pointcrossline(l, q[1], q[2]) == 2){\n            if(sgn((a-q[1]) * (b-q[1])) < 0) q[len++] = q[1];\n            if(sgn((a-q[2]) * (b-q[2])) < 0) q[len++] = q[2];\n        }\n        q[len++] = b;\n        if(len == 4 && sgn((q[0] - q[1]) * (q[2] - q[1])) > 0) swap(q[1], q[2]);\n        db res = 0;\n        for(int i=0;i<len-1;i++){\n            if(relation(q[i]) == 0 || relation(q[i+1]) == 0){\n                db arg = p.rad(q[i], q[i+1]);\n                res += r * r * arg / 2.0;\n            }else{\n                res += fabs((q[i] - p) ^ (q[i+1] - p)) / 2.0;\n            }\n        }\n        return res;\n    }\n};\n// 多边形\nstruct polygon{\n    int n;\n    Point p[maxp];\n    Line l[maxp];\n    void input(int n){\n        this->n=n;\n        for(int i=0;i<n;i++) p[i].input();\n    }\n    void add(Point q){\n        p[n++] = q;\n    }\n    void getline(){\n        for(int i=0;i<n;i++){\n            l[i] = Line(p[i],p[(i+1)%n]);\n        }\n    }\n    struct cmp{\n        Point p;\n        cmp(const Point &p0){p = p0;}\n        bool operator () (const Point &aa, const Point &bb){\n            Point a = aa, b = bb;\n            int d = sgn((a-p)^(b-p));\n            if(d == 0){\n                return sgn(a.distance(p) - b.distance(p)) < 0;\n            }\n            return d > 0;\n        }\n    };\n    /*\n        进行极角排序\n        首先找打最左下角的点\n        需要重载好Point的 < 操作符\n    */\n    void norm(){\n        Point mi = p[0];\n        for(int i=1;i<n;i++) mi = min(mi, p[i]);\n        sort(p, p+n, cmp(mi));\n    }\n    /*\n        得到凸包 凸包点编号0 ~ n-1\n        \n    */\n    void getconvex(polygon &convex){\n        sort(p, p+n);\n        convex.n = n;\n        for(int i=0;i<min(n, 2);i++){\n            convex.p[i] = p[i];\n        }\n        if(convex.n == 2 && (convex.p[0] == convex.p[1])) convex.n --;\n        if(n <= 2) return;\n        int &top = convex.n;\n        top = 1;\n        for(int i=2;i<n;i++){\n            while(top && sgn((convex.p[top] - p[i]) ^ (convex.p[top-1] - p[i])) <= 0)\n                top--;\n            convex.p[++top] = p[i];\n        }\n        int temp = top;\n        convex.p[++top] = p[n-2];\n        for(int i=n-3;i>=0;i--){\n            while(top != temp && sgn((convex.p[top] - p[i]) ^ (convex.p[top-1] - p[i])) <= 0)\n                top--;\n            convex.p[++top] = p[i];\n        }\n        if(convex.n == 2 && (convex.p[0] == convex.p[1])) convex.n --;\n        convex.norm();\n    }\n    void Graham(polygon &convex){\n        norm();\n        int &top = convex.n;\n        top = 0;\n        if(n == 1){\n            top = 1;\n            convex.p[0] = p[0];\n            return ;\n        }\n        if(n == 2){\n            top = 2;\n            convex.p[0] = p[0];\n            convex.p[1] = p[1];\n            if(convex.p[0] == convex.p[1]) top--;\n            return;\n        }\n        convex.p[0] = p[0];\n        convex.p[1] = p[1];\n        top = 2;\n        for(int i=2;i<n;i++){\n            while(top > 1 && sgn((convex.p[top-1] - convex.p[top-2]) ^ (p[i]-convex.p[top-2])) <= 0) \n                top--;\n            convex.p[top++] = p[i];\n        }\n        if(convex.n == 2 && (convex.p[0] == convex.p[1])) convex.n--;\n    }\n    // 判断是不是凸的\n    bool isconvex(){\n        bool s[3];\n        memset(s, false, sizeof s);\n        for(int i=0;i<n;i++){\n            int j = (i + 1) % n;\n            int k = (j + 1) % n;\n            s[sgn((p[j] - p[i]) ^ (p[k] - p[i])) + 1] = true;\n            if(s[0] && s[2]) return false;\n        }\n        return true;\n    }\n    /*\n        判断点和任意多边形的关系\n        3 点上\n        2 边上\n        1 内部\n        0 外部\n    */\n    int relationpoint(Point q){\n        for(int i=0;i<n;i++){\n            if(p[i] == q) return 3; \n        }\n        getline();\n        for(int i=0;i<n;i++){\n            if(l[i].pointonseg(q)) return 2;\n        }\n        int cnt = 0;\n        for(int i=0;i<n;i++){\n            int j = (i + 1) % n;\n            int k = sgn((q-p[j])^(p[i]-p[j]));\n            int u = sgn(p[i].y - q.y);\n            int v = sgn(p[j].y - q.y);\n            if(k > 0 && u < 0 && v >= 0) cnt ++;\n            if(k < 0 && v < 0 && u >= 0) cnt --;\n        }\n        return cnt != 0;\n    }\n    // 得到周长\n    db getcircumference(){\n        db sum = 0;\n        for(int i=0;i<n;i++){\n            sum += p[i].distance(p[(i+1)%n]);\n        }\n        return sum;\n    }\n    // 得到面积\n    db getarea(){\n        db sum = 0;\n        // 以原点为划分点\n        for(int i=0;i<n;i++){\n            sum += (p[i]^p[(i+1)%n]);\n        }\n        return fabs(sum)/2;\n    }\n}poly;\n\nint main(){\n    scanf(\"%d\", &poly.n);\n    poly.input(poly.n);\n    int q;scanf(\"%d\", &q);\n    while(q--){\n        Point p;\n        p.input();\n        int res = poly.relationpoint(p);\n        if(res == 3 || res == 2) puts(\"1\");\n        else if(res == 1) puts(\"2\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include<stdio.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst ll MOD = 1000000007;\nconst double EPS = 1e-10;\nstruct edge\n{\n\tint from, to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\n//int dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\ntemplate<class T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate<class T> T &chmax(T &a, const T &b) { return a = max(a, b); }\nbool valid(int x, int y, int h, int w) { return (x >= 0 && y >= 0 && x < h&&y < w); }\n//int index(int x, int y, int w) { return w*x + y; }\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\n\n\nconst double PI = acos(-1.0);\nbool eq(double a, double b) { return fabs(a - b) < EPS; }\ntypedef complex<double> Point;\ntypedef vector<Point> Polygon;\n\n\nnamespace std\n{\n\tbool operator < (const Point& a, const Point& b)\n\t{\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\n\nstruct Line\n{\n\tPoint a, b;\n\tLine(Point p, Point q) :a(p), b(q) {};\n};\n\nstruct Circle\n{\n\tPoint p; double r;\n\tCircle(Point a, double b) :p(a), r(b) {};\n};\n\ndouble dot(Point a, Point b)\n{\n\treturn real(conj(a)*b);\n}\n\ndouble cross(Point a, Point b)\n{\n\treturn imag(conj(a)*b);\n}\n\nint ccw(Point a, Point b, Point c)\n{\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS) return 1;\t//counter cloclwise\n\tif (cross(b, c) < -EPS) return -1;  //cloclwise\n\tif (dot(b, c) < 0) return 2;\t\t//c--a--b on line \n\tif (norm(b) < norm(c)) return -2;   //a--b--c on line\n\treturn 0;\t\t\t\t\t\t\t//a--c--b on line\n}\n\nbool isis_ll(Line l, Line m)\n{\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > EPS;\n}\n\nbool isis_ls(Line l, Line s)\n{\n\treturn cross(l.b - l.a, s.a - l.a)*cross(l.b - l.a, s.b - s.a) < EPS;\n}\n\nbool isis_ss(Line s, Line t)\n{\n\treturn (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\nbool isis_lp(Line l, Point p)\n{\n\treturn (abs(cross(l.b - p, l.a - p)) < EPS);\n}\n\nbool isis_sp(Line s, Point p)\n{\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a)) < EPS;\n}\n\nPoint projection(Line l, Point p)\n{\n\tPoint base = l.b - l.a;\n\tdouble r = dot(p - l.a, base) / norm(base);\n\treturn l.a + base*r;\n}\n\nPoint mirror(Line l, Point p)\n{\n\treturn 2.0*projection(l, p) - p;\n}\n\ndouble dist_lp(Line l, Point p)\n{\n\treturn abs(p - projection(l, p));\n}\n\ndouble dist_ll(Line l, Line m)\n{\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\ndouble dist_ls(Line l, Line s)\n{\n\tif (isis_ls(l, s)) return 0;\n\treturn min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\ndouble dist_sp(Line s, Point p)\n{\n\tPoint r = projection(s, p);\n\tif (isis_sp(s, r)) return abs(r - p);\n\treturn min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble dist_ss(Line s, Line t)\n{\n\tif (isis_ss(s, t)) return 0;\n\treturn min(min(dist_sp(s, t.a), dist_sp(s, t.b)), min(dist_sp(t, s.a), dist_sp(t, s.b)));\n}\n\nPoint is_ll(Line s, Line t)\n{\n\tdouble a = cross(s.b - s.a, t.b - t.a);\n\tdouble b = cross(s.b - s.a, s.b - t.a);\n\treturn t.a + b / a*(t.b - t.a);\n}\n\nvector<Point> is_cc(Circle c1, Circle c2)\n{\n\tvector<Point> res;\n\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.p - c2.p);\n\n\tif (c1.r-d-c2.r>EPS)\n\t{\n\t\tres.push_back(c2.p);\n\t\treturn res;\n\t}\n\n\tdouble rc = (d*d + pow(c1.r, 2) - pow(c2.r, 2)) / (2 * d);\n\tdouble dfr = pow(c1.r, 2) - rc*rc;\n\tif (abs(dfr) < EPS) dfr = 0;\n\tif (dfr < 0.0) return res;\n\tdouble rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff*Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff*Point(rc, -rs));\n\treturn res;\n}\n\ntypedef vector<Point> polygon;\n\n\n\nPolygon convex_hull(Polygon s)\n{\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(ALL(s));\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tFOR(i, 2, s.size())\n\t{\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != -1; n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--)\n\t{\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != -1; n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint contains(Polygon g, Point p)\n{\n\tbool f = false;\n\tREP(i, g.size())\n\t{\n\t\tPoint a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS) return 1;\n\t\tif (a.imag()>b.imag()) swap(a, b);\n\t\tif (a.imag()<EPS&&b.imag()>EPS&&cross(a, b)>EPS) f = !f;\n\t}\n\treturn (f ? 2 : 0);\n}\n\nint main()\n{\n\tint n; cin >> n;\n\tPolygon pol(n);\n\tREP(i, n)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tpol.push_back(Point(x, y));\n\t}\n\tint q; cin >> q;\n\twhile (q--)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tcout << contains(pol, p) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\n#define ROUND_PRINT(N,val) cout << fixed;cout << setprecision(N) << val << endl\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\n\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) < eps) : ((x - e.x) < eps);\n  }\n  bool operator >(const struct _PT &e) const{\n     return (abs(x - e.x) < eps) ? ((y - e.y) > eps) : ((x - e.x) > eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\n\nint main(void) {\n  Plane pl;\n  int n,q;\n  P a;\n  cin >> n;\n  vector<P> point(n);\n  REP(i,n) cin >> point[i].x >> point[i].y;\n  cin >> q;\n\n  REP(i,q) {\n    cin >> a.x >> a.y;\n    long double sum = 0.0;\n    bool flg = false;\n    REP(i,n-1) {\n      if (pl.on_seq(point[i],point[i+1],a)) {\n        flg = true;\n        break;\n      }\n      sum += pl.getAngle(point[i]-a,point[i+1]-a);\n    }\n    if (pl.on_seq(point[n-1],point[0],a)) flg = true;\n    else sum += pl.getAngle(point[n-1]-a,point[0]-a);\n    if (flg) cout << 1 << endl;\n    else if (abs(2.0*pi - sum) < eps) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\nusing namespace std;\n\ntypedef complex<double> point;\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\ntypedef vector<point> polygon;\nenum { OUT, ON, IN };\nint contains(const polygon& P, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < P.size(); ++i) {\n\t\tpoint a = P[i] - p, b = P[(i+1)%P.size()] - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n\t}\n\treturn in ? IN : OUT;\n}\n\nint main() {\n\tint n;\n\twhile (cin >> n) {\n\t\tpolygon pol(n);\n\t\tfor (auto& p : pol) {\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tp = point(x, y);\n\t\t}\n\t\tint q;\n\t\tcin >> q;\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tcout << contains(pol, point(x, y)) << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値, Polygonのメンバ変数\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\nclass Polygon;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    bool parallel(const Line&) const;\n    bool orthogonal(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\nclass Polygon {\n    std::vector<Point> point;\npublic:\n    Polygon() {}\n    const std::vector<Point>& vertex() const {return point;}\n    const Point& vertex(int i) const {return point.at(i);}\n    int size() const {return point.size();}\n    void add(const Point&);\n    double area() const;\n    bool convex() const;\n    int include(const Point&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return COUNTER_CLOCKWISE;\n    if(v1.cross(v2) < -EPS) return CLOCKWISE;\n    if(v1.dot(v2) < -EPS) return ONLINE_BACK;\n    if(v2.norm() - v1.norm() > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nbool Line::parallel(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dxl - dyl * dx) <= EPS;\n}\nbool Line::orthogonal(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dyl + dxl * dx) <= EPS;\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n// Polygon\nvoid Polygon::add(const Point& p) {point.push_back(p);}\ndouble Polygon::area() const {\n    double sum = 0.0;\n    for(int i = 0; i < size(); ++i) sum += vertex(i).cross(vertex((i+1) % size()));\n    return fabs(sum) / 2.0;\n}\nbool Polygon::convex() const {\n    POSITION direction = ONLINE_BACK;\n    for(int i = 1; i < size(); ++i) {\n        POSITION d = vertex(i - 1).ccw(vertex(i), vertex((i + 1) % size()));\n        if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) continue;\n        if(direction == ONLINE_BACK) direction = d;\n        if(direction != d) return false;\n    }\n    return true;\n}\nint Polygon::include(const Point& p) const {\n    POSITION direction = ON_SEGMENT;\n    for(int i = 0; i < size(); ++i) {\n        POSITION d = Segment(vertex((i + 1) % size()), vertex(i)).ccw(p);\n        if(d == ON_SEGMENT) return 1;\n        if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) return 0;\n        if(direction == ON_SEGMENT) direction = d;\n        if(direction != d) return 0;\n    }\n    return 2;\n}\n// bool Polygon::include(const Point& p) const {\n//     POSITION direction = ONLINE_BACK;\n//     for(int i = 0; i < size(); ++i) {\n//         POSITION d = Segment(vertex((i + 1) % size()), vertex(i)).ccw(p);\n//         if(d != CLOCKWISE && d != COUNTER_CLOCKWISE) continue;\n//         if(direction == ONLINE_BACK) direction = d;\n//         if(direction != d) return false;\n//     }\n//     return true;\n// }\n\nusing namespace std;\nint main() {\n    int n;\n    cin >> n;\n    Polygon polygon;\n    while(n--) {\n        double x, y;\n        cin >> x >> y;\n        polygon.add(Point(x, y));\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        cout << polygon.include(Point(x, y)) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*\n#ifndef ONLINE_JUDGE\n\t#include <boost/multiprecision/cpp_int.hpp>\n\t#include <boost/multiprecision/cpp_dec_float.hpp>\n\tusing bll = boost::multiprecision::cpp_int;\n\tusing bdouble = boost::multiprecision::cpp_dec_float_100;\n#endif\n*/\n#ifdef LOCAL_DEV\n\tvoid debug_impl() { std::cerr << std::endl; }\n\ttemplate<typename Head, typename... Tail> void debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head << (sizeof...(tail) ? \",\" : \"\"); debug_impl(tail...); }\n\t#define debug(...) { std::cerr << std::boolalpha << \"(\" << #__VA_ARGS__ << \") =\"; debug_impl(__VA_ARGS__); std::cerr << std::noboolalpha; }\n#else\n\t#define debug(...) {}\n#endif\n#ifdef LOCAL_TEST\n\t#define BOOST_STACKTRACE_USE_ADDR2LINE\n\t#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line\n\t#define _GNU_SOURCE\n\t#include <boost/stacktrace.hpp>\n\ttemplate<typename T> class dvector : public std::vector<T> {\n\tpublic:\n\t\tdvector() : std::vector<T>() {}\n\t\texplicit dvector(size_t n, const T& value = T()) : std::vector<T>(n, value) {}\n\t\tdvector(const std::vector<T>& v) : std::vector<T>(v) {}\n\t\tdvector(const std::initializer_list<T> il) : std::vector<T>(il) {}\n\t\tdvector(const typename std::vector<T>::iterator first, const typename std::vector<T>::iterator last) : std::vector<T>(first, last) {}\n\t\tdvector(const std::string::iterator first, const std::string::iterator last) : std::vector<T>(first, last) {}\n\t\tT& operator[](size_t n) {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t\tconst T& operator[](size_t n) const {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t};\n\tclass dbool {\n\tprivate:\n\t\tbool boolvalue;\n\tpublic:\n\t\tdbool() : boolvalue(false) {}\n\t\tdbool(bool b) : boolvalue(b) {}\n\t\tdbool(const dbool &b) : boolvalue(b.boolvalue) {}\n\t\toperator bool&() { return boolvalue; }\n\t\toperator const bool&() const { return boolvalue; }\n\t};\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector<T>& v) {\n\t\tfor (int i = 0, len = v.size(); i < len; ++i){ s << v[i]; if (i < len - 1) s << \"\\t\"; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector< dvector<T> >& vv) {\n\t\tfor (int i = 0, len = vv.size(); i < len; ++i){ s << vv[i] << std::endl; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::set<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::multiset<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2>& m) {\n\t\ts << \"{\" << std::endl; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << \"\\t\" << (*itr).first << \" : \" << (*itr).second << std::endl; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) { \n\t\treturn s << \"(\" << p.first << \", \" << p.second << \")\"; }\n\t#define vector dvector\n\t#define bool dbool\n\tclass SIGFPE_exception : std::exception {};\n\tclass SIGSEGV_exception : std::exception {};\n\tvoid catch_SIGFPE(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGFPE_exception();\t}\n\tvoid catch_SIGSEGV(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGSEGV_exception(); }\n\tsigned convertedmain();\n\tsigned main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }\n\t#define main() convertedmain()\n#endif\n//#define int long long\nusing ll = long long;\n//constexpr int INF = 1e9;//INT_MAX=(1<<31)-1=2147483647\nconstexpr ll INF = (ll)1e18;//(1LL<<63)-1=9223372036854775807\nconstexpr ll MOD = (ll)1e9 + 7;\nconstexpr double EPS = 1e-9;\nconstexpr int dx[4] = {1, 0, -1, 0};\nconstexpr int dy[4] = {0, 1, 0, -1};\n#define rep(i, n)   for(ll i=0, i##_length=(n); i< i##_length; ++i)\n#define repeq(i, n) for(ll i=1, i##_length=(n); i<=i##_length; ++i)\n#define rrep(i, n)   for(ll i=(n)-1; i>=0; --i)\n#define rrepeq(i, n) for(ll i=(n)  ; i>=1; --i)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define uniq(v) (v).erase(unique((v).begin(), (v).end()), (v).end());\nvoid p() { std::cout << '\\n'; }\ntemplate<typename Head, typename... Tail> void p(Head head, Tail... tail) { std::cout << head << (sizeof...(tail) ? \" \" : \"\"); p(tail...); }\ntemplate<typename T> inline void pv(vector<T> &v) { for(ll i=0, N=v.size(); i<N; i++) std::cout << v[i] << \" \\n\"[i==N-1]; }\ntemplate<typename T> inline T gcd(T a, T b) { return b ? gcd(b,a%b) : a; }\ntemplate<typename T> inline T lcm(T a, T b) { return a / gcd(a,  b) * b; }\ntemplate<typename T> inline bool chmax(T &a, T b) { return a < b && (a = b, true); }\ntemplate<typename T> inline bool chmin(T &a, T b) { return a > b && (a = b, true); }\n\n/*-----8<-----template-----8<-----*/\n\n//点、ベクトル\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0., double y=0.) : x(x), y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x, y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x, y-p.y);}\n\tPoint operator * (Point p) {return Point(x*p.x, y*p.y);}\n\tPoint operator / (Point p) {return Point(x/p.x, y/p.y);}\n\tPoint operator + (double n) {return Point(x+n, y+n);}\n\tPoint operator - (double n) {return Point(x-n, y-n);}\n\tPoint operator * (double n) {return Point(x*n, y*n);}\n\tPoint operator / (double n) {return Point(x/n, y/n);}\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\t\n};\nusing Vector = Point;\n\n//線分、直線\nclass Segment {\npublic:\n\tPoint p1,p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\nusing Line = Segment;\n\n//ベクトルの内積\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\ndouble equals(double a,double b){ return fabs(a-b)<EPS; }\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n\treturn isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n\treturn equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//平行判定\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n\treturn isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n\treturn equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//射影\nPoint project(Segment s,Point p){\n\tVector base = s.p2-s.p1;\n\tdouble r = dot(p-s.p1, base)/base.norm();\n\treturn base*r + s.p1;\n}\n//反射\nPoint reflect(Segment s,Point p){\n\treturn p + (project(s,p)-p)*2;\n}\n\n//p0,p1,p2が反時計回りになる\nstatic const int COUNTER_CLOCKWISE = 1;\n//p0,p1,p2が時計回りになる\nstatic const int CLOCKWISE = -1;\n//p2,p0,p1がこの順で同一直線状にある\nstatic const int ONLINE_BACK = 2;\n//p0,p1,p2がこの順で同一直線状にある\nstatic const int ONLINE_FRONT = -2;\n//p2が線分p0p1上にある\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-EPS)return CLOCKWISE;\n\tif(dot(a,b)<-EPS)return ONLINE_BACK;\n\tif(a.norm()<b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\n//端点が他方の線分上にある場合、線分二つが平行に重なる場合も交差しているとみなす\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//二点間の距離\ndouble getDistance(Point a,Point b){\n\treturn (a-b).abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(l.p2-l.p1, p-l.p1)) / (l.p2-l.p1).abs();\n}\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1, p-s.p1)<0.)return (p-s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2)<0.)return (p-s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n\tif(intersect(s1,s2))return 0.;\n\treturn min({getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2), getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)});\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2-s2.p1;\n\tdouble d1=fabs(cross(base, s1.p1-s2.p1));\n\tdouble d2=fabs(cross(base, s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t;\n}\n\n//円\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\t//c:中心の点、r=半径\n\tCircle(Point c=Point(), double r=0.) : c(c), r(r) {}\n};\n////円cと線分lの交点の数を返す\nint hasCrossPoints(Circle c, Line l){\n\tdouble dis = getDistanceLP(l,c.c);\n\tif(equals(dis,c.r))return 1;\n\tif(dis < c.r)return 2;\n\treturn 0;\n}\n//円cと線分lの交点を返す\npair<Point,Point> getCrossPoints(Circle c, Line l){\n\tassert(getDistanceLP(l,c.c) < c.r+EPS);\n\tVector pr=project(l, c.c);\n\tVector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn {pr+e*base, pr-e*base};\n}\n\n\n//ベクトルpとx軸との角度を返す 返却値の範囲[-π, π]\ndouble arg(Vector p){ return atan2(p.y, p.x); }\n//大きさa, x軸との角度rのベクトルを返す\nVector polar(double a, double r){ return Point(cos(r)*a, sin(r)*a); }\n//円c1と円c2の交点を返す\npair<Point,Point> getCrossPoints(Circle c1, Circle c2){\n\tassert(getDistance(c1.c,c2.c) < c1.r+c2.r+EPS);\n\tdouble d = (c1.c-c2.c).abs();\n\tdouble a = acos((c1.r*c1.r+d*d-c2.r*c2.r)/(c1.r*d*2.));\n\tdouble t = arg(c2.c-c1.c);\n\treturn {c1.c+polar(c1.r,t+a), c1.c+polar(c1.r,t-a)};\n}\n\nusing Polygon = vector<Point>;\n//多角形gと点pの内包関係を返す\nstatic const int INSIDE = 2;\nstatic const int ONLINE = 1;\nstatic const int OUTSIDE = 0;\nll contains(Polygon &g, Point p){\n\tll n=g.size();\n\tbool x=false;\n\tfor(ll i=0; i<n; i++){\n\t\tPoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return ONLINE;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x=!x;\n\t}\n\treturn (x ? INSIDE : OUTSIDE);\n}\n\n//点の集合sに対する凸包を返す\nPolygon andrewScan(Polygon s){\n\tPolygon u,l;\n\tif(s.size()<3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\n\tfor(ll i=2; i<(ll)s.size(); i++){\n\t\tfor(ll n=u.size(); n>=2 && ccw(u[n-2],u[n-1],s[i])!=CLOCKWISE; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor(ll i=s.size()-3; i>=0; i--){\n\t\tfor(ll n=l.size(); n>=2 && ccw(l[n-2],l[n-1],s[i])!=CLOCKWISE; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor(ll i=u.size()-2; i>=1; i--)l.push_back(u[i]);\n\n\treturn l;\n}\n\n\n//線分の集合sの交点の数を返す\nclass EndPoint {\npublic:\n\tPoint pnt;\n\tll seg,st; //入力線分のID, 端点の種類\n\tEndPoint() {}\n\tEndPoint(Point pnt, ll seg, ll st) : pnt(pnt), seg(seg), st(st) {}\n\n\tbool operator < (const EndPoint &ep) const {\n\t\tif(pnt.y == ep.pnt.y) return st < ep.st;\n\t\treturn pnt.y < ep.pnt.y;\n\t}\n};\nll manhattanIntersection(vector<Segment> &S){\n\tstatic const int BOTTOM = 0;\n\tstatic const int LEFT = 1;\n\tstatic const int RIGHT = 2;\n\tstatic const int TOP = 3;\n\tll n=S.size();\n\tvector<EndPoint> EP(2*n);\n\tfor(ll i=0,k=0; i<n; i++){\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tif(S[i].p1.x>S[i].p2.x) swap(S[i].p1, S[i].p2);\n\t\t}else if(S[i].p1.y > S[i].p2.y){\n\t\t\tswap(S[i].p1, S[i].p2);\n\t\t}\n\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, LEFT);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, RIGHT);\n\t\t}else{\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, BOTTOM);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, TOP);\n\t\t}\n\t}\n\n\tsort(EP.begin(), EP.end());\n\n\tset<ll> BT;\n\tBT.insert(INF);\n\tll cnt=0;\n\tfor(ll i=0; i<2*n; i++){\n\t\tif(EP[i].st==TOP){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==BOTTOM){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==LEFT){\n\t\t\tauto b=BT.lower_bound(S[EP[i].seg].p1.x);\n\t\t\tauto e=BT.upper_bound(S[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n/*-----8<-----library-----8<-----*/\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\nvoid CGL_2_A(){\n\tll N;\n\tcin>>N;\n\tvector<ll> ans(N,0);\n\trep(i,N){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tll t=0;\n\t\tif(isOrthogonal(p0,p1,p2,p3)){\n\t\t\tt=1;\n\t\t}else if(isParallel(p0,p1,p2,p3)){\n\t\t\tt=2;\n\t\t}\n\t\tans[i]=t;\n\t}\n\trep(i,N)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\nvoid CGL_1_A(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=project(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\nvoid CGL_1_B(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=reflect(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\nvoid CGL_2_D(){\n\tll Q;\n\tcin>>Q;\n\tvector<double> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tSegment s0(Point(x0,y0),Point(x1,y1)), s1(Point(x2,y2),Point(x3,y3));\n\t\tdouble t=getDistance(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\nvoid CGL_1_C(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tPoint p0(x0,y0),p1(x1,y1);\n\tll Q;\n\tcin>>Q;\n\tvector<string> ans(Q,\"\");\n\tmap<ll,string> m;\n\tm[1]=\"COUNTER_CLOCKWISE\";\n\tm[-1]=\"CLOCKWISE\";\n\tm[2]=\"ONLINE_BACK\";\n\tm[-2]=\"ONLINE_FRONT\";\n\tm[0]=\"ON_SEGMENT\";\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint pq(xq,yq);\n\t\tll t=ccw(p0,p1,pq);\n\t\tans[i]=m[t];\n\t}\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\nvoid CGL_2_B(){\n\tll Q;\n\tcin>>Q;\n\tvector<ll> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tbool t=intersect(p0,p1,p2,p3);\n\t\tans[i]=t ? 1 : 0;\n\t}\n\trep(i,Q)p(ans[i]);\t\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\nvoid CGL_2_C(){\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tSegment s0(p0,p1),s1(p2,p3);\n\t\tPoint t=getCrossPoint(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i].x,ans[i].y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D&lang=ja\nvoid CGL_7_D(){\n\tll cx,cy,r,Q;\n\tcin>>cx>>cy>>r>>Q;\n\tCircle c(Point(cx,cy),r);\n\tvector<pair<Point,Point>> ans(Q);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1;\n\t\tcin>>x0>>y0>>x1>>y1;\n\t\tPoint p0(x0,y0),p1(x1,y1);\n\t\tLine l(p0,p1);\n\t\tll count=hasCrossPoints(c,l);\n\t\tif(count==0)exit(1);\n\t\tpair<Point,Point> t=getCrossPoints(c,l);\n\t\tif(t.first.x>t.second.x || (equals(t.first.x,t.second.x) && t.first.y>t.second.y))swap(t.first,t.second);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i].first.x, ans[i].first.y, ans[i].second.x, ans[i].second.y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E&lang=ja\nvoid CGL_7_E(){\n\tdouble c0x,c0y,r0,c1x,c1y,r1;\n\tcin>>c0x>>c0y>>r0>>c1x>>c1y>>r1;\n\tCircle c0(Point(c0x,c0y), r0), c1(Point(c1x,c1y), r1);\n\tpair<Point,Point> t=getCrossPoints(c0, c1);\n\tif(t.first.x>t.second.x || (equals(t.first.x,t.second.x) && t.first.y>t.second.y))swap(t.first,t.second);\n\tcout.setf(ios::fixed), cout.precision(20);\n\tp(t.first.x, t.first.y, t.second.x, t.second.y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja\nvoid CGL_3_C(){\n\tll N;\n\tcin>>N;\n\tvector<Point> g(N);\n\trep(i,N)cin>>g[i].x>>g[i].y;\n\tll Q;\n\tcin>>Q;\n\tvector<ll> ans(Q,0);\n\trep(i,Q){\n\t\tll x,y;\n\t\tcin>>x>>y;\n\t\tll t=contains(g,Point(x,y));\n\t\tans[i]=t;\n\t}\n\trep(i,Q)p(ans[i]);\n}\n\nsigned main() {\n\t//CGL_2_A();\n\t//CGL_1_A();\n\t//CGL_1_B();\n\t//CGL_2_D();\n\t//CGL_1_C();\n\t//CGL_2_B();\n\t//CGL_2_C();\n\t//CGL_7_D();\n\t//CGL_7_E();\n\tCGL_3_C();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntemplate<class T> using vec = vector<T>;\ntemplate<class T> using vvec = vector<vec<T>>;\nusing R = double;\nusing P = complex<R>;\n#define x real()\n#define y imag()\nconst R eps = 1e-9,PI = acos(-1);\n\nbool equal(R a,R b){return abs(b-a)<eps;}\nbool equal0(R a){return equal(a,0.0);}\n\nP operator*(const P& p,const R& d){\n    return P(p.x*d,p.y*d);\n}\n\nistream &operator>>(istream& is,P& p){\n    R a,b;\n    is >> a >> b;\n    p = P(a,b);\n    return is;\n}\n\nostream &operator<<(ostream& os,P& p){\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n//内積\ndouble dot(P a,P b) {return (conj(a)*b).real();}\n//外積\ndouble cross(P a,P b) {return (conj(a)*b).imag();}\n\nstruct L{\n    P a,b;\n    L(P a,P b):a(a),b(b){}\n    L(R A,R B,R C){\n        if(equal(A,0)) a = P(0,C/B),b = P(1,C/B);\n        else if(equal(B,0)) b = P(C/A,0),b = P(C/A,1);\n        else a = P(0,C/B),b = P(C/A,0);\n    }\n};\n\n//pをbに射影\nP projection(P p,P b) {return b*dot(p,b)/norm(b);}\n\n//pとp1 to p2 に射影\nP projection(L l,P p){\n    p -= l.a; l.b -= l.a;\n    P proj = projection(p,l.b);\n    return l.a+proj;\n}\n\nstruct S:L{\n    S(P a,P b):L(a,b){}\n};\n\n//点の回転方向を判定\nint ccw(P p0,P p1,P p2){\n    p1 -= p0,p2 -= p0;\n    if(cross(p1,p2)>eps) return 1; //\"COUNTER_CLOCKWISE\"\n    if(cross(p1,p2)<-eps) return -1; //\"CLOCKWISE\"\n    if(dot(p1,p2)<0) return 2; //\"ONLINE_BACK\"\n    if(norm(p1)<norm(p2)) return -2; //\"ONLINE_FRONT\"\n    return 0; //\"ON_SEGMENT\"\n}\n\nbool is_parallel(L l1,L l2){\n    return equal0(cross(l1.b-l1.a,l2.b-l2.a));\n}\n\nbool is_orthogonal(L l1,L l2){\n    return equal0(dot(l1.b-l1.a,l2.b-l2.a));\n}\n\n//pをlに関して対称移動\nP reflection(L l,P p){\n    P pj = projection(l,p);\n    return 2.0*pj-p;\n}\n\n//pがl上にあるか\nbool is_online(L l,P p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\n\nbool is_onsegment(S s,P p){\n    return ccw(s.a,s.b,p)==0;\n}\n\n//線分の交差判定\nbool intersect(S s,S t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0 && ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\n\n//2直線の交点\nP crosspoint(L l1,L l2){\n    R a = cross(l1.b-l1.a,l2.b-l2.a);\n    R b = cross(l1.b-l1.a,l1.b-l2.a);\n    if(equal0(abs(a)) && equal0(abs(b))) return l2.a;\n    return l2.a+(l2.b-l2.a)*b/a;\n}\n\nP crosspoint(S s1, S s2){\n    return crosspoint(L(s1),L(s2));\n}\n\nR dist(P a,P b){\n    return abs(a-b);\n}\n\nR dist(L l,P p){\n    return abs(p-projection(l,p));\n}\n\nR dist(L l1,L l2){\n    return is_parallel(l1,l2)? 0:dist(l1,l2.a);\n}\n\nR dist(S s,P p){\n    P r = projection(s,p);\n    if(is_onsegment(s,r)) return abs(r-p);\n    return min(dist(s.a,p),dist(s.b,p));\n}\n\nR dist (S s1,S s2){\n    if(intersect(s1,s2)) return 0;\n    return min({dist(s1,s2.a),dist(s1,s2.b),\n    dist(s2,s1.a),dist(s2,s1.b)});\n}\n\nusing Polygon = vec<P>;\n\nR area_of_polygon(Polygon& v){\n    int n = v.size();\n    R res = 0;\n    for(int i=0;i+2<n;i++){\n        res += cross(v[i+1]-v[0],v[i+2]-v[0]);\n    }\n    return res/2;\n}\n\nbool is_convex(Polygon& v){\n    int n = v.size();\n    for(int i=0;i<n;i++){\n        P a = v[i%n],b = v[(i+1)%n],c = v[(i+2)%n];\n        if(cross(b-a,c-a)<-eps) return false;\n    }\n    return true;\n}\n\nenum{\n    OUT,ON,IN\n};\n\n//点pと多角形vの関係\nint contains(Polygon& v,P p){\n    bool in = false;\n    int n = v.size();\n    for(int i=0;i<n;i++){\n        P a = v[i]-p,b = v[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<=0 && 0<b.y && cross(a,b)<0) in = !in;\n        if(is_onsegment(S(a,b),P(0,0))) return ON;\n    }\n    return in? IN:OUT;\n}\n\nint main(){\n    int N;\n    cin >> N;\n    Polygon pol(N);\n    for(int i=0;i<N;i++){\n        cin >> pol[i];\n    }\n    int Q;\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        P p;\n        cin >> p;\n        cout << contains(pol,p) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\n#define EPS 1e-10\n#define INF 1e10\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\ntypedef vector<Point> Polygon;\n\nstruct Line\n{\n\tPoint a, b;\n\tLine() {}\n\tLine(const Point &_a, const Point &_b)\n\t{\n\t\ta = _a; b = _b;\n\t}\n};\n\n//Line????????????\nstruct Segment\n{\n\tPoint a, b;\n\tSegment() {}\n\tSegment(const Point &_a, const Point &_b)\n\t{\n\t\ta = _a; b = _b;\n\t}\n};\n\nstruct Circle\n{\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\n\tCircle(const Point &_c, const double &_r)\n\t{\n\t\tc = _c; r = _r;\n\t}\n};\n\nistream& operator >> (istream& is, Point &p)\n{\n\tdouble x, y;\n\tis >> x >> y;\n\tp.real(x); p.imag(y);\n\treturn is;\n}\n\nSegment ToSegment(const Line l)\n{\n\treturn Segment(l.a, l.b);\n}\n\nLine ToLine(const Segment s)\n{\n\treturn Line(s.a, s.b);\n}\n\n//???????¨±???==\nbool equals(const double &a, const double &b)\n{\n\treturn abs(a - b) < EPS;\n}\n\n//???????¨±???==\nbool equals(const Vector &a, const Vector &b)\n{\n\treturn equals(a.real(), b.real()) && equals(a.imag(), b.imag());\n}\n\n//Point?????????\nbool comp(const Point &a, const Point &b)\n{\n\treturn equals(a.real(), b.real()) ? a.imag() < b.imag() : a.real() < b.real();\n}\n\n//??????\ndouble dot(const Vector &a, const Vector &b)\n{\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\n\n//??????\ndouble cross(const Vector &a, const Vector &b)\n{\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\n\n//????§???¢?????¢???\ndouble GetArea(const Polygon &g)\n{\n\tdouble res = 0;\n\tfor (int i = 1; i < g.size() - 1; i++)\n\t{\n\t\tres += cross(g[i] - g[0], g[i + 1] - g[0]);\n\t}\n\treturn abs(res / 2);\n}\n\n//???????¨???????(O(1))\n//?????¶:????????¨?????°??????\nint CCW(const Point &p0, const Point &p1, const Point &p2)\n{\n\tVector v1 = (Vector)(p1 - p0), v2 = p2 - p0;\n\tif (cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(v1, v2) < -EPS) return CLOCKWISE;\n\tif (dot(v1, v2) < -EPS) return ONLINE_BACK;\n\tif (abs(v1) < abs(v2)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??´?????????(O(1))\nbool IsOrthogonal(const Vector &a, const Vector &b)\n{\n\treturn equals(dot(a, b), 0.0);\n}\nbool IsOrthogonal(const Line &l1, const Line &l2)\n{\n\treturn equals(dot(l1.b - l1.a, l2.b - l2.a), 0.0);\n}\n\n//????????????(O(1))\nbool IsParallel(const Vector &a, const Vector &b)\n{\n\treturn equals(cross(a, b), 0.0);\n}\nbool IsParallel(const Line &l1, const Line &l2)\n{\n\treturn equals(cross(l1.b - l1.a, l2.b - l2.a), 0.0);\n}\n\n//?°???±(O(1))\nPoint Project(const Line &s, const Point &p) {\n\tVector v1 = s.b - s.a;\n\tVector v2 = p - s.a;\n\tdouble r = dot(v1, v2) / norm(v1);\n\treturn s.a + v1 * r;\n}\n\n//????°?(O(1))\nPoint Reflect(const Line &s, const Point &p) {\n\treturn p + (Project(s, p) - p) * 2.0;\n}\n\n//??´?????¨?????????????????????(O(1))\nbool Intersects(const Line &l, const Segment &s)\n{\n\treturn CCW(l.a, l.b, s.a)*CCW(l.a, l.b, s.b) != 1;\n}\n\n//??????????????????\nbool Intersects(const Segment &l1, const Segment &l2)\n{\n\treturn CCW(l1.a, l1.b, l2.a)*CCW(l1.a, l1.b, l2.b) <= 0 &&\n\t\tCCW(l2.a, l2.b, l1.a)*CCW(l2.a, l2.b, l1.b) <= 0;\n}\n\n//??´?????¨??´????????????(O(1))\nPoint GetIntersection(const Line &l1, const Line &l2)\n{\n\tVector a1 = l1.b - l1.a, a2 = l2.b - l2.a;\n\tVector b1 = l2.a - l1.a, b2 = l1.a - l2.b;\n\tdouble s1 = cross(a1, b1) / 2, s2 = cross(a1, b2) / 2;\n\treturn Point(l2.a.real() + a2.real()*s1 / (s1 + s2), l2.a.imag() + a2.imag()*s1 / (s1 + s2));\n}\n\n//?????¨????????????\n//?????????\n//\t???????????????????????°\nvector<Point> GetIntersection(const Circle &c1, const Circle &c2)\n{\n\tvector<Point> res;\n\tdouble d, a, t;\n\td = sqrt(norm((c2.c - c1.c)));\n\tif (d < abs(c1.r - c2.r) || c1.r + c2.r < d) return res; //?????????0\n\ta = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tt = atan2(c2.c.imag() - c1.c.imag(), c2.c.real() - c1.c.real());\n\tres.push_back(Point(c1.c.real() + c1.r*cos(t + a), c1.c.imag() + c1.r*sin(t + a)));\n\tres.push_back(Point(c1.c.real() + c1.r*cos(t - a), c1.c.imag() + c1.r*sin(t - a)));\n\tif (equals(res[0], res[1])) res.pop_back(); //?????????1\n\treturn res;\n}\n\n//????§???¢????????????(O(n))\n//?????????\n//  0:???????????????\n//  1:????????????\n//  2:?????????\nint Contains(const Polygon &g, const Point &p)\n{\n\tLine l = Line(p, Point(INF, p.imag()));\n\tint cnt = 0, n = g.size();\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tVector a = g[i] - p;\n\t\tVector b = g[(i + 1) % n] - p;\n\t\tif (CCW(g[i], g[(i + 1) % n], p) == 0) return 1; //?????????\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() <= EPS && EPS < b.imag() && cross(a, b) > EPS) cnt++;\n\t}\n\tif ((cnt & 1) == 1) return 2; //????????????\n\treturn 0; //???????????????\n}\n\n//??????(O(n))\n//?????????\n//\tx->y????????§???????°??????????????????????????¨???????\nPolygon AndrewScan(Polygon &s)\n{\n\tif (s.size() <= 2) return s;\n\tsort(s.begin(), s.end(), comp);\n\tPolygon g;\n\tfor (int i = 0; i < s.size(); i++)\n\t{\n\t\t//CCW?????¨?????????==COUNTER_CLOCKWISE???????????¨???????????????\n\t\tfor (int n = g.size(); n >= 2 && CCW(g[n - 2], g[n - 1], s[i]) != CLOCKWISE; n--)\n\t\t{\n\t\t\tg.pop_back();\n\t\t}\n\t\tg.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 2; i >= 0; i--)\n\t{\n\t\tfor (int n = g.size(); CCW(g[n - 2], g[n - 1], s[i]) != CLOCKWISE; n--)\n\t\t{\n\t\t\tg.pop_back();\n\t\t}\n\t\tg.push_back(s[i]);\n\t}\n\treverse(g.begin(), g.end());\n\tg.pop_back();\n\treturn g;\n}\n\n//???????§???¢?????????(O(n))\nPolygon ConvexCut(const Polygon &g, const Line &l)\n{\n\tPolygon res;\n\tfor (int i = 0; i < g.size(); i++)\n\t{\n\t\tSegment s = Segment(g[i], g[(i + 1) % g.size()]);\n\t\tif (CCW(l.a, l.b, s.a) != -1) res.push_back(s.a);\n\t\tif (CCW(l.a, l.b, s.a)*CCW(l.a, l.b, s.b) == -1)\n\t\t\tres.push_back(GetIntersection(l, ToLine(s)));\n\t}\n\treturn res;\n}\n\nint N, Q;\nPolygon g;\n\nsigned main()\n{\n\tcin >> N;\n\tg.resize(N);\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tcin >> g[i];\n\t}\n\tcin >> Q;\n\tfor (int i = 0; i < Q; i++)\n\t{\n\t\tPoint p;\n\t\tcin >> p;\n\t\tprintf(\"%d\\n\", Contains(g, p));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <cstdio>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\ntypedef vector<P> G;\n\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\nenum { OUT, ON, IN };\nint contains(const G& poly, const P& p) {\n  bool in = false;\n  for (int i = 0; i < poly.size(); ++i) {\n    P a = curr(poly,i) - p, b = next(poly,i) - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b))\n      if (cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nint main(){\n\tG poly;\n\tP p;\n\tint n;\n\tdouble x,y;\n\tfor(scanf(\"%d\",&n);n--;poly.push_back(p))scanf(\"%lf%lf\",&x,&y),p=P(x,y);\n\tfor(scanf(\"%d\",&n);n--;printf(\"%d\\n\",contains(poly,p)))scanf(\"%lf%lf\",&x,&y),p=P(x,y);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <regex>\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n#include  <cassert>\n\nusing namespace std;\nusing ll = long long int;\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define FOR(i, a, b)  for(int i = (a); i < (b) ; i++)\n#define pb push_back\n#define SORT(v,n) sort(v, v+n)\n#define ALL(x) (x).begin(),(x).end()\n#define debug(x) cerr << #x << \": \" << x << '\\n'\n#define elif else if\n#define int ll\n//const int INF = 100100100;\nconst int INF = (1LL << 32);\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-9;\nint dx[8] = { 1, 0, -1, 0, 1, -1, -1, 1 };\nint dy[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<vector<int>>> vvvi;\n\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point & p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point & p) const {\n\t\treturn fabs(x - p.x) < EPS and fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x* b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x* b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n//直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//平行判定\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//線分ｓに対する点ｐの反射\nPoint refrect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n//2点間の距離\ndouble getDistance(Point a, Point b) {\n\tPoint res = a - b;\n\treturn res.abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / Vector(l.p2 - l.p1).abs());\n}\n\n//線分ｓと点ｐの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\tPoint r = p - s.p1;\n\t\treturn r.abs();\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\tPoint r = p - s.p2;\n\t\treturn r.abs();\n\t}\n\treturn getDistanceLP(s, p);\n}\n\n//counter clock wise\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分と線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//線分と線分の距離\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//円ｃと線分ｌの交差判定\nbool intersect(Circle c, Line l) {\n\treturn getDistanceSP(l, c.c) <= c.r;\n}\n\n//円ｃと線分ｌの交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / Vector(l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r * c.r - Vector(pr - c.c).norm());\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n//円c1と円c2の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = Vector(c1.c - c2.c).abs();\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//点の内包判定\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS and dot(a, b) < EPS) return ON;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS and EPS < b.y and cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? IN : OUT);\n}\n\nsigned main() {\n\tios::sync_with_stdio(false);\n\tint n;\n\tcin >> n;\n\tPolygon g;\n\trep(i, n) {\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\tPoint p = Point(x, y);\n\t\tg.pb(p);\n\t}\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tPoint p = Point(x, y);\n\t\tcout << contains(g, p) << endl;\n\t}\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v){std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntypedef complex<double> P;\ntypedef vector<P> Poly;\n\n#define EPS 1e-8\n#define EQ (abs((a)-(b))<EPS)\nconst double PI = acos(-1.0);\n\ninline int signum(double x) { return abs(x) < EPS ? 0 : x > 0 ? 1 : -1; }\n\nnamespace std {\n    bool operator<(const P &a, const P &b) {\n        return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n    }\n}\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    int sign = signum(cross(b, c));\n    if (abs(sign) == 1) return sign;\n    if (signum(dot(b, c)) < 0) return -2;\n    if (abs(b) < abs(c)) return 2;\n    return 0;\n}\n\ndouble area_poly(Poly poly) {\n    double ans = 0.0;\n    for (int i = 0; i < poly.size(); i++) ans += cross(poly[i], poly[(i + 1) % poly.size()]);\n    return abs(ans) / 2.0;\n}\n\nbool is_convex(Poly poly) {\n    if (poly.size() < 3) return false;\n    int s = -3;\n    int n = poly.size();\n    for (int i = 0; i < poly.size(); i++) {\n        int r = ccw(poly[i], poly[(i + 1) % n], poly[(i + 2) % n]);\n        if (s == -3 && abs(r) == 1) s = r;\n        if (s * r == -1) return false;\n    }\n    return true;\n}\n\nPoly convex_hull(Poly poly) {\n    Poly g;\n    int n = poly.size();\n    int m;\n\n    if (n < 3) return poly;\n\n    sort(poly.begin(), poly.end());\n    for (int i = 0; i < poly.size(); i++) {\n        while ((m = g.size()) >= 2 && ccw(g[m - 2], g[m - 1], poly[i]) <= 0) g.pop_back();\n        g.push_back(poly[i]);\n    }\n    int t = g.size();\n    for (int i = n - 2; i >= 0; i--) {\n        while ((m = g.size()) > t && ccw(g[m - 2], g[m - 1], poly[i]) <= 0) g.pop_back();\n        g.push_back(poly[i]);\n    }\n    g.pop_back();\n    return g;\n}\n\nint p_in_poly(Poly poly, P p) {\n    bool in = false;\n    int n = poly.size();\n    for (int i = 0; i < n; i++) {\n        P a = poly[i] - p;\n        P b = poly[(i + 1) % n] - p;\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= EPS && EPS < b.imag() && cross(a, b) < -EPS) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n    }\n    return in ? 2 : 0;\n}\n\nint main() {\n\n    int N;\n    cin >> N;\n\n    Poly poly(N);\n    for (int i = 0; i < N; i++) {\n        double x, y;\n        cin >> x >> y;\n        poly[i] = P(x, y);\n    }\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n        double x, y;\n        cin >> x >> y;\n\n        cout << p_in_poly(poly, P(x, y)) << endl;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\nconst double PI = 3.141592653589793238;\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(const Point &p) const{ return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p) const{ return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n\tvoid show() { printf(\"%.10lf %.10lf\", x, y); }\n};\n\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\n\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>; \nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\ndouble getDistanceLP(Line, Point);\ndouble getDistance(Point, Point);\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn c1.r + c2.r >= getDistance(c1.c, c2.c);\n}\n\nbool intersect(Circle c, Line l) {\n\tdouble d = getDistanceLP(l, c.c);\n\treturn d <= c.r;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn absv(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / absv(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absv(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absv(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1)*(d1 / (d1 + d2));\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tPoint pr = project(l, c.c);\n\tVector lv = l.p2 - l.p1;\n\tVector le = lv / absv(lv);\n\tdouble base = sqrt(c.r*c.r - norm(c.c - pr));\n\treturn make_pair(pr + le*base, pr - le*base);\n}\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\nVector polar(double a, double r) {\n\treturn Point(a * cos(r), a * sin(r));\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = getDistance(c1.c, c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, a + t), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p; Point b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) <= 0) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS<b.y && cross(a, b)>EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n\t\n}\nint main() {\n\tint n, q, x, y;\n\tPolygon pg;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tpg.push_back(Point(x, y));\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tcout << contains(pg, Point(x, y)) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n        }\n    }\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            while (get_position(s_right, poly[i_pre]) != CCW && get_position(s_right, poly[i_pre]) != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n            }\n            int i_aft = (i + 1) % n;\n            while (get_position(s_right, poly[i_aft]) != CCW && get_position(s_right, poly[i_aft]) != CW) {\n                i_aft = (i_aft + 1) % n;\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-9;\nbool same(double a, double b) { return abs(a - b) < eps; }\n\nstruct P {\n    double x, y;\n    P() : x(0), y(0) {}\n    P(double x, double y) : x(x), y(y) {}\n    P operator + (P b) { return P(x + b.x, y + b.y); }\n    P operator - (P b) { return P(x - b.x, y - b.y); }\n    P operator * (double b) { return P(x * b, y * b); }\n    P operator / (double b) { return P(x / b, y / b); }\n    double operator * (P b) { return x * b.x + y * b.y; }\n    double operator ^ (P b) { return x * b.y - y * b.x; }\n    double abs() { return hypot(x, y); }\n    P unit() { return *this / abs(); }\n    P spin(double o) {\n        double c = cos(o), s = sin(o);\n        return P(c * x - s * y, s * x + c * y);\n    }\n};\n\nstruct L {\n    // ax + by + c = 0\n    double a, b, c, o;\n    P pa, pb;\n    L() : a(0), b(0), c(0), o(0), pa(), pb() {}\n    L(P pa, P pb) : a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), o(atan2(-a, b)), pa(pa), pb(pb) {}\n    P project(P p) { return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs()); }\n    P reflect(P p) { return p + (project(p) - p) * 2; }\n    double get_ratio(P p) { return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs()); }\n    bool inside(P p) {\n        double x = get_ratio(p);\n        return x >= 0 && x <= 1;\n    }\n};\n\nstruct C {\n    P c;\n    double r;\n    C() : r(0) {}\n    C(P c, double r) : c(c), r(r) {}\n};\n\nbool parallel(L x, L y) { return same(x.a * y.b, x.b * y.a); }\n\nP intersect(L x, L y) { return P(-x.b * y.c + x.c * y.b, x.a * y.c - x.c * y.a) / (-x.a * y.b + x.b * y.a); }\n\nint pip(vector<P> ps, P p) {\n    int c = 0;\n    for (int i = 0; i < ps.size(); ++i) {\n        int a = i;\n        int b = (i + 1) % ps.size();\n        L l(ps[a], ps[b]);\n        P q = l.project(p);\n        if ((p - q).abs() < eps && l.inside(q)) return 1;\n        if (same(ps[a].y, ps[b].y) && same(ps[a].y, p.y)) continue;\n        if (ps[a].y > ps[b].y) swap(a, b);\n        if (ps[a].y <= p.y && p.y < ps[b].y && p.x <= ps[a].x + (ps[b].x - ps[a].x) / (ps[b].y - ps[a].y) * (p.y - ps[a].y)) ++c;\n    }\n    return (c & 1) * 2;\n}\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int n; cin >> n;\n    vector<P> ps(n);\n    for (int i = 0; i < n; ++i) cin >> ps[i].x >> ps[i].y;\n    int q; cin >> q; while (q--) {\n        P p; cin >> p.x >> p.y;\n        cout << pip(ps, p) << '\\n';\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// {{{ header\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing i8   = int8_t;\nusing u8   = uint8_t;\nusing i16  = int16_t;\nusing u16  = uint16_t;\nusing i32  = int32_t;\nusing u32  = uint32_t;\nusing i64  = int64_t;\nusing u64  = uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\nusing f32  = float;\nusing f64  = double;\nusing f80  = __float80;\nusing f128 = __float128;\n// }}}\n\nconstexpr i64 INF = 1'010'000'000'000'000'000LL;\n\nconstexpr i64 MOD = 1'000'000'007LL;\n\nconstexpr f64 EPS = 1e-12;\n\nconstexpr f64 PI = 3.14159265358979323846;\n\n// {{{ util\n#define FOR(i, start, end) for(i64 i = (start), i##_end=(end); i < i##_end; ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,c,...) (([&](decltype((c)) cccc) { return (f)(begin(cccc), end(cccc), ## __VA_ARGS__); })(c))\n#define SLICE(f,c,l,r,...) (([&](decltype((c)) cccc, decltype((l)) llll, decltype((r)) rrrr) {\\\n    auto iiii = llll <= rrrr ? begin(cccc)+llll : end(cccc);\\\n    auto jjjj = llll <= rrrr ? begin(cccc)+rrrr : end(cccc);\\\n    return (f)(iiii, jjjj, ## __VA_ARGS__);\\\n})(c,l,r))\n\n#define GENERIC(f) ([](auto&&... args) -> decltype(auto) { return (f)(forward<decltype(args)>(args)...); })\n\ntemplate<typename C>\ni64 SIZE(const C& c) { return static_cast<i64>(c.size()); }\n\ntemplate<typename T, size_t N>\ni64 SIZE(const T (&)[N]) { return static_cast<i64>(N); }\n\nbool is_odd (i64 x) { return x % 2 != 0; }\nbool is_even(i64 x) { return x % 2 == 0; }\n\ntemplate<typename T> i64 cmp(T x, T y) { return (y<x) - (x<y); }\ntemplate<typename T> i64 sgn(T x) { return cmp(x, T(0)); }\n\n// Haskell の divMod と同じ\npair<i64,i64> divmod(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r<0) || (b<0 && r>0)) {\n        --q;\n        r += b;\n    }\n    return {q,r};\n}\n\ni64 div_ceil(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r>0) || (b<0 && r<0))\n        ++q;\n    return q;\n}\n\ni64 div_floor(i64 a, i64 b) {\n    return divmod(a,b).first;\n}\n\ni64 modulo(i64 a, i64 b) {\n    return divmod(a,b).second;\n}\n\nbool feq(f64 x, f64 y, f64 eps=EPS) {\n    return fabs(x-y) < eps;\n}\n\ntemplate<typename T, typename U>\nbool chmax(T& xmax, const U& x) {\n    if(xmax < x) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T, typename U>\nbool chmin(T& xmin, const U& x) {\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename InputIt>\nauto SUM(InputIt first, InputIt last) {\n    using T = typename iterator_traits<InputIt>::value_type;\n    return accumulate(first, last, T());\n}\n\ntemplate<typename ForwardIt, typename UnaryOperation>\nForwardIt transform_self(ForwardIt first, ForwardIt last, UnaryOperation op) {\n    return transform(first, last, first, op);\n}\n\ntemplate<typename C>\nvoid UNIQ(C& c) {\n    c.erase(ALL(unique,c), end(c));\n}\n\ntemplate<typename BinaryFunc, typename UnaryFunc>\nauto ON(BinaryFunc bf, UnaryFunc uf) {\n    return [bf,uf](const auto& x, const auto& y) {\n        return bf(uf(x), uf(y));\n    };\n}\n\ntemplate<typename T>\nvoid RD(T& x) {\n    cin >> x;\n#ifdef PROCON_LOCAL\n    assert(cin);\n#endif\n}\n\ntemplate<typename T>\nvoid RD(vector<T>& v, i64 n) {\n    v.reserve(n);\n    REP(_, n) {\n        T e; RD(e);\n        v.emplace_back(e);\n    }\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n    for(auto first = begin(v), it = first; it != end(v); ++it) {\n        if(it != first)\n            out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p) {\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\nvoid PRINT() {}\n\ntemplate<typename T, typename... TS>\nvoid PRINT(const T& x, const TS& ...args) {\n    cout << x;\n    if(sizeof...(args)) {\n        cout << ' ';\n        PRINT(args...);\n    }\n}\n\ntemplate<typename... TS>\nvoid PRINTLN(const TS& ...args) {\n    PRINT(args...);\n    cout << '\\n';\n}\n\ntemplate<typename T>\nvoid DBG_IMPL(i64 line, const char* expr, const T& value) {\n#ifdef PROCON_LOCAL\n    cerr << \"[L \" << line << \"]: \";\n    cerr << expr << \" = \" << value << \"\\n\";\n#endif\n}\n\n#define DBG(expr) DBG_IMPL(__LINE__, #expr, (expr))\n// }}}\n\n// {{{ init\nstruct ProconInit {\n    static constexpr int IOS_PREC = 15;\n    static constexpr bool AUTOFLUSH = false;\n\n    ProconInit() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(IOS_PREC);\n#ifdef PROCON_LOCAL\n        cerr << fixed << setprecision(IOS_PREC);\n#endif\n        if(AUTOFLUSH)\n            cout << unitbuf;\n    }\n} PROCON_INIT;\n// }}}\n\nstruct Vector {\n    f64 x, y;\n\n    Vector() : Vector(0,0) {}\n    Vector(f64 xx, f64 yy) : x(xx), y(yy) {}\n\n    const Vector operator-() const {\n        return Vector(-x,-y);\n    }\n    Vector& operator+=(const Vector& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vector& operator-=(const Vector& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vector& operator*=(f64 rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n    Vector& operator/=(f64 rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n\n    f64 norm() const { return x*x + y*y; }\n    f64 abs() const { return sqrt(norm()); }\n\n    Vector unit() const { return Vector(*this) /= this->abs(); }\n};\n\nconst Vector operator+(const Vector& lhs, const Vector& rhs) { return Vector(lhs) += rhs; }\nconst Vector operator-(const Vector& lhs, const Vector& rhs) { return Vector(lhs) -= rhs; }\nconst Vector operator*(const Vector& lhs, f64 rhs) { return Vector(lhs) *= rhs; }\nconst Vector operator*(f64 lhs, const Vector& rhs) { return Vector(rhs) *= lhs; }\nconst Vector operator/(const Vector& lhs, f64 rhs) { return Vector(lhs) /= rhs; }\n\nbool operator==(const Vector& lhs, const Vector& rhs) {\n    return feq(lhs.x,rhs.x) && feq(lhs.y,rhs.y);\n}\n\nf64 geo_dot(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.x + lhs.y*rhs.y;\n}\n\nf64 geo_cross(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.y - lhs.y*rhs.x;\n}\n\nVector geo_rotate(const Vector& v, f64 t) {\n    return Vector(v.x*cos(t)-v.y*sin(t), v.x*sin(t)+v.y*cos(t));\n}\n\nenum ABC {\n    ABC_CCW        =  1,\n    ABC_CW         = -1,\n    ABC_ON_BACK    =  2,\n    ABC_ON_FRONT   = -2,\n    ABC_ON_SEGMENT =  0,\n};\n\nABC geo_abc(const Vector& a, const Vector& b, const Vector& c) {\n    Vector x = b - a;\n    Vector y = c - a;\n    f64 cross = geo_cross(x,y);\n    if(cross > 0) return ABC_CCW;\n    if(cross < 0) return ABC_CW;\n    f64 dot = geo_dot(x,y);\n    if(dot < 0) return ABC_ON_BACK;\n    if(x.norm() < y.norm()) return ABC_ON_FRONT;\n    return ABC_ON_SEGMENT;\n}\n\nenum Containment {\n    CONT_IN,\n    CONT_ON,\n    CONT_OUT,\n};\n\nostream& operator<<(ostream& out, const Vector& v) {\n    return out << \"Vector(\" << v.x << \",\" << v.y << \")\";\n}\n\nstruct Segment {\n    Vector p1, p2;\n\n    Segment(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Segment(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n\n    Vector vec() const { return p2 - p1; }\n\n    f64 norm() const { return vec().norm(); }\n    f64 abs() const { return vec().abs(); }\n};\n\nostream& operator<<(ostream& out, const Segment& seg) {\n    out << \"Segment(\";\n    out << \"(\" << seg.p1.x << \",\" << seg.p1.y << \")\";\n    out << \",\";\n    out << \"(\" << seg.p2.x << \",\" << seg.p2.y << \")\";\n    out << \")\";\n    return out;\n}\n\nstruct Line {\n    Vector p1, p2;\n\n    Line(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Line(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n    Line(const Segment& seg) : p1(seg.p1), p2(seg.p2) {}\n\n    Vector vec() const { return p2 - p1; }\n};\n\nostream& operator<<(ostream& out, const Line& line) {\n    out << \"Line(\";\n    out << \"(\" << line.p1.x << \",\" << line.p1.y << \")\";\n    out << \",\";\n    out << \"(\" << line.p2.x << \",\" << line.p2.y << \")\";\n    out << \")\";\n    return out;\n}\n\nstruct Circle {\n    Vector c;\n    f64 r;\n\n    Circle(const Vector& cc, f64 rr) : c(cc), r(rr) {}\n};\n\nostream& operator<<(ostream& out, const Circle& cir) {\n    out << \"Circle(\";\n    out << \"(\" << cir.c.x << \",\" << cir.c.y << \")\";\n    out << \",\";\n    out << cir.r;\n    out << \")\";\n    return out;\n}\n\nstruct Polygon {\n    vector<Vector> ps;\n\n    explicit Polygon(const vector<Vector>& ps_arg) : ps(ps_arg) {}\n\n    f64 area_2x() const {\n        i64 n = SIZE(ps);\n        if(n < 3) return 0;\n        f64 sum = 0;\n        REP(i, n) {\n            sum += geo_cross(cur(i), nex(i));\n        }\n        return fabs(sum);\n    }\n    f64 area() const { return area_2x() / 2; }\n\n    // 凸性判定(全ての内角が180度以下)\n    // 3点が同一直線上にあるケースは許容する(この辺ちょっと怪しい)\n    // 点の数が3未満なら false\n    bool is_convex() const {\n        i64 n = SIZE(ps);\n        if(n < 3) return false;\n        i64 abc = 0;\n        REP(i, n) {\n            ABC abc_cur = geo_abc(pre(i), cur(i), nex(i));\n            if(abc_cur != ABC_CCW && abc_cur != ABC_CW) continue;\n            if(abc_cur*abc == -1) return false;\n            abc = abc_cur;\n        }\n        return true;\n    }\n\n    // 点の包含判定\n    // 2角形以下の場合 CONT_OUT を返す\n    Containment containment(const Vector& p) const {\n        i64 n = SIZE(ps);\n        if(n < 3) return CONT_OUT;\n        i64 cnt = 0;\n        REP(i, n) {\n            Vector a = cur(i) - p;\n            Vector b = nex(i) - p;\n            if(feq(geo_cross(a,b),0) && geo_dot(a,b) <= 0) return CONT_ON;\n            if(a.y > b.y) swap(a,b);\n            if(a.y <= 0 && b.y > 0 && geo_cross(a,b) > 0) ++cnt;\n        }\n        DBG(cnt);\n        return is_odd(cnt) ? CONT_IN : CONT_OUT;\n    }\n\n    Vector cur(i64 i) const { return ps[i]; }\n    Vector pre(i64 i) const { return ps[modulo(i-1,SIZE(ps))]; }\n    Vector nex(i64 i) const { return ps[modulo(i+1,SIZE(ps))]; }\n};\n\nostream& operator<<(ostream& out, const Polygon& poly) {\n    out << \"Polygon(\";\n    i64 n = SIZE(poly.ps);\n    REP(i, n) {\n        const Vector& p = poly.ps[i];\n        out << \"(\" << p.x << \",\" << p.y << \")\";\n        if(i != n-1)\n            out << \",\";\n    }\n    out << \")\";\n    return out;\n}\n\nVector geo_project(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    f64 r = geo_dot(p-line.p1, v) / v.norm();\n    return line.p1 + r*v;\n}\n\nbool geo_intersect(const Segment& x, const Segment& y) {\n    return geo_abc(x.p1,x.p2,y.p1) * geo_abc(x.p1,x.p2,y.p2) <= 0 &&\n           geo_abc(y.p1,y.p2,x.p1) * geo_abc(y.p1,y.p2,x.p2) <= 0;\n}\n\nbool geo_intersect(const Circle& cir1, const Circle& cir2) {\n    return (cir1.c-cir2.c).norm() <= pow(cir1.r+cir2.r,2);\n}\n\nf64 geo_distance(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    return fabs(geo_cross(v,p-line.p1)) / v.abs();\n}\n\nf64 geo_distance(const Segment& seg, const Vector& p) {\n    if(geo_dot( seg.vec(), p-seg.p1) < 0) return (p-seg.p1).abs();\n    if(geo_dot(-seg.vec(), p-seg.p2) < 0) return (p-seg.p2).abs();\n    return geo_distance(Line(seg), p);\n}\n\nf64 geo_distance(const Segment& seg1, const Segment& seg2) {\n    if(geo_intersect(seg1,seg2)) return 0;\n    return min({\n        geo_distance(seg1, seg2.p1),\n        geo_distance(seg1, seg2.p2),\n        geo_distance(seg2, seg1.p1),\n        geo_distance(seg2, seg1.p2),\n    });\n}\n\nbool geo_intersect(const Circle& cir, const Line& line) {\n    return geo_distance(line, cir.c) <= cir.r;\n}\n\nVector geo_crosspoint(const Segment& x, const Segment& y) {\n    Line ly = Line(y);\n    f64 d1 = geo_distance(ly, x.p1);\n    f64 d2 = geo_distance(ly, x.p2);\n    return x.p1 + (d1/(d1+d2))*x.vec();\n}\n\n// 接する場合も同じ座標2つを返す\nvector<Vector> geo_crosspoints(const Circle& cir, const Line& line) {\n    if(!geo_intersect(cir,line)) return {};\n    Vector p = geo_project(line, cir.c);\n    Vector e = line.vec().unit();\n    f64 t = sqrt(cir.r*cir.r - (p-cir.c).norm());\n    return { p+t*e, p-t*e };\n}\n\n// 接する場合も同じ座標2つを返す\nvector<Vector> geo_crosspoints(const Circle& cir1, const Circle& cir2) {\n    if(!geo_intersect(cir1,cir2)) return {};\n    Vector v = cir2.c - cir1.c;\n    f64 d = v.abs();\n    f64 t = acos((cir1.r*cir1.r + d*d - cir2.r*cir2.r) / (2*cir1.r*d));\n    return {\n        cir1.c + geo_rotate(v, t) / d * cir1.r,\n        cir1.c + geo_rotate(v,-t) / d * cir1.r,\n    };\n}\n\nvoid RD(Vector& v) {\n    RD(v.x);\n    RD(v.y);\n}\n\n//--------------------------------------------------------------------\n\nvoid solve() {\n    i64 N; RD(N);\n    vector<Vector> ps; RD(ps, N);\n    Polygon poly(ps);\n\n    i64 Q; RD(Q);\n    REP(_, Q) {\n        Vector p; RD(p);\n\n        Containment ans = poly.containment(p);\n\n        switch(ans) {\n        case CONT_IN:  PRINTLN(2); break;\n        case CONT_ON:  PRINTLN(1); break;\n        case CONT_OUT: PRINTLN(0); break;\n        }\n    }\n}\n\nsigned main() {\n    \n\n    solve();\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\ntypedef complex<double> point;\ntypedef vector<point> vertex;\n/*\nx 座標は p.real(), real(p), y 座標は p.imag(), imag(p) とする．\n足し算，引き算，スカラー倍は定義済み．\noperator < は入っていないので自分で namespace std に突っ込む．*/\nnamespace std{\n    bool operator < (const point &lhs,const point &rhs){\n        if(real(lhs) == real(rhs)){\n            return imag(lhs) < imag(rhs);\n        }else{\n            return real(lhs) < real(rhs);\n        }\n    }\n}\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b);\n\n\n\n// ベクタの長さ\ndouble vector_length(point a){\n    return abs(a);\n}\n\n// 二点間距離\ndouble point_distance(point a,point b){\n    return abs(a-b);\n}\n\n// 単位ベクトル\npoint unit_vector(point a){\n    return a / abs(a);\n}\n\n// 法線ベクトル\npair<point,point> normal_vector(point a){\n    point n1 = a * point(0,1);\n    point n2 = a * point(0,-1);\n    return make_pair(n1,n2);\n}\n\n// 点が一緒かどうか\nbool point_eq(point a,point b){\n    return abs(a-b) < EPS;\n}\n// 内積 (dot product) : a・b = |a||b|cosΘ\ndouble dot(point a,point b){\n    return real(conj(a)*b);\n}\n\n// 外積 (cross product) : |a×b| = |a||b|sinΘ\ndouble cross(point a,point b){\n    return imag(conj(a)*b);\n}\n//ラジアンに変換\ndouble radian(double angle){\n    return angle/180.0*M_PI;\n}\n//度数に変換\ndouble degree(double radian){\n    return radian*180.0/M_PI;\n}\n\n// a1,a2を端点とする線分(la)とb1,b2を端点(lb)とする線分の交差判定\nbool is_intersected_linesegment(point a1,point a2,point b1,point b2){\n    if(max(a1.real(),a2.real()) + EPS < min(b1.real(),b2.real())) return false;\n    if(max(b1.real(),b2.real()) + EPS < min(a1.real(),a2.real())) return false;\n    if(max(a1.imag(),a2.imag()) + EPS < min(b1.imag(),b2.imag())) return false;\n    if(max(b1.imag(),b2.imag()) + EPS < min(a1.imag(),a2.imag())) return false;\n    return (cross(a2-a1,b1-a1)*cross(a2-a1,b2-a1) < EPS) and\n    (cross(b2-b1,a1-b1)*cross(b2-b1,a2-b1) < EPS);\n\n}\n\n\n// a1,a2を端点とする線分(la)とb1,b2を端点とする線分(lb)の交点計算\npoint intersection_point_linesegment(point a1,point a2,point b1,point b2) {\n    if(a1 == b1 or a1 == b2) return a1;\n    if(a2 == b1 or a2 == b2) return a2;\n    point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2-a1) * t;\n}\n\n// 線分同士の最短距離\ndouble dist_linesegment_and_linesegment(point a1,point a2,point b1,point b2){\n    if(is_intersected_linesegment(a1,a2,b1,b2)){\n        return 0;\n    }\n    return min(min(dist_linesegment_and_point(a1,a2,b1),\n               dist_linesegment_and_point(a1,a2,b2)),\n    min(dist_linesegment_and_point(b1,b2,a1),\n        dist_linesegment_and_point(b1,b2,a2)));\n}\n\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\n// verify\nbool is_orthogonal(point a1,point a2,point b1,point b2) {\n    return abs(dot(a1-a2,b1-b2))< EPS;\n}\n\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\n//verify\nbool is_parallel(point a1,point a2,point b1,point b2) {\n    return abs(cross(a2-a1,b2-b1)) < EPS;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nbool is_intersected_line(point a1,point a2,point b1,point b2) {\n    return not is_parallel(a1,a2,b1,b2);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\npoint intersection_line(point a1,point a2,point b1,point b2) {\n    point a = a2 - a1,b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// 直線と点との距離\ndouble dist_line_and_point(point a1,point a2,point b){\n    return abs(cross(a2-a1,b-a1)) / abs(a2-a1);\n}\n\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b){\n    if(dot(a2-a1,b-a1) < EPS) return abs(b-a1);\n    if(dot(a1-a2,b-a2) < EPS) return abs(b-a2);\n    return dist_line_and_point(a1,a2,b);\n}\n\n// 直線と点の最短距離を実現する直線の点(すいせんの足)(みけんしょう)\npoint nearest_point_line_and_point(point a1,point a2,point b){\n    return a1 + (a2-a1) * dot((a2-a1),(b-a1)) / norm(a2-a1);\n}\n\n// 線分と点の最短距離を実現する線分嬢の点(みけんしょう)\npoint nearest_point_linesegment_and_point(point a1,point a2,point b){\n    if(dot(a2-a1,b-a1) < EPS) return a1;\n    if(dot(a1-a2,b-a2) < EPS) return a2;\n    return nearest_point_line_and_point(a1,a2,b);\n}\n// 円と線分の交差判定\nbool is_cross_linesegment_and_circle(point c,double r,point a1,point a2){\n    return (dist_linesegment_and_point(a1,a2,c) < r+EPS and\n            (r < abs(c-a1) + EPS or r < abs(c-a2) + EPS));\n}\n\n//線の進行方向\nint ccw(point p0, point p1, point p2)\n{\n    point a = p1 - p0;\n    point b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n\n// 点が真に多角形(凸?)の中にはいっているか\nbool is_inner_point_vertex(const vector<point> &ps,point a){\n    int cc = ccw(ps[0],ps[1],a);\n    if(not(cc == 1 or cc == -1)) return false;\n    for(size_t i=0;i<ps.size();i++){\n        if(cc != ccw(ps[i],ps[(i+1)%ps.size()],a)) return false;\n    }\n    return true;\n}\n\n// 点が辺上、もしくは内部にある。(未検証)\nbool is_inner_point_vertex_or_line(const vector<point> &ps,point a){\n    for(size_t i=0;i<ps.size();i++){\n        if(dist_linesegment_and_point(ps[i],ps[(i+1)%ps.size()],a) < EPS){\n            return true;\n        }\n    }\n    return is_inner_point_vertex(ps,a);\n}\n\n\n// 凸包 (UVA 109)\nvector<point> convex_hull(vector<point> ps){\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(),ps.end());\n    vector<point> ch(2*n);\n    for(int i=0;i<n;ch[k++] = ps[i++]){\n        while(k >= 2 and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n    }\n    for(int i=n-2,t=k+1;i>=0;ch[k++]=ps[i--]){\n        while(k >= t and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n// remember,pts make convex.\n// (http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ACAC002&pid=C)\ndouble convex_diameter(const vector<point>& pts){\n    const int n = pts.size();\n    int is=0,js=0; // initial antipode.\n    for(int i=1;i<n;i++){\n        if(pts[i].imag() > pts[is].imag()) is = i;\n        if(pts[i].imag() < pts[js].imag()) js = i;\n    }\n    double maxd = abs(pts[is]-pts[js]);\n    int i,j,maxi,maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n        if(cross(pts[(i+1)%n]-pts[i],\n           pts[(j+1)%n]-pts[j]) >= 0){\n            j = (j+1)%n;\n    }else{\n        i = (i+1)%n;\n    }\n    if(abs(pts[i]-pts[j]) > maxd){\n        maxd = abs(pts[i]-pts[j]);\n        maxi = i;maxj = j;\n    }\n} while(not(i == is and j == js));\n    // pts[maxi],pts[maxj] is pair of max diff.\nreturn maxd;\n}\n\n// 円と円の交点(2点ある前提)\nvector<point> circles_point(point c1,double r1,point c2,double r2){\n    double d = abs(c1-c2);\n    double s = (r1+r2+d) / 2;\n    double S = sqrt(s*(s-r1)*(s-r2)*(s-d));\n    double h = 2 * S / d;\n    point v = (c2-c1) / (abs(c2-c1));\n\n    double m = sqrt(r1*r1 - h*h);\n\n    vector<point> ret;\n    ret.push_back(c1 + m*v+h*v*point(0,1));\n    ret.push_back(c1 + m*v-h*v*point(0,1));\n    return ret;\n}\n\n// clockwiseだと負\ndouble triangle_area(point a,point b,point c){\n    return cross(b-a,c-a)/2;\n}\n\n// clockwiseだと負\ndouble vertex_area(vector<point> v){\n    double ret = 0;\n    for(int i=1;i<v.size()-1;i++){\n        ret += triangle_area(v[0],v[i],v[i+1]);\n    }\n    return ret;\n}\n/*多角形の面積を求める*/\n//verify\ndouble area_vertex(const vertex& g){\n    double S =0;\n    for(int i =0;i <g.size();i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\n//円同士が互いに含まれているかどうか\n//中心が(xa,ya)で半径r1の円Aと、中心が(xb,yb) で半径 r2 の円 B が与えられたとき、 B が A の中にあるとき 2、A が B の中にあるとき -2、A の円周と B の円周が交わっている場合 1、A と B が重なっていないとき 0 \n//verify\nint Circles_Intersection(point a,double r1,point b,double r2){\n    double dp =abs(a-b);//中心間の距離\n    double dr =r1+r2;//円の半径の合計\n    if(dp >dr){\n        return 0;\n    }else if(dp +r1 <r2){\n        return -2;\n    }else if(dp +r2 <r1){\n        return 2;\n    }else if(dp <=dr){\n        return 1;\n    }\n    return -100;\n}\npoint projection(point p1, point p2, point p3) //直線p1p2 上への写像の点\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\npoint reflection(point p1, point p2, point p3) //直線p1p2 上への反射した点(線分p1p2に対してp3を線対称)\n{\n\n    return (p3 + 2.0*(projection(p1, p2, p3) - p3));\n}\n//凸性判定\n/*与えられた多角形 P が凸かどうかを判定する．一周回ってみて，右向きの辺がないことを確かめればよい*/\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(vertex &P) {\n\n    for (int i = 0; i < P.size(); ++i){\n        int d =ccw(prev(P, i), curr(P, i), next(P, i));\n        if(d==-1) return false;\n    }\n    return true;\n}\n/*多角形 g と点 t について、t が g に含まれる場合 \"2\"、t が g の辺上にある場合 \"1\"、それ以外の場合 \"0\" と出力せよ。*/\nint contain(point p,vertex pol){\n  bool in=false;\n  for(int i=0;i<pol.size();i++){\n    point a=curr(pol,i)-p,b=next(pol,i)-p;\n    if(a.imag()>b.imag())swap(a,b);\n    if(a.imag()<=0 && 0<b.imag() && cross(a,b)<0)in=!in;\n    if(cross(a,b)==0 && dot(a,b)<=0)return 1;\n  }\n  return in?2:0;\n}\n\nint main(){\n    double x1,y1,x2,y2,x3,y3,x4,y4;\n    int q;\n    vertex g;\n    cin>>q;// 点の進行方向\n    for(int i =0;i <q;i++){\n     cin>>x1>>y1;\n     point a(x1,y1);\n     g.push_back(a);\n }\n int n;\n cin>>n;\n for(int i =0;i < n;i++){\n    cin >>x2>>y2;\n    point v(x2,y2);\n    cout <<contain(v,g)<<endl;\n }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-10\n\nclass Point {\npublic:\n    double x, y;\n\n    Point (double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator-(Point p) {\n        return Point(x - p.x, y - p.y);\n    }\n\n    double dot(Point p) {\n        return x * p.x + y * p.y;\n    }\n    \n    double cross(Point p) {\n        return x * p.y - y * p.x;\n    }\n\n    int contains(vector<Point> g) {\n        int n = g.size();\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            Point a = g[i] - *this, b = g[(i + 1) % n] - *this;\n            if (abs(a.cross(b)) < EPS && a.dot(b) < EPS) {\n                return 1;\n            }\n            if (a.y > b.y) {\n                swap(a, b);\n            }\n            if (a.y < EPS && EPS < b.y && a.cross(b) > EPS) {\n                cnt++;\n            }\n        }\n        return (cnt % 2 ? 2 : 0);\n    }\n};\n\nint main() {\n    int n, q;\n    cin >> n;\n    vector<Point> polygon(n);\n    for (int i = 0; i < n; i++) {\n        cin >> polygon[i].x >> polygon[i].y;\n    }\n    cin >> q;\n    Point p;\n    while (q--) {\n        cin >> p.x >> p.y;\n        cout << p.contains(polygon) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\n// ???????§???¢????????¨?????? O(n)\nint inPolygon(P p, const vector<P> &ps) {\n    int n = ps.size();\n    bool in = false;\n    rep(i,0,n) {\n        P a = ps[i] - p;\n        P b = ps[(i+1) % n] - p;\n        if(EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 2;\n        if(a.Y > b.Y) swap(a,b);\n        if((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a,b), 0)) in = !in;\n    }\n    return in;\n}\n\nint main() {\n    int n; cin >> n;\n    vector<P> ps;\n    P a;\n    rep(i,0,n) {\n        cin >> a.X >> a.Y;\n        ps.pb(a);\n    }\n\n    map<int, int> d;\n    d[2] = 1;\n    d[1] = 2;\n\n    int m; P b;\n    cin >> m;\n    rep(i,0,m) {\n        cin >> b.X >> b.Y;\n        cout << d[inPolygon(b, ps)] << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (get_position(s_right, poly[(i == 0 ? n - 1 : i - 1)]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c)-arg(b);\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.01 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define FOR(i,n,m) for(int i=(int)(n); i<=(int)(m); i++)\n#define RFOR(i,n,m) for(int i=(int)(n); i>=(int)(m); i--)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define RITR(x,c) for(__typeof(c.rbegin()) x=c.rbegin();x!=c.rend();x++)\n#define setp(n) fixed << setprecision(n)\n\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\n#define ll long long\n#define vll vector<ll>\n#define vi vector<int>\n#define pll pair<ll,ll>\n#define pi pair<int,int>\n\n#define all(a) (a.begin()),(a.end())\n#define rall(a) (a.rbegin()),(a.rend())\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define ins insert\n\nusing namespace std;\n\n//-------------------------------------------------\n//--Geometry Template (Plane)\n//-------------------------------------------------\n\nusing lf = double;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1);\n\n#define sgn(x) (((x)<-EPS)?-1:((x)>EPS)?1:0)\n#define EQ(x,y) (sgn((y)-(x))==0)\n\nstruct V {\n    lf x,y;\n    V(){}\n    V(lf x, lf y):x(x),y(y){}\n    V(const V &v):x(v.x),y(v.y){}\n    V& operator+=(const V &v){x+=v.x; y+=v.y; return *this;}\n    V& operator-=(const V &v){x-=v.x; y-=v.y; return *this;}\n    V& operator*=(lf k){x*=k; y*=k; return *this;}\n    V& operator/=(lf k){x/=k; y/=k; return *this;}\n    V operator+(const V &v){return V(*this)+=v;}\n    V operator-(const V &v){return V(*this)-=v;}\n    V operator*(lf k){return V(*this)*=k;}\n    V operator/(lf k){return V(*this)/=k;}\n    V operator-(){return V(-x,-y);}\n    lf sq(){return x*x+y*y;}\n    lf norm(){return sqrt(sq());}\n    V unit(){return V(*this)/=norm();}\n    lf arg(){return atan2(y,x);}\n    V rot(lf c, lf s){return V(x*c-y*s,x*s+y*c);}\n    V rot(lf a){return rot(sin(a),cos(a));}\n    V rot90(){return V(-y,x);}\n    bool operator<(const V &v){return x<v.x;}\n    friend ostream& operator<<(ostream &os, const V &v){return os<<'('<<v.x<<\", \"<<v.y<<')';}\n};\n\nlf dot(const V &a, const V &b){return a.x*b.x+a.y*b.y;}\nlf det(const V &a, const V &b){return a.x*b.y-a.y*b.x;}\n\nint ccw(V a, V b, V c){\n    b-=a; c-=a;\n    if (sgn(det(b,c))>0) return 1;\n    else if(sgn(det(b,c))<0) return -1;\n    else if(sgn(dot(b,c))<0) return 2;\n    else if(sgn(b.norm()-c.norm())<0) return -2;\n    return 0;\n}\n\nstruct Line {\n    V p,q;\n    Line(){}\n    Line(const V &p, const V &q):p(p),q(q){}\n    Line(const Line &l):Line(l.p,l.q){}\n    V unit(){return (q-p).unit();}\n    lf arg(){return (q-p).arg();}\n    Line rot(lf c, lf s){return Line(p.rot(c,s),q.rot(c,s));}\n    Line rot(lf a){return Line(p.rot(a),q.rot(a));}\n    Line rot90(){return Line(p.rot90(),q.rot90());}\n};\n\nstruct Segment : Line {\n    Segment(){}\n    Segment(const V &p, const V &q):Line(p,q){}\n    Segment(const Segment &s):Line(s){}\n    lf sq(){return (Line::q-Line::p).sq();}\n    lf norm(){return (Line::q-Line::p).norm();}\n};\n\n// functions about lines\nbool parallel(V &a, V &b){return EQ(det(a,b),0.0);}\nbool parallel(Line &a, Line &b){return EQ(det(a.q-a.p,b.q-b.p),0.0);}\nbool orthogonal(V &a, V &b){return EQ(dot(a,b),0.0);}\nbool orthogonal(Line &a, Line &b){return EQ(dot(a.q-a.p,b.q-b.p),0.0);}\n\nbool samel(Line &a, Line &b){return parallel(a,b)&&EQ(det(a.q-a.p,b.p-a.p),0.0);}\nbool insec(Line &a, Line &b){return !parallel(a,b);}\nbool insec(Segment &a, Segment &b){\n    int c1 = ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q);\n    int c2 = ccw(b.p,b.q,a.p)*ccw(b.p,b.q,a.q);\n    return (c1<=0 && c2<=0);\n}\nbool insec(Line &a, Segment &b){return ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q)<=0;}\n\n// use only if lines have intersection\nV cpoint(Line &a, Line &b){\n    V r(a.q-a.p);\n    r *= det(b.p-a.p,b.q-b.p)/det(a.q-a.p,b.q-b.p);\n    return a.p+r;\n}\n\nlf distance(V &a, V &b){return (b-a).norm();}\nlf distance(Line &l, V &v){return abs(det((l.q-l.p).unit(),v-l.p));}\nlf distance(Line &a, Line &b){return (parallel(a,b))?distance(a,b.p):0.0;}\nlf distance(Segment &s, V &v){\n    if (sgn(dot(s.q-s.p,v-s.p))<0) return distance(s.p,v);\n    else if(sgn(dot(s.p-s.q,v-s.q))<0) return distance(s.q,v);\n    return distance((Line&)s,v);\n}\nlf distance(Segment &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    lf A=min(distance(a,b.p),distance(a,b.q));\n    lf B=min(distance(b,a.p),distance(b,a.q));\n    return min(A,B);\n}\nlf distance(Line &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    return min(distance(a,b.p),distance(a,b.q));\n}\n\nV subdiv(V &a, V &b, lf m, lf n){return (a*n+b*m)/(m+n);}\nV outside(V &a, V &b, lf m, lf n){return (-a*n+b*m)/(m-n);}\nV ppfoot(Line &l, V &v){\n    V u = (l.q-l.p).unit();\n    return l.p+u*dot(u,v-l.p);\n}\nV reflect(Line &l, V &v){\n    V f = ppfoot(l,v);\n    return f+(f-v);\n}\n\nLine vbsector(V &a, V &b){\n    V m = (a+b)/2;\n    return Line(m, m+(b-a).rot90());\n}\nLine absector(V &c, V &a, V &b){\n    lf m=(a-c).norm(), n=(b-c).norm();\n    return Line(c,subdiv(a,b,m,n));\n}\nLine perpend(V &c, V &a, V &b){return Line(c,c+(b-a).rot90());}\n\n//-------------------------------------------------\n//--Polygon (depends on Geometry Template)\n//-------------------------------------------------\n\n//anti-clockwise\nstruct Polygon {\n    vector<V> ps; int n;\n    Polygon():n(0){}\n    Polygon(int n):n(n),ps(n){}\n    void push(const V &v){ps.push_back(v), n++;}\n    void pop(){ps.pop_back(), n--;}\n    V& operator[](int k){return ps[k%n];}\n};\n\nlf area(Polygon &p){\n    lf ret=0.0;\n    for(int i=0; i<p.n; i++)\n        ret+=det(p[i],p[i+1])/2;\n    return ret;\n}\n\nV gravity(Polygon &p){\n    V ret(0,0); lf wsum=0.0;\n    for(int i=0; i<p.n; i++){\n        lf w = det(p[i],p[i+1]);\n        ret+=(p[i]+p[i+1])/3*w;\n        wsum+=w;\n    }\n    return ret/wsum;\n}\n\nbool convex(Polygon &p){\n    for(int i=0; i<p.n; i++)\n        if (sgn(det(p[i]-p[i+1],p[i+1]-p[i+2]))<0) return false;\n    return true;\n}\n\nPolygon convex_full(vector<V> &ps){\n    Polygon ret;\n    sort(ps.begin(), ps.end());\n    for(int i=0; i<ps.size(); i++){\n        while(ret.n>1 && sgn(det(ret[ret.n-1]-ret[ret.n-2],ps[i]-ret[ret.n-1]))<=0) ret.pop();\n        ret.push(ps[i]);\n    }\n    for(int i=ps.size()-2, t=ret.n; i>=0; i--){\n        while(ret.n>t && sgn(det(ret[ret.n-1]-ret[ret.n-2],ps[i]-ret[ret.n-1]))<=0) ret.pop();\n        ret.push(ps[i]);\n    }\n    ret.pop();\n    return ret;\n}\n\n// OUT=0, ON=1, IN=2\nint contain(Polygon &p, const V &v){\n    int ret=0;\n    for(int i=0; i<p.n; i++){\n        V a=p[i]-v, b=p[i+1]-v;\n        if (a.y>b.y) swap(a,b);\n        if (sgn(a.y)<0 && sgn(b.y)>=0 && sgn(det(a,b))<0) ret=2-ret;\n        if (EQ(det(a,b),0.0) && sgn(dot(a,b))<=0) return 1;\n    }\n    return ret;\n}\n\n//-------------------------------------------------\n\nint main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout<<setp(12);\n    int n; cin>>n;\n    Polygon poly;\n    rep(i,n){\n        int x,y; cin>>x>>y;\n        poly.push(V(x,y));\n    }\n    int q; cin>>q;\n    while(q--){\n        int x,y; cin>>x>>y;\n        cout<<contain(poly,V(x,y))<<\"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        int pl = 0, m = 0;\n        bool c[4] = {0};\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            if (isIntersectSS(p[j], next, t, Point(-10001, -10001))) c[0] = true;\n\t\t\tif (isIntersectSS(p[j], next, t, Point(-10001, 10001))) c[1] = true;\n\t\t\tif (isIntersectSS(p[j], next, t, Point(10001, -10001))) c[2] = true;\n\t\t\tif (isIntersectSS(p[j], next, t, Point(10001, 10001))) c[3] = true;\n        }\n\t\t\n\t\tprintf(\"%d\\n\", state ? state : 2 * ((c[0] + c[1] + c[2] + c[3]) == 4));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\t\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n \ntypedef pair<point,point> pp;\ntypedef vector<point> VP;\nconst point O{0,0};\n \nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble ip=IP(A,X),cp=CP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"Counter_Clockwise\";\n\t\tif(cp<-eps) return \"Clockwise\";\n\t\tif(ip<-eps) return \"Online_Back\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"On_Segment\";\n\t\treturn \"Online_Front\";\n\t}\n\tdouble Heron(point A,point B,point C){\n\t\tdouble a=Length(B,C),b=Length(C,A),c=Length(A,B),s=(a+b+c)/2;\n\t\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n\t}\n\tdouble Area(VP p){\n\t\tdouble sum=0,cp;\n\t\tp.push_back(p[0]);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end();i++){\n\t\t\tcp=CP(*(i-1),*i);\n\t\t\tif(cp>0) sum+=Heron(O,*(i-1),*i);\n\t\t\telse if(cp<0) sum-=Heron(O,*(i-1),*i);\n\t\t}\n\t\treturn sum;\n\t}\n\tstring Containment_polyon_point(VP p,point x){\n\t\tstring s;\n\t\tdouble cp;\n\t\tp.push_back(p[0]);\n\t\tp.push_back(p[1]);\n\t\tdouble sum,area=Area(p);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end()-1;i++){\n\t\t\ts=Counter_Clockwise(pp(*(i-1),*i),x);\n\t\t\tcp=CP(*i-*(i-1),*(i+1)-*(i-1));\n\t\t\tif(s[0]=='O') return \"On_side\";\n\t\t\tif(cp>0) sum+=Heron(x,*i,*(i+1));\n\t\t\telse sum-=Heron(x,*i,*(i+1));\n\t\t}\n\t\tif(fabs(sum-area)<eps) return \"Containment\";\n\t\treturn \"not_Containment\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n};\n\nint N,Q;\nVP p;\npoint q;\n\nint main(){\n\tGeom geo;\n\tcin>>N;\n\tp=VP(N);\n\tfor(VP::iterator i=p.begin();i!=p.end();i++) geo.Point_in(*i);\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tgeo.Point_in(q);\n\t\tstring s=geo.Containment_polyon_point(p,q);\n\t\tif(s==\"Containment\") cout<<2<<endl;\n\t\telse if(s==\"On_side\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <numeric>\n#include <functional>\n\nusing namespace std;\n\n//BEGIN\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n#define Pi 3.141592653589793238\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(const double& k) const { return Point(x * k, y * k); }\n\tPoint operator/(const double& k) const { return Point(x / k, y / k); }\n\n\tfriend istream& operator>>(istream& is, Point& p) {\n\t\tis >> p.x >> p.y;\n\t\treturn is;\n\t}\n\n\tbool operator==(const Point& p) const { return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS); }\n\tbool operator<(const Point& p) const { return (x != p.x ? x < p.x : y < p.y); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nstruct EndPoint {\n\tPoint p;\n\tint seg, st;\n\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator<(const EndPoint& ep) const {\n\t\tif (p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\n\tfriend istream& operator>>(istream& is, Segment& s) {\n\t\tis >> s.p1 >> s.p2;\n\t\treturn is;\n\t}\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersectSS(Segment s1, Segment s2) {\n\treturn intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersectCS(Circle c, Segment s) {\n\tif (norm(project(s, c.c) - c.c) - c.r * c.r > EPS) return 0;\n\tdouble d1 = abs(c.c - s.p1), d2 = abs(c.c - s.p2);\n\tif (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n\tif ((d1 < c.r - EPS && d2 > c.r + EPS) || (d1 > c.r + EPS && d2 < c.r - EPS)) return 1;\n\tPoint h = project(s, c.c);\n\tif (dot(s.p1 - h, s.p2 - h) < 0) return 2;\n\treturn 0;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (equals(d, r)) return 3;\n\tif (d > r) return 4;\n\tif (equals(d + c2.r, c1.r)) return 1;\n\tif (d + c2.r < c1.r) return 0;\n\treturn 2;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n\t\t\t   getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\nPoint getCrossPointLL(Line l1, Line l2) {\n\tdouble a = cross(l1.p2 - l1.p1, l2.p2 - l2.p1);\n\tdouble b = cross(l1.p2 - l1.p1, l1.p2 - l2.p1);\n\tif (abs(a) < EPS && abs(b) < EPS) return l2.p1;\n\treturn l2.p1 + (l2.p2 - l2.p1) * (b / a);\n}\n\nPoint getCrossPointSS(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\nvector<Point> getCrossPointCL(Circle c, Line l) {\n\tvector<Point> ps;\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tif (equals(getDistanceLP(l, c.c), c.r)) {\n\t\tps.push_back(pr);\n\t\treturn ps;\n\t}\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\tps.push_back(pr + e * base); ps.push_back(pr - e * base);\n\treturn ps;\n}\n\nvector<Point> getCrossPointCS(Circle c, Segment s) {\n\tLine l(s);\n\tvector<Point> ps = getCrossPointCL(c, l);\n\tif (intersectCS(c, s) == 2) return ps;\n\tif (dot(l.p1 - ps[0], l.p2 - ps[0]) < 0) ps[1] = ps[0];\n\telse ps[0] = ps[1];\n\treturn ps;\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nvector<Point> getCrossPointCC(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tvector<Point> ps;\n\tps.push_back(c1.c + polar(c1.r, t + a)); ps.push_back(c1.c + polar(c1.r, t - a));\n\treturn ps;\n}\n\nvector<Point> tangentCP(Circle c, Point p) {\n\treturn getCrossPointCC(c, Circle(p, sqrt(norm(c.c - p) - c.r * c.r)));\n}\n\nvector<Line> tangentCC(Circle c1, Circle c2) {\n\tvector<Line> ls;\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble g = norm(c1.c - c2.c);\n\tif (equals(g, 0)) return ls;\n\tPoint u = (c2.c - c1.c) / sqrt(g);\n\tPoint v = Point(-u.y, u.x);\n\tfor (int s = 1; s >= -1; s -= 2) {\n\t\tdouble h = (c1.r + s * c2.r) / sqrt(g);\n\t\tif (equals(1, h * h)) ls.push_back(Line(c1.c + u * c1.r, c1.c + (u + v) * c1.r));\n\t\telse if (1 - h * h > 0) {\n\t\t\tPoint uu = u * h, vv = v * sqrt(1 - h * h);\n\t\t\tls.push_back(Line(c1.c + (uu + vv) * c1.r, c2.c - (uu + vv) * c2.r * s));\n\t\t\tls.push_back(Line(c1.c + (uu - vv) * c1.r, c2.c - (uu - vv) * c2.r * s));\n\t\t}\n\t}\n\treturn ls;\n}\n\n// IN:2,ON:1,OUT:0\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif (ccw(p[(i - 1 + n) % n], p[i], p[(i + 1) % n]) == CLOCKWISE) return false;\n\treturn true;\n}\n\nPolygon convexHull(Polygon p) {\n\tPolygon u, l;\n\tif (p.size() < 3) return p;\n\tsort(p.begin(), p.end());\n\tu.push_back(p[0]); u.push_back(p[1]);\n\tl.push_back(p[p.size() - 1]); l.push_back(p[p.size() - 2]);\n\tfor (int i = 2; i < (int)p.size(); ++i) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tu.pop_back();\n\t\tu.push_back(p[i]);\n\t}\n\tfor (int i = p.size() - 3; i >= 0; --i) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tl.pop_back();\n\t\tl.push_back(p[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\treturn l;\n}\n\ndouble area(Polygon p) {\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i)\n\t\tres += cross(p[i], p[(i + 1) % p.size()]) / 2.0;\n\treturn res;\n}\n\ndouble area(Polygon p, Circle c) {\n\tif (p.size() < 3) return 0.0;\n\tfunction<double(Circle, Point, Point)> dfs = [&](Circle c, Point a, Point b) {\n\t\tVector va = c.c - a, vb = c.c - b;\n\t\tdouble f = cross(va, vb), res = 0;\n\t\tif (equals(f, 0.0)) return res;\n\t\tif (max(abs(va), abs(vb)) < c.r + EPS) return f;\n\t\tVector d(dot(va, vb), cross(va, vb));\n\t\tif (getDistanceSP(Segment(a, b), c.c) > c.r - EPS)\n\t\t\treturn c.r * c.r * atan2(d.y, d.x);\n\t\tauto u = getCrossPointCS(c, Segment(a, b));\n\t\tvector<Point> ps{ a,u[0],u[1],b };\n\t\tfor (int i = 1; i < ps.size(); ++i) res += dfs(c, ps[i - 1], ps[i]);\n\t\treturn res;\n\t};\n\tdouble res = 0;\n\tfor (int i = 0; i < p.size(); ++i) res += dfs(c, p[i], p[(i + 1) % p.size()]);\n\treturn res / 2;\n}\n\ndouble convexDiameter(Polygon p) {\n\tint n = p.size();\n\tif (n == 2) return abs(p[0] - p[1]);\n\tint i = 0, j = 0;\n\tfor (int k = 0; k < n; ++k) {\n\t\tif (p[i] < p[k]) i = k;\n\t\tif (!(p[j] < p[k])) j = k;\n\t}\n\tdouble res = 0;\n\tint ti = i, tj = j;\n\twhile (i != tj || j != ti) {\n\t\tres = max(res, abs(p[i] - p[j]));\n\t\tif (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0.0)\n\t\t\ti = (i + 1) % n;\n\t\telse j = (j + 1) % n;\n\t}\n\treturn res;\n}\n\nPolygon convexCut(Polygon p, Line l) {\n\tPolygon q;\n\tfor (int i = 0; i < (int)p.size(); ++i) {\n\t\tPoint a = p[i], b = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, a) != CLOCKWISE) q.push_back(a);\n\t\tif (ccw(l.p1, l.p2, a) * ccw(l.p1, l.p2, b) < 0)\n\t\t\tq.push_back(getCrossPointLL(Line(a, b), l));\n\t}\n\treturn q;\n}\n\ndouble closestPair(vector<Point> ps) {\n\tsort(ps.begin(), ps.end());\n\tvector<Point> a(ps.size());\n\tfunction<double(int, int)> solve = [&](int l, int r) {\n\t\tif (r - l < 2) return 1e18;\n\t\tint mid = (l + r) >> 1;\n\t\tdouble x = ps[mid].x;\n\t\tdouble d = min(solve(l, mid), solve(mid, r));\n\t\tinplace_merge(ps.begin() + l, ps.begin() + mid, ps.begin() + r,\n\t\t\t\t\t  [](const Point& a, const Point& b) {return a.y < b.y; });\n\t\tint ptr = 0;\n\t\tfor (int i = l; i < r; ++i) {\n\t\t\tif (abs(ps[i].x - x) >= d) continue;\n\t\t\tfor (int j = 0; j < ptr; ++j) {\n\t\t\t\tPoint luz = ps[i] - a[ptr - j - 1];\n\t\t\t\tif (luz.y >= d) break;\n\t\t\t\td = min(d, abs(luz));\n\t\t\t}\n\t\t\ta[ptr++] = ps[i];\n\t\t}\n\t\treturn d;\n\t};\n\treturn solve(0, ps.size());\n}\n\nint manhattanIntersection(vector<Segment> ss) {\n\tconst int INF = numeric_limits<int>::max();\n\tconst int BOTTOM = 0, LEFT = 1, RIGHT = 2, TOP = 3;\n\tint n = ss.size();\n\tvector<EndPoint> ep;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (ss[i].p1.y == ss[i].p2.y) {\n\t\t\tif (ss[i].p1.x > ss[i].p2.x) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, LEFT));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, RIGHT));\n\t\t} else {\n\t\t\tif (ss[i].p1.y > ss[i].p2.y) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, BOTTOM));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, TOP));\n\t\t}\n\t}\n\tsort(ep.begin(), ep.end());\n\tset<int> st;\n\tst.insert(INF);\n\tint cnt = 0;\n\tfor (int i = 0; i < 2 * n; ++i) {\n\t\tif (ep[i].st == TOP) st.erase(ep[i].p.x);\n\t\telse if (ep[i].st == BOTTOM) st.insert(ep[i].p.x);\n\t\telse if (ep[i].st == LEFT) {\n\t\t\tauto b = st.lower_bound(ss[ep[i].seg].p1.x);\n\t\t\tauto e = st.lower_bound(ss[ep[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);\n\t\t}\n\t}\n\treturn cnt;\n}\n//END\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid CGL1A() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n*/\nvoid CGL1B() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = reflect(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n*/\nvoid CGL1C() {\n\tPoint p0, p1, p2; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> p2;\n\t\tint a = ccw(p0, p1, p2);\n\t\tif (a == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n\t\telse if (a == CLOCKWISE) cout << \"CLOCKWISE\";\n\t\telse if (a == ONLINE_BACK) cout << \"ONLINE_BACK\";\n\t\telse if (a == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\n*/\nvoid CGL2A() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tVector p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif (isParallel(p1 - p0, p3 - p2)) cout << 2;\n\t\telse if (isOrthogonal(p1 - p0, p3 - p2)) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\n*/\nvoid CGL2B() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tcout << (intersectSS(s1, s2) ? 1 : 0) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\n*/\nvoid CGL2C() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tPoint a = getCrossPointLL(s1, s2);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\n*/\nvoid CGL2D() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.10f\\n\", getDistanceSS(s1, s2));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\n*/\nvoid CGL3A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.1f\\n\", area(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\n*/\nvoid CGL3B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tcout << (isConvex(p) ? 1 : 0) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\n*/\nvoid CGL3C() {\n\tint n; cin >> n;\n\tPolygon g(n);\n\tfor (auto& a : g) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_C\n*/\nvoid CGL4A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tPolygon t = convexHull(p);\n\tcout << t.size() << endl;\n\tfor (auto a : t) cout << a.x << \" \" << a.y << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\n*/\nvoid CGL4B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", convexDiameter(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_B\n*/\nvoid CGL4C() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l;\n\t\tprintf(\"%.10f\\n\", area(convexCut(p, l)));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C\n*/\nvoid CGL5A() {\n\tint n; cin >> n;\n\tvector<Point> ps(n);\n\tfor (auto& a : ps) cin >> a;\n\tprintf(\"%.10f\\n\", closestPair(ps));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/5/CGL_5_A\n*/\nvoid CGL6A() {\n\tint n; cin >> n;\n\tvector<Segment> ss(n);\n\tfor (auto& a : ss) cin >> a;\n\tcout << manhattanIntersection(ss) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/6/CGL_6_A\n*/\nvoid CGL7A() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersectCC(c1, c2) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\n*/\n\nvoid CGL7D() {\n\tCircle c; cin >> c.c.x >> c.c.y >> c.r;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\t\tauto a = getCrossPointCL(c, l);\n\t\tsort(a.begin(), a.end());\n\t\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\n*/\nvoid CGL7E() {\n\tCircle c1; cin >> c1.c.x >> c1.c.y >> c1.r;\n\tCircle c2; cin >> c2.c.x >> c2.c.y >> c2.r;\n\tauto a = getCrossPointCC(c1, c2);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\n*/\nvoid CGL7F() {\n\tPoint p; cin >> p;\n\tCircle c; cin >> c.c >> c.r;\n\tauto a = tangentCP(c, p);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f\\n%.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_F\n*/\nvoid CGL7G() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tauto a = tangentCC(c1, c2);\n\tvector<Point> ps;\n\tfor (auto e : a) ps.push_back(getCrossPointCL(c1, e)[0]);\n\tsort(ps.begin(), ps.end());\n\tfor (auto e : ps) printf(\"%.10f %.10f\\n\", e.x, e.y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_G\n*/\nvoid CGL7H() {\n\tint n; cin >> n;\n\tCircle c; c.c = Point(0, 0); cin >> c.r;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", area(p, c));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_H\n*/\n\nint main() {\n\t//CGL1A();\n\t//CGL1B();\n    //CGL1C();\n\t//CGL2A();\n\t//CGL2B();\n\t//CGL2C();\n\t//CGL2D();\n\t//CGL3A();\n\t//CGL3B();\n\tCGL3C();\n\t//CGL4A();\n\t//CGL4B();\n\t//CGL4C();\n\t//CGL5A();\n\t//CGL6A();\n\t//CGL7A();\n\t//CGL7D();\n\t//CGL7E();\n\t//CGL7F();\n\t//CGL7G();\n\t//CGL7H();\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n// 平面幾何\n\n// 型変換\n//   double  -> Point\n//   Segment -> Line\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial = 0, const Point& terminal = 0) :initial(initial), terminal(terminal) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial = 0, const Point& terminal = 0) :initial(initial), terminal(terminal) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\n// bool operator==(const Point& lhs, const Point& rhs) {return lhs.x == rhs.x && lhs.y == rhs.y;}\n// bool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\n// bool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\n// bool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\n// bool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\n// bool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / hypot(p.x, p.y);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) <= EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) <= EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) < -EPS) return CLOCKWISE;\n  if(dot(v1, v2) < -EPS) return ONLINE_BACK;\n  if(norm(v2) - norm(v1) > EPS) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1.x == p2.x && p1.y == p2.y;}\nbool intersect(const Point& p, const Segment& s) {return norm(p - s.initial) + norm(p - s.terminal) - norm(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(l.terminal - p, l.initial - p);}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || parallel(l1, Line(l1.initial, l2.initial));}  // 非平行または同一直線上\n// 点移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial),\n                                             distance(s1, s2.terminal),\n                                             distance(s2, s1.initial),\n                                             distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  if(std::abs(A) < EPS && std::abs(B) < EPS) return l2.initial;\n  assert(std::abs(A) > EPS);                                // 平行かつ同一直線上にない\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));                                 // 2直線の交点が線分上にない\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  Point cp = crosspoint(Line(s1), Line(s2));\n  assert(intersect(s1, cp) && intersect(s2, cp));           // 2直線の交点が線分上にない\n  return cp;\n}\n// デバッグ用\n// #include<bits/stdc++.h>\n// using namespace std;\n// void print(const Point& p) {cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\n// void print(const Line& l) {print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n#include<vector>\n#include<algorithm>\nclass Polygon {\npublic:\n  void add(const Point& p) {vertex_.push_back(p);}\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return Segment(vertex(n), vertex((n + 1) % size()));}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  std::vector<Segment> edge() const {\n    // O(n)\n    std::vector<Segment> result;\n    for(int i = 0; i < size(); ++i) result.push_back(edge(i));\n    return result;\n  }\n  bool touch(const Point& p) const {\n    auto e = edge();\n    return std::any_of(e.begin(), e.end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    POSITION position = ccw(vertex(0), vertex(1), p);\n    auto e = edge();\n    return !std::any_of(e.begin(), e.end(), [=](const Segment& s) {return position * ccw(s.initial, s.terminal, p) < 0;});\n  }\nprivate:\n  std::vector<Point> vertex_;\n};\n////////////////////////////////////////////////////////////////////////////////\n\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n;\n  Polygon polygon;\n  for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n    int x, y;\n    cin >> x >> y;\n    polygon.add(Point(x, y));\n  }\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=jp\n#include <iostream>\n#include <cstdio>\n#include <iomanip> // setprecision\n#include <complex>\n#include <cmath>\nusing namespace std;\n\ntypedef complex<double> point;\n\ndouble inner_product(point x, point y) {\n  return (conj(x) * y).real();\n}\n\ndouble outer_product(point x, point y) {\n  return (conj(x) * y).imag();\n}\n\npoint normalize(point a) {\n  return a * (1/abs(a)); // normはabsの2乗、absは本来のノルム。\n}\n\npoint projection(point a, point b) {\n  point e = normalize(b);\n  return e * inner_product(a, e);\n}\n\nint n;\npoint P[110];\nconst double epsilon = 1e-11;\n\nbool isonedge(point X1, point X2, point p) { // X1 X2 の辺上(端点含む)にpがあるかを返す。今回の場合、X1, X2, pの座標は実はすべて整数だから、割り算が出ないようにすれば問題ない。\n  if ( (X1.real() - p.real() ) * ( X2.real() - p.real() ) < 0 ) { // ともかくx座標を見て、辺上にない場合を弾く。\n    return false;\n  }\n  // その後は、X1 X2 と X1 P が平行かどうかを調べる。\n  // 念のためepsilonで誤差も気を使う。\n  return (abs(outer_product(X1 - X2, X1 - p)) < epsilon);\n}\n\nbool isonpol(point p) {\n  for (int i=0; i<n; i++) {\n    if (isonedge(P[i], P[(i+1)%n], p)) return true;\n  }\n  return false;\n}\n\nbool isin(point p) {\n  bool neg = (outer_product(P[0]-p, P[1]-p) < 0);\n  for (int i=1; i<n; i++) {\n    if ((outer_product(P[i]-p, P[(i+1)%n]-p) < 0) ^ neg) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  double x, y;\n  cin >> n;\n  for (int i=0; i<n; i++) {\n    cin >> x >> y;\n    P[i] = point(x, y);\n  }\n  int q;\n  cin >> q;\n  for (int i=0; i<q; i++) {\n    cin >> x >> y;\n    point p = point(x, y);\n    if (isonpol(p)) {\n      cout << \"1\" << endl;\n    } else if (isin(p)) {\n      cout << \"2\" << endl;\n    } else {\n      cout << \"0\" << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\nint main() {\n\tvector<Point>vec;\n\tPoint P;\n\tint n;\n\tvec.clear();\n\tvec.push_back(P);\n\tfor (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n\tcin >> P.px >> P.py;\n\tint v = contain(vec, P); cout << v << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n    // convex version : O(log n)\n    int ConvexContain(const Point &p) const;\n\n};\n\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\nint Polygon::ConvexContain(const Point &p) const {\n    const int n = (*this).size();\n    Point g = ((*this)[0] + (*this)[n / 3] + (*this)[2 * n / 3]) / 3.0; // inner point\n    int a = 0, b = n;\n    while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n        int c = (a + b) * 0.5;\n        if (sign(abs_cross((*this)[a] - g, (*this)[c] - g)) == 1) { // angle < 180 deg\n            if (sign(abs_cross((*this)[a] - g, p - g)) >= 0 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == -1)\n                b = c;\n            else\n                a = c;\n        }\n        else {\n            if (sign(abs_cross((*this)[a] - g, p - g)) == -1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == 1)\n                a = c;\n            else\n                b = c;\n        }\n    }\n\n    b %= n;\n    if (IsIntersect(Segment((*this)[a], (*this)[b]), p))\n        return ON;\n    int res = sign(abs_cross((*this)[a] - p, (*this)[b] - p));\n    return (res == -1 ? OUT : (res == 1 ? IN : ON));\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    bool is_convex = poly.IsConvex();\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << (is_convex ? poly.ConvexContain(p) : poly.Contain(p)) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define REP(i,n) for(int i=0,_n=(int)(n);i<_n;++i)\n#define ALL(v) (v).begin(),(v).end()\n#define CLR(t,v) memset(t,(v),sizeof(t))\ntemplate<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>&a){return os<<\"(\"<<a.first<<\",\"<<a.second<< \")\";}\ntemplate<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<(*i)<<\" \";cout<<endl;}\ntemplate<class T>void chmin(T&a,const T&b){if(a>b)a=b;}\ntemplate<class T>void chmax(T&a,const T&b){if(a<b)a=b;}\n\n\ntypedef long double D;\nconst D PI = acos(-1.0);\nconst D EPS = 1e-10;\nclass P { public:\n  D x, y;\n  P(D x=0, D y=0) : x(x), y(y) {}\n\n  P& operator+=(const P& o) { x += o.x; y += o.y; return *this; }\n  P& operator-=(const P& o) { x -= o.x; y -= o.y; return *this; }\n  P& operator*=(const P& o) { return *this = {x*o.x - y*o.y, x*o.y + y*o.x}; }\n  P& operator*=(const D& r) { x *= r; y *= r; return *this; }\n  P& operator/=(const D& r) { x /= r; y /= r; return *this; }\n  P operator-() const { return {-x, -y}; }\n\n  D norm() const { return x*x + y*y; }\n  D abs() const { return sqrt(norm()); }\n  D arg() const { return atan2(y, x); }\n  bool isZero() const { return std::abs(x) < EPS && std::abs(y) < EPS; }\n  /** 象限 */\n  int orth() const { return y >= 0 ? (x >= 0 ? 1 : 2) : (x < 0 ? 3 : 4); }\n  static P polar(const D& rho, const D& theta = 0) { return {rho * cos(theta), rho * sin(theta)}; }\n};\nstd::ostream &operator<<(std::ostream &os, P const &p) { return os << \"(\" << p.x << \", \" << p.y << \")\"; }\nstd::istream &operator>>(std::istream &is, P &p) { D a, b; is >> a >> b; p = P(a, b); return is; }\nP operator+(const P& p, const P& q) { return P(p) += q; }\nP operator-(const P& p, const P& q) { return P(p) -= q; }\nP operator*(const P& p, const P& q) { return P(p) *= q; }\nP operator*(const P& p, const D& r) { return P(p) *= r; }\nP operator/(const P& p, const D& r) { return P(p) /= r; }\nP operator*(const D& r, const P& p) { return P(p) *= r; }\nP operator/(const D& r, const P& p) { return P(p) /= r; }\nD crs(const P& a, const P& b){ return a.x*b.y - a.y*b.x; }\nD dot(const P& a, const P& b){ return a.x*b.x + a.y*b.y; }\nint signum(D x) {return x > EPS ? +1 : x < -EPS ? -1 : 0;}\n// 辞書順ソート\nbool operator<(const P& a, const P& b) {\n  if (a.x != b.x) return a.x < b.x;\n  return a.y < b.y;\n}\n// // 偏角ソート\n// bool operator<(const P& a, const P& b) {\n//   // atan2を使う方法。誤差に注意\n//   // return a.arg() < b.arg();\n\n//   // cosを使う方法。(0,0)の扱いに注意\n//   if (a.isZero() != b.isZero()) return a.isZero() > b.isZero();\n//   if (a.orth() != b.orth()) return a.orth() < b.orth();\n//   return crs(a, b) > 0;\n// }\n/** ベクトルpをベクトルbに射影したベクトル */\nP proj(const P& p, const P& b) {\n  P t = b * dot(p, b);\n  return t / b.norm();\n}\n/** 点pから直線abに引いた垂線の足となる点 */\nP footOfLP(const P& a, const P& b, const P& p) {\n  return a + proj(p-a, b-a);\n}\n/** 直線abを挟んで点pと対称な点 */\nP reflection(const P&a, const P&b, const P& p) {\n  return 2 * footOfLP(a, b, p) - p;\n}\nint ccw(const P& a, P b, P c) {\n  // return signum(crs(b - a, c - a));\n  b -= a; c -= a;\n  if (crs(b, c) > 0)       return +1;       // counter clockwise\n  if (crs(b, c) < 0)       return -1;       // clockwise\n  if (dot(b, c) < 0)       return +2;       // c--a--b on line\n  if (b.norm() < c.norm()) return -2;       // a--b--c on line\n  return 0;\n}\n/** 2直線の直行判定 : a⊥b <=> dot(a, b) = 0 */\nbool isOrthogonal(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return abs(dot(a1-a2, b1-b2)) < EPS;\n}\n/** 2直線の平行判定 : a//b <=> crs(a, b) = 0 */\nbool isParallel(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return abs(crs(a1-a2, b1-b2)) < EPS;\n}\n/** 点cが線分ab上にあるか : |a-c| + |c-b| <= |a-b| なら線分上 */\nbool isIntersectSP(const P& a, const P& b, const P& c){\n  return ((a-c).abs() + (c-b).abs() < (a-b).abs() + EPS);\n}\n/** 直線aと直線bの交差判定 */\nbool isIntersectLL(const P& a, const P& b, const P& c, const P& d){\n  return abs(crs(b-a, d-c)) > EPS || // non-parallel\n         abs(crs(b-a, c-a)) < EPS;   // same line\n}\n/** 直線abと線分cdの交差判定 */\nbool isIntersectLS(const P& a, const P& b, const P& c, const P& d){\n  return crs(b-a, c-a) *      //c is left of ab\n         crs(b-a, d-a) < EPS; //d is right of ab\n}\n/** 線分と線分の交差判定。端点が重なってもtrue */\nbool isIntersectSS(const P& a1, const P& a2, const P& b1, const P& b2){\n  return ccw(a1,a2,b1) * ccw(a1,a2,b2) <= 0 &&\n         ccw(b1,b2,a1) * ccw(b1,b2,a2) <= 0;\n}\nP intersectionLL(const P& a1, const P& a2, const P& b1, const P& b2){\n  P a = a2 - a1; P b = b2 - b1;\n  return a1 + a * crs(b, b1-a1) / crs(b, a);\n}\nD distSP(const P& a, const P& b, const P& c) {\n  if (dot(b-a, c-a) < EPS) return (c-a).abs(); // c a--b\n  if (dot(a-b, c-b) < EPS) return (c-b).abs(); // a--b c\n  return abs(crs(b-a, c-a)) / (b-a).abs();\n}\nD distSS(const P& a1, const P& a2, const P& b1, const P& b2){\n  if (isIntersectSS(a1,a2,b1,b2)) return 0.0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\ndouble area(const vector<P> &v) {\n  double ret = 0.0;\n  REP(i, v.size()) ret += crs(v[i], v[(i+1) % v.size()]);\n  return abs(ret / 2.0);\n}\nbool isConvex(const vector<P> &ps) {\n  int N = ps.size();\n  int m = 0;\n  REP(i, N) {\n    int dir = ccw(ps[i], ps[(i+1)%N], ps[(i+2)%N]);\n    if (dir == 1) m |= 1;\n    if (dir == -1) m |= 2;\n  }\n  return m != 3;\n}\n\n/** 多角形と点の内外判定。点pをx軸方向に無限に伸ばした半直線と多角形の辺が交差する回数が、奇数ならば内、偶数ならば外。*/\nenum { OUT, IN, ON };\nint contains(const vector<P>& ps, const P& p) {\n  bool in = false;\n  int N = ps.size();\n  REP(i, N) {\n    P a = ps[i] - p, b = ps[(i+1)%N] - p;\n    if (a.y > b.y) swap(a, b);\n    if (a.y <= 0 && 0 < b.y)\n      if (crs(a, b) < 0) in = !in;\n    if (crs(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nint main2() {\n  int N; cin >> N;\n  vector<P> ps(N);\n  REP(i, N) cin >> ps[i];\n  int Q; cin >> Q;\n  REP(i, Q) {\n    P q; cin >> q;\n    int res = contains(ps, q);\n    if (res == IN) cout << 2 << endl;\n    else if (res == ON) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}\n\nint main() {\n\n#ifdef LOCAL\n  for (;!cin.eof();cin>>ws)\n#endif\n    main2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse {\n\t\t\t\tdouble th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n\t\t\t\tfsum += th;\n\t\t\t}\n        }\n\t\tprintf(\"%d\\n\", state ? state : 2 * geq(abs(fsum), 2));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n#define EPS (1E-10)\nconst int maxn=100000+10;\nint n;\n\nstruct Point\n{\n    int x,y;\n    Point() {}\n    Point(int _x,int _y):x(_x),y(_y) {}\n    Point operator -(Point p)\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    bool operator <(Point p)\n    {\n        return x==p.x?y<p.y:x<p.x;\n    }\n    int cross(Point p)\n    {\n        return x*p.y-y*p.x;\n    }\n    int dot(Point p)\n    {\n        return x*p.x+y*p.y;\n    }\n    int norm()\n    {\n        return x*x+y*y;\n    }\n\n};\nvector<Point> ps;\n\nint ccw(Point p,Point p1,Point p2)\n{\n    #define COUNT_CLOCKWISE 1\n    #define CLOCKWISE -1\n    #define ONLINE_FRONT 2\n    #define ONLINE_BACK -2\n    #define ON_SEGMENT 0\n    Point a=p1-p;\n    Point b=p2-p;\n    if(a.cross(b)<-EPS) return CLOCKWISE;\n    if(fabs(a.cross(b)<EPS)) return CLOCKWISE;\n    if(a.cross(b)>EPS) return COUNT_CLOCKWISE;\n    if(a.dot(b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n\n}\nint is_contain(vector<Point> ps,Point p)\n{\n    Point a,b;\n    int n=(int)ps.size();\n    bool flag=false;\n    for(int i=0;i<n;i++)\n    {\n        a=ps[i]-p;\n        b=ps[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<=0.0&&b.y>0.0&&a.cross(b)>0.0) flag=!flag;\n        if(a.cross(b)==0.0&&a.dot(b)<0) return 1;\n    }\n    return flag?2:0;\n}\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    int x,y;\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        ps.push_back(Point(x,y));\n    }\n    int q;\n    Point p;\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        scanf(\"%d%d\",&p.x,&p.y);\n        printf(\"%d\\n\",is_contain(ps,p));\n    }\n\n\n\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint n, q, xp, yp, r;\n\tint x[101], y[101];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> x[i] >> y[i];\n\n\tx[n] = x[0];\n\ty[n] = y[0];\n\n\tcin >> q;\n\n\tfor (int k = 0; k < q; k++) {\n\t\tcin >> xp >> yp;\n\n\t\tr = 2;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif ((x[i] - xp) * (x[i + 1] - xp) <= 0 &&\n\t\t\t\t(y[i] - yp) * (y[i + 1] - yp) <= 0 &&\n\t\t\t\t(x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) == 0) {\n\t\t\t\tr = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (r != 1) {\n\t\t\tint t = 0;\n\t\t\tfor (int i = 1; i < n - 1; i++) {\n\t\t\t\tif (((x[0] - xp) * (y[i] - yp) - (x[i] - xp) * (y[0] - yp)) *\n\t\t\t\t\t((x[i + 1] - xp) * (y[0] - yp) - (x[0] - xp) * (y[i + 1] - yp)) >= 0) {\n\t\t\t\t\tif ((x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) >= 0)\n\t\t\t\t\t\tt++;\n\t\t\t\t\telse\n\t\t\t\t\t\tt--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (t <= 0)\n\t\t\t\tr = 0;\n\t\t}\t\n\n\t\tcout << r << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;              // 誤差怖い\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\"to\"; print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\"to\"; print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n//       if(a.y <= 0.0 && 0.0 < b.y && cross(a, b) < EPS) in = !in;                // 誤差怖い\n      if(a.y < EPS && EPS <= b.y && cross(a, b) < EPS) in = !in;                // 誤差怖い\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n  // A\n//   Point p1, p2;\n//   cin >> p1.x >> p1.y >> p2.x >> p2.y;\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     // A\n// //     Point p = projection(Line(p1, p2), Point(x, y));\n// //     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n//     // B\n// //     Point p = reflection(Line(p1, p2), Point(x, y));\n// //     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n//     // C\n//     switch(ccw(p1, p2, Point(x, y))) {\n//     case COUNTER_CLOCKWISE:\n//       cout << \"COUNTER_CLOCKWISE\" << endl;\n//       break;\n//     case CLOCKWISE:\n//       cout << \"CLOCKWISE\" << endl;\n//       break;\n//     case ONLINE_BACK:\n//       cout << \"ONLINE_BACK\" << endl;\n//       break;\n//     case ONLINE_FRONT:\n//       cout << \"ONLINE_FRONT\" << endl;\n//       break;\n//     case ON_SEGMENT:\n//       cout << \"ON_SEGMENT\" << endl;\n//       break;\n//     }\n//   }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n  int n;\n  Polygon polygon;\n  for(cin >> n; n > 0; --n) {\n    int x, y;\n    cin >> x >> y;\n    polygon.add(Point(x, y));\n  }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nconst P pINF(sqrt(2) * INF, sqrt(21) * INF);\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint polygonPointContainment(vector<P> &G, P p){\n    int cross;\n    L infS(p, pINF);\n    for (int i=0;i<G.size()-1;i++){\n        L s(G[i], G[i+1]);\n        if(intersectSP(s, p)){\n            return 1;\n        }\n        if(intersectSS(infS, s)){\n            cross++;\n        }\n    }\n    if(cross%2){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int n, q;\n    cin >> n;\n    vector<P> G;\n    P p;\n    for (int i=0;i<n;i++){\n        cin >> p.real() >> p.imag();\n        G.push_back(p);\n    }\n    G.push_back(G[0]);\n\n    cin >> q;\n    for (int i=0;i<q;i++){\n        cin >> p.real() >> p.imag();\n        cout << polygonPointContainment(G, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y )\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\nint main(){\n\tPolygon g;\n\tPoint p ,t;\n\tint n, q;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\tg.push_back(t);\n\t}\n\tcin>>q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin>>p.x>>p.y;\n\t\tcout<<contains(g, p)<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n// cout << c << endl;\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n// cout << get_position(s1, s2.p1) << \" \" << get_position(s1, s2.p2)  << endl;\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n// cout << endl;\n// cout << get_position(s2, s1.p1) << \" \" << get_position(s2, s1.p2)  << endl;\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            // poly[i].pprint();\n            // poly[(i+1)%n].pprint();\n            // cout << endl;\n            count++;\n        }\n    }\n// cout << \"s \" << count << endl;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n// cout << \"p \" << count << endl;\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\ndouble xmax, xmin, ymax, ymin;\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); }\n  double norm2(){ return x * x + y * y; }\n  //double ppdist(vec p){ return sqrt( (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) ); }\n  //double ppdist2(vec p){ return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y); }\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){ return a + (b - a).sca((p - a).dot(b - a) / (b - a).dot(b - a)); }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){ return abs(l.getvec().cross(getvec())) < eps; }\n  bool orth(line l){ return abs(l.getvec().dot(getvec())) < eps; }\n  bool intersec(line l){\n    bool res0 = (ccw(l.a) * ccw(l.b) == 4); //syukutai\n    bool res1 = (getvec().cross(l.a - a) * getvec().cross(l.b - a)) <= eps;\n    bool res2 = (l.getvec().cross(a - l.a) * l.getvec().cross(b - l.a)) <= eps;\n    return !res0 && res1 && res2;\n  }\n  vec crosspoint(line l){\n    return a + getvec().sca((l.a - a).cross(l.getvec()) / getvec().cross(l.getvec()));\n  }\n  double pldist(vec p){\n    double res = min((a - p).norm2(), (b - p).norm2());\n    vec h = proj(p);\n    if((a - h).dot(b - h) < 0)res = min(res, (h - p).norm2());\n    return sqrt(res);\n  }\n  double lldist(line l){\n    if(intersec(l))return 0.0;\n    return min(min(pldist(l.a), pldist(l.b)), min(l.pldist(a), l.pldist(b)));\n  }\n};\nstruct polygon{\n  vector<vec> p;  //ccw\n  double area(){\n    double res = 0.0;\n    for(int i = 0;i < p.size();++i)res += p[i].cross(p[(i + 1) % p.size()]);\n    return res / 2.0;\n  }\n  bool isconv(){\n    for(int i = 0;i < p.size();++i)\n    if((p[(i + 1) % p.size()] - p[i]).cross(p[(i + 2) % p.size()] - p[i]) < -eps)return false;\n    return true;\n  }\n  int isin(vec a){\n    line l = (line){a, a + (vec){xmax, 0.0}};\n    int cnt = 0, n = p.size();\n    for(int i = 0;i < n;++i){\n      line tmp = (line){p[i], p[(i + 1) % n]};\n      if(tmp.ccw(a) == 0)return 1; //on line\n      if(l.intersec(tmp)){\n        ++cnt;\n        if(l.ccw(p[i]) == 0 && l.ccw(p[(i + 1) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        if(l.paral(tmp)){\n          ++cnt;\n          if(l.ccw(p[(i + 2) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        }\n      }\n    }\n    return (cnt & 1) * 2;  //2:in 0:out\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  xmax = 10101.0;\n  polygon A;\n  int(n);\n  for(;n--;){\n    double x, y; cin >> x >> y;\n    A.p.pb((vec){x, y});\n  }\n  int(q);\n  for(;q--;){\n    vec p; cin >> p.x >> p.y;\n    printf(\"%d\\n\", A.isin(p));\n  }\n\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <math.h>\n\n \nint main() {\n\tdouble xs[101],ys[101],rs[10001];\n\tint n,ans[10001];\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%lf %lf\",&xs[i],&ys[i]);\n \t}\n\tint q;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tdouble gx,gy,R=0;\n\t\tscanf(\"%lf %lf\",&gx,&gy);\n\t\tbool isPeriphery=false;\n\t\tfor(int j=0;j<n;j++){\n\t\t\tint p1=j;\n\t\t\tint p2=(j+1)%n;\n\t\t\tdouble dx1,dy1,dx2,dy2,len1,len2;\n\t\t\tdx1=xs[p1]-gx;\n\t\t\tdy1=ys[p1]-gy;\n\t\t\tdx2=xs[p2]-gx;\n\t\t\tdy2=ys[p2]-gy;\n\t\t\tlen1=hypot(dx1,dy1);\n\t\t\tlen2=hypot(dx2,dy2);\n\t\t\tdouble gaiseki=dx1*dy2-dx2*dy1;\n\t\t\tdouble naiseki=dx1*dx2+dy1*dy2;\n \t\t\t\n\t\t\tif(naiseki<=0&&gaiseki==0){\n\t\t\t\tisPeriphery=true;\n\t\t\t}else{\n\t\t\t\tdouble aSinVal,sinVal;\n\t\t\t\t\n\t\t\tif(len1*len2>0){\n\t\t\t\t\tsinVal=gaiseki/(len1*len2);\n\t\t\t\t}else{\n\t\t\t\t\tisPeriphery=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(sinVal<-1)sinVal=-1;\n\t\t\t\tif(sinVal>1)sinVal=1;\n \t\t\t\taSinVal=asin(sinVal);\n\t\t\t\tif(gaiseki>0){\n\t\t\t\t\tif(naiseki>=0)R+=aSinVal;\n\t\t\t\t\telse R+=M_PI-aSinVal;\n\t\t\t\t}else{\n\t\t\t\t\tif(naiseki>=0)R+=aSinVal;\n\t\t\t\t\telse R+=-aSinVal-M_PI;\n\t\t\t\t}\n\t\t\t}\n \t\t}\n\t\t\n\t\tint type;\n\t\tif(fabs(R-M_PI*2)<0.0001){\n\t\t\ttype=2;\n\t\t}else{\n\t\t\ttype=0;\n\t\t}\n \n\t\tif(isPeriphery==true){\n\t\t\ttype=1;\n\t\t}\n\t\trs[i]=R;\n\t\tans[i]=type;\n\t}\n \tfor(int i=0;i<q;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <set>\n#include <map>\n#include <time.h>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y); }\n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){ return Point(a*x,a*y); }\n\tPoint operator / (double a){ return Point(x/a,y/a); }\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator<(const Point &p) const{\n\t\treturn x != p.x? x < p.x: y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nint num_point,Q;\n\ndouble norm(Vector a){\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\nPoint calc_minus(Point a,Point b){\n\tPoint ret;\n\n\tret.x = a.x-b.x;\n\tret.y = a.y-b.y;\n\n\treturn ret;\n}\n\n/*\n * IN 2\n * ON 1\n * OUT 0\n *\n */\nint contains(Polygon g,Point p){\n\tint n = g.size();\n\tbool x = false;\n\tfor(int i = 0; i < n; i++){\n\t\tPoint a = g[i]-p,b = g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n\t\tif(a.y > b.y)swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x = !x;\n\t}\n\treturn (x ? 2:0);\n}\n\nint main(){\n\n\tscanf(\"%d\",&num_point);\n\tPolygon g;\n\n\tdouble x,y;\n\tfor(int loop = 0; loop < num_point; loop++){\n\t\tscanf(\"%lf %lf\",&x,&y);\n\t\tg.push_back(Point(x,y));\n\t}\n\n\tscanf(\"%d\",&Q);\n\n\tfor(int loop = 0; loop < Q; loop++){\n\t\tscanf(\"%lf %lf\",&x,&y);\n\t\tprintf(\"%d\\n\",contains(g,Point(x,y)));\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\ndouble DistAsLine(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    return fabs(V1.OuterProd(V2)) / V1.Length();\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    if (DistAsLine(P, Seg) > eps) return false;\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n-1; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n-1; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<complex>\nusing namespace std;\ntypedef complex<long long> xy_t;\n\nint s_check(xy_t a, xy_t b, xy_t x, xy_t y) {\n\tlong long s, t;\n\tlong long x1 = a.real(), y1 = a.imag(),\n\t\tx2 = b.real(), y2 = b.imag();\n\ts = (y2 - y1)*x.real() - (x2 - x1)*x.imag() - x1*y2 + x2*y1;\n\tt = (y2 - y1)*y.real() - (x2 - x1)*y.imag() - x1*y2 + x2*y1;\n\tif ((s > 0 && t > 0) || (s < 0 && t < 0)) return 0;\n\tif ((s > 0 && t < 0) || (s < 0 && t > 0)) return 2;\n\treturn 1;\n}\nint check(xy_t a, xy_t b, xy_t x, xy_t y) {\n\tif (s_check(a, b, x, y)) {\n\t\treturn s_check(x, y, a, b);\n\t}\n\treturn 0;\n}\n\nint main() {\n\tint n,q;\n\tlong long x, y;\n\txy_t p[103], pp, pp2;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tp[i] = xy_t(x, y);\n\t}\n\tfor (cin >> q; q > 0; q--) {\n\t\tint s = 0;\n\t\tcin >> x >> y;\n\t\tpp = xy_t(x, y);\n\t\tpp2 = xy_t(x + 20011, y + 1);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint c = check(pp, pp2, p[i], p[(i == n - 1 ? 0 : i + 1)]);\n\t\t\tif (c == 0) continue;\n\t\t\tif (c == 1) {\n\t\t\t\tcout << 1 << endl;\n\t\t\t\tgoto next_query;\n\t\t\t}\n\t\t\ts++;\n\t\t}\n\t\tif (s & 1)\n\t\t\tcout << 2 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\tnext_query:\n\t\t;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath?????¢??°??????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n\n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//??????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n\nR dot(Point a,Point b){//??????ok\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){//??????ok\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n\n\n\nbool is_orthogonal(Line a,Line b){//2??´????????´?????????ok\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2??´??????????????????ok\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n\n\n\n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b??§???????¨???¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b??§????¨???¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n\nbool is_intersection_ll(Line l,Line m){//???????????´??????????????????ok\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n\nbool is_intersection_ls(Line l,Line s){//??´???l??¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n\nbool is_intersection_lp(Line l,Point p){//??´???l??¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n\nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n\nbool is_intersection_sp(Line s,Point p){//????????¨?????????????????? ????§??????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n\n\nbool intersection_cc(Circle c1,Circle c2){//???????????????????????????ok\n    return abs(c1.ft - c2.ft) - (c1.sd + c2.sd) < -EPS;\n}\n\n\n/////////////?????¢\nR dis_lp(Line l,Point p){//??´???l??¨???p????????¢ok\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n\nR dis_ll(Line l,Line m){//???????????´???????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n\nR dis_ls(Line l,Line s){//??´???l??¨??????s????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n\nR dis_sp(Line s,Point p){//??????s??¨???p????????¢ok\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n\nR dis_ss(Line s,Line t){//???????????????????????¢ok\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n\n\n\n//////////////?°???±??¨????°?\nPoint projection(Line l,Point p){//?°???±????±???????ok\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n\nPoint reflection(Line l,Point p){//????°?????±???????ok\n    return p + (R)2.0 * (projection(l,p) - p);\n}\n\n\n\n\n//////////////??????(????????????????¨???????????????¨??????????????????????????????????????£??????)\n\nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????ok\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n\nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????ok\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n\n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ??§???????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ????????????????????????????????????????????¨?????§???????????? C ????????°????????§??????sqrt ????????? double ??????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n\n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n\n    return p;\n}\n\n\n/////////////////////////polygon\n\n#define currP(P,i) P[(i) % P.size()]//????????????\n#define nextP(P,i) P[((i) + 1)%P.size()]//?¬??????????\n\nint is_contains_p_in_Poly(Poly po,Point p){//??????????§???¢????????¨(1)????¢????(-1)????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(EQ(cross(a,b),0.0) && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n\nR area2(Poly po){//????§???¢?????¢????????????????±???????ok\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n\n\n\n\n///////////////////////////???\n\nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n\nint main(void){\n    int n;\n    Poly po;\n    cin >> n;\n    REP(i,n){\n        int x,y;\n        cin >> x >> y;\n        Point p = Point(x,y);\n        po.pb(p);\n    }\n    int q;\n    cin >> q;\n    REP(i,q){\n        int x,y;\n        cin >> x >> y;\n        int a = is_contains_p_in_Poly(po,Point(x,y));\n        if(a == 1)\n            printf(\"2\\n\");\n        else if(a == -1)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define EPS 1e-10\nstatic const int COUNTER_CLOCKWISE = 1;\t\t\t\t\t//逆时针   \nstatic const int CLOCKWISE = -1;\t\t\t\t\t\t\t//顺时针\nstatic const int ONLINE_BACK = 2;\t\t\t\t\t\t//p2 在直线后面\nstatic const int ONLINE_FRONT = -2;\t\t\t\t\t\t//p2 在直线前面\nstatic const int ON_SEGMENT = 0;\t\t\t\t\t\t//p2 在直线上\nint equals(double a, double b) { return fabs(a - b) < EPS; };\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0) :x(x), y(y) { };\n\tPoint operator + (Point& p) {\n\t\treturn Point(p.x + x, p.y + y);\n\t}\n\tPoint operator - (Point& p) {\n\t\t\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k*x, k*y);\n\t}\n\tdouble abs() {\t\t\t\t\t//向量长度;\n\t\treturn sqrt(x * x + y * y);\n\t}\n};\ntypedef Point Vector;\nclass Polygon {\t\t\t\t\t//多边形\npublic:\n\tint size;\n\tPoint p[100];\n\t\n};\ndouble dot(Vector a, Vector b) {\t\t\t//内积 x1*x2 + y1*y2\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\t\t  //外积  x1*y2 - x2*y1\n\treturn a.x * b.y - a.y * b.x;\n}\nstruct Segment           //线段\n{\n\tPoint a, b;\n};\ntypedef Segment Line;   //线段表示直线；\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double x = 0) :c(c), r(x) {};\n};\nvoid Parallel_Orthogonal() {\t\t\t\t//判断平行或正交 正交为1 平行为2 正常为 0\n\tPoint a, b,c,d;\n\tPoint e, f;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y>>c.x>>c.y>>d.x>>d.y;\n\t\te = a - b;\n\t\tf = c - d;\n\t\tif (equals(dot(e, f), 0)) cout << \"1\" << endl;\n\t\telse if (equals(cross(e, f), 0))cout << \"2\" << endl;\n\t\telse cout <<\"0\" <<endl;\n\t}\n}\nPoint Projection(Point& a, Point& b, Point& c) {\t//计算投影点\n\tPoint p;\n\tVector v1 = b - a;\n\tVector v2 = c - a;\n\tdouble len = dot(v1, v2);\n\tdouble len2 = len/ v1.abs();\n\tp.x = a.x + len2 / v1.abs() * v1.x;\n\tp.y = a.y + len2 / v1.abs() * v1.y;\n\treturn p;\n}\nPoint Reflection(Point& a, Point& b, Point& c) {\t//算映像\n\tPoint p = Projection(a, b, c);\t\t\t\t\t//算出映射点\n\treturn p*2 - c;\t\t\t\t\t\t\t\t\t//映射点 是 该点与映像点中点  x + c = 2*p；\n}\ndouble getDistancePP(Point a, Point b) {\t\t\t\t//两点距离;\n\treturn ((a - b).abs());\n}\ndouble getDistancePL(Point a, Line b) {\t\t\t\t//求点到直线距离 外积 = |a|.|b|.sin0  在直线上取两点，然后以其中一点为端点求出外\n\tVector m = b.a - b.b;\t\t\t\t\t\t\t//积的大小 再除以直线上的向量大小 则可以求解。\n\tVector m2 = a - b.b;\n\treturn abs(cross(m, m2) / m.abs());\n}\nint ccw(Point a, Point b, Point c) {\t\t\t\t\t\t//三个点的位置关系\n\tVector p = b - a;\n\tVector p2 = c - a;\n\tif (cross(p, p2) > EPS) return COUNTER_CLOCKWISE;\t\t//逆时针方向向外 结果为正\n\tif (cross(p, p2) < -EPS) return CLOCKWISE;\t\t\t\t//顺时针方向为内 结果为负\n\tif (dot(p, p2) < -EPS) return ONLINE_BACK;\n\tif (dot(p, p2) > EPS&& p2.abs() > p.abs()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\ndouble getDistancePS(Point a, Segment b) {\t\t//点到线段的距离;\n\tPoint p1, p2;\n\tp1 = a - b.a;\n\tp2 = b.b - b.a;\n\tif (dot(p1, p2) < 0) {\n\t\treturn p1.abs();\n\t}\n\tp1 = a - b.b;\n\tp2 = b.a - b.b;\n\tif (dot(p1, p2) < 0) {\n\t\treturn p1.abs();\n\t}\n\telse {\n\t\treturn getDistancePL(a, b);\n\t}\n}\nbool Intersection(Point a, Point b, Point c, Point d) {    //判断两线段是否相交  如果相交 则两个边的两个个端点会在另一条边的两边或线上\n\treturn (ccw(a, b, c) * ccw(a, b, d) <= 0 && ccw(c, d, a) * ccw(c, d, b) <= 0);\n}\nPoint Cross_Ponit(Point a, Point b, Point c, Point d) {\t  //求两线段交点  通过面积求两边高  通过高求两边长度比例\n\tdouble s1 = cross(b - a, c - a);\n\tdouble s2 = cross(b - a, d - a);\n\tdouble d1 =  fabs(s1 * 2 / (b - a).abs());\n\tdouble d2 = fabs(s2 * 2 / (b - a).abs());\n\tPoint p;\n\tp.x = d1 / (d1 + d2) * (d - c).x + c.x;\n\tp.y = d1 / (d1 + d2) * (d - c).y + c.y;\n\treturn p;\n}\ndouble getDistanceSS(Point a, Point b, Point c, Point d) { //如果两者相交则直接返回0 否则是4个点到另一条直线最短的为距离\n\tif (Intersection(a, b, c, d)) return 0;\n\tdouble p1,p2;\n\tSegment s1,s2;\n\ts1.a = a;\n\ts1.b = b;\n\ts2.a = c;\n\ts2.b = d;\n\tp1 = min(getDistancePS(a,s2),getDistancePS(b,s2));\n\tp2 = min(getDistancePS(c, s1), getDistancePS(d, s1));\n\treturn min(p1, p2);\n}\nvoid Cross_Points_of_Line(Line a, Circle c) {       //直线与圆的交点。\t根据圆心到直线求出垂直点 然后根据直角求出两交点到\n\t\t\t\t\t\t\t\t\t\t\t\t\t//交点距离 根据交点以及直线斜率可以求出交点\n\tdouble d1 = getDistancePL(c.c,a);\t\t\t\t//点到直线距离\n\tdouble d2 =sqrt (c.r * c.r - d1 * d1);\t\t\t//求点到垂直点距离\n\tPoint p = Projection(a.a,a.b,c.c );\t\t\t\t//垂直点\n\tPoint p2 = a.b - a.a;\t\t\t\t\t\t\t//向量\n\tVector v;\n\tv.x = d2 / p2.abs() * p2.x;\n\tv.y = d2 / p2.abs() * p2.y;\n\tPoint p3, p4;\n\tp3 = p + v;\n\tp4 = p - v;\n\t\n\tif (p3.x - p4.x < -EPS) {\n\t\tprintf(\"%.10f %.10f %.10f %.10f\",p3.x,p3.y,p4.x,p4.y);\n\t}\n\telse if (p3.x - p4.x < EPS) {\n\t\tif (p3.y < p4.y) {\n\t\t\tprintf(\"%.10f %.10f %.10f %.10f\", p3.x, p3.y, p4.x, p4.y);\n\t\t}\n\t\telse {\n\t\t\tprintf(\"%.10f %.10f %.10f %.10f\", p4.x, p4.y, p3.x, p3.y);\n\t\t}\n\t}\n\telse {\n\t\tprintf(\"%.10f %.10f %.10f %.10f\", p4.x, p4.y, p3.x, p3.y);\n\t}\n\tcout << endl;\n}\nint Polygon_Point(Polygon po, Point p){\n\tint x = 0;\n\t\n\tfor (int i = 0; i < po.size; i++) {\n\t\tPoint p1 = po.p[i];\n\t\tPoint p2 = po.p[(i + 1) % po.size];\n\t\tif (ccw(p1, p2, p) == 0) return 1;\n\t\tp1 = p1 - p;\n\t\tp2 = p2 - p;\n\t\tif (p1.y > p2.y) swap(p1, p2);\n\t\tif (p1.y<EPS && p2.y > EPS&& cross(p1, p2) > 0) x = !x;\n\t}\n\tif (x) return 2;\n\treturn 0;\n}\nint main(void) {\t\t\t\t\n\tint n;\n\tcin >> n;\n\tPolygon po;\n\tpo.size = n;\n\tPoint m;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> m.x >> m.y;\n\t\tpo.p[i] = m;\n\t}\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> m.x >> m.y;\n\t\tcout << Polygon_Point(po, m) << endl;\n\t}\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tbool judge = true;\n\tOwnVector2 p0 = vertices[0] - p;\n\n\tif (p0.length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n] - p;\n\t\tif (p1.length2() <= 0.00000000001 || (abs(p0.cross(p1)) <= 0.00000000000001 && p0.dot(p1) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (p0.y > p1.y)\n\t\t{\n\t\t\tOwnVector2 t = p0;\n\t\t\tp0 = p1;\n\t\t\tp1 = t;\n\t\t}\n\t\tif (p0.y <= 0 && 0 <= p1.y)\n\t\t{\n\t\t\tif (p0.cross(p1) < 0)\n\t\t\t{\n\t\t\t\tjudge = !judge;\n\t\t\t}\n\t\t}\n\t\n\t\tp0 = vertices[(i) % n] - p;\n\t}\n\n\treturn judge ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Point {\n    int x, y;\n\n    Point() = default;\n    Point(int x, int y) : x(x), y(y) {}\n\n    Point operator+(const Point &rhs) const {\n        return Point(x + rhs.x, y + rhs.y);\n    }\n\n    Point operator-(const Point &rhs) const {\n        return Point(x - rhs.x, y - rhs.y);\n    }\n\n    long long operator*(const Point &rhs) const {\n        return 1ll * x * rhs.x + 1ll * y * rhs.y;\n    }\n\n    long long operator%(const Point &rhs) const {\n        return 1ll * x * rhs.y - 1ll * y * rhs.x;\n    }\n};\n\nint sign(long long x) {\n    if (x > 0) return 1;\n    if (x == 0) return 0;\n    if (x < 0) return -1;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    if (max(p1.x, p2.x) < min(p3.x, p4.x) || max(p3.x, p4.x) < min(p1.x, p2.x)) return false;\n    if (max(p1.y, p2.y) < min(p3.y, p4.y) || max(p3.y, p4.y) < min(p1.y, p2.y)) return false;\n    return sign((p3 - p1) % (p4 - p1)) * sign((p3 - p2) % (p4 - p2)) <= 0 &&\n           sign((p1 - p3) % (p2 - p3)) * sign((p1 - p4) % (p2 - p4)) <= 0;\n}\n\nint contain(const vector<Point> &ps, Point p) {\n    // ps is not necessarily convex.\n    int n = (int)ps.size();\n    for (int i = 0; i < n; ++i) {\n        Point a = ps[i], b = ps[(i + 1) % n];\n        // on segment\n        if ((p - a) * (b - a) >= 0 && (p - b) * (a - b) >= 0 && (p - a) % (b - a) == 0) return 1;\n    }\n    Point q = Point(1000000000, p.y);\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        Point a = ps[i], b = ps[(i + 1) % n];\n        if (intersect(a, b, p, q) && p.y >= min(a.y, b.y) && p.y < max(a.y, b.y)) res ^= 1;\n    }\n    // ps contains p.\n    if (res == 1) return 2;\n    return 0;\n}\n\nint main() {\n    int n; cin >> n;\n    vector<Point> ps(n);\n    for (int i = 0; i < n; ++i) cin >> ps[i].x >> ps[i].y;\n    int q; cin >> q;\n    while (q--) {\n        Point p; cin >> p.x >> p.y;\n        cout << contain(ps, p) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+10000.0);\n        if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+10000.0)==0.0){\n            if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n        }\n        if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+10000.0)==0.0){\n            if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n        }\n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n\n    \n    \n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            cout<<inside_and_outside_the_determination_of_the_polygon_and_point(n, p_xy, tx, ty)<<endl;\n\n\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            POSITION pos_aft = get_position(s_right, poly[(i+1)%n]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i++;\n                pos_aft = get_position(s_right, poly[(i+1)%n]);\n            }\n            if (pos_pre * pos_aft == -1) count++;\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "enum { OUT, ON, IN };\n\nint contains(const polygon &P, const point &p)\n{\n    bool in = false;\n    for (int i = 0, n = P.size(); i < n; ++i)\n    {\n        point a = P[i] - p, b = P[NEXT(i)] - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b))\n            if (cross(a, b) < 0) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0)\n            return ON;\n    }\n    return in ? IN : OUT;\n}\n\nstruct convex_container{\n    polygon pol;\n\n    // Polygon MUST be in counter clockwise order\n    convex_container(polygon p) : pol(p){\n        int pos = 0;\n\n        for (int i = 1; i < p.size(); ++i){\n            if (p[i].imag() < p[pos].imag() ||\n                (p[i].imag() == p[pos].imag() && p[i].real() < p[pos].real()))\n                pos = i;\n        }\n\n        rotate(pol.begin(), pol.begin() + pos, pol.end());\n    }\n\n    bool contains(point p){\n        point c = pol[0];\n\n        if (p.imag() < c.imag() || cross(pol.back() - c, p - c) > 0)\n            return false;\n\n        int lo = 1, hi = pol.size() - 1;\n\n        while (lo + 1 < hi){\n            int m = (lo + hi) / 2;\n\n            if (cross(p[m] - c, p - c) >= 0)\n                lo = m;\n            else\n                hi = m;\n        }\n\n        return cross(pol[lo + 1] - pol[lo], p - pol[lo]) >= 0;\n    }\n};\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\ntypedef vector<Point> Polygon;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 Dot(a, b) = |a||b|cosθ\nLD Dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 Cross(a, b) = |a||b|sinθ\nLD Cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint CCW(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (Cross(b, c) > 0)   return +1;       // counter clockwise\n    if (Cross(b, c) < 0)   return -1;       // clockwise\n    if (Dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n//*********************************************\n//          点と線(Point and Line)            *\n//*********************************************\n\n// 交差判定 (Isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool IsecLP(Point a1, Point a2, Point b){\n    return abs(CCW(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool IsecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !IsecLP(a2-a1, b2-b1, 0) || IsecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool IsecLS(Point a1, Point a2, Point b1, Point b2) {\n    return Cross(a2-a1, b1-a1) * Cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool IsecSS(Point a1, Point a2, Point b1, Point b2) {\n    return CCW(a1, a2, b1)*CCW(a1, a2, b2) <= 0 && CCW(b1, b2, a1)*CCW(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool IsecSP(Point a1, Point a2, Point b) {\n    return !CCW(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (Dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint Proj(Point a1, Point a2, Point p){\n    return a1 + Dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint Reflection(Point a1, Point a2, Point p){\n    return 2.0L*Proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD DistLP(Point a1, Point a2, Point p){\n    return abs(Proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD DistLL(Point a1, Point a2, Point b1, Point b2) {\n    return IsecLL(a1, a2, b1, b2) ? 0 : DistLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD DistLS(Point a1, Point a2, Point b1, Point b2) {\n    return IsecLS(a1, a2, b1, b2) ? 0 : min(DistLP(a1, a2, b1), DistLP(a1, a2, b2));\n}\n\n// 線分と点\nLD DistSP(Point a1, Point a2, Point p) {\n    if(Dot(a2-a1,p-a1) < EPS) return abs(p-a1);\n    if(Dot(a1-a2,p-a2) < EPS) return abs(p-a2);\n    return abs(Cross(a2-a1,p-a1)) / abs(a2-a1);\n}\n\n// 線分と線分\nLD DistSS(Point a1, Point a2, Point b1, Point b2) {\n    if(IsecSS(a1, a2, b1, b2)) return 0;\n    return min(min(DistSP(a1, a2, b1), DistSP(a1, a2, b2)), min(DistSP(b1, b2, a1), DistSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (CrossPoint) *******************\nPoint CrossPointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = Cross(b2-b1, b1-a1);\n    LD d2 = Cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n//*********************************************\n//             多角形(Polygon)                *\n//*********************************************\n\nnamespace std {\n    bool operator < (const Point &a, const Point &b){\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 多角形の面積 (PolygonErea) *****************\nLD PolygonErea(Polygon p){\n    LD area = 0;\n    int n = p.size();\n    for(int i = 0; i < n; i++){\n        area += Cross(p[i], p[(i+1) % n]);\n    }\n    return area / 2;\n}\n// ********************************************\n\n\n// 凸性判定 (IsConvex) ************************\nbool IsConvex(Polygon pol){\n    int n = pol.size();\n    for(int i = 0; i < n; i++){\n        if(CCW(pol[i], pol[(i+1) % n], pol[(i+2) % n]) == -1) return false;\n    }\n    return true;\n}\n// ********************************************\n\n\n// 多角形-点包含関係 (PolygonPointContainment)\nint PolygonPointContainment(Polygon pol, Point p){\n    enum {OUT, ON, IN};\n    bool in = false;\n    int n = pol.size();\n    for(int i = 0; i < n; i++){\n        Point a = pol[i] - p, b = pol[(i+1) % n] - p;\n        if(a.Y > b.Y) swap(a, b);\n        if(a.Y <= 0 && 0 < b.Y && Cross(a, b) < 0) in = !in;\n        if(Cross(a, b) == 0 && Dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n\n// ********************************************\n\n/*************** using variables ***************/\nPolygon p;\nint n;\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> n;\n    REP(i, n){\n        LD xp, yp;\n        cin >> xp >> yp;\n        p.pb(Point(xp, yp));\n    }\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        cin >> xp >> yp;\n        cout << PolygonPointContainment(p, Point(xp, yp)) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nstruct Point { long double px, py; };\nPoint Minus(Point a, Point b) { Point C; C.px = a.px - b.px; C.py = a.py - b.py; return C; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = Minus(v[i], p), b = Minus(v[(i + 1) % v.size()], p);\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\nint main() {\n\tvector<Point>vec;\n\tPoint P;\n\tint n, q; cin >> n;\n\tvec.clear();\n\tfor (int j = 0; j < n; j++) { cin >> P.px >> P.py; vec.push_back(P); }\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P.px >> P.py;\n\t\tint v = contain(vec, P); cout << v << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (int)(k); i < (int)(n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) a.begin(), a.end()\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10 fixed<<setprecision(10)\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> pii;\nconst int MOD = 1000000007;\nconst int INF = MOD + 1;\nconst ld EPS = 1e-12;\ntemplate<class T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate<class T> T &chmax(T &a, const T &b) { return a = max(a, b); }\n\n/*--------------------template--------------------*/\ntypedef long double ld;\nconst ld PI = acos(-1.0);\nbool eq(ld a, ld b) { return abs(a - b) < EPS; }\ntypedef complex<ld> Point;\ntypedef vector<Point> Polygon;\n\nnamespace std\n{\n\tbool operator < (const Point& a, const Point& b)\n\t{\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\n\nstruct Line\n{\n\tPoint a, b;\n\tLine(Point p, Point q) :a(p), b(q) {};\n\tLine(ld x1, ld y1, ld x2, ld y2) :a(Point(x1, y1)), b(Point(x2, y2)) {};\n};\n\nstruct Circle\n{\n\tPoint p; ld r;\n\tCircle(Point a, ld b) :p(a), r(b) {};\n};\n\nld dot(Point a, Point b)\n{\n\treturn real(conj(a)*b);\n}\n\nld cross(Point a, Point b)\n{\n\treturn imag(conj(a)*b);\n}\n\nint ccw(Point a, Point b, Point c)\n{\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS) return 1;    //counter cloclwise\n\tif (cross(b, c) < -EPS) return -1;  //cloclwise\n\tif (dot(b, c) < 0) return 2;        //c--a--b on line \n\tif (norm(b) < norm(c)) return -2;   //a--b--c on line\n\treturn 0;                           //a--c--b on line\n}\n\nbool isis_ll(Line l, Line m)\n{\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > EPS;\n}\n\nbool isis_ls(Line l, Line s)\n{\n\treturn cross(l.b - l.a, s.a - l.a)*cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool isis_ss(Line s, Line t)\n{\n\treturn (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\nbool isis_lp(Line l, Point p)\n{\n\treturn (abs(cross(l.b - p, l.a - p)) < EPS);\n}\n\nbool isis_sp(Line s, Point p)\n{\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a)) < EPS;\n}\n\nPoint projection(Line l, Point p)\n{\n\tPoint base = l.b - l.a;\n\tld r = dot(p - l.a, base) / norm(base);\n\treturn l.a + base*r;\n}\n\nPoint mirror(Line l, Point p)\n{\n\treturn Point(2, 0)*projection(l, p) - p;\n}\n\nld dist_lp(Line l, Point p)\n{\n\treturn abs(p - projection(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n\tif (isis_ls(l, s)) return 0;\n\treturn min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n\tPoint r = projection(s, p);\n\tif (isis_sp(s, r)) return abs(r - p);\n\treturn min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n\tif (isis_ss(s, t)) return 0;\n\treturn min(min(dist_sp(s, t.a), dist_sp(s, t.b)), min(dist_sp(t, s.a), dist_sp(t, s.b)));\n}\n\nPoint is_ll(Line s, Line t)\n{\n\tld a = cross(s.b - s.a, t.b - t.a);\n\tld b = cross(s.b - s.a, s.b - t.a);\n\treturn t.a + b / a*(t.b - t.a);\n}\n\nvector<Point> is_cc(Circle c1, Circle c2)\n{\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d*d + pow(c1.r, 2) - pow(c2.r, 2)) / (2 * d);\n\tld dfr = pow(c1.r, 2) - rc*rc;\n\tif (abs(dfr) < EPS) dfr = 0;\n\tif (dfr < 0.0) return res;\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff*Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff*Point(rc, -rs));\n\treturn res;\n}\n\nint isis_cc(Circle c1, Circle c2)\n{\n\tld d = abs(c1.p - c2.p);\n\tif (d - c1.r - c2.r < -EPS) return -2; //separate\n\tif (abs(d - c1.r - c2.r) < EPS) return -1; //circumscribe\n\tif (c1.r < c2.r) swap(c1, c2);\n\tif (abs(d - c1.r + c2.r) < EPS) return 1;//inscribe\n\tif (c1.r - d - c2.r > EPS) return 2;//involve\n\telse return 0;//intersect\n}\n\nbool isis_cl(Circle c, Line l)\n{\n\tld d = dist_lp(l, c.p);\n\treturn d - c.r < -EPS;\n}\n\nvector<Point> is_cl(Circle c, Line l)\n{\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d > c.r + EPS) return res;\n\tld len = (d > c.r) ? 0 : sqrt(c.r*c.r - d*d);\n\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\tres.push_back(projection(l, c.p) + len*nor);\n\tif (abs(len) > EPS) res.push_back(projection(l, c.p - len*nor));\n\treturn res;\n}\n\nvector<Point> is_cs(Circle c, Line s)\n{\n\tvector<Point> v = is_cl(c, s), res;\n\tREP(i, v.size())\n\t{\n\t\tif (ccw(s.a, v[i], s.b) == -2) res.push_back(v[i]);\n\t}\n\treturn res;\n}\n\nvector<Line> tangent_cp(Circle c, Point p)\n{\n\tvector<Line> res;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return res; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tres.push_back(Line(p, p + v1));\n\tif (l < EPS) return res;\n\tres.push_back(Line(p, p + v2));\n\treturn res;\n}\n\nvector<Line> tangent_cc(Circle c1, Circle c2)\n{\n\tvector<Line> res;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -EPS)\n\t{\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tres = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > EPS)\n\t{\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nres = tangent_cp(c1, out);\n\t\tres.insert(res.end(), nres.begin(), nres.end());\n\t}\n\telse\n\t{\n\t\tPoint v = c2.p - c1.p; v /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tres.push_back(Line(q1, q1 + v));\n\t\tres.push_back(Line(q2, q2 + v));\n\t}\n\treturn res;\n}\nint contains(Polygon g, Point p)\n{\n\tbool f = false;\n\tREP(i, g.size())\n\t{\n\t\tPoint a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS) return 1; //ON\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS&&b.imag() > EPS&&cross(a, b) > EPS) f = !f;\n\t}\n\tif (f) return 2; //IN\n\telse return 0; //OUT\n}\n\nint main()\n{\n\tcin.sync_with_stdio(false);\n\tint n; cin >> n;\n\tPolygon g;\n\tREP(i, n)\n\t{\n\t\tld x, y; cin >> x >> y;\n\t\tg.emplace_back(x, y);\n\t}\n\tint m; cin >> m;\n\tREP(i, m)\n\t{\n\t\tld x, y; cin >> x >> y;\n\t\tcout << contains(g, Point(x, y)) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <numeric>\n#include <iomanip>\n#include <utility>\n#include <cstdlib>\n#include <sstream>\n#include <bitset>\n#include <vector>\n#include <cstdio>\n#include <ctime>\n#include <queue>\n#include <deque>\n#include <cmath>\n#include <stack>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define sz size()\n\nconst double EPS = 1e-10;\nconst int INF = 100000000;\n\n\n\nint isPointInsidePolygon(vector<pair<double,double>> angle,pair<double,double> point){    //点が多角形の内側にあるかどうかを求める\n    long angleSum=angle.size();\n    int count=0;\n    \n    for(int i=0;i<angleSum;i++){\n        double x1=angle[i].first;\n        double y1=angle[i].second;\n        double x2=angle[(i+1)%angleSum].first;\n        double y2=angle[(i+1)%angleSum].second;\n        double xp=point.first;\n        double yp=point.second;\n        \n        double result=(x2-x1)*(yp-y1) - (xp-x1)*(y2-y1);\n        \n        if(result<0)return 0;       //点は外側にある\n        \n        if(result==0)count+=2;\n        else if(result>0)count++;\n        \n    }\n    if(count==angleSum)return 2;    //点は内側にある\n    else return 1;                  //点は周上にある\n    \n}\n\n\nint main(){\n    int g,q;\n    cin>>g;\n\n    vector<pair<double,double>> angle;\n    \n    rep(i,g){\n        int x,y;\n        cin>>x>>y;\n        angle.pb(pair<double,double>(x,y));\n    }\n\n\n    cin>>q;\n    \n    rep(i,q){\n        int x,y;\n        cin>>x>>y;\n        cout<<isPointInsidePolygon(angle,pair<double,double>(x,y))<<endl;\n\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nenum CCW { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p) { return Point(x * p.x, y * p.y); }\n\tPoint operator * (double p) { return Point(x * p, y * p); }\n\tPoint operator / (Point p) { return Point(x / p.x, y / p.y); }\n\tPoint operator / (double p) { return Point(x / p, y / p); }\n\tvoid insert(double a, double b) { x = a; y = b; }\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ndouble abs(Point p) { return sqrt(p.x * p.x + p.y * p.y); }\ntypedef Point Vector;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\nstruct Segment {\n\tVector p1, p2;\n\tSegment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0):\n\t\tp1(x1, y1), p2(x2, y2) {}\n\tSegment(Point a1, Point a2) : p1(a1), p2(a2) {}\n\tvoid insert(Vector a1, Vector a2) { p1 = a1; p2 = a2; }\n};\ntypedef Segment Line;\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\ninline bool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\ninline bool isOrthogonal(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\ninline bool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\ninline bool isParallel(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\ninline bool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\nint ccw(Point &p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < -EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point &p1, Point &p2, Point &p3, Point &p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getDistance(Point &a, Point &b) { return (a - b).abs(); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment &s1, Segment &s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn mp(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = len(g);\n\tbool x = false;\n\tPoint a, b;\n\trep(i, 0, n) {\n\t\ta = g[i] - p;\n\t\tb = g[(i + 1) % n] - p;\n\t\tif(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif(a.y > b.y) swap(a, b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint n; cin >> n;\n\tPolygon pg(n);\n\trep(i, 0, n) cin >> pg[i].x >> pg[i].y;\n\tint q; cin >> q;\n\tPoint p;\n\trep(i, 0, q) {\n\t\tcin >> p.x >> p.y;\n\t\tP(contains(pg, p));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n  int ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0; // a--c--b on line\n  }\n  // L:line,S:segment,P:point\n  P crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n  }\n  int convex_point(const G &g,const P &p){\n    P q = p-P(-INF,imag(p));\n    double x = real(p),y = imag(p);\n    L l1(p,q);\n    ll cn = 0;\n    rep(i,g.size()){\n      P a = g[i],b = g[(i+1) % g.size()];\n      L l2 = L(a,b);\n      int k = ccw(a,b,p);\n      if(k == 0){\n        return 1; // p on g\n      }\n    }\n    rep(i,g.size()){\n      P a = g[i],b = g[(i+1) % g.size()];\n      double y1 = imag(a),y2 = imag(b);\n      if(!(y1 == y && y2 == y) && ((y1 <= y && y < y2) || (y2 <= y && y < y1))){\n        L l2 = L(a,b);\n        P c = crosspoint(l1,l2);\n        if(x < real(c))\n          ++cn;\n      }\n    }\n    if(cn % 2) return 2; // p in g\n    return 0; // p out g\n  }\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll n;\n  double x,y;\n  cin >> n;\n  G g;\n  rep(i,n){\n    cin >> x >> y;\n    g.push_back({x,y});\n  }\n  ll q;\n  cin >> q;\n  rep(i,q){\n    cin >> x >> y;\n    std::cout << convex_point(g,P(x,y)) << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cctype>\n#include <limits.h>\n#include <math.h>\n#include <complex>\n#include <bitset>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define VARIABLE(x) cerr << #x << \"=\" << x << endl\n#define BINARY(x) static_cast<bitset<16> >(x)\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define REP(i,m,n) for (int i=m;i<(int)(n);i++)\n#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))\n#define ALL(a) (a).begin(),(a).end()\nconst int INF = 1e9;\nconst double PI = 3.14159;\nint dx[4]={0, 1, 0, -1}, dy[4]={-1, 0, 1, 0};\nusing namespace std;\ntypedef long long ll;\n//typedef pair<int, int> P;\n\n/* struct P {\n\tint x, y, n;\n\tP(int n, int x, int y):n(n), x(x), y(y){}\n\tP(){}\n}; */\n\n\n/** 幾何ライブラリ **/\n#include <complex>\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-11;\n\ntypedef double D;\ntypedef complex<D> P; // Point\n\nstruct L { // Line\n\tP a, b;\n\tL(){}\n\tL(P aa, P bb) : a(aa), b(bb){}\n};\n\n// 共役複素数 conj(a);\n\n// 符号\nint sig(D a, D b=0) { return a < b - EPS ? -1 : (a > b + EPS ? 1 : 0); }\n\n// 内積\nD dot(P a, P b) { return (conj(a)*b).real(); }\n\n// 外積\nD cross(P a, P b) { return (conj(a)*b).imag(); }\n\n// 線分abに対する点cの位置\nenum STATE{LEFT=1, RIGHT=-1, BACK=2, FRONT=-2, ON=0, IN=3, OUT=-3};\nint ccw(P a, P b, P c)\n{\n\tb -= a, c -= a;\n\tD s = sig(cross(b, c));\n\tif (s) return s>0 ? LEFT : RIGHT;\n\tif (sig(dot(b, c))<0) return BACK;\n\tif (sig(abs(c), abs(b))>0) return FRONT;\n\treturn ON;\n}\n\n// 直線lに対する点pの写像\nP projection(L l, P p)\n{\n\treturn l.a + (l.b-l.a)/abs(l.b-l.a) * dot(l.b-l.a, p-l.a)/abs(l.b-l.a);\n}\n\n// 直線lに対する点pの反射\nP reflection(L l, P p)\n{\n\treturn p + (projection(l, p)-p)*P(2, 0);\n}\n\n// 直線abと点cの距離\nD dLP(L l, P c)\n{\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分abと点cの距離\nD dSP(L l, P c)\n{\n\tif (sig(dot(l.b-l.a, c-l.a))<0) return abs(c-l.a);\n\tif (sig(dot(l.a-l.b, c-l.b))<0) return abs(c-l.b);\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分と線分の交差判定\nbool iSS(L s, L t)\n{\n\treturn (ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0)\n\t\t\t&& (ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0);\n}\n\n// 線分と線分の距離\nD dSS(L s, L t)\n{\n\tif (iSS(s, t)) return 0;\n\treturn min(min(dSP(t, s.a), dSP(t, s.b)), min(dSP(s, t.a), dSP(s, t.b)));\n}\n\n// 線分と線分の交点 (公差していることが前提)\nP cSS(L s, L t)\n{\n\tD d1 = dLP(t, s.a);\n\tD d2 = dLP(t, s.b);\n\tD tmp = d1 / (d1 + d2);\n\treturn s.a + (s.b-s.a)*tmp;\n}\n\n// 直線と直線の交差判定\nbool iLL(L s, L t)\n{\n\treturn sig(cross(s.b-s.a, t.b-t.a))!=0;\n}\n\n// 直線と直線の交点 iLLを確認してから使用\nP cLL(L s, L t)\n{\n\tP ss = s.b - s.a, tt = t.b - t.a;\n\treturn s.a + ss*cross(tt, t.a-s.a)/cross(tt, ss);\n}\n\n// 多角形\ntypedef vector<P> G;\n#define GET(v, i) v[(i)%v.size()]\n\nint containsGP(G g, P p)\n{\n\tbool in=false;\n\tfor (int i=0; i<g.size(); i++) {\n\t\tP a = g[i], b = g[(i+1)%g.size()];\n\t\tif (ccw(a, b, p) == ON) return ON;\n\t\t\n\t\ta -= p, b -= p;\n\t\tif (a.Y > b.Y) swap(a, b);\n\t\tif (a.Y<0 && b.Y>=0 && sig(cross(a, b))>0) in = !in;\n\t}\n\treturn in?IN:OUT;\n}\n\n/** Problem CGL_3-C : Polygon-Point Containment **/\nint main()\n{\n\tint N; cin>>N;\n\tP p;\n\tG g;\n\t\n\trep(i, N) {\n\t\tcin>>p.X>>p.Y;\n\t\tg.push_back(p);\n\t}\n\t\n\tint q; cin>>q;\n\trep(i, q) {\n\t\tcin>>p.X>>p.Y;\n\n\t\tint tmp = containsGP(g, p);\n\t\tif (tmp == ON) cout << 1 << endl;\n\t\telse if (tmp == IN) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <set>\n#include <map>\n#include <time.h>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n \nclass Point{\npublic:\n    double x,y;\n \n    Point(double x = 0,double y = 0):x(x),y(y){}\n \n    Point operator + (Point p){ return Point(x+p.x,y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x,y-p.y);}\n    Point operator * (double a){ return Point(a*x,a*y); }\n    Point operator / (double a){ return Point(x/a,y/a); }\n \n    double abs(){ return sqrt(norm()); }\n    double norm(){ return x*x + y*y; }\n \n    bool operator<(const Point &p) const{\n        return x != p.x? x < p.x: y < p.y;\n    }\n \n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \nint num_point,Q;\n \ndouble norm(Vector a){\n    return a.x*a.x+a.y*a.y;\n}\n \ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n \ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n \ndouble dot(Vector a,Vector b){\n    return a.x*b.x + a.y*b.y;\n}\n \nPoint calc_minus(Point a,Point b){\n    Point ret;\n \n    ret.x = a.x-b.x;\n    ret.y = a.y-b.y;\n \n    return ret;\n}\n \n/*\n * IN 2\n * ON 1\n * OUT 0\n *\n */\nint contains(Polygon g,Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0; i < n; i++){\n        Point a = g[i]-p,b = g[(i+1)%n]-p;\n        if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n        if(a.y > b.y)swap(a,b);\n        if(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x = !x;\n    }\n    return (x ? 2:0);\n}\n \nint main(){\n \n    scanf(\"%d\",&num_point);\n    Polygon g;\n \n    double x,y;\n    for(int loop = 0; loop < num_point; loop++){\n        scanf(\"%lf %lf\",&x,&y);\n        g.push_back(Point(x,y));\n    }\n \n    scanf(\"%d\",&Q);\n \n    for(int loop = 0; loop < Q; loop++){\n        scanf(\"%lf %lf\",&x,&y);\n        printf(\"%d\\n\",contains(g,Point(x,y)));\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) verify AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tif(sdot(p,pol[i],pol[(i+1)%n])==ON) return 1;\n\t\tbool f=sgn(imag(p-pol[i]))>=0;\n\t\tbool s=sgn(imag(p-pol[(i+1)%n]))<0;\n\t\tint sign=sgn(imag(pol[(i+1)%n]-pol[i]));\n\t\tbool can=sgn(sign*det(pol[i],pol[(i+1)%n],p))>0; // (a*d-b*c)*b\n\t\tif(can&&f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n/*\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a)*sdet(a,b,p))==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n*/\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\n\nusing namespace std;\n\nclass Point{\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double a) { return Point(x*a,y*a); }\n    Point operator / (double a) { return Point(x/a,y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\n\n///Program 16.3 表示线段的结构体\nstruct Segment{\n    Point p1,p2;\n};\n\n///Program 16.4 表示直线的结构体\ntypedef Segment Line;\n\n///Program 16.6 多边形\ntypedef vector<Point> Polygon;\n\n///内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n///外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble norm(Point p) { return p.x*p.x+p.y*p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n\nint contains(Polygon g,Point p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)   return 1;\n        ///如果a和b的外积大小为0且内积小于等于0，则点p位于gigi+1上\n        if(a.y>b.y) swap(a,b);\n        if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)    x=!x;\n    }\n    return (x?2:0);\n}\n\nint main()\n{\n    Point tmp;\n    Polygon pgn;\n    int g,p;\n    scanf(\"%d\",&g);\n    for(int i=0;i<g;i++){\n        scanf(\"%lf%lf\",&tmp.x,&tmp.y);\n        pgn.push_back(tmp);\n    }\n    scanf(\"%d\",&p);\n    for(int i=0;i<p;i++){\n        scanf(\"%lf%lf\",&tmp.x,&tmp.y);\n        printf(\"%d\\n\",contains(pgn,tmp));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 定義・定数\nusing P = complex<double>;\nusing Polygon = vector<P>;\nconst double EPS = 1e-10;\n\nnamespace std {\n  // 点の比較演算子\n  bool operator < (const P &a, const P &b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  \n  // 点の等価演算子\n  bool operator == (const P &a, const P &b) {\n    return fabs(a - b) < EPS;\n  }\n}\n\n// 直線\nstruct L : public vector<P> {\n  L(P &_a, P &_b) {\n    push_back(_a);\n    push_back(_b);\n  }\n};\n\n// 線分\nstruct S : L {\n  S(P &_a, P &_b) : L(_a, _b) {}\n};\n\n// 円\nstruct C {\n  P p;\n  double r;\n  \n  C(P _p, double _r) : p(_p), r(_r) {}\n};\n\n// 内積\ndouble dot(const P &a, const P &b) {\n  return real(conj(a) * b);\n}\n\n// 外積\ndouble cross(const P &a, const P &b) {\n  return imag(conj(a) * b);\n}\n\n// 直交判定\nbool isOrthogonal(const L &l, const L &m) {\n  return abs(dot(l[1] - l[0], m[1] - m[0])) < EPS;\n}\n\n// 平行判定\nbool isParallel(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) < EPS;\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\n// 交差判定\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n         abs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const S &s) {\n  return cross(l[1] - l[0], s[0] - l[0]) *      // s[0] is left of l\n         cross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSS(const S &s, const S &t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n         ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\nbool intersectSP(const S &s, const P &p) {\n  return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n\n// 距離など\nP projection(const L &l, const P &p) {\n  double t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP reflection(const L &l, const P &p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const S &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const S &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const S &s, const S &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\n// 多角形の面積\ndouble area(const Polygon &po) {\n  double A = 0;\n  for (int i = 0; i < po.size(); i++) {\n    A += cross(po.at(i), po.at((i + 1) % po.size()));\n  }\n  return A / 2;\n}\n\n// 多角形の凸性判定\nbool isConvex(const Polygon &po) {\n  for (int i = 0; i < po.size(); i++) {\n    if (ccw(po.at((i + po.size() - 1) % po.size()), po.at(i), po.at((i + 1) % po.size())) == -1) return false;\n  }\n  return true;\n}\n\n// 点-多角形包含判定\nstring contains(const Polygon& po, const P& p) {\n  bool in = false;\n  for (int i = 0; i < po.size(); ++i) {\n    P a = po.at(i) - p, b = po.at((i + 1) % po.size()) - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b))\n      if (cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return \"ON\";\n  }\n  return in ? \"IN\" : \"OUT\";\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  \n  int n;\n  cin >> n;\n  Polygon po;\n  for (int i = 0; i < n; i++) {\n    double x, y;\n    cin >> x >> y;\n    po.emplace_back(complex<double>(x, y));\n  }\n  \n  int q;\n  cin >> q;\n  while (q--) {\n    double x, y;\n    cin >> x >> y;\n    string s = contains(po, P(x, y));\n    if (s == \"IN\") cout << 2 << '\\n';\n    else if (s == \"ON\") cout << 1 << '\\n';\n    else cout << 0 << '\\n';\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nconst double EPS =  1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y){}\n\n    Point operator + (Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator * (Point p){\n        return Point(x * p.x, y * p.y);\n    }\n    Point operator * (double r){\n        return Point(x * r, y * r);\n    }\n    Point operator / (Point p){\n        return Point(x / p.x, y / p.y);\n    }\n    Point operator / (double d){\n        return Point(x / d, y / d);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n    \n    \n};\n\ntypedef Point Vector;\n\nclass Segment : public Point{\n    public:\n    Point p1, p2;\n    Segment(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n    Segment(double a, double b, double c, double d){\n        Point(a, b);\n        Point(c, d);\n    }\n    \n};\n\ntypedef Segment Line;\n\ntypedef std::vector<Point> Polygon;\n\nclass Circle{\n    public:\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c_, double r_){\n        c = c_;\n        r = r_;\n    }\n};\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Point a, Point b){\n    return equals(dot(a, b), 0.0);\n}\nbool isParallel(Point a, Point b){\n    return equals(cross(a, b), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    //Vector tmp = s.p1 + base * r;\n    Vector tmp = base * r;\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2;\n}\n\nint ccw(Point p1, Point p2, Point p3){\n    Vector a = p2 - p1;\n    Vector b = p3 - p1;\n    if( cross(a, b) > EPS ) return 1;\n    else if( cross(a, b) < -EPS ) return -1;\n    else if( dot(a, b) < -EPS ) return 2;\n    else if( a.norm() < b.norm() ) return -2;\n    //std::cout << std::fixed << std::setprecision(10) << ans.x << \" \" << ans.y << std::endl;\n    else return 0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return(ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n\n\ndouble getDistance(Point a, Point b){\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p){    \n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\n/*\nbool intersect(Circle c, Line l){\n    double d = getDistanceLP(l, c.c);\n    std::cout << d << std::endl;\n    if( (c.r - d) < EPS ){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n*/\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n    if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n    if( intersect(s1, s2) ) return 0.0;\n    return std::min(std::min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), std::min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nstd::pair<Point, Point> getCrossPoints(Circle c, Line l){\n    //assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt(c.r * c.r - (pr - c.c).norm());\n    return std::make_pair(pr + e * base, pr - e * base);\n\n}\n\ndouble arg(Vector p){\n    return atan2(p.y, p.x);\n}\n\nVector polar(double a, double r){\n    return Point(cos(r) * a, sin(r) * a);\n}\n\nstd::pair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    double d = (c1.c - c2.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return std::make_pair(c1.c + polar(c1.r, t+ a), c1.c + polar(c1.r, t-a));\n     \n}\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0; i < n; i++){\n        Point a = g[i] - p, b = g[(i+1) % n] - p;\n        if( abs(cross(a, b) ) < EPS && dot(a, b) < EPS ) return 1;\n        if( a.y > b.y ) std::swap(a, b);\n        if( a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return( x ? 2 : 0);\n\n}\n\nint main(void){\n    Polygon poly;\n    int g;\n    std::cin >> g;\n    poly.resize(g);\n    for(int i = 0; i < g; i++){\n        std::cin >> poly[i].x >> poly[i].y;\n    }\n    int n;\n    std::cin >> n;\n    for(int i = 0; i < n; i++){\n        Point p;\n        std::cin >> p.x >> p.y;\n        std::cout << contains(poly, p) << std::endl;\n    }     \n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define EPS (1e-10)\n#define rep(i, a, b) for (int i = a; i < (int)(b); ++i)\n#define rrep(i, a, b) for (int i = b - 1; i >= (int)(a); --i)\n\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vll = vector<ll>;\nusing vd = vector<double>;\nusing vvi = vector<vi>;\n\nconstexpr int MOD = 1000000007;\n\n// Data structures.\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point(const Point& p) : x(p.x), y(p.y) {}\n\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n\n    bool operator<(const Point& p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator==(const Point& p) const { return fabs(x - p.x) < 1e-10 && fabs(y - p.y) < 1e-10; }\n\n    static double norm(const Point& p) { return sqrt(p.x * p.x + p.y * p.y); }\n    static double dot(const Point& p1, const Point& p2) { return p1.x * p2.x + p1.y * p2.y; }\n    static double cross(const Point& p1, const Point& p2) { return p1.x * p2.y - p1.y * p2.x; }\n};\nstruct Segment {\n    Point s, t;\n    Segment(const Point& s, const Point& t) : s(s), t(t) {}\n    Segment(const Segment& seg) : s(seg.s), t(seg.t) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(const Point& p1, const Point& p2, const Point& p) {\n    double cr = Point::cross(p2 - p1, p - p1);\n    if (cr > 0) return 1;\n    if (cr < 0) return -1;\n    // p, p1, p2.\n    if (Point::dot(p2 - p1, p - p1) < 0) { return 2; }\n    // p1, p2, p.\n    if (Point::dot(p - p2, p1 - p2) < 0) { return -2; }\n    // p is in [p1, p2].\n    return 0;\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    bool ok1 = ccw(s1.s, s1.t, s2.s) * ccw(s1.s, s1.t, s2.t) <= 0;\n    bool ok2 = ccw(s2.s, s2.t, s1.s) * ccw(s2.s, s2.t, s1.t) <= 0;\n    return ok1 && ok2;\n}\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (ccw(g[i], g[(i + 1) % n], p) < EPS) { return 1; }\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && EPS < b.y && Point::cross(a, b) > EPS) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\nint check_containment(const Polygon& poly, const Point p) {\n    int n = poly.size();\n    bool ans = false;\n\n    rep(i, 0, n) {\n        Point s(poly[i]), t(poly[(i + 1) % n]);\n        if (ccw(s, t, p) == 0) { return 1; }\n        if (s.y > t.y) { swap(s, t); }\n        if (s.y < p.y + EPS && p.y + EPS < t.y && Point::cross(s - p, t - p) > EPS) { ans = !ans; }\n    }\n    return ans ? 2 : 0;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    int n;\n    cin >> n;\n\n    Polygon poly(n);\n    rep(i, 0, n) { cin >> poly[i].x >> poly[i].y; }\n\n    int q;\n    cin >> q;\n    rep(i, 0, q) {\n        Point p;\n        cin >> p.x >> p.y;\n        cout << check_containment(poly, p) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n\nusing flt = double;\nconst flt eps = 1e-12, inf = 1e18, PI = acos(-1.0);\ntemplate<typename T>\ninline T sqr(T x) {return x * x;}\ninline flt cmp(flt a, flt b, flt e = eps) {\n  return fabs(a - b) >= e + fabs(a) * e ? a - b : 0;\n}\ninline int sgn(flt x, flt e = eps) {return x < -e ? -1 : (x > e);}\ninline flt fix(flt x, flt e = eps) {return cmp(x, 0, e);}\n\nstruct point {\n  flt x, y;\n  point(flt x = 0, flt y = 0): x(x), y(y) {}\n  bool operator < (const point &rhs) const {\n    return cmp(x, rhs.x) < 0 || (cmp(x, rhs.x) == 0 && cmp(y, rhs.y) < 0);\n  }\n  bool operator == (const point &rhs) const {\n    return cmp(x, rhs.x) == 0 && cmp(y, rhs.y) == 0;\n  }\n  point operator + (const point &rhs) const {\n    return point(x + rhs.x, y + rhs.y);\n  }\n  point operator - (const point &rhs) const {\n    return point(x - rhs.x, y - rhs.y);\n  }\n  point operator * (const flt k) const {\n    return point(x * k, y * k);\n  }\n  point operator / (const flt k) const {\n    return point(x / k, y / k);\n  }\n  point operator ~ () const {// counter clockwise rotate 90 degree\n    return point(-y, x);\n  }\n  flt dot(const point &rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  flt det(const point &rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  flt norm2() const {\n    return x * x + y * y;\n  }\n  flt norm() const {\n    return hypot(x, y);\n  }\n  point rot(flt a) const {// counter clockwise rotate A rad\n    return point(x * cos(a) - y * sin(a), x * sin(a) + y * cos(a));\n  }\n  point rot(flt cosa, flt sina) const {// counter clockwise rotate using cos/sin\n    return point(x * cosa - y * sina, x * sina + y * cosa);\n  }\n  point trunc(flt a = 1.0) const {\n    return (*this) * (a / this->norm());\n  }\n};\n\nusing poly_t = std::vector<point>;\n\n// check if point $O$ is on segment $AB$\nbool OnSeg(const point &A, const point &B, const point &O) {\n  return sgn((A - O).det(B - O)) == 0 && sgn((A - O).dot(B - O)) <= 0;\n}\n\n// check point O in polygon P; 0:outside, 2:border, 1:inside\nint InPolygon(const poly_t &P, const point &O) {\n  int cnt = 0, n = P.size();\n  for (int i = 0; i < n; ++i) {\n    const point &A = P[i], &B = P[(i + 1) % n];\n    if (OnSeg(A, B, O)) return 2;\n    int k = sgn((B - A).det(O - A));\n    int d1 = sgn(A.y - O.y), d2 = sgn(B.y - O.y);\n    cnt += (k > 0 && d1 <= 0 && d2 > 0);\n    cnt -= (k < 0 && d2 <= 0 && d1 > 0);\n  }\n  return cnt != 0;\n}\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  std::vector<point> p(n);\n  for (int i = 0; i < n; ++i) {\n    scanf(\"%lf%lf\", &p[i].x, &p[i].y);\n  }\n  int q;\n  scanf(\"%d\", &q);\n  for (int i = 0; i < q; ++i) {\n    point O;\n    scanf(\"%lf%lf\", &O.x, &O.y);\n    int v = InPolygon(p, O);\n    if (v == 2) v = 1;\n    else if (v == 1) v = 2;\n    printf(\"%d\\n\", v);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define _GLIBCXX_DEBUG\nusing namespace std;\nusing ll = long long;\nusing vec = vector<ll>;\nusing vect = vector<double>;\nusing Graph = vector<vector<ll>>;\n#define loop(i, n) for (ll i = 0; i < n; i++)\n#define Loop(i, m, n) for (ll i = m; i < n; i++)\n#define pool(i, n) for (ll i = n; i >= 0; i--)\n#define Pool(i, m, n) for (ll i = n; i >= m; i--)\n#define mod 1000000007ll\n#define setbit bitset<8>\n#define flagcount __builtin_popcount\n#define flag(x) (1 << x)\n#define flagadd(bit, x) bit |= flag(x)\n#define flagpop(bit, x) bit &= ~flag(x)\n#define flagon(bit, i) bit &flag(i)\n#define flagoff(bit, i) !(bit & (1 << i))\n#define all(v) v.begin(), v.end()\n#define low2way(v, x) lower_bound(all(v), x)\n#define high2way(v, x) upper_bound(all(v), x)\n#define count2way(v, x) high2way(v, x) - low2way(v, x)\n#define lower(v, x) low2way(v, x) - v.begin()       //1番左が0、もし見つから無いならｎを出力\n#define higher(v, x) high2way(v, x) - v.begin() - 1 //1番左が0、もし見つからないならn-1を出力（注意）\n#define putout(a) cout << a << endl\n#define putout2(a, b) \\\n    putout(a);        \\\n    putout(b)\n#define putout3(a, b, c) \\\n    putout(a);           \\\n    putout(b);           \\\n    putout(c)\n#define putout4(a, b, c, d) \\\n    putout(a);              \\\n    putout(b);              \\\n    putout(c);              \\\n    putout(d)\n#define putout5(a, b, c, d, e) \\\n    putout(a);                 \\\n    putout(b);                 \\\n    putout(c);                 \\\n    putout(d);                 \\\n    putout(e)\n#define Gput(a, b) G[a].push_back(b)\n#define cin1(a) cin >> a\n#define cin2(a, b) cin >> a >> b\n#define cin3(a, b, c) cin >> a >> b >> c\n#define cin4(a, b, c, d) cin >> a >> b >> c >> d\n#define cin5(a, b, c, d, e) cin >> a >> b >> c >> d >> e\n#define Sum(v) accumulate(all(v), 0ll)\n#define gcd(x, y) __gcd(x, y)\nll ctoi(char c)\n{\n    if (c >= '0' && c <= '9')\n    {\n        return c - '0';\n    }\n    return 0;\n}\ntemplate <typename T>\nT lcm(T x, T y)\n{\n    T z = gcd(x, y);\n    return x * y / z;\n}\ntemplate <typename T>\nbool primejudge(T n)\n{\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    double sqrtn = sqrt(n);\n    for (T i = 3; i < sqrtn + 1; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\ntemplate <typename T>\nT modinv(T a, T m)\n{\n    T b = m, u = 1, v = 0;\n    while (b)\n    {\n        T t = a / b;\n        a -= t * b;\n        swap(a, b);\n        u -= t * v;\n        swap(u, v);\n    }\n    u %= m;\n    if (u < 0)\n        u += m;\n    return u;\n}\n//場合によって使い分ける\n//const ll dx[4]={1,0,-1,0};\n//const ll dy[4]={0,1,0,-1};\nconst ll dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};\nconst ll dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};\n//多次元配列の宣言法\n//vector<vector<ll>> field(h, vector<ll>(w));\ntemplate <class T>\ninline void chmax(T &a, T b)\n{\n    if (a < b)\n        a = b;\n}\ntemplate <class T>\ninline void chmin(T &a, T b)\n{\n    if (a > b)\n        a = b;\n}\n/*\nライブラリをここに置いてコメントを削除\n*/\n\n//幾何の問題で入力が多い時に使用\n#define scan(x) scanf(\"%ld\", &x)\n/*\n[幾何ライブラリ]\n・円周率\n・誤差チェッカー\n・点(ベクトル)を表わす構造体\n・線分(直線)を表わす構造体\n・ベクトルのノルム\n・ベクトルの大きさ\n・ベクトルの内積\n・ベクトルの外積\n・ベクトルの直交判定\n・ベクトルの平行判定\n・直線sに対して点ｐから垂線を引いたときの交点x(直線sに対する点pの射影)\n・直線sに対して点pと線対称の位置にある点p'\n・点と点の距離\n・直線と点の距離\n・線分と点の距離\n・線分p0p1と点p2の位置関係を求める\n・2本の線分の交差判定\n・線分と線分の距離\n・交差する2本の線分の交点\n・座標cを中心とする半径rの円を表わす構造体\n・円と直線の交点の組(接点なら同じものを2つ)を求める(小さい順に入れる)\n・ベクトルの角度\n・極座標から直交座標に変換\n・円と円の交点の組(接点なら同じものを2つ)を求める(小さい順に入れる)\n・点の内包判定\n*/\n//円周率\nstatic const double pi = 3.141592653589793;\n//誤差チェッカー\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n//点を表わす構造体\nstruct Point\n{\npublic:\n    double x, y;\n    Point(double _x = 0, double _y = 0) : x(_x), y(_y) {}\n    /*\n    以下ベクトルに対する演算子の定義\n    +:ベクトルの足し算\n    -:ベクトルの引き算\n    *:スカラー倍\n    /:スカラーの逆数倍\n    */\n    Point operator+(const Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(const double k) { return Point(x * k, y * k); }\n    Point operator/(const double k) { return Point(x / k, y / k); }\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    //ベクトルの比較(x軸方向のベクトルから比較)\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator>(const Point &p) const\n    {\n        return x != p.x ? x > p.x : y > p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    bool operator!=(const Point &p) const\n    {\n        return (!equals(x, p.x)) || (!equals(y, p.y));\n    }\n};\n//ベクトルとして扱う場合\ntypedef Point Vector;\n//線分を表わす構造体\nstruct Segment\n{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2) : p1(_p1), p2(_p2) {}\n};\n//直線として扱う場合\ntypedef Segment Line;\n//ベクトルのノルム\ndouble norm(Vector a)\n{\n    return a.x * a.x + a.y * a.y;\n}\n//ベクトルの大きさ\ndouble abs(Vector a)\n{\n    return sqrt(norm(a));\n}\n//ベクトルの内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n//内積≓0かどうかによるベクトルの直交判定(様々な引数で答えられるように複数用意)\nbool Orthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\nbool Orthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return Orthogonal(a1 - a2, b1 - b2);\n}\nbool Orthogonal(Segment s1, Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//外積≓0かどうかによるベクトルの平行判定(様々な引数で答えられるように複数用意)\nbool Parallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\nbool Parallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return Parallel(a1 - a2, b1 - b2);\n}\nbool Parallel(Segment s1, Segment s2)\n{\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//直線sに対して点ｐから垂線を引いたときの交点x(直線sに対する点pの射影)を求める\nPoint Project(Line s, Point p)\n{\n    Vector base = s.p2 - s.p1, hypo = p - s.p1;\n    double scalar = (dot(base, hypo) / norm(base));\n    return s.p1 + base * scalar;\n}\n//直線sに対して点pと線対称の位置にある点p'を求める\nPoint Reflect(Line s, Point p)\n{\n    return p + (Project(s, p) - p) * 2.0;\n}\n//点と点の距離\ndouble GetDist(Point a, Point b)\n{\n    return abs(a - b);\n}\n//直線と点の距離\ndouble GetDistLP(Line l, Point p)\n{\n    return abs(Project(l, p) - p);\n}\n//線分と点の距離\ndouble GetDistSP(Segment s, Point p)\n{\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return abs(p - s.p2);\n    return GetDistLP(s, p);\n}\n//Counter-Clockwise(AOJ:CGL_1_Cより)\nstatic const int COUNTER_CLOCKWISE = 1; //反時計回り\nstatic const int CLOCKWISE = -1;        //時計回り\nstatic const int ONLINE_BACK = 2;       //線分の後ろにある\nstatic const int ONLINE_FRONT = -2;     //線分の前にある\nstatic const int ON_SEGMENT = 0;        //線分上にある\n//線分p0p1と点p2の位置関係を求める\nint CCW(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0, b = p2 - p0; //a:p0->p1,b:p0->p2\n    if (cross(a, b) > EPS)\n        return COUNTER_CLOCKWISE; //外積が正なら反時計回り(sinθ>0)\n    if (cross(a, b) < -EPS)\n        return CLOCKWISE; //外積が負なら時計回り(sinθ<0)\n    if (dot(a, b) < -EPS)\n        return ONLINE_BACK; //外積が0かつ内積が負(cosθ<0)\n    if (a.norm() < b.norm())\n        return ONLINE_FRONT; //p2がp0p1に含まれないときp0p2=p0p1+p1p2となり|a|^2<|b|^2が成立\n    return ON_SEGMENT;       //最後にp0p2p1が残る\n}\n//2本の線分の交差判定(点と線分で2種類用意)\nbool Intersect(Point p1, Point p2, Point p3, Point p4)\n{\n    return (CCW(p1, p2, p3) * CCW(p1, p2, p4) <= 0 && CCW(p3, p4, p1) * CCW(p3, p4, p2) <= 0);\n}\nbool Intersect(Segment s1, Segment s2)\n{\n    return Intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n//線分と線分の距離\ndouble GetDist(Segment s1, Segment s2)\n{\n    //線分が交差していた場合、距離は0.0\n    if (Intersect(s1, s2))\n        return 0.0;\n    return min(min(GetDistSP(s1, s2.p1), GetDistSP(s1, s2.p2)), min(GetDistSP(s2, s1.p1), GetDistSP(s2, s1.p2)));\n}\n//交差する2本の線分の交点\nPoint CrossPoint(Segment s1, Segment s2)\n{\n    if (!Intersect(s1, s2))\n        cout << \"2本の線分は交点を持たない\" << endl; //デバッグ用\n    Vector base = s2.p2 - s2.p1, hypo1 = s1.p1 - s2.p1, hypo2 = s1.p2 - s2.p1;\n    double d1 = fabs(cross(base, hypo1)) / abs(base);\n    double d2 = fabs(cross(base, hypo2)) / abs(base);\n    Point x = s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n    return x;\n}\n//座標cを中心とする半径rの円を表わす構造体\nstruct Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point _c, double _r) : c(_c), r(_r) {}\n};\n//円と直線の交点の組(接点なら同じものを2つ)を求める(小さい順に入れる)\npair<Point, Point> CrossPoints(Circle c, Line l)\n{\n    if (GetDistLP(l, c.c) - c.r > EPS)\n        cout << \"円と直線は交点を持たない\" << endl;      //デバッグ用\n    Point mid = Project(l, c.c);                         //交点の中間\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);         //直線lの単位ベクトル\n    double halfdist = sqrt(c.r * c.r - norm(c.c - mid)); //三平方の定理で2交点の距離の半分を求める\n    Point s = mid + e * halfdist, t = mid - e * halfdist;\n    if (s > t)\n        swap(s, t);\n    return make_pair(s, t); //s<tの順\n}\n//ベクトルの角度\ndouble arg(Vector p)\n{\n    return atan2(p.y, p.x);\n}\n//極座標から直交座標に変換\nVector polar(double r, double theta)\n{\n    return Point(cos(theta) * r, sin(theta) * r);\n}\n//円と円の交点の組(接点なら同じものを2つ)を求める(小さい順に入れる)\npair<Point, Point> CrossPoints(Circle c1, Circle c2)\n{\n    if (GetDist(c1.c, c2.c) - (c1.r + c2.r) > EPS)\n        cout << \"2円は交点を持たない\" << endl;                             //デバッグ用\n    double d = abs(c2.c - c1.c);                                           //中心間距離\n    double a = acos((d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d * c1.r)); //余弦定理+arccos\n    double t = arg(c2.c - c1.c);                                           //偏角\n    Point p1 = c1.c + polar(c1.r, t + a), p2 = c1.c + polar(c1.r, t - a);\n    if (p1 > p2)\n        swap(p1, p2);\n    return make_pair(p1, p2);\n}\n//多角形は点の列として扱う\ntypedef vector<Point> Polygon;\n//点の内包判定\n/*\n    IN 2\n    ON 1\n    OUT 0\n*/\nint Contain(Polygon g, Point p)\n{\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++)\n    {\n        Vector a = g[i] - p;           //p->g[i]\n        Vector b = g[(i + 1) % n] - p; //p->g[i+1] 但しn-1の次は0\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS)\n            return 1; //外積の大きさが0で内積0以下なら線分上\n        if (a.y > b.y)\n            swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n            x = (!x); //xの真偽値を反転\n    }\n    return (x ? 2 : 0); //xが真なら2(内包)を、偽なら0(外)を返す\n}\nint main()\n{\n    cout << fixed << setprecision(30);\n    ll n;\n    cin >> n;\n    Polygon G(n);\n    loop(i, n)\n    {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        G[i] = p;\n    }\n    ll q;\n    cin >> q;\n    loop(i, q)\n    {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        int check = Contain(G, p);\n        putout(check);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex <double> point;\nvector <point> pol;\n\nbool eq(double a,double b){\n  return (abs(a-b)<=(1e-7));\n}\n\nbool on_segment(point a,point b,point c){\n  return eq(abs(b-a),abs(a-c)+abs(b-c));\n}\n\ndouble get_r(point a,point b,point c){\n  b-=a,c-=a;\n  b*=conj(c);\n  return arg(b);\n}\n\nint solve(point a){\n  for(int i=0;i<pol.size();i++)\n    if(on_segment(pol[i],pol[(i+1)%pol.size()],a)) return 1;\n \n  double sum=0;\n  for(int i=0;i<pol.size();i++){\n    sum+=get_r(a,pol[i],pol[(i+1)%pol.size()]);\n  }  \n  if(abs(sum)<=1)return 0;\n  return 2;\n  \n}\n\n\nint main(){\n  int n;\n  cin>>n;\n  for(int i=0;i<n;i++) {\n    double a,b;\n    cin>>a>>b;\n    pol.push_back(point(a,b));\n  }\n\n  int q;\n  cin>>q;\n  while(q--){\n    double a,b;\n    cin>>a>>b;\n    cout<<solve(point(a,b))<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\n  operator long double() const {\n    return val;\n  }\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator-() const {\n    return -val;\n  }\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n\n  template<typename T> Real operator-(const T& v) const {\n    return Real(*this) -= v;\n  }\n\n  template<typename T> Real operator*(const T& v) const {\n    return Real(*this) *= v;\n  }\n\n  template<typename T> Real operator/(const T& v) const {\n    return Real(*this) /= v;\n  }\n\n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  Real abs() const {\n    return std::abs(val);\n  }\n\n  Real sqrt() const {\n    return std::sqrt(val);\n  }\n\n  long double toLongDouble() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-10;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  os << fixed << setprecision(15) << a.toLongDouble();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nReal floor(const Real& r) {\n  return floor(r.toLongDouble());\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return norm().sqrt();\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline Point operator*(const Real& real, const Point& point) {\n  return point * real;\n}\n\ninline Point operator/(const Real& real, const Point& point) {\n  return point / real;\n}\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  bool operator==(const Line& line) const {\n    return ((line.vec() / vec()).y == 0) && (((line.a - a) / vec()).y == 0);\n  }\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\nclass Polygon : public vector<Point> {\npublic:\n  Polygon() {}\n\n  Polygon(int n) : vector<Point>(n) {}\n\n  Polygon(initializer_list<Point> p) : vector<Point>(p) {}\n\n  vector<Segment> getSides() const {\n    vector<Segment> res;\n    Point pre = back();\n    for (const auto& point : *this) {\n      res.emplace_back(pre, point);\n      pre = point;\n    }\n    return res;\n  }\n\n  vector<array<Point, 3>> getCorners() const {\n    vector<array<Point, 3>> res;\n    Point pre1 = *(end() - 2), pre2 = back();\n    for (const auto& point : *this) {\n      res.emplace_back(array<Point,3>({{pre1, pre2, point}}));\n      pre1 = pre2;\n      pre2 = point;\n    }\n    return res;\n  }\n\n  Point& operator[](int i) {\n    return vector::operator[](mod(i, (int)size()));\n  }\n\n  const Point& operator[](int i) const {\n    return vector::operator[](mod(i, (int)size()));\n  }\n\n  template<bool strict = false> bool cover(const Point& point) const {\n    bool res = false;\n    for (auto& side : getSides()) {\n      if (ccw(side, point) == ON) return strict ? false : true;\n      if (side.a.y > side.b.y) std::swap(side.a, side.b);\n      if (side.a.y <= point.y && point.y < side.b.y && ((side.b - point) / (side.a - point)).y > 0) res = !res;\n    }\n    return res;\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  Polygon polygon(n);\n  for (auto& p : polygon) cin >> p;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point point;\n    cin >> point;\n    if (polygon.cover<true>(point)) cout << 2 << endl;\n    else if (polygon.cover(point)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\nconst pair<int, int> INF{123456, 654321};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\tif(!cross1) {\n\t\treturn true;\n\t}\n\treturn cross1 * cross2 < 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int i = 0; i < q; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%2])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%2])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <utility>\n#include <cmath>\n#include <cstdio>\n#define rep(i,n) for(int i = 0; i < n; ++i)\n#define rep1(i,n) for(int i = 1; i <= n; ++i)\n#define F first\n#define S second\nusing namespace std;\ntemplate<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }\nusing ll = long long;\nusing pi = pair<int,int>;\nconst double EPS = 1e-10;\nconst double PI = atan(1)*4;\nstruct Vec2 {\n  double x;\n  double y;\n\n  Vec2() : x(0.0),y(0.0){} \n  Vec2(double _x,double _y) :x(_x),y(_y){}  \n  \n  Vec2 operator+(const Vec2& other) const { return { x + other.x , y + other.y }; }\n  Vec2 operator-(const Vec2& other) const { return { x - other.x , y - other.y }; }\n  bool operator==(const Vec2& other) const { return (abs(x - other.x) < EPS && abs(y - other.y) < EPS ); }\n  \n  double dot(const Vec2& other) const { return x * other.x + y * other.y; }\n  double cross(const Vec2& other) const { return x * other.y - y * other.x; }\n  double length() const { return sqrt(x * x + y * y); }\n};\n// A とB のなす角θ cosθ, sinθ を返す\ndouble Cos(const Vec2 A, const Vec2 B) { return A.dot(B) / (A.length()*B.length()); }\ndouble Sin(const Vec2 A, const Vec2 B) { return A.cross(B) / (A.length()*B.length()); }\n\n// 線分の交差判定\nbool CrossCheck(const Vec2 a, const Vec2 b, const Vec2 c, const Vec2 d) {\n  Vec2 AB = b - a, AC = c - a, AD = d - a;\n  Vec2 CA = a - c, CB = b - c, CD = d - c;\n  double s = AB.cross(AC) * AB.cross(AD);\n  double t = CD.cross(CA) * CD.cross(CB);\n\n  if(abs(Sin(CA, CB)) < EPS) return false;\n  if(abs(Sin(a - d, b - d)) < EPS) return false;\n  \n  if(abs(Sin(AB, CD)) < EPS) { // 平行のとき\n    return false;\n  }\n  else return s < EPS && t < EPS;\n}\n\n\nint main()\n{\n  int n; cin >> n;\n  vector<Vec2> v(n);\n  rep(i,n) cin >> v[i].x >> v[i].y;\n  int q; cin >> q;\n  while(q-- > 0) {\n    Vec2 w;\n    cin >> w.x >> w.y;\n    bool f = false;\n    rep(i,n) {\n      if(abs(Sin(v[i] - w, v[(i+1)%n] - w)) < EPS && Cos(v[i] - w, v[(i+1)%n] - w) < EPS) f = true;\n      if(v[i] == w) f = true;\n    }\n    if(f) {\n      cout << 1 << \"\\n\";\n      continue;\n    }\n    Vec2 u(10001, w.y);\n    int cnt = 0;\n    rep(i,n) {\n      if(CrossCheck(w, u, v[i], v[(i+1)%n])) cnt++;\n      else if(abs(Sin(w - v[(i+1)%n], u - v[(i+1)%n])) < EPS && Cos(w - v[(i+1)%n], u - v[(i+1)%n]) < EPS) {\n\tif((v[(i+1)%n].y - v[i].y) * (v[(i+2)%n].y - v[(i+1)%n].y) > EPS ) cnt++;\n\telse if((v[(i+1)%n].y - v[i].y) > 0 && abs(v[(i+2)%n].y - v[(i+1)%n].y) < EPS) cnt++;\n\telse if(abs(v[(i+1)%n].y - v[i].y) < EPS && (v[(i+2)%n].y - v[(i+1)%n].y) < 0) cnt++;\t\n      }\n    }\n    if(cnt % 2 == 0) cout << 0 << \"\\n\";\n    else cout << 2 << \"\\n\";\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nclass Seg{\npublic:\n    Point p1;\n    Point p2;\n    Seg(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n};\n\nclass Circle{\npublic:\n    Point p;\n    double r;\n    Circle(Point p_, double r_){\n        p = p_;\n        r = r_;\n    }\n};\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint project(Seg s, Point p0){\n    if(s.p1 == p0){\n        return p0;\n    }\n    if(s.p2 == p0){\n        return p0;\n    }\n    return s.p1 + (s.p2 - s.p1) / (s.p2 - s.p1).abs() * (p0 - s.p1).abs() * getCos(s.p2 - s.p1, p0 - s.p1);\n}\n\nPoint reflect(Seg s, Point p0){\n    Point p = project(s, p0);\n    return p0 + (p - p0) * 2;\n}\n\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nint counterClockwise(Point p0, Point p1, Point p2){\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n    if(cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(v1, v2) < -EPS) return CLOCKWISE;\n    if(dot(v1, v2) < -EPS) return ONLINE_BACK;\n    if(v1.norm() < v2.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Seg s1, Seg s2){\n    int t1 = counterClockwise(s1.p1, s1.p2, s2.p1);\n    int t2 = counterClockwise(s1.p1, s1.p2, s2.p2);\n    int t3 = counterClockwise(s2.p1, s2.p2, s1.p1);\n    int t4 = counterClockwise(s2.p1, s2.p2, s1.p2);\n    if(t1 * t2 <= 0){\n        if(t3 * t4 <= 0){\n            return true;\n        }\n    }\n    return false;\n}\n\ndouble getDistanceLP(Seg s, Point p0){\n    return (project(s, p0) - p0).abs();\n}\n\ndouble getDistanceSP(Seg s, Point p0){\n    if(dot(s.p2 - s.p1, p0 - s.p1) < 0.0) return (p0 - s.p1).abs();\n    if(dot(s.p1 - s.p2, p0 - s.p2) < 0.0) return (p0 - s.p2).abs();\n    return (project(s, p0) -  p0).abs();\n}\n\ndouble getDistance(Seg s1, Seg s2){\n    if(intersect(s1, s2)){\n        return 0.0;\n    }\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint crossPoint(Seg s1, Seg s2){\n    double d1 = getDistanceLP(s2, s1.p1);\n    double d2 = getDistanceLP(s2, s1.p2);\n\n    return (s1.p2 * d1 + s1.p1 * d2) / (d1 + d2);\n}\n\n// 円と直線の交点\npair<Point, Point> getCrossPoints(Circle c, Seg s){\n    double d1 = getDistanceLP(s, c.p);\n    double d2 = sqrt(pow(c.r, 2) - pow(d1, 2));\n\n    Point p1 = project(s, c.p);\n    Vector v1 = s.p2 - s.p1;\n\n    Point cp1 = p1 + v1 / v1.abs() * d2;\n    Point cp2 = p1 - v1 / v1.abs() * d2;\n\n    if(cp1.x < cp2.x){\n        return make_pair(cp1, cp2);\n    }else if(cp1.x > cp2.x){\n        return make_pair(cp2, cp1);\n    }else{\n        return cp1.y < cp2.y ? make_pair(cp1, cp2) : make_pair(cp2, cp1);\n    }\n\n}\n\npair<Point, Point> getCrossPointsOfCircles(Circle c1, Circle c2){\n    if(c1.p.x > c2.p.x){\n        swap(c1, c2);\n    }\n    double d = (c2.p - c1.p).abs();\n    double t = asin((c2.p.y - c1.p.y) / d);\n    double a = acos((-pow(c2.r, 2) + pow(c1.r, 2) + pow(d, 2)) / (2 * c1.r * d));\n    //printf(\"d: %f, t: %f, a: %f\\n\", d, t * (180/3.14), a * (180/3.14));\n   \n    Point p1 = c1.p + Point(cos(t + a), sin(t + a)) * c1.r;\n    Point p2 = c1.p + Point(cos(t - a), sin(t - a)) * c1.r;\n\n    if(p1.x < p2.x){\n        return make_pair(p1, p2);\n    }else if(p1.x > p2.x){\n        return make_pair(p2, p1);\n    }else{\n        return p1.y < p2.y ? make_pair(p1, p2) : make_pair(p2, p1);\n    }\n}\n\n#define N_MAX 100\n#define Q_MAX 1000\n#define INF 100000000\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n\n    Point P[N_MAX];\n    for(int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &P[i].x, &P[i].y);\n    }\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        Point Q;\n        scanf(\"%lf %lf\", &Q.x, &Q.y);\n\n        int count = 0;\n        bool on_seg = false;\n        for(int j = 0; j < n; j++){\n            Seg side = (j == n - 1) ? Seg(P[j], P[0]) : Seg(P[j], P[j + 1]);\n            if(counterClockwise(side.p1, side.p2, Q) == ON_SEGMENT){\n                on_seg = true;\n                break;\n            }\n            if(intersect(side, Seg(Q, Point(0, INF)))){\n                count++;\n            }\n        }\n        if(on_seg){\n            printf(\"1\\n\");\n        }else if(count % 2 == 1){\n            printf(\"2\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n    }\n\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define X real()\n#define Y imag()\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\n\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\ntypedef vector<P> G;\n\nenum { OUT, ON, IN };\nint contains(const G &g, const P &p) {\n  bool in = false;\n  for (int i = 0; i < g.size(); ++i) {\n    P a = curr(g,i) - p, b = next(g,i) - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b))\n      if (cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nint main() {\n  int N, Q;\n  cin >>N;\n  G g(N);\n  REP(i, N){\n    int x, y; cin >>x >>y;\n    g[i] = P(x, y);\n  }\n  cin >>Q;\n  REP(q, Q){\n    int x, y; cin >>x >>y;\n    P p(x, y);\n    cout <<contains(g, p) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\n#define EPS 1e-10\n#define PB push_back\n\ntypedef double Type;\n\nint sign(Type x)\n{\n    return x<-EPS?-1:(x>EPS?1:0);\n}\n\nstruct Point\n{\n    Type x,y;\n    Point(Type x,Type y):x(x),y(y) {}\n    Point() {}\n    void read()\n    {\n        scanf(\"%lf %lf\",&x,&y);\n    }\n    bool operator==(const Point& p) const\n    {\n        return sign(x-p.x)==0&&sign(y-p.y)==0;\n    }\n    Point operator-(const Point& p) const\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const Type t) const\n    {\n        return Point(t*x,t*y);\n    }\n    Point operator+(const Point & p) const\n    {\n        return Point(x+p.x,y+p.y);\n    }\n    bool operator<(const Point& p) const\n    {\n        return sign(x-p.x)==0?sign(y-p.y)<0:sign(x-p.x)<0;\n    }\n};\n\nostream& operator<<(ostream& out,Point p)\n{\n    out<<p.x<<\" \"<<p.y;\n    return out;\n}\n\ntypedef Point Vector;\n\nstruct Line\n{\n    Point a,b;\n    Line() {}\n    Line(Point a,Point b):a(a),b(b) {}\n};\n\ntypedef Line SegMent;\n\nstruct Polygon\n{\n    vector<Point> v;\n};\n\n//叉?\nType Cross(Vector a,Vector b)\n{\n    return a.x*b.y-a.y*b.x;\n}\n\n//点?\nType Dot(Vector a,Vector b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n\nint contains(Polygon g, Point p)\n{\n    int sz=g.v.size();\n    bool flag=false;\n    for(int i=0; i<sz; i++)\n    {\n        Vector a=g.v[i]-p;\n        Vector b=g.v[(i+1)%sz]-p;\n        if(fabs(Cross(a,b))==0 && Dot(a,b)<EPS)\n            return 1;   //点在多?形?上\n        if(a.y>b.y)\n            swap(a,b);\n        if(a.y<EPS && b.y>EPS && Cross(a,b)>EPS)\n            flag=!flag;\n    }\n    return flag?2:0;   //点在多?形内/点在多?形外\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    Polygon poly;\n    for(int i=1; i<=n; i++)\n    {\n        Point temp;\n        temp.read();\n        poly.v.PB(temp);\n    }\n    int q;\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        Point p;\n        p.read();\n        int ans=contains(poly,p);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isParallel(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    Point projection = project(s, p);\n    Vector toReflection = (projection - p) * 2.0;\n    return p + toReflection; \n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n\n    // 反時計\n    if (cross(v1, v2) > 0.0) return 1;\n    // 時計\n    if (cross(v1, v2) < 0.0) return -1;\n\n    // p1, p2 が逆方向\n    if (dot(v1, v2) < 0.0) return 2;\n\n    // p1, p2 が同方向\n    if (v1.abs() < v2.abs()) return -2;\n    return 0;\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return (ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0\n            && ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p - s.p2) < 0) return (p - s.p2).abs();\n\n    return getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) {\n        return 0.0;\n    }\n\n    return min(\n        min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n        min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n    );\n}\n\ndouble getDistancePP(Point p1, Point p2) {\n    return (p2 - p1).abs();\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n\n    Vector hypo = s1.p2 - s1.p1;\n    return s1.p1 + hypo * (d1 / (d1 + d2));\n}\n\npair<Point, Point> getCircleSegmentCrossPoint(Circle c, Segment s) {\n    Point projection = project(s, c.c);\n    double dist = sqrt(c.r * c.r - (c.c - projection).norm());\n    Vector base = s.p2 - s.p1;\n    base = base / base.abs();\n    Point a = projection + (base * dist);\n    return make_pair(projection + (base * dist), projection - (base * dist));\n}\n\npair<Point, Point> getCircleCrossPoint(Circle c1, Circle c2) {\n    double d = (c2.c - c1.c).abs();\n    double a = acos((d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d * c1.r));\n    double t = atan2((c2.c - c1.c).y, (c2.c - c1.c).x);\n    Point crossPoint1 = {c1.c.x + c1.r * cos(a + t), c1.c.y + c1.r * sin(a + t)};\n    Point crossPoint2 = {c1.c.x + c1.r * cos(t - a), c1.c.y + c1.r * sin(t - a)};\n    return make_pair(crossPoint1, crossPoint2);\n}\n\nint isContainedInPolygon(Polygon polygon, Point target) {\n    int n = polygon.size();\n    bool contained = false;\n    for (int i = 0; i < n; i++) {\n        Point p1 = polygon.at(i);\n        Point p2 = polygon.at((i + 1) % n);\n        Vector a = p1 - target;\n        Vector b = p2 - target;\n\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\n        if (a.y > b.y) swap(a, b);\n\n        if (a.y < EPS && b.y > EPS && cross(a, b) > 0) contained = !contained;\n    }\n\n    return contained ? 2 : 0;\n}\n\nint main() {\n    // cout << fixed << setprecision(11);\n    int n;\n    cin >> n;\n    Polygon polygon;\n    double x, y;\n\n    for (int i = 0; i < n; i++) {\n        cin >> x >> y;\n        Point p = {x, y};\n        polygon.push_back(p);\n    }\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point query = {x, y};\n\n        cout << isContainedInPolygon(polygon, query) << endl;\n    }\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            while (get_position(s_right, poly[i_pre]) != CCW && get_position(s_right, poly[i_pre]) != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n            }\n            int i_aft = (i + 1) % n;\n            while (get_position(s_right, poly[i_aft]) != CCW && get_position(s_right, poly[i_aft]) != CW) {\n                i_aft = (i_aft + 1) % n;\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nconst int N = 1e4;\nconst double eps = 1e-15;\nconst double inf = 1e10;\ninline double sqr (double k) {return k * k;}\ninline int sgn (double p) {\n    if (fabs (p) < eps) return 0;\n    if (p < 0) return -1;\n    return 1;\n}\nstruct point {\n    double x, y;\n    point () {}\n    point (double _x, double _y) {\n        x = _x, y = _y;\n    }\n    void input () {\n        scanf (\"%lf %lf\", &x, &y);\n    }\n    bool operator == (point b) const {\n        return sgn (x - b.x) == 0 && sgn (y - b.y) == 0;\n    }\n    point operator - (const point &b) const {\n        return point (x - b.x, y - b.y);\n    }\n    double operator * (const point &b) const {\n        return x * b.x + y * b.y;\n    }\n    double operator ^ (const point &b) const {\n        return x * b.y - y * b.x;\n    }\n    double len () {\n        return hypot (x, y);\n    }\n    double len2 () {\n        return x * x + y * y;\n    }\n    double distance (point p) {\n        return hypot (x - p.x, y - p.y);\n    }\n    point operator + (const point &b) const {\n        return point (x + b.x, y + b.y);\n    }\n    point operator * (const double &b) const {\n        return point (x * b, y * b);\n    }\n    point operator / (const double &b) const {\n        return point (x / b, y / b);\n    }\n    double cross (point a, point b) {///叉积\n        return (a - *this) ^ (b - *this);\n    }\n    double dot (point a, point b) {///点积\n        return (a - *this) * (b - *this);\n    }\n    bool on_seg (point a, point b) {///点是否在线段ab上\n        return sgn (cross (a, b)) == 0 && dot (a, b) <= 0;\n    }\n} ps[N];\n///两线段是否相交\nbool seg (point a, point b, point c, point d) {\n    if (c.y > d.y) swap (c, d);\n    if (c.on_seg (a, b)) return true;\n    if (a.cross (b, d) * a.cross (b, c) < 0 && c.cross (d, b) * c.cross (d, a) < 0) return true;\n    return false;\n}\n/// 点的投影是否在线段ab上\nbool check (point p, point a, point b) {\n    point x = b - a;\n    double k = x.len ();\n    double u = a.dot (p, b) / k;\n    x = (x / k) * u;\n    x = x + a;\n    if (x.on_seg (a, b)) return true;\n    return false;\n}\nint cmp (point a, point b) {\n    if ((a ^ b) > 0) return true;\n    return false;\n}\nint main () {\n//    freopen (\"in.txt\", \"r\", stdin);\n    int n, Q;\n    cin >> n;\n    for (int i = 1; i <= n; i++) ps[i].input ();\n    ps[n + 1] = ps[1];\n    ps[0] = ps[n];\n    cin >> Q;\n    while (Q --) {\n        int ans = 0;\n        point s, e, a, b;\n        s.input ();\n        e = point (inf, s.y);\n        for (int i = 1; i <= n + 1; i++) if (s.on_seg (ps[i], ps[i - 1])) ans = 1;\n        if (ans) {\n            cout << 1 << endl;\n            continue;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (seg (s, e, ps[i], ps[i - 1])) {\n                if (sgn (ps[i].y - ps[i - 1].y) == 0) ans++;\n//                cout << i << \"*****\";\n                ans++;\n            }\n\n        }\n//        cout << ans << endl;\n        if (ans % 2 == 0) cout << 0 << endl;\n        else cout << 2 << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\nusing namespace std;\n\nconstexpr double eps = (1e-10);\nbool eq(double a,double b){ return a>b?a-b<eps:b-a<eps; }\nbool sgn(double a,double b) { return ((a-b) > eps);}\nclass Point { //位置ベクトルと作用ベクトルを同一視\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tPoint(const Point &m):x(m.x),y(m.y) {}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tPoint rev() {return Point(-x,-y);}\n\tbool operator<(const Point &p){return x!=p.x?x<p.x:y<p.y;}\n\tbool operator>(const Point &p){return x!=p.x?x>p.x:y>p.y;}\n\tbool operator==(const Point &p){return eq(x,p.x)&&eq(y,p.y);}\n\tdouble norm(){ return x*x+y*y; }\n\tdouble abs() { return sqrt(norm());}\n\tdouble dist(const Point &a) { return (Point(x,y)-a).abs(); }\n\tdouble dot(const Point &a) { return x*a.x + y*a.y; }\n\t//外積 -> 2vec向き付き角度判定,平行四辺形面積\n\tdouble det(const Point &a) { return x*a.y - y*a.x; }\n\tbool is_parallel(const Point &a) { return eq((x*a.y - y*a.x),0); }\n\t// a -> this の正射影\n\tPoint proj(const Point &a) { return Point(x,y)*(dot(a)/norm()); }\n\t//2ベクトルのなす角 (正 : 時計回り, 負 : 反時計)\n\tdouble ang(const Point &v) {\n\t\tdouble g1 = atan2(v.y,v.x);\n\t\tdouble g2 = atan2(y,x);\n\t\tif (g1 < 0) g1 += (2 * M_PI);\n\t\tif (g2 < 0) g2 += (2 * M_PI);\n\t\treturn (g2 - g1);\n\t}\n\t//2ベクトルのなす角(正値)を出す。\n\tdouble absAng(Point &v){ \n    \treturn acos(dot(v)/sqrt(norm() * v.norm()));\n  \t}\n\n};\n\nclass Segment {\npublic:\n\tPoint p1;\n\tPoint p2;\n\tSegment(double x1,double y1,double x2,double y2) : p1(x1,y1),p2(x2,y2) {}\n\tSegment(const Point &a,const Point &b) : p1(a),p2(b) {}\n\tdouble len (const Segment &l) { return (p2 - p1).norm(); }\n\tinline Point toVec() { return (p2 - p1); }\n};\n\n// 線分Xと線分Yの交点\nPoint intersection(Segment X,Segment Y) {\n\treturn X.p1 + (X.p2 - X.p1) * (Y.p2 - Y.p1).det((Y.p1 - X.p1)) / (Y.p2 - Y.p1).det(X.p2 - X.p1);\n}\n\n// 線分X上に点qがあるか\nbool on_seq(Segment X,Point q) {\n\treturn (eq((X.p1 - q).det(X.p2 - q),0) && eq((X.p1 - q).dot(X.p2 - q),0));\n}\n\n// 線分Xと線分Yが交点を持つか\nbool have_intersection(Segment X,Segment Y) {\n\tif (!(X.toVec()).is_parallel(Y.toVec())) {\n\t\tPoint r = intersection(X,Y);\n\t\treturn (on_seq(X,r) && on_seq(Y,r));\n    }\n    else return (on_seq(X,Y.p1) || on_seq(X,Y.p2) || on_seq(Y,X.p1) || on_seq(Y,X.p2));\n}\n\n// 二つの線分の位置関係\nint ccw(Point a,Point b,Point c) { // aが支点\n\tcomplex<double> v1(b.x-a.x,b.y-a.y),v2(c.x-a.x,c.y-a.y);\n\tcomplex<double> v = (v2*conj(v1));\n\tif(v.imag()>eps)return 1;        //反時計回り\n\tif(v.imag()<-eps)return -1;      //時計回り\n\tif(v.real()<-eps)return 2;       //真逆\n\tif(abs(v1)+eps<abs(v2))return -2;//同じ側超えてる\n\treturn 0;                        //同じ側近い側\n}\n// 線分Xと点qの距離\ndouble distance1 (Segment X,Point q) { \n\tif (eq((X.p1 - X.p2).dot(q - X.p2),0)) return X.p2.dist(q);\n\tif (eq((X.p2 - X.p1).dot(q - X.p1),0)) return X.p1.dist(q);\n\telse return (X.p1 + (X.p2-X.p1).proj(q-X.p1)).dist(q);\n}\n\n//線分Xと線分Yの距離\ndouble distance2 (Segment X,Segment Y) { \n\tif (have_intersection(X,Y)) return 0.0;\n\telse return min({distance1(X,Y.p1),distance1(X,Y.p2),distance1(Y,X.p1),distance1(Y,X.p2)});\n}\n\n//点列をx座標で昇順ソート\ninline void sort_x(vector<Point> &p) { \n\tstruct comp { bool operator() (const Point &a,const Point &b) {return (a.x!=b.x?a.x<b.x:a.y<b.y);} };\n\tsort(p.begin(),p.end(),comp());\n}\n\n//点列をy座標で昇順ソート\ninline void sort_y(vector<Point> &p) { \n\tstruct comp { bool operator() (const Point &a,const Point &b) {return (a.y!=b.y?a.y<b.y:a.x<b.x);} };\n\tsort(p.begin(),p.end(),comp());\n}\n\n//多角形の面積 (point列は順番になっていること)\ndouble getArea(vector<Point> &point){\n\tdouble s = 0;\n\tint n = point.size();\n\tfor (int i = 0;i < n;i++ ) s += point[i%n].det(point[(i+1)%n]);\n\treturn abs(s) * 0.5;\n}\n\n//0: outside, 1: on line, 2: inside\nint contains(const vector<Point> &point, Point p) {\n    int flg = -1;\n    Point _a, _b = point.back();\n    for (int i = 0; i < int(point.size()); i++) {\n        _a = _b; _b = point[i];\n        Point a = _a, b = _b;\n        if (ccw(a, b, p) == 0) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (!(a.y <= p.y && p.y < b.y)) continue;\n        if (eq(a.y, p.y) ? ((a-p).det(b-p) > eps) : (a.x > p.x)) flg *= -1;\n    }\n    return flg + 1;\n}\n\n//凸包を求める\nvector<Point> convexHull(vector<Point> &point){\n\tint n = point.size(),k = 0;\n\tvector<Point> qs(n*2);\n\tsort_x(point);\n\tfor(int i = 0;i < n;i++){ //下側凸包の作成\n\t\twhile(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n\t\tqs[k++] = point[i];\n\t}\n\tfor(int i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n\t\twhile(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n\t\tqs[k++] = point[i];\n\t}\n\tqs.resize(k-1);\n\treturn qs;\n}\n\nint main(void){\n\tlong n,q,x,y;\n\tcin >> n;\n\tvector<Point> pp(n);\n\tREP(i,n) {\n\t\tcin >> x >> y;\n\t\tpp[i] = Point(x,y);\n\t}\n\tcin >> q;\n\tREP(i,q) {\n\t\tcin >> x >> y;\n\t\tcout << contains(pp,Point(x,y)) << endl;\n\t}\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(x) cout << #x << \" = \" << x << endl\n#define dd(x) cout << #x << \" = \" << x << \" \"\n#define endl \"\\n\"\n#define all(a) a.begin(), a.end()\n#define pw(a) (1ll << (a))\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef double db;\ntypedef vector<int> vi;\n\nconst db eps = 1e-8;\n\nint sign(db x) {\n\treturn (x > eps) - (x < -eps);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db x, db y) : x(x), y(y) {}\n\tvoid read() {\n\t\tcin >> x >> y;\n\t}\n\tP operator + (const P &c) const {\n\t\treturn P(x + c.x, y + c.y);\n\t}\n\tP operator - (const P &c) const {\n\t\treturn P(x - c.x, y - c.y);\n\t}\n\tP operator * (const db &c) const {\n\t\treturn P(x * c, y * c);\n\t}\n\tP operator / (const db &c) const {\n\t\treturn P(x / c, y / c);\n\t}\n\tdb len2() {\n\t\treturn x * x + y * y;\n\t}\n\tdb len() {\n\t\treturn sqrt(x * x + y * y);\n\t}\n\tP turn90() {\n\t\treturn P(-y, x);\n\t}\n\tbool operator < (const P &c) const {\n\t\tint o = sign(x - c.x);\n\t\treturn o ? o < 0 : sign(y - c.y) < 0;\n\t}\n};\nstruct L {\n\tP a, b;\n\tL() {}\n\tL(P a, P b) : a(a), b(b) {}\n\tvoid read() {\n\t\ta.read();\n\t\tb.read();\n\t}\n};\nstruct C {\n\tP o;\n\tdb r;\n\tC() {}\n\tC(P o, db r) : o(o), r(r) {}\n\tvoid read() { \n\t\to.read();\n\t\tcin >> r;\n\t}\n};\ndb det(P a, P b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb det(P o, P a, P b) {\n\treturn det(a - o, b - o);\n}\ndb dot(P a, P b) {\n\treturn a.x * b.x + a.y * b.y;\n}\nbool onSeg(const L &l, const P &p) {\n\treturn sign(det(p - l.a, l.b - l.a)) == 0 && sign(dot(p - l.a, p - l.b)) <= 0;\n}\nP isLL(const L &l1, const L &l2) {\n\tdb s1 =  det(l2.b - l2.a, l1.a - l2.a);\n\tdb s2 = -det(l2.b - l2.a, l1.b - l2.a);\n\treturn (l1.a * s2 + l1.b * s1) / (s1 + s2);\n}\nP proj(const L &l, const P &p) {\n\treturn l.a + (l.b - l.a) * (dot(p - l.a, l.b - l.a) / (l.b - l.a).len2());\n}\ndb disToLine(const L &l, const P &p) {\n\treturn fabs(det(p - l.a, l.b - l.a) / (l.b - l.a).len());\n}\ndb disToSeg(const L &l, const P &p) {\n\treturn sign(dot(p - l.a, l.b - l.a)) * sign(dot(p - l.b, l.a - l.b)) == 1 ? disToLine(l, p) : min((p - l.a).len(), (p - l.b).len());\n}\nbool tanCP(const C &c, const P &p0, P &p1, P &p2) {\n\tdb x = (p0 - c.o).len2(), d = x - c.r * c.r;\n\tif(d < eps) return 0;\n\tP p = (p0 - c.o) * (c.r * c.r / x);\n\tP delta = ((p0 - c.o) * (-c.r * sqrt(d) / x)).turn90();\n\tp1 = c.o + p + delta;\n\tp2 = c.o + p - delta;\n\treturn 1;\n}\nvector<L> extanCC(const C &c1, const C &c2) {\n\tvector<L> ret;\n\tif(sign(c1.r - c2.r) == 0) {\n\t\tP dir = c2.o - c1.o;\n\t\tdir = (dir * (c1.r / dir.len())).turn90();\n\t\tret.pb(L(c1.o + dir, c2.o + dir));\n\t\tret.pb(L(c1.o - dir, c2.o - dir));\n\t} else {\n\t\tP p = (c1.o * -c2.r + c2.o * c1.r) / (c1.r - c2.r);\n\t\tP p1, p2, q1, q2;\n\t\tif(tanCP(c1, p, p1, p2) && tanCP(c2, p, q1, q2)) {\n\t\t\tif(c1.r < c2.r) swap(p1, p2), swap(q1, q2);\n\t\t\tret.pb(L(p1, q1));\n\t\t\tret.pb(L(p2, q2));\n\t\t}\n\t}\n\treturn ret;\n}\nvector<L> intanCC(const C &c1, const C &c2) {\n\tvector<L> ret;\n\tP p = (c1.o * c2.r + c2.o * c1.r) / (c1.r + c2.r);\n\tP p1, p2, q1, q2;\n\tif(tanCP(c1, p, p1, p2) && tanCP(c2, p, q1, q2)) {\n\t\tret.pb(L(p1, q1));\n\t\tret.pb(L(p2, q2));\n\t}\n\treturn ret;\n}\nvector<P> tanCC(const C &c1, const C &c2) { // 求圆与圆的切点\n\tvector<P> res;\n\tdb dis = (c1.o - c2.o).len();\n\tif(sign(dis - (c1.r + c2.r)) == 0) {\n\t\tres.pb(c1.o + (c2.o - c1.o) * c1.r / (c1.r + c2.r));\n\t}\n\tif(sign(dis - fabs(c1.r - c2.r) == 0)) {\n\t\tres.pb(c1.o + (c2.o - c1.o) * c1.r / (c1.r - c2.r));\n\t}\n\treturn res;\n}\nint contain(vector<P> poly, P p) {\n\tint ret = 0, n = sz(poly);\n\trep(i, 0, n) {\n\t\tP u = poly[i], v = poly[(i + 1) % n];\n\t\tif(onSeg(L(u, v), p)) return 1;\n\t\tif(sign(u.y - v.y) <= 0) swap(u, v);\n\t\tif(sign(p.y - u.y) > 0 || sign(p.y - v.y) <= 0) continue;\n\t\tret += sign(det(p, v, u)) > 0;\n\t}\n\treturn (ret & 1) * 2;\n}\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tint n;\n\tcin >> n;\n\tvector<P> poly(n);\n\trep(i, 0, n) poly[i].read();\n\tint q;\n\tcin >> q;\n\trep(i, 0, q) {\n\t\tP p;\n\t\tp.read();\n\t\tcout << contain(poly, p) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,s,n) for (int i = (int)s; i < (int)n; i++)\n#define ll long long\n#define pb push_back\n#define All(x) x.begin(), x.end()\n#define Range(x, i, j) x.begin() + i, x.begin() + j\n#define lbidx(x, y) lower_bound(x.begin(), x.end(), y) - x.begin()\n#define ubidx(x, y) upper_bound(x.begin(), x.end(), y) - x.begin()\n#define BiSearchRangeNum(x, y, z) lower_bound(x.begin(), x.end(), z) - lower_bound(x.begin(), x.end(), y);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nclass Circle {\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x * a.x + a.y * a.y;\n};\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n};\n\n// 内積\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n// 外積\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n};\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n};\n\n// 並行判定\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n};\n\n// 射影\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n};\n\n// 反射\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n};\n\n// 点と点の距離\ndouble getDistance(Point a, Point b) {\n  return abs(a - b);\n};\n\n// 点と直線の距離\ndouble getDistanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n};\n\n// 点と線分の距離\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n};\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// 二つのベクトルの位置関係\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n};\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n};\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n};\n\n// 円と直線の交差判定\nbool intersect(Circle c, Line l) {\n  return getDistanceLP(l, c.c) <= c.r;\n};\n\n// 円と円の交差判定\nbool intersect(Circle c1, Circle c2) {\n  return getDistance(c1.c, c2.c) <= (c1.r + c2.r);\n};\n\n// 線分と線分の距離\ndouble getDistance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n};\n\n// 線分と線分の交点(必ず交点があり、それがどちらかの端点出ない)\nPoint getCrossPoint(Segment s1, Segment s2) {\n  Vector base = s2.p2 -s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1/ (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n};\n\n// 円cと線分lの交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n  assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n};\n\ndouble arg(Vector p) { return atan2(p.y, p.x); };\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); };\n\n// circle c1とcircle c2の交点\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n  assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n};\n\ntypedef vector<Point> Polygon;\n\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; i++) {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n\n  return (x ? 2 : 0);\n};\n\nint main() {\n  int q;\n  cin >> q;\n  Point p;\n  Polygon g;\n  for (int i = 0; i < q; i++) {\n    cin >> p.x >> p.y;\n    g.push_back(p);\n  }\n\n  int n;\n  cin >> n;\n\n  for (int i = 0; i < n; i++) {\n    cin >> p.x >> p.y;\n    cout << contains(g, p) << endl;\n  }\n\n  return 0;\n};\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    pprint(){\n        cout << \"(\" << x << \",\" << y << \") \";\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n// cout << c << endl;\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n// cout << get_position(s1, s2.p1) << \" \" << get_position(s1, s2.p2)  << endl;\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n// cout << endl;\n// cout << get_position(s2, s1.p1) << \" \" << get_position(s2, s1.p2)  << endl;\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n    }\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            // poly[i].pprint();\n            // poly[(i+1)%n].pprint();\n            // cout << endl;\n            count++;\n        }\n    }\n// cout << \"s \" << count << endl;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n// cout << \"p \" << count << endl;\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(ll i=(ll)(a);i<(ll)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb push_back\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define mmax(x,y) (x>y?x:y)\n#define mmin(x,y) (x<y?x:y)\n#define maxch(x,y) x=mmax(x,y)\n#define minch(x,y) x=mmin(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt __builtin_popcount\n\ntypedef long double D;\ntypedef complex<D> P;\n\n#define X real()\n#define Y imag()\n\nconst D eps=1e-8;\nconst D inf=1e12;\nconst D PI=acos(-1);\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return a.X==b.X?a.Y<b.Y:a.X<b.X;\n  }\n}\nbool cmp_x(const P& a,const P& b){ return a.X==b.X?a.Y<b.Y:a.X<b.X; }\nbool cmp_y(const P& a,const P& b){ return a.Y==b.Y?a.X<b.X:a.Y<b.Y; }\nbool cmp_a(const P& a,const P& b){ return arg(a)==arg(b)?norm(a)<norm(b):arg(a)<arg(b); }\nD cross(P a,P b){ return (conj(a)*b).Y; }\nD dot(P a,P b){ return (conj(a)*b).X; }\nD toRag(D deg){ return deg*PI/180.0; }\nP rot(P base,P a,D theta){ return base+polar(abs(a-base),arg(a-base)+theta); }\n\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nenum{OUT,ON,IN};\nint contains(vector<P> poly,P p) {\n  int n=poly.size();\n  bool in=false;\n  for(int i=0;i<n;i++){\n    P a=poly[i]-p, b=poly[(i+1)%n]-p;\n    if(a.Y>b.Y)swap(a,b);\n    if(a.Y<=0&&0<b.Y){\n      if(cross(a,b)<0)in=!in;\n    }\n    if(cross(a,b)==0&&dot(a,b)<=0)return ON;\n  }\n  return in?IN:OUT;\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int n;\n  vector<P> polygon;\n  cin>>n;\n  rep(i,n){\n    D x,y;\n    cin>>x>>y;\n    polygon.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    D x,y;\n    cin>>x>>y;\n    int res=contains(polygon,P(x,y));\n    cout<<res<<endl;\n  }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\ninline double add(double a, double b){\n    return abs(a+b)<(1e-10)*(abs(a)+abs(b)) ? 0.0 : a+b;\n}\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        return (vec){add(x,-b.x),add(y,-b.y)};\n    }\n    vec operator+(vec b){\n        return (vec){add(x,b.x),add(y,b.y)};\n    }\n    vec operator*(double d){\n        return (vec){x*d,y*d};\n    }\n    double dot(vec v){\n        return add(x*v.x,y*v.y);\n    }\n    double cross(vec v){\n        return add(x*v.y,-y*v.x);\n    }\n    double norm(){\n        return sqrt(x*x+y*y);\n    }\n};\ntypedef vector<vec> polygon;\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = ab.cross(ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(ab.dot(ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(ab.dot(ab)<ac.dot(ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isOnEdge(polygon& g,vec& p){\n    int n=g.size()-1;\n    for(int i=0;i<n;i++){\n        if(!ccw(g[i],g[i+1],p)) return true;\n    }\n    return false;\n}\n\nbool isInterSection(vec& p0,vec& p1,vec& p2,vec& p3){//??????p[0]p[1]??¨p[2]p[3]\n    switch(ccw(p0,p1,p2)*ccw(p0,p1,p3)){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n    switch(ccw(p2,p3,p0)*ccw(p2,p3,p1)){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n   return true;\n}\n\nbool isInside(polygon& g,vec& p){\n    int n=g.size()-1,c=0;\n    vec O = (vec){-10001,-10001};\n    for(int i=0;i<n;i++){\n        if(isInterSection(O,p,g[i],g[i+1])) c++;\n    }\n    if(c%2) return true;\n    else return false;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    polygon g;\n    vec v;\n    while(n--){\n        cin >> v.x >> v.y;\n        g.push_back(v);\n    }\n    g.push_back(g[0]);\n\n    cout.precision(1);\n    cout << fixed;\n\n    cin >> n;\n    while(n--){\n        cin >> v.x >> v.y;\n        if(isOnEdge(g,v)){\n            cout << 1 << endl;\n        }else if(isInside(g,v)){\n            cout << 2 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n\nstruct pt {\n\tint x, y;\n\tpt(){};\n\tpt(int _x, int _y) : x(_x), y(_y){};\n\tbool operator==(pt p) const {\n\t\treturn(x == p.x && y == p.y);\n\t};\n};\n\npt points[100];\n\ninline double ccw(pt a, pt b, pt c) {\n\treturn((b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x));\n}\n\nvoid find(pt p, int numPoints) {\n\tdouble r;\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tif (p == points[i]) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (i == numPoints-1) {\n\t\t\tr = ccw(points[i], p, points[0]);\n\t\t} else {\n\t\t\tr = ccw(points[i], p, points[i+1]);\n\t\t}\n\n\t\tif (r > 0) {\n\t\t\tprintf(\"0\\n\");\n\t\t\treturn;\n\t\t} else if (r==0) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf(\"2\\n\");\n}\n\nint main() {\n\tint numPoints, numTests, val, a, b;\n\tscanf(\"%d\", &numPoints);\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tpoints[i] = pt(a, b);\n\t}\n\n\tscanf(\"%d\", &numTests);\n\tfor (int i = 0; i < numTests; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tfind(pt(a,b), numPoints);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath??????¢???°???????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n \n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//???????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n  \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n \nR dot(Point a,Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n \n \n \n \nbool is_orthogonal(Line a,Line b){//2???´?????????´?????????\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2???´??????????????????\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n \n \n \n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b???§????????¨????¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b???§?????¨????¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n \nbool is_intersection_ll(Line l,Line m){//????????????´??????????????????\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //?????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n \nbool is_intersection_ls(Line l,Line s){//???´???l???¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n \nbool is_intersection_lp(Line l,Point p){//???´???l???¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n \nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n \nbool is_intersection_sp(Line s,Point p){//?????????¨?????????????????? ?????§???????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n \n/////////////??????¢\nR dis_lp(Line l,Point p){//???´???l???¨???p?????????¢\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n \nR dis_ll(Line l,Line m){//????????????´????????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n \nR dis_ls(Line l,Line s){//???´???l???¨??????s?????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n \nR dis_sp(Line s,Point p){//??????s???¨???p?????????¢\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n \nR dis_ss(Line s,Line t){//????????????????????????¢\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n \n \n \n//////////////??°????±???¨?????°?\nPoint projection(Line l,Point p){//??°????±?????±???????\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n \nPoint reflection(Line l,Point p){//?????°??????±???????\n    return p + 2.0 * (projection(l,p) - p);\n}\n \n \n \n \n//////////////??????(?????????????????¨????????????????¨???????????????????????????????????????£??????)\n \nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//?????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n \nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n \n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ???§????????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ?????????????????????????????????????????????¨??????§???????????? C ?????????°?????????§??????sqrt ????????? double ???????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n \n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n \n    return p;\n}\n \n/*\nLine conver_line(Line a,Point maxi,Point mini){//???????????????´??????????????? maxi???????????????????????? mini?????????\n \n    if(abs(dot(a.sd - a.ft,Point(1.0,0.0))) < EPS){//??????x????????????´??????\n        ;\n    }\n}*/\n \n \n/////////////////////////polygon\n \n#define currP(P,i) P[i]//????????????\n#define nextP(P,i) P[(i + 1)%P.size()]//??¬??????????\n \nint is_contains_p_in_Poly(Poly po,Point p){//???????????§????¢?????????¨(1)?????¢????(-1)?????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && -EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(abs(cross(a,b)) == 0.0 && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n \nR area2(Poly po){//?????§????¢??????¢?????????????????±???????\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n \n \n \n \n///////////////////////////???\n \nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n \n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n \nint main(void){\n    int n;\n    Poly po;\n    cin >> n;\n    REP(i,n){\n        int x,y;\n        cin >> x >> y;\n        Point p = Point(x,y);\n        po.pb(p);\n    }\n    int q;\n    cin >> q;\n    REP(i,q){\n        int x,y;\n        cin >> x >> y;\n        int a = is_contains_p_in_Poly(po,Point(x,y));\n        if(a == 1)\n            printf(\"2\\n\");\n        else if(a == -1)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<string>\n#include<set>\n#include<map>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<((int)(n));i++)\n#define reg(i,a,b) for(int i=((int)(a));i<=((int)(b));i++)\n#define irep(i,n) for(int i=((int)(n))-1;i>=0;i--)\n#define ireg(i,a,b) for(int i=((int)(b));i>=((int)(a));i--)\ntypedef long long int lli;\ntypedef pair<int,int> mp;\n#define fir first\n#define sec second\n#define IINF INT_MAX\n#define LINF LLONG_MAX\n\nstruct pos{\n\tdouble x,y;\n\tdouble norm,norm2;\n\tpos tov(pos a){\n\t\treturn (a-(*this));\n\t}\n\tpos operator+(pos a)const{\n\t\tpos res=a;\n\t\tres.x+=x; res.y+=y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos operator-(pos a)const{\n\t\tpos res=(*this);\n\t\tres.x-=a.x; res.y-=a.y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos scalar(double a){\n\t\tpos res=(*this);\n\t\tres.x*=a; res.y*=a;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tdouble dot(pos a){\n\t\treturn x*a.x + y*a.y;\n\t}\n\tdouble cross(pos a){\n\t\treturn x*a.y - y*a.x;\n\t}\n\tpos(double ix,double iy){\n\t\tx=ix; y=iy;\n\t\tnorm2=x*x+y*y;\n\t\tnorm=sqrt(norm2);\n\t}\n\tpos(){}\n\tstring str(){\n\t\tchar ns[50];\n\t\tsprintf(ns,\"(%lf %lf)\",x,y);\n\t\treturn\tstring(ns);\n\t}\n\tstatic pos polar(double r,double t){\n\t\treturn pos(r*cos(t),r*sin(t));\n\t}\n};\n\nstruct line{\n\tpos p,q;\n\tpos vec;\n\tstring str(){\n\t\treturn (\"(\"+p.str()+\"-\"+q.str()+\")\");\n\t}\n\tbool iscross(line a){\n\t\tdouble da,db;\n\t\tda=vec.cross( p.tov(a.p) );\n\t\tdb=vec.cross( p.tov(a.q) );\n\t\tif(da*db>=0)return false;\n\t\tda=a.vec.cross( a.p.tov(p) );\n\t\tdb=a.vec.cross( a.p.tov(q) );\n\t\treturn (da*db<0);\n\t}\n\tline(pos ip,pos iq){\n\t\tp=ip; q=iq;\n\t\tvec=p.tov(q);\n\t}\n\tline(){}\n\tdouble dist(pos a){\n\t\tif(p.tov(a).dot( p.tov(q) )<0)return p.tov(a).norm;\n\t\tif(q.tov(a).dot( q.tov(p) )<0)return q.tov(a).norm;\n\t\treturn abs(vec.cross(p.tov(a))/vec.norm);\n\t}\n\tdouble dist(line a){\n\t\tif(iscross(a))return 0;\n\t\treturn min( min(dist(a.p),dist(a.q)) , min(a.dist(this->p),a.dist(this->q)));\n\t}\n};\n\ndouble lowofcos_getcos(double a,double b,double c){\n\treturn ((a*a+b*b-c*c)/(2*a*b));\n}\n\nstruct circle{\n\tpos p;\n\tdouble r;\n\t\n\tline getintersection(circle a){\n\t\tpos cv=p.tov(a.p);\n\t\tdouble br=atan2(cv.y,cv.x);\n\t\tdouble dr=acos(lowofcos_getcos( r, cv.norm, a.r));\n\t\t\n\t\tpos p1= p+pos::polar(r,br+dr);\n\t\tpos p2= p+pos::polar(r,br-dr);\n\t\t\n\t\treturn line(p1,p2);\n\t}\n\tcircle(pos ip,double ir){\n\t\tp=ip; r=ir;\n\t}\n\tcircle(){}\n};\n\nstruct polygon{\n\tvector<pos> ps;\n\tpolygon(){}\n\tdouble area(){\n\t\tdouble res=0;\n\t\trep(i,ps.size()){\n\t\t\tpos no=ps[i],to=ps[(i+1)%ps.size()];\n\t\t\tres+=(no.x+to.x)*(no.y-to.y);\n\t\t}\n\t\treturn abs(res)/2;\n\t}\n\tpolygon(pos a,pos b){\n\t\tps.push_back(a);\n\t\tps.push_back(pos(a.x,b.y));\n\t\tps.push_back(b);\n\t\tps.push_back(pos(b.x,a.y));\n\t}\n\tline gete(int a){\n\t\treturn line(ps[a],ps[(a+1)%ps.size()]);\n\t}\n\tint isin(pos a){\n\t\t//????????¢??????\n\t\t/*\n\t\tif((a.x-ps[0].x)*(a.x-ps[2].x)>0)return false;\n\t\tif((a.y-ps[0].y)*(a.y-ps[2].y)>0)return false;\n\t\treturn true;\n\t\t*/\n\t\t\n\t\t//?????´??????2,?????£????????????1,?????????0\n\t\tdouble as=0;\n\t\trep(i,ps.size()){\n\t\t\tline ne=gete(i);\n\t\t\tif(ne.dist(a)<=0)return 1;\n\t\t\tpos v1=a.tov(ne.p);\n\t\t\tpos v2=a.tov(ne.q);\n\t\t\t//printf(\"%s %s\\n\",v1.str().c_str(),v2.str().c_str());\n\t\t\tdouble nt=acos(max(-1.0,min(v1.dot(v2)/(v1.norm*v2.norm),1.0)));\n\t\t\tdouble ns=(v1.cross(v2)/(v1.norm*v2.norm));\n\t\t\t//printf(\"%lf %lf %lf %lf %lf\\n\",nt,ns,v1.norm,v2.norm,v1.dot(v2));\n\t\t\tif(ns<0)nt*=-1;\n\t\t\tas+=nt;\n\t\t\t//printf(\"%d %s %lf\\n\",i,ne.str().c_str(),as);\n\t\t}\n\t\tif(abs(as)<1e-6)return 0;\n\t\treturn 2;\n\t}\n\t\n\tpolygon mult(polygon a){\n\t\treturn a;\n\t}\n};\n\n\nint main(void){\n\tint n;\n\tscanf(\"%d\",&n);\n\tpolygon pl;\n\trep(i,n){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tpl.ps.push_back(pos(p,q));\n\t}\n\t\n\tint qn;\n\tscanf(\"%d\",&qn);\n\trep(i,qn){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tprintf(\"%d\\n\",pl.isin(pos(p,q)));\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n// ------ Classes ------ //\nclass Point {\npublic:\n\tlong double px, py;\n\tPoint() : px(0), py(0) {};\n\tPoint(long double px_, long double py_) : px(px_), py(py_) {};\n\tfriend bool operator==(const Point& p1, const Point& p2) { return p1.px == p2.px && p1.py == p2.py; }\n\tfriend bool operator!=(const Point& p1, const Point& p2) { return p1.px != p2.px || p1.py != p2.py; }\n\tfriend bool operator<(const Point& p1, const Point& p2) { return p1.px < p2.px ? true : (p1.px == p2.px && p1.py < p2.py); }\n\tfriend bool operator>(const Point& p1, const Point& p2) { return p1.px > p2.px ? true : (p1.px == p2.px && p1.py > p2.py); }\n\tfriend bool operator<=(const Point& p1, const Point& p2) { return !(p1 > p2); }\n\tfriend bool operator>=(const Point& p1, const Point& p2) { return !(p1 < p2); }\n\tfriend Point operator+(const Point& p1, const Point& p2) { return Point(p1.px + p2.px, p1.py + p2.py); }\n\tfriend Point operator-(const Point& p1, const Point& p2) { return Point(p1.px - p2.px, p1.py - p2.py); }\n\tfriend Point operator*(const Point& p1, long double d) { return Point(p1.px * d, p1.py + d); }\n\tfriend Point operator*(long double d, const Point& p1) { return p1 * d; }\n\tfriend Point operator/(const Point& p1, long double d) { return Point(p1.px / d, p1.py / d); }\n\tPoint& operator+=(const Point& p1) { px += p1.px; py += p1.py; return *this; }\n\tPoint& operator-=(const Point& p1) { px -= p1.px; py -= p1.py; return *this; }\n\tPoint& operator*=(long double d) { px *= d; py *= d; return *this; }\n\tPoint& operator/=(long double d) { px /= d; py /= d; return *this; }\n};\n// ------ Functions ------ //\nlong double norm(const Point& a) { return a.px * a.px + a.py * a.py; }\nlong double abs(const Point& a) { return sqrtl(norm(a)); }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint contain(vector<Point> v, Point p) {\n\tbool in = false;\n\tfor (int i = 0; i < v.size(); ++i) {\n\t\tPoint a = v[i] - p, b = v[(i + 1) % v.size()] - p;\n\t\tif (a.py > b.py) swap(a, b);\n\t\tif (a.py <= 0 && 0 < b.py)\n\t\t\tif (crs(a, b) < 0) in = !in;\n\t\tif (crs(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n// ------ Main ------ //\nint n, q; vector<Point> v; Point r;\nint main() {\n\tcin >> n; v.resize(n);\n\tfor (int i = 0; i < n; i++) cin >> v[i].px >> v[i].py;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> r.px >> r.py;\n\t\tcout << contain(v, r) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n    Point(){};\n    Point(double x, double y):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nclass Segment{\npublic:\n    Point p1, p2;\n    Segment(){};\n    Segment(Point p1, Point p2):p1(p1), p2(p2){};\n};\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(){};\n    Circle(Point c, double r):c(c), r(r){}\n};\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\ndouble norm(Point p){return p.x * p.x + p.y * p.y;}\ndouble abs(Point p){return sqrt(norm(p));};\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isorthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isorthognoal(Point a1, Point a2, Point b1, Point b2){\n    return equals(cross(a1 - a2, b1 - b2), 0.0);\n}\nbool isparallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isparallel(Point a1, Point a2, Point b1, Point b2){\n    return equals(cross(a1 - a2, b1 - b2), 0.0);\n}\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\ndouble getdistance(Point a, Point b){\n    return abs(a - b);\n}\ndouble getdistancelp(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getdistancesp(Segment s, Point p){\n    if(dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return abs(p - s.p1);\n    if(dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return abs(p - s.p2);\n    return getdistancelp(s, p);\n}\n\nbool isorthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2  - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isparallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nstatic const int counter_clockwise = 1;\nstatic const int clockwise = -1;\nstatic const int online_back = 2;\nstatic const int online_front = -2;\nstatic const int on_segment = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return counter_clockwise;\n    if(cross(a, b) < -EPS) return clockwise;\n    if(dot(a,b) < -EPS) return online_back;\n    if(norm(a) < norm(b)) return online_front;\n    return on_segment;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n        ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getdistance(Segment s1, Segment s2){\n    if(intersect(s1, s2))\n        return 0.0;\n    return min(min(getdistancesp(s1, s2.p1), getdistancesp(s1, s2.p2)),\n        min(getdistancesp(s2, s1.p1), getdistancesp(s2, s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point>getcrosspoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr -c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p){return atan2(p.y, p.x);}\nVector polar(double a, double r){return Point(cos(r) * a, sin(r) * a);}\n\npair<Point, Point>getcrosspoints(Circle c1, Circle c2){\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0; i < n; i ++){\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if(a.y > b.y)   swap(a, b);\n        if(a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n            x = !x;\n    }\n    return (x ? 2 : 0);\n}\nint cmp(Point a, Point b){\n    return (a.y < b.y || (a.y == b.y  && a.x < b.x));\n}\nPolygon andrewscan(Polygon s){\n    Polygon u, l;\n    int len = s.size();\n    if(len < 3) return s;\n\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[len - 1]);\n    l.push_back(s[len - 2]);\n\n    for(int i = 2; i < len; i ++){\n        for(int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; i --)\n            u.pop_back();\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for(int i = u.size() - 2; i >= 1; i --)\n        l.push_back(u[i]);\n\n    return l;\n}\n\nint main(){\n    int n, q, i;\n    Polygon po;\n    Point p, tp;\n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i ++){\n        scanf(\"%lf %lf\", &tp.x, &tp.y);\n        po.push_back(tp);\n    }\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i ++){\n        scanf(\"%lf %lf\", &p.x, &p.y);\n        printf(\"%d\\n\", contains(po, p));\n\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i = 1, i##_end_ = (n); i <= i##_end_; ++i)\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n\nconst double eps = 1e-10;\nint sgn(double x) {\n    if(fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n    Point(double xp=0, double yp=0): x(xp), y(yp) { }\n    Point operator + (const Point& rhs) const { return Point(x+rhs.x, y+rhs.y); }\n    Point operator - (const Point& rhs) const { return Point(x-rhs.x, y-rhs.y); }\n    Point operator * (const double& k) const { return Point(x*k, y*k); }\n    Point operator / (const double& k) const { return Point(x/k, y/k); }\n    bool operator < (const Point& rhs) const { return x < rhs.x || (x==rhs.x && y<rhs.y); }\n    bool operator == (const Point& rhs) const {return sgn(x - rhs.x) == 0 && sgn(y - rhs.y) == 0; }\n    Point turn(double rad) { return Point(x*cos(rad)-y*sin(rad), x*sin(rad)+y*cos(rad)); }\n    Point turn90() { return Point(-y, x); }\n    void scan() { scanf(\"%lf%lf\", &x, &y); }\n};\ntypedef Point Vector;\n\ndouble dot(Vector x, Vector y) { return x.x*y.x + x.y*y.y; }\ndouble length(Vector x) { return sqrt(dot(x, x)); }\ndouble dist2(Point A, Point B) { return dot(A - B, A - B); }\ndouble cross(Vector A, Vector B) { return A.x*B.y - A.y*B.x; }\ndouble angle(Vector A, Vector B) { return acos(dot(A, B) / length(A) / length(B)); }\n\nPoint LineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (dot(P-A, v) / dot(v, v));\n}\nPoint LineReflection(Point P, Point A, Point B) {\n    Point proj = LineProjection(P, A, B);\n    return proj + proj - P;\n}\n\nint Clockwise(Point O, Point A, Point B) {\n    /* Clockwise: -1\n       Counterclockwise: 1\n       Otherwise: 0\n    */\n    return sgn(cross(A - O, B - O));\n}\n\nvoid SegCheck(Point a, Point b, Point p) {\n    Vector d = b - a, e = p - a;\n    if(sgn(dot(d, e)) == -1) puts(\"ONLINE_BACK\");\n    else if(sgn(length(e) - length(d)) == 1) puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n}\n\nint JudgeLLParOrth(Point a1, Point a2, Point b1, Point b2) {\n    /* 2: parallel\n       1: orthogonal\n       0: otherwise\n    */\n    Vector v = a2 - a1, w = b2 - b1;\n    if(sgn(cross(v, w)) == 0) return 2;\n    if(sgn(dot(v, w)) == 0) return 1;\n    return 0;\n}\n\nbool CheckSSProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n    double c1 = cross(a1 - b1, b2 - b1), c2 = cross(a2 - b1, b2 - b1);\n    double c3 = cross(b1 - a1, a2 - a1), c4 = cross(b2 - a1, a2 - a1);\n    return sgn(c1) * sgn(c2) == -1 && sgn(c3) * sgn(c4) == -1;\n}\nbool OnSeg(Point P, Point A, Point B) { // (A, B) not inclusive\n    Vector v = B - P, w = A - P;\n    if(sgn(cross(v, w)) != 0) return false;\n    return sgn(dot(v, w)) == -1;\n}\n\nbool CheckSSIntersection(Point a1, Point a2, Point b1, Point b2) {\n    if(a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) return true;\n    if(OnSeg(a1, b1, b2) || OnSeg(a2, b1, b2) || OnSeg(b1, a1, a2) || OnSeg(b2, a1, a2))\n        return true;\n    return CheckSSProperIntersection(a1, a2, b1, b2);\n}\n\n// Ensure lines intersect first!!! cross(v, w) != 0\nPoint LLIntersection(Point a1, Point a2, Point b1, Point b2) {\n    Vector v = a2 - a1, w = b2 - b1, u = a1 - b1;\n    assert(cross(v, w) != 0);\n    double t1 = cross(w, u) / cross(v, w);\n    return a1 + v * t1;\n} // Line: 2 Points\n\nPoint LLIntPV(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    assert(cross(v, w) != 0);\n    double t = cross(w, u) / cross(v, w);\n    return P + v * t;\n} // Line: Point + Vector\n\ndouble PLDist(Point P, Point A, Point B) { // Point-Line\n    return fabs(cross(B - P, A - P) / length(A - B));\n}\ndouble PSDist(Point P, Point A, Point B) { // Point-Segment\n    if(A == B) return length(P - A);\n    if(sgn(dot(A-P, B-A)) == 1) return length(A - P);\n    if(sgn(dot(B-P, B-A)) == -1) return length(B - P);\n    return fabs(cross(B-P, A-P) / length(A-B));\n}\ndouble SSDist(Point a1, Point a2, Point b1, Point b2) {\n    // segment - segment\n    if(CheckSSIntersection(a1, a2, b1, b2)) return 0.0;\n    return min(min(PSDist(a1,b1,b2), PSDist(a2,b1,b2)), min(PSDist(b1,a1,a2), PSDist(b2,a1,a2)));\n}\n\n\n// Polygon Operations\ntypedef vector<Point> Polygon;\ndouble PolygonArea(const Polygon& p) {\n    int sz = p.size();\n    double tot = 0.0;\n    for(int i = 1; i < sz - 1; ++i)\n        tot += cross(p[i]-p[0], p[i+1]-p[0]);\n    return fabs(tot / 2.0);\n}\nbool IsConvex(Polygon po, int strict = 1) {\n    // po should be given in counterclockwise !!!!\n    int sz = po.size(); po.push_back(po[0]), po.push_back(po[1]);\n    for(int i = 0; i < sz; ++i)\n        if(sgn(cross(po[i+1]-po[i], po[i+2]-po[i])) < strict)\n            return false;\n    return true;\n}\nint InPolygon(Point pt, Polygon po) {\n    /* 2: in polygon\n     * 1: on segment\n     * 0: not in polygon\n    */\n    int sz = po.size(), wn = 0; po.push_back(po[0]);\n    for(int i = 0; i < sz; ++i) {\n        Point u = po[i], v = po[i + 1];\n        if(OnSeg(pt, u, v) || pt == u) return 1;\n        if(sgn(u.y-v.y) == 1) swap(u, v);\n        if(pt.y<=u.y || pt.y>v.y) continue;\n        if(sgn(cross(pt-u, v-u)) == -1) wn ^= 1;\n    }\n    return wn << 1;\n}\n\n// Circle\nstruct Circle {\n    Point o;\n    double r;\n    Circle(Point O, double R): o(O), r(R) { }\n    Circle(Point A, Point B, Point C) { // 三点确定圆\n        assert(sgn(cross(B-A, C-A)) != 0);\n        Point mab = (A + B) / 2.0, ab = (B - A).turn90();\n        Point mbc = (B + C) / 2.0, bc = (C - B).turn90();\n        o = LLIntPV(mab, ab, mbc, bc);\n        r = length(A - o);\n    }\n    Point at(double theta) { return o + Point(cos(theta)*r, sin(theta)*r); }\n    bool out(Point pt) { return sgn(length(o-pt) - r) == 1;}\n};\n\n\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nCircle MinCircle(vector<Point> pt) { // 最小圆覆盖，随机增量法\n    int sz = pt.size();\n    shuffle(pt.begin(), pt.end(), rng);\n    Circle cc(pt[0], 0.0);\n    for(int i = 0; i < sz; ++i) if(cc.out(pt[i])) {\n        cc = Circle(pt[i], 0.0);\n        for(int j = 0; j < i; ++j) if(cc.out(pt[j])) {\n            cc = Circle((pt[i] + pt[j]) / 2.0, length(pt[i]-pt[j]) / 2.0);\n            for(int k = 0; k < j; ++k) {\n                if(cc.out(pt[k])) {\n                    cc = Circle(pt[i], pt[j], pt[k]);\n                }\n            }\n        }\n    }\n    return cc;\n}\n\n\n\nint main() {\n    Point x;\n    Polygon pol;\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        x.scan();\n        pol.push_back(x);\n    }\n    scanf(\"%d\", &q);\n    while(q--) {\n        x.scan();\n        printf(\"%d\\n\", InPolygon(x, pol));\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nconst double EPS = 1e-8;\ntypedef pair<double, double> pt;\n#define x first\n#define y second\nostream& operator<<(ostream& os, const pt& p) {\n    return os << p.x << \" \" << p.y;\n}\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\nbool dequal(double x, double y) {\n    return fabs(x-y) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nbool intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n    double maxDist = 0;\n    maxDist = max(maxDist, dist(a.a, a.b));\n    maxDist = max(maxDist, dist(a.a, b.a));\n    maxDist = max(maxDist, dist(a.a, b.b));\n    maxDist = max(maxDist, dist(a.b, b.a));\n    maxDist = max(maxDist, dist(a.b, b.b));\n    maxDist = max(maxDist, dist(b.a, b.b));\n    return maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS;\n  }\n  return ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b);\n}\n\nbool pointOnLine(pt a, seg s) {\n    if (a.x >= min(s.a.x, s.b.x) && a.x <= max(s.a.x, s.b.x)\n        &&\n        a.y >= min(s.a.y, s.b.y) && a.y <= max(s.a.y, s.b.y)) {\n            if (dequal(s.a.x, s.b.x)) return true;\n\n            const double M = (s.b.y - s.a.y) / (s.b.x - s.a.x);\n            const double C = (-M * s.a.x) + s.a.y;\n\n            return zero(a.y - (M*a.x+C));\n    }\n    return false;\n}\n\nint N, Q;\nvector<pt> polypts;\nvector<seg> poly;\nint main() {\n    cin >> N;\n    for ( int p = 0; p < N; ++p) {\n        int x, y;\n        cin >> x >> y;\n        polypts.push_back(pt(x, y));\n        if (p > 0) {\n            poly.push_back(seg(*(polypts.end()-2), polypts.back()));\n            // cout << \"created seg \" << poly.back().a << \" -> \" << poly.back().b << endl;\n        }        \n    }\n    poly.push_back(seg(polypts.back(), polypts.front()));\n    // cout << \"created seg \" << poly.back().a << \" -> \" << poly.back().b << endl;\n\n    cin >> Q;\n    for (int q = 0; q < Q; ++q) {\n        int x ,y;\n        cin >> x >> y;\n        pt p = pt(x, y);\n        seg ray = seg(pt(x,y), pt(11000, y));\n        int counter = 0;\n        bool done = false;\n        for (seg s : poly) {\n            if (pointOnLine(p, s)) {\n                //cout << \"point on polygon edge \" << p << endl;\n                cout << 1 << endl;\n                done = true;\n                break;\n            }\n            if (pointOnLine(s.a, ray)) {\n                // cout << \"seg point a on ray \" << endl;\n                if (s.b.y < p.y)\n                    counter++;\n                continue;\n            }\n            if (intersect(s, ray))\n                counter++;\n        }\n        if (!done) {\n            if (counter % 2 == 0) {\n                cout << 0 << endl;\n            } else {\n                cout << 2 << endl;\n            }\n        }\n        // cout << \"intersects \" << counter << endl;\n        // if (counter == 0) {\n        //     cout << 0 << endl;\n        // }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint is_included(P a, Poly p, P ex){\n  int n = p.size(), c = 0;\n  L l = L(a,ex);\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    if(is_cross(l,L(p[i],p[i+1]))) ++c;\n    if(!ccw(p[i],p[i+1],a)) return 1;//??????\n    if(!(ccw(a,ex,p[i])*ccw(a,ex,p[i+1]))) --c;\n  }\n  if(c%2) return 2;//?????¨\n  return 0;//?????¨\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    Mx = max(Mx,x);\n    My = max(My,y);\n    p[i] = P(x,y);\n  }\n  ++Mx;\n  ++My;\n  P ex = P(Mx,My);\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << is_included(P(x,y),p,ex) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble dot(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\ndouble cross(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vy) - (v1.vy * v2.vx);\n}\n\ndouble cross0(const Point &P0, const Point &P1)\n{\n\treturn (P0.x * P1.y) - (P1.x * P0.y);\n}\n\ndouble onenorm(const Vector &v)\n{\n    return abs(v.vx) + abs(v.vy);\n}\n\ndouble norm(const Vector &v)\n{\n\treturn sqrt(v.vx * v.vx + v.vy * v.vy);\n}\n\nint ccw(const Point &P0, const Point &P1, const Point &P2)\n{\n    Vector V1 = set_v(P0, P1);\n    Vector V2 = set_v(P0, P2);\n    double c = cross(V1, V2);\n    if(c > 0){ return 1; }else if(c < 0){ return -1; }\n    if(dot(V1, V2) < 0){ return -2; }\n    if(onenorm(V1) < onenorm(V2)){ return 2; }\n    return 0;\n}\n\ninline int sign(const double a){ if(a != 0){ return (a > 0 ? 1 : -1); } return 0; }\n\nint main()\n{\n    int i, j, n;\n    double *X, *Y;\n    scanf(\"%d\", &n);\n    X = new double [n + 1];\n    Y = new double [n + 1];\n    for(i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &X[i], &Y[i]);\n    }\n    X[n] = X[0], Y[n] = Y[0];\n    Point *Polygon;\n    Polygon = new Point [n + 1];\n    for(i = 0; i <= n; i++){\n        Polygon[i] = set_p(X[i], Y[i]);\n    }\n    int q; double x, y;\n    scanf(\"%d\", &q);\n    Point P;\n    Vector U, V;\n    int a;\n    bool is_inside;\n\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &x, &y);\n        P = set_p(x, y);\n        U = set_v(P, Polygon[0]);\n        a = 0;\n        is_inside = false;\n        for(j = 0; j < n; j++){\n            V = set_v(P, Polygon[j + 1]);\n            a = sign(cross(U, V));\n            if(a != 0){\n                if((a > 0 && U.vy <= 0 && V.vy > 0) || (a < 0 && V.vy <= 0 && U.vy > 0)){ is_inside = !is_inside; }\n            }else{\n                if(dot(U, V) <= 0) break;\n            }\n            U = V;\n        }\n        if(j < n){ printf(\"1\\n\"); }\n        else{\n            printf(\"%d\\n\", (is_inside ? 2 : 0));\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst pair<int, int> INF{329083291, 23409802};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\tif(!cross2) {\n\t\treturn true;\n\t}\n\treturn cross1 * cross2 < 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int j = 0; j < q; j++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=jp\n\n#include <iostream>\n#include <cstdio>\n#include <iomanip> // setprecision\n#include <complex>\n#include <cmath>\nusing namespace std;\n\ntypedef complex<double> point;\n\ndouble inner_product(point x, point y) {\n  return (conj(x) * y).real();\n}\n\ndouble outer_product(point x, point y) {\n  return (conj(x) * y).imag();\n}\n\npoint normalize(point a) {\n  return a * (1/abs(a)); // normはabsの2乗、absは本来のノルム。\n}\n\npoint projection(point a, point b) {\n  point e = normalize(b);\n  return e * inner_product(a, e);\n}\n\nbool opposite(point a1, point a2, point b1, point b2) { // 直線a1a2に対し、b1とb2が反対側か否か。ただし端点は考慮しない。\n  return (outer_product(a2-a1, b1-a1) * outer_product(a2-a1, b2-a1) < 0);\n}\n\nbool crossed(point a1, point a2, point b1, point b2) { // 線分a1a2と線分b1b2が交点を持つか否か。ただし端点は考慮しない。\n  return ( opposite(a1, a2, b1, b2) && opposite(b1, b2, a1, a2) );\n}\n\nint n;\npoint P[110];\nconst double epsilon = 1e-11;\n\nbool isonedge(point X1, point X2, point p) { // X1 X2 の辺上(端点含む)にpがあるかを返す。今回の場合、X1, X2, pの座標は実はすべて整数だから、割り算が出ないようにすれば問題ない。\n  if ( (( X1.real() - p.real() ) * ( X2.real() - p.real() ) > 0)\n       || \n       (( X1.imag() - p.imag() ) * ( X2.imag() - p.imag() ) > 0)) { \n    // ともかくx, y座標を見て、辺上にない場合を弾く。\n    // (x座標だけ見るのではダメであった)\n    return false;\n  }\n  // その後は、X1 X2 と X1 P が平行かどうかを調べる。\n  // 念のためepsilonで誤差も気を使う。\n  return (abs(outer_product(X1 - X2, X1 - p)) < epsilon);\n}\n\nbool isonpol(point p) {\n  for (int i=0; i<n; i++) {\n    if (isonedge(P[i], P[(i+1)%n], p)) return true;\n  }\n  return false;\n}\n\nbool isin(point p, point q) { // qには、絶対外側であって、線分pqが多角形の頂点にもひっかかる可能性がないものを扱う。\n  bool ans = false;\n  for (auto i=0; i<n; i++) {\n    if (crossed(p, q, P[i], P[(i+1)%n])) ans = !ans;\n  }\n  return ans;\n}\n\nint main() {\n  double x, y;\n  cin >> n;\n  for (int i=0; i<n; i++) {\n    cin >> x >> y;\n    P[i] = point(x, y);\n  }\n  point out = point(20129, 1);\n  int q;\n  cin >> q;\n  for (int i=0; i<q; i++) {\n    cin >> x >> y;\n    point p = point(x, y);\n    if (isonpol(p)) {\n      cout << \"1\" << endl;\n    } else if (isin(p, p+out)) {\n      cout << \"2\" << endl;\n    } else {\n      cout << \"0\" << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld cross(const Point &a, const Point &b){\n  return a.x*b.y - a.y*b.x;\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point a, Point b, Point c){\n  b = b - a;\n  c = c - a;\n  if(cross(b, c) > EPS) return +1; // 反時計周り\n  if(cross(b, c) < -EPS) return -1; // 時計周り\n  if(dot(b, c) < 0) return +2; // c -- a -- b がこの順番に一直線上\n  if(norm(b) < norm(c)) return -2; // a -- b -- c がこの順番に一直線上\n  return 0; // a -- c -- b が一直線上\n}\n\nPoint next(const Polygon &a, int x){\n  return a[(x+1)%a.size()];\n}\n\nPoint prev(const Polygon &a, int x){\n  return a[(x-1+a.size()) % a.size()];\n}\n\nbool is_convex(const Polygon &poly){\n  for(int i = 0 ; i < (int)poly.size() ; i++){\n    if(ccw(prev(poly, i), poly[i], next(poly, i)) == -1) return false;\n  }\n  return true;\n}\n\nint contain(const Polygon &poly, const Point &p){\n  bool in = false;\n  for(int i = 0 ; i < (int)poly.size() ; i++){\n    Point a = poly[i] - p;\n    Point b = next(poly, i) - p;\n    if(a.y > b.y) swap(a, b);\n    if(a.y <= 0 && 0 < b.y && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n  }\n  return in ? 2 : 0;\n}\n\nint main(){  \n  int q;\n  cin >> q;\n  Polygon poly;\n  while(q--){\n    Point p;\n    cin >> p.x >> p.y;\n    poly.push_back(p);\n  }\n  cin >> q;\n  while(q--){\n    Point p;\n    cin >> p.x >> p.y;\n    cout << contain(poly, p) << endl;    \n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, const vector<Point2D>& vP)\n{\n    int n = static_cast<int>(vP.size());\n    for (int i = 0; i < n; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    if (IsOnSeg(P, Segment(vP[n-1], vP[0]))) return 1;\n    int NumCross = 0;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[n-1], vP[0]))) {\n        NumCross++;\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() {}\n\n  Circle(Point p, double r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\ndouble cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nbool parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\ndouble distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\ndouble distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\ndouble distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\ndouble distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\ndouble distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point hp = projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return {hp - v, hp + v};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\nbool merge_if_able(Segment &s1, Segment s2) {\n  if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid merge_segments(vector< Segment > &segs) {\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon convex_cut(Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble area2(const Polygon &p) {\n  double A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble convex_diameter(Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\npair< Point, Point > closer(const pair< Point, Point > &a, const pair< Point, Point > &b) {\n  return distance(a.first, a.second) < distance(b.first, b.second) ? a : b;\n}\n\npair< Point, Point > closest_pair_util(Points &ps, int l, int r) {\n  if(r - l == 2) {\n    return {ps[l], ps[l + 1]};\n  }\n  if(r - l == 3) {\n    pair< Point, Point > a(ps[l], ps[l + 1]), b(ps[l + 1], ps[l + 2]), c(ps[l], ps[l + 2]);\n    return closer(a, closer(b, c));\n  }\n\n  int mid = (l + r) / 2;\n  Point midPoint = ps[mid];\n  auto res = closer(closest_pair_util(ps, l, mid), closest_pair_util(ps, mid, r));\n  double d = distance(res.first, res.second);\n\n  Points pos[2];\n  for(int i = l; i < r; ++i) {\n    if(abs(ps[i].real() - midPoint.real()) < d) pos[i < mid].push_back(ps[i]);\n  }\n  for(const auto &i : pos[0]) {\n    for(const auto &j : pos[1]) {\n      if(distance(i, j) < d) {\n        d = distance(i, j);\n        res = {i, j};\n      }\n    }\n  }\n  return res;\n}\n\npair< Point, Point > closest_pair(Points ps) {\n  if(ps.size() <= 1) exit(-1);\n  for(int i = 0; i < ps.size(); ++i) {\n    ps[i] = rotate(0.1, ps[i]);\n  }\n  sort(ps.begin(), ps.end());\n  if(ps.size() == 2) return {ps[0], ps[1]};\n  auto res = closest_pair_util(ps, 0, ps.size());\n  res.first = rotate(-0.1, res.first);\n  res.second = rotate(-0.1, res.second);\n  return res;\n}\n\nint main() {\n  int N;\n  cin >> N;\n  Polygon p(N);\n  for(auto &s : p) cin >> s;\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Point q;\n    cin >> q;\n    cout << contains(p, q) << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/**\n * Computing Geometry Library\n * @author Sshwy\n */\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define ROF(i,a,b) for(int i=(a);i>=(b);--i)\n\nnamespace cg{\n    typedef long double vtyp;\n    const vtyp eps = 1e-9;\n    bool isZero(vtyp x){ return -eps < x && x < eps; }\n    bool equal(vtyp x, vtyp y){ return isZero(x-y); }\n    bool lt(vtyp x,vtyp y){ return !equal(x,y) && x<y; }\n    bool gt(vtyp x,vtyp y){ return !equal(x,y) && x>y; }\n    struct vec {\n        vtyp x,y;\n        vec(){ x = y = 0; }\n        vec(vtyp _x, vtyp _y){ x = _x, y = _y; }\n        vec operator+(const vec V) const { return vec(x+V.x, y+V.y); }\n        vec operator-() const { return vec(-x, -y); }\n        vec operator-(const vec V) const { return *this + (-V); }\n        vec operator*(const vtyp a) const { return vec(x*a, y*a); }\n        friend vec operator*(const vtyp a, const vec v){ return v*a; }\n        vec operator/(const vtyp a) const { return vec(x/a, y/a); }\n        operator bool() const { return !(isZero(x) && isZero(y)); }\n        bool operator==(const vec V) const { return bool(*this-V) == 0; }\n        vtyp length(){ return sqrt(x*x + y*y); }\n        /**\n         * 方向角，单位 rad\n         */\n        vtyp ang() const { return atan2(y,x); }\n        /**\n         * 方向向量\n         * @return 0向量或者一个单位向量\n         */\n        vec dir() const {\n            if(*this){\n                vtyp ang = atan2(y,x);\n                return vec(cos(ang), sin(ang));\n            } else return vec(0,0);\n        }\n        void read(){ scanf(\"%Lf%Lf\",&x,&y); }\n    };\n    typedef vec point;\n\n    struct line {\n        point p1, p2;\n        line(point _p1, point _p2){ p1 = _p1, p2 = _p2; }\n    };\n    typedef line segment;\n\n    istream & operator>>(istream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ostream & operator<<(ostream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    ifstream & operator>>(ifstream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ofstream & operator<<(ofstream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    /**\n     * 点积\n     * a dot b == |a||b|cos theta\n     */\n    vtyp dot(const vec a, const vec b){ return a.x*b.x + a.y*b.y; }\n    /**\n     * 叉积\n     * 两个向量围成的有向面积\n     */\n    vtyp det(const vec a, const vec b){ return a.x*b.y - a.y*b.x; }\n\n\n    /**\n     * 投影\n     * @param L 直线\n     * @param p 要求投影的点\n     * @return p 在 L 上的投影坐标（即垂足）\n     */\n    point projection(line L, point p){\n        vec d = L.p2 - L.p1;\n        return L.p1 + (dot(d, p-L.p1)/d.length()) * d.dir();\n    }\n    /**\n     * 对称点\n     * @param L 直线\n     * @param p 点\n     * @return p 关于直线 L 的对称点\n     */\n    point reflection(line L, point p){\n        point o = projection(L,p);\n        return vtyp(2)*(o-p)+p;\n    }\n\n    /**\n     * 判断向量是否平行\n     */\n    bool parallel(vec a, vec b){ return isZero(det(a,b)); }\n    /**\n     * 判断直线是否平行\n     */\n    bool parallel(line a, line b){ return parallel(a.p2-a.p1, b.p2-b.p1); }\n    /**\n     * 判断向量是否垂直\n     */\n    bool orthogonal(vec a, vec b){ return isZero(dot(a,b)); }\n    /**\n     * 判断直线是否垂直\n     */\n    bool orthogonal(line a, line b){ return orthogonal(a.p2-a.p1, b.p2-b.p1); }\n    /**\n     * 判断点 p 是否在直线L上\n     */\n    bool online(line L, point p){\n        return parallel(L.p2-L.p1,p-L.p1);\n    }\n    /**\n     * 判断两直线是否重合\n     */\n    bool coincident(line a, line b){\n        return online(a, b.p1) && online(a, b.p2);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在反向延长线上\n     */\n    bool online_back(segment sl, point p){\n        vec a = sl.p2-sl.p1, b = p-sl.p1;\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在正向延长线上\n     */\n    bool online_front(segment sl, point p){\n        vec a = sl.p1-sl.p2, b = p-sl.p2; // 倒过来\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否在线段上（含端点）\n     */\n    bool on_segment(segment sl, point p){\n        return online(sl,p) && !online_back(sl,p) && !online_front(sl,p);\n    }\n    /**\n     * 两条直线的交点\n     * 需确保两条直线不平行\n     */\n    point intersection(line a, line b){\n        assert(!parallel(a,b));\n        vtyp x = det(a.p1-b.p1,b.p2-b.p1);\n        vtyp y = det(b.p2-b.p1,a.p2-b.p1);\n        return a.p1 + (a.p2-a.p1)*x/(x+y);\n    }\n    /**\n     * 判断两个线段是否相交（含边界）\n     */\n    bool check_segment_intersection(segment a, segment b){\n        if(cg::coincident(a,b)){\n            if(on_segment(a,b.p1) \n                    || on_segment(a,b.p2)\n                    || on_segment(b,a.p1) \n                    || on_segment(b,a.p2))return true;\n            else return false;\n        }else if(cg::parallel(a,b)){\n            return false;\n        }else{\n            point o = cg::intersection(a,b);\n            if(cg::on_segment(a,o) && cg::on_segment(b,o))return true;\n            else return false;\n        }\n    }\n    /**\n     * 两个点的距离\n     */\n    vtyp distance(point a,point b){ return (b-a).length(); }\n    /**\n     * 两个线段的距离\n     */\n    vtyp distance(segment a,segment b){\n        if(check_segment_intersection(a,b))return 0;\n        vtyp res = distance(a.p1,b.p1);\n        res = min(res,distance(a.p1,b.p2));\n        res = min(res,distance(a.p2,b.p1));\n        res = min(res,distance(a.p2,b.p2));\n        point o;\n        if(o = projection(b,a.p1), on_segment(b,o))\n            res = min(res,distance(a.p1,o));\n        if(o = projection(b,a.p2), on_segment(b,o))\n            res = min(res,distance(a.p2,o));\n        if(o = projection(a,b.p1), on_segment(a,o))\n            res = min(res,distance(b.p1,o));\n        if(o = projection(a,b.p2), on_segment(a,o))\n            res = min(res,distance(b.p2,o));\n        return res;\n    }\n    /**\n     * 求简单多边形面积\n     * @param g 多边形顶点集\n     */\n    vtyp area(vector<point> g){\n        vtyp res = 0;\n        for(unsigned i=0; i<g.size(); i++){\n            res += det(g[i],g[(i+1) % g.size()]);\n        }\n        res /= 2;\n        return abs(res);\n    }\n    /**\n     * 判断点p与多边形的包含关系\n     * @param g 多边形顶点集\n     * @return 0 表示在多边形外，1 表示在边上，2表示在多边形内\n     */\n    int polygon_point_containment(vector<point> g, point p){\n        line L(vec(p.x-1,p.y),p); // 水平方向的射线\n        int cnt = 0;\n        for(unsigned i=0; i<g.size(); i++){\n            int j = (i+1) % g.size();\n            line e(g[i],g[j]);\n            if(on_segment(e,p))return 1;\n            if(parallel(L,e)){\n                // do nothing.\n            }else if(online_front(L,g[i])){\n                if(g[i].y > g[j].y) ++cnt;\n            }else if(online_front(L,g[j])){\n                if(g[j].y > g[i].y) ++cnt;\n            }else {\n                point o = intersection(L,e);\n                if(on_segment(e,o) && online_front(L,o))++cnt;\n            }\n        }\n        if(cnt%2)return 2;\n        return 0;\n    }\n}\nusing cg::point;\nusing cg::line;\nusing cg::segment;\n\n\nint main(){\n    int n;\n    cin>>n;\n    vector<point> v;\n    FOR(i,1,n){\n        point p;\n        cin>>p;\n        v.pb(p);\n    }\n    int q;\n    cin>>q;\n    FOR(i,1,q){\n        point p;\n        cin>>p;\n        cout<<cg::polygon_point_containment(v,p)<<endl;\n    }\n    //cout<<setiosflags(ios::fixed) <<setprecision(1)\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\nusing G = vector<P>;\nusing C = pair<P,R>;\nstruct S : public L {\n  S() {}\n  S(const P &a, const P &b) : L(a,b) {}\n};\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b) - imag(a)*real(b);\n}\ninline P vec(const L& l) {return l.second - l.first;}\n\n// P,L,Sについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\ninline istream& operator>>(istream& is, S& s) {\n  P a, b;\n  is >> a >> b;\n  s = S(a, b);\n  return is;\n}\n\n// 射影\nP projection(const L &l, const P &p) {\n  R t = dot(p-l.first, l.first-l.second) / norm(l.first-l.second);\n  return l.first + t*(l.first-l.second);\n}\n// 反射\nP reflection(const L &l, const P &p) {\n  return p + (R)2 * (projection(l, p) - p);\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON_SEG=16};\nint ccw(P a, P b, P c) {\n\tP p = (c-a)/(b-a);\n\tif(sgn(imag(p)) > 0) return LEFT;\n\tif(sgn(imag(p)) < 0) return RIGHT;\n\tif(sgn(real(p)) < 0) return BACK;\n\tif(sgn(real(p)-1) > 0) return FRONT;\n\treturn ON_SEG;\n}\n\n// 垂直,平行\ninline bool vertical(L a, L b) {return sgn(dot(vec(a), vec(b))) == 0;}\ninline bool parallel(L a, L b) {return sgn(det(vec(a), vec(b))) == 0;}\ninline bool eal(L a, L b) {return vertical(a,b) && parallel(a,b);}\n\n// 交差判定\ntemplate<bool strict=false> inline bool intersect(const L&l1, const L&l2) {\n  if(strict) return sgn(det(vec(l1),vec(l2))) != 0;\n  return sgn(det(vec(l1),vec(l2))) != 0 || l1 == l2;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const S&s) {\n  if(strict) det(s.first, vec(l)) * det(s.second, vec(l)) < 0;\n  return det(s.first, vec(l)) * det(s.second, vec(l)) <= 0;\n}\ntemplate<bool strict=false> inline bool intersect(const S&s1, const S&s2) {\n  int ccw1 = ccw(s1.first, s1.second, s2.first) | ccw(s1.first, s1.second, s2.second);\n  int ccw2 = ccw(s2.first, s2.second, s1.first) | ccw(s2.first, s2.second, s1.second);\n  if(strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return (ccw1 & ccw2) == (LEFT | RIGHT) || ((ccw1 | ccw2) & ON_SEG);\n}\ntemplate<bool strict=false> inline bool intersect(const S&s, const P&p) {\n  return ccw(s.first, s.second, p) == ON_SEG;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const P&p) {\n  return ccw(l.first, l.second, p) == ON_SEG ||\n          ccw(l.first, l.second, p) == FRONT ||\n          ccw(l.first, l.second, p) == BACK;\n}\n\n// 交点 交差判定を先にすること!!!\ninline P crosspoint(const L& l1, const L& l2) {\n  R ratio = det(vec(l2), l2.first-l1.first)/det(vec(l2),vec(l1));\n  return l1.first + vec(l1)*ratio;\n}\n\n// 距離\nR dist(const S& s, const P& p) {\n  P q = projection(s, p);\n  if(sgn(dot(s.second-s.first, p-s.first)) <= 0) q = s.first;\n  if(sgn(dot(s.first-s.second, p-s.second)) <= 0) q = s.second;\n  return abs(p-q);\n}\nR dist(const S& a, const S& b) {\n  if(intersect(a, b)) return 0;\n  return min({dist(a, b.first), dist(a, b.second), dist(b, a.first), dist(b, a.second)});\n}\n\n// 面積 頂点が反時計回りに並んでいること\nR area(const G& pol) {\n  R ret = 0.0;\n  REP(i, pol.size()) ret += det(pol[i], pol[(i+1)%pol.size()]);\n  return (ret/2.0);\n}\n\n// 凸性の判定\nbool isConvex(const G& pol) {\n  REP(i, pol.size()) {\n    if(sgn(det(pol[(i+1)%pol.size()]-pol[i], pol[(i+2)%pol.size()]-pol[i])) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// 多角形と点の内包\n// 2→in 1→on 0→out\nint inPolygon(const G& pol, const P& p) {\n  bool in = false;\n  for (int i = 0; i < pol.size(); ++i) {\n  \tP a = pol[i] - p, b = pol[(i+1)%pol.size()] - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b) && sgn(det(a, b)) < 0) in = !in;\n    if (sgn(det(a, b)) == 0 && sgn(dot(a, b)) <= 0) return 1;\n  }\n  return in ? 2 : 0;\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  int n;\n  cin >> n;\n  G pol(n);\n  REP(i, n) cin >> pol[i];\n  int q;\n  cin >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    cout << inPolygon(pol, p) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n    double distance( Point a ) {\n\treturn (*this - a).abs();\n    }\n    double arg() {\n\treturn atan2( y, x );\n    }\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nint contains( Polygon poly, Point p ) {\n    int n = poly.size();\n    int count = 0;\n    for ( int i = 0; i < n; i++ ) {\n\tVector a = poly[i] - p;\n\tVector b = poly[ ( i + 1 ) % n ] - p;\n\n\t// ???????????????\n\tif ( abs( a.cross( b ) ) < EPS && a.dot( b ) < EPS ) {\n\t    return 1;\n\t}\n\t// a.y???b.y??\\?????????????????????\n\tif ( a.y > b.y ) {\n\t    Vector tmp = a; a = b; b = tmp;\n\t}\n\t// ??£?????????????????´????????????????????´???\n\tif ( a.y < EPS && b.y > EPS && a.cross( b ) > EPS ) {\n\t    count++;\n\t}\n    }\n\n    return ( count % 2 ) ? 2 : 0;\n}\n\nint main()\n{\n    int n;\n    Polygon poly;\n    scanf(\"%d\", &n);\n\n    for ( int i = 0; i < n; i++ ) {\n\tPoint p;\n\n\tscanf(\"%lf %lf\", &p.x, &p.y);\n\tpoly.push_back( p );\n    }\n    \n    scanf(\"%d\", &n);\n\n    for ( int i = 0; i < n; i++ ) {\n\tPoint p;\n\tscanf(\"%lf %lf\", &p.x, &p.y);\n\tprintf(\"%d\\n\", contains( poly, p ));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<complex>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\n#include<iomanip>\n#include<bitset>\n#include<utility>\n#include<list>\n#include<map>\n#include<set>\n#include<cstring>\n#include<sstream>\n#include<cctype>\nusing namespace std;\nconst double EPS=1e-12;\nconst double INF=1e9;\ntypedef complex<double>P;\nnamespace std{\n    bool operator<(const P& a,const P& b){\n        return real(a)!=real(b)?real(a)<real(b):imag(a)<imag(b);\n    }\n}\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (EQ(real(a),real(b))&&EQ(imag(a),imag(b)))\ndouble cross(const P &a,const P &b){\n    return imag(conj(a)*b);\n}\ndouble dot(const P &a,const P &b){\n    return real(conj(a)*b);\n}\n\nstruct L:public vector<P>{\n    L(const P &a,const P &b){\n        push_back(a);push_back(b);\n    }\n    L(){}\n};\n\ntypedef vector<P>G;\n\nstruct C{\n    P p;double r;\n    C(const P &p_,double r_):p(p_),r(r_){}\n    C(){}\n};\n\nint ccw(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>0)return 1;///counter clockwise\n    if(cross(b,c)<0)return -1;///clockwise\n    if(dot(b,c)<0)return 2;///c--a--b on line\n    if(norm(b)<norm(c))return -2;///a--b--c on line\n    return 0;\n}\nbool orthogonal(P &p,P &q){\n    return EQ(dot(p,q),0.0);\n}\nbool intersectLL(const L &l,const L &m){\n    return abs(cross(l[1]-l[0],m[1]-m[0]))>EPS||///non-parallel\n        abs(cross(l[1]-l[0],m[0]-l[0]))<EPS;///same line\n}\nbool intersectLS(const L &l,const L &s){\n    return cross(l[1]-l[0],s[0]-l[0])*///s[0] is left of l\n        cross(l[1]-l[0],s[1]-l[0])<EPS;///s[1] is right of l\n}\nbool intersectLP(const L &l,const P &p){\n    return abs(cross(l[1]-p,l[0]-p))<EPS;\n}\nbool intersectSS(const L &s,const L &t){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1])<=0&&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1])<=0;\n}\nbool intersectSP(const L &s,const P &p){\n    return abs(abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]))<EPS;\n    ///triangle inequality\n}\nP projection(const L &l,const P &p){\n    double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n    return l[0]+t*(l[0]-l[1]);\n}\nP reflection(const L &l,const P &p){\n    return p+(projection(l,p)-p)*2.0;\n}\ndouble distanceLP(const L &l,const P &p){\n    return abs(p-projection(l,p));\n}\ndouble distanceLL(const L &l,const L &m){\n    return intersectLL(l,m)?0:distanceLP(l,m[1]);\n}\ndouble distanceLS(const L &l,const L &s){\n    if(intersectLS(l,s))return 0;\n    return min(distanceLP(l,s[0]),distanceLP(l,s[1]));\n}\ndouble distanceSP(const L &s,const P &p){\n    const P r=projection(s,p);\n    if(intersectSP(s,r))return abs(r-p);\n    return min(abs(s[0]-p),abs(s[1]-p));\n}\ndouble distanceSS(const L &s,const L &t){\n    if(intersectSS(s,t))return 0;\n    return min(min(distanceSP(s,t[0]),distanceSP(s,t[1])),\n            min(distanceSP(t,s[0]),distanceSP(t,s[1])));\n}\nP crossPoint(const L &l,const L &m){\n    double A=cross(l[1]-l[0],m[1]-m[0]);\n    double B=cross(l[1]-l[0],l[1]-m[0]);\n    if(abs(A)<EPS&&abs(B)<EPS)return m[0];///same line\n    ///if(abs(A)<EPS)assert(false);\n    return m[0]+B/A*(m[1]-m[0]);\n\n}\n\nP extreme(const G &g,const L &l){\n    int k=0;\n    for(int i=1;i<g.size();i++){\n        if(dot(g[i],l[1]-l[0])>dot(g[k],l[1]-l[0]))k=i;\n    }\n    return g[k];\n}\n\nG andrewScan(G s){\n    G u,l;\n    if(s.size()<3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for(int i=2;i<s.size();i++){\n        for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=-1;n--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for(int i=s.size()-3;i>=0;i--){\n        for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=-1;n--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n    return l;\n}\n/*\nIN 2\nON 1\nOUT 0\n*/\nint contains(G g,P p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        P a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n        if(imag(a)>imag(b))swap(a,b);\n        if(imag(a)<EPS&&EPS<imag(b)&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}\n\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    G g;\n    for(int i=0;i<n;i++){\n        double x,y;\n        scanf(\"%lf%lf\",&x,&y);\n        g.push_back(P(x,y));\n    }\n    int m;\n    scanf(\"%d\",&m);\n    while(m--){\n        double x,y;\n        scanf(\"%lf%lf\",&x,&y);\n        printf(\"%d\\n\",contains(g,P(x,y)));\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define EPS 1e-6\t\n\nstruct pt {\n\tint x, y;\n\tpt(){};\n\tpt(int _x, int _y) : x(_x), y(_y){};\n\n\n\tbool operator<(pt p) {\n\t\treturn(x < p.x || (x == p.x && y < p.y));\n\t}\n\n\tbool operator==(pt p) const {\n\t\treturn(x == p.x && y == p.y);\n\t};\n};\n\npt points[100];\n\n\ntypedef std::pair<pt, pt> seg;\n\ninline pt operator-(pt a, pt b) {\n\treturn pt(a.x-b.x, a.y-b.y);\n}\n\ninline double cross(pt a, pt b) {\n\treturn(a.x*b.y - a.y*b.x);\n}\n\ninline bool ccw(pt a, pt b, pt c) {\n\treturn cross(b-a, c-a) >= 0;\n}\n\ninline double dot(pt a, pt b) {\n\treturn (a.x*b.x + a.y*b.y);\n}\n\n\nvoid find(pt p, int numPoints) {\n\tdouble r;\n\tpt pa, pb;\n\tbool cut = false;\n\n\t// assume that there is a horizontal line ray with \n\t// p as its origin in the easterly direction\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tif (p == points[i]) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpa = points[i] - p;\n\t\tpb = points[(i+1)%numPoints] - p;\n\n\t\t// check that vectors are parallel && \n\t\t// have 0 distance between the two\n\t\t// i.e. are collinear\n\t\t// printf(\"%lf %lf\\n\", cross(pa, pb), dot(pa, pb));\n\t\tif (cross(pa, pb) == 0 && dot(pa, pb) <= EPS) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\n\t\t// otherwise check if p-ray cuts across ab\n\t\tif (pa.y > pb.y) {\n\t\t\tpt temp = pa;\n\t\t\tpa = pb;\n\t\t\tpb = temp;\n\t\t}\n\n\t\t// pa points more up\n\t\t// pb points more down\n\t\t// i.e. ab is a vaguely vertical interval\n\t\tif (pa.y <= 0 && pb.y > 0) {\n\t\t\t// p-ray cuts between a and b\n\t\t\tif (cross(pa,pb) > 0) cut = (!cut);\n\t\t}\n\n\t\t\t\t\n\t}\n\tif (cut) {\n\t\tprintf(\"2\\n\");\n\t} else {\n\t\tprintf(\"0\\n\");\n\t}\n}\n\nint main() {\n\tint numPoints, numTests, val, a, b;\n\tscanf(\"%d\", &numPoints);\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tpoints[i] = pt(a, b);\n\t}\n\n\tscanf(\"%d\", &numTests);\n\tfor (int i = 0; i < numTests; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tfind(pt(a,b), numPoints);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\n//点のクラス\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n\n        double norm(Point p){return p.x*p.x+p.y*p.y;}\n        double abs(Point p){return sqrt(norm(p));}    \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\nstruct Segment{ Point p1,p2; };\ntypedef Segment Line;\ndouble norm(Vector v){return v.x*v.x+v.y*v.y;} \ndouble abs(Vector v){return sqrt(norm(v));}    \n//円\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n//多角形\ntypedef vector<Point> Polygon;\n//内積\ndouble dot(Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\n//外戚\ndouble cross(Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n//直交\nbool isOrthogonal(Vector a,Vector b){ return equals(dot(a,b),0.0); }\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){ return isOrthogonal(a1-a2,b1-b2); }\nbool isOrthogonal(Segment s1,Segment s2){ return equals(dot(s1.p1-s1.p2,s2.p1-s2.p2),0.0); }\n//平行\nbool isParallel(Vector a,Vector b){ return equals(cross(a,b),0.0); }\nbool isParallel(Point a1,Point a2,Point b1,Point b2){ return isParallel(a1-a2,b1-b2); }\nbool isParallel(Segment s1,Segment s2){ return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); }\n//射影\nPoint project(Segment s,Point p){ //射影　p377\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n//反射　p379\nPoint reflect(Segment s,Point p){return p+(project(s,p)-p)*2.0;}\n//ベクトルa,bの位置関係\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return 1;//p0,p1,p2が反時計回り\n    if(cross(a,b)<-EPS) return -1;//p0,p1,p2が時計回り\n    if(dot(a,b)<-EPS) return 2;//p1,p0,p2の順で一直線\n    if(norm(a)<norm(b)) return -2;//p0,p1,p2の順で一直線\n    return 0; //p0,p2,p1の順で一直線\n}\n//交差判定　p389\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n            ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);//p1,p2,p3,p4の順で一直線になるのを除く\n}\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n//交点の座標　p392\nPoint getCrossPoint(Segment s1,Segment s2){ \n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n//距離p380\ndouble getDistance(Point a,Point b){ return abs(a-b);} //点aと点b\ndouble getDistanceLP(Line l,Point p){//直線lと点p\n\treturn abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\ndouble getDistanceSP(Segment s,Point p){//線分sと点p\n\tif(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n\tif(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\treturn getDistanceLP(s,p);\n}\ndouble getDistance(Segment s1,Segment s2){ //線分s1と線分s2\n\tif(intersect(s1,s2))return 0.0;\n\treturn min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t\t\t  min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n//円　交点\npair<Point,Point> getCrossPoints(Circle c,Line l){\n\t//asert(intersect(c,l));   交点を持つことの確認\n\tVector pr =project(l,c.c);\n\tVector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n//２つの円の交点\ndouble arg(Vector p){ return atan2(p.y,p.x); }\nVector polar(double a,double r){ return Point(cos(r)*a,sin(r)*a);}\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n\t//assert(intersect(c1,c2));\n\tdouble d=abs(c1.c-c2.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n//点の内包\nint contains(Polygon g,Point p){\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++){\n\t\tPoint a=g[i]-p;\n\t\tPoint b=g[(i+1)%n]-p;\n\tif( abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}   \nint main(){\n    Polygon g;\n    Point p;\n    int n;\n    cin>>n;\n\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        g.push_back(p);\n    }\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        cout<<contains(g,p)<<\"\\n\";\n    }\n    return 0;\n}\n    \n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define X real()\n#define Y imag()\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\n\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\ntypedef vector<P> G;\n\nenum { OUT, ON, IN };\nint contains(const G &g, const P &p) {\n  bool in = false;\n  for (int i = 0; i < g.size(); ++i) {\n    P a = curr(g,i) - p, b = next(g,i) - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    if (imag(a) <= 0 && 0 < imag(b))\n      if (cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nint main() {\n  int N, Q;\n  cin >>N;\n  G g(N);\n  REP(i, N){\n    int x, y; cin >>x >>y;\n    g[i] = P(x, y);\n  }\n  cin >>Q;\n  REP(q, Q){\n    int x, y; cin >>x >>y;\n    P p(x, y);\n    cout <<contains(g, p) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていれば0を返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return 0.0;\n    if(cx==cx&&ay==by)return 0.0;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>=M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            bool flag=true;\n            for(int j=0; j<n; j++){\n                double angle = angle_of_the_two_edges(p_xy[j%n][0], p_xy[j%n][1],tx,ty,p_xy[(j+1)%n][0], p_xy[(j+1)%n][1]);\n                //cout<<angle<<endl;\n                if(angle==M_PI||angle==0.0){\n                    cout<<1<<endl;\n                    flag=false;\n                    break;\n                }\n                \n                if(angle<M_PI){\n                    cout<<0<<endl;\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag)cout<<2<<endl;\n        }\n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<array>\n#include<vector>\n#include<iostream>\n#include<cmath>\n*/\n\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nenum { CCW=1, CW = -1, BACK= 2, FRONT=-2, ON=0}; //Counter Clock Wise\n\n//???????????£\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\n/*\n * ???????§?????????????\n */\nstruct Point {\n\tReal x,y;\n\n\t//Point p(2,3)????¨±???\n\texplicit Point(Real x_=0, Real y_=0): x(x_), y(y_) {} //explicit?????£??\\Point p = x;????¨±????????????????????????\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tbool operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tbool operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n\n};\n\n//Point??????????????°????????¬??????\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\nostream &operator<<(ostream &os, const Point &p) {\n\t//return os << '(' << p.x << \", \" << p.y << ')';\n\treturn os << p.x << \" \" << p.y;\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\n/*\n *???\n */\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\n/*\n * ????§???¢\n */\ntypedef vector<Point> Polygon;\n\n\n\n/*\n * Calc\n */\n//???????¨??????????90??????\nPoint rotate90(const Point &p) { return Point(-p.y,p.x); }\n\n//???????¨???????????????±???\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\n//[X???]??¨[???????????????P??????]????§????\nReal angle(const Point &p) { return atan2(p.y, p.x); }\n\n//??????0????????????P?????§????????¢?????????\nReal norm(const Point &p) { return p.x * p.x + p.y * p.y; }\n\n//??????0????????????P?????§????????¢\nReal abs(const Point &p) { return sqrt(norm(p)); }\n\n//????????????\nReal dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; } //??????(?????????????????£?????????)\nReal cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; } //??????\n\n //?°???±\nPoint project(const Line &l, const Point &p) {\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a,b) / norm(b));\n}\n//???????§°\nPoint reflect(const Line &l, const Point &p) {\n\tconst Point t = project(l, p);\n\treturn t + (t-p);\n}\n\n//Counter Clock Wise\nint ccw(const Point &a, const Point &b, const Point &c) { //????¨????????????¶??????\n\tconst Point p = b - a;\n\tconst Point q = c - a;\n\tconst Real cr = cross(p,q);\n\n\tif (sign(cr) == 1) { return CCW; }\n\tif (sign(cr) == -1) { return CW; }\n\tif (sign(dot(p,q)) == -1) { return BACK; }\n\tif (sign(norm(p) - norm(q)) == -1) { return FRONT; }\n\treturn ON;\n}\n\n//????????????\nbool intersect(const Segment &s, const Point &p) {\n\treturn ccw(s[0], s[1], p) == ON;\n}\n\nbool intersect(const Segment &a, const Segment &b) { //????????£?????????????????????\n\treturn ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) <= 0 \n\t\t   && ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) <=0;\n}\n\nbool intersect(const Line &l, const Point &p) { //\n\treturn abs(ccw(l[0], l[1], p)) != 1;\n}\n\nbool intersect(const Line &l, const Segment &s) { //\n\treturn sign(cross(l[1] - l[0], s[0] - l[0]) * cross(l[1] - l[0], s[1] - l[0])) <=0;\n}\n\nbool intersect(const Line &a, const Line &b) { \n\treturn sign(cross(a[1]-a[0], b[1]-b[0])) != 0\n\t\t|| sign(cross(a[1]-a[0], b[1]-a[0])) == 0;\n}\n\n\n//?????¢\nReal dist(const Point &a, const Point &b) {\n\treturn abs(a - b);\n}\nReal dist(const Line &l, const Point &p) {\n\tPoint a = l[1] - l[0];\n\tPoint b = p - l[0];\n\treturn abs(cross(a,b))/abs(a);\n}\nReal dist(const Line &l, const Segment &s) {\n\tif (intersect(l,s)) { return 0; }\n\treturn min(dist(l,s[0]), dist(l,s[1]));\n}\nReal dist(const Line &a, const Line &b) {\n\tif (intersect(a,b)) { return 0; }\n\treturn dist(a,b[0]);\n}\nReal dist(const Segment &s, const Point &p) {\n\tif (sign(dot(s[1] - s[0], p - s[0])) == -1) { return dist(s[0],p); } \n\tif (sign(dot(s[0] - s[1], p - s[1])) == -1) { return dist(s[1],p); } \n\treturn dist(Line(s[0],s[1]), p);\n}\n\nReal dist(const Segment &a, const Segment &b) {\n\tif (intersect(a,b)) { return 0; }\n\treturn min({dist(a,b[0]), dist(a,b[1]), dist(b,a[0]), dist(b,a[1])});\n}\n\n//???????????¨?????´?????¨????????????\nbool intersect(const Circle &a, const Circle &b) {\n\treturn sign(dist(a.c,b.c) - (a.r + b.r)) <= 0\n\t\t&& sign(dist(a.c,b.c) - abs(a.r - b.r)) >= 0;\n}\n\nbool intersect(const Circle &c, Segment &s) {\n\treturn sign(dist(s, c.c) - c.r) <= 0;\n}\n\nbool intersect(const Circle &c, Line &l) {\n\treturn sign(dist(l, c.c) - c.r) <= 0;\n}\n\n\n/*\n * ??????????±???????\n */\nPoint crosspoint(const Line &a, const Line &b) {\n\tassert(intersect(a,b));\n\tconst Real crs = cross(a[1] - a[0], b[1] - b[0]);\n\tif (sign(crs) == 0) { return a[0]; };\n\treturn b[0] + (b[1] - b[0]) * (cross(a[1]-a[0], a[1]-b[0]) / crs);\n}\n\n//??????\nPoint crosspoint(const Segment &a, const Segment &b) {\n\tassert(intersect(a,b));\n\t\n\tconst Real crs = cross(a[1] - a[0], b[1] - b[0]);\n\tif (sign(crs) == 0) {\n\t\tif(intersect(a, b[0])) { return b[0]; }\n\t\tif(intersect(a, b[1])) { return b[1]; }\n\t\tif(intersect(b, a[0])) { return a[0]; }\n\t\treturn a[1];\n\t}\n\treturn b[0] + (b[1] - b[0]) * (cross(a[1]-a[0], a[1]-b[0]) / crs);\n}\n\nvector<Point> crosspoint(const Circle &c, const Line &l) {\n\tconst Point p = project(l,c.c);\n\tconst Real h = dist(p,c.c);\n\n\tvector<Point> res;\n\tif(sign(h - c.r) == 1) {\n\t\t//nothing\n\t}\n\telse if (sign(h - c.r) == 0) {\n\t\tres.emplace_back(p);\n\t}\n\telse {\n\t\tconst Real b = sqrt(c.r*c.r - h*h);\n\t\tconst Point e = (l[1] - l[0]) / abs(l[1] - l[0]);\n\t\tres.emplace_back(p+e*b);\n\t\tres.emplace_back(p-e*b);\n\t}\n\n\treturn res;\n}\n\nvector<Point> crosspoint(const Circle &c, const Segment &s) {\n\tvector<Point> res;\n\tfor(const Point &p : crosspoint(c,Line(s[0],s[1]))) {\n\t\tif (intersect(s,p)) { res.emplace_back(p); }\n\t}\n\treturn res;\n}\n\nvector<Point> crosspoint(const Circle &a, const Circle &b) {\n\tvector<Point> res;\n\tconst Real d = dist(a.c,b.c);\n\t\n\tif (sign(d - (a.r + b.r)) == 1) {\n\t\t//nothing\n\t}\n\telse if (sign(d - (a.r + b.r)) == 0) {\n\t\tconst Point v = b.c - a.c;\n\t\tres.emplace_back(a.c + (v * (a.r / abs(v))));\n\t}\n\telse {\n\t\tReal theta = acos((a.r*a.r + d*d - b.r*b.r) / (2 * a.r * d));\n\t\tconst Real phi = angle(b.c - a.c);\n\t\tres.emplace_back(a.c + rotate(Point(a.r,0),phi+theta));\n\t\tres.emplace_back(a.c + rotate(Point(a.r,0),phi-theta));\n\t}\n\t\n\treturn res;\n}\n\n//\nbool contain(const Circle &c, const Point &p) {\n\treturn sign(dist(c.c, p) - c.r) <= 0;\n}\n\nint contain(const Polygon &P, const Point &p) {\n\tbool res = false;\n\n\tfor(int i=0; i<P.size(); i++) {\n\t\tPoint v1 = P[i] - p;\n\t\tPoint v2 = P[(i+1) % P.size()] - p;\n\t\tif (v1.y > v2.y) swap(v1,v2);\n\t\tif (sign(cross(v1,v2)) == 0 && dot(v1,v2) <= 0) {\n\t\t\treturn 1; //?????????????????¨???\n\t\t}\n\t\tif (sign(v1.y) <= 0 && sign(v2.y) == 1 && sign(cross(v1,v2)) == 1) {\n\t\t\tres = !res;\n\t\t}\n\t}\n\t\n\treturn res ? 2 : 0; //??????????????¨???2, ?????????????????¨???0\n}\n\n\n\n/*\nvector<Point> my_cp(const Circle &a, const Circle &b) {\n\t\n}\n*/\n\n\n/*\n * Test Code\n */\nint main() {\n\t//CCW=1, CW = -1, BACK= 2, FRONT=-2, ON=0\n\tint g,q;\n\tint x,y;\n\n\tcout.setf(ios::fixed);\n\tcout.precision(8); //?°???°???10?????¨???\n\n\tPolygon P;\n\tcin >> g;\n\tfor(int i = 0; i<g; i++) {\n\t\tcin >> x >> y; \n\t\tPoint p(x,y);\n\t\tP.push_back(p);\n\t}\n\n\tcin >> q;\n\tfor(int i = 0; i<q; i++) {\n\t\tcin >> x >> y; \n\t\tPoint p(x,y);\n\t\tcout << contain(P,p) << endl;\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\ndouble zz(Vector a,Vector b){\nif(a.absv()<EPS || b.absv()<EPS) return 100;\nelse{\na=a/a.absv();\nb=b/b.absv();\ndouble co=dot(a,b),si=cross(a,b);\nif(co<=-1+EPS) return 100;\nelse if(si>0) return acos(co);\nelse return -acos(co);\n}\n\n}\n\n\nint main(){\nint n,k=0,zh;\ndouble x,y;\ncin>>n;\nPoint a[110],q;\nVector v[110];\nfor(int i=0;i<n;i++){\ncin>>x>>y;\na[i].x=x;\na[i].y=y;\n}\na[n]=a[0];\ndouble henkaku=0.0;\nint qu;\ncin>>qu;\nfor(int i=0;i<qu;i++){\ncin>>x>>y;\nq.x=x,q.y=y;\nzh=0;\nhenkaku=0.0;\nfor(int i=0;i<n;i++){\nif(zz(a[i]-q,a[i+1]-q)==100) zh=1;\nelse henkaku=henkaku+zz(a[i]-q,a[i+1]-q);\n//cout<<zz(a[i]-q,a[i+1]-q)<<endl;\nif(a[i]==q) zh=1;\n}\nif(zh==1) cout<<\"1\"<<endl;\nelse if(fabs(henkaku)<1) cout<<\"0\"<<endl;\nelse cout<<\"2\"<<endl;\n//cout<<\"he \"<<henkaku<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nstruct pt {\n\tint x, y;\n\tpt(){};\n\tpt(int _x, int _y) : x(_x), y(_y){};\n\tbool operator==(pt p) const {\n\t\treturn(x == p.x && y == p.y);\n\t};\n};\n\npt points[100];\n\ninline pt operator-(pt a, pt b) {\n\treturn pt(a.x-b.x, a.y-b.y);\n}\n\ninline double cross(pt a, pt b) {\n\treturn(a.x*b.y - a.y*b.x);\n}\n\ninline double ccw(pt a, pt b, pt c) {\n\treturn cross(b-a, c-a);\n\t// if A to B via c is left: > 0\n\t// if A to B via c is straight: < 1\n\t// if A to B via c is right: < 0\n}\n\n\nvoid find(pt p, int numPoints) {\n\tdouble r;\n\tpt a, b;\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tif (p == points[i]) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\t\tr = ccw(points[i], p, points[(i+1)%numPoints]);\n\n\t\tif (r==0) {\n\t\t\t\n\t\t\tif (p.x >= std::min(points[i].x, points[(i+1)%numPoints].x) &&\n\t\t\t\tp.y >= std::min(points[i].y, points[(i+1)%numPoints].y) &&\n\t\t\t\tp.x <= std::max(points[i].x, points[(i+1)%numPoints].x) &&\n\t\t\t\tp.y <= std::max(points[i].y, points[(i+1)%numPoints].y)) {\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprintf(\"0\\n\");\n\n\t\t\treturn;\n\t\t} else if (r > 0) {\n\t\t\tprintf(\"0\\n\");\n\t\t\treturn;\n\t\t} \n\t}\n\tprintf(\"2\\n\");\n}\n\nint main() {\n\tint numPoints, numTests, val, a, b;\n\tscanf(\"%d\", &numPoints);\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tpoints[i] = pt(a, b);\n\t}\n\n\tscanf(\"%d\", &numTests);\n\tfor (int i = 0; i < numTests; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tfind(pt(a,b), numPoints);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( max(-1.0,min(1.0,dot(b,c)/abs(b)/abs(c))) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<vector>\n#define f first\n#define s second\n#define mp make_pair\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){ return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){ return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps)return CLOCKWISE;\n  if(dot(a,b)<-eps)return ONLINE_BACK;\n  if(a.norm()<b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return (s1.p1+(s1.p2-s1.p1)*t);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return mp(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){ return atan2(p.y,p.x);}\nVector polar(double a,double r){ return Point(cos(r)*a,sin(r)*a);}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return mp(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\ndouble getPolygonArea(Polygon p){\n  double area=0.0;\n  int n=p.size();\n  for(int i=0;i<n;i++)area+=cross(p[i%n],p[(i+1)%n]);\n  return area/2;\n}\n\nbool isConvex(Polygon p){\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    if(ccw(p[(i+1)%n],p[i%n],p[(i+2)%n])==1)return false;\n  }\n  return true;\n}\n\n// in 2,out 0,on 1\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Vector a=g[i]-p,b=g[(i+1)%n]-p;\n    if(abs(cross(a,b))<eps && dot(a,b)<eps)return 1;\n    if(a.y>b.y)swap(a.y,b.y);\n    if(a.y<eps && eps<b.y && cross(a,b)>eps)x=!x;\n  }\n  if(x)return 2;\n  return 0;\n}\n\nint main()\n{\n  int n,q,a,b;\n  Polygon p;\n\n  cin>>n;\n  p.resize(n);\n  for(int i=0;i<n;i++)cin>>p[i].x>>p[i].y;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>a>>b;\n    cout<<contains(p,Point(a,b))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n/*\n * cross product\n */\n\nconst double EPS = 1e-8;\n\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\n\n/*\n * segment segment intersection\n */\n\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n\nbool collinear(seg a, seg b) { // all four points collinear\n    // cout << a.a.x << \" \" << a.a.y << endl;\n    // cout << a.b.x << \" \" << a.b.y << endl;\n    \n    // cout << b.a.x << \" \" << b.a.y << endl;\n    // cout << b.b.x << \" \" << a.b.y << endl;\n\n    return zero(cross(a.b - a.a, b.a - a.a)) &&\n           zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nint intersect(seg a, seg b) {\n    if (ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n        ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b)) return 1;\n\n    return 0;\n }\n\n\nint main(){\n\n    vector<pt> polygon;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i){\n        int x, y;\n        cin >> x >> y;\n        polygon.push_back(make_pair(x, y));\n    }\n    cin >> n;\n    for (int i = 0; i < n; ++i){\n        int p, q;\n        cin >> p >> q;\n        int result = 0;\n        int num = 0;\n        for (int j = 0; j < polygon.size(); ++j){\n            int next = (j+1)%polygon.size();\n\n            pt inf = make_pair(9999, q);\n            pt from = make_pair(p, q);\n            seg line_inf = make_pair(from, inf);\n            seg line_to = make_pair(polygon[j], polygon[next]);\n\n\n            seg col = make_pair(from, polygon[next]);\n            if  (collinear(col, line_to)){\n                result = 1;\n                break;\n            }\n            num += intersect(line_inf, line_to);\n        }\n        if (result){\n            cout << 1 << endl;\n        } else if (num % 2 == 0){\n            cout << 0 << endl;\n        } else {\n            cout << 2 << endl;\n        }\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\nusing ll = long long;\nusing P = pair<ll, ll>;\nconst long double PI = acos(-1.0L);\nll GCD(ll a, ll b) { return b?GCD(b, a%b):a; }\nll LCM(ll a, ll b) { return a/GCD(a, b)*b; }\n\nusing CP = complex<long double>;\n\nconst long double EPS = 1e-10;     // 許容する誤差ε\n#define EQ(a, b) (abs((a)-(b)) < EPS)   // 2つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()))    // 2つのベクトルが等しいかどうか\n\n// double length = abs(a);     // ベクトルaの絶対値\n// double distance = abs(a-b);     // 2点a,b間の距離\n// CP b = a/abs(a);    // ベクトルaの単位ベクトル\n// CP n1 = a*CP(0,+1); CP n2 = a*CP(0,-1);  // ベクトルaの法線ベクトル\n// CP un1 = (a*CP(0,+1)/abs(a)); CP un2 = (a*CP(0,-1)/abs(a));  // ベクトルaの単位法線ベクトル\n\n// 内積(dot product) : a・b = |a||b|cosΘ\nlong double dot(CP a, CP b) {\n    return (a.real()*b.real() + a.imag()*b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\nlong double cross(CP a, CP b) {\n    return (a.real()*b.imag() - a.imag()*b.real());\n}\n\n// 2直線の直交判定 : a⊥b ⇔ dot(a,b) = 0\nint is_orthogonal(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(dot(a1-a2, b1-b2), 0.0);\n}\n\n// 2直線の平行判定 : a//b ⇔ cross(a,b) = 0\nint is_parallel(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// 点cが直線a,b上にあるかないか\nint is_point_on_line(CP a, CP b, CP c) {\n    return EQ(cross(b-a, c-a), 0.0);\n}\n\n// 点cが線分a,b上にあるかないか\nint is_point_on_lines(CP a, CP b, CP c) {\n    // |a-c|+|c-b| <= |a-b|なら線分上\n    return (abs(a-c)+abs(c-b) < abs(a-b)+EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_lines(CP a1, CP a2, CP b1, CP b2) {\n    if(is_parallel(a1, a2, b1, b2)) {\n        // 平行なので線分の重なり判定\n        return is_point_on_lines(a1, a2, b1) || is_point_on_lines(a1, a2, b2) ||\n               is_point_on_lines(b1, b2, a1) || is_point_on_lines(b1, b2, a2);\n    }\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-a1) < EPS) &&\n           (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\nCP intersection_lines(CP a1, CP a2, CP b1, CP b2) {\n    CP b = b2-b1;\n    long double d1 = abs(cross(b, a1-b1));\n    long double d2 = abs(cross(b, a2-b1));\n    long double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nint is_intersected_line(CP a1, CP a2, CP b1, CP b2) {\n    return !EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算(平行ではない前提)\nCP intersection_line(CP a1, CP a2, CP b1, CP b2) {\n    CP a = a2-a1; CP b = b2-b1;\n    return a1 + a*cross(b, b1-a1)/cross(b, a);\n}\n\n// 点a,bを通る直線と点cとの距離\nlong double distance_line_p(CP a, CP b, CP c) {\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a,bを端点とする線分と点cとの距離\nlong double distance_lines_p(CP a, CP b, CP c) {\n    if(dot(b-a, c-a) < EPS) return abs(c-a);\n    if(dot(a-b, c-b) < EPS) return abs(c-b);\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a1,a2を端点とする線分と点b1,b2を端点とする線分の最短距離\nlong double distance_lines_lines(CP a1, CP a2, CP b1, CP b2) {\n    long double res = 1e18;\n    if(is_intersected_lines(a1, a2, b1, b2)) return 0.0L;\n    res = min(res, distance_lines_p(a1, a2, b1));\n    res = min(res, distance_lines_p(a1, a2, b2));\n    res = min(res, distance_lines_p(b1, b2, a1));\n    res = min(res, distance_lines_p(b1, b2, a2));\n    return res;\n}\n\n// s,tを通る直線に対する点pの射影\nCP projection(CP s, CP t, CP p) {\n    if(EQV(s, t)) return s;\n    CP base = t-s;\n    return s + base*(dot(p-s, base)/norm(base));\n}\n\n// s,tを通る直線に対する点pの反射\nCP reflection(CP s, CP t, CP p) {\n    CP tmp = projection(s, t, p) - p;\n    return p + tmp*2.0L;\n}\n\n// n多角形の面積計算\nlong double polygon_area(const vector<CP> &v) {\n    int n = v.size();\n    long double res = 0;\n    for(int i = 0; i < n; ++i) {\n        res += cross(v[(i+n-1)%n], v[(i+n)%n]);\n    }\n    return fabsl(res)/2.0L;\n}\n\n// n多角形の凸性判定\nint is_convex(const vector<CP> &v) {\n    int n = v.size();\n    for(int i = 0; i < n; ++i) {\n        if(cross(v[(i+1)%n]-v[i], v[(i+2)%n]-v[(i+1)%n]) < -EPS) return 0;\n    }\n    return 1;\n}\n\n// n多角形に対する点pの包含関係(自己交差多角形は例外)\nint contain_polygon_point(const vector<CP> &v, CP p) {\n    int contain = 0, on_segment = 0;\n    int n = v.size();\n    for(int i = 0; i < n; ++i) {\n        on_segment |= is_point_on_lines(v[i], v[(i+1)%n], p);   // 辺上判定\n        CP s = v[i]-p, t = v[(i+1)%n]-p;\n        if(s.imag() > t.imag()) swap(s, t);     // 下側を基準にする\n        if(s.imag()*t.imag() <= 0 && t.imag() > 0 && cross(s, t) > 0) {\n            contain = !contain;     // 交差回数が奇数なら内側\n        }\n    }\n    if(on_segment) return 1;    // 辺上\n    if(contain) return 2;       // 内側\n    return 0;       // 外側\n}\n\n// 3点の位置関係を判定\nint calc_clockwise(CP p0, CP p1, CP p2) {\n    CP x = p1-p0, y = p2-p0;\n    if(cross(x, y) > EPS) return 1;     // \"COUNTER_CLOCKWISE\"\n    if(cross(x, y) < -EPS) return -1;   // \"CLOCKWISE\"\n    if(dot(x, y) < 0) return 2;         // \"ONLINE_BACK\"\n    if(norm(x) < norm(y)) return -2;    // \"ONLINE_FRONT\"\n    return 0;                           // \"ON_SEGMENT\" \n}\n\nint main() {\n    int n; cin >> n;\n    vector<CP> point;\n    for(int i = 0; i < n; ++i) {\n        long double a, b; cin >> a >> b;\n        point.emplace_back(CP(a, b));\n    }\n\n    int q; cin >> q;\n    while(q--) {\n        long double x, y; cin >> x >> y;\n        CP pp(x, y);\n        cout << contain_polygon_point(point, pp) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(0.0), y(0.0) {}\n\n    Point(db _x, db _y) : x(_x), y(_y) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n    Point scale(db r) { return unit() * r; }\n\n    Point rotCC() { return Point(-y, x); }\n    Point rotCL() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    // Point P,A,B\n    // -2 -> B is at back of PA\n    // -1 -> PB is on the clock-wise side of PA\n    // 0 -> B is on PA\n    // 1 -> PB is on the counter clock-wise side of PA\n    // 2 -> B is at the front of PA\n    int relation(Point a, Point b)\n    {\n        Point p = *this;\n        if (sgn((a - p) ^ (b - p)) > 0)\n            return 1;\n        if (sgn((a - p) ^ (b - p)) < 0)\n            return -1;\n        if (sgn((a - p) * (b - p)) < 0)\n            return -2;\n        if (sgn((p - a) * (b - a)) < 0)\n            return 2;\n        return 0;\n    }\n\n    void read() { cin >> x >> y; }\n    void write(char trail = ' ') { cout << x << ' ' << y << trail; }\n    void Debug() { cerr << \"Point: (\" << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    int relation(Point p) { return s.relation(e, p); }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point intersec(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void Debug() { cerr << \"Line: Start: (\" << s.x << \", \" << s.y << \") End: (\" << e.x << \", \" << e.y << \")\\n\"; }\n};\n\n// Circle\nstruct Circle\n{\n    Point p;\n    db r;\n\n    Circle(){};\n\n    Circle(Point _p, db _r) : p(_p), r(_r) {}\n\n    Circle(db x, db y, db _r) : p({x, y}), r(_r) {}\n\n    Circle(Point a, Point b, Point c, bool in = false)\n    {\n        if (!in)\n        {\n            Line u = Line((a + b) / 2, (a + b) / 2 + (b - a).rotCC());\n            Line v = Line((b + c) / 2, (b + c) / 2 + (c - b).rotCC());\n            p = u.intersec(v);\n            r = p.dis(a);\n        }\n        else\n        {\n            Line u, v;\n            db m = atan2(b.y - a.y, b.x - a.x), n = atan2(c.y - a.y, c.x - a.x);\n            u.s = a;\n            u.e = a + Point(cos((n + m) / 2), sin((n + m) / 2));\n            v.s = b;\n            m = atan2(a.y - b.y, a.x - b.x), n = atan2(c.y - b.y, c.x - b.x);\n            v.e = b + Point(cos((n + m) / 2), sin((n + m) / 2));\n            p = u.intersec(v);\n            r = Line(a, b).disPS(p);\n        }\n    }\n\n    bool operator==(const Circle &c) { return p == c.p && sgn(r - c.r) == 0; }\n\n    bool operator<(const Circle &c) { return (p < c.p) || (p == c.p && sgn(r - c.r) < 0); }\n\n    db area() { return PI * r * r; }\n\n    db cir() { return 2 * PI * r; }\n\n    Point on(db ang) { return Point(p.x + r * cos(ang), p.y + r * sin(ang)); }\n\n    // 0 -> Outside\n    // 1 -> On\n    // 2 -> Inside\n    int relationP(Point v)\n    {\n        db dis = v.dis(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationS(Line l)\n    {\n        db dis = l.disPS(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationL(Line l)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // 1 -> Inside\n    // 2 -> Internally-tangent\n    // 3 -> Intersect\n    // 4 -> Externally-tangent\n    // 5 -> Disjoint\n    int relationC(Circle c)\n    {\n        db d = p.dis(c.p);\n        if (sgn(d - r - c.r) > 0)\n            return 5;\n        if (sgn(d - r - c.r) == 0)\n            return 4;\n        db l = abs(r - c.r);\n        if (sgn(d - r - c.r) < 0 && sgn(d - l) > 0)\n            return 3;\n        if (sgn(d - l) == 0)\n            return 2;\n        // TODO: Check if this one is necessary\n        // if (sgn(d - l) < 0)\n        return 1;\n    }\n\n    // The return value is the number of intersections\n    int crossC(Circle c, Point &p1, Point &p2)\n    {\n        int re = relationC(c);\n        if (re == 1 || re == 5)\n            return 0;\n        db d = p.dis(c.p), l = (d * d + r * r - c.r * c.r) / (2.0 * d), h = sqrt(r * r - l * l);\n        Point tmp = p + (c.p - p).scale(l);\n        p1 = tmp + (c.p - p).rotCC().scale(h);\n        p2 = tmp + (c.p - p).rotCL().scale(h);\n        if (re == 2 || re == 4)\n            return 1;\n        return 2;\n    }\n\n    // Same as above\n    int crossL(Line l, Point &p1, Point &p2)\n    {\n        if (!this->relationL(l))\n            return 0;\n        Point a = l.proj(p);\n        db d = l.disPL(p);\n        d = sqrt(r * r - d * d);\n        if (sgn(d) == 0)\n        {\n            p1 = a;\n            p2 = a;\n            return 1;\n        }\n        p1 = a + (l.e - l.s).scale(d);\n        p2 = a - (l.e - l.s).scale(d);\n        return 2;\n    }\n\n    int tangent(Point q, Point &u, Point &v)\n    {\n        int x = relationP(q);\n        if (x == 2)\n            return 0;\n        if (x == 1)\n        {\n            u = q + (q - p).rotCC();\n            v = u;\n            return 1;\n        }\n        db d = p.dis(q);\n        db l = r * r / d;\n        db h = sqrt(r * r - l * l);\n        u = p + ((q - p).scale(l) + (q - p).rotCC().scale(h));\n        v = p + ((q - p).scale(l) + (q - p).rotCL().scale(h));\n        return 2;\n    }\n\n    int tangent(Circle c, vector<Point> &u, vector<Point> &v)\n    {\n        if (sgn(r - c.r) < 0)\n            return c.tangent(*this, v, u);\n\n        int ret = relationC(c) - 1;\n        if (!ret || *this == c)\n            return 0;\n        u.clear();\n        v.clear();\n\n        db b = (c.p - p).alpha();\n\n        if (ret == 1 || ret == 3)\n        {\n            u.push_back(on(b));\n            v.push_back(on(b));\n        }\n\n        db ang = acos((r - c.r) / p.dis(c.p));\n\n        if (ret != 1)\n        {\n            u.push_back(on(b + ang));\n            u.push_back(on(b - ang));\n            v.push_back(c.on(b + ang));\n            v.push_back(c.on(b - ang));\n        }\n\n        if (ret == 4)\n        {\n            ang = acos((r + c.r) / p.dis(c.p));\n            u.push_back(on(b + ang));\n            u.push_back(on(b - ang));\n            v.push_back(c.on(PI + b + ang));\n            v.push_back(c.on(PI + b - ang));\n        }\n\n        return ret;\n    }\n\n    // The area of intersecting space\n    // With circle c\n    db area(Circle c)\n    {\n        int re = relationC(c);\n        if (re >= 4)\n            return 0;\n        if (re <= 2)\n            return min(area(), c.area());\n        db d = p.dis(c.p);\n        db hf = (r + c.r + d) / 2.0;\n        db ss = 2 * sqrt(hf * (hf - r) * (hf - c.r) * (hf - d));\n        db a1 = acos((r * r + d * d - c.r * c.r) / (2.0 * r * d));\n        a1 = a1 * r * r;\n        db a2 = acos((c.r * c.r + d * d - r * r) / (2.0 * c.r * d));\n        a2 = a2 * c.r * c.r;\n        return a1 + a2 - ss;\n    }\n\n    // The area of intersecting space\n    // With triangle PAB\n    db area(Point a, Point b)\n    {\n        if (sgn((p - a) ^ (p - b)) == 0)\n            return 0.0;\n        Point q[5];\n        int len = 0;\n        q[len++] = a;\n        Line l(a, b);\n        Point p1, p2;\n        if (crossL(l, q[1], q[2]) == 2)\n        {\n            if (sgn((a - q[1]) * (b - q[1])) < 0)\n                q[len++] = q[1];\n            if (sgn((a - q[2]) * (b - q[2])) < 0)\n                q[len++] = q[2];\n        }\n        q[len++] = b;\n        if (len == 4 && sgn((q[0] - q[1]) * (q[2] - q[1])) > 0)\n            swap(q[1], q[2]);\n        db res = 0;\n        for (int i = 0; i < len - 1; i++)\n        {\n            if (relationP(q[i]) == 0 || relationP(q[i + 1]) == 0)\n            {\n                db arg = p.rad(q[i], q[i + 1]);\n                res += r * r * arg / 2.0;\n            }\n            else\n                res += abs((q[i] - p) ^ (q[i + 1] - p)) / 2.0;\n        }\n        return res;\n    }\n\n    // Two circle whose center are a and b respectivelly\n    static int GetCircle(Point a, Point b, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(a, r), y(b, r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    // The circle which tangent is l and point p on it\n    static int GetCircle(Line l, Point p, db r, Circle &c1, Circle &c2)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r * 2) > 0)\n            return 0;\n        if (sgn(dis) == 0)\n        {\n            c1.p = p + ((l.e - l.s).rotCC().scale(r));\n            c2.p = p + ((l.e - l.s).rotCL().scale(r));\n            c1.r = c2.r = r;\n            return 2;\n        }\n        Line u1 = Line((l.s + (l.e - l.s).rotCC().scale(r)), (l.e + (l.e - l.s).rotCC().scale(r)));\n        Line u2 = Line((l.s + (l.e - l.s).rotCL().scale(r)), (l.e + (l.e - l.s).rotCL().scale(r)));\n        Circle cc(p, r);\n        Point p1, p2;\n        if (!cc.crossL(u1, p1, p2))\n            cc.crossL(u2, p1, p2);\n        c1 = Circle(p1, r);\n        if (p1 == p2)\n        {\n            c2 = c1;\n            return 1;\n        }\n        c2 = Circle(p2, r);\n        return 2;\n    }\n\n    // u and v are the common tangent of the four circles\n    static int GetCircle(Line u, Line v, db r, Circle &c1, Circle &c2, Circle &c3, Circle &c4)\n    {\n        if (u.parallel(v))\n            return 0;\n        Line u1 = Line(u.s + (u.e - u.s).rotCC().scale(r), u.e + (u.e - u.s).rotCC().scale(r));\n        Line u2 = Line(u.s + (u.e - u.s).rotCL().scale(r), u.e + (u.e - u.s).rotCL().scale(r));\n        Line v1 = Line(v.s + (v.e - v.s).rotCC().scale(r), v.e + (v.e - v.s).rotCC().scale(r));\n        Line v2 = Line(v.s + (v.e - v.s).rotCL().scale(r), v.e + (v.e - v.s).rotCL().scale(r));\n        c1.r = c2.r = c3.r = c4.r = r;\n        c1.p = u1.intersec(v1);\n        c2.p = u1.intersec(v2);\n        c3.p = u2.intersec(v1);\n        c4.p = u2.intersec(v2);\n        return 4;\n    }\n\n    // Tangent with circle cx and cy\n    static int GetCircle(Circle cx, Circle cy, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(cx.p, r + cx.r), y(cy.p, r + cy.r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    void read()\n    {\n        p.read();\n        cin >> r;\n    }\n\n    void Debug() { cerr << \"Circle: Center: (\" << p.x << \", \" << p.y << \") Radius: \" << r << '\\n'; }\n};\n\n// Polygon\nstruct Polygon\n{\n    // Functor for sorting by polar angle\n    struct cmp\n    {\n        Point p;\n        cmp(const Point &b) { p = b; }\n        bool operator()(const Point &a, const Point &b)\n        {\n            Point x = a, y = b;\n            int d = sgn((x - p) ^ (y - p));\n            if (!d)\n                return sgn(x.dis(p) - y.dis(p)) > 0;\n            return d > 0;\n        }\n    };\n\n    vector<Point> ps;\n    vector<Line> ls;\n\n    Polygon() {}\n\n    void add(Point p) { ps.push_back(p); }\n\n    int size() { return static_cast<int>(ps.size()); }\n\n    void getLines()\n    {\n        int s = size();\n        for (int i = 0; i < s; i++)\n            ls.push_back(Line(ps[i], ps[(i + 1) % s]));\n    }\n\n    void norm()\n    {\n        Point p = ps[0];\n        for (int i = 1; i < size(); i++)\n        {\n            if (p < ps[i])\n                continue;\n            p = ps[i];\n        }\n        sort(ps.begin(), ps.end(), cmp(p));\n    }\n\n    void getConvexJarvis(Polygon &conv)\n    {\n        sort(ps.begin(), ps.end());\n        conv.ps.resize(2 * size());\n\n        int n = size();\n        for (int i = 0; i < min(2, n); i++)\n            conv.ps[i] = ps[i];\n        if (conv.size() == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.resize(1);\n\n        if (n <= 2)\n            return;\n\n        int top = 1;\n\n        for (int i = 2; i < n; i++)\n        {\n            while (top && sgn((conv.ps[top] - ps[i]) ^ (conv.ps[top - 1] - ps[i])) <= 0)\n                top--;\n            conv.ps[++top] = ps[i];\n        }\n\n        int t = top;\n        conv.ps[++top] = ps[n - 2];\n\n        for (int i = n - 3; i >= 0; i--)\n        {\n            while (top != t && sgn((conv.ps[top] - ps[i]) ^ (conv.ps[top - 1] - ps[i])) <= 0)\n                top--;\n            conv.ps[++top] = ps[i];\n        }\n\n        while (conv.size() > top)\n            conv.ps.pop_back();\n\n        if (top == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.pop_back();\n\n        conv.norm(); // Counter Clock-wise\n    }\n\n    void getConvexWithPointOnLine(Polygon &conv)\n    {\n        int m, n = size();\n        if (n < 3)\n        {\n            for (auto i : ps)\n                conv.add(i);\n            return;\n        }\n\n        vector<Point> &g = conv.ps;\n\n        sort(ps.begin(), ps.end());\n        for (int i = 0; i < n; i++)\n        {\n            while ((m = g.size()) >= 2 && g[m - 2].relation(g[m - 1], ps[i]) <= 0)\n                g.pop_back();\n            g.push_back(ps[i]);\n        }\n\n        int t = g.size();\n\n        for (int i = n - 2; i >= 0; i--)\n        {\n            while ((m = g.size()) > t && g[m - 2].relation(g[m - 1], ps[i]) <= 0)\n                g.pop_back();\n            g.push_back(ps[i]);\n        }\n\n        g.pop_back();\n    }\n\n    // Cannot get the point on the edge\n    void getConvexGraham(Polygon &conv)\n    {\n        norm();\n        int top = 0, n = size();\n        if (n == 1)\n        {\n            conv.add(ps[0]);\n            return;\n        }\n\n        if (n == 2)\n        {\n            conv.add(ps[0]);\n            conv.add(ps[1]);\n            if (conv.ps[0] == conv.ps[1])\n                conv.ps.pop_back();\n            return;\n        }\n\n        conv.ps.resize(size());\n        conv.ps[0] = ps[0];\n        conv.ps[1] = ps[1];\n        top = 2;\n        for (int i = 2; i < n; i++)\n        {\n            while (top > 1 && sgn((conv.ps[top - 1] - conv.ps[top - 2]) ^ (ps[i] - conv.ps[top - 2])) <= 0)\n                top--;\n            conv.ps[top++] = ps[i];\n        }\n\n        while (conv.size() > top)\n            conv.ps.pop_back();\n\n        if (top == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.pop_back();\n    }\n\n    bool isConvex()\n    {\n        bitset<3> s;\n        int n = size();\n        for (int i = 0; i < n; i++)\n        {\n            int j = (i + 1) % n;\n            int k = (j + 1) % n;\n            s.set(sgn((ps[j] - ps[i]) ^ (ps[k] - ps[i])) + 1);\n            if (s[0] && s[2])\n                return false;\n        }\n        return true;\n    }\n\n    // 3 -> On Corner\n    // 2 -> On Edge\n    // 1 -> Inside\n    // 0 -> Outside\n    int relationP(Point q)\n    {\n        int n = size();\n        for (int i = 0; i < n; i++)\n            if (ps[i] == q)\n                return 3;\n        getLines();\n        for (int i = 0; i < n; i++)\n            if (!ls[i].disPS(q))\n                return 2;\n        int cnt = 0;\n        for (int i = 0; i < n; i++)\n        {\n            int j = (i + 1) % n;\n            int k = sgn((q - ps[j]) ^ (ps[i] - ps[j]));\n            int u = sgn(ps[i].y - q.y);\n            int v = sgn(ps[j].y - q.y);\n            if (k > 0 && u < 0 && v >= 0)\n                cnt++;\n            if (k < 0 && v < 0 && u >= 0)\n                cnt--;\n        }\n        return cnt != 0;\n    }\n\n    void convexCut(Line l, Polygon &po)\n    {\n        for (int i = 0; i < size(); i++)\n        {\n            int d1 = sgn((l.e - l.s) ^ (ps[i] - l.s));\n            int d2 = sgn((l.e - l.s) ^ (ps[(i + 1) % size()] - l.s));\n            if (d1 >= 0)\n                po.add(ps[i]);\n            if (d1 * d2 < 0)\n                po.add(l.intersec(Line(ps[i], ps[(i + 1) % size()])));\n        }\n    }\n\n    db cir()\n    {\n        int n = size();\n        db sum = 0;\n        for (int i = 0; i < n; i++)\n            sum += ps[i].dis(ps[(i + 1) % n]);\n        return sum;\n    }\n\n    db area()\n    {\n        int n = size();\n        db sum = 0;\n        for (int i = 0; i < n; i++)\n            sum += (ps[i] ^ ps[(i + 1) % n]);\n        return abs(sum) / 2;\n    }\n\n    // 0 -> Clock-wise\n    // 1 -> Counter Clock-wise\n    bool dir()\n    {\n        int n = size();\n        db sum = 0;\n        for (int i = 0; i < n; i++)\n            sum += (ps[i] ^ ps[(i + 1) % n]);\n        return sgn(sum) > 0;\n    }\n\n    Point baryCenter()\n    {\n        Point ret;\n        db area = 0;\n        for (int i = 1; i < size() - 1; i++)\n        {\n            db tmp = (ps[i] - ps[0]) ^ (ps[i + 1] - ps[0]);\n            if (sgn(tmp) == 0)\n                continue;\n            area += tmp;\n            ret.x += (ps[0].x + ps[i].x + ps[i + 1].x) / 3 * tmp;\n            ret.y += (ps[0].y + ps[i].y + ps[i + 1].y) / 3 * tmp;\n        }\n        if (sgn(area))\n            ret = ret / area;\n        return ret;\n    }\n\n    db area(Circle c)\n    {\n        double ans = 0;\n        for (int i = 0; i < size(); i++)\n        {\n            int j = (i + 1) % size();\n            if (sgn((ps[j] - c.p) ^ (ps[i] - c.p)) >= 0)\n                ans += c.area(ps[i], ps[j]);\n            else\n                ans -= c.area(ps[i], ps[j]);\n        }\n        return abs(ans);\n    }\n\n    // 2 -> The circle is entirely in the polygon\n    // 1 -> The circle in in the circle and intersected with the boundary\n    // 0 -> Otherwise\n    int relationC(Circle c)\n    {\n        getLines();\n        int x = 2;\n        if (relationP(c.p) != 1)\n            return 0;\n        for (int i = 0; i < size(); i++)\n        {\n            if (c.relationS(ls[i]) == 2)\n                return 0;\n            if (c.relationS(ls[i]) == 1)\n                x = 1;\n        }\n        return x;\n    }\n\n    void read(int s)\n    {\n        for (int i = 0; i < s; i++)\n        {\n            Point p;\n            p.read();\n            ps.push_back(p);\n        }\n    }\n\n    void Debug()\n    {\n        cerr << \"Polygon:\\nPoints:\\n\";\n        for (auto i : ps)\n            i.Debug();\n        cerr << \"Lines:\\n\";\n        for (auto i : ls)\n            i.Debug();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Polygon g;\n    int n;\n    cin >> n;\n    g.read(n);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int ret = g.relationP(p);\n        if (ret == 1)\n            cout << \"2\\n\";\n        else if (ret >= 2)\n            cout << \"1\\n\";\n        else\n            cout << \"0\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define MON 1000000007\n#define INF (1<<29)\n#define EPS (1e-13)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\n\n#define max(x, y) ((x)>(y)?(x):(y))\n#define min(x, y) ((x)<(y)?(x):(y))\n\n\nclass Vec{\npublic:\n  double x, y;\n  Vec(double x = 0, double y = 0):x(x),y(y){}\n\n  Vec &read(){\n    cin >> x >> y;\n    return *this;\n  }\n\n  void print(){\n    printf(\"%.10lf %.10lf\\n\", x, y);\n  }\n  \n  Vec operator+(const Vec &other)\n  {\n    Vec result = *this;\n    result.x += other.x;\n    result.y += other.y;\n    return result;\n  }\n\n  Vec operator-(const Vec &other)\n  {\n    Vec result = *this;\n    result.x -= other.x;\n    result.y -= other.y;\n    return result;\n  }\n\n  Vec operator*(const double &k)\n  {\n    Vec result = *this;\n    result.x *= k;\n    result.y *= k;\n    return result;\n  }\n\n  Vec operator/(const double &k)\n  {\n    Vec result = *this;\n    result.x /= k;\n    result.y /= k;\n    return result;\n  } \n  \n  double cross(const Vec &other)\n  {\n    return x*other.y - y*other.x;\n  }\n\n  double dot(const Vec &other){\n    return x*other.x + y*other.y;\n  }\n  \n  bool operator==(const Vec &other) const\n  {\n    return abs(x - other.x) < EPS && abs(y - other.y) < EPS;\n  }\n\n  double norm()\n  {\n    return sqrt(x*x+y*y);\n  }\n\n  double norm2()\n  {\n    return x*x+y*y;\n  }\n\n  Vec standard(){\n    Vec result = *this;\n    return result/result.norm();\n  }\n};\n\n//ccw:1, cw:-1, other:0\nInt CCW(Vec a, Vec b, Vec c){\n  b = b - a;\n  c = c - a;\n  if(b.cross(c) > EPS)return -1;\n  if(b.cross(c) < -EPS)return 1;\n  return 0;\n}\n\ndouble dist(Vec a, Vec b){\n  return (a-b).norm();\n}\n\t\t\t\n\nclass Line{\npublic:\n  Vec a, b;\n  Vec vect;\n  Line(Vec a = Vec(), Vec b = Vec()):a(a),b(b),vect(b-a){}\n\n  //projection\n  Vec proj(Vec p){\n    p = p - a;\n    return a + vect * vect.dot(p) / vect.norm2();\n  }\n\n  //reflection\n  Vec reflect(Vec p){\n    return proj(p) * 2 - p;\n  }\n\n  bool onSegment(Vec p){\n    return abs((p-a).cross(b-a)) < EPS && (p-a).dot(p-b) < EPS;\n  }\n\n  //other -> LineSegment(not inclusive), this -> Line\n  bool _intersect(Line other){\n    return CCW(a, b, other.a) * CCW(a, b, other.b) < 0;\n  }\n\n  //other, this: both are LineSegment(inclusive)\n  bool intersect(Line other){\n    return onSegment(other.a) || onSegment(other.b) || other.onSegment(a) || other.onSegment(b) || _intersect(other) && other._intersect(*this);\n  }\n\n  //low accuracy\n  Vec crossPoint(Line &other){\n    double ratio = (a - other.a).cross(vect) / other.vect.cross(vect);\n    return other.a + other.vect * ratio;\n  }\n\n  double dist(Vec p){\n    Vec pp = proj(p);\n    if(onSegment(pp))return ::dist(p, pp);\n    else return min(::dist(p, a), ::dist(p, b));\n  }\n  \n  double dist(Line &other){\n    if(intersect(other))return 0;\n    return min(min(dist(other.a), dist(other.b)), min(other.dist(a), other.dist(b)));\n  }\n};\n\n\nvoid ok(){\n  cout << \"1\" << endl;\n  exit(0);\n}\n\nvoid ng(){\n  cout <<  \"0\" << endl;\n  exit(0);\n}\n\nclass Polygon{\npublic:\n  vector<Vec> points;\n  Int n;\n  Polygon(){}\n  void read(Int _n){\n    n = _n;\n    points.clear();\n    while(_n--)points.push_back(Vec().read());\n  }\n  void set(vector<Vec> &v){\n    points = v;\n    n = points.size();\n  }\n\n  //Signed Area\n  double area(){\n    double area = 0;\n    for(int i = 0;i < n;i++){\n      area += points[i].cross(points[(i+1)%n]);\n    }\n    return area / 2;\n  }\n\n  //inside:2, onEdge:1, outside:0\n  Int inPolygon(Vec p){\n    Int crossCount = 0;\n    Line halfLine(p, Vec(p.x+1,INF));\n    for(int i = 0;i < n;i++){\n      if(Line(points[i], points[(i+1)%n]).onSegment(p))return 1;\n      if(Line(points[i], points[(i+1)%n]).intersect(halfLine))crossCount++;\n      if(halfLine.onSegment(points[i])){\n\tcrossCount--;\n      }\n\n    }\n    return (crossCount%2)*2;\n  }\n};\n\nint main(){\n  Int n,q;\n  cin >> n;\n  Polygon pol;\n  pol.read(n);\n  cin >> q;\n  while(q--){\n    cout << pol.inPolygon(Vec().read()) << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (int i = 0; i < n; i++)\n\t\tb.real(max(b.X, po[i].X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define pll pair<long long,long long>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define rush() int T;scanf(\"%d\",&T);while(T--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define sc(a) scanf(\"%d\",&a)\n#define sc2(a,b) scanf(\"%d%d\",&a,&b)\n#define sc3(a,b,c) scanf(\"%d%d%d\",&a,&b,&c)\n#define pf(x) printf(\"%d\\n\",x)\n#define pf2(x,y) printf(\"%d %d\\n\",x,y)\n#define pf3(x,y,z) printf(\"%d %d %d\\n\",x,y,z)\n#define all(x) (x).begin(),(x).end()\n#define PI acos(-1.0)\n#define E exp(1.0)\n#define db double\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n//#define io\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n//#define gc getchar\n//char buf[1<<21],*p1=buf,*p2=buf;\n//inline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n//inline int read()\n//{\n//    int ret=0,f=0;char c=gc();\n//    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n//    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n//    if(f)return -ret;return ret;\n//}\nconst int N=1e2+5;\nconst db EPS=1e-10;\ninline int sign(db a){return a<-EPS?-1:a>EPS;}\ninline int cmp(db a,db b){return sign(a-b);}\ninline db sqr(db x){return x*x;}\nstruct Point{\n    db x,y;\n    Point(){}\n    Point(db _x,db _y):x(_x),y(_y){}\n    void input(){scanf(\"%lf%lf\",&x,&y);}\n    void output(){printf(\"%.10f %.10f\\n\",x,y);}\n    bool operator == (Point b)const{\n        return sign(x-b.x)==0&&sign(y-b.y)==0;\n    }\n    bool operator < (Point b)const{\n        return sign(x-b.x)==0?sign(y-b.y)<0:x<b.x;\n    }\n    Point operator + (const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    db operator ^ (const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    db operator * (const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    db len(){return hypot(x,y);}\n    db len2(){return x*x+y*y;}\n    db distance(Point p){return hypot(x-p.x,y-p.y);}\n    Point operator * (const db &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator / (const db &k)const{\n        return Point(x/k,y/k);\n    }\n    db rad(Point a,Point b){\n        Point p=*this;\n        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));\n    }\n    Point unit(){return *this/len();}\n    Point trunc(db r){\n        db l=len();\n        if(!sign(l))return *this;\n        r/=l;\n        return Point(x*r,y*r);\n    }\n    Point rotleft(){return Point(-y,x);}\n    Point rotright(){return Point(y,-x);}\n    Point rotate(Point p,db angle){\n        Point v=(*this)-p;\n        db c=cos(angle),s=sin(angle);\n        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);\n    }\n};\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e):s(_s),e(_e){}\n    bool operator == (Line v){\n        return (s==v.s)&&(e==v.e);\n    }\n    Line(Point p,db angle){\n        s=p;\n        if(sign(angle-PI/2)==0)e=(s+Point(0,1));\n        else e=(s+Point(1,tan(angle)));\n    }\n    Line(db a,db b,db c){\n        if(sign(a)==0){\n            s=Point(0,-c/b);e=Point(1,-c/b);\n        }else if(sign(b)==0){\n            s=Point(-c/a,0);e=Point(-c/a,1);\n        }else{\n            s=Point(0,-c/b);e=Point(1,(-c-a)/b);\n        }\n    }\n    void input(){s.input();e.input();}\n    void adjust(){if(e<s)swap(s,e);}\n    db length(){return s.distance(e);}\n    //[0,PI)\n    db angle(){\n        db k=atan2(e.y-s.y,e.x-s.x);\n        if(sign(k)<0)k+=PI;\n        if(sign(k-PI)==0)k-=PI;\n        return k;\n    }\n    //line|1 on the left|2 on the right|3 on line|\n    int relation(Point p){\n        int c=sign((p-s)^(e-s));\n        if(c<0)return 1;\n        else if(c>0)return 2;\n        else return 3;\n    }\n    bool pointonseg(Point p){\n        return sign((p-s)^(e-s))==0&&sign((p-s)*(p-e))<=0;\n    }\n    bool parallel(Line v){\n        return sign((e-s)^(v.e-v.s))==0;\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int segcrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        int d3=sign((v.e-v.s)^(s-v.s));\n        int d4=sign((v.e-v.s)^(e-v.s));\n        if((d1^d2)==-2&&(d3^d4)==-2)return 2;\n        return (d1==0&&sign((v.s-s)*(v.s-e))<=0)||\n            (d2==0&&sign((v.e-s)*(v.e-e))<=0)||\n            (d3==0&&sign((s-v.s)*(s-v.e))<=0)||\n            (d4==0&&sign((e-v.s)*(e-v.e))<=0);\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int linecrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        if((d1^d2)==-2)return 2;\n        return (d1==0||d2==0);\n    }\n    //|0 parallel|1 coincides|2 intersect|\n    int linecrossline(Line v){\n        if((*this).parallel(v))return v.relation(s)==3;\n        return 2;\n    }\n    //要保证两直线不平行或重合\n    Point crosspoint(Line v){\n        db a1=(v.e-v.s)^(s-v.s);\n        db a2=(v.e-v.s)^(e-v.s);\n        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));\n    }\n    db dispointtoline(Point p){\n        return fabs((p-s)^(e-s))/length();\n    }\n    db dispointtoseg(Point p){\n        if(sign((p-s)*(e-s))<0||sign((p-e)*(s-e))<0)return min(p.distance(s),p.distance(e));\n        return dispointtoline(p);\n    }\n    //前提是两线段不相交，相交距离就是0了\n    db dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n    }\n    Point lineprog(Point p){\n\t\treturn s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n\t}\n\tPoint symmetrypoint(Point p){\n\t\tPoint q = lineprog(p);\n\t\treturn Point(2*q.x-p.x,2*q.y-p.y);\n\t}\n};\nstruct circle{\n    Point p;\n    db r;\n    circle(){}\n    circle(Point _p,db _r):p(_p),r(_r){}\n    circle(db _x,db _y,db _r){\n        p=Point(_x,_y);r=_r;\n    }\n    Point point(db a){\n        return Point(p.x+r*cos(a),p.y+r*sin(a));\n    }\n    //三角形的外接圆\n    circle(Point a,Point b,Point c){\n        Line u=Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));\n        Line v=Line((b+c)/2,((b+c)/2)+((c-b).rotleft()));\n        p=u.crosspoint(v);\n        r=p.distance(a);\n    }\n    //三角形的内切圆\n    circle(Point a,Point b,Point c,bool t){\n        Line u,v;\n        db m=atan2(b.y-a.y,b.x-a.x),n=atan2(c.y-a.y,c.x-a.x);\n        u.s=a;\n        u.e=u.s+Point(cos((n+m)/2),sin((n+m)/2));\n        m=atan2(a.y-b.y,a.x-b.x),n=atan2(c.y-b.y,c.x-b.x);\n        v.s=b;\n        v.e=v.s+Point(cos((n+m)/2),sin((n+m)/2));\n        p=u.crosspoint(v);\n        r=Line(a,b).dispointtoseg(p);\n    }\n    void input(){\n        p.input();\n        scanf(\"%lf\",&r);\n    }\n    void output(){\n        printf(\"%2.f %.2f %.2f\\n\",p.x,p.y,p,r);\n    }\n    bool operator == (circle v){\n        return (p==v.p)&&sign(r-v.r)==0;\n    }\n    bool operator < (circle v)const{\n        return ((p<v.p)||((p==v.p)&&sign(r-v.r)<0));\n    }\n    db area(){return PI*r*r;}\n    db circumference(){return 2*PI*r;}\n    //|0 not|1 on|2 in|\n    int relation(Point b){\n        db dst=b.distance(p);\n        if(sign(dst-r)<0)return 2;\n        else if(sign(dst-r)==0)return 1;\n        return 0;\n    }\n    //|0 not|1 on|2 in|\n    int relationseg(Line v){\n        db dst=v.dispointtoseg(p);\n        if(sign(dst-r)<0)return 2;\n        else if(sign(dst-r)==0)return 1;\n        return 0;\n    }\n    int relationline(Line v){\n        db dst=v.dispointtoline(p);\n        if(sign(dst-r)<0)return 2;\n        else if(sign(dst-r)==0)return 1;\n        return 0;\n    }\n    //|1 内含|2 内切|3 相交|4 外切|5 相离|\n    int relationcircle(circle v){\n        db d=p.distance(v.p);\n        if(sign(d-r-v.r)>0)return 5;\n        if(sign(d-r-v.r)==0)return 4;\n        db l=fabs(r-v.r);\n        if(sign(d-r-v.r)<0&&sign(d-l)>0)return 3;\n        if(sign(d-l)==0)return 2;\n        if(sign(d-l)<0)return 1;\n    }\n    //|0 没有交点|1 一个交点|2 两个交点|\n    int pointcrosscircle(circle v,Point &p1,Point &p2){\n        int rel=relationcircle(v);\n        if(rel==1||rel==5)return 0;\n        db d=p.distance(v.p);\n        db l=(d*d+r*r-v.r*v.r)/(2*d);\n        db h=sqrt(r*r-l*l);\n        Point tmp=p+(v.p-p).trunc(l);\n        p1 = tmp+((v.p-p).rotleft().trunc(h));\n\t\tp2 = tmp+((v.p-p).rotright().trunc(h));\n        if(rel==2||rel==4)return 1;\n        return 2;\n    }\n    int pointcrossline(Line v,Point &p1,Point &p2){\n        if(!(*this).relationline(v))return 0;\n        Point a=v.lineprog(p);\n        db d=v.dispointtoline(p);\n        d=sqrt(r*r-d*d);\n        if(sign(d)==0){\n            p1=a;p2=a;\n            return 1;\n        }\n        p1=a+(v.e-v.s).trunc(d);\n        p2=a-(v.e-v.s).trunc(d);\n        return 2;\n    }\n    int getcircle(Point a,Point b,db r1,circle &c1,circle &c2){\n        circle x(a,r1),y(b,r1);\n        int t=x.pointcrosscircle(y,c1.p,c2.p);\n        if(!t)return 0;\n        c1.r=c2.r=r;\n        return t;\n    }\n    int getcircle(Line u,Point q,db r1,circle &c1,circle &c2){\n        db dis=u.dispointtoline(q);\n        if(sign(dis-r1*2)>0)return 0;\n        if(sign(dis)==0){\n            c1.p=q+((u.e-u.s).rotleft().trunc(r1));\n            c2.p=q+((u.e-u.s).rotright().trunc(r1));\n            c1.r=c2.r=r1;\n            return 2;\n        }\n        Line u1=Line((u.s+(u.e-u.s).rotleft().trunc(r1)),(u.e+(u.e-u.s).rotleft().trunc(r1)));\n\t\tLine u2=Line((u.s+(u.e-u.s).rotright().trunc(r1)),(u.e+(u.e-u.s).rotright().trunc(r1)));\n\t\tcircle cc = circle(q,r1);\n\t\tPoint p1,p2;\n\t\tif(!cc.pointcrossline(u1,p1,p2))cc.pointcrossline(u2,p1,p2);\n\t\tc1 = circle(p1,r1);\n\t\tif(p1 == p2){\n\t\t\tc2 = c1;\n\t\t\treturn 1;\n\t\t}\n\t\tc2 = circle(p2,r1);\n\t\treturn 2;\n    }\n    int getcircle(Line u,Line v,db r1,circle &c1,circle &c2,circle &c3,circle &c4){\n        if(u.parallel(v))return 0;//两直线平行\n\t\tLine u1=Line(u.s+(u.e-u.s).rotleft().trunc(r1),u.e+(u.e-u.s).rotleft().trunc(r1));\n\t\tLine u2=Line(u.s+(u.e-u.s).rotright().trunc(r1),u.e+(u.e-u.s).rotright().trunc(r1));\n\t\tLine v1=Line(v.s+(v.e-v.s).rotleft().trunc(r1),v.e+(v.e-v.s).rotleft().trunc(r1));\n\t\tLine v2=Line(v.s+(v.e-v.s).rotright().trunc(r1),v.e+(v.e-v.s).rotright().trunc(r1));\n\t\tc1.r=c2.r=c3.r=c4.r=r1;\n\t\tc1.p=u1.crosspoint(v1);\n\t\tc2.p=u1.crosspoint(v2);\n\t\tc3.p=u2.crosspoint(v1);\n\t\tc4.p=u2.crosspoint(v2);\n\t\treturn 4;\n    }\n    int getcircle(circle cx,circle cy,double r1,circle &c1,circle &c2){\n\t\tcircle x(cx.p,r1+cx.r),y(cy.p,r1+cy.r);\n\t\tint t=x.pointcrosscircle(y,c1.p,c2.p);\n\t\tif(!t)return 0;\n\t\tc1.r=c2.r=r1;\n\t\treturn t;\n\t}\n\tint tangentline(Point q,Line &u,Line &v){\n\t\tint x   = relation(q);\n\t\tif(x == 2)return 0;\n\t\tif(x == 1){\n\t\t\tu = Line(q,q + (q-p).rotleft());\n\t\t\tv = u;\n\t\t\treturn 1;\n\t\t}\n\t\tdouble d = p.distance(q);\n\t\tdouble l = r*r/d;\n\t\tdouble h = sqrt(r*r-l*l);\n\t\tu = Line(q,p + ((q-p).trunc(l) + (q-p).rotleft().trunc(h)));\n\t\tv = Line(q,p + ((q-p).trunc(l) + (q-p).rotright().trunc(h)));\n\t\treturn 2;\n\t}\n\tdouble areacircle(circle v){\n\t\tint rel = relationcircle(v);\n\t\tif(rel >= 4)return 0.0;\n\t\tif(rel <= 2)return min(area(),v.area());\n\t\tdouble d = p.distance(v.p);\n\t\tdouble hf = (r+v.r+d)/2.0;\n\t\tdouble ss = 2*sqrt(hf*(hf-r)*(hf-v.r)*(hf-d));\n\t\tdouble a1 = acos((r*r+d*d-v.r*v.r)/(2.0*r*d));\n\t\ta1 = a1*r*r;\n\t\tdouble a2 = acos((v.r*v.r+d*d-r*r)/(2.0*v.r*d));\n\t\ta2 = a2*v.r*v.r;\n\t\treturn a1+a2-ss;\n\t}\n\tdouble areatriangle(Point a,Point b){\n\t\tif(sign((p-a)^(p-b)) == 0)return 0.0;\n\t\tPoint q[5];\n\t\tint len = 0;\n\t\tq[len++] = a;\n\t\tLine l(a,b);\n\t\tPoint p1,p2;\n\t\tif(pointcrossline(l,q[1],q[2])==2){\n\t\t\tif(sign((a-q[1])*(b-q[1]))<0)q[len++] = q[1];\n\t\t\tif(sign((a-q[2])*(b-q[2]))<0)q[len++] = q[2];\n\t\t}\n\t\tq[len++] = b;\n\t\tif(len == 4 && sign((q[0]-q[1])*(q[2]-q[1]))>0)swap(q[1],q[2]);\n\t\tdouble res = 0;\n\t\tfor(int i = 0;i < len-1;i++){\n\t\t\tif(relation(q[i])==0||relation(q[i+1])==0){\n\t\t\t\tdouble arg = p.rad(q[i],q[i+1]);\n\t\t\t\tres += r*r*arg/2.0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres += fabs((q[i]-p)^(q[i+1]-p))/2.0;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\nint getTangents(circle A,circle B,Point *a,Point *b)\n{\n    int cnt=0;        //存切点用\n    if(sign(A.r-B.r)<0){\n        swap(A,B);\n        swap(a,b);\n    }\n    double d=sqrt((A.p.x-B.p.x)*(A.p.x-B.p.x)+(A.p.y-B.p.y)*(A.p.y-B.p.y));     //圆心距\n    double rdiff=A.r-B.r;      //两圆半径差\n    double rsum=A.r+B.r;       //两圆半径和\n    if(sign(d-rdiff)<0)return 0;        //1.内含\n    double base=atan2(B.p.y-A.p.y,B.p.x-A.p.x);      //向量AB的极角\n    if(sign(d)== 0)return -1;        //2.重合\n    if(sign(d-rdiff) == 0){       //3.内切\n        a[cnt]=b[cnt]=A.point(base);\n        cnt++;\n        return 1;\n    }\n    double ang=acos((A.r-B.r)/d);\n    a[cnt]=A.point(base+ang);b[cnt]=B.point(base+ang);cnt++;      //4.相交（外切、外离的外公切线也在此求出）\n    a[cnt]=A.point(base-ang);b[cnt]=B.point(base-ang);cnt++;      //两条外公切线的切点\n    if(sign(d-rsum)==0){        //5.外切\n        a[cnt]=b[cnt]=A.point(base);\n        cnt++;\n    }\n    else if(sign(d-rsum)>0){      //6.外离\n        double ang=acos((A.r+B.r)/d);\n        a[cnt]=A.point(base+ang);b[cnt]=B.point(PI+base+ang);cnt++;\n        a[cnt]=A.point(base-ang);b[cnt]=B.point(PI+base-ang);cnt++;\n    }\n    return cnt;\n}\nstruct polygon{\n    int n;\n    Point p[N];\n    Line l[N];\n    void input(int _n){\n        n=_n;\n        rep(i,0,n-1)p[i].input();\n    }\n    void add(Point q){p[n++]=q;}\n    void getline(){rep(i,0,n-1)l[i]=Line(p[i],p[(i+1)%n]);}\n    struct cmp{\n\t\tPoint p;\n\t\tcmp(const Point &p0){p=p0;}\n\t\tbool operator()(const Point &aa,const Point &bb){\n\t\t\tPoint a=aa,b=bb;\n\t\t\tint d=sign((a-p)^(b-p));\n\t\t\tif(d==0){\n\t\t\t\treturn sign(a.distance(p)-b.distance(p))<0;\n\t\t\t}\n\t\t\treturn d>0;\n\t\t}\n\t};\n\t//极角排序\n\tvoid norm(){\n        Point mi=p[0];\n        rep(i,1,n-1)mi=min(mi,p[i]);\n        sort(p,p+n,cmp(mi));\n\t}\n\t//`得到的凸包里面的点编号是[0,n-1]的`\n\t//`注意如果有影响，要特判下所有点共点，或者共线的特殊情况`\n\tvoid getconvex(polygon &convex){\n\t\tsort(p,p+n);\n\t\tconvex.n=n;\n\t\trep(i,0,min(n,2)-1)convex.p[i]=p[i];\n\t\tif(convex.n==2&&(convex.p[0]==convex.p[1]))convex.n--;//特判\n\t\tif(n<=2)return;\n\t\tint &top=convex.n;\n\t\ttop=1;\n\t\trep(i,2,n-1){\n            while(top&&sign((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))<=0)top--;\n            convex.p[++top] = p[i];\n\t\t}\n\t\tint temp=top;\n\t\tconvex.p[++top]=p[n-2];\n\t\tper(i,n-3,0){\n            while(top!=temp&&sign((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))<=0)top--;\n\t\t\tconvex.p[++top]=p[i];\n\t\t}\n\t\tif(convex.n==2&&(convex.p[0]==convex.p[1]))convex.n--;//特判\n\t\tconvex.norm();//`原来得到的是顺时针的点，排序后逆时针`\n\t}\n\t//`得到凸包的另外一种方法`\n\tvoid Graham(polygon &convex){\n\t\tnorm();\n\t\tint &top=convex.n;\n\t\ttop=0;\n\t\tif(n==1){\n\t\t\ttop=1;\n\t\t\tconvex.p[0]=p[0];\n\t\t\treturn;\n\t\t}\n\t\tif(n==2){\n\t\t\ttop=2;\n\t\t\tconvex.p[0]=p[0];\n\t\t\tconvex.p[1]=p[1];\n\t\t\tif(convex.p[0]==convex.p[1])top--;\n\t\t\treturn;\n\t\t}\n\t\tconvex.p[0]=p[0];\n\t\tconvex.p[1]=p[1];\n\t\ttop=2;\n\t\trep(i,2,n-1){\n            while(top>1&&sign((convex.p[top-1]-convex.p[top-2])^(p[i]-convex.p[top-2]))<=0)top--;\n\t\t\tconvex.p[top++]=p[i];\n\t\t}\n\t\tif(convex.n==2&&(convex.p[0]==convex.p[1]))convex.n--;//特判\n\t}\n\t//`判断是不是凸的`\n\tbool isconvex(){\n\t\tbool s[2];\n\t\tmemset(s,false,sizeof(s));\n\t\trep(i,0,n-1){\n            int j=(i+1)%n;\n\t\t\tint k=(j+1)%n;\n\t\t\ts[sign((p[j]-p[i])^(p[k]-p[i]))+1]=true;\n\t\t\tif(s[0]&&s[2])return false;\n\t\t}\n\t\treturn true;\n\t}\n\t//`判断点和任意多边形的关系`\n\t//` 3 点上`\n\t//` 2 边上`\n\t//` 1 内部`\n\t//` 0 外部`\n\tint relationpoint(Point q){\n\t    rep(i,0,n-1){\n            if(p[i]==q)return 3;\n\t    }\n\t\tgetline();\n\t\trep(i,0,n-1){\n            if(l[i].pointonseg(q))return 2;\n\t\t}\n\t\tint cnt=0;\n\t\trep(i,0,n-1){\n            int j=(i+1)%n;\n\t\t\tint k=sign((q-p[j])^(p[i]-p[j]));\n\t\t\tint u=sign(p[i].y-q.y);\n\t\t\tint v=sign(p[j].y-q.y);\n\t\t\tif(k>0&&u<0&&v>=0)cnt++;\n\t\t\tif(k<0&&v<0&&u>=0)cnt--;\n\t\t}\n\t\treturn cnt!=0;\n\t}\n};\n\n\n\t//`直线u切割凸多边形左侧`\n\t//`注意直线方向`\n\t//`测试：HDU3982`\n//\tvoid convexcut(Line u,polygon &po){\n//\t\tint &top = po.n;//注意引用\n//\t\ttop = 0;\n//\t\tfor(int i = 0;i < n;i++){\n//\t\t\tint d1 = sign((u.e-u.s)^(p[i]-u.s));\n//\t\t\tint d2 = sign((u.e-u.s)^(p[(i+1)%n]-u.s));\n//\t\t\tif(d1 >= 0)po.p[top++] = p[i];\n//\t\t\tif(d1*d2 < 0)po.p[top++] = u.crosspoint(Line(p[i],p[(i+1)%n]));\n//\t\t}\n//\t}\n//\t//`得到周长`\n//\t//`测试 LightOJ1239`\n//\tdouble getcircumference(){\n//\t\tdouble sum = 0;\n//\t\tfor(int i = 0;i < n;i++){\n//\t\t\tsum += p[i].distance(p[(i+1)%n]);\n//\t\t}\n//\t\treturn sum;\n//\t}\n//\t//`得到面积`\n//\tdouble getarea(){\n//\t\tdouble sum = 0;\n//\t\tfor(int i = 0;i < n;i++){\n//\t\t\tsum += (p[i]^p[(i+1)%n]);\n//\t\t}\n//\t\treturn fabs(sum)/2;\n//\t}\n//\t//`得到方向`\n//\t//` 1 表示逆时针，0表示顺时针`\n//\tbool getdir(){\n//\t\tdouble sum = 0;\n//\t\tfor(int i = 0;i < n;i++)\n//\t\t\tsum += (p[i]^p[(i+1)%n]);\n//\t\tif(sign(sum) > 0)return 1;\n//\t\treturn 0;\n//\t}\n//\t//`得到重心`\n//\tPoint getbarycentre(){\n//\t\tPoint ret(0,0);\n//\t\tdouble area = 0;\n//\t\tfor(int i = 1;i < n-1;i++){\n//\t\t\tdouble tmp = (p[i]-p[0])^(p[i+1]-p[0]);\n//\t\t\tif(sign(tmp) == 0)continue;\n//\t\t\tarea += tmp;\n//\t\t\tret.x += (p[0].x+p[i].x+p[i+1].x)/3*tmp;\n//\t\t\tret.y += (p[0].y+p[i].y+p[i+1].y)/3*tmp;\n//\t\t}\n//\t\tif(sign(area)) ret = ret/area;\n//\t\treturn ret;\n//\t}\n//\t//`多边形和圆交的面积`\n//\t//`测试：POJ3675 HDU3982 HDU2892`\n//\tdouble areacircle(circle c){\n//\t\tdouble ans = 0;\n//\t\tfor(int i = 0;i < n;i++){\n//\t\t\tint j = (i+1)%n;\n//\t\t\tif(sign( (p[j]-c.p)^(p[i]-c.p) ) >= 0)\n//\t\t\t\tans += c.areatriangle(p[i],p[j]);\n//\t\t\telse ans -= c.areatriangle(p[i],p[j]);\n//\t\t}\n//\t\treturn fabs(ans);\n//\t}\n//\t//`多边形和圆关系`\n//\t//` 2 圆完全在多边形内`\n//\t//` 1 圆在多边形里面，碰到了多边形边界`\n//\t//` 0 其它`\n//\tint relationcircle(circle c){\n//\t\tgetline();\n//\t\tint x = 2;\n//\t\tif(relationpoint(c.p) != 1)return 0;//圆心不在内部\n//\t\tfor(int i = 0;i < n;i++){\n//\t\t\tif(c.relationseg(l[i])==2)return 0;\n//\t\t\tif(c.relationseg(l[i])==1)x = 1;\n//\t\t}\n//\t\treturn x;\n//\t}\n//};\npolygon g;\nPoint p;\nint main()\n{\n    int n;\n    sc(n);\n    g.input(n);\n    int q;\n    sc(q);\n    while(q--){\n        p.input();\n        int t=g.relationpoint(p);\n        if(t==1)puts(\"2\");\n        else if(t==3||t==2)puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  double sum=0;\n  for(int i=0;i<(int)t.size();i++){\n    P a=t[i],b=(i==0?t.back():t[i-1]);\n    if( ccw(a,b,p) == 0 )return 1;// on\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;//out\n  else  return 2;//in\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double lf;\ntypedef pair<int, int> pii;\n\nconst int MAXN = 5;\nconst int MOD = 1e9+7;\n\nconst lf eps = 1e-9;\ntypedef double T;\nstruct pt {\n  T x, y;\n  pt operator + (pt p) { return {x+p.x, y+p.y}; }\n  pt operator - (pt p) { return {x-p.x, y-p.y}; }\n  pt operator * (pt p) { return {x*p.x-y*p.y, x*p.y+y*p.x}; }\n  pt operator * (T d) { return {x*d, y*d}; }\n  pt operator / (T d) { return {x/d, y/d}; } /// only for floating point\n  bool operator == (pt b) { return x == b.x && y == b.y; }\n  bool operator != (pt b) { return !(*this == b); }\n  bool operator < (const pt &o) const { return y < o.y || (y == o.y && x < o.x); }\n  bool operator > (const pt &o) const { return y > o.y || (y == o.y && x > o.x); }\n};\nint cmp (lf a, lf b) { return (a + eps < b ? -1 :(b + eps < a ? 1 : 0)); }\n/** Already in complex **/\nT norm(pt a) { return a.x*a.x + a.y*a.y; }\nT abs(pt a) { return sqrt(norm(a)); }\nT arg(pt a) { return atan2(a.y, a.x); }\nostream& operator << (ostream& os, pt &p) {\n  return os << \"(\"<< p.x << \",\" << p.y << \")\";\n}\n/***/\nistream &operator >> (istream &in, pt &p) {\n    T x, y; in >> x >> y;\n    p = {x, y};\n    return in;\n}\nT dot(pt a, pt b) { return a.x*b.x + a.y*b.y; }\nT cross(pt a, pt b) { return a.x*b.y - a.y*b.x; }\nT orient(pt a, pt b, pt c) { return cross(b-a,c-a); }\n//pt rot(pt p, lf a) { return {p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a)}; }\n//pt rot(pt p, double a) { return p * polar(1.0, a); } /// for complex\n//pt rotate_to_b(pt a, pt b, lf ang) { return rot(a-b, ang)+b; }\npt rot90ccw(pt p) { return {-p.y, p.x}; }\npt rot90cw(pt p) { return {p.y, -p.x}; }\npt translate(pt p, pt v) { return p+v; }\npt scale(pt p, double f, pt c) { return c + (p-c)*f; }\nbool are_perp(pt v, pt w) { return dot(v,w) == 0; }\nint sign(T x) { return (T(0) < x) - (x < T(0)); }\npt unit(pt a) { return a/abs(a); }\n\nbool in_angle(pt a, pt b, pt c, pt x) {\n  assert(orient(a,b,c) != 0);\n  if (orient(a,b,c) < 0) swap(b,c);\n  return orient(a,b,x) >= 0 && orient(a,c,x) <= 0;\n}\n\n//lf angle(pt a, pt b) { return acos(max(-1.0, min(1.0, dot(a,b)/abs(a)/abs(b)))); }\n//lf angle(pt a, pt b) { return atan2(cross(a, b), dot(a, b)); }\n/// returns vector to transform points\npt get_linear_transformation(pt p, pt q, pt r, pt fp, pt fq) {\n  pt pq = q-p, num{cross(pq, fq-fp), dot(pq, fq-fp)};\n  return fp + pt{cross(r-p, num), dot(r-p, num)} / norm(pq);\n}\n\nbool half(pt p) { /// true if is in (0, 180]\n  assert(p.x != 0 || p.y != 0); /// the argument of (0,0) is undefined\n  return p.y > 0 || (p.y == 0 && p.x < 0);\n}\nbool half_from(pt p, pt v = {1, 0}) {\n  return cross(v,p) < 0 || (cross(v,p) == 0 && dot(v,p) < 0);\n}\nbool polar_cmp(const pt &a, const pt &b) {\n  return make_tuple(half(a), 0) < make_tuple(half(b), cross(a,b));\n}\n\nstruct line {\n  pt v; T c;\n  line(pt v, T c) : v(v), c(c) {}\n  line(T a, T b, T c) : v({b,-a}), c(c) {}\n  line(pt p, pt q) : v(q-p), c(cross(v,p)) {}\n  T side(pt p) { return cross(v,p)-c; }\n  lf dist(pt p) { return abs(side(p)) / abs(v); }\n  lf sq_dist(pt p) { return side(p)*side(p) / (lf)norm(v); }\n  line perp_through(pt p) { return {p, p + rot90ccw(v)}; }\n  bool cmp_proj(pt p, pt q) { return dot(v,p) < dot(v,q); }\n  line translate(pt t) { return {v, c + cross(v,t)}; }\n  line shift_left(double d) { return {v, c + d*abs(v)}; }\n  pt proj(pt p) { return p - rot90ccw(v)*side(p)/norm(v); }\n  pt refl(pt p) { return p - rot90ccw(v)*2*side(p)/norm(v); }\n};\n\nbool inter_ll(line l1, line l2, pt &out) {\n  T d = cross(l1.v, l2.v);\n  if (d == 0) return false;\n  out = (l2.v*l1.c - l1.v*l2.c) / d;\n  return true;\n}\n/*line bisector(line l1, line l2, bool interior) {\n  assert(cross(l1.v, l2.v) != 0); /// l1 and l2 cannot be parallel!\n  lf sign = interior ? 1 : -1;\n  return {l2.v/abs(l2.v) + l1.v/abs(l1.v) * sign,\n          l2.c/abs(l2.v) + l1.c/abs(l1.v) * sign};\n}*/\n\nbool in_disk(pt a, pt b, pt p) {\n  return dot(a-p, b-p) <= 0;\n}\nbool on_segment(pt a, pt b, pt p) {\n  return orient(a,b,p) == 0 && in_disk(a,b,p);\n}\nbool proper_inter(pt a, pt b, pt c, pt d, pt &out) {\n  T oa = orient(c,d,a),\n  ob = orient(c,d,b),\n  oc = orient(a,b,c),\n  od = orient(a,b,d);\n  /// Proper intersection exists iff opposite signs\n  if (oa*ob < 0 && oc*od < 0) {\n    out = (a*ob - b*oa) / (ob-oa);\n    return true;\n  }\n  return false;\n}\nset<pt> inter_ss(pt a, pt b, pt c, pt d) {\n  pt out;\n  if (proper_inter(a,b,c,d,out)) return {out};\n  set<pt> s;\n  if (on_segment(c,d,a)) s.insert(a);\n  if (on_segment(c,d,b)) s.insert(b);\n  if (on_segment(a,b,c)) s.insert(c);\n  if (on_segment(a,b,d)) s.insert(d);\n  return s;\n}\nlf pt_to_seg(pt a, pt b, pt p) {\n  if(a != b) {\n    line l(a,b);\n    if (l.cmp_proj(a,p) && l.cmp_proj(p,b)) /// if closest to  projection\n      return l.dist(p); /// output distance to line\n  }\n  return min(abs(p-a), abs(p-b)); /// otherwise distance to A or B\n}\nlf set_to_seg(pt a, pt b, pt c, pt d) {\n  pt dummy;\n  if (proper_inter(a,b,c,d,dummy)) return 0;\n  return min({pt_to_seg(a,b,c), pt_to_seg(a,b,d),\n              pt_to_seg(c,d,a), pt_to_seg(c,d,b)});\n}\n\nenum {IN, OUT, ON};\nstruct polygon {\n  vector<pt> p;\n  polygon(int n) : p(n) {}\n  int top = -1, bottom = -1;\n  void delete_repetead() {\n    vector<pt> aux;\n    sort(p.begin(), p.end());\n    for(pt &i : p)\n      if(aux.empty() || aux.back() != i)\n        aux.push_back(i);\n    p.swap(aux);\n  }\n  bool is_convex() {\n    bool pos = 0, neg = 0;\n    for (int i = 0, n = p.size(); i < n; i++) {\n      int o = orient(p[i], p[(i+1)%n], p[(i+2)%n]);\n      if (o > 0) pos = 1;\n      if (o < 0) neg = 1;\n    }\n    return !(pos && neg);\n  }\n  lf area() {\n    lf ans = 0;\n    for (int i = 0, n = p.size(); i < n; i++)\n      ans += cross(p[i], p[(i+1)%n]);\n    return abs(ans) / 2.0;\n  }\n  lf perimeter() {\n    lf per = 0;\n    for(int i = 0, n = p.size(); i < n; i++)\n      per += abs(p[i] - p[(i+1)%n]);\n    return per;\n  }\n  bool above(pt a, pt p) { return p.y >= a.y; }\n  bool crosses_ray(pt a, pt p, pt q) {\n    return (above(a,q)-above(a,p))*orient(a,p,q) > 0;\n  }\n  int in_polygon(pt a) {\n    int crosses = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      if(on_segment(p[i], p[(i+1)%n], a)) return ON;\n      crosses += crosses_ray(a, p[i], p[(i+1)%n]);\n    }\n    return (crosses&1 ? IN : OUT);\n  }\n  void normalize() { /// polygon is CCW\n    bottom = min_element(p.begin(), p.end()) - p.begin();\n    vector<pt> tmp(p.begin()+bottom, p.end());\n    tmp.insert(tmp.end(), p.begin(), p.begin()+bottom);\n    p.swap(tmp);\n    bottom = 0;\n    top = max_element(p.begin(), p.end()) - p.begin();\n  }\n  int in_convex(pt a) {\n    assert(bottom == 0 && top != -1);\n    if(a < p[0] || a > p[top]) return OUT;\n    T orientation = orient(p[0], p[top], a);\n    if(orientation == 0) {\n      if(a == p[0] || a == p[top]) return ON;\n      return top == 1 || top + 1 == p.size() ? ON : IN;\n    } else if (orientation < 0) {\n      auto it = lower_bound(p.begin()+1, p.begin()+top, a);\n      T d = orient(*prev(it), a, *it);\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n    else {\n      auto it = upper_bound(p.rbegin(), p.rend()-top-1, a);\n      T d = orient(*it, a, it == p.rbegin() ? p[0] : *prev(it));\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n  }\n  polygon cut(pt a, pt b) {\n    line l(a, b);\n    polygon new_polygon(0);\n    for(int i = 0, n = p.size(); i < n; ++i) {\n      pt c = p[i], d = p[(i+1)%n];\n      lf abc = cross(b-a, c-a), abd = cross(b-a, d-a);\n      if(abc >= 0) new_polygon.p.push_back(c);\n      if(abc*abd < 0) {\n        pt out; inter_ll(l, line(c, d), out);\n        new_polygon.p.push_back(out);\n      }\n    }\n    return new_polygon;\n  }\n  void convex_hull() {\n    sort(p.begin(), p.end());\n    vector<pt> ch;\n    ch.reserve(p.size()+1);\n    for(int it = 0; it < 2; it++) {\n      int start = ch.size();\n      for(auto &a : p) {\n        /// if colineal are needed, use < and remove repeated points\n        while(ch.size() >= start+2 && orient(ch[ch.size()-2], ch.back(), a) <= 0)\n          ch.pop_back();\n        ch.push_back(a);\n      }\n      ch.pop_back();\n      reverse(p.begin(), p.end());\n    }\n    if(ch.size() == 2 && ch[0] == ch[1]) ch.pop_back();\n    /// be careful with CH of size < 3\n    p.swap(ch);\n  }\n  ll pick() {\n    ll boundary = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      int j = (i+1 == n ? 0 : i+1);\n      boundary += __gcd((ll)abs(p[i].x - p[j].x), (ll)abs(p[i].y - p[j].y));\n    }\n    return area() + 1 - boundary/2;\n  }\n  pt& operator[] (int i){ return p[i]; }\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n\n  #ifdef LOCAL\n      freopen(\"input.txt\", \"r\", stdin);\n      freopen(\"output.txt\", \"w\", stdout);\n  #else\n      #define endl '\\n'\n  #endif // LOCAL\n\n  int n; cin >> n;\n  polygon pol(n);\n  for(int i = 0; i < n; i++) {\n    cin >> pol[i];\n  }\n  int q; cin >> q;\n  while(q--) {\n    pt cur; cin >> cur;\n    int d = pol.in_polygon(cur);\n    if(d == IN) cout << 2 << endl;\n    if(d == OUT) cout << 0 << endl;\n    if(d == ON) cout << 1 << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex <double> point;\nvector <point> pol;\n\nbool eq(double a,double b){\n  return (abs(a-b)<=(1e-8));\n}\n\nbool on_segment(point a,point b,point c){\n  return eq(abs(b-a),abs(a-c)+abs(b-c));\n}\n\ndouble get_r(point a,point b,point c){\n  b-=a,c-=a;\n  b*=conj(c);\n  return arg(b);\n}\n\nint solve(point a){\n  for(int i=0;i<pol.size();i++)\n    if(on_segment(pol[i],pol[(i+1)%pol.size()],a)) return 1;\n \n  double sum=0;\n  for(int i=0;i<pol.size();i++){\n    sum+=get_r(a,pol[i],pol[(i+1)%pol.size()]);\n  }  \n  if(abs(sum)<=1)return 0;\n  return 2;\n  \n}\n\n\nint main(){\n  int n;\n  cin>>n;\n  for(int i=0;i<n;i++) {\n    double a,b;\n    cin>>a>>b;\n    pol.push_back(point(a,b));\n  }\n\n  int q;\n  cin>>q;\n  while(q--){\n    double a,b;\n    cin>>a>>b;\n    cout<<solve(point(a,b))<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n  int ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0; // a--c--b on line\n  }\n  // L:line,S:segment,P:point\n  P crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n  }\n  int convex_point(const G &g,const P &p){\n    P q = p-P(-INF,imag(p));\n    double x = real(p),y = imag(p);\n    L l1(p,q);\n    ll cn = 0;\n    rep(i,g.size()){\n      P a = g[i],b = g[(i+1) % g.size()];\n      L l2 = L(a,b);\n      int k = ccw(a,b,p);\n      if(k == 0){\n        return 1; // p on g\n      }\n    }\n    rep(i,g.size()){\n      P a = g[i],b = g[(i+1) % g.size()];\n      double x1 = real(a),y1 = imag(a),x2 = real(b),y2 = imag(b);\n      if(!(y1 == y && y2 == y) && ((y1 <= y && y < y2) || (y2 <= y && y < y1)) && x <= x1){\n        L l2 = L(a,b);\n        P c = crosspoint(l1,l2);\n        if(x <= real(c))\n          ++cn;\n      }\n    }\n    if(cn % 2) return 2; // p in g\n    return 0; // p out g\n  }\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll n;\n  double x,y;\n  cin >> n;\n  G g;\n  rep(i,n){\n    cin >> x >> y;\n    g.push_back({x,y});\n  }\n  ll q;\n  cin >> q;\n  rep(i,q){\n    cin >> x >> y;\n    std::cout << convex_point(g,P(x,y)) << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator + (Point p){return Point(x + p.x, y + p.y);}\n  Point operator - (Point p){return Point(x - p.x, y - p.y);}\n  Point operator * (double a){return Point(x * a, y * a);}\n  Point operator / (double a){return Point(x / a, y / a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x * x + y * y;}\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1, p2;\n  Segment(Point p1, Point p2): p1(p1), p2(p2){}\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0): c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nPoint reflect(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return (v21 * t - v01) * 2 + p0;\n}\n\nPoint project(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return v21 * t + p1;\n}\n\ndouble dis(Point p1, Point p2){\n  return (p1 - p2).abs();\n}\n\ndouble getdis(Segment s, Point p){\n  if(dot(s.p2 - s.p1, p - s.p1) < 0) return dis(s.p1, p);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0) return dis(s.p2, p);\n  return dis(project(p, s.p1, s.p2), p);\n}\n\nstring ccw(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p1.x - p0.x, p1.y - p0.y);\n  Vector v02 = Vector(p2.x - p0.x, p2.y - p0.y);\n  if(equals(cross(v01, v02), 0)){\n    if(dot(v01, v02) < 0) return \"ONLINE_BACK\";\n    else if(equals(v01.abs(), v02.abs()) == true || v01.abs() > v02.abs()) return \"ON_SEGMENT\";\n    else return \"ONLINE_FRONT\";\n  }\n  else if(cross(v01, v02) > 0) return \"COUNTER_CLOCKWISE\";\n  else return \"CLOCKWISE\";\n}\n\nbool intersect(Segment s1, Segment s2){\n  if(ccw(s1.p1, s1.p2, s2.p2) == \"ON_SEGMENT\" || ccw(s1.p1, s1.p2, s2.p1) == \"ON_SEGMENT\") return true;\n  if(ccw(s2.p1, s2.p2, s1.p2) == \"ON_SEGMENT\" || ccw(s2.p1, s2.p2, s1.p1) == \"ON_SEGMENT\") return true;\n  if(ccw(s1.p1, s1.p2, s2.p1) != ccw(s1.p1, s1.p2, s2.p2)){\n    if(ccw(s1.p1, s2.p1, s2.p2) != ccw(s1.p2, s2.p1, s2.p2)) return true;\n  }\n  return false;\n}\n\nPoint getcrosspoint(Segment s1, Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  Vector hypo1 = s1.p1 - s2.p1;\n  Vector hypo2 = s1.p2 - s2.p2;\n  double d1, d2;\n  d1 = abs(cross(base, hypo1)) / base.abs();\n  d2 = abs(cross(base, hypo2)) / base.abs();\n  return s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\npair<Point, Point> getcrosspointcl(Circle c, Line l){\n  Point p = project(c.c, l.p1, l.p2), s;\n  if(p == l.p1) s = l.p2;\n  else s = l.p1;\n  Vector v1 = Vector(p - s);\n  Vector v2 = Vector(c.c - p);\n  double k1, k2, a, b, d;\n  a = v1.abs() * v1.abs();\n  b = -2 * pow(v1.abs(), 2) -2 * dot(v1, v2);\n  d = pow(v1.abs(), 2) + 2 * dot(v1, v2) + pow(v2.abs(), 2) - pow(c.r, 2);\n  k1 = (-1 * b + pow(b * b - 4 * a * d, 0.5)) / (2 * a);\n  k2 = (-1 * b - pow(b * b - 4 * a * d, 0.5)) / (2 * a);\n  return make_pair(s + v1 * k1, s + v1 * k2);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y, p.x);\n}\nVector polar(double a, double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point, Point> getcrosspointcc(Circle c1, Circle c2){\n  Vector cc = Vector(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + cc.abs() * cc.abs() - c2.r * c2.r) / (2 * c1.r * cc.abs()));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nvoid printans(double a, double b, double c, double d){\n  cout << fixed << setprecision(10) << a << \" \" << b << \" \" << c << \" \" << d << endl;\n}\n\nint contains(Polygon g, Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0; i < n; i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if(a.y > b.y) swap(a, b);\n    if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nvoid solve(){\n  int n; cin >> n;\n  Polygon g(n);\n  for(int i = 0; i < n; i++){\n    double x, y; cin >> x >> y;\n    g[i] = Point(x, y);\n  }\n  int q; cin >> q;\n  vector<int> ans(q);\n  for(int i = 0; i < q; i++){\n    double x, y; cin >> x >> y;\n    ans[i] = contains(g, Point(x, y));\n  }\n  for(int i = 0; i < q; i++){\n    cout << ans[i] << endl;\n  }\n  return;\n}\n\nint main(){\n  solve();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS (1e-10)\nclass Point {\npublic:\n    int x, y;\n    Point(int x, int y) : x(x), y(y) {  }\n    Point operator -(Point p) {\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef vector<Point> Polygon;\ndouble dot(Point p1, Point p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ndouble cross(Point p1, Point p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\ndouble norm(Point p) {\n    return p.x * p.x + p.y * p.y;\n}\ndouble abs(Point p) {\n    return sqrt(norm(p));\n}\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) {\n            return 1;\n        }\n        if (a.y > b.y) {\n            swap(a, b);\n        }\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {\n            x = !x;\n        }\n    }\n    return x ? 2 : 0;\n}\n\nint main() {\n\n    int n;\n    scanf(\"%d\", &n);\n    Polygon g;\n    for (int i = 0; i < n; ++i) {\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        Point p(x, y);\n        g.push_back(p);\n    }\n\n    int q;\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; ++i) {\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        Point p(x, y);\n        cout << contains(g, p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a, i##end = b; i <= i##end; ++i)\n#define per(i, a, b) for (int i = a, i##end = b; i >= i##end; --i)\n#define rep0(i, a) for (int i = 0, i##end = a; i < i##end; ++i)\n#define per0(i, a) for (int i = (int)a-1; ~i; --i)\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define chkmax(a, b) a = max(a, b)\n#define chkmin(a, b) a = min(a, b)\n#define x first\n#define y second\n#define enter putchar('\\n')\n\ntypedef long long ll;\ntypedef double DB;\n\nconst DB eps = 1e-12;\nconst DB PI = acos(-1);\n\nint sgn(DB x) { return fabs(x) < eps ? 0 : (x > 0 ? 1 : -1); }\n\nstruct Point {\n\tDB x, y;\n\tPoint(DB x = 0, DB y = 0) : x(x), y(y) {}\n\tPoint operator + (Point a) { return Point(x + a.x, y + a.y); }\n\tPoint operator - (Point a) { return Point(x - a.x, y - a.y); }\n\tPoint operator - () { return Point(-x, -y); }\n\tfriend Point operator * (DB k, Point a) { return Point(k * a.x, k * a.y); }\n\tDB operator % (Point a) { return x * a.x + y * a.y; }\n\tDB operator / (Point a) { return x * a.y - y * a.x; }\n\toperator DB() { return sqrt(x*x + y*y); }\n};\n\nPoint gp() { Point a; scanf(\"%lf%lf\", &a.x, &a.y); return a; }\nvoid wp(Point a) { printf(\"%.10lf %.10lf \", a.x, a.y); }\n\nstruct Poly {\n\tstd::vector<Point> a;\n\tPoly(int n = 0) { a.resize(n); rep0(i, n) a[i] = gp(); }\n\tint size() { return a.size(); }\n\tPoint &operator [] (int i) { int n = size(); return a[i >= n ? i-n : i]; }\n};\n\nint Direct1(Point P, Point P1, Point P2) { return sgn((P1-P)%(P2-P)); }\nint Direct2(Point P, Point P1, Point P2) { return sgn((P1-P)/(P2-P)); }\n\nDB Area(Poly A) {\n\tDB res = 0;\n\trep(i, 2, A.size()-1) res += (A[i]-A[0])/(A[i-1]-A[0]);\n\treturn fabs(res)/2;\n}\n\nbool IsConvex(Poly A) {\n\tbool f1 = 1, f2 = 1;\n\trep0(i, A.size()) {\n\t\tint t = sgn((A[i+1]-A[i])/(A[i+2]-A[i+1]));\n\t\tt && (t == 1 ? f1 = 0 : f2 = 0);\n\t}\n\treturn f1 || f2;\n}\n\nbool IsSegInter(Point P1, Point P2, Point Q1, Point Q2) {\n\tif (min(P1.x, P2.x) <= max(Q1.x, Q2.x) && max(P1.x, P2.x) >= min(Q1.x, Q2.x) && min(P1.y, P2.y) <= max(Q1.y, Q2.y) && max(P1.y, P2.y) >= min(Q1.y, Q2.y))\n\t\tif (Direct2(P1, P2, Q1) * Direct2(P1, P2, Q2) <= 0 && Direct2(Q1, Q2, P1) * Direct2(Q1, Q2, P2) <= 0) return 1;\n\treturn 0;\n}\n\nint IsInPoly(Poly A, Point P) {\n\tDB angle = 2.0*PI*rand()/RAND_MAX; Point Q = P+1e5*Point(cos(angle), sin(angle));\n\t//wp(Q);enter;\n\tint cnt = 0;\n\trep0(i, A.size()) {\n\t\tif (!Direct2(P, A[i], A[i+1]) && Direct1(A[i], A[i+1], P) * Direct1(A[i+1], A[i], P) >= 0) return -1;\n\t\tcnt ^= IsSegInter(A[i], A[i+1], P, Q);\n\t}\n\treturn cnt;\n}\n\n/*\nPoly GetConvex(Point P[]) {\n\n}\n*/\n\nint n, q;\nPoly A;\n\nint main() {\n\tsrand(time(0));\n\tscanf(\"%d\", &n); A = Poly(n);\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tPoint P = gp();\n\t\tint t = IsInPoly(A, P);\n\t\tprintf(\"%d\\n\", t == 1 ? 2 : (t == -1 ? 1 : 0));\n\t}\n\t/*\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tPoint P1 = gp(), P2 = gp(), Q1 = gp(), Q2 = gp();\n\t\tprintf(\"%.10lf\\n\", SegDist(P1, P2, Q1, Q2));\n\t\t//wp(GetSegInter(P1, P2, Q1, Q2)); enter;\n\t\t//printf(\"%d\\n\", IsInter(P1, P2, Q1, Q2));\n\t\t//wp(Proj(P, P1, P2)); enter;\n\t}*/\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef pair<ll,ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef vector<pll> vpll;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst ll INF=1ll<<60;\nconst double pi=acos(-1);\nconst double eps=1e-9;\nconst ll mod=1e9+7;\nconst int dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\ntypedef complex<double> C;\ntypedef pair<C,C> pp;\ntypedef vector<C> VP;\ntypedef vector<pp> VPP;\n#define eq(a,b) (fabs(a-b)<eps)\n#define veq(a,b) (eq(a.real(),b.real())&&eq(a.imag(),b.imag()))\nconst C O{0,0};\n\nvoid In(C& p){\n\tdouble x,y;\n\tcin>>x>>y;\n\tp=C(x,y);\n}\n\nvoid Out(C p){\n\tcout<<(int)p.real()<<' '<<(int)p.imag()<<endl;\n}\n\ndouble Dot(C p,C q){\n\treturn p.real()*q.real()+p.imag()*q.imag();\n}\n\ndouble Det(C p,C q){\n\treturn p.real()*q.imag()-q.real()*p.imag();\n}\n\nint Clock(C a,C b,C c){\n\tdouble t=Det(b-a,c-a);\n\tif(t>eps) return 1;\n\tif(t<-eps) return -1;\n\tif(Dot(b-a,c-a)<-eps) return 2;\n\tif(Dot(a-b,c-b)<-eps) return -2;\n\treturn 0;\n}\n\nbool is_Containment(VP p,C x){\n\tbool B=0;\n\tp.push_back(p[0]);\n\tint n=p.size();\n\tfor(int i=0;i<n-1;i++){\n\t\tC a=p[i]-x,b=p[i+1]-x;\n\t\tif(a.imag()>b.imag()) swap(a,b);\n\t\tif(a.imag()<=0&&b.imag()>0&&Det(a,b)<0) B=!B;\n\t}\n\treturn B;\n}\n\nint n,q;\nVP a;\nC x;\n\nint main(){\n\tcin>>n;\n\ta=VP(n);\n\tfor(auto &i:a) In(i);\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tbool B=0;\n\t\tIn(x);\n\t\tfor(int i=0;i<n;i++) if(!Clock(a[i],a[(i+1)%n],x)) B=1;\n\t\tif(B) cout<<1<<endl;\n\t\telse cout<<(is_Containment(a,x)?2:0)<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long lint;\n  \n//定数\nconst double EPS = 1e-9;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n  \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n  \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n  \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n  \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n    \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n    \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n    \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n    \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n  \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n  \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n  \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n  \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n  \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n  \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n        \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    qs.resize(k - 1);\n    return (qs);\n}\n  \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n  \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n  \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n  \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n  \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n    \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n    \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n    \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n  \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n  \nint main()\n{\n    int n, q;\n      \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n      \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n          \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            else {\n                assert(neq(abs(next - t), 0));\n                assert(neq(abs(p[j] - t), 0));\n                double th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n                fsum += th;\n            }\n        }\n        printf(\"%d\\n\", state ? state : 2 * eq(abs(fsum), 2 * acos(-1)));\n    }\n      \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include \"zpw.h\"\nusing namespace std;\nint main(){\n\tPolygon g;\n\tPoint p ,t;\n\tint n, q;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\tg.push_back(t);\n\t}\n\tcin>>q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin>>p.x>>p.y;\n\t\tcout<<contains(g, p)<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n \ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n \nconst int N = -1;\nconst ld EPS = 1e-12;\n \nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n \ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n \nistream& operator>> (istream& is, complex<ld>& p){\n    ld val;\n    is >> val;\n    p.real(val);\n    is >> val;\n    p.imag(val);\n    return is;\n}\n \nld dot(PT a, PT b){ return real(conj(a)*b); }\nint crossCall = 0;\nclock_t crossClock = 0;\nld cross(PT a, PT b){\n\tclock_t st = clock();\n\tcrossCall++; \n\tld res = imag(conj(a)*b); \n\tcrossClock += clock()-st;\n\treturn res;\n}\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n \nPT proj(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + b*real(c/b);\n}\n \nPT reflect(PT a, PT b, PT c){\n    b -= a, c -= a;\n    return a + conj(c/b)*b;\n}\n \nPT rotate(PT a, PT b, ld theta){\n    return (b-a)*polar<ld>(1, theta) + a;\n}\n \nint relpos(PT a, PT b, PT c){\n    b -= a, c -= a;\n\tld Imag = cross(b, c);\n    if (Grt(Imag, 0)) return LEFT;\n    if (Lss(Imag, 0)) return RIGHT;\n\tld Real = dot(b, c)/dot(b, b);\n    if (Lss(Real, 0)) return BACK;\n    if (Grt(Real, 1)) return FRONT;\n    return ON;\n}\n \nint side(PT a, PT b, PT c){\n    b -= a, c -= a;\n    ld cr = cross(b, c);\n    return Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n \n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n    int as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n    if (as && as == bs || cs && cs == ds) return false;\n    else if (as || bs || cs || ds) return true;\n    for (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n        ld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n        for (int k = 0; k < 2; k++, swap(c, d))\n            if (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n                return true;\n    }\n    return false;\n}\n \n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n    ld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n    return (c1*d - c2*c)/(c1-c2);\n}\n \nld distLSP(PT a, PT b, PT c){\n    int rpos = relpos(a, b, proj(a, b, c));\n    if (rpos == BACK) return len(c-a);\n    if (rpos == FRONT) return len(c-b);\n    b -= a, c -= a;\n    return abs(cross(b, c)/len(b));\n}\n \nld distLS(PT a, PT b, PT c, PT d){\n    if (intersect(a, b, c, d)) return 0;\n    return min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n \nld signedArea(Poly &po){\n    int n = po.size();\n    ld res = 0;\n    for (int i = 0; i < n; i++)\n        res += cross(po[i], po[(i+1)%n]);\n    return res/2;\n}\n \nld area(Poly &poly){\n    return abs(signedArea(poly));\n}\n \nbool isConvex(Poly &po){\n    int n = po.size();\n    bool neg = false, pos = false;\n    for (int i = 0; i < n; i++){\n        int rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n        if (rpos == LEFT) pos = true;\n        if (rpos == RIGHT) neg = true;\n    }   \n    return (neg&pos) == false;\n}\n \nint crossingN(Poly &po, PT a){\n    int cn = 0;\n    ld mx = 1e9;\n    PT b(mx, a.Y);\n    int n = po.size();\n    for (int i = 0; i < n; i++){\n        PT p = po[i], q = po[(i+1)%n];\n        if (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n            cn++;\n    }\n    return cn;\n}\n \nint pointInPoly(Poly &po, PT a){\n    int n = po.size();\n    for (int i = 0; i < n; i++)\n        if (relpos(po[i], po[(i+1)%n], a) == ON)\n            return ON;  \n    return (crossingN(po, a)%2 ? IN : OUT);\n}\n \nint main(){ \n    Poly poly;\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        poly.pb(p);\n    }\n    for (int i = in(); i; i--){\n        PT p;\n        cin >> p;\n        int s = pointInPoly(poly, p);\n        cout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nint dcmp(double x) {\n    static double eps = 1e-8;\n    return (x > eps) - (x < -eps);\n}\n\nstruct vec{\n    double x, y;\n\n    vec(double _x=0, double _y=0)\n        :x(_x), y(_y) {}\n\n    vec operator- () const{ return vec(-x, -y); }\n    \n    vec operator+ (const vec& v) const{ return vec(x+v.x, y+v.y); }\n    vec operator- (const vec& v) const{ return vec(x-v.x, y-v.y); }\n    vec operator* (double c) const{ return vec(x*c, y*c); }\n    vec operator/ (double c) const{ return vec(x/c, y/c); }\n\n    double dot(const vec& v) const{ return x*v.x + y*v.y; }\n    double cross(const vec& v) const{ return x*v.y - y*v.x; }\n\n    double len2() const{ return x*x + y*y; }\n    double len() const{ return sqrt(len2()); }\n    \n    vec& norm() { return *this = *this / len(); }\n    vec& rot(double rad) {\n        return  *this = vec(x*cos(rad) - y*sin(rad), x*sin(rad) + y*cos(rad));\n    }\n\n    bool operator< (const vec& v) const{\n        return dcmp(x-v.x) < 0 || (dcmp(x-v.x)==0 && dcmp(y-v.y) < 0);\n    }\n};\n\nstruct line{\n    vec u, v; // u + x*v\n\n    line() {}\n    line(vec _u, vec _v)\n        :u(_u), v(_v) {}\n\n    vec get(double x) {\n        return u + v * x;\n    }\n};\n\nline makeline(vec a, vec b) {\n    return line(a, b - a);\n}\n\nbool on_left(line l, vec u) {\n    return dcmp(l.v.cross(u - l.u)) > 0;\n}\n\nvec line_intersection(line a, line b) {\n    return b.u + b.v * b.v.cross(b.u-a.u) / a.v.cross(b.v);\n}\n\nbool segment_intersection(vec a, vec b, vec c, vec d) {\n    line x = line(a, b-a), y = line(c, d-c);\n    return on_left(x, c) != on_left(x, d) && on_left(y, a) != on_left(y, b);\n}\n\nstd::vector<vec> convex_hull(std::vector<vec> p) {\n    std::sort(p.begin(), p.end());\n    std::vector<vec> ch;\n    for (size_t i = 0; i < p.size(); ++i) {\n        while (ch.size() > 1 && on_left(makeline(ch[ch.size()-2], p[i]), ch[ch.size()-1]))\n            ch.pop_back();\n        ch.push_back(p[i]);\n    }\n    size_t k = ch.size();\n    for (int i = p.size() - 2; i >= 0; --i) {\n        while (ch.size() > k && on_left(makeline(ch[ch.size()-2], p[i]), ch[ch.size()-1]))\n            ch.pop_back();\n        ch.push_back(p[i]);\n    }\n    ch.pop_back();\n    return ch;\n}\n\nstd::pair<vec, vec> convex_diameter(const std::vector<vec> &p) {\n    int xmax = 0, xmin = 0, n = p.size();\n    for (int i = 1; i < n; ++i) {\n        if (p[i].x > p[xmax].x) xmax = i;\n        if (p[i].x < p[xmin].x) xmin = i;\n    }\n    \n    int i = xmax, j = xmin;\n    int u = xmax, v = xmin;\n    double ans = (p[xmax] - p[xmin]).len2();\n    \n    do {\n        if ((p[i] - p[(i + 1) % n]).cross(p[j] - p[(j + 1) % n]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n\n        double dist = (p[i] - p[j]).len2();\n        if (dist > ans) {\n            ans = dist;\n            u = i; v = j;\n        }\n    }while(i != xmax || j != xmin);\n    return std::make_pair(p[u], p[v]);\n}\n\ndouble polygon_area(const std::vector<vec>& v) {\n    double area = 0;\n    for (size_t i = 0; i < v.size(); ++i)\n        area += v[i].cross(v[(i + 1) % v.size()]);\n    return area * 0.5;\n}\n\nint relation(const std::vector<vec>& p, const vec& v) {\n    int ret = -1, n = p.size();\n    for (int i = 0; i < n; ++i) {\n        vec a = p[i] - v, b = p[(i + 1) % n] - v;\n        if (a.y > b.y) std::swap(a, b);\n        if (a.y <= 0 && 0 < b.y && a.cross(b) < 0)\n            ret = -ret;\n        if (a.cross(b) == 0 && a.dot(b) <= 0) return 0;\n  }\n  return ret;\n}\n\n// end template\n\nint main() {\n    std::vector<vec> v;\n    int n; scanf(\"%d\", &n);\n    while (n--) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        v.push_back(vec(x, y));\n    }\n    scanf(\"%d\", &n);\n    while (n--) {\n        vec p;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        printf(\"%d\\n\", relation(v, p)+1);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst double Pi = acos(-1.0);\nconst int INf = 0x7fffffff;\nconst double eps = 1e-10;\n\nint sgn(double d) {\n    if(fabs(d) < eps)\n        return 0;\n    if(d > 0)\n        return 1;\n    return -1;\n}\n\nint dcmp(double x, double y) {\n    if(fabs(x - y) < eps)\n        return 0;\n    if(x > y)\n        return 1;\n    return -1;\n}\n\nstruct Point {\n    double x, y;\n    Point(double _x = 0, double _y = 0):x(_x), y(_y){}\n};\n\ntypedef Point Vector;\n\nVector operator + (Vector A, Vector B) {\n    return Vector(A.x + B.x, A.y + B.y);\n}\n\nVector operator - (Point A, Point B) {\n    return Vector(A.x - B.x, A.y - B.y);\n}\n\nVector operator * (Vector A, double p) {\n    return Vector(A.x * p, A.y * p);\n}\n\nVector operator / (Vector A, double p) {\n    return Vector(A.x / p, A.y / p);\n}\n\nbool operator == (const Point &a, const Point &b) {\n    if(sgn(a.x-b.x) == 0 && sgn(a.y-b.y) == 0)\n        return true;\n    return false;\n}\n\ndouble Dot(Vector A, Vector B) {\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble Cross(Vector A, Vector B) {\n    return A.x * B.y - B.x * A.y;\n}\n\ndouble Length(Vector A) {\n    return sqrt(Dot(A, A));\n}\n\ndouble Angle(Vector A, Vector B) {\n    return acos(Dot(A, B) / Length(A) / Length(B));\n}\n\ndouble Area2(Point A, Point B, Point C) {\n    return Cross(B - A, C - A);\n}\n\nVector Rotate(Vector A, double rad) { // 逆时针旋转rad\n    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) - A.y * cos(rad));\n}\n\nVector Normal(Vector A) {      //A左转90°的单位法向量\n    double L = Length(A);\n    return Vector(-A.y / L, A.x / L);\n}\n\nbool ToLeftTest(Point a, Point b, Point c) {\n    return Cross(b - a, c - a) > 0;\n}\n\nstruct Line {\n    Point v, p;\n    Line(Point v, Point p) : v(v), p(p){}\n    Point point(double t) {\n        return v + (p - v) * t;\n    }\n};\n\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    double t = Cross(w, u) / Cross(v, w);\n    return P + v * t;\n}\n\ndouble DistanceToLine(Point P, Point A, Point B) {\n    Vector v1 = B - A, v2 = P - A;\n    return fabs(Cross(v1, v2) / Length(v1));\n}\n\n\ndouble DistanceToSegment(Point P, Point A, Point B) {\n    if(A == B)\n        return Length(P - A);\n    Vector v1 = B - A, v2 = P - A, v3 = P - B;\n    if(sgn(Dot(v1, v2)) < 0)\n        return Length(v2);\n    if(sgn(Dot(v1, v3)) > 0)\n        return Length(v3);\n    return DistanceToLine(P, A, B);\n}\n\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (Dot(v, P - A) / Dot(v, v));\n}\n\nbool OnSegment(Point p, Point a1, Point a2){\n    return sgn(Cross(a1-p, a2-p)) == 0 && sgn(Dot(a1-p, a2-p)) < 0;\n}\n\nint PointAtSegment(Point p, Point a, Point b) {\n    Vector v1 = p - a, v2 = b - a;\n    if(sgn(Cross(v1, v2)) == -1)\n        return -1;\n    else if(sgn(Cross(v1, v2)) == 1)\n        return 1;\n    else if(sgn(Dot(v1, v2)) == -1)\n        return -1;\n    else if(sgn(Length(v1) - Length(v2)) == 1)\n        return 1;\n    return 0;\n}\n\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2){\n    return PointAtSegment(b1, a1, a2) * PointAtSegment(b2, a1, a2) <= 0 && PointAtSegment(a1, b1, b2) * PointAtSegment(a2, b1, b2) <= 0;\n}\n\ndouble DistancePointToSegment(Point p, Point a, Point b) {\n    if(sgn(Dot(p - a, b - a)) == -1)\n        return Length(p - a);\n    else if(sgn(Dot(p - b, a - b)) == -1)\n        return Length(p - b);\n    return DistanceToLine(p, a, b);\n}\n\ndouble SegmentsDistance(Point a1, Point a2, Point b1, Point b2) {\n    if(SegmentProperIntersection(a1, a2, b1, b2))\n        return 0;\n    return min(min(DistancePointToSegment(a1, b1, b2), DistancePointToSegment(a2, b1, b2)), min(DistancePointToSegment(b1, a1, a2), DistancePointToSegment(b2, a1, a2)));\n}\n\ndouble PolygonArea(Point *p, int n) {\n    double s = 0.0;\n    for (int i = 1; i < n - 1; ++i)\n        s += Cross(p[i] - p[0], p[i + 1] - p[0]) / 2.0;\n    return s;\n}\n\n/* bool GrahamCmp1(Point a, Point b) {\n    if(dcmp(a.y, b.y) == 0)\n        return dcmp(a.x, b.x) < 0;\n    return dcmp(a.y, b.y) < 0;\n}\n\nbool GrahamCmp2(Point a, Point b) {\n    int judge = sgn(Cross(b - a, p[0] - a));\n    if(judge > 0)\n        return 1;\n    else if (judge == 0 && dcmp(Length(p[0] - a), Length(p[0] - b)) < 0)\n        return 1;\n    return 0;\n}\n\nPoint Stack[105];\n\nint Graham(Point *p, int n) {\n    sort(p, p + n, GrahamCmp1);\n    Stack[0] = p[0];\n    sort(p + 1, p + n, GrahamCmp2);\n    Stack[1] = p[1];\n    int top = 1;\n    for (int i = 2; i < n; ++i) {\n        while(sgn(Cross(Stack[top] - Stack[top-1], p[i] - Stack[top - 1])) < 0)\n            --top;\n        Stack[++top] = p[i];\n    }\n    return top;\n} */\n\nPoint g[105];\n\nint PointContainPolygon(Point p, int n) {\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Vector b = g[(i + 1) % n] - p, a = g[i] - p;\n        if (sgn(Cross(a, b)) == 0 && sgn(Dot(a, b)) <= 0)\n            return 1;\n        if(dcmp(a.y, b.y) > 0)\n            swap(a, b);\n        if (sgn(a.y) <= 0 && sgn(b.y) > 0 && sgn(Cross(a, b)) == 1)\n            x = !x;\n    }\n    return x ? 2 : 0;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%lf%lf\", &g[i].x, &g[i].y);\n    }\n    int q;\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; ++i) {\n        Point tmp;\n        scanf(\"%lf%lf\", &tmp.x, &tmp.y);\n        printf(\"%d\\n\", PointContainPolygon(tmp, n));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <algorithm>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\ntypedef struct pt {\n    int x;\n    int y;\n    int id;\n} pt;\nconst double EPS = 1e-8;\nbool dequals(double x, double y) {\n    if (fabs(x-y) < EPS) {\n       return true;\n    }\n    return false;\n}\n\npt operator-(pt p, pt q) {\n  return {p.x - q.x, p.y - q.y, -1};\n}\npt operator+(pt p, pt q) {\n  return {p.x + q.x, p.y + q.y, -1};\n}\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\nbool straight(pt a, pt b, pt c){\n    return cross(b - a, c - a) == 0;\n}\nbool operator<(pt a, pt b) {\n    return a.x < b.x;\n}\ndouble sq(double a) { return a * a; }\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nvector<pt> half_hull(vector<pt> pts) {\n  vector<pt> res;\n  for (int i = 0; i < pts.size(); i++) {\n    // ccw means we have a left turn; we don't want that\n    while (res.size() >= 2 &&\n           ccw(pts[i], res[res.size()-1], res[res.size()-2])) {\n      res.pop_back();\n    }\n    res.push_back(pts[i]);\n  }\n  return res;\n}\n\nvector<pt> convex_hull(vector<pt> pts) {\n  sort(pts.begin(), pts.end());\n  vector<pt> top = half_hull(pts);\n  reverse(pts.begin(), pts.end());\n  vector<pt> bottom = half_hull(pts);\n  top.pop_back();\n  bottom.pop_back();\n  vector<pt> res(top.begin(), top.end());\n  res.insert(res.end(), bottom.begin(), bottom.end());\n  return res;\n}\n\nint prevIndex(int i, int prev, int size) {\n    int k =  i - prev;\n    if (k < 0) {\n        k = size + k ;\n    }\n    return k;\n}\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n    \n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\nseg operator*(seg a, int b) {\n    return make_pair(a.a, pt({(a.b.x - a.a.x) * b, (a.b.y - a.a.y) * b, -1}));\n}\nseg getRay(seg a) {\n    pt oldb = a.b;\n    pt newb = pt{(a.b.x - a.a.x) * 10000, (a.b.y-a.a.y)*10000, -1};\n    seg ans = make_pair(oldb, newb);\n    return ans;\n}\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\nint intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n    double maxDist = 0;\n    maxDist = max(maxDist, dist(a.a, a.b));\n    maxDist = max(maxDist, dist(a.a, b.a));\n    maxDist = max(maxDist, dist(a.a, b.b));\n    maxDist = max(maxDist, dist(a.b, b.a));\n    maxDist = max(maxDist, dist(a.b, b.b));\n    maxDist = max(maxDist, dist(b.a, b.b));\n    return (maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS) ? 2 : 0;\n  }\n  return (ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b)) ? 2 : 0;\n}\n\nbool pointInSegment(pt a, seg b) {\n    if (!straight(b.a, a, b.b)) return false;\n    if (a.x <= max(b.a.x, b.b.x) && a.x >= min(b.a.x, b.b.x) &&\n        a.y <= max(b.a.y, b.b.y) && a.y >= min(b.a.y, b.b.y))\n    {   \n            return true;        \n    }\n    return false;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<pt> pts;\n    int minx = 20000, maxx = -20000, miny = 20000, maxy = -20000;\n    for (int j = 1; j<=N; j++) {\n        int x, y;\n        cin >> x >> y;\n        if (x > maxx) maxx = x;\n        if (x < minx) minx = x;\n        if (y > maxy) maxy = y;\n        if (y < miny) miny = y;\n        pts.push_back({x, y, j});\n    }\n\n    int Q;\n    cin >> Q;\n    for (int i = 0; i< Q; ++i) {\n        int x, y;\n        cin >> x >> y;\n        pt a = {x, y, -1};\n        //cout << \"QUER \" << x << \" \" << y << endl;\n        bool done = false;\n        int ans = 2;\n        if(a.x < minx || a.x > maxx || a.y > maxy || a.y < miny) {\n            cout << 0 << endl;\n            continue;\n        }\n        int intersects = 0;\n        seg ray = make_pair(a, pt{10001, a.y});\n        for (int j = 0; j < pts.size() - 1 && !done; j++) {\n            if (pointInSegment(a, make_pair(pts[j], pts[j+1])))\n            {\n                done = true;\n                ans = 1;\n                break;\n            }\n            // if (((pts[j].y <= a.y) && (pts[j+1].y > a.y))\n            //     || ((pts[j].y > a.y) && (pts[j+1].y <= a.y)))\n            //     {\n            //         double t = (double)(a.y-pts[j].y) / (pts[j+1].y - pts[j].y);\n            //         if (a.x < pts[j].x + t * (pts[j+1].x - pts[j].x))\n            //             intersects++;\n            //     }\n            \n            //cout << \"ray is \" << ray.a.x << \" \" << ray.a.y << \" -> \" << ray.b.x << \" \" << ray.b.y << endl;\n            seg edge = make_pair(pts[j], pts[j+1]);\n            if (pointInSegment(a, edge)) {\n                cout << 1 << endl;\n                done = true;\n                break;\n            }            \n            if (intersect(ray, edge) == 2) {\n                intersects++;\n            }            \n        }\n        if (pointInSegment(a, make_pair(pts[pts.size()-1], pts[0])))\n        {\n            done = true;\n            ans = 1;\n        }\n        if (done) {\n            cout << ans << endl;\n            continue;;\n        }\n        int lastelem = pts.size() - 1;;\n        if (((pts[lastelem].y <= a.y) && (pts[0].y > a.y))\n                || ((pts[lastelem].y > a.y) && (pts[0].y <= a.y)))\n        {\n            double t = (double)(a.y-pts[lastelem].y) / (pts[0].y - pts[lastelem].y);\n            if (a.x < pts[lastelem].x + t * (pts[0].x - pts[lastelem].x))\n                intersects++;\n        }\n        seg edge = make_pair(pts[0], pts[pts.size()-1]);\n        if (pointInSegment(a, edge)) {\n            cout << 1 << endl;\n            done = true;\n            break;\n        }            \n        if (intersect(ray, edge) == 2) {\n            intersects++;\n        }  \n\n        if (done) continue;\n       // cout << intersects << endl;\n        if (intersects % 2 == 1){\n            ans = 2;\n        } else {\n            ans = 0;\n        }\n        cout << ans << endl;\n    }\n}\n/*\n{\n  int i, j, c = 0;\n  for (i = 0, j = nvert-1; i < nvert; j = i++) {\n    if ( ((verty[i]>testy) != (verty[j]>testy)) &&\n\t (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )\n       c = !c;\n  }\n  return c;\n}\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nusing vin=vector<int>;\nusing vll=vector<long long>;\nusing vvin=vector<vector<int>>;\nusing vvll=vector<vector<long long>>;\nusing vstr=vector<string>;\nusing vvstr=vector<vector<string>>;\nusing vch=vector<char>;\nusing vvch=vector<vector<char>>;\nusing vbo=vector<bool>;\nusing vvbo=vector<vector<bool>>;\nusing vpii=vector<pair<int,int>>;\nusing pqsin=priority_queue<int,vector<int>,greater<int>>;\n#define mp make_pair\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define rep2(i,s,n) for(int i=(s);i<(int)(n);i++)\n#define all(v) v.begin(),v.end()\n#define decp(n) cout<<fixed<<setprecision((int)n)\nconst int inf=1e9+7;\nconst ll INF=1e18;\nconst double eps=1e-10;\n\n//A Symmetric Point(AOJ)\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0081&lang=jp\n//about 10min\n//line構造体を作成し鏡映点を返す関数をつくった。具体的には正射影ベクトルを求めてから鏡映点を導いている。\n//一個目の提出で明記し忘れたが, 下記サイトを参考にした。\n//https://sen-comp.hatenablog.com/entry/2020/03/10/015751\n//https://qiita.com/Reputeless/items/96226cfe1282a014b147\n\nstruct vec2{\n    double x;\n    double y;\n    \n    vec2()=default;\n    vec2(double x_,double y_){\n        x=x_;\n        y=y_;\n    }\n\n    double length() const{//長さ\n        return sqrt(x*x+y*y);\n    }\n    constexpr double lengthsquare() const{//長さの二乗\n        return x*x+y*y;\n    }\n    constexpr double dot(const vec2& other) const{//内積\n        return x*other.x+y*other.y;\n    }\n    constexpr double cross(const vec2& other) const{//外積\n        return x*other.y-y*other.x;\n    }\n    double distancefrom(const vec2& other) const{//otherとの距離\n        return (other-*this).length();\n    }\n    vec2 unitvector() const{//単位ベクトル\n        return *this/length();\n    }\n    vec2 normalunitvector() const{//単位法線ベクトル\n        return{-unitvector().y,unitvector().x};\n    }\n    vec2 rotation(double arg) const{//(0,0)を中心にarg回転\n        double cs=cos(arg);double sn=sin(arg);\n        return {x*cs-y*sn,x*sn+y*cs};\n    }\n    double angle() const{//(0,0)を中心としたときの偏角\n        return atan2(y,x);\n    }\n    constexpr bool iszero() const{//原点と一致するか\n        return x==0.0 && y==0.0;\n    }\n    \n    vec2 operator+() const{\n        return *this;\n    }\n    vec2 operator-() const{\n        return {-x,-y};\n    }\n    vec2 operator+(const vec2& other) const{\n        return {x+other.x,y+other.y};\n    }\n    vec2 operator-(const vec2& other) const{\n        return {x-other.x,y-other.y};\n    }\n    vec2 operator*(double c) const{\n        return {c*x,c*y};\n    }\n    vec2 operator/(double c) const{\n        return {x/c,y/c};\n    }\n    vec2& operator+=(const vec2& other){\n        x+=other.x;\n        y+=other.y;\n        return *this;\n    }\n    vec2& operator-=(const vec2& other){\n        x-=other.x;\n        y-=other.y;\n        return *this;\n    }\n    vec2& operator*=(double c){\n        x*=c;\n        y*=c;\n        return *this;\n    }\n    vec2& operator/=(double c){\n        x/=c;\n        y/=c;\n        return *this;\n    }\n};\n\nint sgn(const double a){\n    return(a<-eps?-1:(a>eps?1:0));\n}\n\ninline vec2 operator*(double s,const vec2& v){\n    return {s*v.x,s*v.y};\n}\ninline bool operator<(const vec2& a, const vec2& b){\n    if(sgn(a.x-b.x)!=0)return sgn(a.x-b.x)<0;\n    else return sgn(a.y-b.y)<0;\n}\nint isp(const vec2& a,const vec2& b,const vec2& c){\n    //三点A,B,Cの位置関係を示す。全部異なっていることが前提条件。\n    //ABから見てBCが左に曲がるなら1, 右に曲がるなら-1\n    //ABC(CBA)の順で一直線上に並ぶなら2, ACB(BCA)の順なら0, BAC(CAB)の順なら-2\n\n    int tmp=sgn((b-a).cross(c-a));\n    if(tmp==1)return 1;\n    else if(tmp==-1)return -1;\n    else{\n        if(sgn((b-a).dot(c-b))>0)return 2;\n        else if(sgn((a-b).dot(c-a))>0)return -2;\n        else return 0;\n    }\n}\nint angletype(const vec2& a,const vec2& b,const vec2& c){//1:鋭角,2:直角,3:鈍角\n    auto tmp=(a-b).dot(c-b);\n    if(sgn(tmp)>0)return 0;\n    else if(sgn(tmp)==0)return 1;\n    else return 2;\n}\n\nstruct line{\n    vec2 sp,ep;//start poine,end poine\n    \n    line()=default;\n    line(const vec2& b,const vec2& e){//二点を通る直線\n        sp=b;\n        ep=e;\n    }\n    line(const double a,const double b,const double c){//ax+by+c=0\n        if(sgn(a)==0&&sgn(b)==0)assert(-1);//警告を出してプログラムを終了\n        if(sgn(b)==0){\n            sp=vec2(-c/a,0.0);\n            ep=vec2(-c/a,1.0);\n        }\n        else{\n            sp=vec2(0.0,-c/b);\n            ep=vec2(1.0,-(a+c)/b);\n        }\n    }\n\n    vec2 vec() const{//方向ベクトル\n        return ep-sp;\n    }\n    vec2 countervec() const{\n        return sp-ep;\n    }\n};\n\ntypedef line ray;//半直線\ntypedef line segment;//線分\n\nvec2 error_val={(double)inf,(double)inf};\n\nvec2 lineintersection(const line& l1,const line& l2){//直線の交点\n    if(sgn(l1.vec().cross(l2.vec()))==0.0)return error_val;//交わらない場合\n    vec2 tmp;\n    tmp=l1.sp+l1.vec()*abs((l2.ep-l1.sp).cross(l2.vec())/l1.vec().cross(l2.vec()));\n    return tmp;\n}\npair<bool,vec2> segmentintersection(const segment& s1,const segment& s2){//線分の交点\n    if(isp(s1.sp,s1.ep,s2.sp)*isp(s1.sp,s1.ep,s2.ep)<=0&&isp(s2.sp,s2.ep,s1.sp)*isp(s2.sp,s2.ep,s1.ep)<=0){\n        if(s1.vec().cross(s2.vec())==0)return mp(true,error_val);//重なる場合\n        else return mp(true,lineintersection(s1,s2));\n    }\n    return mp(false,error_val);\n}\ndouble pointlinedistance(const vec2& v,const line& l){//点と直線の距離\n    return abs(l.vec().cross(v-l.sp)/l.vec().length());\n}\ndouble pointraydistance(const vec2& v,const ray& r){//点と半直線の距離\n    if(sgn((v-r.sp).dot(r.vec()))<0)return r.sp.distancefrom(v);\n    return pointlinedistance(v,r);\n}\ndouble pointsegmentdistance(const vec2& v,const segment& s){\n    if(sgn(s.vec().dot(v-s.sp))<0||sgn(s.countervec().dot(v-s.ep))<0)return min(v.distancefrom(s.sp),v.distancefrom(s.ep));\n    return pointlinedistance(v,s);\n}\ndouble segmentsegmentdistance(const segment& s1,const segment& s2){//線分間の距離\n    if(segmentintersection(s1,s2).first)return 0;\n    double tmp=pointsegmentdistance(s1.sp,s2);\n    tmp=min(tmp,pointsegmentdistance(s1.ep,s2));\n    tmp=min(tmp,pointsegmentdistance(s2.sp,s1));\n    tmp=min(tmp,pointsegmentdistance(s2.ep,s1));\n    return tmp;\n}\nvec2 projection(const vec2& v,const line& l){//正射影\n    vec2 tmp;\n    tmp=l.sp+l.vec().unitvector()*(v-l.sp).dot(l.vec())/l.vec().length();\n    return tmp;\n}\nvec2 reflection(const vec2& v,const line& l){//鏡映(ある直線に対して与えられた点と対称な点を返す)\n    vec2 tmp;\n    tmp=v+2*(projection(v,l)-v);\n    return tmp;\n}\n\nint main(){\n    int n;cin>>n;\n    vector<vec2> p(n+1);\n    double x,y;\n    set<int> point;\n    rep(i,n){\n        cin>>x>>y;\n        p[i]=vec2(x,y);\n        point.insert((int)y);\n    }\n    p[n]=p[0];\n    double can;\n    rep(i,120){\n        if(!point.count(i)){\n            can=(double)i;\n            break;\n        }\n    }\n    int q;cin>>q;\n    vin ans(q);\n    int sum,onlinepoint;bool online;\n    rep(i,q){\n        cin>>x>>y;\n        segment s(vec2(x,y),vec2((double)10010,can));\n        sum=0;onlinepoint=0;online=false;\n        rep(j,n){\n            segment tmp(p[j],p[j+1]);\n            if(sgn(pointsegmentdistance(p[j],s))==0)onlinepoint++;\n            if(sgn(pointsegmentdistance(s.sp,tmp)-0.0)==0){\n                online=true;\n                break;\n            }\n            if(segmentintersection(s,tmp).first)sum++;\n        }\n        if(online)ans[i]=1;\n        else{\n            if((sum-onlinepoint)%2)ans[i]=2;\n            else ans[i]=0;\n        }\n    }\n    rep(i,q)cout<<ans[i]<<endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nstruct pt\n{\n  int x, y;\n\n  pt operator - ( pt & p ) const \n  {\n    return { x - p.x, y - p.y };\n  }\n\n};\n\nlong long dot( pt p, pt q )\n{\n  return p.x * q.x + p.y * q.y;\n}\n\nlong long cross( pt p, pt q )\n{\n  return p.x * q.y - p.y * q.x;\n}\n\nlong long orient( pt a, pt b, pt c )\n{\n  return cross( b - a, c - a );\n}\n\nenum {IN,OUT,ON};\n\nint point_in_polygon( vector< pt > &pol, pt p )\n{\n  int wn = 0;\n  for( int i = 0, n = pol.size(); i < n; ++ i )\n  {\n    long long c = orient( p, pol[i], pol[(i+1)%n] );\n    if( c == 0 && dot( pol[i] - p, pol[(i+1)%n] - p ) <= 0 ) return ON; \n    if( c > 0 && pol[i].y <= p.y && pol[(i+1)%n].y > p.y ) ++ wn;\n    if( c < 0 && pol[(i+1)%n].y <= p.y && pol[i].y > p.y ) --wn;\n  }\n  return wn ? IN : OUT;\n}\n\nint main()\n{\n  int n;\n  scanf(\"%d\", &n );\n\n  vector< pt > pol( n );\n  for( auto &p : pol )\n    scanf(\"%d %d\", &p.x, &p.y );\n\n  int q;\n  scanf(\"%d\", &q );\n  while( q-- )\n  {\n    pt p;\n    scanf(\"%d %d\", &p.x, &p.y );\n\n    int r = point_in_polygon( pol, p );\n    if( r == IN ) puts(\"2\");\n    if( r == ON ) puts(\"1\");\n    if( r == OUT ) puts(\"0\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+10000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+10000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+10000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n\n    \n    \n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            cout<<inside_and_outside_the_determination_of_the_polygon_and_point(n, p_xy, tx, ty)<<endl;\n\n\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define DEBUG 1\n\n#define INF (1.0/0.0)\n#define EPS 1e-10\n#define PI 3.1415926535\n#define EQ(x, y) (abs((x)-(y))<EPS)\n#define X real()\n#define Y imag()\n\ntypedef complex<double> Point;\ntypedef Point Vec;\ntypedef array<Point, 2> Line;\ntypedef vector<Point> Poly;\n\nstruct Circle {\n  Point c;\n  double r;\n};\n\nenum Geometory {ABC=-2, CW, ON_LINE, CCW, CAB, OUTSIDE, INSIDE, ERROR}; \n\nnamespace std {\n  bool operator<(Point a, Point b) {\n    if (a.X != b.X) return a.X < b.X;\n    return a.Y < b.Y;\n  }\n}\n\ndouble dot(Point a, Point b) {\n  return (conj(a)*b).X;\n}\n\ndouble cross(Point a, Point b) {\n  return (conj(a)*b).Y;\n}\n\nGeometory ccw(Point a, Point b, Point c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return CCW; // ccw\n  if (cross(b, c) < 0) return CW; // cw\n  if (dot(b, c) < 0) return CAB; // c - a - b\n  if (norm(b) < norm(c)) return ABC; // a - b - c\n  return ERROR;\n}\n\nPoint proj(Line l, Point p) {\n  Point v = l[1]-l[0];\n  double ratio = dot(v, p-l[0]) / norm(v);\n  return l[0] + ratio*v;\n}\n\nPoint refl(Line l, Point p) {\n  return p + (proj(l, p) - p) * 2.0;\n}\n\nVec rotate(Vec v, double r) {\n  return v*Vec(cos(r), sin(r));\n}\n\nbool IsOrthogonal(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(dot(v1, v2), 0.0);\n}\n\nbool IsParallel(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(cross(v1, v2), 0.0);\n}\n\nbool IntersectLL(Line l, Line m) {\n  if (!EQ(cross(l[1]-l[0], m[1]-m[0]), 0.0)) return true;\n  if (EQ(cross(l[1]-l[0], m[0]-l[0]), 0.0)) return true;\n  return false;\n}\n\nbool IntersectLS(Line l, Line s) {\n  Point b = l[0];\n  Vec v = l[1]-l[0];\n  return cross(v, s[0]-b)*cross(v, s[1]-b) < EPS;\n}\n\nbool IntersectSS(Line s, Line t) {\n  if (ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) > 0) return false;\n  if (ccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) > 0) return false;\n  return true;\n}\n\nbool IntersectLP(Line l, Point p) {\n  return EQ(cross(l[1]-p, l[0]-p), 0.0);\n}\n\nbool IntersectSP(Line s, Point p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble DistL(Line l) {\n  return abs(l[0]-l[1]);\n}\n\ndouble DistLP(Line l, Point p) {\n  return abs(p - proj(l, p));\n}\n\ndouble DistLL(Line l, Line m) {\n  if (!IntersectLL(l, m)) return 0;\n  return DistLP(l, m[0]);\n}\n\ndouble DistLS(Line l, Line s) {\n  if (IntersectLS(l, s)) return 0;\n  return min(DistLP(l, s[0]), DistLP(l, s[1]));\n}\n\ndouble DistSP(Line s, Point p) {\n  Point r = proj(s, p);\n  if (IntersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble DistSS(Line s, Line t) {\n  if (IntersectSS(s, t)) return 0;\n\n  double a = min(DistSP(s, t[0]), DistSP(s, t[1]));\n  double b = min(DistSP(t, s[0]), DistSP(t, s[1]));\n  return min(a, b);\n}\n\nLine PerpendBisect(Line seg) {\n  Point mid = (seg[0]+seg[1])/2.0;\n  return Line{mid, mid+(seg[1]-seg[0])*Vec(0, 1)};\n}\n\nPoint CrossPointLL(Line l, Line m) {\n  double A = cross(l[1]-l[0], m[1]-m[0]);\n  double B = cross(l[1]-l[0], l[1]-m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0];\n  if (abs(A) < EPS) assert(0);\n  return m[0] + B / A * (m[1]-m[0]);\n}\n\nvector<Point> CrossPointCL(Circle c, Line l) {\n  vector<Point> ret;\n  double d = DistLP(l, c.c);\n  if (d < c.r + EPS) {\n    double ratio = (d > c.r) ? 0.0 : sqrt(c.r*c.r - d*d);\n    Vec sgn = (l[0]-l[1]) / abs(l[0]-l[1]);\n    ret.push_back(proj(l, c.c) + ratio*sgn);\n    ret.push_back(proj(l, c.c) - ratio*sgn);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCS(Circle c, Line s) {\n  vector<Point> ret;\n  vector<Point> res = CrossPointCL(c, s);\n  for (Point p : res) {\n    if(ccw(s[0], p, s[1]) == ABC) ret.push_back(p);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCC(Circle c1, Circle c2) {\n  vector<Point> ret;\n  double d = abs(c1.c - c2.c);\n  double rc = (d*d + c1.r*c1.r - c2.r*c2.r) / (2*d);\n  double dfr = c1.r*c1.r - rc*rc;\n\n  if (EQ(dfr, 0.0)) dfr = 0.0;\n  else if(dfr < 0.0) return ret;\n\n  double rs = sqrt(dfr);\n  Vec sgn = (c2.c - c1.c) / d;\n  ret.push_back(c1.c + sgn*Point(rc, rs));\n  if (dfr > 0.0) ret.push_back(c1.c + sgn*Point(rc, -rs));\n  return ret;\n}\n\n// Note that ccw(a, b, c) != CCW when a, b, c are colinear\nPoly GrahamScan(vector<Point> ps) {\n  int k = 0;\n  int n = ps.size();\n  Poly ret(n*2);\n\n  sort(ps.begin(), ps.end());\n  for (int i=0; i<n; i++) {\n    while (k > 1 && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  int k_ = k;\n  for (int i=n-1; i>=0; i--) {\n    while (k > k_ && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  ret.resize(k-1);\n  return ret;\n}\n\ndouble CalcArea(Poly ps) {\n  double ret = 0.0;\n  for (int i=0; i<ps.size(); i++) {\n    ret += cross(ps[i], ps[(i+1)%ps.size()]);\n  }\n  return ret/2.0;\n}\n\nbool IsConvex(Poly ps) {\n  return GrahamScan(ps).size() == ps.size();\n}\n\nGeometory ContainsPoint(Poly poly, Point p) {\n  bool in = false;\n  int n = poly.size();\n  for (int i=0; i<n; i++) {\n    Vec a = poly[i] - p;\n    Vec b = poly[(i+1)%n] - p;\n    double cr = cross(a, b);\n\n    if (a.Y > b.Y) swap(a, b);\n    if (a.Y <= 0 && 0 < b.Y && cr > EPS) in ^= 1;\n    if (IntersectSP({poly[i], poly[(i+1)%n]}, p)) return ON_LINE;\n  }\n\n  if (in) return INSIDE;\n  return OUTSIDE;\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\npair<int, int> ConvexDiameterApexes(Poly ps) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  int n = ps.size();\n  int is = 0;\n  int js = 0;\n  for (int i=1; i<n; i++) {\n    if (ps[i].Y > ps[is].Y) is = i;\n    if (ps[i].Y < ps[js].Y) js = i;\n  }\n\n  int maxi, maxj;\n  double maxd = norm(ps[is]-ps[js]);\n  int i = is;\n  int j = js;\n  do {\n    Vec a = ps[i+1] - ps[i];\n    Vec b = ps[j+1] - ps[j];\n    if (cross(a, b) > -EPS) j = (j+1)%n;\n    else i = (i+1)%n;\n\n    double d = norm(ps[i]-ps[j]);\n    if (d > maxd) {\n      maxd = d;\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n\n  return make_pair(maxi, maxj);\n}\n\nLine ClosestPair(vector<Point> ps) {\n  auto CompareY = [](const Point &a, const Point &b) {\n    if (a.Y != b.Y) return a.Y < b.Y;\n    return a.X < b.X;\n  };\n\n  function<Line(Point*,int)> Rec = [&Rec, &CompareY](Point *as, int n) {\n    if (n <= 1) return Line{Point(0, 0), Point(INF, INF)};\n    \n    int m = n/2;\n    double x = as[m].X;\n    Line a = Rec(as, m);\n    Line b = Rec(as+m, n-m);\n    double mind = DistL(a);\n    Line ret = a;\n    if (DistL(b) < mind) {\n      mind = DistL(b);\n      ret = b;\n    }\n\n    sort(as, as+n, CompareY);\n    vector<Point> bs;\n    bs.reserve(n);\n    for (int i=0; i<n; i++) {\n      if (abs(as[i].X - x) >= mind) continue;\n\n      for (int j=0; j<bs.size(); j++) {\n        Point p1 = as[i];\n        Point p2 = bs[b.size()-1-j];\n        if (p1.Y - p2.Y >= mind) break;\n\n        double d = abs(p1-p2);\n        if (mind > d) {\n          mind = d;\n          ret = Line{p1, p2};\n        }\n      }\n\n      bs.emplace_back(as[i]);\n    }\n\n    return ret;\n  };\n\n  int n = ps.size();\n  assert (n >= 2);\n  sort(ps.begin(), ps.end());\n  return Rec(&ps[0], n);\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\n// <left, right> or <upper, lower>\npair<Poly, Poly> CutConvex(Poly ps, Line l) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  if (l[0].Y > l[1].Y) swap(l[0], l[1]);\n  else if (EQ(l[0].Y, l[1].Y) && l[0].X > l[1].X) swap(l[0], l[1]);\n\n  Poly left;\n  Poly right;\n  for (int i=0; i<ps.size(); i++) {\n    Point a = ps[i];\n    Point b = ps[(i+1)%ps.size()];\n\n    if (ccw(l[0], l[1], a) != CW) left.emplace_back(a);\n    else right.emplace_back(a);\n\n    Line m{a, b};\n    if (IntersectLS(l, m)) {\n      Point p = CrossPointLL(l, m);\n      left.emplace_back(p);\n      right.emplace_back(p);\n    }\n  }\n\n  return make_pair(left, right);\n}\n\nint n;\nvector<Point> ps;\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i=0; i<n; i++) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    ps.emplace_back(Point{x, y});\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n\n    Geometory ret = ContainsPoint(ps, {x, y});\n    if (ret == INSIDE) puts(\"2\");\n    else if (ret == ON_LINE) puts(\"1\");\n    else puts(\"0\");\n\n    reverse(ps.begin(), ps.end());\n    assert(ContainsPoint(ps, {x, y}) == ret);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "// InterestingLSY\n// 2659723130\n// 《幽灵公主》是真的好看！\n#include <bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define elif else if\n\n// Type\n#define ld double\n#define ll long long\n#define ull unsigned ll\n\n// Vector\n#define vc vector\n#define Pb push_back\n#define Pf push_front\n#define Eb emplace_back\n#define All(x) x.begin(),x.end()\n#define AllRev(x) x.rbegin(),x.rend()\n\n// Memory\n#define Ms(_data) memset(_data,0,sizeof(_data))\n#define Msn(_data,_num) memset(_data,_num,sizeof(_data))\n\n// Template\n#define _cl class\n#define _tp template\n#define _tyn typename\n\n// Pair\n#define Mp make_pair\n#define F first\n#define S second\n#define pii pair<int,int>\n#define pli pair<ll,int>\n#define pil pair<int,ll>\n#define pll pair<ll,ll>\n\n// Loop\n#define For(i,j) for( int (i) = 1 ; (i) <= (j) ; ++(i) )\n#define For0(i,j) for( int (i) = 0 ; (i) < (j) ; ++(i) )\n#define Forx(i,j,k) for( int (i) = (j) ; (i) <= (k) ; ++(i) )\n#define Forstep(i,j,k,st) for( int (i) = (j) ; (i) <= (k) ; (i) += (st) )\n#define fOR(i,j) for( int (i) = (j) ; (i) >= 1 ; --(i) )\n#define fOR0(i,j) for( int (i) = (j)-1 ; (i) >= 0 ; --(i) )\n#define fORx(i,j,k) for( int (i) = (k) ; (i) >= (j) ; --(i) )\n\n// Read\nstruct InputReader{\n\t#define bs 1048576\n\tchar buf[bs]; int p;\n\til InputReader(){ p = bs; }\n\til void Flush(){ p = 0; fread(buf,1,bs,stdin); }\n\til char C(){ if(p >= bs) Flush(); return buf[p++]; }\n\til char Readnum(){ char ch = C(); while( !isdigit(ch) && ch != '-' ) ch = C(); return ch; }\n\til void Readalpha( char &c ){ c = C(); while( !isalpha(c) ) c = C(); }\n\tint operator() (){\n\t\tint ans = 0, fu = 1; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10 + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\tll Readll(){\n\t\tll ans = 0LL, fu = 1LL; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1LL, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10LL + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\til void Readstring( string &x ){\n\t\tx.clear(); char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  &&  ch != '#'  &&  ch != '.' ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  ||  ch == '#'  ||  ch == '.' ){\n\t\t\tx += ch;\n\t\t\tch = C();\n\t\t}\n\t}\n\til void Readchstring( char s[] ){\n\t\tint len = 0; char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  /*&&  ch != '*'  &&  ch != '?'*/ ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  /*||  ch == '*'  ||  ch == '?'*/ ){\n\t\t\ts[len++] = ch;\n\t\t\tch = C();\n\t\t}\n\t\ts[len] = '\\0';\n\t}\n\til void Specialread( char &c ){\n\t\tc = C();\n\t\twhile( !isdigit(c) && !isalpha(c) && c != '#'  &&  c != '.'  &&  c != '='  &&  c != 'B' ) c = C();\n\t}\n\t#undef bs\n}In;\nil void Read( int &x ){ x = In(); }\nil void Read( int &x, int &y ){ x = In(); y = In(); }\nil void Read( int &x1 , int &x2 , int &x3 ){ x1 = In(); x2 = In(); x3 = In(); }\nil void Read( int &x1 , int &x2 , int &x3 , int &x4 ){ x1 = In(); x2 = In(); x3 = In(); x4 = In(); }\nil void Read( ll &x ){ x = In.Readll(); }\nil void Read( ll &x, ll &y ){ x = In.Readll(); y = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 , ll &x4 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); x4 = In.Readll(); }\n_tp<_tyn T> void Read( T a[] , int st , int ed ){ Forx(i,st,ed) Read(a[i]); }\n#define iRead(k) int k; Read(k);\n#define iRead2(a,b) iRead(a); iRead(b);\n#define iRead3(a,b,c) iRead2(a,b); iRead(c);\n#define iRead4(a,b,c,d) iRead2(a,b); iRead2(c,d);\n#define lRead(k) ll k; Read(k);\n#define lRead2(a,b) lRead(a); lRead(b);\n#define lRead3(a,b,c) lRead2(a,b); lRead(c);\n#define lRead4(a,b,c,d) lRead2(a,b); lRead2(c,d);\n\n// File\n#define Fin(a) freopen(a,\"r\",stdin)\n#define Fout(a) freopen(a,\"w\",stdout)\nil void FILEIO(){\n\t#ifdef intLSY\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO( string pname ){\n\t#ifndef intLSY\n\t\tFin((pname+\".in\").c_str());\n\t\tFout((pname+\".out\").c_str());\n\t#else\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO_OICONTEST( string pname ){\n\tFin((pname+\".in\").c_str());\n\t#ifndef intLSY\n\t\tFout((pname+\".out\").c_str());\n\t#endif\n}\nvoid Printtime(){\n\t#ifdef intLSY\n\t\tdouble _timeuse = clock()* 1000.0 / CLOCKS_PER_SEC;\n\t\tfprintf(stderr,\"\\n\\nTime usage:\\n%.0lf ms\\n\",_timeuse);\n\t#endif\n}\nvoid END(){ Printtime(); exit(0); }\n_tp<_tyn T>void END( T mes ){ cout << mes << endl; END(); }\n\n// Debug\n#define B cerr << \"BreakPoint\" << endl;\n#define O(x) cerr << #x << \" \" << x << endl;\n#define o(x) cerr << #x << \" \" << x << \"  \";\n#define Msz(x) cerr << \"Sizeof \" << #x << \" \" << sizeof(x)/1024/1024 << \" MB\" << endl;\n_tp<_tyn T>void Print( T a[] , int s , int t , char sp = ' ' , char ed = '\\n' ){\n\tif( s > t ) return;\n\tfor( int i = s ; i < t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << a[t] << ed;\n\tcout.flush();\n}\n_tp<_tyn T>void Print( T a , int s = 0 , int t = -1 , char sp = ' ' , char ed = '\\n' ){\n\tif( t == -1 ) t = a.size()-1;\n\tfor( int i = s ; i <= t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << ed;\n\tcout.flush();\n}\n\n// Optimize\n#define Max(a,b) ((a)>(b)?(a):(b))\n#define Min(a,b) ((a)<(b)?(a):(b))\n#define Mymax(a,b) (a) = max((a),(b))\n#define Mymin(a,b) (a) = min((a),(b))\n#define MyMax(a,b) (a) = Max((a),(b))\n#define MyMin(a,b) (a) = Min((a),(b))\n#define INF (0x3f3f3f3f)\n#define LINF ((long long)(0x3f3f3f3f3f3f3f3f))\n#define Sqr(x) ((x)*(x))\n#define Lowbit(a) ((a)&(-(a)))\nvc<int> Range( int l , int r ){\n\tvc<int> ret{};\n\tForx(i,l,r) ret.Pb(i);\n\treturn ret;\n}\nmt19937 Rand(0xe38195e38293*time(0));\t// さん\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n#undef ld\n#define ld long double\nconst ld Eps = 1e-10;\nstruct Point{ ld x,y; };\nil Point operator+( const Point &a , const Point &b ){ return {a.x+b.x,a.y+b.y}; }\nil Point operator-( const Point &a , const Point &b ){ return {a.x-b.x,a.y-b.y}; }\nil auto operator^( const Point &a , const Point &b ){ return a.x*b.x + a.y*b.y; }\nil auto operator*( const Point &a , const Point &b ){ return a.x*b.y - b.x*a.y; }\nil Point operator*( const Point &a , const ld &b ){ return {a.x*b,a.y*b}; }\nil bool operator==( const Point &a , const Point &b ){ return a.x == b.x and a.y == b.y; }\nil ld Dis( const Point &a , const Point &b ){ return sqrt((ld)Sqr(a.x-b.x)+Sqr(a.y-b.y)); }\nil ld Dis2( const Point &a , const Point &b ){ return Sqr(a.x-b.x)+Sqr(a.y-b.y); }\nil bool OnSeg( const Point &a , const Point &b , const Point &c ){\n\tPoint ab = b-a, ac = c-a;\n\tif( fabs(ab*ac) > Eps ) return 0;\n\tif( (ab^ac) < -Eps ) return 0;\n\tif( fabs(ab.y*ab.y+ab.x*ab.x) > fabs(ac.y*ac.y+ac.x*ac.x) ) return 0;\n\t// cout << a.x << \" \" << a.y << \"  \" << b.x << \" \" << b.y << \"  \" << c.x << \" \" << c.y << endl;\n\treturn 1;\n}\nbool Ins( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tif( p1 == p3 or p1 == p4 or p2 == p3 or p2 == p4 ) return 1;\n\tif( OnSeg(p1,p3,p2) or OnSeg(p1,p4,p2) or OnSeg(p3,p1,p4) or OnSeg(p3,p2,p4) ) return 1;\n\tif( ((p2-p1)*(p3-p1)<0) == ((p2-p1)*(p4-p1)<0) ) return 0;\n\tif( ((p4-p3)*(p1-p3)<0) == ((p4-p3)*(p2-p3)<0) ) return 0;\n\treturn 1;\n}\nPoint InsPoint( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tld d1 = (ld)abs((p2-p3)*(p3-p1)) / Dis(p1,p2);\n\tld d2 = (ld)abs((p2-p4)*(p4-p1)) / Dis(p1,p2);\n\tld ratio = d1 / (d1+d2);\n\treturn (p4-p3)*ratio + p3;\n}\nPoint H( Point a , Point b , Point p ){\n\tPoint ab = b-a;\n\tld dis2 = Dis2(a,b);\n\tPoint ret = a + ab * (((p-a)^ab)/dis2);\n\treturn ret;\n}\nld Distance( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tif(Ins(p1,p2,p3,p4)) return 0;\n\tld ans = min({ Dis(p1,p3) , Dis(p1,p4) , Dis(p2,p3) , Dis(p2,p4) });\n\tauto Check = [&]( Point a , Point b , Point p ){\n\t\tPoint h = H(a,b,p);\n\t\tif(!OnSeg(a,h,b)) return;\n\t\tld tans = Dis(h,p);\n\t\tMymin(ans,tans);\n\t};\n\tCheck(p1,p2,p3);\n\tCheck(p1,p2,p4);\n\tCheck(p3,p4,p1);\n\tCheck(p3,p4,p2);\n\treturn ans;\n}\n\nint n;\nvc<Point> a;\n\nint Query( Point p ){\n\tFor0(i,n){\n\t\tif(OnSeg(a[i],p,a[i+1])) return 1;\n\t}\n\twhile(1){\n\t\tPoint f = {(ld)Rand()/INT_MAX,(ld)Rand()/INT_MAX};\n\t\tbool fail = 0;\n\t\tFor0(i,n){\n\t\t\tif( fabs((a[i]-p)*f) < Eps ){\n\t\t\t\tfail = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(fail) continue;\n\t\tint past = 0;\n\t\tPoint lp2 = p+f*1000000;\n\t\tFor0(i,n){\n\t\t\tif(Ins(p,lp2,a[i],a[i+1])){\n\t\t\t\t++past;\n\t\t\t}\n\t\t}\n\t\tif(past&1) return 2;\n\t\treturn 0;\n\t}\n}\n\nint main(){\n\tFILEIO();\n\n\tRead(n);\n\tFor0(i,n){\n\t\tiRead2(x,y);\n\t\ta.Pb({(ld)x,(ld)y});\n\t}\n\ta.Pb(a[0]);\n\n\tiRead(q);\n\tFor(qi,q){\n\t\tiRead2(x,y);\n\t\tint ans = Query({(ld)x,(ld)y});\n\t\tcout << ans << endl;\n\t}\n\n\tEND();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cmath>\n#include<vector>\n#include<utility>\n#include<assert.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n    \n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(a * x, a * y); }\n    Point operator / (double a) {return Point(x / a, y / a); }\n    \n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; \n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a) {\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if ( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if ( cross(a, b) < -EPS ) return CLOCKWISE;\n    if ( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n    \n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool intersect(Circle c, Line l) {\n    return (getDistanceLP(l, c.c) - c.r) < EPS;\n}\n\nbool intersect(Circle c1, Circle c2) {\n    return (getDistance(c1.c, c2.c) - c1.r - c2.r) < EPS;\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nint contain(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for ( int i = 0; i < n; i++ ) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( abs(cross(a, b)) < EPS && dot(a, b) < EPS ) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nint main() {\n    int n, q;\n    double px, py, x, y;\n    Polygon P;\n    cin >> n;\n    for ( int i = 0; i < n; i++ ) {\n        cin >> px >> py;\n        P.push_back(Point(px, py));\n    }\n    cin >> q;\n    for ( int i = 0; i < q; i++ ) {\n        cin >> x >> y;\n        cout << contain(P, Point(x, y)) << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\n\nstruct point{\n    int x,y;\n};\n\nstruct line{\n    point s,t;\n};\nstruct bec{\n    int x,y;\n};\n\nint n,q;\npoint g[100];\n\nbool kousa(point p1,point p2,point t){\n    bec a,b;\n    a.x = p2.x-p1.x; a.y = p2.y-p1.y;\n    b.x = t.x-p1.x; b.y = t.y-p1.y;\n    double d1 = sqrt((double)a.x*(double)a.x + (double)a.y*(double)a.y), d2 = sqrt((double)b.x*(double)b.x + (double)b.y*(double)b.y);\n    if(d2==0) return true;\n    double c = ((double)a.x*(double)b.x+(double)a.y*(double)b.y)/(d1*d2);\n    int ga = a.x*b.y - a.y*b.x;\n    int na = a.x*b.x + a.y*b.y;\n    if(ga ==0 && na>0 && d1 > d2) return true;\n    else return false;\n}\n\nint kyori(point p,line l){\n    bec p1,p2,bl;\n    p1.x = p.x-l.s.x; p1.y=p.y-l.s.y;\n    p2.x = p.x-l.t.x; p2.y=p.y-l.t.y;\n    bl.x = l.t.x-l.s.x; bl.y = l.t.y-l.s.y;\n    double d1,d2,c;\n    int c2;\n    d1=sqrt((double)p1.x*(double)p1.x+(double)p1.y*(double)p1.y);\n    d2=sqrt((double)bl.x*(double)bl.x+(double)bl.y*(double)bl.y);\n    c= ((double)p1.x*(double)bl.x+(double)p1.y*(double)bl.y)/(d1*d2);\n    c2=(c*100000000000+0.0000000005)/100000000000;\n    if(d1==0||sqrt((double)p2.x*(double)p2.x+(double)p2.y*(double)p2.y)==0) return 1;\n    else if(c2==1 && d1<=d2) return 1;\n    else return 0;\n}\n\nint kou(line l,line m){\n    long ta,tb,tc,td;\n    ta=(m.s.x-m.t.x)*(l.s.y-m.s.y)+(m.s.y-m.t.y)*(m.s.x-l.s.x);\n    tb=(m.s.x-m.t.x)*(l.t.y-m.s.y)+(m.s.y-m.t.y)*(m.s.x-l.t.x);\n    tc=(l.s.x-l.t.x)*(m.s.y-l.s.y)+(l.s.y-l.t.y)*(l.s.x-m.s.x);\n    td=(l.s.x-l.t.x)*(m.t.y-l.s.y)+(l.s.y-l.t.y)*(l.s.x-m.t.x);\n    if(tc*td<0 && ta*tb<0){\n        return 1;\n    }\n    else{\n        if(kyori(l.s,m)==1||kyori(l.t,m)==1||kyori(m.s,l)==1||kyori(m.t,l)==1) return 1;\n        else return 0;\n\n    }\n\n}\n\n\nint solve(point t){\n    int k=0;\n    for(int i=0;i<n;i++){\n        if(i!=n-1){\n            if(kousa(g[i],g[i+1],t)) return 1;\n        }\n        else{\n            if(kousa(g[i],g[0],t)) return 1;\n        }\n    }\n\n    bec a,b;\n    point g1,g2;\n    for(int i=0;i<n;i++){\n        if(i!=n-1){\n            g1=g[i];\n            g2=g[i+1];\n        }\n        else{\n            g1=g[i];\n            g2=g[0];\n        }\n        if(g1.y>g2.y){\n            a.x = g2.x-t.x; a.y = g2.y-t.y;\n            b.x = g1.x-t.x; b.y = g1.y-t.y;\n        }\n        else{\n            a.x = g1.x-t.x; a.y = g1.y-t.y;\n            b.x = g2.x-t.x; b.y = g2.y-t.y;\n        }\n\n        long ga = a.x*b.y-a.y*b.x;\n\n        line l,m;\n        l.s = g1; l.t = g2;\n\n        m.s = t;\n        m.t.x = 10001;\n        m.t.y = t.y;\n\n        if(kou(l,m)==1 &&ga >0 && min(g1.y,g2.y)!= t.y) k++;\n\n    }\n\n    int ans =k%2;\n    if(ans==1) return 2;\n    else return 0;\n\n\n}\n\nint main(){\n    cin>>n;\n    int x,y;\n    for(int i=0;i<n;i++){\n        cin>>x>>y;\n        g[i].x = x;\n        g[i].y = y;\n    }\n\n    cin>>q;\n    for(int i=0;i<q;i++){\n        point t;\n        cin>>x>>y;\n        t.x = x;\n        t.y = y;\n        cout<<solve(t)<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\ntypedef vector<Point> Poly; \nconst double EPS = 1e-10;\n\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\nint in_poly(Poly p, Point x){\n    int n = p.size();\n    bool in = false;\n    for(int i = 0; i < n; i++){\n        Point a = p[i] - x, b = p[(i + 1) % n] - x;\n        if(imag(a) > imag(b)) swap(a, b);\n        if(imag(a) <= 0 && 0 < imag(b)){\n            if(cross(a, b) < 0) in = !in;\n        }\n        // 線上判定\n        if(cross(a, b) == 0 && dot(a, b) <= 0) return 2;\n    }\n    return in;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    Poly pl(n);\n    for(int i = 0; i < n; i++){\n        double x, y;\n        cin >> x >> y;\n        pl[i] = {x, y};\n    }\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        cin >> x >> y;\n        int res = in_poly(pl, {x, y});\n        if(res == 1) res++;\n        else if(res == 2) res--;\n        cout << res << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#define mem(a) memset(a, 0, sizeof a)\n#define Buff ios::sync_with_stdio(false)\nusing namespace std;\nconst int N = 1e5+7;\nconst double eps = 1e-6;\nint dcmp(double x)\n{\n    if(fabs(x) < eps)   return 0;\n    else                return x < 0 ? -1 : 1;\n}\n//直线，向量\nstruct Point\n{\n    double x;\n    double y;\n    Point(double x=0, double y=0):x(x), y(y) {}\n};\ntypedef Point Vector;\ndouble operator ^ (const Vector & v, const Vector & w)  {return v.x * w.y - v.y * w.x;}\ndouble operator * (const Vector & v, const Vector & w)  {return v.x * w.x + v.y * w.y;}\nVector operator - (const Vector & v, const Vector & w)  {return Vector(v.x - w.x, v.y - w.y);}\nbool OnSeg(Point O, Point A, Point B)                   {return !dcmp((A - O) ^ (B - O)) && dcmp((A - O) * (B - O)) <= 0;}\nint inPolygon(Point P, int n, Point* polygon)//点与多边形的位置关系\n{\n    int wn = 0;\n    for(int i = 0; i < n; i++)\n    {\n        Point P1 = polygon[i], P2 = polygon[(i + 1) % n];\n        if(OnSeg(P, P1, P2))    return 1;\n        int k = dcmp((P2 - P1) ^ (P - P1));\n        int d1 = dcmp(P1.y - P.y);\n        int d2 = dcmp(P2.y - P.y);\n        if(k > 0 && d1 <= 0 && d2 > 0)   wn++;\n        if(k < 0 && d2 <= 0 && d1 > 0)   wn--;\n    }\n    return (wn ? 2 : 0);\n}\nint n, m;\nPoint P, p[N];\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i ++)\n        scanf(\"%lf%lf\", &p[i].x, &p[i].y);\n    scanf(\"%d\", &m);\n    while(m --)\n    {\n        scanf(\"%lf %lf\", &P.x, &P.y);\n        printf(\"%d\\n\", inPolygon(P, n, p));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\n\nVector spin(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+spin(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+spin(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+spin(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  int q;\n  cin>>q;\n  while(q--){\n    Point r;\n    cin>>r;\n    cout<<contains(p,r)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( dot(b,c)/abs(b)/abs(c) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.5 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\t\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n \ntypedef pair<point,point> pp;\ntypedef vector<point> VP;\nconst point O{0,0};\n \nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble ip=IP(A,X),cp=CP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"Counter_Clockwise\";\n\t\tif(cp<-eps) return \"Clockwise\";\n\t\tif(ip<-eps) return \"Online_Back\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"On_Segment\";\n\t\treturn \"Online_Front\";\n\t}\n\tdouble Heron(point A,point B,point C){\n\t\tdouble a=Length(B,C),b=Length(C,A),c=Length(A,B),s=(a+b+c)/2;\n\t\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n\t}\n\tdouble Area(VP p){\n\t\tdouble sum=0,cp;\n\t\tp.push_back(p[0]);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end();i++){\n\t\t\tcp=CP(*(i-1),*i);\n\t\t\tif(cp>0) sum+=Heron(O,*(i-1),*i);\n\t\t\telse if(cp<0) sum-=Heron(O,*(i-1),*i);\n\t\t}\n\t\treturn sum;\n\t}\n\tstring Containment_polyon_point(VP p,point x){\n\t\tstring s;\n\t\tdouble cp;\n\t\tp.push_back(p[0]);\n\t\tp.push_back(p[1]);\n\t\tdouble sum,area=Area(p);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end()-1;i++){\n\t\t\ts=Counter_Clockwise(pp(*(i-1),*i),x);\n\t\t\tcp=CP(*i-*(i-1),*(i+1)-*(i-1));\n\t\t\tif(s[3]=='S') return \"On_side\";\n\t\t\tif(cp>0) sum+=Heron(x,*i,*(i+1));\n\t\t\telse sum-=Heron(x,*i,*(i+1));\n\t\t}\n\t\tif(fabs(sum-area)<eps) return \"Containment\";\n\t\treturn \"not_Containment\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n};\n\nint N,Q;\nVP p;\npoint q;\n\nint main(){\n\tGeom geo;\n\tcin>>N;\n\tp=VP(N);\n\tfor(VP::iterator i=p.begin();i!=p.end();i++) geo.Point_in(*i);\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tgeo.Point_in(q);\n\t\tstring s=geo.Containment_polyon_point(p,q);\n\t\tif(s==\"Containment\") cout<<2<<endl;\n\t\telse if(s==\"On_side\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a)*sdet(a,b,p))==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly po, PT a){\n\tint cn = 0;\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tcout << setprecision(1) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<long long>;\n\n\ntemplate<class P>\nbool onSegment(const P& s, const P& e, const P& p) {\n\tP ds = p-s, de = p-e;\n\treturn ds.cross(de) == 0 && ds.dot(de) <= 0;\n}\n\n\ntemplate<class It, class P>\nint insidePolygon(It begin, It end, const P& p) {\n\tint n = 0; //number of isects with line from p to (inf,p.y)\n\tfor (It i = begin, j = end-1; i != end; j = i++) {\n\t\t//if p is on edge of polygon\n\t\tif (onSegment(*i, *j, p)) return 1;\n\t\t//or: if (segDist(*i, *j, p) <= epsilon) return !strict;\n\t\t//increment n if segment intersects line from p\n\t\tn += (max(i->y,j->y) > p.y && min(i->y,j->y) <= p.y &&\n\t\t\t\t((*j-*i).cross(p-*i) > 0) == (i->y <= p.y));\n\t}\n\treturn 2*(n&1); //inside if odd number of intersections\n}\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\tint n;\n\tcin >> n;\n\tvector<P> a(n);\n\tfor(int i = 0; i < n; i++){\n\t\tcin >> a[i].x >> a[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tcout << insidePolygon(a.begin(), a.end(), p) << '\\n';\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#include <vector>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble norm(Vector a) {\n\treturn a.norm();\n}\n\ndouble abs(Vector a) {\n\treturn a.abs();\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn project(s, p)*2.0 - p;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\tint p1p2p3, p1p2p4, p3p4p1, p3p4p2;\n\tp1p2p3 = ccw(p1, p2, p3);\n\tp1p2p4 = ccw(p1, p2, p4);\n\tp3p4p1 = ccw(p3, p4, p1);\n\tp3p4p2 = ccw(p3, p4, p2);\n\n\tif (p1p2p3 == ON_SEGMENT) return true;\n\tif (p1p2p4 == ON_SEGMENT) return true;\n\tif (p3p4p1 == ON_SEGMENT) return true;\n\tif (p3p4p2 == ON_SEGMENT) return true;\n\tif (p1p2p3 == ONLINE_FRONT && p1p2p4 == ONLINE_BACK) return true;\n\tif (p1p2p3 == ONLINE_BACK && p1p2p4 == ONLINE_FRONT) return true;\n\tif (p1p2p3 == COUNTER_CLOCKWISE && p1p2p4 == CLOCKWISE && p3p4p1 == CLOCKWISE && p3p4p2 == COUNTER_CLOCKWISE) return true;\n\tif (p1p2p3 == CLOCKWISE && p1p2p4 == COUNTER_CLOCKWISE && p3p4p1 == COUNTER_CLOCKWISE && p3p4p2 == CLOCKWISE) return true;\n\treturn false;\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool intersect(Circle c, Line l) {\n\treturn (project(l, c.c) - c.c).norm() <= c.r*c.r;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\nVector rotate90(Vector v) {\n\tVector w;\n\tw.x = -v.y; w.y = v.x;\n\treturn w;\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tVector v = c1.c - c2.c;\n\tVector w = rotate90(v);\n\tdouble d = v.abs();\n\tdouble x = 0.5*(c2.r*c2.r - c1.r*c1.r + d*d) / d;\n\tdouble y = sqrt(c2.r*c2.r - x*x);\n\tVector v1, v2;\n\tv1 = c2.c + v*(x / d);\n\tv2 = w*(y / w.abs());\n\treturn make_pair(v1 + v2, v1 - v2);\n}\n\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < -EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < -EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\n\nint main() {\n\tPolygon g;\n\tPoint p;\n\tint n;\n\tcin >> n;\n\tg.resize(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> g[i].x >> g[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tcout << contains(g, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-5;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  double res=acos( max(-1.0min(1.0,dot(b,c)/abs(b)/abs(c))) );\n  if(cross(b,c)<0)res*=-1.0;\n  return res;\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < 0.5 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ld = long double;\nconst ld eps = 1e-10, pi = acos(-1.0);\n\nbool eq(ld a, ld b) {\n\treturn abs(a - b) < eps;\n}\n\nusing point = complex<ld>;\n\nld dot(point a, point b) {\n\treturn real(conj(a) * b);\n}\n\nld cross(point a, point b) {\n\treturn imag(conj(a) * b);\n}\n\nint ccw(point a, point b, point c) {\n\tb -= a, c -= a;\n\tif (cross(b, c) > eps) return 1;\t// a,b,c counter-clockwise\n\tif (cross(b, c) < -eps) return -1;\t// a,b,c clockwise\n\tif (dot(b, c) < 0) return 2;\t\t// c,a,b on a line\n\tif (norm(b) < norm(c)) return -2;\t// a,b,c on a line\n\treturn 0;\t\t\t\t\t\t\t// a,c,b on a line\n}\n\nstruct line {\n\tpoint a, b;\n\tline() : a(), b() {}\n\tline(const point& a_, const point &b_)\n\t\t: a(a_), b(b_) {}\n};\n\nbool isis_ll(line l, line m) {\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > eps;\n}\n\nbool isis_ls(line l, line s) {\n\treturn (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\nbool isis_lp(line l, point p) {\n\treturn abs(cross(l.b - p, l.a - p)) < eps;\n}\n\nbool isis_sp(line s, point p) {\n\treturn std::abs(s.a - p) + std::abs(s.b - p) - std::abs(s.b - s.a) < eps;\n}\n\npoint proj(line l, point p) {\n\tld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n\treturn l.a + t * (l.a - l.b);\n}\n\npoint is_ll(line s, line t) {\n\tpoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n\nbool isis_ss(line s, line t) {\n\tif (isis_ll(s, t)) return isis_ls(s, t) && isis_ls(t, s);\n\treturn isis_sp(s, t.a) || isis_sp(s, t.b) || isis_sp(t, s.a);\n}\n\nld dist_lp(line l, point p) {\n\treturn abs(p - proj(l, p));\n}\n\nld dist_ll(line l, line m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(line l, line s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(line s, point p) {\n\tpoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(line s, line t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\nint is_in_polygon(const vector<point>& poly, point p) {\n\tconst int n = poly.size();\n\tld sum = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tpoint p1 = poly[i], p2 = poly[(i + 1) % n];\n\t\tif (isis_sp(line(p1, p2), p)) {\n\t\t\treturn 1;\n\t\t}\n\t\tsum += arg((p2 - p) / (p1 - p));\n\t}\n\treturn std::abs(sum) < pi / 2 ? 0 : 2;\n}\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\tvector<point> ps;\n\tfor (int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tps.emplace_back(x, y);\n\t}\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpoint p(x, y);\n\t\tcout << is_in_polygon(ps, p) << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint n, q, xp, yp, r;\n\tint x[101], y[101];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> x[i] >> y[i];\n\n\tx[n] = x[0];\n\ty[n] = y[0];\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> xp >> yp;\n\n\t\tr = 2;\n\t\tint t = 0;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif ((x[i] - xp) * (x[i + 1] - xp) <= 0 &&\n\t\t\t\t(y[i] - yp) * (y[i + 1] - yp) <= 0 &&\n\t\t\t\t(x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) == 0) {\n\t\t\t\tr = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if ((x[0] - xp) * (y[i] - yp) - (x[i] - xp) * (y[0] - yp) >= 0 &&\n\t\t\t\t(x[i + 1] - xp) * (y[0] - yp) - (x[0] - xp) * (y[i + 1] - yp) >= 0) {\n\t\t\t\tif ((x[i] - xp) * (y[i + 1] - yp) - (x[i + 1] - xp) * (y[i] - yp) > 0)\n\t\t\t\t\tt++;\n\t\t\t\telse\n\t\t\t\t\tt--;\n\t\t\t}\n\t\t}\n\t\tif (r != 1 && t <= 0)\n\t\t\tr = 0;\n\n\t\tcout << r << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n};\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << poly.Contain(p) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\ntemplate<typename T> T pmod(T v,T M){return (v%M+M)%M;}\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    int sig(D a,D b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    bool eq(D a,D b){ return sig(abs(a-b))==0;}\n\n}\nusing namespace _double_tmpl;\nnamespace Ps{\n    // using namespace _double_tmpl;\n    typedef complex<D> P,Vec;\n\n#define X real()\n#define Y imag()\n    istream& operator >> (istream& is,complex<D>& p){\n        D x,y;is >> x >> y;p=P(x,y);return is;\n    }\n\n    bool eq(P a,P b){return eq(a.X,b.X) and eq(a.Y,b.Y);}\n    // a×b\n    D cross(const Vec& a,const Vec& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const Vec&a,const Vec& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }\n}\nusing namespace Ps;\n\nnamespace Polys{\n    typedef vector<P> Poly,ConvexPoly;\n   \n    enum { OUT, ON, IN };\n    int contains(const Poly& ps, const P& p) {\n        bool in = false;int n=ps.size();\n        REP(i,n){\n            P a = ps[i] - p, b = ps[pmod(i+1,n)] - p;\n            if (a.Y > b.Y) swap(a, b);\n            if (a.Y <= 0 && 0 < b.Y)\n            if (cross(a, b) < 0) in = !in;\n                if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n        }\n        return in ? IN : OUT;\n    }\n}\nusing namespace Polys;\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        int n;cin >> n;\n        Poly poly;\n        REP(i,n) {\n            P p;cin >> p;\n            poly.push_back(p);\n        }\n        int q;cin >> q;\n        REP(i,q){\n            P p;cin >> p;\n            if(contains(poly,p)==IN){\n                cout << 2<<endl;\n            }else if(contains(poly,p)==ON){\n                cout << 1<<endl;\n            }else{\n                cout << 0 <<endl;\n            }\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<numeric>\n\n#include<algorithm>\n#include<array>\n#include<cassert>\n#include<cmath>\n#include<vector>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define dump(a) (cerr << #a << \"=\" << (a) << endl)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl;\n\nusing namespace std;\n\ntypedef double Real;\nconst Real EPS = 1e-8;\nint sign(Real d) { return d > EPS ? 1 : d < -EPS ? -1 : 0; }\n\n//define class ...\n\nstruct Point {\n\tReal x, y;\n\texplicit Point(Real x_ = 0, Real y_ = 0):x(x_), y(y_) {}\n\tPoint operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(Real s) const { return Point(x * s, y * s); }\n\tPoint operator/(Real s) const { return Point(x / s, y / s); }\n\tbool operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x) == 0 && sign(y - p.y) == -1);\n\t}\n\tbool operator==(const Point &p) const {\n\t\treturn sign(x - p.x) == 0 && sign(y - p.y) == 0;\n\t}\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n// define function\nPoint rotate90(const Point &p) { // ???????¨???¨???\n\treturn Point(-p.y, p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n\treturn sign( cross(a[1] - a[0], b[1] - b[0]) ) == 0;\n} \n\n// define app function\nenum { CCW = 1, CW = -1, BACK = 2, FRONT = -2, ON = 0};\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n\tconst Point p = b - a;\n\tconst Point q = c - a;\n\tconst Real crs = cross(p, q); \n\t\n\tif(sign(crs) == 1) return CCW;\n\tif(sign(crs) == -1) return CW;\n\tif(sign(dot(p, q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l, const Point &p) {\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a, b) / norm(b));\n}\n\nPoint reflect(const Line &l, const Point &p) {\n\tconst Point t = project(l, p);\n\treturn t + (t - p);\n}\n\nbool intersect(const Segment &s, const Point &p) {\n\treturn ccw(s[0], s[1], p) == ON;\n}\n\nbool intersect(const Segment &a, const Segment &b) {\n\treturn ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) <= 0\n\t\t\t&& ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p) {\n\treturn abs(ccw(l[0], l[1], p)) != 1;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n\treturn sign(cross(l[1] - l[0], s[0] - l[0]) * cross(l[1] - l[0], s[1] - l[0])) <= 0; \n}\n\nbool intersect(const Line &a, const Line &b) {\n\treturn sign(cross(a[1] - a[0], b[1] - b[0])) != 0\n\t\t\t|| sign(cross(a[1] - a[0], b[1] - a[0])) == 0;\n}\n\nReal dist(const Point &a, const Point &b) {\n\treturn abs(a - b);\n}\n\nReal dist(const Line &l, const Point &p) {\n\tconst Point a = l[1] - l[0];\n\tconst Point b = p - l[0];\t\n\treturn abs(cross(a, b)) / abs(a);\n}\n\nReal dist(const Line &l, const Segment &s) {\n\tif(intersect(l, s)) return 0;\n\treturn min(dist(l, s[0]), dist(l, s[1]));\n}\n\nReal dist(const Line &a, const Line & b) {\n\tif(intersect(a, b)) return 0;\n\treturn dist(a, b[0]);\n}\n\nReal dist(const Segment &s, const Point &p) {\n\tif(sign(dot(s[1] - s[0], p - s[0])) == -1) return dist(s[0], p);\n\tif(sign(dot(s[0] - s[1], p - s[1])) == -1) return dist(s[1], p);\n\treturn dist(Line(s[0], s[1]), p);\n}\n\nReal dist(const Segment &a, const Segment &b) {\n\tif(intersect(a, b)) return 0;\n\treturn min({dist(a, b[0]), dist(a, b[1]), dist(b, a[0]), dist(b, a[1])});\t\n}\n\nbool intersect(const Circle &a, const Circle &b) {\n\treturn sign(dist(a.c, b.c) - (a.r + b.r)) <= 0\n\t\t&& sign(dist(a.c, b.c) - abs(a.r - b.r)) >= 0;\n}\n\nbool intersect(const Circle &c, const Segment &s) {\n\treturn sign(dist(s, c.c) - c.r) <= 0;\n}\n\nbool intersect(const Circle &c, const Line &l) {\n\treturn sign(dist(l, c.c) - c.r) <= 0;\n}\n\nbool contain(const Circle &c, const Point &p) {\n\treturn sign(dist(c.c, p) - c.r) <= 0;\n}\n\nint contain(const Polygon &P, const Point &p) {\n\tbool res = 0;\n\tfor(int i = 0; i < P.size(); ++i) {\n\t\tPoint v1 = P[i] - p;\n\t\tPoint v2 = P[(i + 1) % P.size()] - p;\n\t\tif(v1.y > v2.y) swap(v1, v2);\n\n\t\tif(sign(cross(v1, v2)) == 0 && sign(dot(v1, v2)) <= 0) {\n\t\t\treturn 1; //on edge\n\t\t}\n\t\tif(sign(v1.y) <= 0 && sign(v2.y) == 1 && sign(cross(v1, v2)) == 1) {\n\t\t\tres = !res;\n\t\t}\n\t}\n\treturn (res ? 2 : 0);\n}\n\nPoint crosspoint(const Line &a, const Line &b) {\n\tassert(intersect(a, b));\n\tconst Real crs = cross(a[1] - a[0], b[1] - b[0]);\t\n\tif(sign(crs) == 0) return a[0];\t// same line\n\treturn b[0] + (b[1] - b[0]) * (cross(a[1] - a[0], a[1] - b[0]) / crs);\n}\n\n// ???????????????????????¨?????°????????§???????????????intersect????????????\nPoint crosspoint(const Segment &a, const Segment &b) {\n\tassert(intersect(a, b));\n\tconst Real crs = cross(a[1] - a[0], b[1] - b[0]);\t\n\tif(sign(crs) == 0) { //on same line\n\t\tif(intersect(a, b[0])) return b[0];\n\t\tif(intersect(a, b[1])) return b[1];\n\t\tif(intersect(b, a[0])) return a[0];\n\t\treturn a[1];\n\t}\n\treturn b[0] + (b[1] - b[0]) * (cross(a[1] - a[0], a[1] - b[0]) / crs);\n}\n\nvector<Point> crosspoint(const Circle &c, const Line &l) {\n\tconst Point p = project(l, c.c);\n\tconst Real h = dist(p, c.c);\n\n\tvector<Point> res;\n\tif(sign(h - c.r) == 1) {\n\t\t// nothing\n\t}\n\telse if(sign(h - c.r) == 0) {\n\t\tres.emplace_back(p);\n\t}\n\telse {\n\t\tconst Real b = sqrt(c.r * c.r - h * h);\n\t\tconst Point e = (l[1] - l[0]) / abs(l[1] - l[0]);\n\t\tres.emplace_back(p + e * b);\n\t\tres.emplace_back(p - e * b);\n\t}\n\treturn res;\n}\n\nvector<Point> crosspoint(const Circle &c, const Segment &s) {\n\tvector<Point> res;\n\tfor(const Point &p : crosspoint(c, Line(s[0], s[1]))) {\n\t\tif(intersect(s, p)) res.emplace_back(p);\n\t}\n\treturn res;\n}\n\nvector<Point> crosspoint(const Circle &a, const Circle &b) {\n\tif(!intersect(a, b)) return vector<Point>();\n\tvector<Point> res;\n\tconst Real d = dist(a.c, b.c);\n\n\tif(sign(d - (a.r - b.r)) == 0) {\n\t\tconst Point v = b.c - a.c;\n\t\tres.emplace_back(a.c + (v * (a.r / abs(v))));\n\t}\n\telse {\n\t\tconst Real theta = acos((a.r * a.r + d * d - b.r * b.r) / (2 * a.r * d));\n\t\tconst Real phi = angle(b.c - a.c);\n\t\tres.emplace_back(a.c + rotate(Point(a.r, 0), phi + theta));\n\t\tres.emplace_back(a.c + rotate(Point(a.r, 0), phi - theta));\n\t}\n\treturn res;\n}\n\nint main() {\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tint n;\t\n\tcin >> n;\n\tPolygon P = Polygon(n);\n\tPoint p;\t\n\trep(i, n) cin >> P[i];\n\t\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tcin >> p;\t\n\t\tint ans = contain(P, p);\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath?????¢??°??????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n\n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//??????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n\nR dot(Point a,Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n\n\n\nbool is_orthogonal(Line a,Line b){//2??´????????´?????????\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2??´??????????????????\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n\n\n\n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b??§???????¨???¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b??§????¨???¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n\nbool is_intersection_ll(Line l,Line m){//???????????´??????????????????\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n\nbool is_intersection_ls(Line l,Line s){//??´???l??¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n\nbool is_intersection_lp(Line l,Point p){//??´???l??¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n\nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n\nbool is_intersection_sp(Line s,Point p){//????????¨?????????????????? ????§??????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n\n/////////////?????¢\nR dis_lp(Line l,Point p){//??´???l??¨???p????????¢\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n\nR dis_ll(Line l,Line m){//???????????´???????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n\nR dis_ls(Line l,Line s){//??´???l??¨??????s????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n\nR dis_sp(Line s,Point p){//??????s??¨???p????????¢\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n\nR dis_ss(Line s,Line t){//???????????????????????¢\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n\n\n\n//////////////?°???±??¨????°?\nPoint projection(Line l,Point p){//?°???±????±???????\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n\nPoint reflection(Line l,Point p){//????°?????±???????\n    return p + 2.0 * (projection(l,p) - p);\n}\n\n\n\n\n//////////////??????(????????????????¨???????????????¨??????????????????????????????????????£??????)\n\nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n\nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n\n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ??§???????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ????????????????????????????????????????????¨?????§???????????? C ????????°????????§??????sqrt ????????? double ??????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n\n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n\n    return p;\n}\n\n/*\nLine conver_line(Line a,Point maxi,Point mini){//??????????????´??????????????? maxi???????????????????????? mini?????????\n\n    if(abs(dot(a.sd - a.ft,Point(1.0,0.0))) < EPS){//??????x???????????´??????\n        ;\n    }\n}*/\n\n\n/////////////////////////polygon\n\n#define currP(P,i) P[i]//????????????\n#define nextP(P,i) P[(i + 1)%P.size()]//?¬??????????\n\nint is_contains_p_in_Poly(Poly po,Point p){//??????????§???¢????????¨(1)????¢????(-1)????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && -EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(abs(cross(a,b)) == 0.0 && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n\nR area2(Poly po){//????§???¢?????¢????????????????±???????\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n\n\n\n\n///////////////////////////???\n\nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n\nint main(void){\n    int n;\n    Poly po;\n    cin >> n;\n    REP(i,n){\n        int x,y;\n        cin >> x >> y;\n        Point p = Point(x,y);\n        po.pb(p);\n    }\n    int q;\n    cin >> q;\n    REP(i,q){\n        int x,y;\n        cin >> x >> y;\n        int a = is_contains_p_in_Poly(po,Point(x,y));\n        if(a == 1)\n            printf(\"2\\n\");\n        else if(a == -1)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS 1e-10\n\nstruct Point{\n    double x,y;\n\n    Point(){}\n    Point(double x,double y) : x(x),y(y) {}\n\n    Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble norm(const Point &p){ return dot(p,p); }\n\n#define prev(G,i) (G[(i-1+G.size())%G.size()])\n#define curr(G,i) (G[i%G.size()])\n#define next(G,i) (G[(i+1)%G.size()])\n\ntypedef vector<Point> Polygon;\n\nint containPP(const Polygon &pg,const Point &p){\n    int N = pg.size();\n    bool in = false;\n    for(int i = 0 ; i < N ; i++){\n        Point a = curr(pg,i)-p, b = next(pg,i)-p;\n        if(a.y > b.y) swap(a,b);\n        if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n        if(cross(a,b) == 0 && dot(a,b) <= 0) return 1;\n    }\n    return (in ? 2 : 0); \n}\n\n\nint main(){\n    int N,Q;\n    cin >> N;\n    Polygon pg(N);\n    for(int i = 0 ; i < N ; i++){\n        cin >> pg[i].x >> pg[i].y;\n    }\n    cin >> Q;\n    while(Q--){\n        Point p;\n        cin >> p.x >> p.y;\n        cout << containPP(pg,p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <ctime>\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\n#include <random>\n#include <regex>\n\nusing namespace std;\ntypedef long long ll;\n\n#define ALL(c) (c).begin(),(c).end()\n#define FOR(i,l,r) for(int i=(int)l;i<(int)r;++i)\n#define REP(i,n) FOR(i,0,n)\n#define FORr(i,l,r) for(int i=(int)r-1;i>=(int)l;--i)\n#define REPr(i,n) FORr(i,0,n)\n#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n#define UNIQUE(v) v.erase(unique(ALL(v)),v.end())\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n\ntemplate<typename T,typename U> T pmod(T x,U M){return (x%M+M)%M;}\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\ntemplate<typename T> T pmod(T v,T M){return (v%M+M)%M;}\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    int sig(D a,D b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    bool eq(D a,D b){ return sig(abs(a-b))==0;}\n\n}\nusing namespace _double_tmpl;\nnamespace Ps{\n    // using namespace _double_tmpl;\n    typedef complex<D> P,Vec;\n\n#define X real()\n#define Y imag()\n    istream& operator >> (istream& is,complex<D>& p){\n        D x,y;is >> x >> y;p=P(x,y);return is;\n    }\n\n    bool eq(P a,P b){return eq(a.X,b.X) and eq(a.Y,b.Y);}\n    // a×b\n    D cross(const Vec& a,const Vec& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const Vec&a,const Vec& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }\n}\nusing namespace Ps;\n\nnamespace Polys{\n    typedef vector<P> Poly,ConvexPoly;\n   \n    enum { OUT, ON, IN };\n    int contains(const Poly& ps, const P& p) {\n        bool in = false;\n        REP(i,ps.size()){\n            P a = ps[i] - p, b = ps[pmod(i+1,ps.size())] - p;\n            if (a.Y > b.Y) swap(a, b);\n            if (a.Y <= 0 && 0 < b.Y)\n            if (cross(a, b) < 0) in = !in;\n                if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n        }\n        return in ? IN : OUT;\n    }\n}\nusing namespace Polys;\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        int n;cin >> n;\n        Poly poly;\n        REP(i,n) {\n            P p;cin >> p;\n            poly.push_back(p);\n        }\n        int q;cin >> q;\n        REP(i,q){\n            P p;cin >> p;\n            if(contains(poly,p)==IN){\n                cout << 2<<endl;\n            }else if(contains(poly,p)==ON){\n                cout << 1<<endl;\n            }else{\n                cout << 0 <<endl;\n            }\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for (int i = 0; i < (n); i ++)\nusing namespace std;\nusing ll = long long;\nusing PL = pair<ll,ll>;\nusing P = pair<int,int>;\nconstexpr int INF = 1000000000;\nconstexpr long long HINF = 1000000000000000;\nconstexpr long long MOD = 1000000007;\nconstexpr double EPS = 1e-9;\nconstexpr double PI = 3.14159265358979;\n\n/* geometry libarary */\n\n// a > 0 : +1, a == 0 : 0, a < 0 : -1\nint sgn(const double a) {return (a < - EPS ? -1: (a > EPS ? 1: 0));}\n\n/* 2d Point class */\nstruct Point {\n    double x,y;\n    constexpr Point(double x = 0.0,double y = 0.0) :x(x),y(y) {}\n\n    Point operator+() const {return *this;}\n    Point operator-() const {return Point(-x,-y);}\n\n    constexpr Point &operator+=(const Point &q) {x += q.x;y += q.y;return *this;}\n    constexpr Point &operator-=(const Point &q) {x -= q.x;y -= q.y;return *this;}\n    constexpr Point &operator*=(double a) {x *= a;y *= a;return *this;}\n    constexpr Point &operator/=(double a) {x /= a;y /= a;return *this;}\n    \n    constexpr Point operator+(const Point &q) const {return Point(*this) += q;}\n    constexpr Point operator-(const Point &q) const {return Point(*this) -= q;}\n    constexpr Point operator*(double a) const  {return Point(*this) *= a;}\n    constexpr Point operator/(double a) const {return Point(*this) /= a;}\n\n    inline bool operator<(const Point&q) const {return (sgn(x - q.x) != 0 ? sgn(x - q.x) < 0 : sgn(y - q.y) < 0);}\n    inline bool operator>(const Point&q) const {return (sgn(x - q.x) != 0 ? sgn(x - q.x) > 0 : sgn(y - q.y) > 0);}\n    inline bool operator==(const Point&q) const {return (sgn(x - q.x) == 0 && sgn(y - q.y) == 0);}\n\n    friend ostream& operator<<(ostream& os,const Point &p) {return os << '(' << p.x << \", \" << p.y << ')';}\n    friend istream& operator>>(istream& is,Point &p) {return is >> p.x >> p.y;}\n};\n\nconstexpr double dot(const Point &p,const Point &q) {return p.x * q.x + p.y * q.y;}\nconstexpr double cross(const Point &p,const Point &q) {return p.x * q.y - q.x * p.y;}\nconstexpr double norm(const Point &p) {return dot(p,p);}\ninline double length(const Point &p) {return sqrt(norm(p));}\ninline double dist(const Point &p,const Point &q) {return length(p - q);}\nconstexpr double sgn_area(const Point &p,const Point &q,const Point &r) {return cross(q - p,r - p)/2.0;}\nconstexpr double area(const Point &p,const Point &q,const Point &r) {return abs(sgn_area(p,q,r));}\ninline Point normalized(const Point &p) {Point x = p/length(p);return x;}\ninline Point rotation(const Point &p,double arg) {return Point(cos(arg) * p.x - sin(arg) * p.y,sin(arg) * p.x + cos(arg) * p.y);}\ninline double angle(const Point &p) {return atan2(p.y,p.x);}\n\nint iSP(const Point &a,const Point &b,const Point &c) { \n    if (sgn(cross(c - b,a - b)) > 0) return 1; //ab bc __/: +1\n    if (sgn(cross(c - b,a - b)) < 0) return -1;//ab bc --\\: -1\n    if (sgn(dot(a - b,c - b)) < 0) return 2;   //abc   ---: +2\n    if (sgn(dot(a - c,b - c)) < 0) return -2;  //acb   ---: -2\n    return 0;                                  //bac   ---:  0\n}\n//error point: changed depending on the problem\nconst Point error_point(INF,INF);\n\n/* 2d Line(or Segment or Ray) class */\n//2d Line class\nstruct Line {\n    Point begin,end;\n    constexpr Line(const Point &begin = Point(0.0,0.0),const Point &end = Point(0.0,0.0)):begin(begin),end(end) {}\n    constexpr Point vec() const {return end - begin;}\n};\nusing Segment = Line;\nusing Ray = Line;\n\nPoint ll_Intersection(const Line &l1,const Line &l2) {\n    if (sgn(cross(l1.vec(),l2.vec())) == 0) return error_point;                               //parallel or partially matched\n    return l1.begin + l1.vec() * cross(l2.vec(),l2.begin - l1.begin)/cross(l2.vec(),l1.vec());//Intersection\n}\nPoint ss_Intersection(const Segment &s1,const Segment &s2) {return ll_Intersection(s1,s2);}\nbool ss_isIntersect(const Segment &s1,const Segment &s2) {\n    if (iSP(s2.begin,s1.begin,s1.end)*iSP(s2.end,s1.begin,s1.end) <= 0 && iSP(s1.begin,s2.begin,s2.end)*iSP(s1.end,s2.begin,s2.end) <= 0) return true;\n    return false;\n}\nbool sr_isIntersect(const Segment &s,const Ray &r) {\n    Point ret = ll_Intersection(s,r);\n    if (ret == error_point) return false;\n    //cout << ret << r.begin << r.end << s.begin << s.end << '\\n';\n    Point sv1 = s.begin - ret,sv2 = s.end - ret;\n    Point rv1 = ret - r.begin,rv2 = r.end - r.begin;\n    //printf(\"dot: %lf %lf\\n\",dot(sv1,sv2),dot(rv1,rv2));\n    if (sgn(dot(sv1,sv2)) <= 0 && sgn(dot(rv1,rv2)) > 0) return true;\n    return false; \n}\nbool s_isOn(const Point &p,const Segment &s) {return iSP(p,s.begin,s.end) == 0;}\ndouble pl_distance(const Point &p,const Line &l) {return abs(cross(l.vec(),p - l.begin)/length(l.vec()));}\ndouble ps_distance(const Point &p,const Segment &s) {return min({length(p - s.begin),length(p - s.end),pl_distance(p,s)});}\nPoint proj(const Point &p,const Line &l) {return l.begin + normalized(l.vec())*(dot(l.vec(),p - l.begin)/length(l.vec()));}\nPoint reflection(const Point &p,const Line &l) {return proj(p,l)*2 - p;}\n\nint main() {\n    int N; cin >> N;\n    vector<Point> P(N);\n    vector<Segment> poly(N);\n    rep(i,N) cin >> P[i];\n    rep(i,N) {\n        if (i == N - 1) poly[i] = Segment(P[i],P[0]);\n        else poly[i] = Segment(P[i],P[i + 1]);\n    }\n\n    int Q,flag; cin >> Q;\n    Point p,q1(109,429),q2(-20,421),q3(-1,-100);\n    rep(i,Q) {\n        flag = -1;\n        cin >> p;\n        Ray r1(p,q1),r2(p,q2),r3(p,q3);\n        int cnt1 = 0,cnt2 = 0,cnt3 = 0;\n        rep(j,N) {\n            if (sr_isIntersect(poly[j],r1)) {++cnt1;}\n            if (sr_isIntersect(poly[j],r2)) {++cnt2;}\n            if (sr_isIntersect(poly[j],r3)) {++cnt3;}\n        }\n        rep(j,N) {\n            if (s_isOn(p,poly[j])) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag >= 0) cout << 1 << '\\n';\n        else {\n            int z = 0;\n            z += (cnt1%2 == 0);\n            z += (cnt2%2 == 0);\n            z += (cnt3%2 == 0);\n            if (z >= 2) cout << 0 << '\\n';\n            else cout << 2 << '\\n';  \n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tint type = 2;\n\t\tfor (int k = 0; k < n; k++)\n\t\t{\n\t\t\tOwnVector2 v1, v2;\n\t\t\tv1 = vertices[k] - p;\n\t\t\tv2 = vertices[(k + 1) % n] - p;\n\t\t\tdouble cross = v1.cross(v2);\n\t\t\tdouble dot = v1.dot(v2);\n\t\t\tif ((v1.length2<=0.00000000000001||v2.length2<=0.00000000001)||(abs(cross) <= 0.000000000000001&&dot<0))\n\t\t\t{\n\t\t\t\ttype = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (cross < 0)\n\t\t\t{\n\t\t\t\ttype = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\", type);\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// C++ 14\n#include <math.h>\n#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <string>\n\n#define ll long long\n#define Int ll\n#define loop(x, start, end) for(Int x = start; x < end; x++)\n#define loopdown(x, start, end) for(int x = start; x > end; x--)\n#define span(a,x,y) a.begin()+x,a.begin()+y\n#define span_all(a) a.begin(),a.end()\n#define len(x) (x.size())\n#define last(x) (*(x.end()-1))\n\nusing namespace std;\n\n#define EPS 0.00000001\n#define fequals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Vector2 {\npublic:\n  double x, y;\n  \n  Vector2(double x = 0, double y = 0): x(x), y(y) {}\n  \n  Vector2 operator + (const Vector2 v) const { return Vector2(x + v.x, y + v.y); }\n  Vector2 operator - (const Vector2 v) const { return Vector2(x - v.x, y - v.y); }\n  Vector2 operator * (const double k) const { return Vector2(x * k, y * k); }\n  Vector2 operator / (const double k) const { return Vector2(x / k, y / k); }\n  \n  double length() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n  double dot (Vector2 const v) { return x * v.x + y * v.y; }\n  double cross (Vector2 const v) { return x * v.y - y * v.x; }\n  \n  bool parallel(Vector2 &other) {\n    return fequals(fabs(dot(other)), length() * other.length());\n  }\n  \n  bool orthogonal(Vector2 &other) {\n    return fequals(0, dot(other));\n  }\n  \n  bool operator < (const Vector2 &v) {\n    return x != v.x ? x < v.x : y < v.y;\n  }\n  \n  bool operator == (const Vector2 &v) {\n    return fabs(x - v.x) < EPS && fabs(y - v.y) < EPS;\n  }\n};\n\nostream & operator << (ostream & out, Vector2 const & v) { \n  out<< \"Vector2(\" << v.x << \", \" << v.y << ')';\n  return out;\n}\n\nistream & operator >> (istream & in, Vector2 & v) { \n  double x, y;\n  in >> x;\n  in >> y;\n  v.x = x;\n  v.y = y;\n  return in;\n}\n\n#define MAX_N 101\n#define MAX_Q 1001\nInt N, Q;\nVector2 polygon[MAX_N];\nVector2 point;\n\n\nInt contains(Vector2 &point) {\n  bool in = false;\n  loop(n,0,N) {\n    Vector2 a = polygon[n] - point;\n    Vector2 b = polygon[(n+1) % N] - point;\n    if (fabs(a.cross(b)) < EPS && a.dot(b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS && b.y > EPS && a.cross(b) > EPS) in = !in;\n  }\n  \n  return in ? 2 : 0;\n}\n\n\nvoid solve() {\n}\n\nvoid input() {\n  cin >> N;\n  loop(n,0,N) cin >> polygon[n];\n  cin >> Q;\n  while (cin >> point) {\n    cout << contains(point) << endl;\n  }\n}\n\nint main() {\n  cout.precision(15);\n  input();\n  solve();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst pair<int, int> INF{329083291, 23409802};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\treturn cross1 * cross2 <= 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int j = 0; j < q; j++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define here(g, i) g[i]\n#define next(g, i) g[(i + 1) % g.size()]\n#define prev(g, i) g[(i - 1 + g.size()) % g.size()]\nconst double EPS = 1e-10;\nconst double INF = 1e12;\n\nstruct L {\n    P a, b, v;\n    L(){}\n    L(P _a, P _b) : a(_a), b(_b), v(b - a) {}\n    L(double _ax, double _ay, double _bx, double _by) : L(P(_ax, _ay), P(_bx, _by)) {}\n};\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\nenum { OUT, ON, IN };\nint containPG(const P& p, const G& g) {\n    int n = g.size();\n    bool in = false;\n    rep(i, n) {\n        P a = here(g, i) - p, b = next(g, i) - p;\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) > 0) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int n;\n    cin >> n;\n    G g;\n    while (n--) {\n        double x, y;\n        cin >> x >> y;\n        g.emplace_back(x, y);\n    }\n\n    int q;\n    cin >> q;\n    while (q--) {\n        double x, y;\n        cin >> x >> y;\n        cout << containPG(P(x, y), g) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define INTMAX 2147483647LL\n#define PII pair<int,int>\n#define MK make_pair\n#define re register\n#define Eps (1e-10)\n#define Equal(a,b) (fabs((a)-(b))<Eps)\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst double Pi=acos(-1.0);\nconst int Inf=0x3f3f3f3f;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\ninline int read(){\n\tre int x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\ninline ll readll(){\n\tre ll x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\n\nstruct Point{\n\tdb x,y;\n\tPoint(){}\n\tPoint(db xx,db yy):x(xx),y(yy){}\n\tinline Point operator +(const Point &p){return Point(x+p.x,y+p.y);}\n\tinline Point operator -(const Point &p){return Point(x-p.x,y-p.y);}\n\tinline Point operator *(const db &k){return Point(x*k,y*k);}\n\tinline Point operator /(const db &k){return Point(x/k,y/k);}\n\tinline db Norm(){return x*x+y*y;}\n\tinline db abs(){return sqrt(Norm());}\n\tinline bool operator <(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tinline bool operator ==(const Point &p)const{return fabs(x-p.x)<Eps&&fabs(y-p.y)<Eps;}\n}; \n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point p1_,Point p2_):p1(p1_),p2(p2_){}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;db r;\n\tCircle(Point cc,db rr):c(cc),r(rr){}\n};\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\ninline bool Is_Vertical(Vector a,Vector b){return Equal(dot(a,b),0.0);}\ninline bool Is_Vertical(Point a1,Point a2,Point b1,Point b2){return Is_Vertical(a1-a2,b1-b2);}\ninline bool Is_Vertical(Segment s1,Segment s2){return Equal(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\ninline bool Is_Parallel(Vector a,Vector b){return Equal(cross(a,b),0.0);}\ninline bool Is_Parallel(Point a1,Point a2,Point b1,Point b2){return Is_Parallel(a1-a2,b1-b2);}\ninline bool Is_Parallel(Segment s1,Segment s2){return Equal(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\nPoint Project(Segment s,Point p){\n\tVector bse=s.p2-s.p1;\n\tdouble res=dot(p-s.p1,bse)/norm(bse);\n\treturn s.p1+bse*res;\n}\nPoint Reflect(Segment s,Point p){return p+(Project(s,p)-p)*2.0;}\n\ninline int CCW(Point p0,Point p1,Point p2){\n\tVector a=p1-p0,b=p2-p0;\n\tif(cross(a,b)>Eps) return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-Eps)return CLOCKWISE;\n\tif(dot(a,b)<-Eps)  return ONLINE_BACK;\n\tif(a.Norm()<b.Norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT; \n}\n\ninline bool Is_Intersect(Point p1,Point p2,Point p3,Point p4){return (CCW(p1,p2,p3)*CCW(p1,p2,p4)<=0)&&(CCW(p3,p4,p1)*CCW(p3,p4,p2)<=0);} \ninline bool Is_Intersect(Segment s1,Segment s2){return Is_Intersect(s1.p1,s1.p2,s2.p1,s2.p2);}\n\ninline double Get_DistanceLP(Segment s,Point p){\n\treturn abs(cross(s.p2-s.p1,p-s.p1)/abs(s.p2-s.p1));\n}\ninline double Get_DistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n\tif(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n\treturn Get_DistanceLP(s,p);\n}\ninline double Get_Distance(Segment s1,Segment s2){\n\tif(Is_Intersect(s1,s2)) return 0.0;\n\treturn min(min(Get_DistanceSP(s1,s2.p1),Get_DistanceSP(s1,s2.p2)),min(Get_DistanceSP(s2,s1.p1),Get_DistanceSP(s2,s1.p2)));\n}\ninline double Get_Distance(Point p1,Point p2,Point p3,Point p4){return Get_Distance(Segment(p1,p2),Segment(p3,p4));}\ninline Point Get_Crosspoint(Segment s1,Segment s2){\n\tVector bse=s2.p2-s2.p1;\n\tdouble d1=abs(cross(bse,s1.p1-s2.p1));\n\tdouble d2=abs(cross(bse,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t; \n}\n\ninline Point Get_Crosspoint(Point p1,Point p2,Point p3,Point p4){return Get_Crosspoint(Segment(p1,p2),Segment(p3,p4)); }\n\ninline int Contains(Polygon g,Point p){\n\tint n=g.size();bool f=false;\n\tfor(int i=0;i<n;++i){\n\t\tPoint a=g[i]-p,b=g[(i+1)%n]-p;\n\t\tif(fabs(cross(a,b))<Eps&&dot(a,b)<Eps) return 1;\n\t\tif(a.y>b.y) swap(a,b);\n\t\tif(a.y<Eps&&Eps<b.y&&cross(a,b)>Eps) f=!f;\n\t}\n\treturn (f?2:0);\n} \ninline double Area(Polygon s){\n\tdouble res=0;\n\tfor(int i=0;i<(int)s.size();++i)\n\t\tres+=cross(s[i],s[(i+1)%(int)s.size()])/2.0;\n\treturn abs(res);\n}\ninline bool Is_Convex(Polygon p){\n\tbool f=true;int n=p.size();\n\tfor(int i=0;i<n;++i){\n\t\tint t=CCW(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n\t\tf&=t!=CLOCKWISE;\n\t}\n\treturn f;\n}\nint n,q;\nint main(){\n\tn=read();\n\tPolygon p(n); \n\tfor(int i=0;i<n;++i)\n\t\tp[i].x=read(),p[i].y=read();\n\tq=read();\n\twhile(q--){\n\t\tPoint a;\n\t\ta.x=read();a.y=read();\n\t\tprintf(\"%d\\n\",Contains(p,a));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef complex<double> C;\n\nnamespace std\n{\n    bool operator < (const C& a, const C& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\nstruct L : public vector<C>\n{\n    L(const C &a, const C &b) {\n        push_back(a); push_back(b);\n    }\n};\n\n//??????\ndouble cross(const C& a, const C& b)\n{\n    return imag(conj(a)*b);\n}\n//??????\ndouble dot(const C& a, const C& b)\n{\n    return real(conj(a)*b);\n}\n\n\nint ccw(C a, C b, C c)\n{\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n//??´???????????????????????????(????????´??????True)\nbool intersectLL(const L &l, const L &m)\n{\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;\n}\n//??´?????¨?????????????????????(????????±??????????????¨??????)\nbool intersectLS(const L &l, const L &s)\n{\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\n//??´?????¨????????????(??±???)??????\nbool intersectLP(const L &l, const C &p)\n{\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\n//??????????????????????????????(????????±??????????????¨??????)\nbool intersectSS(const L &s, const L &t)\n{\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n//????????¨????????????(??±???)??????\nbool intersectSP(const L &s, const C &p)\n{\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n//???p?????´???l???????°???±\nC projection(const L &l, const C &p)\n{\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n}\n//???p?????´???l????????¨??????????§°?§????\nC reflection(const L &l, const C &p)\n{\n    return p + (projection(l, p) - p)*2.0;\n}\n//?????¨??´???????????¢\ndouble distanceLP(const L &l, const C &p)\n{\n    return abs(p - projection(l, p));\n}\n//??´?????¨??´???????????¢\ndouble distanceLL(const L &l, const L &m)\n{\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\n//??´?????¨??????????????¢\ndouble distanceLS(const L &l, const L &s)\n{\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\n//????????¨???????????¢\ndouble distanceSP(const L &s, const C &p)\n{\n    const C r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\n//????????¨??????????????¢\ndouble distanceSS(const L &s, const L &t)\n{\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n//??´???????????????????????????\nC crosspoint(const L &l, const L &m)\n{\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    //????????´????????¨???\n    if(abs(A) < EPS && abs(B) < EPS){\n        return m[0];\n    }\n    return m[0] + B / A * (m[1] - m[0]);\n}\n//?????????????????????\nL crosspointSS(C &p1,int r1,C &p2,int r2)\n{\n    double d = norm(p2-p1);\n    double t = r2*r2 - r1*r1 - d;\n    double aa = d,bb = t*(real(p2)-real(p1)),cc = t*t / 4.0 - (imag(p2) - imag(p1))*(imag(p2) - imag(p1))*r1*r1;\n    double x1 = (-bb - sqrt(bb*bb - 4*aa*cc))/(2*aa),x2 = (-bb + sqrt(bb*bb - 4*aa*cc))/(2*aa);\n    double y1,y2;\n    if(imag(p1) == imag(p2)){\n        y1 = -sqrt(r1*r1 - x1*x1);\n        y2 = -y1;\n    }else{\n        y1 = (t+2*(real(p2)-real(p1))*x1)/(-2*(imag(p2)-imag(p1)));\n        y2 = (t+2*(real(p2)-real(p1))*x2)/(-2*(imag(p2)-imag(p1)));\n    }\n    L ln = L(C(x1+real(p1),y1+imag(p1)),C(x2+real(p1),y2+imag(p1)));\n    return ln;\n}\n//??????????±???????\nvector<C> convex_hull(vector<C> ps)\n{\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    vector<C> ch(2*n);\n    for (int i = 0; i < n; ch[k++] = ps[i++]){\n        while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) k--;\n    }\n    for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]){\n        while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) k--;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n//?????§??????\nbool isconvex(const vector<C> &ps)\n{\n    rep(i,ps.size()){\n        if (ccw(ps[(i+ps.size()-1) % ps.size()],ps[i],ps[(i+1) % ps.size()])) return false;\n    }\n    return true;\n}\n//????§???¢?????¢???\ndouble area(const vector<C> &ps)\n{\n    double A = 0;\n    rep(i,ps.size()){\n        A += cross(ps[i],ps[(i+1) % ps.size()]);\n    }\n    return A / 2.0;\n}\n//???????§???¢?????´?????§???????????????????????´????????¢\nvector<C> convex_cut(const vector<C> &ps, const L &l)\n{\n    vector<C> Q;\n    rep(i,ps.size()){\n        C A = ps[i], B = ps[(i+1)%ps.size()];\n        if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n        if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n            Q.push_back(crosspoint(L(A, B), l));\n    }\n    return Q;\n}\n//??????????§???¢???????????????????????????(0??????????????????,1?????????,2???????????????)\nint contains(const vector<C>& ps, const C& p)\n{\n    bool flag = false;\n    rep(i,ps.size()) {\n        C a = ps[i] - p, b = ps[(i+1)%ps.size()] - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b)){\n            if (cross(a, b) < 0) flag = !flag;\n        }\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n  }\n  return flag ? 2 : 0;\n}\n\nint main()\n{\n    int n,q;\n    cin >> n;\n    vector<C> vec;\n    rep(i,n){\n        int x,y;\n        cin >> x >> y;\n        vec.push_back(C(x,y));\n    }\n    cin >> q;\n    rep(i,q){\n        int x,y;\n        cin >> x >> y;\n        cout << contains(vec,C(x,y)) << \"\\n\";\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n};\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(point a, point b) {\n  return (a.x * b.y - a.y * b.x);\n}\n\nint contain(point p,vector<point>pol){\n  bool in=false;\n  for(int i=0;i<pol.size();i++){\n    point a=curr(pol,i)-p,b=next(pol,i)-p;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<=0 && 0<b.y && cross(a,b)<0)in=!in;\n    if(cross(a,b)==0 && dot(a,b)<=0)return 1;\n  }\n  return in?2:0;\n}\n\nint main(void){\n\n  int n;\n  cin >> n;\n  vector<point>pol(n);\n  for(int i=0;i<n;i++)cin >> pol[i].x >> pol[i].y;\n\n  int q;\n  cin >> q;\n  point a;\n  while(q--){\n    cin >> a.x >> a.y;\n    cout << contain(a,pol) << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define lb long double\n#define eps 1e-10\n#define N 110\nusing namespace std;\nstruct Po{lb x,y;}a[N],x;\nint n,q;\nvoid get(Po &x){scanf(\"%Lf %Lf\",&x.x,&x.y);}\nPo operator +(Po x,Po y){return (Po){x.x+y.x,x.y+y.y};}\nPo operator -(Po x,Po y){return (Po){x.x-y.x,x.y-y.y};}\nlb operator *(Po x,Po y){return x.x*y.y-x.y*y.x;}\nlb operator ^(Po x,Po y){return x.x*y.x+x.y*y.y;}\nint pa(int x){if (x>n)return x-n;return x;}\nbool pan(Po x,Po y,Po z){\n\tif (y.x>z.x)swap(y,z);\n\tif (x.x<y.x-eps||x.x>z.x+eps) return 0;\n\tif (y.y>z.y)swap(y,z);\n\tif (x.y<y.y-eps||x.y>z.y+eps) return 0;\n\treturn 1;\n}\nint que(Po x){\n\tint an=0;\n\tfor (int i=1;i<=n;i++){\n\t\tPo p=a[i]-x,q=a[pa(i+1)]-x;\n\t\tif (p.y<q.y) swap(p,q);\n\t\tif (p.y>eps&&q.y<eps&&p*q>eps) an=2-an;\n\t\tif (fabs(p*q)<eps&&pan(x,a[i],a[pa(i+1)])) return 1;\n\t}\n\treturn an;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)get(a[i]);\n\tscanf(\"%d\",&q);\n\twhile (q--){\n\t\tget(x);\n\t\tprintf(\"%d\\n\",que(x));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(ccw(a,b,p)==ON) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define DEBUG 1\n\n#define INF (1.0/0.0)\n#define EPS 1e-10\n#define PI 3.1415926535\n#define EQ(x, y) (abs((x)-(y))<EPS)\n#define X real()\n#define Y imag()\n\ntypedef complex<double> Point;\ntypedef Point Vec;\ntypedef array<Point, 2> Line;\ntypedef vector<Point> Poly;\n\nstruct Circle {\n  Point c;\n  double r;\n};\n\nenum Geometory {ABC=-2, CW, ON_LINE, CCW, CAB, OUTSIDE, INSIDE, ERROR}; \n\nnamespace std {\n  bool operator<(Point a, Point b) {\n    if (a.X != b.X) return a.X < b.X;\n    return a.Y < b.Y;\n  }\n}\n\ndouble dot(Point a, Point b) {\n  return (conj(a)*b).X;\n}\n\ndouble cross(Point a, Point b) {\n  return (conj(a)*b).Y;\n}\n\nGeometory ccw(Point a, Point b, Point c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return CCW; // ccw\n  if (cross(b, c) < 0) return CW; // cw\n  if (dot(b, c) < 0) return CAB; // c - a - b\n  if (norm(b) < norm(c)) return ABC; // a - b - c\n  return ERROR;\n}\n\nPoint proj(Line l, Point p) {\n  Point v = l[1]-l[0];\n  double ratio = dot(v, p-l[0]) / norm(v);\n  return l[0] + ratio*v;\n}\n\nPoint refl(Line l, Point p) {\n  return p + (proj(l, p) - p) * 2.0;\n}\n\nVec rotate(Vec v, double r) {\n  return v*Vec(cos(r), sin(r));\n}\n\nbool IsOrthogonal(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(dot(v1, v2), 0.0);\n}\n\nbool IsParallel(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(cross(v1, v2), 0.0);\n}\n\nbool IntersectLL(Line l, Line m) {\n  if (!EQ(cross(l[1]-l[0], m[1]-m[0]), 0.0)) return true;\n  if (EQ(cross(l[1]-l[0], m[0]-l[0]), 0.0)) return true;\n  return false;\n}\n\nbool IntersectLS(Line l, Line s) {\n  Point b = l[0];\n  Vec v = l[1]-l[0];\n  return cross(v, s[0]-b)*cross(v, s[1]-b) < EPS;\n}\n\nbool IntersectSS(Line s, Line t) {\n  if (ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) > 0) return false;\n  if (ccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) > 0) return false;\n  return true;\n}\n\nbool IntersectLP(Line l, Point p) {\n  return EQ(cross(l[1]-p, l[0]-p), 0.0);\n}\n\nbool IntersectSP(Line s, Point p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble DistL(Line l) {\n  return abs(l[0]-l[1]);\n}\n\ndouble DistLP(Line l, Point p) {\n  return abs(p - proj(l, p));\n}\n\ndouble DistLL(Line l, Line m) {\n  if (!IntersectLL(l, m)) return 0;\n  return DistLP(l, m[0]);\n}\n\ndouble DistLS(Line l, Line s) {\n  if (IntersectLS(l, s)) return 0;\n  return min(DistLP(l, s[0]), DistLP(l, s[1]));\n}\n\ndouble DistSP(Line s, Point p) {\n  Point r = proj(s, p);\n  if (IntersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble DistSS(Line s, Line t) {\n  if (IntersectSS(s, t)) return 0;\n\n  double a = min(DistSP(s, t[0]), DistSP(s, t[1]));\n  double b = min(DistSP(t, s[0]), DistSP(t, s[1]));\n  return min(a, b);\n}\n\nLine PerpendBisect(Line seg) {\n  Point mid = (seg[0]+seg[1])/2.0;\n  return Line{mid, mid+(seg[1]-seg[0])*Vec(0, 1)};\n}\n\nPoint CrossPointLL(Line l, Line m) {\n  double A = cross(l[1]-l[0], m[1]-m[0]);\n  double B = cross(l[1]-l[0], l[1]-m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0];\n  if (abs(A) < EPS) assert(0);\n  return m[0] + B / A * (m[1]-m[0]);\n}\n\nvector<Point> CrossPointCL(Circle c, Line l) {\n  vector<Point> ret;\n  double d = DistLP(l, c.c);\n  if (d < c.r + EPS) {\n    double ratio = (d > c.r) ? 0.0 : sqrt(c.r*c.r - d*d);\n    Vec sgn = (l[0]-l[1]) / abs(l[0]-l[1]);\n    ret.push_back(proj(l, c.c) + ratio*sgn);\n    ret.push_back(proj(l, c.c) - ratio*sgn);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCS(Circle c, Line s) {\n  vector<Point> ret;\n  vector<Point> res = CrossPointCL(c, s);\n  for (Point p : res) {\n    if(ccw(s[0], p, s[1]) == ABC) ret.push_back(p);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCC(Circle c1, Circle c2) {\n  vector<Point> ret;\n  double d = abs(c1.c - c2.c);\n  double rc = (d*d + c1.r*c1.r - c2.r*c2.r) / (2*d);\n  double dfr = c1.r*c1.r - rc*rc;\n\n  if (EQ(dfr, 0.0)) dfr = 0.0;\n  else if(dfr < 0.0) return ret;\n\n  double rs = sqrt(dfr);\n  Vec sgn = (c2.c - c1.c) / d;\n  ret.push_back(c1.c + sgn*Point(rc, rs));\n  if (dfr > 0.0) ret.push_back(c1.c + sgn*Point(rc, -rs));\n  return ret;\n}\n\n// Note that ccw(a, b, c) != CCW when a, b, c are colinear\nPoly GrahamScan(vector<Point> ps) {\n  int k = 0;\n  int n = ps.size();\n  Poly ret(n*2);\n\n  sort(ps.begin(), ps.end());\n  for (int i=0; i<n; i++) {\n    while (k > 1 && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  int k_ = k;\n  for (int i=n-1; i>=0; i--) {\n    while (k > k_ && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  ret.resize(k-1);\n  return ret;\n}\n\ndouble CalcArea(Poly ps) {\n  double ret = 0.0;\n  for (int i=0; i<ps.size(); i++) {\n    ret += cross(ps[i], ps[(i+1)%ps.size()]);\n  }\n  return ret/2.0;\n}\n\nbool IsConvex(Poly ps) {\n  return GrahamScan(ps).size() == ps.size();\n}\n\nGeometory ContainsPoint(Poly poly, Point p) {\n  bool in = false;\n  int n = poly.size();\n  for (int i=0; i<n; i++) {\n    Vec a = poly[i] - p;\n    Vec b = poly[(i+1)%n] - p;\n    double cr = cross(a, b);\n\n    if (a.Y <= 0 && 0 < b.Y && cr > EPS) in ^= 1;\n    if (b.Y <= 0 && 0 < a.Y && cr < -EPS) in ^= 1;\n    if (IntersectSP({poly[i], poly[(i+1)%n]}, p)) return ON_LINE;\n  }\n\n  if (in) return INSIDE;\n  return OUTSIDE;\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\npair<int, int> ConvexDiameterApexes(Poly ps) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  int n = ps.size();\n  int is = 0;\n  int js = 0;\n  for (int i=1; i<n; i++) {\n    if (ps[i].Y > ps[is].Y) is = i;\n    if (ps[i].Y < ps[js].Y) js = i;\n  }\n\n  int maxi, maxj;\n  double maxd = norm(ps[is]-ps[js]);\n  int i = is;\n  int j = js;\n  do {\n    Vec a = ps[i+1] - ps[i];\n    Vec b = ps[j+1] - ps[j];\n    if (cross(a, b) > -EPS) j = (j+1)%n;\n    else i = (i+1)%n;\n\n    double d = norm(ps[i]-ps[j]);\n    if (d > maxd) {\n      maxd = d;\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n\n  return make_pair(maxi, maxj);\n}\n\nLine ClosestPair(vector<Point> ps) {\n  auto CompareY = [](const Point &a, const Point &b) {\n    if (a.Y != b.Y) return a.Y < b.Y;\n    return a.X < b.X;\n  };\n\n  function<Line(Point*,int)> Rec = [&Rec, &CompareY](Point *as, int n) {\n    if (n <= 1) return Line{Point(0, 0), Point(INF, INF)};\n    \n    int m = n/2;\n    double x = as[m].X;\n    Line a = Rec(as, m);\n    Line b = Rec(as+m, n-m);\n    double mind = DistL(a);\n    Line ret = a;\n    if (DistL(b) < mind) {\n      mind = DistL(b);\n      ret = b;\n    }\n\n    sort(as, as+n, CompareY);\n    vector<Point> bs;\n    bs.reserve(n);\n    for (int i=0; i<n; i++) {\n      if (abs(as[i].X - x) >= mind) continue;\n\n      for (int j=0; j<bs.size(); j++) {\n        Point p1 = as[i];\n        Point p2 = bs[b.size()-1-j];\n        if (p1.Y - p2.Y >= mind) break;\n\n        double d = abs(p1-p2);\n        if (mind > d) {\n          mind = d;\n          ret = Line{p1, p2};\n        }\n      }\n\n      bs.emplace_back(as[i]);\n    }\n\n    return ret;\n  };\n\n  int n = ps.size();\n  assert (n >= 2);\n  sort(ps.begin(), ps.end());\n  return Rec(&ps[0], n);\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\n// <left, right> or <upper, lower>\npair<Poly, Poly> CutConvex(Poly ps, Line l) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  if (l[0].Y > l[1].Y) swap(l[0], l[1]);\n  else if (EQ(l[0].Y, l[1].Y) && l[0].X > l[1].X) swap(l[0], l[1]);\n\n  Poly left;\n  Poly right;\n  for (int i=0; i<ps.size(); i++) {\n    Point a = ps[i];\n    Point b = ps[(i+1)%ps.size()];\n\n    if (ccw(l[0], l[1], a) != CW) left.emplace_back(a);\n    else right.emplace_back(a);\n\n    Line m{a, b};\n    if (IntersectLS(l, m)) {\n      Point p = CrossPointLL(l, m);\n      left.emplace_back(p);\n      right.emplace_back(p);\n    }\n  }\n\n  return make_pair(left, right);\n}\n\nint n;\nvector<Point> ps;\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i=0; i<n; i++) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    ps.emplace_back(Point{x, y});\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n\n    Geometory ret = ContainsPoint(ps, {x, y});\n    if (ret == INSIDE) puts(\"2\");\n    else if (ret == ON_LINE) puts(\"1\");\n    else puts(\"0\");\n\n    reverse(ps.begin(), ps.end());\n    assert(ContainsPoint(ps, {x, y}) == ret);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <cmath>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include<vector>\n#include<cstring>\n#include<set>\n#include <cstdio>\n#include<queue>\n#include<map>\n#define WHITE 0\n#define GRAY  1\n#define BLACK 2\n#define endl '\\n'\n#define forup(i,a,n) for( int i =a; i < n; i++)\n#define llforup(i,a,n) for( ll i =a; i < n; i++)\n#define fordown(i,a,n) for( int i =a; i >= n; i--)\n#define fornot(i,a,n) for( int i=a;!n;i++)\n#define mod  (ll)(1e9+7)\n#define putnum(a) printf(\"%d\\n\",a)\nusing namespace std;\ntypedef long long ll;\ninline int readnum()\n{\n\tint p, data = 0; char ch = 0;\n\twhile ((ch != '-') &&( ch < '0' || ch>'9') )//注意运算优先级，逻辑与大于逻辑非\n\t\tch = getchar();//相当于正则表达式的搜索，跳过不需要的字符\n\tif (ch == '-')\n\t\tp = -1, ch = getchar();//不能与if平行放置，不懂为什么，可能是bug\n\telse p = 1;\n\twhile (ch >= '0' && ch <= '9') data = data * 10 + ch - '0', ch = getchar();//搜索需要的字符\n\treturn data * p;\n}\ninline int ReadPossitive()\n{\n\tchar ch; int data = 0;\n\tch = getchar();\n\twhile (ch == ' ' || ch == '\\n')ch = getchar();\n\twhile (ch != ' ' && ch != '\\n' && ch != EOF)\n\t{\n\t\tdata = data * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn data;\n}\n//并查集模板\nclass DisjointSet {\nprivate:\n\tvector<int>rank, parent;\npublic:\n\tDisjointSet(){}\n\tDisjointSet(int size)\n\t{\n\t\trank.resize(size, 0);//默认初始化为0，养成习惯写完整\n\t\tparent.resize(size, 0);\n\t\tforup(i, 0, size)MakeSet(i);\n\t}\n\tvoid MakeSet(int x)\n\t{\n\t\tparent[x] = x;\n\t\trank[x] = 0;\n\t}\n\tbool same(int x, int y)\n\t{\n\t\treturn Findroot(x) == Findroot(y);\n\t}\n\tvoid unite(int x, int y)\n\t{\n\t\tlink(Findroot(x), Findroot(y));\n\t}\n\tinline int Findroot(int x)\n\t{\n\t\twhile (x != parent[x])\n\t\t{\n\t\t\tx = parent[x];\n\t\t}\n\t\treturn x;\n\t}\n\tvoid link(int rootx, int rooty)\n\t{\n\t\tif (rank[rootx] < rank[rooty])parent[rootx] = parent[rooty];\n\t\telse\n\t\t{\n\t\t\tparent[rooty] = parent[rootx];\n\t\t\tif (rank[rootx] == rank[rooty])\n\t\t\t\trank[rootx]++;\n\t\t}\n\t}\n};\n\n//计算几何模板\n#define EPS (1e-10)//注意：<EPS代表数据<=0,>EPS代表数据>0,若要求数据<0请使用<-EPS进行判断\n#define equals(a,b) (fabs((a)-(b))<EPS)//保留整数0\nclass Point {\npublic:\n\tdouble x, y;\npublic:\n\tPoint() {};\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y);}//p不能为引用的问题怎么解决？答用右值引用解决\n\tPoint operator +(Point&& p) { return Point(x + p.x, y + p.y); }\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y);}\n\tPoint operator -(Point&& p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double a) { return Point(a * x, a * y); }\n\tPoint operator /(double a) { return Point(x / a, y / a); }\n\tinline double abs() { return sqrt(norm()); }\n\tinline double norm() { return x * x + y * y; }\n\tbool operator <(const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\n\nclass Line {\npublic:\n\tPoint p1, p2;\npublic:\n\tLine() {};\n\tLine(int p1x, int p1y, int p2x, int p2y)\n\t{\n\t\tp1.x = p1x; p1.y = p1y;\n\t\tp2.x = p2x; p2.y = p2y;\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c; double r;\npublic:\n\tCircle() {}\n\tCircle(Point c,double r):c(c),r(r){}\n\tCircle(double cx, double cy, double cr)\n\t{\n\t\tc.x = cx; c.y = cy; r = cr;\n\t}\n};\n\ntypedef vector<Point> Polygon;\n\nclass VectorOperation {//操作符不必继承\npublic:\n\tdouble dot(Point a, Point b)//点乘\n\t{\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tdouble cross(Point a, Point b)//叉乘\n\t{\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tdouble abs(Vector s)\n\t{\n\t\treturn sqrt(s.norm());\n\t}\n\tdouble getDistance(Point a, Point b)\n\t{\n\t\treturn abs(a - b);\n\t}\n\tint PositionPL(Point p0, Point p1, Point p2)\n\t{\n#define COUNTER_CLOCKWISE -1\n#define CLOCKWISE 1\n#define ONLINE_BACK -2\n#define ONLINE_FRONT 2\n#define ON_SEGMENT 0\n\t\tVector a = p1 - p0;Vector b = p2 - p0;\n\t\tdouble Cross = cross(a, b);\n\t\tif (Cross > 0.0)return COUNTER_CLOCKWISE;\n\t\tif (Cross < 0.0)return CLOCKWISE;\n\t\tif (dot(a, b) < 0.0)return ONLINE_BACK;\n\t\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\n\t\treturn ON_SEGMENT;\n#undef COUNTER_CLOCKWISE \n#undef CLOCKWISE \n#undef ONLINE_BACK \n#undef ONLINE_FRONT \n#undef ON_SEGMENT \n\t}\n\tdouble inclination(Vector s)\n\t{\n\t\treturn atan2(s.y, s.x);//取值范围-pi~pi\n\t}\n\tVector Polar(double a, double r) { return Vector(cos(a) * r, sin(a) * r); }\n\tVector rotate(Point a, double rad)//逆时针旋转\n\t{\n\t\treturn Vector(a.x * cos(rad) - a.y * sin(rad), a.x * sin(rad) + a.y * cos(rad));\n\t}\n};\n\nclass LineOperation :public VectorOperation{\npublic:\t\n\tbool isOrthogonal(Line s1, Line s2)\n\t{\n\t\treturn equals(dot(s1.p2-s1.p1, s2.p2 - s2.p1), 0.0);//操作符重载的返回值的内存分配机制尚不可知，似乎返回值没有分配内存，dot的参数不能用引用，否则报错。\n\t}\n\tbool isParallel(Line s1, Line s2)\n\t{\n\t\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);//外积判断平行，内积判断垂直。\n\t}\n\tbool intersectSS(Line s1, Line s2)\n\t{\n\t\treturn (PositionPL(s1.p1, s1.p2, s2.p1) * PositionPL(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\t\t    PositionPL(s2.p1, s2.p2, s1.p1) * PositionPL(s2.p1, s2.p2, s1.p2) <= 0);//即对两条线段都有另一条线段的两个端点必须在当前线段的两侧\n\t}//可以证明如果一条线段的计算结果是负二，另一个线段的计算结果必定大于0\n\tPoint projection(Line s, Point p)\n\t{\n\t\tVector base = s.p1 - s.p2;\n\t\tdouble r = dot(p - s.p1, base) /base.norm();\n\t\treturn s.p1 + base * r;\n\t}\n\tPoint reflection(Line s, Point p)\n\t{\n\t\treturn p + (projection(s, p)-p) * 2.0;\n\t}\n\tdouble getDistanceLP(Line s, Point p)//点与直线\n\t{\n\t\treturn fabs(cross(s.p2 - s.p1, p - s.p1)) / abs(s.p2 - s.p1);\n\t}\n\tdouble getDistanceSP(Line s, Point p)//点与线段\n\t{\n\t\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);//与点p1成钝角\n\t\telse if (dot(s.p2 - s.p1, p - s.p2) > 0.0)return abs(p - s.p2);\n\t\telse return getDistanceLP(s, p);\n\t}\n\tdouble getDistanceSS(Line s1, Line s2)//线段与线段\n\t{\n\t\t//考虑\n\t\t// --\n\t\t//----\n\t\tif (intersectSS(s1, s2))return 0.0;//如果枚举优化需要16次逻辑，采用分治法的效率和直接使用min函数一样\n\t\telse\n\t\t\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n\t}\n\tPoint getCrossPointSS(Line s1, Line s2)\n\t{\n\t\tVector base = s2.p2 - s2.p1;\n\t\tdouble d1 = fabs(cross(base, s1.p1 - s2.p1));//除以abs(base)这步因为在t中base被消去所以没有写，提升效率\n\t\tdouble d2 = fabs(cross(base, s1.p2 - s2.p1));\n\t\tdouble t = d1 / (d1 + d2);\n\t\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n\t}\n\tPoint getCrossPointLL(Line s1, Line s2)\n\t{\n\t\tVector a = s1.p2 - s1.p1;\n\t\tVector b = s2.p2 - s2.p1;\n\t\treturn (s1.p1 + a*(cross(b, s2.p1 - s1.p1)) / cross(b, a));\n\t}\n};\n\nclass CircleOperation :public VectorOperation{\npublic:\n\tint intersectCL(Line s,Circle c)\n\t{\n\t\tLineOperation op;\n\t\tdouble distance = op.getDistanceLP(s, c.c);\n\t\tdouble comparation = distance - c.r;\n\t\tif (comparation < EPS)return 1;\n\t\tif (comparation < 0.0)return 2;\n\t\tif (comparation > 0.0)return 0;\n\t}\n\tint intersectCC(Circle c1, Circle c2)\n\t{\n\t\tdouble distanceR = c1.r + c2.r;\n\t\tdouble distancePR = getDistance(c1.c, c2.c);\n\t\tdouble comparation = distancePR - distanceR;\n\t\tif (comparation < EPS)return 1;\n\t\tif (comparation > 0.0)return 0;\n\t\tif (comparation < 0.0)return 2;\n\t}\n\tpair<Point,Point> getCrossPointCL(Circle c,Line s)\n\t{\n\t\tLineOperation op;\n\t\tPoint CLprojection = op.projection(s, c.c);\n\t\tVector CL = CLprojection - c.c;\n\t\tVector e = (s.p2 - s.p1) / abs(s.p2 - s.p1);\n\t\tdouble base = sqrt(c.r * c.r - CL.norm());\n\t\treturn make_pair(CLprojection + e * base, CLprojection - e * base);\n\t\t//可以处理仅有一个交点的情况base是0产生两个同解。sqrt要求必须是正数，使用前必须进行有解性判断。\n\t}\n\tpair<Point, Point> getCrossPointCC(Circle c1, Circle c2)\n\t{\n\t\tdouble CC = abs(c1.c - c2.c);\n\t\tdouble a = acos((c1.r * c1.r + CC * CC - c2.r * c2.r) / (2 * c1.r * CC));//余弦定理\n\t\tdouble t = inclination(c2.c - c1.c);\n\t\treturn make_pair(c1.c + Polar(t + a, c1.r), c1.c + Polar(t - a, c1.r));\n\t}\n};\n\nclass PolygonOperation :public VectorOperation{\npublic:\n\tint PointsContainment(Polygon &g,Point p)\n\t{//ON_SEGMENT 0 IN 1 OUT 2\n#define ON_SEGMENT 0\n#define IN 1\n#define OUT 2\n\t\tint size = g.size();\n\t\tbool x = false;\n\t\tVector a, b;\n\t\tforup(i, 0, size)\n\t\t{\n\t\t\ta = g[i] - p; b = g[(i+1)%size] - p;//用取模创造循环\n\t\t\tif (fabs(cross(a, b)) < EPS && dot(a, b) < EPS)return ON_SEGMENT;//<EPS包含了内积为负数的情况\n\t\t\tif (a.y < b.y)\n\t\t\t{\n\t\t\t\tdouble test = cross(a, b);\n\t\t\t\tif (a.y < EPS && EPS<b.y && cross(a, b)>EPS)x = !x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (b.y < EPS && EPS<a.y && cross(b, a)>EPS)x = !x;//射线平行x轴指向x轴正向,如果是.----平行的情况跳过，不会更改x值EPS<a.y不成立\n\t\t\t}//如果是-----.的情况，则会“触碰“到两条边，该判断方法仍然正确：触碰到偶数条边时点在多边形外部\n\t\t}\n\t\treturn x ? IN : OUT;\n#undef ON_SEGMENT\n#undef IN\n#undef OUT\n\t}\n};\n//E-mail 374656045@qq.com\n\nclass solve {\nprivate:\n\tint n, q;\npublic://采用邻接表建图,带权无向图\n\tsolve()\n\t{\n\t\tn = readnum();\n\t\tPolygon po;\n\t\tint x, y;\n\t\tforup(i, 0, n)\n\t\t{\n\t\t\tx = readnum(); y = readnum();\n\t\t\tPoint p(x, y);\n\t\t\tpo.push_back(p);\n\t\t}\n\t\tq = readnum();\n\t\tPolygonOperation op;\n\t\tforup(i, 0, q)\n\t\t{\n\t\t\tx = readnum(); y = readnum();\n\t\t\tPoint p(x, y);\n\t\t\tint ans = op.PointsContainment(po, p);\n\t\t\tswitch (ans)\n\t\t\t{\n\t\t\tcase 0:putnum(1); break;\n\t\t\tcase 1:putnum(2); break;\n\t\t\tcase 2:putnum(0); break;\n\t\t\t}\n\t\t}\n\t}\n};\nint main(void)\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);//慎用，cin和scanf混用会导致非MSC++WA\n#ifdef DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tsolve solution;\n#ifdef DEBUG\n\tfclose(stdin);//关闭文件 \n\tfclose(stdout);//关闭文件 \n#endif\n\treturn 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdet(p,a,b)==0 and sdot(p,a,b)<0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nstruct Point {\n\tdouble x, y;\n\tPoint() : x(0), y(0) { }\n\tPoint(double x, double y) : x(x), y(y) { }\n\tPoint operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double s) const { return Point(x * s, y * s); }\n\tPoint operator/(double s) const { return Point(x / s, y / s); }\n\tPoint &operator+=(const Point &p){ x += p.x; y += p.y; return *this; }\n\tPoint &operator-=(const Point &p){ x -= p.x; y -= p.y; return *this; }\n\tPoint &operator*=(double s){ x *= s; y *= s; return *this; }\n\tPoint &operator/=(double s){ x /= s; y /= s; return *this; }\n\tbool operator==(const Point &p) const { return x == p.x && y == p.y; }\n\tbool operator!=(const Point &p) const { return x != p.x || y != p.y; }\n\tbool operator<(const Point &p) const {\n\t\treturn (x == p.x) ? (y < p.y) : (x < p.x);\n\t}\n};\ninline Point operator*(double s, const Point &p){ return p * s; }\n\ninline double norm(const Point &p){ return p.x * p.x + p.y * p.y; }\ninline double abs(const Point &p){ return sqrt(norm(p)); }\ninline double arg(const Point &p){ return atan2(p.y, p.x); }\ninline Point unit(const Point &p){ return p / abs(p); }\ninline Point ortho(const Point &p){ return Point(-p.y, p.x); }\ninline double cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\ninline double dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\nclass Polygon {\nprivate:\n\tvector<Point> m_points;\npublic:\n\tPolygon() : m_points() { }\n\ttemplate <typename Iterator>\n\tPolygon(Iterator begin, Iterator end) : m_points(begin, end) { }\n\tconst Point &operator[](int i) const {\n\t\treturn m_points[i % m_points.size()];\n\t}\n\tPoint &operator[](int i){ return m_points[i % m_points.size()]; }\n\tsize_t size() const { return m_points.size(); }\n};\n\ninline double area(const Polygon &g){\n\tconst int n = g.size();\n\tdouble sum = 0;\n\tfor(int i = 0; i < n; ++i){ sum += cross(g[i], g[i + 1]); }\n\treturn sum * 0.5;\n}\ninline int contains(const Polygon &g, const Point &p){\n\tconst int n = g.size();\n\tint result = 0;\n\tfor(int i = 0; i < n; ++i){\n\t\tPoint a = g[i] - p, b = g[i + 1] - p;\n\t\tif(a.y > b.y){ swap(a, b); }\n\t\tif(a.y <= 0 && 0 < b.y && cross(a, b) < 0){ result = 1 - result; }\n\t\tif(cross(a, b) == 0 && dot(a, b) <= 0){ return -1; } // on line\n\t}\n\treturn result;\n}\n\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcout << setiosflags(ios::fixed) << setprecision(1);\n\tint n;\n\tcin >> n;\n\tvector<Point> points(n);\n\tfor(int i = 0; i < n; ++i){ cin >> points[i].x >> points[i].y; }\n\tconst Polygon polygon(points.begin(), points.end());\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tconst int c = contains(polygon, p);\n\t\tswitch(c){\n\t\t\tcase  0: cout << 0 << endl; break;\n\t\t\tcase -1: cout << 1 << endl; break;\n\t\t\tcase  1: cout << 2 << endl; break;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 李青坪 on 2018/12/9.\n//\n\n#include <cmath>\n#include <cstdio>\n//#include <assert.h>\n#include <algorithm>\n#include <vector>\n\n#define EPSLON 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPSLON)\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK -2\n#define ONLINE_FRONT 2\n#define ON_SEGMENT 0\n\nusing namespace std;\n\n// 点\nclass Point {\npublic:\n    double x;\n    double y;\n\n    Point() {}\n\n    Point(double x, double y) : x(x), y(y) {}\n\n    Point operator+(Point a) {\n        return Point(x + a.x, y + a.y);\n    }\n\n    Point operator-(Point a) {\n        return Point(x - a.x, y - a.y);\n    }\n\n    Point operator*(double a) {\n        return Point(x * a, y * a);\n    }\n\n    Point operator/(double a) {\n        return Point(x / a, y / a);\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    double absVector() {\n        return sqrt(norm());\n    }\n\n    bool operator==(Point a) const {\n        return equals(x, a.x) && equals(y, a.y);\n    }\n};\n\ntypedef Point Vector;\n\n// 线段\nclass Segment {\npublic:\n    Point a, b;\n};\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool contain = false;\n    for (int i = 0; i < n; ++i) {\n        Vector a = g[i] - p;\n        Vector b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < EPSLON && dot(a, b) < EPSLON) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPSLON && b.y > EPSLON && cross(a, b) > EPSLON) contain = !contain;\n    }\n    return contain ? 2 : 0;\n}\n\nint n;\n\nint main() {\n    Polygon g;\n    scanf(\"%d\", &n);\n    double x, y;\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%lf %lf\", &x, &y);\n        g.push_back(Point(x, y));\n    }\n    int q;\n    scanf(\"%d\", &q);\n    for (int j = 0; j < q; ++j) {\n        scanf(\"%lf %lf\", &x, &y);\n        Point p = Point(x, y);\n        printf(\"%d\\n\", contains(g, p));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <sys/timeb.h>\n#include <fstream>\n\nusing namespace std;\n\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define replrev(i,a,b) for(int i=(int)(b)-1;i>=(int)(a);i--)\n#define reprev(i,n) replrev(i,0,n)\n#define repi(itr,ds) for(auto itr=ds.begin();itr!=ds.end();itr++)\n#define all(a) a.begin(),a.end()\n#define mp make_pair\n#define mt make_tuple\n#define INF 2000000000\n#define INFL 1000000000000000000LL\n#define EPS (1e-10)\n#define MOD 1000000007\n#define PI 3.1415926536\n#define RMAX 4294967295\n\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<double> vd;\ntypedef vector<P> vP;\ntypedef vector<vector<int> > vvi;\ntypedef vector<vector<bool> > vvb;\ntypedef vector<vector<ll> > vvll;\ntypedef vector<vector<char> > vvc;\ntypedef vector<vector<string> > vvs;\ntypedef vector<vector<double> > vvd;\ntypedef vector<vector<P> > vvP;\ntypedef priority_queue<int, vector<int>, greater<int> > pqli;\ntypedef priority_queue<ll, vector<ll>, greater<ll> > pqlll;\ntypedef priority_queue<P, vector<P>, greater<P> > pqlP;\ntypedef pair<int, pair<int, int> > Edge;\ntypedef vector<Edge> vE;\ntypedef priority_queue<Edge, vector<Edge>, greater<Edge> > pqlE;\n\n#define equals(a,b)(fabs((a)-(b))<EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p1 - s1.p2, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p1 - s1.p2, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n// ??????s???????§°?????¨?????????p???????§°???\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\n// ????????????(p0,p1)???????????????p2?????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n\t\t&& ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\n\n// ?????¢a???????§?r\nVector polar(double a, double r) {\n\treturn Point(cos(r)*a, sin(r)*a);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN:2, ON:1, OUT:0\nint contain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// ??????\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3)return s;\n\tsort(s.begin(), s.end());\n\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\n\nint main() {\n\tcout << fixed << setprecision(14);\n\tint N;\n\tcin >> N;\n\tPolygon poly(N);\n\trep(i, N) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpoly[i] = Point(x, y);\n\t}\n\tint Q;\n\tcin >> Q;\n\trep(q, Q) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tcout << contain(poly, Point(x, y)) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    int sz = v.size();\n    for (int i = 0; i < sz; i++)\n    {\n        cout << v[i] << \" \\n\"[i == sz - 1];\n    }\n}\n\nusing ld = long double;\nusing Point = std::complex<ld>;\n\nconst ld eps = 1e-9, pi = acos(-1.0);\n\nnamespace std\n{\nbool operator<(const Point &lhs, const Point &rhs)\n{\n    if (lhs.real() < rhs.real() - eps)\n        return true;\n    if (lhs.real() > rhs.real() + eps)\n        return false;\n    return lhs.imag() < rhs.imag();\n}\n} // namespace std\n\nPoint input_point()\n{\n    ld x, y;\n    std::cin >> x >> y;\n    return Point(x, y);\n}\n\nbool eq(ld a, ld b)\n{\n    return (abs(a - b) < eps);\n}\n\nld dot(Point a, Point b)\n{\n    return real(conj(a) * b);\n}\n\nld cross(Point a, Point b)\n{\n    return imag(conj(a) * b);\n}\n\n// CCW::counter clockwise\nint ccw(Point a, Point b, Point c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > eps)\n        return 1; // a,b,c : counter-clockwise\n    if (cross(b, c) < -eps)\n        return -1; // a,b,c : clockwise\n    if (dot(b, c) < 0)\n        return 2; // c,a,b : on a line\n    if (norm(b) < norm(c))\n        return -2; // a,b,c : on a line\n    return 0;      // a,c,b : on a line\n}\n\nclass Line\n{\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n};\n\nld dot(Line l, Line m)\n{\n    return dot((l.a - l.b), (m.a - m.b));\n}\n\nclass Circle\n{\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// l:line, m:line が交点を持つか\nbool isis_ll(Line l, Line m)\n{\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// l:line, s:segment\nbool isis_ls(Line l, Line s)\n{\n    return isis_ll(l, s) &&\n           (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// s:segment, t:segment\nbool isis_ss(Line s, Line t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// p が l:line 上に存在するか\nbool isis_lp(Line l, Point p)\n{\n    return (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(Line s, Point p)\n{\n    return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// p から l に下ろした足との交点\nPoint proj(Line l, Point p)\n{\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// l:line, t:line の交点\nPoint is_ll(Line l, Line m)\n{\n    Point lv = l.b - l.a, mv = m.b - m.a;\n    assert(cross(lv, mv) != 0);\n    return l.a + lv * cross(mv, m.a - l.a) / cross(mv, lv);\n}\n\n// p, l:line の距離\nld dist_lp(Line l, Point p)\n{\n    return abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : std::min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n    if (isis_ss(s, t))\n        return 0;\n    return std::min({dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b)});\n}\n\n// a, b の垂直二等分線. a -> b を90度反時計回り回転\nLine bisector(Point a, Point b)\n{\n    Point mid = (a + b) * Point(0.5, 0);\n    return Line(mid, mid + (b - a) * Point(0, pi / 2));\n}\n\n// 直線 l, m のなす角を求める\nld degree_ll(Line l, Line m)\n{\n    ld cos_shita = dot(l, m) / (abs(l.b - l.a) * abs(m.b - m.a));\n    if (cos_shita < -1.0)\n        cos_shita = -1.0;\n    if (cos_shita > 1.0)\n        cos_shita = 1.0;\n    ld shita = acos(cos_shita);\n    // shita = sita * 180.0 / PI;\n    return shita;\n}\n\n// c1, c2 の交点\nstd::vector<Point> is_cc(Circle c1, Circle c2)\n{\n    std::vector<Point> res;\n    ld d = abs(c1.p - c2.p);\n    ld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n    ld dfr = c1.r * c1.r - rc * rc;\n    if (abs(dfr) < eps)\n        dfr = 0.0;\n    else if (dfr < 0.0)\n        return res; // no intersection\n    ld rs = sqrt(dfr);\n    Point diff = (c2.p - c1.p) / d;\n    res.emplace_back(c1.p + diff * Point(rc, rs));\n    if (dfr != 0.0)\n        res.emplace_back(c1.p + diff * Point(rc, -rs));\n    return res;\n}\n\nstd::vector<Point> is_lc(Circle c, Line l)\n{\n    std::vector<Point> res;\n    ld d = dist_lp(l, c.p);\n    if (d < c.r + eps)\n    {\n        ld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n        Point nor = (l.a - l.b) / abs(l.a - l.b);\n        res.emplace_back(proj(l, c.p) + len * nor);\n        res.emplace_back(proj(l, c.p) - len * nor);\n    }\n    return res;\n}\n\nstd::vector<Point> is_sc(Circle c, Line l)\n{\n    std::vector<Point> v = is_lc(c, l), res;\n    for (Point p : v)\n        if (isis_sp(l, p))\n            res.emplace_back(p);\n    return res;\n}\n\n// p から c への接線\nstd::vector<Line> tangent_cp(Circle c, Point p)\n{\n    std::vector<Line> ret;\n    Point v = c.p - p;\n    ld d = abs(v);\n    ld l = sqrt(norm(v) - c.r * c.r);\n    if (std::isnan(l))\n    {\n        return ret;\n    }\n    Point v1 = v * Point(l / d, c.r / d);\n    Point v2 = v * Point(l / d, -c.r / d);\n    ret.emplace_back(Line(p, p + v1));\n    if (l < eps)\n        return ret;\n    ret.emplace_back(Line(p, p + v2));\n    return ret;\n}\n\n// c1, c2 の共通接線\nstd::vector<Line> tangent_cc(Circle c1, Circle c2)\n{\n    std::vector<Line> ret;\n    if (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps)\n    {\n        Point center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n        ret = tangent_cp(c1, center);\n    }\n    if (abs(c1.r - c2.r) > eps)\n    {\n        Point out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n        std::vector<Line> nret = tangent_cp(c1, out);\n        ret.insert(ret.end(), nret.begin(), nret.end());\n    }\n    else\n    {\n        Point v = c2.p - c1.p;\n        v /= abs(v);\n        Point q1 = c1.p + v * Point(0, 1) * c1.r;\n        Point q2 = c1.p + v * Point(0, -1) * c1.r;\n        ret.emplace_back(Line(q1, q1 + v));\n        ret.emplace_back(Line(q2, q2 + v));\n    }\n    return ret;\n}\n\nusing Polygon = std::vector<Point>;\n\nld area(const Polygon &p)\n{\n    ld res = 0;\n    int n = p.size();\n    for (int i = 0; i < n; i++)\n    {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return res / 2;\n}\n\nbool is_counter_clockwise(const Polygon &poly)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n        angle += arg((c - b) / (b - a));\n    }\n    return angle > eps;\n}\n\n// 0 => out\n// 1 => on\n// 2 => in\nint is_in_polygon(const Polygon &poly, Point p)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p))\n            return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\n// 凸包\nPolygon convex_hull(std::vector<Point> ps)\n{\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(), ps.end());\n    Polygon ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸包カット\nPolygon convex_cut(const Polygon &ps, Line l)\n{\n    int n = ps.size();\n    Polygon Q;\n    for (int i = 0; i < n; i++)\n    {\n        Point A = ps[i], B = ps[(i + 1) % n];\n        Line m = Line(A, B);\n        if (ccw(l.a, l.b, A) != -1)\n            Q.emplace_back(A);\n        if (ccw(l.a, l.b, A) * ccw(l.a, l.b, B) < 0 && isis_ll(l, m))\n            Q.emplace_back(is_ll(l, m));\n    }\n    return Q;\n}\n\nvoid add_point(std::vector<Point> &ps, Point p)\n{\n    for (Point q : ps)\n        if (abs(q - p) < eps)\n            return;\n    ps.emplace_back(p);\n}\n\n// Voronoi 図: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3668810\n// polygon を ps でボロノイ分割する時の ps[index] に割り当てられる多角形\nPolygon voronoi(const Polygon &polygon, const std::vector<Point> &ps, int index)\n{\n    Polygon p = polygon;\n    int n = ps.size();\n    for (int j = 0; j < n; j++)\n    {\n        if (index == j)\n            continue;\n        Line l = bisector(ps[index], ps[j]);\n        p = convex_cut(p, l);\n    }\n    return p;\n}\n\nvoid solve_cgl_1_a()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_b()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << 2 * ret.real() - p.real() << \" \" << 2 * ret.imag() - p.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_c()\n{\n    auto p0 = input_point(), p1 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p2 = input_point();\n        int ret = ccw(p0, p1, p2);\n        if (ret == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else if (ret == 2)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (ret == -2)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\nvoid solve_cgl_2_a()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line l(p0, p1), m(p2, p3);\n        if (!isis_ll(l, m))\n        {\n            cout << 2 << endl;\n        }\n        else if (eq(dot(l.b - l.a, m.b - m.a), 0))\n        {\n            cout << 1 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n}\n\nvoid solve_cgl_2_b()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << (isis_ss(s1, s2) ? 1 : 0) << endl;\n    }\n}\n\nvoid solve_cgl_2_c()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        auto ret = is_ll(s1, s2);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_2_d()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << fixed << setprecision(10) << dist_ss(s1, s2) << endl;\n    }\n}\n\nvoid solve_cgl_3_a()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    cout << fixed << setprecision(10) << area(p) << endl;\n}\n\nvoid solve_cgl_3_b()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    auto cv = convex_hull(p);\n    cout << (eq(area(p), area(cv)) ? 1 : 0) << endl;\n}\n\nvoid solve_cgl_3_c()\n{\n    Polygon ps;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        int ret = is_in_polygon(ps, p);\n        cout << ret << endl;\n    }\n}\n\nvoid solve_cgl_4_a()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    auto ret = convex_hull(ps);\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_4_b: 凸多角形の直径\n\nvoid solve_cgl_4_c()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        auto l = Line(p0, p1);\n        auto ret = convex_cut(ps, l);\n        cout << fixed << setprecision(10) << area(ret) << endl;\n    }\n}\n\n// cgl_5_a: 最近点対\n\n// cgl_6_a: 線分交差\n\nvoid solve_cgl_7_a()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    cout << ls.size() << endl;\n}\n\nvoid solve_cgl_7_d()\n{\n    auto p = input_point();\n    ld r;\n    cin >> r;\n    Circle c(p, r);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        Line l(p0, p1);\n        auto ret = is_lc(c, l);\n        assert(ret.size() <= 2);\n        sort(ret.begin(), ret.end());\n        cout << ret[0].real() << \" \" << ret[0].imag();\n        if (ret.size() == 2)\n        {\n            cout << \" \" << ret[1].real() << \" \" << ret[1].imag();\n        }\n        cout << endl;\n    }\n}\n\nvoid solve_cgl_7_e()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ret = is_cc(c0, c1);\n    if ((int)ret.size() == 1)\n        ret.push_back(ret[0]);\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_f()\n{\n    auto p = input_point();\n    auto p0 = input_point();\n    ld r0;\n    cin >> r0;\n    Circle c(p0, r0);\n    auto ls = tangent_cp(c, p);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_lc(c, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_g()\n{\n    ld r0, r1;\n    auto p0 = input_point();\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_sc(c0, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_7_h: 円と多角形の共通部分(は?)\n// 参考実装: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2114290\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    solve_cgl_3_c();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass point {\npublic:\n\tint x, y;\n\tpoint() {}\n\tpoint(int a, int b) { x = a; y = b; }\n\tpoint operator +( point p ) { return point( x + p.x, y + p.y ); }\n\tpoint operator -( point p ) { return point( x - p.x, y - p.y ); }\n\tpoint operator *( int a ) { return point( x * a, y * a ); }\n\tpoint operator /( int a ) { return point( x / a, y / a ); }\n};\n\nint dot( point a, point b ) { return a.x * b.x + a.y * b.y; }\nint cross( point a, point b ) { return a.x * b.y - a.y * b.x; }\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\tvector<point> g( n );\n\tfor( int i = 0; i < n; i++ ) {\n\t\tcin >> g[i].x >> g[i].y;\n\t}\n\n\tint q;\n\tcin >> q;\n\tfor( int i = 0; i < q; i++ ) {\n\t\tpoint p;\n\t\tcin >> p.x >> p.y;\n\t\tbool x = false;\n\t\tint ans = 0;\n\t\tfor( int j = 0; j < n; j++ ) {\n\t\t\tpoint a = g[j] - p;\n\t\t\tpoint b = g[(j + 1) % n] - p;\n\t\t\tif( dot( a, b ) <= 0 && cross( a, b ) == 0 ) { ans = 1; break; }\n\t\t\tif( a.y > b.y ) swap( a, b );\n\t\t\tif( a.y <= 0 && b.y > 0 && cross( a, b ) > 0 ) x = !x;\n\t\t}\n\t\tif( ans == 0 && x ) ans = 2;\n\t\tcout << ans << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <array>\n#include <assert.h>\n#include <bitset>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <istream>\n\n#include <map>\n#include <math.h>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    class point\n    {\n    public:\n        numeric_type x, y;\n\n        point(numeric_type x = 0, numeric_type y = 0) : x(x), y(y) {}\n\n        point<numeric_type> &operator-=(const point<numeric_type> &ri)\n        {\n            x -= ri.x;\n            y -= ri.y;\n            return *this;\n        }\n\n        friend point<numeric_type> operator-(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) -= b;\n        }\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, point<numeric_type> &p)\n    {\n        return is >> p.x >> p.y;\n    }\n\n    template <typename numeric_type>\n    numeric_type imag(point<numeric_type> a)\n    {\n        return a.y;\n    }\n \n    template <typename numeric_type>\n    numeric_type cross(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.y - a.y * b.x;\n    }\n\n    template <typename numeric_type>\n    numeric_type dot(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.x + a.y * b.y;\n    }\n\n#include <stdint.h>\n\n    template <typename T>\n    std::istream &operator>>(std::istream &is, std::vector<T> &vec)\n    {\n        for (auto &value : vec)\n            is >> value;\n        return is;\n    }\n\n} \n\n#include <experimental/optional>\n\n#define _NEXT(i) (((i) + 1) == n ? 0 : ((i) + 1))\n\nnamespace asl\n{\n    template <typename numeric_type>\n    using polygon = std::vector<point<numeric_type>>;\n\n    enum PointInPolygon\n    {\n        OUT = 0,\n        ON = 1,\n        IN = 2,\n    };\n\n    template <typename numeric_type>\n    PointInPolygon contains(const polygon<numeric_type> &P, const point<numeric_type> &p)\n    {\n        bool in = false;\n        for (int i = 0, n = P.size(); i < n; ++i)\n        {\n            point<numeric_type> a = P[i] - p, b = P[_NEXT(i)] - p;\n            if (imag(a) > imag(b))\n                std::swap(a, b);\n\n            if (imag(a) <= 0 && 0 < imag(b))\n                if (cross(a, b) < 0)\n                    in = !in;\n\n            if (cross(a, b) == 0 && dot(a, b) <= 0)\n                return PointInPolygon::ON;\n        }\n        return in ? PointInPolygon::IN : PointInPolygon::OUT;\n    }\n\n} \n\n#include <random>\n\n#define endl '\\n'\n\nusing namespace std;\nusing namespace asl;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(1);\n    cout << fixed;\n\n    int n;\n    cin >> n;\n\n    polygon<int> pol(n);\n    cin >> pol;\n\n    int q;\n    cin >> q;\n\n    while (q--)\n    {\n        point<int> p;\n        cin >> p;\n\n        cout << contains(pol, p) << endl;\n    }\n\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem \nusing namespace placeholders;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P c;R r;};\n\nauto& operator >> (istream& is,P& p){ R x,y; is >> x >> y,p=P(x,y); return is;}\nauto& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline P vec(L l){return l.t-l.s;}\nauto sdot = bind(sgn,bind(dot,_1,_2,_3));\nauto sdet = bind(sgn,bind(det,_1,_2,_3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/vec(l)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(0,vec(a),vec(b))==0;}\nbool parallel(L a,L b) {return sdet(0,vec(a),vec(b))==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(0,vec(a),vec(b));\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n#define at(a,i) (a[(i + a.size()) % a.size()])\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tR sum=0.0;\n\trep(i,pol.size()) sum+=det(0,at(pol,i),at(pol,i+1));\n\treturn abs(sum/2.0L);\n}\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\trep(i,pol.size())if(sdet(at(pol,i),at(pol,i+1),at(pol,i+2))<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint res=0;\n\tauto simag = [](const P &p){return sgn(imag(p));};\n\trep(i,pol.size()){\n\t\tP a=at(pol,i),b=at(pol,i+1);\n\t\tif(sdet(p,a,b)==0 and sdot(p,a,b)<=0) return 1;\n\t\tbool f=simag(p-a)>=0,s=simag(p-b)<0;\n\t\tif(simag(b-a)*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n// polygon realation determination???(possible non-convex) \n// verified: not AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check={l.s,l.t};\n\trep(i,pol.size()){\n\t\tL edge={at(pol,i),at(pol,i+1)};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\n\tauto cmp_x=[](P a,P b)->bool{\n\t\tint sr = sgn(real(a-b)), si = sgn(imag(a-b));\n\t\treturn sr ? sr < 0 :si < 0;\n\t};\n\t\n\tsort(begin(check),end(check),cmp_x);\n\trep(i,check.size()-1){\n\t\tP m=(at(check,i)+at(check,i+1))/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\trep(i,pol.size()){\n\t\tP a = at(pol,i),b=at(pol,i+1);\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma region Geometry\nconst double EPS=1e-8,PI=acos(-1);\ninline bool EQ(double a,double b){return fabs(b-a)<EPS;}\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) const {return Point{x+p.x,y+p.y};}\n    Point operator-(Point p) const {return Point{x-p.x,y-p.y};}\n    Point operator*(double t) const {return Point{x*t,y*t};}\n    Point operator*(Point p) const {return Point{x*p.x-y*p.y,x*p.y+y*p.x};}\n    Point operator/(double t) const {return Point{x/t,y/t};}\n    bool operator<(const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n    friend istream &operator>>(istream &is,Point &p){\n        is >> p.x >> p.y;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Point p){\n        os << fixed << setprecision(10) << p.x << ' ' << p.y;\n        return os;\n    }\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n    friend istream &operator>>(istream &is,Line &l){\n        is >> l.a >> l.b;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Line l){\n        os << l.a << \" to \" << l.b;\n        return os;\n    }\n};\n\nstruct Segment:Line{\n    Segment(){}\n    Segment(Point a,Point b):Line(a,b){}\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c,double r):c(c),r(r){}\n    friend istream &operator>> (istream &is,Circle &c){\n        is >> c.c >> c.r;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Circle &c){\n        os << c.c << ' ' << c.r;\n        return os;\n    }\n};\n\ntypedef vector<Point> Polygon;\nistream &operator>>(istream &is,Polygon &p){\n    for (int i=0;i<p.size();++i) is >> p[i];\n    return is;\n}\n\ndouble dot(const Point &a,const Point &b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(const Point &a,const Point &b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(const Point &a){\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point &a){\n    return sqrt(norm(a));\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\nPoint proj(const Line &l,const Point &p){\n    double t=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*t;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\nPoint refl(const Line &l,const Point &p){\n    return p+(proj(l,p)-p)*2.0;\n}\n\nPoint rotate(const Point &p,double theta){\n    return Point(cos(theta)*p.x-sin(theta)*p.y,sin(theta)*p.x+cos(theta)*p.y);\n}\ndouble arg(const Point &p){\n    return atan2(p.y,p.x);\n}\ndouble get_angle(const Point &a,const Point &b,const Point &c){\n    const Point v=b-a,w=c-b;\n    double alpha=arg(v),beta=arg(w);\n    if (alpha>beta) swap(alpha,beta);\n    double theta=beta-alpha;\n    return min(theta,2*PI-theta);\n}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\nint ccw(const Point &a,Point b,Point c){\n    b=b-a,c=c-a;\n    if (cross(b,c)>EPS) return COUNTER_CLOCKWISE;\n    if (cross(b,c)<-EPS) return CLOCKWISE;\n    if (dot(b,c)<-EPS) return ONLINE_BACK;\n    if (norm(b)<norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\nbool orthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\nbool orthogonal(const Point &a,const Point &b,const Point &c,const Point &d){\n    return orthogonal(b-a,d-c);\n}\nbool orthogonal(const Line &l,const Line &m){\n    return EQ(dot(l.b-l.a,m.b-m.a),0.0);\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\nbool parallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\nbool parallel(const Point &a,const Point &b,const Point &c,const Point &d){\n    return parallel(b-a,d-c);\n}\nbool parallel(const Line &l,const Line &m){\n    return EQ(cross(l.b-l.a,m.b-m.a),0.0);\n}\n\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\nbool intersect(const Line &l,const Line &m){\n    return abs(cross(l.b-l.a,m.b-m.a)>EPS||abs(cross(l.b-l.a,m.b-m.a))<EPS);\n}\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.b-l.a,s.a-l.a)*cross(l.b-l.a,s.b-l.a)<EPS;\n}\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.a,s.b,p)==0;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0&&ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\nbool intersect(const Circle &c,const Line &l){\n    return (norm(proj(l,c.c)-c.c)-c.r*c.r)<=EPS;\n}\nint intersect(const Circle &c,const Segment &s){\n    if (norm(proj(s,c.c)-c.c)-c.r*c.r>EPS) return 0;\n    double d1=abs(c.c-s.a),d2=abs(c.c-s.b);\n    if (d1<c.r+EPS&&d2<c.r+EPS) return 0;\n    if (d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS) return 1;\n    const Point h=proj(s,c.c);\n    if (dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\nint intersect(Circle c,Circle d){\n    if (c.r<d.r) swap(c,d);\n    double dist=abs(c.c-d.c);\n    if (c.r+d.r<dist) return 4;\n    if (EQ(c.r+d.r,dist)) return 3;\n    if (c.r-d.r<dist) return 2;\n    if (EQ(c.r-d.r,dist)) return 1;\n    return 0;\n}\n\ndouble distance(const Point &a,const Point &b){\n    return abs(b-a);\n}\ndouble distance(const Line &l,const Point &p){\n    return abs(p-proj(l,p));\n}\ndouble distance(const Line &l,const Line &m){\n    return intersect(l,m)?0:distance(l,m.a);\n}\ndouble distance(const Segment &s,const Point &p){\n    Point h=proj(s,p);\n    return intersect(s,h)?abs(h-p):min(abs(s.a-p),abs(s.b-p));\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\ndouble distance(const Segment &s,const Segment &t){\n    if (intersect(s,t)) return 0;\n    return min({distance(s,t.a),distance(s,t.b),distance(t,s.a),distance(t,s.b)});\n}\ndouble distance(const Line &l,const Segment &s){\n    return intersect(l,s)?0:min(distance(l,s.a),distance(l,s.b));\n}\n\nPoint crosspoint(const Line &l,const Line &m){\n    double d1=cross(l.b-l.a,m.b-m.a),d2=cross(l.b-l.a,l.b-m.a);\n    if (EQ(abs(d1),0.0)&&EQ(abs(d2),0.0)) return m.a;\n    return m.a+(m.b-m.a)*d2/d1;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\nPoint crosspoint(const Segment &s,const Segment &t){\n    assert(intersect(s,t));\n    return crosspoint(Line(s),Line(t));\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\nvector<Point> crosspoint(const Circle &c,const Line &l){\n    Point pr=proj(l,c.c);\n    Point e=(l.b-l.a)/abs(l.b-l.a);\n    if (EQ(distance(l,c.c),c.r)) return {pr};\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return {pr-e*base,pr+e*base};\n}\nvector<Point> crosspoint(const Circle &c,const Segment &s){\n    Line l=Line(s);\n    assert(intersect(c,l));\n    auto res=crosspoint(c,l);\n    if (intersect(c,l)==2) return res;\n    if (dot(l.a-res[0],l.b-res[0])<0) res.emplace_back(res[0]);\n    else res.pop_back();\n    return res;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\nvector<Point> crosspoint(const Circle &c,const Circle &d){\n    double dist=abs(c.c-d.c);\n    double a=acos((c.r*c.r+dist*dist-d.r*d.r)/(2*c.r*dist));\n    double t=arg(d.c-c.c);\n    Point p1=c.c+Point(cos(t+a),sin(t+a))*c.r,p2=c.c+Point(cos(t-a),sin(t-a))*c.r;\n    return {p1,p2};\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_C\nCircle circumcenter(Point a,Point b,const Point &c){\n    a=(a-c)*0.5;\n    b=(b-c)*0.5;\n    Point center=c+crosspoint(Line(a,a*Point{1,1}),Line{b,b*Point{1,1}});\n    return Circle{center,abs(c-center)};\n}\nvector<Point> center_given_radius(const Point &a,const Point &b,const double &r){\n    Point m=(b-a)*0.5;\n    double d1=abs(m);\n    vector<Point> res;\n    if (EQ(d1,0.0)||d1>r) return res;\n    double d2=sqrt(r*r-d1*d1);\n    Point n=m*Point{0.0,1.0}*d2/d1;\n    res.emplace_back(a+m+n);\n    if (d2>EPS) res.emplace_back(a+m-n);\n    return res;\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\nbool convex(const Polygon &p){\n    int n=p.size();\n    for (int i=0;i<n;++i){\n        if (ccw(p[(i+n-1)%n],p[i],p[(i+1)%n])==-1){\n            return false;\n        }\n    }\n    return true;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\nPolygon convex_hull(Polygon p){\n    int n=p.size(),k=0;\n    if (n<=2) return p;\n    sort(p.begin(),p.end());\n    Polygon ch(2*n);\n    for (int i=0;i<n;ch[k++]=p[i++]){\n        while(k>=2&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<0) --k;\n    }\n    for (int i=n-2,t=k+1;i>=0;ch[k++]=p[i--]){\n        while(k>=t&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<0) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\ndouble area(const Polygon &p){\n    int n=p.size();\n    double res=0;\n    for (int i=0;i<n;++i) res+=cross(p[i],p[(i+1)%n]);\n    return res*0.5;\n}\n\nstatic const int OUT=0,ON=1,IN=2;\nint contains(const Polygon &P,const Point &p){\n    int n=P.size();\n    bool res=false;\n    for (int i=0;i<n;++i){\n        Point a=P[i]-p,b=P[(i+1)%n]-p;\n        if (a.y>b.y) swap(a,b);\n        if (a.y<=0&&0<b.y&&cross(a,b)<0) res=!res;\n        if (cross(a,b)==0&&dot(a,b)<=0) return ON;\n    }\n    return res?IN:OUT;\n}\n\n#pragma endregion\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(1);\n    int n; cin >> n;\n    Polygon g(n);\n    for (int i=0;i<n;++i) cin >> g[i];\n    int q; cin >> q;\n    for (;q--;){\n        Point p; cin >> p;\n        cout << contains(g,p) << '\\n';\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long lint;\n  \n//定数\nconst double EPS = 1e-4;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n  \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n  \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n  \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n  \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n    \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n    \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n    \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n    \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n  \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n  \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n  \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n  \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n  \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n  \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n        \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n    \n    qs.resize(k - 1);\n    return (qs);\n}\n  \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n  \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n  \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n  \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n  \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n    \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n    \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n    \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n  \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n  \nint main()\n{\n    int n, q;\n      \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n      \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n          \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n            else {\n                assert(neq(abs(next - t), 0));\n                assert(neq(abs(p[j] - t), 0));\n                double th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n                fsum += th;\n            }\n        }\n        printf(\"%d\\n\", state ? state : 2 * geq(0, acos(-1)));\n    }\n      \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<double> Point;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(0.0, 0.0), double r = 0.0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\nconstexpr double EPS = (1e-9L);\nenum CCW { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\ndouble dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\ndouble cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(double a) { return abs(a) < EPS; }\nbool operator <(const Point &a, const Point &b) { return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b); }\nPoint project(Segment s, Point p) {\n\tVector base = s.fi - s.se;\n\tdouble r = dot(p - s.fi, base) / norm(base);\n\treturn s.fi + base * r;\n}\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint a = p2 - p1, b = p3 - p1;\n\tif (cross(a, b) > EPS) return 1;\n\tif (cross(a, b) < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.fi, s1.se, s2.fi, s2.se);\n}\ndouble getDistance(Point &a, Point &b) { return abs(a - b); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi));\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.se - s.fi, p - s.fi) < 0.0) return abs(p - s.fi);\n\tif(dot(s.fi - s.se, p - s.se) < 0.0) return abs(p - s.se);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment &s1, Segment &s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se)),\n\t\t\t\tmin(getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.se - s2.fi;\n\tdouble d1 = abs(cross(base, s1.fi - s2.fi));\n\tdouble d2 = abs(cross(base, s1.se - s2.fi));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.fi + (s1.se - s1.fi) * t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.se - l.fi) / abs(l.se - l.fi);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn mp(pr + e * base, pr - e * base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn mp(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = len(g);\n\tbool x = false;\n\tPoint a, b;\n\trep(i, 0, n) {\n\t\ta = g[i] - p;\n\t\tb = g[(i + 1) % n] - p;\n\t\tif(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif(a.imag() > b.imag()) swap(a, b);\n\t\tif(a.imag() < EPS && EPS < b.imag() && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint n; cin >> n;\n\tPolygon pg(n);\n\tdouble x, y;\n\trep(i, 0, n) {\n\t\tcin >> x >> y;\n\t\tpg[i] = Point(x, y);\n\t}\n\tint q; cin >> q;\n\trep(i, 0, q) {\n\t\tcin >> x >> y;\n\t\tP(contains(pg, Point(x, y)));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tbool judge = false;\n\tOwnVector2 p0 = vertices[0] - p;\n\n\tif (p0.length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n] - p;\n\t\tif (p1.length2() <= 0.00000000001 || (abs(p0.cross(p1)) <= 0.00000000000001 && p0.dot(p1) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (p0.y > p1.y)\n\t\t{\n\t\t\tswap(p0, p1);\n\t\t}\n\t\tif (p0.y <= 0 && 0 <= p1.y)\n\t\t{\n\t\t\tif (p0.cross(p1) < 0)\n\t\t\t{\n\t\t\t\tjudge = !judge;\n\t\t\t}\n\t\t}\n\t\n\t\tp0 = vertices[(i) % n] - p;\n\t}\n\n\treturn judge ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\n\nusing Point = complex<double>;\nostream &operator<<(ostream &os, Point &p) { os << p.real() << \" \" << p.imag(); }\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\ninline double dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ninline double cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\n\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\nstruct Segment : Line { Segment(Point a, Point b) : Line(a, b) {} };\nstruct Circle\n{\n    Point p; double r;\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\ninline bool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\ninline bool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\ntemplate<typename T = Line>\ninline Point getProjection(const T &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\ninline Point getReflection(const Line &l, const Point &p) { return p + (getProjection(l, p) - p) * 2.0; }\n//位置関係\ninline int ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return 1;\n    if(cross(b, c) < -EPS) return -1;\n    if(dot(b, c) < 0) return 2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n//点、直線、線分の交差\ninline bool isIntersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\ninline bool isIntersect(const Line &l, const Line &m) { return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS; }\ninline bool isIntersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\ninline bool isIntersect(const Line &l, const Segment &s) { return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS; }\ninline bool isIntersect(const Segment &s, const Segment &t) { return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0; }\n//距離\ninline double getDistance(const Point &a, const Point &b) { return abs(a - b); }\ninline double getDistance(const Line &l, const Point &p) { return abs(p - getProjection(l, p)); }\ninline double getDistance(const Segment &s, const Point &p)\n{\n    Point r = getProjection(s, p);\n    if(isIntersect(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ninline double getDistance(const Line &l, const Line &m) { return isIntersect(l, m) ? 0 : getDistance(l, m.a); }\ninline double getDistance(const Segment &s1, const Segment &s2)\n{\n    if(isIntersect(s1, s2)) return 0;\n    return min({getDistance(s1, s2.a), getDistance(s1, s2.b), getDistance(s2, s1.a), getDistance(s2, s1.b)});\n}\ninline double getDistance(const Line &l, const Segment &s)\n{\n    if(isIntersect(l, s)) return 0;\n    return min(getDistance(l, s.a), getDistance(l, s.b));\n}\ninline bool isIntersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < EPS; }\ninline bool isIntersect(const Circle &c, const Line &l) { return getDistance(l, c.p) <= c.r + EPS; }\ninline int isIntersect(const Circle &c, const Segment &l)\n{\n    if(norm(getProjection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n    const Point h = getProjection(l, c.p);\n    if(dot(l.a - h, l.b - h) < 0) return 2;\n    return 0;\n}\n//２つの円の共通接線の数\ninline int isIntersect(Circle c1, Circle c2)\n{\n    if(c1.r < c2.r) swap(c1, c2);\n    double d = abs(c1.p - c2.p);\n    if(c1.r + c2.r < d) return 4; //離れている\n    if(equals(c1.r + c2.r, d)) return 3; //外接する\n    if(c1.r - c2.r < d) return 2;//交わる\n    if(equals(c1.r - c2.r, d)) return 1;//内接する\n    return 0;//どちらかが内包する\n}\n//交差する点\ninline Point getCrossPoint(const Line &l, const Line &m)\n{\n    double a = cross(l.b - l.a, m.b - m.a), b = cross(l.b - l.a, l.b - m.a);\n    if(equals(abs(a), 0.0) and equals(abs(b), 0.0)) return m.a;\n    return m.a + (m.b - m.a) * b / a;\n}\ninline Point getCrossPoint(const Segment &l, const Segment &m) { return getCrossPoint(Line(l), Line(m)); }\n// 円と直線の交点\npair<Point, Point> getCrossPoint(const Circle &c, const Line l)\n{\n    assert(isIntersect(c, l));\n    Point pr = getProjection(l, c.p);\n    Point e = (l.b - l.a) / abs(l.b - l.a);\n    if(equals(getDistance(l, c.p), c.r)) return make_pair(pr, pr);\n    double base = sqrt(c.r * c.r - norm(pr - c.p));\n    return make_pair(pr - e * base, pr + e * base);\n}\n//円と線分の交点\npair<Point, Point> getCrossPoint(const Circle &c, const Segment &l)\n{\n    Line aa = Line(l.a, l.b);\n    if(isIntersect(c, l) == 2) return getCrossPoint(c, aa);\n    auto res = getCrossPoint(c, aa);\n    if(dot(l.a - res.first, l.b - res.first) < 0) res.second = res.first;\n    else res.first = res.second;\n    return res;\n}\npair<Point, Point > getCrossPoint(const Circle &c1, const Circle &c2)\n{\n    double d = abs(c1.p - c2.p);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n    Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n    Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n    return make_pair(p1, p2);\n}\n//円と点の接線\npair<Point, Point> getTangent(const Circle &c1, const Point &p2) { return getCrossPoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r))); }\n//多角形の面積\ndouble getArea(const vector<Point> &pol)\n{\n    double res = 0.0; int sz = pol.size();\n    for(int i = 0; i < sz; i++) res += cross(pol[i], pol[(i + 1) % sz]);\n    return res / 2.0;\n}\n//凸多角形か\nbool isConvex(const vector<Point> &pol)\n{\n    int sz = (int)pol.size();\n    for(int i = 0; i < sz; i++) { if(ccw(pol[(i + sz - 1) % sz], pol[i], pol[(i + 1) % sz]) == -1) return false; }\n    return true;\n}\n// 点と多角形の包含関係\nint isContain(const vector<Point> &pol, const Point &p)\n{\n    int sz = (int)pol.size();\n    int isIn = 0;\n    for(int i = 0; i <sz; ++i)\n    {\n        Point a = pol[i] - p, b = pol[(i + 1) % sz] - p;\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= 0 && b.imag() > 0) if (cross(a, b) < 0) isIn = 1 - isIn;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1; //on\n    }\n    return (isIn ? 2 : 0);\n}\nsigned main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(8);\n    int n; cin >> n;\n    vector<Point> polygon;\n    for(int i = 0; i < n; i++)\n    {\n        double x, y; cin >> x >> y;\n        polygon.push_back(Point(x, y));\n    }\n    int q; cin >> q;\n    for(int i = 0; i < q; i++)\n    {\n        double x, y; cin >> x >> y;\n        cout << isContain(polygon, Point(x, y)) << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n\n/*\nint main(){\n    cout<<angle_of_the_two_edges(0, 0, 1, 0, 2, 0.1)/M_PI *180;\n}\n*/\n\nint main(int argc, const char * argv[]){\n\n    \n    \n    int n;\n    while(cin>>n){\n        double p_xy[10000][2]={0};\n        for(int i=0; i<n; i++){\n            cin>>p_xy[i][0]>>p_xy[i][1];\n        }\n        int q;\n        cin>>q;\n        for(int i=0; i<q; i++){\n            int tx,ty;\n            cin>>tx>>ty;\n            cout<<inside_and_outside_the_determination_of_the_polygon_and_point(n, p_xy, tx, ty)<<endl;\n\n\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex <double> point;\nvector <point> pol;\n\nbool eq(double a,double b){\n  return (abs(a-b)<=(1e-9));\n}\n\nbool on_segment(point a,point b,point c){\n  return eq(abs(b-a),abs(a-c)+abs(b-c));\n}\n\ndouble get_r(point a,point b,point c){\n  b-=a,c-=a;\n  b*=conj(c);\n  return arg(b);\n}\n\nint solve(point a){\n  for(int i=0;i<pol.size();i++)\n    if(on_segment(pol[i],pol[(i+1)%pol.size()],a)) return 1;\n \n  double sum=0;\n  for(int i=0;i<pol.size();i++)\n    sum+=get_r(a,pol[i],pol[(i+1)%pol.size()]);\n  \n  if(eq(sum,0))return 0;\n  return 2;\n}\n\n\nint main(){\n  int n;\n  cin>>n;\n  for(int i=0;i<n;i++) {\n    double a,b;\n    cin>>a>>b;\n    pol.push_back(point(a,b));\n  }\n\n  int q;\n  cin>>q;\n  while(q--){\n    double a,b;\n    cin>>a>>b;\n    cout<<solve(point(a,b))<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<string>\n#include<set>\n#include<map>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<((int)(n));i++)\n#define reg(i,a,b) for(int i=((int)(a));i<=((int)(b));i++)\n#define irep(i,n) for(int i=((int)(n))-1;i>=0;i--)\n#define ireg(i,a,b) for(int i=((int)(b));i>=((int)(a));i--)\ntypedef long long int lli;\ntypedef pair<int,int> mp;\n#define fir first\n#define sec second\n#define IINF INT_MAX\n#define LINF LLONG_MAX\n\nstruct pos{\n\tdouble x,y;\n\tdouble norm,norm2;\n\tpos tov(pos a){\n\t\treturn (a-(*this));\n\t}\n\tpos operator+(pos a)const{\n\t\tpos res=a;\n\t\tres.x+=x; res.y+=y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos operator-(pos a)const{\n\t\tpos res=(*this);\n\t\tres.x-=a.x; res.y-=a.y;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tpos scalar(double a){\n\t\tpos res=(*this);\n\t\tres.x*=a; res.y*=a;\n\t\tres=pos(res.x,res.y);\n\t\treturn res;\n\t}\n\tdouble dot(pos a){\n\t\treturn x*a.x + y*a.y;\n\t}\n\tdouble cross(pos a){\n\t\treturn x*a.y - y*a.x;\n\t}\n\tdouble theta(pos a){\n\t\tdouble nt=dot(a)/(norm*a.norm);\n\t\tnt=acos(max(-1.0,min(1.0,nt)));\n\t\tdouble ns=(cross(a)/(norm*a.norm));\n\t\tif(ns<0)nt*=-1;\n\t\treturn nt;\n\t}\n\tpos(double ix,double iy){\n\t\tx=ix; y=iy;\n\t\tnorm2=x*x+y*y;\n\t\tnorm=sqrt(norm2);\n\t}\n\tpos(){}\n\tstring str(){\n\t\tchar ns[50];\n\t\tsprintf(ns,\"(%lf %lf)\",x,y);\n\t\treturn\tstring(ns);\n\t}\n\tstatic pos polar(double r,double t){\n\t\treturn pos(r*cos(t),r*sin(t));\n\t}\n};\n\nstruct line{\n\tpos p,q;\n\tpos vec;\n\tstring str(){\n\t\treturn (\"(\"+p.str()+\"-\"+q.str()+\")\");\n\t}\n\tbool iscross(line a){\n\t\tdouble da,db;\n\t\tda=vec.cross( p.tov(a.p) );\n\t\tdb=vec.cross( p.tov(a.q) );\n\t\tif(da*db>=0)return false;\n\t\tda=a.vec.cross( a.p.tov(p) );\n\t\tdb=a.vec.cross( a.p.tov(q) );\n\t\treturn (da*db<0);\n\t}\n\tline(pos ip,pos iq){\n\t\tp=ip; q=iq;\n\t\tvec=p.tov(q);\n\t}\n\tline(){}\n\tdouble dist(pos a){\n\t\tif(p.tov(a).dot( p.tov(q) )<0)return p.tov(a).norm;\n\t\tif(q.tov(a).dot( q.tov(p) )<0)return q.tov(a).norm;\n\t\treturn abs(vec.cross(p.tov(a))/vec.norm);\n\t}\n\tdouble dist(line a){\n\t\tif(iscross(a))return 0;\n\t\treturn min( min(dist(a.p),dist(a.q)) , min(a.dist(this->p),a.dist(this->q)));\n\t}\n};\n\ndouble lowofcos_getcos(double a,double b,double c){\n\treturn ((a*a+b*b-c*c)/(2*a*b));\n}\n\nstruct circle{\n\tpos p;\n\tdouble r;\n\t\n\tline getintersection(circle a){\n\t\tpos cv=p.tov(a.p);\n\t\tdouble br=atan2(cv.y,cv.x);\n\t\tdouble dr=acos(lowofcos_getcos( r, cv.norm, a.r));\n\t\t\n\t\tpos p1= p+pos::polar(r,br+dr);\n\t\tpos p2= p+pos::polar(r,br-dr);\n\t\t\n\t\treturn line(p1,p2);\n\t}\n\tcircle(pos ip,double ir){\n\t\tp=ip; r=ir;\n\t}\n\tcircle(){}\n};\n\nstruct polygon{\n\tvector<pos> ps;\n\tpolygon(){}\n\tdouble area(){\n\t\tdouble res=0;\n\t\trep(i,ps.size()){\n\t\t\tpos no=ps[i],to=ps[(i+1)%ps.size()];\n\t\t\tres+=(no.x+to.x)*(no.y-to.y);\n\t\t}\n\t\treturn abs(res)/2;\n\t}\n\tpolygon(pos a,pos b){\n\t\tps.push_back(a);\n\t\tps.push_back(pos(a.x,b.y));\n\t\tps.push_back(b);\n\t\tps.push_back(pos(b.x,a.y));\n\t}\n\tline gete(int a){\n\t\treturn line(ps[a],ps[(a+1)%ps.size()]);\n\t}\n\tint isin(pos a){\n\t\t//????????¢??????\n\t\t/*\n\t\tif((a.x-ps[0].x)*(a.x-ps[2].x)>0)return false;\n\t\tif((a.y-ps[0].y)*(a.y-ps[2].y)>0)return false;\n\t\treturn true;\n\t\t*/\n\t\t\n\t\t//?????´??????2,?????£????????????1,?????????0\n\t\tdouble as=0;\n\t\trep(i,ps.size()){\n\t\t\tline ne=gete(i);\n\t\t\tif(ne.dist(a)<=0)return 1;\n\t\t\tpos v1=a.tov(ne.p);\n\t\t\tpos v2=a.tov(ne.q);\n\t\t\tas+=v1.theta(v2);\n\t\t}\n\t\tif(abs(as)<1e-6)return 0;\n\t\treturn 2;\n\t}\n\t\n\tpolygon mult(polygon a){\n\t\treturn a;\n\t}\n};\n\n\nint main(void){\n\tint n;\n\tscanf(\"%d\",&n);\n\tpolygon pl;\n\trep(i,n){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tpl.ps.push_back(pos(p,q));\n\t}\n\t\n\tint qn;\n\tscanf(\"%d\",&qn);\n\trep(i,qn){\n\t\tdouble p,q;\n\t\tscanf(\"%lf%lf\",&p,&q);\n\t\tprintf(\"%d\\n\",pl.isin(pos(p,q)));\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n//typedef unsigned long long ll;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n//#define rep(i, n) for (ll i = 0; i < (n); ++i)\n//#define sz(x) ll(x.size())\n//typedef pair<ll, int> P;\n//typedef pair<ll, ll> P;\n//const double INF = 1e10;\n//const ll INF = LONG_LONG_MAX / 100;\n//const ll INF = (1ll << 31) - 1;\n//const ll INF = 1e15;\nconst ll MINF = LONG_LONG_MIN;\n//const int INF = INT_MAX / 10;\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\n//typedef pair<int, int> P;\n//typedef pair<double, double> P;\n\n//bool contain(set<P> &s, P a) { return s.find(a) != s.end(); }\n\n//ifstream myfile(\"C:\\\\Users\\\\riku\\\\Downloads\\\\0_00.txt\");\n//ofstream outfile(\"log.txt\");\n//outfile << setw(6) << setfill('0') << prefecture << setw(6) << setfill('0') << rank << endl;\n// std::cout << std::bitset<8>(9);\nconst int mod = 1000000007;\ntypedef priority_queue<long long, vector<long long>, greater<long long>> PQ_ASK;\n\n\nvoid print_line(vector<string> &line) {\n    if (line.size() == 0ll) {\n        cout << endl;\n        return;\n    }\n    for (ll i = 0; i < line.size(); i++) {\n        cout << line[i];\n        if (i == line.size() - 1) cout << endl;\n        else cout << ' ';\n    }\n}\n\n#define EPS (1e-10)\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n\n    Point operator*(double a) { return Point(a * x, a * y); }\n\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n\n    double norm() { return x * x + y * y; }\n\n    bool operator<(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\n\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON;\n        if (a.y > b.y) swap(a, b);\n        if (a.y<EPS && EPS < b.y && cross(a, b)>EPS) x = !x;\n    }\n    return x ? IN : OUT;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    Polygon g;\n    for (int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n        g.push_back(Point(x, y));\n    }\n    int q;\n    cin >> q;\n    rep (i, q) {\n        double x, y;\n        cin >> x >> y;\n        cout << contains(g, Point(x, y)) << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (int i = 0; i < n; i++)\n\t\tb.real(max(mx, po[i].X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i-1)]);\n  return abs(res/2.0);\n}\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c*conj(b));\n}\n\nint inPolygon(vec &t,P p){\n  double sum=0;\n  for(int i=0;i<(int)t.size();i++){\n    P a=t[i],b=(i==0?t.back():t[i+1]);\n    if( ccw(a,b,p) == 0 )return 1;// on\n    sum+= Arg(p,a,b);\n  }\n  if( abs(sum) < eps )return 0;//out\n  else  return 2;//in\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\ntemplate<class T> \ninline void read(T& x)\n{\n\tchar c = getchar(); T p = 1, n = 0;\n\twhile(c < '0' || c > '9'){if(c == '-') p = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9'){n = n * 10 + c - '0'; c = getchar();}\n\tx = p * n;\n}\ntemplate<class T, class U>\ninline void read(T& x, U& y){read(x), read(y);}\ntemplate<class T, class U, class V>\ninline void read(T& x, U& y, V& z){read(x), read(y), read(z);}\nconst double eps = 1e-10;\nconst int maxn = 1e3;\nstruct Point\n{\n\tdouble x, y;\n\tPoint(int a, int b){x = a, y = b;}\n\tPoint(double a = .0, double b = .0){x = a, y = b;}\n\tPoint operator+(const Point& r){return Point(x + r.x, y + r.y);}\n\tPoint operator-(const Point& r){return Point(x - r.x, y - r.y);}\n\tPoint operator*(double r){return Point(r * x, r * y);}\n\tdouble operator*(const Point& r){return x * r.y - y * r.x;}\n} g[maxn];\nint n; \ntypedef Point Vector;\ninline double dot(Vector l, Vector r){return l.x * r.x + l.y * r.y;}\nint contains(Point p)\n{\n\tbool x = false;\n\tfor(int i = 0; i < n; ++i)\n\t{\n\t\tVector a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tdouble cross = a * b;\n\t\tif(abs(cross) < eps && dot(a, b) < eps) return 1;\n\t\tif(a.y > b.y) swap(a, b), cross = a * b;\n\t\tif(a.y < eps && eps < b.y && cross > eps) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\nint main()\n{\n\tread(n);\n\tfor(int i = 0, x, y; i < n; ++i) read(x, y), g[i] = Point(x, y);\n\tint q; read(q);\n\twhile(q--)\n\t{\n\t\tint x, y; read(x, y);\n\t\tprintf(\"%d\\n\", contains(Point(x, y)));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n \nusing namespace std;\n \n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n#define not_equal(a,b) (!equal(a,b))\n#define lt(a,b) (a-b < -EPS)\n#define PI acos(-1)\n \nstruct Point{\n  double x,y;\n \n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n \n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n  bool operator < (const Point &p)const{ return x != p.x ? x < p.x : y < p.y; }\n};\n \ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble norm(const Point &p){ return dot(p,p); }\ndouble abs(const Point &p){ return sqrt(norm(p)); }\ndouble dist(const Point &a,const Point &b){\n  return sqrt(pow(a.x-b.x,2) + pow(a.y-b.y,2));\n}\nPoint rotate(const Point &p,double th){\n  return Point(cos(th)*p.x-sin(th)*p.y,sin(th)*p.x+cos(th)*p.y);\n}\nPoint rotate90(const Point &p){ return Point(-p.y,p.x); }\n \nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n \nostream &operator << (ostream &os,Point &p){ \n  return os << \"(\" << p.x << \",\" << p.y << \")\";\n}\n \n#define curr(G,i) (G[i%G.size()])\n#define next(G,i) (G[(i+1)%G.size()])\ntypedef vector<Point> Polygon;\n \nint containmentPoP(const Polygon &pg,const Point &p){\n  int N = pg.size();\n  bool in = false;\n  for(int i = 0 ; i < N ; i++){\n    Point a = curr(pg,i)-p, b = next(pg,i)-p;\n    if(a.y > b.y){ swap(a,b); }\n    if(a.y <= 0 && 0 < b.y && cross(a,b) < 0){ in = !in; }\n    if(cross(a,b) == 0 && dot(a,b) <= 0){ return 1; }\n  }\n  return (in ? 2 : 0); \n}\n \nint main(){\n  int N,Q;\n  cin >> N;\n  Polygon pg(N);\n  for(int i = 0 ; i < N ; i++){\n    cin >> pg[i];\n  }\n  cin >> Q;\n  while(Q--){\n    Point p;\n    cin >> p;\n    cout << containmentPoP(pg,p) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x, double y) :x(x), y(y) {}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\nOwnVector2 vertices[100];\n\nint JudgeType(OwnVector2 p, int n)\n{\n\tint count = 0;\n\tOwnVector2 p0 = vertices[0];\n\tbool bFlag0x = (p.x <= p0.x);\n\tbool bFlag0y = (p.y <= p0.y);\n\n\tif ((p0 - p).length2() <= 0.000000000001)\n\t{\n\t\treturn 1;\n\t}\n\n\tfor (int i = 1; i < n + 1; i++)\n\t{\n\t\tOwnVector2 p1 = vertices[(i) % n];\n\t\tif ((p1 - p).length2() <= 0.00000000001 || (abs((p0 - p).cross(p1 - p)) <= 0.00000000000001 && (p0 - p).dot(p1 - p) <= 0.0))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tbool bFlag1x = (p.x <= p1.x);\n\t\tbool bFlag1y = (p.y <= p1.y);\n\t\tif (bFlag0y != bFlag1y)\n\t\t{\n\t\t\tif (bFlag0x == bFlag1x)\n\t\t\t{\n\t\t\t\tif (bFlag0x)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (p.x <= (p0.x + (p1.x - p0.x)*(p.y - p0.y) / (p1.y - p0.y)))\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tp0 = p1;\n\t\tbFlag0x = bFlag1x;\n\t\tbFlag0y = bFlag1y;\n\t}\n\n\treturn count % 2 == 0 ? 0 : 2;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvertices[i] = OwnVector2(x, y);\n\t}\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py;\n\t\tcin >> px >> py;\n\t\tOwnVector2 p(px, py);\n\n\t\tprintf(\"%d\\n\", JudgeType(p,n));\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<fstream>\n#include<cstdio>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#include<vector>\n#define EPS (1e-5)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n//#define cout fout\n//#define cin fin\n#define CCW 1\n#define YCW -1\n#define ONB 3\n#define ONF 4\n#define ONS 0\n#define IN 2\n#define ON 1\n#define OUT 0\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0):c(c), r(r){}\n};\n\ntypedef std::vector<Point> Polygon;\ntypedef Point Vector;\n\n#ifdef cin\nifstream fin(\"CGL_1_C-in29.txt\");\n#endif\n\n#ifdef cout\nofstream fout(\"out.txt\");\n#endif\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistanceSP(Point p, Point p1, Point p2);\ndouble angle(Vector a, Vector b);\nbool doIntersect(Point p1, Point p2, Point p3, Point p4);\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4);\nint clockwise(Point p0, Point p1, Point p2);\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4);\npair<Point, Point> crossPoint(Point p1, Point p2, Point center, double r);\nVector rotateVector(Vector v, double angle); //rad\nPoint project(Point p, Point p1, Point p2);\npair<Point, Point> crossPointsCC(Circle c1, Circle c2);\nint doesContain(Polygon g, Point p);\n\nint main() {\n    int i, n, q, x, y, tmpx, tmpy;\n\tPolygon g;\n\tcin >> n;\n\tfor (i = 0; i < n; i++) {\n\t\tcin >> tmpx >> tmpy;\n\t\tPoint tmpp(tmpx, tmpy);\n\t\tg.push_back(tmpp);\n\t}\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tcout << doesContain(g, p) << endl;\n\t}\n\t\n#ifdef cin\n\tfin.close();\n#endif\n\n#ifdef cout\n\tfout.close();\n#endif\n\treturn 0;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (equals(dot(a, b), a.abs() * b.abs()))return 0.0;\n\telse if (equals(dot(a, b), (-1) * a.abs() * b.abs()))return M_PI;\n\tif (cross(a, b) > 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif (clockwise(p1, p2, p3) *  clockwise(p1, p2, p4) * clockwise(p3, p4, p1) * clockwise(p3, p4, p1) == 0) {\n\t\treturn true;\n\t} else if (-1 <= clockwise(p1, p2, p3) * clockwise(p1, p2, p4) && clockwise(p1, p2, p3) * clockwise(p1, p2, p4) <= 0 && -1 <= clockwise(p3, p4, p1) * clockwise(p3, p4, p2) && clockwise(p3, p4, p1) * clockwise(p3, p4, p2) <= 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nint clockwise(Point p0, Point p1, Point p2) {\n\tif (p2 == p0 || p2 == p1) {\n\t\t//cout << \"ON_SEGMENT\" << endl;\n\t\treturn ONS;\n\t} else if (angle(p1 - p0, p2 - p0) == 0.0) {\n\t\tif ((p1 - p0).norm() < (p2 - p0).norm()) {\n\t\t\t//cout << \"ONLINE_FRONT\" << endl;\n\t\t\treturn ONF;\n\t\t} else {\n\t\t\t//cout << \"ON_SEGMENT\" << endl;\n\t\t\treturn ONS;\n\t\t}\n\t} else if(angle(p1 - p0, p2 - p0) == M_PI){\n\t\t//cout << \"ONLINE_BACK\" << endl;\n\t\treturn ONB;\n\t} else {\n\t\tif (angle(p1 - p0, p2 - p0) > 0.0) {\n\t\t\t//cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\treturn CCW;\n\t\t} else {\n\t\t\t//cout << \"CLOCKWISE\" << endl;\n\t\t\treturn YCW;\n\t\t}\n\t}\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4) {\n\tdouble d1, d2, t;\n\td1 = fabs(cross(p2 - p1, p3 - p1) / (p2 - p1).norm());\n\td2 = fabs(cross(p2 - p1, p4 - p1) / (p2 - p1).norm());\n\tt = d1 / (d1 + d2);\n\treturn (p3 + (p4 - p3) * t);\n}\n\npair<Point, Point> crossPoint(Point p1, Point p2, Point center, double r) {\n\tVector pr = project(center, p1, p2) - center;\n\tdouble base = sqrt(r * r - pr.norm());\n\n\tVector ans1 = center + pr + (p2 - p1) / (p2 - p1).abs() * base;\n\tVector ans2 = center + pr - (p2 - p1) / (p2 - p1).abs() * base;\n\t\n\tif (ans1 < ans2) {\n\t\treturn make_pair(ans1, ans2);\n\t} else {\n\t\treturn make_pair(ans2, ans1);\n\t}\n\n}\n\nVector rotateVector(Vector v, double angle) {\n\tVector ans(v.x * cos(angle) - v.y * sin(angle), v.x * sin(angle) + v.y * cos(angle));\n\treturn ans;\n}\n\nPoint project(Point p, Point p1, Point p2) {\n\tVector hypo = p - p1, base = p2 - p1;\n\treturn (p1 + base * dot(hypo, base) / base.norm());\n}\n\npair<Point, Point> crossPointsCC(Circle c1, Circle c2) {\n\tdouble d = (c2.c - c1.c).abs();\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tPoint ans1 = c1.c + rotateVector(c2.c - c1.c, a) / d * c1.r, ans2 = c1.c + rotateVector(c2.c - c1.c, (-1) * a) / d * c1.r;\n\tif (ans1 < ans2) {\n\t\treturn make_pair(ans1, ans2);\n\t} else {\n\t\treturn make_pair(ans2, ans1);\n\t}\n}\n\nint doesContain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif(fabs(cross(a, b)) < EPS && dot(a, b) < EPS) {\n\t\t\treturn ON;\n\t\t}\n\t\tif (a.y > b.y) {\n\t\t\tPoint tmpp = a;\n\t\t\ta = b;\n\t\t\tb = tmpp;\n\t\t}\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {\n\t\t\tx = !x;\n\t\t}\n\t}\n\treturn (x ? 2 : 0);\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\n#define DIST(pt1, pt2) (sqrt(pow(pt1.x-pt2.x, 2) + pow(pt1.y-pt2.y, 2)))\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\nbool operator==(pt a, pt b) {\n  return (a.x == b.x && a.y == b.y);\n}\n\nint isLeft(pt P0, pt P1, pt P2) {\n    return ( (P1.x - P0.x) * (P2.y - P0.y)\n            - (P2.x -  P0.x) * (P1.y - P0.y) );\n}\n\nint xpoly(pt P, vector<pt> V) {\n    int n = V.size();\n    int    wn = 0;\n\n\n    for (int i = 0; i<n; i++) {\n        if (V[i].y <= P.y) {\n            if (V[i + 1].y  > P.y)\n            {\n                int l = isLeft(V[i], V[i + 1], P);\n                if (l > 0)\n                    ++wn;\n                else if (l == 0)\n                    return 1;\n            }\n        }\n        else {\n            if (V[i + 1].y <= P.y)\n            {\n                int l = isLeft(V[i], V[i + 1], P);\n                if (l < 0)\n                    --wn;\n                else if (l == 0)\n                    return 1;\n            }\n        }\n    }\n    return wn*2;\n}\n\nint main(void) {\n    int N, u, v;\n    cin >> N;\n    vector<pt> pts(N+1);\n    for (int i = 0; i < N; i++) {\n        cin >> u >> v;\n        pts[i] = pt{u, v};\n    }\n    pts[N] = pts[0];\n\n    int Q;\n    cin >> Q;\n    for (int i = 0; i < Q; i++) {\n        cin >> u >> v;\n        cout << xpoly(pt{u, v}, pts) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-3;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\t\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n \ntypedef pair<point,point> pp;\ntypedef vector<point> VP;\nconst point O{0,0};\n \nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tif(a.first==x||a.second==x){\n\t\t\treturn \"On_Segment\";\n\t\t}\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble ip=IP(A,X),cp=CP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"Counter_Clockwise\";\n\t\tif(cp<-eps) return \"Clockwise\";\n\t\tif(ip<-eps) return \"Online_Back\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"On_Segment\";\n\t\treturn \"Online_Front\";\n\t}\n\tstring Parallel_Orthogonal(pp a,pp b){\n\t\tpoint A=a.second-a.first,B=b.second-b.first;\n\t\tdouble ip=IP(A,B),cp=CP(A,B);\n\t\tstring f=Counter_Clockwise(pp(a.first,a.second),b.first),s=Counter_Clockwise(pp(a.first,a.second),b.second);\n\t\tif(f[0]!='C'&&s[0]!='C') return \"Agreement\";\n\t\tif(cp<eps&&cp>-eps) return \"Parallel\";\n\t\tif(ip<eps&&ip>-eps) return \"Orthogonal\";\n\t\telse return \"Commonly\";\n\t}\n\tpoint Inter(pp  a,double x,double y){\n\t\treturn (a.first*y+a.second*x)/(x+y);\n\t}\n\tpoint Exterior(pp a,double x,double y){\n\t\treturn (a.first*-y+a.second*x)/(x-y);\n\t}\n\tpoint Projection(pp a,point x){\n\t\tpoint A=x-a.first,B=a.second-a.first;\n\t\tdouble l=Length(O,B);\n\t\treturn B*IP(A,B)/(l*l)+a.first;\n\t}\t\n\tpoint Cross_Point(pp a,pp b){\n\t\tstring s=Parallel_Orthogonal(a,b);\n\t\tif(s[0]=='A') return point{inf,inf};\n\t\tif(s[0]=='P') return point{inf,0};\n\t\tpoint p=Projection(a,b.first),q=Projection(a,b.second);\n\t\tdouble pl=Length(b.first,p),ql=Length(b.second,q);\n\t\tstring S=Counter_Clockwise(a,b.first),T=Counter_Clockwise(a,b.second);\n\t\tif(S==T) return Exterior(b,pl,ql);\n\t\telse return Inter(b,pl,ql);\n\t}\n\tstring Containment_polyon_point(VP p,point x){\n\t\tpoint c;\n\t\tvector<double> cp(p.size());\n\t\tstring s,t;\n\t\tint ans=0;\n\t\tp.push_back(p[0]);\n\t\tp.push_back(p[1]);\n\t\tcp[0]=CP(point{1,0},p[1]-p[0]);\n\t\tfor(VP::iterator i=p.begin()+1;i!=p.end()-1;i++){\n\t\t\tpp tmp(*i,*(i+1));\n\t\t\tif(i!=p.end()-2) cp[i-p.begin()]=CP(point{1,0},*(i+1)-*i);\n\t\t\tc=Cross_Point(tmp,pp(x,point{x.x+1,x.y}));\n\t\t\ts=Counter_Clockwise(tmp,x);\n\t\t\tt=Counter_Clockwise(tmp,c);\n\t\t\tif(s[3]=='S') return \"On_side\";\n\t\t\tdouble cp1=cp[i-p.begin()],cp2=cp[i-p.begin()-1];\n\t\t\tif(c.x==inf||c.x<x.x||c==*(i+1)||t[3]!='S') continue;\n\t\t\tif(c==*i&&((cp1<=0&&cp2>=0)||(cp1>=0&&cp2<=0))) continue;\n\t\t\tans++;\n\t\t}\n\t\tif(ans%2==0) return \"not_Containment\";\n\t\treturn \"Containment\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n\tvoid Point_out(point p){\n\t\tcout<<p.x<<' '<<p.y<<endl;\n\t}\n};\n\nint N,Q;\npoint x;\nstring s;\nVP p;\n\nint main(){\n\tcout<<syosu(10);\n\tGeom geo;\n\tcin>>N;\n\tp=VP(N);\n\tfor(int i=0;i<N;i++) geo.Point_in(p[i]);\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tgeo.Point_in(x);\n\t\ts=geo.Containment_polyon_point(p,x);\n\t\tif(s==\"Containment\") cout<<2<<endl;\n\t\telse if(s==\"On_side\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint windingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint wn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q)){\n\t\t\tint ps = side(a, b, p), qs = side(a, b, q);\n\t\t\tif (qs >= 0) wn++;\n\t\t\tif (ps >= 0) wn--;\n\t\t}\n\t}\n\treturn wn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (windingN(po, a) ? IN : OUT);\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst pair<int, int> INF{329083291, 23409802};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\treturn (cross1 < 0) != (cross2 < 0);\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int j = 0; j < q; j++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define db double\nconst db eps = 1e-10;\n\nstruct Point{\n    db x, y;\n    Point(db x=0, db y=0): x(x), y(y) {}    //必须有初始化\n    bool operator < (const Point &p){\n        return x < p.x || (x == p.x && y < p.y);\n    }\n};\n\ntypedef Point Vector;\nVector operator + (Vector a, Vector b){ return Point(a.x+b.x, a.y+b.y);}\nVector operator - (Point a, Point b){ return Vector(a.x-b.x, a.y-b.y);}\nVector operator * (Vector a, db k){ return Vector(a.x*k, a.y*k);}\nVector operator / (Vector a, db k){ return Vector(a.x/k, a.y/k);}\n\n//inline将函数名为内联函数，不使用栈空间，直接运算，但不能有while,switch等复杂语句\ninline db dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n}\ninline db cross(Vector a, Vector b){\n    return a.x*b.y - b.x*a.y;\n}\ndb length(Vector a){\n    return sqrt(dot(a, a));\n}\ndb angle(Vector a, Vector b){\n    return acos(dot(a, b) / length(a) / length(b));\n}\n\nint dcmp(db x){ //三态函数，eps间返回0，否则>eps返回1，反之-1\n    if(fabs(x) < eps) return 0;\n    return x < 0? -1: 1;\n}\nbool operator == (Point a, Point b){\n    return dcmp(a.x-b.x) == 0 && dcmp(a.y-b.y) == 0;\n}\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point p1=Point(0, 0), Point p2 = Point(0, 0)): p1(p1), p2(p2) {};\n};\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\nPoint project(Line l, Point p){\n    Vector a = l.p2 - l.p1, b = p - l.p1;\n    db len_a = dot(a, a);   //这里不加sqrt，是因为下面算投影长度时，要除以两次len_a\n    Vector tmp = a * (dot(a, b) / len_a);\n    return l.p1+tmp;\n}\nPoint reflect(Line l, Point p){\n    Point tmp = project(l, p);\n    return p + (tmp - p)*2;\n}\n\nint line_relation(Line l1, Line l2){\n    Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n    if(cross(a, b) == 0)\n        return 1;\n//        puts(\"parallel\");\n    else if(dot(a, b) == 0)\n        return 0;\n//        puts(\"orthogonal\");\n    else\n        return -1;\n//        puts(\"others\");\n}\nint com_segment_relation(Point p0, Point p1, Point p2){\n    Vector a = p1-p0, b = p2-p0;\n    db flag = cross(p1-p0, p2-p0);\n    if(flag < 0)  return 2;\n    else if(flag > 0)  return 1;\n    else{       //重合\n        if(a.x*b.x < 0 || a.y*b.y < 0) return 3;\n        else if(length(a) < length(b)) return 4;\n        else return 5;\n    }\n}\nbool segment_intersection(Segment s1, Segment s2){\n    Point p1 = s1.p1, p2 = s1.p2, p3 = s2.p1, p4 = s2.p2;\n    if(p2 < p1) swap(p1, p2);\n    if(p4 < p3) swap(p3, p4);\n    if(p2 < p3 || p4 < p1)\n        return 0;       //同一直线上，最大最小排除\n    else if(cross(p2-p1, p3-p1)*cross(p2-p1, p4-p1) > 0 || cross(p4-p3, p1-p3)*cross(p4-p3, p2-p3) > 0)\n        return 0;\n    else\n        return 1;\n}\nPoint segment_cross_point(Segment s1, Segment s2){\n    if(!segment_intersection(s1, s2))\n        exit(0);\n    Vector a = s1.p2-s1.p1, b1 = s2.p1-s1.p1, b2 = s2.p2-s1.p1;\n    db len = length(a);\n    db h1 = fabs(cross(a, b1) / len);   //可以省去除len,求t时会消掉\n    db h2 = fabs(cross(a, b2) / len);\n    db t = h1 / (h1+h2);\n    return s2.p1+(s2.p2-s2.p1)*t;\n}\nPoint line_cross_point(Point P, Vector v, Point Q, Vector w){\n    if(cross(v, w) == 0)\n        exit(0);\n    Vector u = P - Q;\n    double t = cross(w, u) / cross(v, w);\n    return P+v*t;\n}\nbool onsegment(Segment s, Point p){\n    return dcmp(cross(s.p2-p, s.p1-p)) == 0 && dcmp(dot(s.p1-p, s.p2-p)) <= 0;  //顶点时，dot为0\n}\n\ninline db norm(db x){\n    return x*x;\n}\ninline db dist_PtoP(Point p1, Point p2){\n    return length(p2-p1);   //转换为向量模\n}\ndb dist_PtoS(Segment s, Point p){\n    if(s.p1 == s.p2) return length(p-s.p1);\n    Vector v1 = s.p2 - s.p1, v2 = p - s.p1, v3 = p - s.p2;\n    if(dcmp(dot(v1, v2) < 0))    return length(v2);\n    else if(dcmp(dot(v1, v3) > 0))    return length(v3);\n    else    return fabs(cross(v1, v2)) / length(v1);\n}\ninline db dist_PtoL(Line l, Point p){\n    db tmp = cross(l.p2-l.p1, p-l.p1) / length(l.p2-l.p1);\n    return fabs(tmp);\n}\ndb dist_StoS(Segment s1, Segment s2){\n    if(segment_intersection(s1, s2))\n        return 0;\n    db d1 = dist_PtoS(s2, s1.p1), d2 = dist_PtoS(s2, s1.p2), d3 = dist_PtoS(s1, s2.p1), d4 = dist_PtoS(s1, s2.p2);\n    return min(min(d1, d2), min(d3, d4));\n}\ndb dist_LtoL(Line l1, Line l2){\n    if(line_relation(l1, l2) == 1)\n        return dist_PtoL(l1, l2.p1);\n    return 0;\n}\n\ndb polygon_area(Polygon &pol){\n    int sz = pol.size();\n    db res = 0.0;\n    for(int i=1; i<sz-1; ++i){  //分为n-1个三角形\n        res += 0.5*cross(pol[i]-pol[0], pol[i+1]-pol[0]);\n    }\n    return fabs(res);\n}\n\nconst int maxn = 105;\nint convex_hull(Polygon &pol, int n){\n    sort(pol.begin(), pol.end());\n    int top = 0;\n    Point ch[maxn] = {0};\n    for(int i=0; i<n; ++i){\n        while(top > 1 && cross(ch[top-1] - ch[top-2], pol[i] - ch[top-1]) < 0) top --;\n        ch[top ++] = pol[i];\n    }\n    int mid = top;\n    for(int i=n-2; i>=0; --i){\n        while(top > mid && cross(ch[top-1] - ch[top-2], pol[i] - ch[top-1]) < 0) top --;\n        ch[top ++] = pol[i];\n    }\n//    printf(\"#%d\\n\", top);\n    if(n > 1) top --;\n    return top;\n}\nint point_in_polygon(Point p, Polygon &pol){\n    int wn = 0; //winging number\n    int n = pol.size();\n    for(int i=0; i<n; ++i){\n        if(onsegment(Segment(pol[i], pol[(i+1)%n]), p)) return 1;\n        int k = dcmp(cross(pol[(i+1)%n]-pol[i], p-pol[i]));\n        int d1 = dcmp(pol[i].y - p.y);\n        int d2 = dcmp(pol[(i+1)%n].y - p.y);\n        if(k > 0 && d1 <= 0 && d2 > 0) wn ++;\n        if(k < 0 && d2 <= 0 && d1 > 0) wn --;\n    }\n    if(wn != 0) return 2;\n    return 0;\n}\nint main()\n{\n    Point p1, p2, p3, p4;\n    int n;\n    cin >>n;\n    Polygon pol;\n    while(!pol.empty()) {pol.pop_back();}\n    while(n --){\n        cin >>p1.x >>p1.y;\n        pol.push_back(p1);\n    }\n    int t;\n    cin >>t;\n    n = pol.size();\n    while(t --){\n        cin >> p2.x >> p2.y;\n        cout << point_in_polygon(p2, pol) <<\"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    for (int i = 0; i < n; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    int NumCross = 0;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 30007, P.y + 30011)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n\ntemplate <class T>\ninline T sq(T x) { return x * x; }\n\nusing Real = long double;\nusing Point = std::complex<Real>;\nusing Segment = std::pair<Point, Point>;\nusing Polygon = std::vector<Point>;\n\nconst Real EPS = 1e-10;\nconst Point origin(0, 0);\n\n// 宇宙船演算子\ninline Real compare(Real a, Real b) {\n    if (std::abs(a - b) < EPS) return 0;\n    return a - b > 0 ? 1 : -1;\n}\n\ninline Real dist(Point a, Point b) {\n    return std::abs(a - b);\n}\n\ninline Real length(Segment s) {\n    return dist(s.first, s.second);\n}\n\n// inner product\ninline Real dot(Point x, Point y) {\n    return std::real(std::conj(x) * (y));\n}\n\n// outer product\ninline Real cross(Point x, Point y) {\n    return std::imag(std::conj(x) * (y));\n}\n\n// lに対するxの正射影\nPoint proj(Segment s, Point p) {\n    Real ratio = dot(s.second - s.first, p - s.first) / sq(length(s));\n    return s.first + (s.second - s.first) * ratio;\n}\n\n// lを軸としてxに対称な点\nPoint refl(Segment s, Point p) {\n    Point t = proj(s, p);\n    return t + (t - p);\n}\n\n// lに対するpの位置\n// 0: on segment\n// 1: counter clockwise  -1: clockwise\n// 2: online front       -2: online back\nint side(Segment s, Point p) {\n    Real c = cross(s.second - s.first, p - s.first);\n    if (compare(c, 0) != 0) return compare(c, 0);\n\n    Real d = dot(s.second - s.first, p - s.first);\n    if (compare(d, 0) < 0) return -2;\n\n    return (compare(length(Segment(s.first, p)), length(s)) > 0 ? 2 : 0);\n}\n\ninline bool isorthogonal(Segment s1, Segment s2) {\n    return compare(dot(s1.second - s1.first, s2.second - s2.first), 0) == 0;\n}\n\ninline bool isparallel(Segment s1, Segment s2) {\n    return compare(cross(s1.second - s1.first, s2.second - s2.first), 0) == 0;\n}\n\ninline bool intersect(Segment s1, Segment s2) {\n    return (side(s1, s2.first) * side(s1, s2.second) <= 0) &&\n           (side(s2, s1.first) * side(s2, s1.second) <= 0);\n}\n\nPoint intersection(Segment s1, Segment s2) {\n    Real c1 = cross(s2.second - s2.first, s1.second - s1.first);\n    Real c2 = cross(s2.second - s2.first, s1.first - s2.first);\n    return s1.first + (s1.second - s1.first) * (-c2 / c1);\n}\n\n// distanceのオーバーロード\nReal dist(Segment s, Point p) {\n    Point t = proj(s, p);\n    if (side(s, t) == 0) return dist(p, t);\n    return std::min(dist(p, s.first), dist(p, s.second));\n}\n\nReal dist(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0;\n    return std::min({dist(s1, s2.first),\n                     dist(s1, s2.second),\n                     dist(s2, s1.first),\n                     dist(s2, s1.second)});\n}\n\n// signed area\ninline Real triangle(Point a, Point b, Point c) {\n    return cross(b - a, c - a) / 2;\n}\n\nReal area(const Polygon& g) {\n    Real S = 0;\n    for (int i = 0; i < g.size(); ++i) {\n        S += triangle(origin, g[i], g[(i + 1) % g.size()]);\n    }\n    return S;\n}\n\nbool isconvex(const Polygon& g) {\n    for (int i = 0; i < g.size(); ++i) {\n        if (side(Segment(g[i], g[(i + 1) % g.size()]),\n                 g[(i + 2) % g.size()]) == -1) return false;\n    }\n    return true;\n}\n// 0: out  1: on  2: in\nint contain(const Polygon& g, Point p) {\n    bool in = false;\n    for (int i = 0; i < g.size(); ++i) {\n        if (side(Segment(g[i], g[(i + 1) % g.size()]), p) == 0) return 1;\n\n        Point a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n        if (compare(a.imag(), b.imag()) > 0) std::swap(a, b);\n        if (compare(a.imag(), 0) <= 0 &&\n            compare(b.imag(), 0) > 0 &&\n            compare(cross(a, b), 0) < 0) in = !in;\n    }\n    return in ? 2 : 0;\n}\n\n\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n\n    Polygon g(N);\n    for (auto& p : g) {\n        Real x, y;\n        cin >> x >> y;\n        p = Point(x, y);\n    }\n\n    int Q;\n    cin >> Q;\n    for (int q = 0; q < Q; ++q) {\n        Real x, y;\n        cin >> x >> y;\n        cout << contain(g, Point(x, y)) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef complex<double> Point;\n\ninline double cross(const Point& a, const Point& b){\n    return imag(conj(a) * b);\n}\n\ninline double dot(const Point& a, const Point& b){\n    return real(conj(a) * b);\n}\n\ntypedef vector<Point> Polygon;\n\nPoint next(const Polygon& g, int x){\n    return g[(x+1) % (int)g.size()];\n}\n\nint contains(const Polygon& g, const Point& p){\n    bool in = false;\n    for(int i=0; i<(int)g.size(); ++i){\n        Point a = g[i] - p, b = next(g, i) - p;\n        if(imag(b) < imag(a))swap(a, b);\n        if(imag(a) <= 0 && 0 < imag(b) && cross(a, b) < 0)in = !in;\n        if(cross(a, b) == 0 && dot(a, b) <= 0)return 1;\n    }\n    return in? 2: 0;\n}\n\nint main(){\n    int n;\n    cin >> n;\n    Polygon g;\n    while(n--){\n        int x, y;\n        cin >> x >> y;\n        g.emplace_back(x, y);\n    }\n    int q;\n    cin >> q;\n    while(q--){\n        int x, y;\n        cin >> x >> y;\n        cout << contains(g, Point(x, y)) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<complex>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> G;\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\nP pin(){\n\tdouble x,y;\n\tcin>>x>>y;\n\tP p(x,y);\n\treturn p;\n}\nvoid PIN(P* a,int n){\n\trep(i,n)a[i]=pin();\n}\ndouble dot(P a,P b){\n\treturn real(conj(a)*b);\n}\ndouble cross(P a,P b){\n\treturn imag(conj(a)*b);\n}\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\nP projection(L a,P p){\n\tdouble t=dot(p-a[0],a[0]-a[1])/norm(a[0]-a[1]);\n\treturn a[0]+t*(a[0]-a[1]);\n}\nP reflection(L a,P p){\n\treturn p+2.0*(projection(a,p)-p);\n}\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\nP intersect_ls(L a,L b){\n\tdouble t1=abs(cross(a[1]-a[0],b[0]-a[0]));\n\tdouble t2=abs(cross(a[1]-a[0],b[1]-a[0]));\n\treturn b[0]+(b[1]-b[0])*t1/(t1+t2);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble area(const G &g){\n    double S =0;\n    for(int i =0;i <g.size();i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\nbool inconvex(const G &g){\n\tint n=g.size();\n\trep(i,n)if(ccw(g[(i+n-1)%n],g[i%n],g[(i+1)%n])==-1)return false;\n\treturn true;\n}\nint contain(const G& g, const P& p) {\n\tbool in = false;\n\tint n=g.size();\n\trep(i,n){\n\t\tP a=g[i%n]-p;\n\t\tP b=g[(i+1)%n]-p;\n\t\tif(imag(a)>imag(b))swap(a, b);\n\t\tif(imag(a)<=0&&0<imag(b))if(cross(a,b)<0)in=!in;\n\t\tif(cross(a,b)==0&&dot(a,b)<=0)return 1;//ON\n\t}\n\treturn in?2:0;//IN : OUT;\n}\nint main(){\n\tint n;\n\tcin>>n;\n\tG g(n);\n\tPIN(&g[0],n);\n\tint m;\n\tcin>>m;\n\trep(i,m){\n\t\tP p=pin();\n\t\tcout<<contain(g,p)<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n, q;\n\t\n\tscanf(\"%d\", &n);\n\tPolygon p(n);\n\tfor (int i = 0; i < n; i++){\n\t\tscanf(\"%lf %lf\", &p[i].x, &p[i].y);\n\t}\n\t\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++){\n\t\tPoint t;\n\t\tscanf(\"%lf %lf\", &t.x, &t.y);\n\t\t\n\t\tint state = 0;\n\t\tint pl = 0, m = 0;\n\t\t\n\t\tfor (int j = 0; j < n; j++){\n\t\t\tPoint next = p[(j + 1) % n];\n\t\t\tif (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse if (ccw(p[j], next, t) < 0) m++;\n\t\t\telse pl++;\n\t\t}\n\t\tif (state) puts(\"1\");\n\t\telse if (m == n || pl == n) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "// This is free and unencumbered software released into the public domain.\n\n// Anyone is free to copy, modify, publish, use, compile, sell, or\n// distribute this software, either in source code form or as a compiled\n// binary, for any purpose, commercial or non-commercial, and by any\n// means.\n\n// In jurisdictions that recognize copyright laws, the author or authors\n// of this software dedicate any and all copyright interest in the\n// software to the public domain. We make this dedication for the benefit\n// of the public at large and to the detriment of our heirs and\n// successors. We intend this dedication to be an overt act of\n// relinquishment in perpetuity of all present and future rights to this\n// software under copyright law.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// For more information, please refer to <http://unlicense.org>\n\n#include <algorithm>\n#include <complex>\n#include <vector>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\ntypedef long double Real;\ntypedef complex<Real> Point;\nstruct Line {\n  Point a, b;\n  bool operator<(const Line &line) const;\n};\ntypedef vector<Point> Polygon;\n\nconstexpr Real PI = acos(Real(-1));\n\n// 比較関数\nint sgn(const Real &a, const Real &b = 0) {\n  constexpr Real EPS = 1e-8;\n  return a < b - EPS ? -1 : a > b + EPS ? 1 : 0;\n}\n\nbool near(const Point &a, const Point &b) { return !sgn(norm(a - b)); }\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return sgn(a.X, b.X) ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nbool Line::operator<(const Line &line) const {\n  return !near(a, line.a) ? a < line.a : b < line.b;\n}\n\n// 平方根\nReal sr(const Real &a) { return sqrt(max<Real>(a, 0)); }\n\n// 内積\nReal dot(const Point &a, const Point &b) { return a.X * b.X + a.Y * b.Y; }\n// 外積\nReal det(const Point &a, const Point &b) { return a.X * b.Y - a.Y * b.X; }\n\n// 線分のベクトル\nPoint vec(const Line &a) { return a.b - a.a; }\n\n// 線分abに対する点cの位置\nenum CCW { FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, ON = 16 };\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if (near(a, c) || near(b, c)) {\n    return ON;\n  }\n  int s = sgn(det(b - a, c - a));\n  if (s) {\n    return s > 0 ? LEFT : RIGHT;\n  }\n  return (a < b) == (b < c) ? FRONT : (c < a) == (a < b) ? BACK : ON;\n}\nint ccw(const Line &l, const Point &p) { return ccw(l.a, l.b, p); }\n\n// 有向角度\nReal arg(const Point &base, const Point &a, const Point &b) {\n  return arg((b - base) / (a - base));\n}\n\nLine sortBase;\nbool lessArg(const Point &a, const Point &b) {\n  Real ang1 = arg(sortBase.a, sortBase.b, a);\n  Real ang2 = arg(sortBase.a, sortBase.b, b);\n  return sgn(ang1, ang2) ? ang1 < ang2 : norm(a) > norm(b);\n}\n\n// 射影\nPoint proj(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + ((p - l.a) / v).X * v;\n}\nPoint refl(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + conj((p - l.a) / v) * v;\n}\n\n// 交差判定\nbool eqL(const Line &a, const Line &b) {\n  return !sgn(det(vec(a), vec(b))) && !sgn(det(vec(a), b.a - a.a));\n}\nbool iLL(const Line &a, const Line &b) {\n  return sgn(det(vec(a), vec(b))) || !sgn(det(vec(a), b.a - a.a));\n}\nbool iLLs(const Line &a, const Line &b) { return sgn(det(vec(a), vec(b))); }\nbool iLS(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) <= 0;\n}\nbool iLSs(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) < 0;\n}\nbool iSS(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return ((cwa | cwb) & ON) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nbool iSSs(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// 交点\nPoint pLL(const Line &a, const Line &b) {\n  return a.a + vec(a) * (det(vec(b), b.a - a.a) / det(vec(b), vec(a)));\n}\n\n// 距離\nReal dLP(const Line &l, const Point &p) {\n  return abs(det(vec(l), p - l.a) / vec(l));\n}\nReal dSP(const Line &s, const Point &p) {\n  if (dot(vec(s), p - s.a) < 0) {\n    return abs(p - s.a);\n  }\n  if (dot(vec(s), p - s.b) > 0) {\n    return abs(p - s.b);\n  }\n  return dLP(s, p);\n}\nReal dLL(const Line &a, const Line &b) {\n  if (iLL(a, b)) {\n    return 0;\n  }\n  return dLP(a, b.a);\n}\nReal dLS(const Line &a, const Line &b) {\n  if (iLS(a, b)) {\n    return 0;\n  }\n  return min(dLP(a, b.a), dLP(a, b.b));\n}\nReal dSS(const Line &a, const Line &b) {\n  if (iSS(a, b)) {\n    return 0;\n  }\n  return min({dSP(a, b.a), dSP(a, b.b), dSP(b, a.a), dSP(b, a.b)});\n}\n\n// 円\nstruct Circle {\n  Point c;\n  Real r;\n};\n\n// 交差判定\nbool iCP(const Circle &c, const Point &p) {\n  return sgn(abs(p - c.c), c.r) <= 0;\n}\nbool iCL(const Circle &c, const Line &l) { return sgn(c.r, dLP(l, c.c)) >= 0; }\nbool iCS(const Circle &c, const Line &s) { return sgn(c.r, dSP(s, c.c)) >= 0; }\nbool iCSc(const Circle &c, const Line &s) {\n  return iCS(c, s) && sgn(c.r, max(abs(s.a - c.c), abs(s.b - c.c))) >= 0;\n}\nbool iCC(const Circle &a, const Circle &b) {\n  return sgn(abs(a.c - b.c), a.r + b.r) <= 0;\n}\nbool iCCc(const Circle &a, const Circle &b) {\n  return iCC(a, b) && sgn(abs(a.c - b.c), abs(a.r - b.r)) >= 0;\n}\n\n// 交点\npair<Point, Point> pCC(const Circle &a, const Circle &b) {\n  Real x = (norm(a.c - b.c) + a.r * a.r - b.r * b.r) / (2 * abs(a.c - b.c));\n  Point e = (b.c - a.c) / abs(b.c - a.c);\n  Point y = e * Point(0, sr(a.r * a.r - x * x));\n  return make_pair(a.c + e * x - y, a.c + e * x + y);\n}\npair<Point, Point> pCL(const Circle &c, const Line &l) {\n  Point x = proj(l, c.c);\n  Point y = vec(l) / abs(vec(l)) * sr(c.r * c.r - norm(x - c.c));\n  return make_pair(x - y, x + y);\n}\n\n// 角の内外判定 角abの内部にあれば正、辺上は0、外部は負\nint sAP(const Point &a, const Point &b, const Point &c) {\n  return sgn(det(a, c)) - sgn(det(b, c)) - sgn(det(a, b));\n}\n\n// 多角形の面積\nReal aPol(const Polygon &vp) {\n  Real res = 0;\n  for (int i = 0; i < int(vp.size()); ++i) {\n    res += det(vp[i], vp[(i + 1) % vp.size()]);\n  }\n  return res / 2;\n}\n\n// 多角形の内外判定 内部:1、周上:0、外部:-1\nint sGP(const Polygon &pol, const Point &p) {\n  int side = -1;\n  for (int i = 0; i < int(pol.size()); ++i) {\n    Point p0 = pol[i] - p, p1 = pol[(i + 1) % pol.size()] - p;\n    if (ccw(p0, p1, 0) == ON) {\n      return 0;\n    }\n    if (p0.Y > p1.Y) {\n      swap(p0, p1);\n    }\n    if (sgn(p0.Y) <= 0 && 0 < sgn(p1.Y) && sgn(det(p0, p1)) > 0) {\n      side *= -1;\n    }\n  }\n  return side;\n}\n\n// 凸包\nPolygon convexHull(vector<Point> p) {\n  int m = -1, n = p.size();\n  if (n < 3) {\n    return p;\n  }\n  vector<Point> q(n * 2);\n  sort(p.begin(), p.end());\n  for (int i = 0; i < n; q[++m] = p[i++]) {\n    for (; m > 0 && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  for (int i = n - 2, r = m; i >= 0; q[++m] = p[i--]) {\n    for (; m > r && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  q.resize(m);\n  return q;\n}\n\n// 凸多角形切断\nPolygon convexCut(const Polygon &p, const Line &l) {\n  vector<Point> q;\n  for (int i = 0; i < int(p.size()); ++i) {\n    if (ccw(l.a, l.b, p[i]) != RIGHT) {\n      q.push_back(p[i]);\n    }\n    Line s = {p[i], p[(i + 1) % p.size()]};\n    if (iLSs(l, s)) {\n      q.push_back(pLL(l, s));\n    }\n  }\n  return q;\n}\n\n// 線分をマージする\nvector<Line> merge(vector<Line> s) {\n  for (int i = 0; i < int(s.size()); ++i) {\n    if (s[i].b < s[i].a) {\n      swap(s[i].a, s[i].b);\n    }\n  }\n  sort(s.begin(), s.end());\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j]) && !iLLs(s[i], s[j])) {\n        s[j].b = max(s[i].b, s[j].b);\n        s.erase(s.begin() + i--);\n        break;\n      }\n    }\n  }\n  return s;\n}\n\n// 線分アレンジメント 隣の点への辺のみを持つ\nvector<vector<int>> sArr(vector<Line> s, vector<Point> &vp) {\n  s = merge(s);\n  for (int i = 0; i < int(s.size()); ++i) {\n    vp.push_back(s[i].a);\n    vp.push_back(s[i].b);\n  }\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j])) {\n        vp.push_back(pLL(s[i], s[j]));\n      }\n    }\n  }\n  sort(vp.begin(), vp.end());\n  vp.erase(unique(vp.begin(), vp.end(), near), vp.end());\n  vector<vector<int>> graph(vp.size());\n  for (int i = 0; i < int(s.size()); ++i) {\n    vector<pair<Real, int>> v;\n    for (int j = 0; j < int(vp.size()); ++j) {\n      if (ccw(s[i].a, s[i].b, vp[j]) == ON) {\n        v.push_back(make_pair(norm(vp[j] - s[i].a), j));\n      }\n    }\n    sort(v.begin(), v.end());\n    for (int j = 0; j < int(v.size()) - 1; ++j) {\n      graph[v[j + 1].second].push_back(v[j].second);\n      graph[v[j].second].push_back(v[j + 1].second);\n    }\n  }\n  return graph;\n}\n\n#include <iomanip>\n#include <iostream>\n\nint main() {\n  int n;\n  cin >> n;\n  Polygon poly;\n  for (int i = 0; i < n; ++i) {\n    Real x, y;\n    cin >> x >> y;\n    poly.emplace_back(x, y);\n  }\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Real x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    int r = sGP(poly, p);\n    switch (r) {\n    case 1:\n      cout << 2 << endl;\n      break;\n    case 0:\n      cout << 1 << endl;\n      break;\n    case -1:\n      cout << 0 << endl;\n      break;\n    }\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int SIZE = 210;\nconst double eps = 1e-10;\n\ntypedef complex<double> P;\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-8; //整数の時はゼロ\n\nnamespace std{\n  template<class T> bool operator<(const complex<T> &a, const complex<T> &b){\n    return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n  }\n};\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//内積\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//外積\ndouble cross(P a, P b) {\n  return (a * conj(b)).imag();\n}\n\n//反時計回り\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > P_eps) return 1; //COUNTER_CLOCKWISE\n  if(cross(b-a,c-a) < -P_eps) return -1; //CLOCKWISE\n  if(dot(b-a,c-a) < -P_eps) return -2; //ONLINE_BACK\n  if(dot(a-b,c-b) < -P_eps) return 2; //ONLINE_FRONT\n  return 0; //ON_SEGMENT\n}\n\n/* 線分abと点cの距離 */\ndouble distanceSP(P a, P b, P c) {\n  if ( dot(b-a, c-a) < P_eps ) return abs(c-a);\n  if ( dot(a-b, c-b) < P_eps ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* 直線abと点cの距離 */\ndouble distanceLP(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* 円の点包含判定 */\ndouble isContainedCP(P c, double r, P p){\n  return abs(c-p) < r - P_eps; //円周上を含まない\n  //return abs(c-p) < r + P_eps; //円周上を含む\n}\n\n/* 直線交差判定 */\nbool isIntersectedLL(P a1, P a2, P b1, P b2){\n  return abs(cross(a1-a2, b1-b2)) > P_eps;\n}\n\n/* 線分交差判定 */\nbool isIntersectedSS(P a1, P a2, P b1, P b2){\n  \n  //線分a と 直線b\n  P_type a = ccw(b1,b2,a1);\n  P_type b = ccw(b1,b2,a2);\n  \n  //線分b と 直線a\n  P_type c = ccw(a1,a2,b1);\n  P_type d = ccw(a1,a2,b2);\n  \n  return a*b < P_eps && c*d < P_eps; // T字を除く時は -P_eps\n}\n\n/* 円交差判定 */\nbool isIntersectedCC(P c1, double r1, P c2, double r2){\n  double dist = abs(c1 - c2);\n  \n  return abs(r1 - r2) < dist + P_eps && dist - P_eps < r1 + r2; //外接内接を含む\n  //return abs(r1 - r2) < dist - P_eps && dist + P_eps < r1 + r2; //外接内接を除く\n}\n\n/* 円直線交差判定 */\nbool isIntersectedCL(P c, double r, P a1, P a2){\n  return distanceLP(a1, a2, c) < r + P_eps; //接する場合を含まない場合 - P_eps\n}\n\n/* 円線分交差判定 */\nbool isIntersectedCS(P c, double r, P a1, P a2){\n  return isContainedCP(c,r,a1) &&\n    isContainedCP(c,r,a2) &&\n    distanceLP(a1, a2, c) < r + P_eps; //接する場合を含まない場合 - P_eps\n}\n\n/* 直線/線分交点 */\nP getCrosspointLL(P a1, P a2, P b1, P b2) {\n  //assert(isIntersectedLL(a1, a2, b1, b2));\n  //assert(isIntersectedSS(a1, a2, b1, b2));\n  P a = a2 - a1;\n  P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nP getCrosspointSS(P a1, P a2, P b1, P b2){\n  return getCrosspointLL(a1, a2, b1, b2);\n}\n\n/* 円交点 */\npair<P,P> getCrosspointCC(P c1, double r1, P c2, double r2){\n  //assert(isIntersectedCC(c1, r1, c2, r2));\n  \n  double dist = abs(c1 - c2);\n  double a = acos((r1*r1 + dist * dist - r2 * r2) / (2 * r1 * dist));\n  return {c1 + polar(r1, arg(c2 - c1) + a), c1 + polar(r1, arg(c2 - c1) - a)};\n}\n\n/* 円線分交点 */\npair<P,P> getCrosspointCS(P c, double r, P a1, P a2){\n  //assert(isIntersectedCS(c1, r1, c2, r2));\n  \n  P base1 = a2 - a1;\n  P proj = a1 + base1 * dot(c - a1, base1) / norm(base1); //射影\n  P e = (a2 - a1) / abs(a2 - a1);\n  P base2 = sqrt(r*r - norm(proj - c));\n  return {proj + e*base2, proj - e*base2};\n}\n\n/* 多角形-点包含 */\nint iscontainedPolyP(int n, P *g, P p){\n  bool f = false;\n  for(int i=0;i<n;i++){\n    P a = g[i] - p, b = g[(i+1)%n] - p;\n    if(abs(cross(a,b)) < P_eps && dot(a,b) < P_eps) return 1; //辺上\n    if(a.imag() > b.imag()) swap(a,b);\n    if(a.imag() < P_eps && P_eps < b.imag() && cross(a,b) > P_eps) f = !f;\n  }\n  return f * 2; //内部 or 外部\n}\n\n/* 射影(直線abとpからの垂線との交点) */\nP getProject(P a, P b, P p){\n  P base = b - a;\n  return a + base * dot(p - a, base) / norm(base);\n}\n\n/* 反射(直線abを対称軸としたpの線対称の位置) */\nP getReflection(P a, P b, P p){\n  return p + (getProject(a, b, p) - p) * 2.0;\n}\n\nint main(){\n  int n;\n  P p[SIZE];\n\n  scanf(\"%d\",&n);\n\n  for(int i=0;i<n;i++){\n    int x, y;\n\n    scanf(\"%d%d\",&x,&y);\n    p[i] = P(x,y);\n  }\n\n  int q;\n  scanf(\"%d\",&q);\n\n  for(int i=0;i<q;i++){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n\n    printf(\"%d\\n\", iscontainedPolyP(n, p, P(x,y)));\n  }\n  \n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n//点p在线段s上的投影\nPoint project(Segment s,Point p){\n    Vector base = s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\nconst int ONLINE_BACK = 2;          //p2在向量p1-p0的反方向延长线上\nconst int ONLINE_FRONT = -2;        //p2在向量p1-p0的正方向延长线上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n//两个线段的交点\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/* 圆与直线的交点\n * 交点为一个的时候返回两个相同的点\n * 没有交点则退出\n */\n\nbool intersect(Circle c,Line l){\n    return sign(getDistanceLP(l,c.c)-c.r)<=0;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n    assert(intersect(c,l));         //没有交点\n    Point pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n    double base=sqrt(c.r*c.r-(pr-c.c).norm());\n    return make_pair(pr+e*base,pr-e*base);\n}\n\n\n//圆与圆的交点\n\nbool intersect(Circle c1,Circle c2){\n    return sign(getDistance(c1.c,c2.c)-(c1.r+c2.r))<=0;\n}\n\ndouble arg(Vector p){\n    return atan2(p.y,p.x);\n}\n\nVector polar(double r,double a){\n    return Point(cos(a)*r,sin(a)*r);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    assert(intersect(c1,c2));\n    double d=(c1.c-c2.c).abs();\n    double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\n//点的内包(判断点与多边形的关系)\n//多边形内返回2\n//多边形上返回1\n//多边形外返回0\nint contains(Polygon g,Point p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n\nint main(){\n    Polygon g;\n    int n;\n    Point p;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        g.push_back(p);\n    }\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        printf(\"%d\\n\",contains(g,p));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n/*\n * cross product\n */\n\nconst double EPS = 1e-8;\n\ntypedef pair<double, double> pt;\n#define x first\n#define y second\n\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\ndouble dot(pt a, pt b){\n    return b.x*a.x + b.y*a.y;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\n\n/*\n * segment segment intersection\n */\n\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\n\nbool collinear(seg a, seg b) { // all four points collinear\n    cout << a.a.x << \" \" << a.a.y << endl;\n    cout << a.b.x << \" \" << a.b.y << endl;\n    \n    cout << b.a.x << \" \" << b.a.y << endl;\n    cout << b.b.x << \" \" << a.b.y << endl;\n\n    return zero(cross(a.b - a.a, b.a - a.a)) &&\n           zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nint intersect(seg a, seg b) {\n    if (ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n        ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b)) return 1;\n\n    return 0;\n }\n\nint inPolygon(vector<pt> polygon, pt from){\n    int sum = 0;\n    for (int j = 0; j < polygon.size(); ++j){\n        int next = (j+1)%polygon.size();\n\n        pt inf = make_pair(100001, from.y);\n        seg line_inf = make_pair(from, inf);\n        seg line_to = make_pair(polygon[j], polygon[next]);\n\n        pt a = polygon[j] - from; pt b = polygon[next] - from;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) {\n            return 1;\n        }\n        sum += intersect(line_inf, line_to);\n    }\n    if (sum % 2) return 2;\n    return 0;\n}\n\nint main(){\n\n    vector<pt> polygon;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i){\n        int x, y;\n        cin >> x >> y;\n        polygon.push_back(make_pair(x, y));\n    }\n    cin >> n;\n    for (int i = 0; i < n; ++i){\n        int p, q;\n        cin >> p >> q;\n        cout << inPolygon(polygon, make_pair(p, q)) << endl;\n\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll long long\n#define inf 0x3f3f3f3f\n#define fi first\n#define se second\n#define pb push_back\n#define mkp make_pair\n#define pa pair<int,int>\nconst int N=2e5+10;\nconst int mod=998244353;\nusing namespace std;\n\nstruct point{ int x,y;}p[N];\nint xmi=inf,xma=-inf,ymi=inf,yma=-inf;\nll cross(point a,point b,point c){return 1LL*(b.x-a.x)*(c.y-a.y)-1LL*(c.x-a.x)*(b.y-a.y);}\nint pnpoly(int x,int y,int n)\n{\n    if(x<xmi||x>xma||y<ymi||y>yma) return 0;\n    int c=0;\n    for(int i=0,j=n-1;i<n;j=i++)\n    {\n      if(p[i].x==x&&p[i].y==y) return 1;\n      if(p[j].x==x&&p[j].y==y) return 1;\n\n      if(1LL*(p[i].x-x)*(x-p[j].x)>=0&&1LL*(p[i].y-y)*(y-p[j].y)>=0&&cross(p[i],p[j],(point){x,y})==0) return 1;\n      if((p[i].y>=y)!=(p[j].y>=y))\n      {\n        if(1LL*(x-p[i].x)*(p[j].y-p[i].y)==1LL*(p[j].x-p[i].x)*(y-p[i].y)) return 1;\n        if(x<1.0*(p[j].x-p[i].x)*(y-p[i].y)/(p[j].y-p[i].y)+p[i].x) c^=1;\n      }\n    } \n    if(c) return 2; return 0;\n}\nint main()\n{     \n     int n; scanf(\"%d\",&n);\n     for(int i=0;i<n;i++)  \n     {\n       scanf(\"%d%d\",&p[i].x,&p[i].y);\n       xmi=min(xmi,p[i].x); xma=max(xma,p[i].x);\n       ymi=min(ymi,p[i].y); yma=max(yma,p[i].y);\n     } \n     int q; scanf(\"%d\",&q);\n     while(q--)\n     {\n        int x,y; scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",pnpoly(x,y,n));\n     }\nreturn 0;\n}\n/*\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\ndouble xmax, xmin, ymax, ymin;\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); }\n  double norm2(){ return x * x + y * y; }\n  //double ppdist(vec p){ return sqrt( (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) ); }\n  //double ppdist2(vec p){ return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y); }\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){ return a + (b - a).sca((p - a).dot(b - a) / (b - a).dot(b - a)); }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){ return abs(l.getvec().cross(getvec())) < eps; }\n  bool orth(line l){ return abs(l.getvec().dot(getvec())) < eps; }\n  bool intersec(line l){\n    bool res0 = (ccw(l.a) * ccw(l.b) == 4); //syukutai\n    bool res1 = (getvec().cross(l.a - a) * getvec().cross(l.b - a)) <= eps;\n    bool res2 = (l.getvec().cross(a - l.a) * l.getvec().cross(b - l.a)) <= eps;\n    return !res0 && res1 && res2;\n  }\n  vec crosspoint(line l){\n    return a + getvec().sca((l.a - a).cross(l.getvec()) / getvec().cross(l.getvec()));\n  }\n  double pldist(vec p){\n    double res = min((a - p).norm2(), (b - p).norm2());\n    vec h = proj(p);\n    if((a - h).dot(b - h) < 0)res = min(res, (h - p).norm2());\n    return sqrt(res);\n  }\n  double lldist(line l){\n    if(intersec(l))return 0.0;\n    return min(min(pldist(l.a), pldist(l.b)), min(l.pldist(a), l.pldist(b)));\n  }\n};\nstruct polygon{\n  vector<vec> p;  //ccw\n  double area(){\n    double res = 0.0;\n    for(int i = 0;i < p.size();++i)res += p[i].cross(p[(i + 1) % p.size()]);\n    return res / 2.0;\n  }\n  bool isconv(){\n    for(int i = 0;i < p.size();++i)\n    if((p[(i + 1) % p.size()] - p[i]).cross(p[(i + 2) % p.size()] - p[i]) < -eps)return false;\n    return true;\n  }\n  int isin(vec a){\n    line l = (line){a, a + (vec){xmax, 0.0}};\n    int cnt = 0, n = p.size();\n    for(int i = 0;i < n;++i){\n      line tmp = (line){p[i], p[(i + 1) % n]};\n      if(tmp.ccw(a) == 0)return 1; //on line\n      if(l.intersec(tmp)){\n        ++cnt;\n        if(l.ccw(p[i]) == 0 && l.ccw(p[(i + 1) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        if(l.paral(tmp))++cnt;\n      }\n    }\n    return (cnt & 1) * 2;  //2:in 0:out\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  xmax = 10101.0;\n  polygon A;\n  int(n);\n  for(;n--;){\n    double x, y; cin >> x >> y;\n    A.p.pb((vec){x, y});\n  }\n  int(q);\n  for(;q--;){\n    vec p; cin >> p.x >> p.y;\n    printf(\"%d\\n\", A.isin(p));\n  }\n\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define each(i, c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define chmin(a, b) a = min(a, b)\n#define chmax(a, b) a = max(a, b)\n#define pb push_back\n#define mp make_pair\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-12;\nconst double INF = 1e12;\nconst double PI = acos(-1.0);\n\ndouble SQ(double a){ return a * a; }\nbool EQ(double a, double b){ return abs(a - b) < EPS; }\nbool LT(double a, double b){ return a - b < -EPS; }\nbool LEQ(double a, double b){ return a - b < EPS; }\n\ndouble toRad(double t){ return t / 180 * PI; }\ndouble toDeg(double t){ return t * 180 / PI; }\n\ntypedef complex<double> Point;\nnamespace std {\n\tbool operator < (const Point &a, const Point &b){\n\t\tif (a.X != b.X) return a.X < b.X;\n\t\treturn a.Y < b.Y;\n\t}\n\t\n\tistream& operator >> (istream &is, Point &a){\n\t\tdouble x, y;\n\t\tis >> x >> y;\n\t\ta = Point(x, y);\n\t\treturn is;\n\t}\n\t\n\tostream& operator << (ostream &os, Point a){\n\t\treturn os << a.X << \" \" << a.Y;\n\t}\n}\n\nstruct Line {\n\tPoint p1, p2;\n};\n\ntypedef Line Segment;\n\nstruct Circle {\n\tPoint p;\n\tdouble r;\n};\n\ntypedef vector<Point> Polygon;\n\n\ndouble norm(Point p){ return SQ(p.X) + SQ(p.Y); }\n\ndouble dot(Point a, Point b){ return (conj(a) * b).X; }\ndouble cross(Point a, Point b){ return (conj(a) * b).Y; }\n\nenum CCW {\n\tCOUNTER_CLOCKWISE = 1,\n\tCLOCKWISE = -1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0,\n};\n\nint ccw(Point p0, Point p1, Point p2){\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (LT(norm(a), norm(b))) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool orthogonal(Line l1, Line l2){\n\treturn EQ(dot(l1.p2 - l1.p1, l2.p2 - l2.p1), 0.0);\n}\n\nbool parallel(Line l1, Line l2){\n\treturn EQ(cross(l1.p2 - l1.p1, l2.p2 - l2.p1), 0.0);\n}\n\nPoint project(Line l, Point p){\n\tPoint base = l.p2 - l.p1;\n\tdouble r = dot(p - l.p1, base) / norm(base);\n\treturn l.p1 + base * r;\n}\n\nPoint reflect(Line &l, Point &p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nbool sameLine(Line l1, Line l2){\n\treturn abs(cross(l1.p2 - l1.p1, l2.p1 - l1.p1)) < EPS;\n}\n\nbool intersectLP(Line l, Point p){\n\treturn LEQ(abs(cross(l.p1 - p, l.p2 - p)), 0.0);\n}\n\nbool intersectLL(Line l1, Line l2){\n\treturn !parallel(l1, l2) || sameLine(l1, l2);\n}\n\nbool intersectLS(Line l, Segment s){\n\treturn cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1) < -EPS;\n}\n\nbool intersectSP(Segment s, Point p){\n\treturn norm(s.p1 - p) + norm(s.p2 - p) - norm(s.p2 - s.p1) < EPS;\n}\n\nbool intersectSS(Segment s1, Segment s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0\n\t\t&& ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\ndouble distanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / abs(l.p2 - l.p1);\n}\n\ndouble distanceLL(Line l1, Line l2){\n\tif (intersectLL(l1, l2)) return 0.0;\n\treturn distanceLP(l1, l2.p1);\n}\n\ndouble distanceLS(Line l, Segment s){\n\tif (intersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n\ndouble distanceSP(Segment s, Point p){\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(Segment s1, Segment s2){\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min(\n\t\tmin(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n\t\tmin(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2))\n\t);\n}\n\nPoint crossPointLL(Line l1, Line l2){\n\tassert(intersectLL(l1, l2));\n\tPoint base = l2.p2 - l2.p1;\n\tdouble d1 = abs(cross(base, l1.p1 - l2.p1));\n\tdouble d2 = abs(cross(base, l1.p2 - l2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn l1.p1 + (l1.p2 - l1.p1) * t;\n}\n\nPoint crossPointLS(Line l, Segment s){\n\tassert(intersectLS(l, s));\n\treturn crossPointLL(l, s);\n}\n\nPoint crossPointSS(Segment s1, Segment s2){\n\tassert(intersectSS(s1, s2));\n\treturn crossPointLL(s1, s2);\n}\n\nenum {\n\tIN = 2,\n\tON = 1,\n\tOUT = 0,\n};\n\nint contains(const Polygon &g, Point p){\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n){\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON;\n\t\tif (a.Y > b.Y) swap(a, b);\n\t\tif (a.Y < EPS && EPS < b.Y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn x ? IN : OUT;\n}\n\nPolygon convexHull(Polygon &s){\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\t\n\tu.pb(s[0]); u.pb(s[1]);\n\tl.pb(s[s.size() - 1]); l.pb(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++){\n\t\tint n = u.size();\n\t\twhile (n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE){\n\t\t\tu.pop_back();\n\t\t\tn--;\n\t\t}\n\t\tu.pb(s[i]);\n\t}\n\t\n\tfor (int i = s.size() - 3; i >= 0; i--){\n\t\tint n = l.size();\n\t\twhile (n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE){\n\t\t\tl.pop_back();\n\t\t\tn--;\n\t\t}\n\t\tl.pb(s[i]);\n\t}\n\t\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.pb(u[i]);\n\t\n\treturn l;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tint n;\n\tcin >> n;\n\tPolygon g(n);\n\trep(i, n) cin >> g[i];\n\tint q;\n\tcin >> q;\n\trep(i, q){\n\t\tPoint p;\n\t\tcin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\ntemplate<class T = int> using V = vector<T>;\ntemplate<class T = int> using VV = V< V<T> >;\n\nusing R = long double;\nconstexpr R pi = acos((R)-1), eps = 1e-10;\n\nint sgn(R a) { return (a > eps) - (a < -eps); }\nint sgn(R a, R b) { return sgn(a - b); }\nusing P = complex<R>;\nistream& operator>>(istream& i, P& p) { R x, y; i >> x >> y; p = P(x, y); return i; }\nostream& operator<<(ostream& o, P p) { return o << fixed << setprecision(15) << real(p) << ' ' << imag(p); }\nbool cmp(P p, P q) { return 2 * sgn(real(p), real(q)) + sgn(imag(p), imag(q)) < 0; }\nbool eql(P p, P q) { return !cmp(p, q) and !cmp(q, p); }\nR dot(P p, P q) { return real(conj(p) * q); }\nR crs(P p, P q) { return imag(conj(p) * q); }\n// -2: back, -1: cw, 0: on, 1: ccw, 2: front\nint ccw(P p, P q) {\n  int s = sgn(crs(p, q));\n  if (s) return s;\n  if (dot(p, q) < 0) return -2;\n  if (dot(p, q - p) > 0) return 2;\n  return 0;\n}\nint ccw(P o, P p, P q) { return ccw(p - o, q - o); }\nstruct L {\n  P s, t;\n  P vec() const { return t - s; }\n  R abs() const { return std::abs(vec()); }\n  R arg() const { return std::arg(vec()); }\n};\nint ccw(L s, P p) { return ccw(s.s, s.t, p); }\n\nP proj(P p, L l) {\n  P e = l.vec() / l.abs();\n  return l.s + dot(p - l.s, e) * e;\n}\nP refl(P p, L l) { return (R)2 * proj(p, l) - p; }\nR distPP(P p, P q) { return abs(q - p); }\nR distPL(P p, L l) { return distPP(p, proj(p, l)); }\nR distPS(P p, L s) {\n  P q = proj(p, s);\n  if (!ccw(s, q)) return distPP(p, q);\n  return min(distPP(p, s.s), distPP(p, s.t));\n}\nR distLL(L l, L m) {\n  if (sgn(crs(l.vec(), m.vec()))) return 0;\n  return distPL(l.s, m);\n}\nR distLS(L l, L s) {\n  if (ccw(l, s.s) * ccw(l, s.t) != 1) return 0;\n  return min(distPL(s.s, l), distPL(s.t, l));\n}\nR distSS(L s, L t) {\n  if (ccw(s, t.s) * ccw(s, t.t) <= 0 and ccw(t, s.s) * ccw(t, s.t) <= 0) return 0;\n  return min({distPS(s.s, t), distPS(s.t, t), distPS(t.s, s), distPS(t.t, s)});\n}\nP intxn(L l, L m) {\n  assert(sgn(crs(l.vec(), m.vec())));\n  return l.s + crs(m.s - l.s, m.vec()) / crs(l.vec(), m.vec()) * l.vec();\n}\n\n// BEGIN CUt HERE\nusing G = V<P>;\nR area(const G& g) {\n  if ((int)g.size() < 3) return 0;\n  R res = 0;\n  P a = g.back();\n  for (P b : g) {\n    res += crs(a, b) / 2;\n    a = b;\n  }\n  return res;\n}\n// -1: in, 0: on, 1: out\nint contains(const G& g, P p) {\n  assert(g.size() >= 3);\n  int c = 0;\n  P q = p + P(pi, 1), a = g.back();\n  for (P b : g) {\n    if (!ccw(a, b, p)) return 0;\n    if (!sgn(distLS({p, q}, {a, b}))) {\n      c += ccw(p, q, intxn({p, q}, {a, b})) >= 0;\n    }\n    a = b;\n  }\n  return c & 1 ? -1 : 1;\n}\n// END CUT HERE\n\nint main() {\n  cin.tie(nullptr); ios::sync_with_stdio(false);\n  int n; cin >> n;\n  G g(n); for (auto&& e : g) cin >> e;\n  int q; cin >> q;\n  while (q--) {\n    P p; cin >> p;\n    cout << 1 - contains(g, p) << '\\n';\n  }\n}\n\n// https://onlinejudge.u-aizu.ac.jp/status/users/risujiroh/submissions/1/CGL_3_A/judge/3574786/C++14\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double louble;\n\ntemplate<typename T1,typename T2> inline T1 max(T1 a,T2 b){return a<b?b:a;}\ntemplate<typename T1,typename T2> inline T1 min(T1 a,T2 b){return a<b?a:b;}\n\nnamespace ae86\n{\n\tconst int bufl = 1<<15;\n\n\tchar buf[bufl],*s=buf,*t=buf;\n\n\tinline int fetch()\n\t{\n\t\tif(s==t){t=(s=buf)+fread(buf,1,bufl,stdin);if(s==t)return EOF;}\n\t\treturn *s++;\n\t}\n\n\tinline int ty()\n\t{\n\t\tint a=0,b=1,c=fetch();\n\t\twhile(!isdigit(c))b^=c=='-',c=fetch();\n\t\twhile(isdigit(c))a=a*10+c-48,c=fetch();\n\t\treturn b?a:-a;\n\t}\n}\nusing ae86::ty;\n\nconst double eps = 1e-8;\n\ninline int dcmp(double x){if(-eps<x && x<eps)return 0;return x>0?1:-1;}\n\nstruct points\n{\n\tdouble x,y;\n\tpoints(double _x=0,double _y=0){x=_x,y=_y;}\n\n\tinline friend points operator + (points a,points b){return points(a.x+b.x,a.y+b.y);}\n\tinline friend points operator - (points a,points b){return points(a.x-b.x,a.y-b.y);}\n\tinline friend points operator * (points a,double b){return points(a.x*b,a.y*b);}\n\tinline friend points operator / (points a,double b){return points(a.x/b,a.y/b);}\n\n\tinline friend int operator == (points a,points b){return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;}\n\n\tvoid takein(){x=ty(),y=ty();}\n\tvoid print(char ends='\\n'){printf(\"%.12lf %.12lf\",x,y),putchar(ends);}\n};\n\ninline double dox(points a,points b){return a.x*b.x+a.y*b.y;}\ninline double cox(points a,points b){return a.x*b.y-a.y*b.x;}\ninline double length(points a){return sqrt(dox(a,a));}\ninline double distan(points a,points b){return length(a-b);}\n\ninline points pervec(points a){if(dcmp(length(a))<=0)return points(0,0);return a/length(a);}\n\ninline int isponl(points p,points a,points b)\n{\n\treturn dcmp(cox(p-a,p-b))==0 && distan(a,p)<=distan(a,b) && distan(b,p)<=distan(a,b);\n}\n\ninline int iscrashed(points al,points ar,points bl,points br)\n{\n\tdouble amix=min(al.x,ar.x),amxx=max(al.x,ar.x),amiy=min(al.y,ar.y),amxy=max(al.y,ar.y);\n\tdouble bmix=min(bl.x,br.x),bmxx=max(bl.x,br.x),bmiy=min(bl.y,br.y),bmxy=max(bl.y,br.y);\n\t\n\tif(amxx<bmix || bmxx<amix || amxy<bmiy || bmxy<amiy)return 0;\n\tif(isponl(al,bl,br) || isponl(ar,bl,br) || isponl(bl,al,ar) || isponl(br,al,ar))return 1;\n\n\tif(dcmp(cox(al-bl,br-bl))!=dcmp(cox(ar-bl,br-bl))\n\t\t&& dcmp(cox(bl-al,ar-al))!=dcmp(cox(br-al,ar-al)))return 1;\n\treturn 0;\n}\n\ninline points crash(points al,points ar,points bl,points br)\n{\n\tpoints a=ar-al,b=br-bl;\n\tdouble bas=cox(al-bl,b)/cox(b,a);\n\treturn al+a*bas;\n}\n\ninline points ortho(points p,points a,points b)\n{\n\tpoints c=a+pervec(b-a);\n\tdouble dis=dox(p-a,c-a);\n\tpoints tar=a+(c-a)*dis;\n\treturn tar;\n}\n\ninline double distanpl(points p,points a,points b)\n{\n\tif(isponl(p,a,b))return 0;\n\tpoints ort=ortho(p,a,b);\n\tif(isponl(ort,a,b))return distan(p,ort);\n\treturn min(distan(p,a),distan(p,b));\n}\n\nconst int _ = 107;\n\nint n;\npoints p[_];\n\nvoid finder()\n{\n\tpoints a;\n\ta.takein();\n\tpoints b=a;\n\tb.x+=998244353;\n\tb.y+=19260817;\n\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tpoints c=p[i],d=p[i+1];\n\t\tif(isponl(a,c,d)){ans=1;break;}\n\t\t\n\t\tpoints aper=pervec(b-a),cper=pervec(c-d);\n\t\tif(!iscrashed(a,b,c,d))continue;\n\t\tif(aper==cper || (points()-aper)==cper)continue;\n\t\tans^=2;\n\t}\n\n\tprintf(\"%d\\n\",ans);\n}\n\nint main()\n{\n\tn=ty();\n\tfor(int i=1;i<=n;i++)p[i].takein();\n\tp[0]=p[n],p[n+1]=p[1],p[n+2]=p[2];\n\n\tint q=ty();\n\twhile(q--)finder();\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> vec;\n\ndouble eps=1e-8;\ndouble PI=acos(-1);\n\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble dot(P a,P b){return real(b*conj(a));}\ndouble cross(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\ndouble calcArea(vec &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++)res+=cross(t[i],t[(i+1==n?0:i+1)]);\n  return abs(res/2.0);\n}\n\n\ndouble Arg(P a,P b,P c){\n  b-=a,c-=a;\n  return arg(c)-arg(b);\n}\n\nint inPolygon(vec &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p) == 0 )return 1;\n    sum+= Arg(p,a,b);\n  }\n  if( abs(fmod(sum,2*PI)) < 0.01 )return 0;\n  else  return 2;\n}\n\nint main(){\n  int n;\n  cin>>n;\n  vec t;\n  double x,y;\n  for(int i=0;i<n;i++){\n    cin>>x>>y;\n    t.push_back(P(x,y));\n  }\n  int q;\n  cin>>q;\n  while(q--){\n    cin>>x>>y;\n    cout<<inPolygon(t,P(x,y))<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n \nusing namespace std;\n \ntypedef long long lint;\n \n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n \n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n \n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n \nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n \nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n   \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n   \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n   \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n   \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n \nclass Point{\npublic:\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    Point operator * (const Point &a){\n        return Point(x * a.x - y * a.y, x * a.y + y * a.x);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n    }\n};\n \ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n \ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n \nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n \nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n \nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n       \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n   \n    qs.resize(k - 1);\n    return (qs);\n}\n \ndouble getArea(Polygon t){\n    double ans = 0.0;\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n \nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n    return (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n        abs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n    return (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n    return (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n    return (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n    return (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n    return (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n \nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n    return (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n    return (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n    return (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n    return (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n    Point r = projection(s1, s2, p);\n    if (isIntersectSP(s1, s2, r)) return (abs(r - p));\n    return (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n    if (isIntersectSS(s1, s2, t1, t2)) return (0);\n    return (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n            min(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n    double d = cross(a2 - a1, b2 - b1);\n    if (abs(d) < EPS) throw \"Segment is Paralell!\";\n    Point a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n    vector<Point> res;\n    if (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n    double d = abs(c1 - c2);\n    double rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n    double rs = sqrt(r1 * r1 - rc * rc);\n    Point diff = (c2 - c1) / d;\n    res.push_back(Point(c1 + diff * Point(rc, rs)));\n    res.push_back(Point(c1 + diff * Point(rc, -rs)));\n    return (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n    vector<Point> res;\n    double dist = distanceLP(b1, b2, a);\n    if (leq(dist, ra)){\n        Point s = projection(b1, b2, a);\n        dist = sqrt(ra * ra - dist * dist);\n        Point t = (b2 - b1) / abs(b2 - b1);\n        res.push_back(s + t * dist);\n        res.push_back(s - t * dist);\n    }\n    return (res);\n}\n \nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n \nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n   \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n   \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n   \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n \nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n \nint main()\n{\n    int n, q;\n     \n    scanf(\"%d\", &n);\n    Polygon p(n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\n    }\n     \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++){\n        Point t;\n        scanf(\"%lf %lf\", &t.x, &t.y);\n         \n        int state = 0;\n        double fsum = 0;\n        for (int j = 0; j < n; j++){\n            Point next = p[(j + 1) % n];\n            if (ccw(p[j], next, t) == 0) state = 1;\n\t\t\telse {\n\t\t\t\tdouble th = acos(getCos(p[j] - t, next - t)) * ccw(p[j], t, next);\n\t\t\t\tfsum += th;\n\t\t\t}\n        }\n\t\tprintf(\"%d\\n\", state ? state : 2 * neq(fsum, 0));\n    }\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < n; ++i)\nusing ll = long long;\nusing namespace std;\nconst int INF = 1e9;\n\n//https://dai1741.github.io/maximum-algo-2012/cpp/geometry/geometries2d.h\n\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P, P> L;\ntypedef vector<P> VP;\nconst D EPS = 1e-9;\n#define X real()\n#define Y imag()\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n#define EQ(n, m) (abs((n) - (m)) < EPS)\n\nD dot(P a, P b) {\n    return (conj(a) * b).X;\n}\nD cross(P a, P b) {\n    return (conj(a) * b).Y;\n}\n\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS)\n        return +1;\n    if (cross(b, c) < -EPS)\n        return -1;\n    if (dot(b, c) < -EPS)\n        return +2;\n    if (norm(b) < norm(c))\n        return -2;\n    return 0;\n}\n\nbool is_parallel(P a1, P a2, P b1, P b2) {\n    P x = a2 - a1;\n    P y = b2 - b1;\n    return EQ(cross(x, y), 0.0);\n}\n\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n    P x = a2 - a1;\n    P y = b2 - b1;\n    return EQ(dot(x, y), 0.0);\n}\n\nbool isecLP(P a1, P a2, P b) {\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\nbool isecLL(P a1, P a2, P b1, P b2) {\n    return !isecLP(a2 - a1, b2 - b1, 0) || isecLP(a1, b1, b2);\n}\n\nbool isecLS(P a1, P a2, P b1, P b2) {\n    return cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS;\n}\n\nbool isecSS(P a1, P a2, P b1, P b2) {\n    return ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n           ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\n\nbool isecSP(P a1, P a2, P b) {\n    return !ccw(a1, a2, b);\n}\n\nP proj(P a1, P a2, P p) {\n    return a1 + dot(a2 - a1, p - a1) / norm(a2 - a1) * (a2 - a1);\n}\n\nP reflection(P a1, P a2, P p) {\n    return 2.0 * proj(a1, a2, p) - p;\n}\n\nD distLP(P a1, P a2, P p) {\n    return abs(proj(a1, a2, p) - p);\n}\n\nD distLL(P a1, P a2, P b1, P b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\nD distLS(P a1, P a2, P b1, P b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\nD distSP(P a1, P a2, P p) {\n    P r = proj(a1, a2, p);\n    if (isecSP(a1, a2, r))\n        return abs(r - p);\n    return min(abs(a1 - p), abs(a2 - p));\n}\n\nD distSS(P a1, P a2, P b1, P b2) {\n    if (isecSS(a1, a2, b1, b2))\n        return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n               min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\nP crosspointLL(P a1, P a2, P b1, P b2) {\n    D d1 = cross(b2 - b1, b1 - a1);\n    D d2 = cross(b2 - b1, a2 - a1);\n    if (EQ(d1, 0) && EQ(d2, 0))\n        return a1;\n    if (EQ(d2, 0))\n        throw \"kouten ga nai\";\n    return a1 + d1 / d2 * (a2 - a1);\n}\n\nD distLC(P a1, P a2, P c, D r) {\n    return max(distLP(a1, a2, c) - r, 0.0);\n}\n\nD distSC(P a1, P a2, P c, D r) {\n    D dSqr1 = norm(c - a1), dSqr2 = norm(c - a2);\n    if (dSqr1 < r * r ^ dSqr2 < r * r)\n        return 0;\n    if (dSqr1 < r * r & dSqr2 < r * r)\n        return r - sqrt(max(dSqr1, dSqr2));\n    return max(distSP(a1, a2, c) - r, 0.0);\n}\n\nVP crosspointLC(P a1, P a2, P c, D r) {\n    VP ps;\n    P ft = proj(a1, a2, c);\n    if (!GE(r * r, norm(ft - c)))\n        return ps;\n\n    P dir = sqrt(max(r * r - norm(ft - c), 0.0)) / abs(a2 - a1) * (a2 - a1);\n    ps.push_back(ft + dir);\n    if (!EQ(r * r, norm(ft - c)))\n        ps.push_back(ft - dir);\n    return ps;\n}\n\nD distCC(P a, D ar, P b, D br) {\n    D d = abs(a - b);\n    return GE(d, abs(ar - br)) ? max(d - ar - br, 0.0) : abs(ar - br) - d;\n}\n\nVP crosspointCC(P a, D ar, P b, D br) {\n    VP ps;\n    P ab = b - a;\n    D d = abs(ab);\n    D crL = (norm(ab) + ar * ar - br * br) / (2 * d);\n    if (EQ(d, 0) || ar < abs(crL))\n        return ps;\n\n    P abN = ab * P(0, sqrt(ar * ar - crL * crL) / d);\n    P cp = a + crL / d * ab;\n    ps.push_back(cp + abN);\n    if (!EQ(norm(abN), 0))\n        ps.push_back(cp - abN);\n    return ps;\n}\n\nVP tangentPoints(P a, D ar, P p) {\n    VP ps;\n    D sin = ar / abs(p - a);\n    if (!LE(sin, 1))\n        return ps;\n    D t = M_PI_2 - asin(min(sin, 1.0));\n    ps.push_back(a + (p - a) * polar(sin, t));\n    if (!EQ(sin, 1))\n        ps.push_back(a + (p - a) * polar(sin, -t));\n    return ps;\n}\n\nvector<L> tangentLines(P a, D ar, P b, D br) {\n    vector<L> ls;\n    D d = abs(b - a);\n    rep(i, 2) {\n        D sin = (ar - (1 - i * 2) * br) / d;\n        if (!LE(sin * sin, 1))\n            break;\n        D cos = sqrt(max(1 - sin * sin, 0.0));\n        rep(j, 2) {\n            P n = (b - a) * P(sin, (1 - j * 2) * cos) / d;\n            ls.push_back(L(a + ar * n, b + (1 - i * 2) * br * n));\n            if (cos < EPS)\n                break;\n        }\n    }\n    return ls;\n}\n\nP circumcenter(P a, P b, P c) {\n    a = (a - c) * 0.5;\n    b = (b - c) * 0.5;\n    return c + crosspointLL(a, a * P(1, 1), b, b * P(1, 1));\n}\n\nVP circlesPointsRadius(P a, P b, D r) {\n    VP cs;\n    P abH = (b - a) * 0.5;\n    D d = abs(abH);\n    if (d == 0 || d > r)\n        return cs;\n    D dN = sqrt(r * r - d * d);\n    P n = abH * P(0, 1) * (dN / d);\n    cs.push_back(a + abH + n);\n    if (dN > 0)\n        cs.push_back(a + abH - n);\n    return cs;\n}\n\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n    P n = (l2 - l1) * P(0, 1);\n    P m = (b - a) * P(0, 0.5);\n    D rC = dot((a + b) * 0.5 - l1, n);\n    D qa = norm(n) * norm(m) - dot(n, m) * dot(n, m);\n    D qb = -rC * dot(n, m);\n    D qc = norm(n) * norm(m) - rC * rC;\n    D qd = qb * qb - qa * qc;\n\n    VP cs;\n    if (qd < -EPS)\n        return cs;\n    if (EQ(qa, 0)) {\n        if (!EQ(qb, 0))\n            cs.push_back((a + b) * 0.5 - m * (qc / qb / 2));\n        return cs;\n    }\n    D t = -qb / qa;\n    cs.push_back((a + b) * 0.5 + m * (t + sqrt(max(qd, 0.0)) / qa));\n    if (qd > EPS)\n        cs.push_back((a + b) * 0.5 + m * (t - sqrt(max(qd, 0.0)) / qa));\n    return cs;\n}\n\nP minEnclosingCircle(const VP &ps) {\n    P c;\n    double move = 0.5;\n    rep(i, 39) {\n        rep(t, 50) {\n            D max = 0;\n            int k = 0;\n            rep(j, ps.size()) if (max < norm(ps[j] - c)) {\n                max = norm(ps[j] - c);\n                k = j;\n            }\n            c += (ps[k] - c) * move;\n        }\n        move /= 2;\n    }\n    return c;\n}\n\nnamespace std {\nbool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nVP convexHull(VP ps) {\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    VP ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\nbool isCcwConvex(const VP &ps) {\n    int n = ps.size();\n    rep(i, n) if (ccw(ps[i], ps[(i + 1) % n], ps[(i + 2) % n]) == -1) return false;\n    return true;\n}\n\nint inConvex(P p, const VP &ps) {\n    int n = ps.size();\n    int dir = ccw(ps[0], ps[1], p);\n    rep(i, n) {\n        int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n        if (!ccwc)\n            return 2;\n        if (ccwc != dir)\n            return 0;\n    }\n    return 1;\n}\n\nint inCcwConvex(const VP &ps, P p) {\n    int n = ps.size();\n    P g = (ps[0] + ps[n / 3] + ps[n * 2 / 3]) / 3.0;\n    if (g == p)\n        return 1;\n    P gp = p - g;\n\n    int l = 0, r = n;\n    while (l + 1 < r) {\n        int mid = (l + r) / 2;\n        P gl = ps[l] - g;\n        P gm = ps[mid] - g;\n        if (cross(gl, gm) > 0) {\n            if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0)\n                r = mid;\n            else\n                l = mid;\n        } else {\n            if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0)\n                l = mid;\n            else\n                r = mid;\n        }\n    }\n    r %= n;\n    D cr = cross(ps[l] - p, ps[r] - p);\n    return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n\nint inPolygon(const VP &ps, P p) {\n    int n = ps.size();\n    bool in = false;\n    rep(i, n) {\n        P a = ps[i] - p;\n        P b = ps[(i + 1) % n] - p;\n        if (EQ(cross(a, b), 0) && LE(dot(a, b), 0))\n            return 2;\n        if (a.Y > b.Y)\n            swap(a, b);\n        if ((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0))\n            in = !in;\n    }\n    return in;\n}\n\nVP convexCut(const VP &ps, P a1, P a2) {\n    int n = ps.size();\n    VP ret;\n    rep(i, n) {\n        int ccwc = ccw(a1, a2, ps[i]);\n        if (ccwc != -1)\n            ret.push_back(ps[i]);\n        int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n        if (ccwc * ccwn == -1)\n            ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n    }\n    return ret;\n}\n\npair<int, int> convexDiameter(const VP &ps) {\n    int n = ps.size();\n    int i = min_element(ps.begin(), ps.end()) - ps.begin();\n    int j = max_element(ps.begin(), ps.end()) - ps.begin();\n    int maxI, maxJ;\n    D maxD = 0;\n    rep(_, 2 * n) {\n        if (maxD < norm(ps[i] - ps[j])) {\n            maxD = norm(ps[i] - ps[j]);\n            maxI = i;\n            maxJ = j;\n        }\n        if (cross(ps[i] - ps[(i + 1) % n], ps[(j + 1) % n] - ps[j]) <= 0)\n            j = (j + 1) % n;\n        else\n            i = (i + 1) % n;\n    }\n    return make_pair(maxI, maxJ);\n}\n\nD area(const VP &ps) {\n    D a = 0;\n    rep(i, ps.size()) a += cross(ps[i], ps[(i + 1) % ps.size()]);\n    return a / 2;\n}\n\nP centroid(const VP &ps) {\n    int n = ps.size();\n    D aSum = 0;\n    P c;\n    rep(i, n) {\n        D a = cross(ps[i], ps[(i + 1) % n]);\n        aSum += a;\n        c += (ps[i] + ps[(i + 1) % n]) * a;\n    }\n    return 1 / aSum / 3 * c;\n}\n\nVP voronoiCell(P p, const VP &ps, const VP &outer) {\n    VP cl = outer;\n    rep(i, ps.size()) {\n        if (EQ(norm(ps[i] - p), 0))\n            continue;\n        P h = (p + ps[i]) * 0.5;\n        cl = convexCut(cl, h, h + (ps[i] - h) * P(0, 1));\n    }\n    return cl;\n}\n\nstruct Edge {\n    int from, to;\n    D cost;\n    Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n    int n;\n    vector<vector<Edge>> edges;\n    Graph(int n) : n(n), edges(n) {}\n    void addEdge(Edge e) {\n        edges[e.from].push_back(e);\n        edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n    }\n};\n\nGraph segmentArrangement(const vector<L> &segs, VP &ps) {\n    int n = segs.size();\n    rep(i, n) {\n        ps.push_back(segs[i].first);\n        ps.push_back(segs[i].second);\n        rep(j, i) {\n            if (isecSS(segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n                ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n        }\n    }\n    sort(ps.begin(), ps.end());\n    ps.erase(unique(ps.begin(), ps.end()), ps.end());\n\n    int m = ps.size();\n    Graph gr(m);\n    vector<pair<D, int>> list;\n    rep(i, n) {\n        list.clear();\n        rep(j, m) {\n            if (isecSP(segs[i].first, segs[i].second, ps[j]))\n                list.push_back(make_pair(norm(segs[i].first - ps[j]), j));\n        }\n        sort(list.begin(), list.end());\n        rep(j, list.size() - 1) {\n            int a = list[j].second;\n            int b = list[j + 1].second;\n            gr.addEdge(Edge(a, b, abs(ps[a] - ps[b])));\n        }\n    }\n    return gr;\n}\n\nGraph visibilityGraph(const VP &ps, const vector<VP> &objs) {\n    int n = ps.size();\n    Graph gr(n);\n    rep(i, n) rep(j, i) {\n        P a = ps[i], b = ps[j];\n        if (!EQ(norm(a - b), 0))\n            rep(k, objs.size()) {\n                const VP &obj = objs[k];\n                int inStA = inConvex(a, obj);\n                int inStB = inConvex(b, obj);\n                if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a + b) * 0.5, obj) == 1)\n                    goto skip;\n                rep(l, obj.size()) {\n                    P cur = obj[l];\n                    P next = obj[(l + 1) % obj.size()];\n                    if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b))\n                        goto skip;\n                }\n            }\n        gr.addEdge(Edge(i, j, abs(a - b)));\n    skip : {}\n    }\n    return gr;\n}\nint main() {\n    int N;\n    cin >> N;\n    VP p(N);\n    rep(i, N) {\n        int x, y;\n        cin >> x >> y;\n        p[i] = P(x, y);\n    }\n    int Q;\n    cin >> Q;\n    while (Q--) {\n        int x, y;\n        cin >> x >> y;\n        if (inPolygon(p, P(x, y)) == 0)\n            cout << 0;\n        else\n            cout << 3 - inPolygon(p, P(x, y));\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\n//点のクラス\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n\n        double norm(Point p){return p.x*p.x+p.y*p.y;}\n        double abs(Point p){return sqrt(norm(p));}    \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\nstruct Segment{ Point p1,p2; };\ntypedef Segment Line;\ndouble norm(Vector v){return v.x*v.x+v.y*v.y;} \ndouble abs(Vector v){return sqrt(norm(v));}    \n//円\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n//多角形\ntypedef vector<Point> Polygon;\n//内積\ndouble dot(Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\n//外戚\ndouble cross(Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n//直交\nbool isOrthogonal(Vector a,Vector b){ return equals(dot(a,b),0.0); }\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){ return isOrthogonal(a1-a2,b1-b2); }\nbool isOrthogonal(Segment s1,Segment s2){ return equals(dot(s1.p1-s1.p2,s2.p1-s2.p2),0.0); }\n//平行\nbool isParallel(Vector a,Vector b){ return equals(cross(a,b),0.0); }\nbool isParallel(Point a1,Point a2,Point b1,Point b2){ return isParallel(a1-a2,b1-b2); }\nbool isParallel(Segment s1,Segment s2){ return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); }\n//射影\nPoint project(Segment s,Point p){ //射影　p377\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n//反射　p379\nPoint reflect(Segment s,Point p){return p+(project(s,p)-p)*2.0;}\n//ベクトルa,bの位置関係\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return 1;//p0,p1,p2が反時計回り\n    if(cross(a,b)<-EPS) return -1;//p0,p1,p2が時計回り\n    if(dot(a,b)<-EPS) return 2;//p1,p0,p2の順で一直線\n    if(norm(a)<norm(b)) return -2;//p0,p1,p2の順で一直線\n    return 0; //p0,p2,p1の順で一直線\n}\n//交差判定　p389\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n            ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);//p1,p2,p3,p4の順で一直線になるのを除く\n}\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n//交点の座標　p392\nPoint getCrossPoint(Segment s1,Segment s2){ \n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n//距離p380\ndouble getDistance(Point a,Point b){ return abs(a-b);} //点aと点b\ndouble getDistanceLP(Line l,Point p){//直線lと点p\n\treturn abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\ndouble getDistanceSP(Segment s,Point p){//線分sと点p\n\tif(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n\tif(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\treturn getDistanceLP(s,p);\n}\ndouble getDistance(Segment s1,Segment s2){ //線分s1と線分s2\n\tif(intersect(s1,s2))return 0.0;\n\treturn min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t\t\t  min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n//円　交点\npair<Point,Point> getCrossPoints(Circle c,Line l){\n\t//asert(intersect(c,l));   交点を持つことの確認\n\tVector pr =project(l,c.c);\n\tVector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n//２つの円の交点\ndouble arg(Vector p){ return atan2(p.y,p.x); }\nVector polar(double a,double r){ return Point(cos(r)*a,sin(r)*a);}\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n\t//assert(intersect(c1,c2));\n\tdouble d=abs(c1.c-c2.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n//点の内包\nint contains(Polygon g,Point p){\n\tint n=g.size();\n\tbool x=false;\n\tfor(int i=0;i<n;i++){\n\t\tPoint a=g[i]-p;\n\t\tPoint b=g[(i+1)%n]-p;\n\tif( abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}   \nint main(){\n    Polygon g;\n    Point p;\n    int n;\n    cin>>n;\n\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        g.push_back(p);\n    }\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        cout<<contains(g,p)<<\"\\n\";\n    }\n    return 0;\n}\n    \n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include<vector>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2)\n{\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\ndouble AreaPoly(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    double Ret = 0.;\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[2]);\n    for (int i = 2; i < n; ++i) {\n        Now = Vector2D(vP[0], vP[i]);\n        Ret += Prev.OuterProd(Now);\n        Prev = Now;\n    }\n    Ret /= 2.;\n    return Ret;\n}\n\nbool IsConvex(vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    vP.push_back(vP[1]);\n    Vector2D Prev(vP[0], vP[1]), Now(vP[0], vP[1]);\n    for (int i = 1; i <= n; ++i) {\n        Now = Vector2D(vP[i], vP[i+1]);\n        if (Prev.OuterProd(Now) < 0.) return false;\n        Prev =  Now;\n    }\n    return true;\n}\n\nint IsContained(Point2D P, vector<Point2D> vP)\n{\n    int n = static_cast<int>(vP.size());\n    vP.push_back(vP[0]);\n    for (int i = 0; i < n; ++i) {\n        if (IsOnSeg(P, Segment(vP[i], vP[i+1]))) return 1;\n    }\n    int NumCross = 0;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment(P, Point2D(P.x + 10007, P.y + 10009)), Segment(vP[i], vP[i+1]))) {\n            NumCross++;\n        }\n    }\n    if (NumCross % 2 == 0) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int n;\n    cin >> n;\n    vector<Point2D> vP(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> vP[i];\n    }\n    int q;\n    cin >> q;\n    Point2D P;\n    for (int i = 0; i < q; ++i) {\n        cin >> P;\n        cout << IsContained(P, vP) << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst pair<int, int> INF{12345, 54321};\n\npair<int, int> operator-(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn {a.first - b.first, a.second - b.second};\n}\n\nlong long operator*(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n\nlong long dot(const pair<int, int> &a, const pair<int, int> &b) {\n\treturn a.first * b.first + a.second * b.second;\n}\n\nbool intersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\tauto diff = a2 - a1;\n\tauto cross1 = diff * (b1 - a1);\n\tauto cross2 = diff * (b2 - a1);\n\treturn cross1 * cross2 < 0;\n}\n\nbool segintersect(const pair<int, int> &a1, const pair<int, int> &a2, const pair<int, int> &b1, const pair<int, int> &b2) {\n\treturn intersect(a1, a2, b1, b2) && intersect(b1, b2, a1, a2);\n}\n\nlong long mag2(const pair<int, int> &a) {\n\treturn a.first * a.first + a.second * a.second;\n}\n\nbool colinear(const pair<int, int> &a, const pair<int, int> &b, const pair<int, int> &c) {\n\treturn abs(dot(b - a, c - a)) * dot(b - a, c - a) == -mag2(b - a) * mag2(c - a);\n}\n\nint main() {\n\tint n, q;\n\tcin >> n;\n\tvector<pair<int, int>> polygon;\n\tfor(int i = 0; i < n; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpolygon.emplace_back(x, y);\n\t}\n\tcin >> q;\n\n\tfor(int j = 0; j < q; j++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpair<int, int> p{x, y};\n\n\t\tbool iscolinear = false;\n\t\tint nintersects = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(colinear(p, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tiscolinear = true;\n\t\t\t}\n\t\t\telse if (segintersect(p, INF, polygon[i], polygon[(i+1)%n])) {\n\t\t\t\tnintersects++;\n\t\t\t}\n\t\t}\n\n\t\tif(iscolinear) {\n\t\t\tcout << \"1\\n\";\n\t\t}\n\t\telse {\n\t\t\tcout << ((nintersects % 2) * 2) << '\\n';\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define DEBUG 1\n\n#define INF (1.0/0.0)\n#define EPS 1e-10\n#define PI 3.1415926535\n#define EQ(x, y) (abs((x)-(y))<EPS)\n#define X real()\n#define Y imag()\n\ntypedef complex<double> Point;\ntypedef Point Vec;\ntypedef array<Point, 2> Line;\ntypedef vector<Point> Poly;\n\nstruct Circle {\n  Point c;\n  double r;\n};\n\nenum Geometory {ABC=-2, CW, ON_LINE, CCW, CAB, OUTSIDE, INSIDE, ERROR}; \n\nnamespace std {\n  bool operator<(Point a, Point b) {\n    if (a.X != b.X) return a.X < b.X;\n    return a.Y < b.Y;\n  }\n}\n\ndouble dot(Point a, Point b) {\n  return (conj(a)*b).X;\n}\n\ndouble cross(Point a, Point b) {\n  return (conj(a)*b).Y;\n}\n\nGeometory ccw(Point a, Point b, Point c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return CCW; // ccw\n  if (cross(b, c) < 0) return CW; // cw\n  if (dot(b, c) < 0) return CAB; // c - a - b\n  if (norm(b) < norm(c)) return ABC; // a - b - c\n  return ERROR;\n}\n\nPoint proj(Line l, Point p) {\n  Point v = l[1]-l[0];\n  double ratio = dot(v, p-l[0]) / norm(v);\n  return l[0] + ratio*v;\n}\n\nPoint refl(Line l, Point p) {\n  return p + (proj(l, p) - p) * 2.0;\n}\n\nVec rotate(Vec v, double r) {\n  return v*Vec(cos(r), sin(r));\n}\n\nbool IsOrthogonal(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(dot(v1, v2), 0.0);\n}\n\nbool IsParallel(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(cross(v1, v2), 0.0);\n}\n\nbool IntersectLL(Line l, Line m) {\n  if (!EQ(cross(l[1]-l[0], m[1]-m[0]), 0.0)) return true;\n  if (EQ(cross(l[1]-l[0], m[0]-l[0]), 0.0)) return true;\n  return false;\n}\n\nbool IntersectLS(Line l, Line s) {\n  Point b = l[0];\n  Vec v = l[1]-l[0];\n  return cross(v, s[0]-b)*cross(v, s[1]-b) < EPS;\n}\n\nbool IntersectSS(Line s, Line t) {\n  if (ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) > 0) return false;\n  if (ccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) > 0) return false;\n  return true;\n}\n\nbool IntersectLP(Line l, Point p) {\n  return EQ(cross(l[1]-p, l[0]-p), 0.0);\n}\n\nbool IntersectSP(Line s, Point p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble DistL(Line l) {\n  return abs(l[0]-l[1]);\n}\n\ndouble DistLP(Line l, Point p) {\n  return abs(p - proj(l, p));\n}\n\ndouble DistLL(Line l, Line m) {\n  if (!IntersectLL(l, m)) return 0;\n  return DistLP(l, m[0]);\n}\n\ndouble DistLS(Line l, Line s) {\n  if (IntersectLS(l, s)) return 0;\n  return min(DistLP(l, s[0]), DistLP(l, s[1]));\n}\n\ndouble DistSP(Line s, Point p) {\n  Point r = proj(s, p);\n  if (IntersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble DistSS(Line s, Line t) {\n  if (IntersectSS(s, t)) return 0;\n\n  double a = min(DistSP(s, t[0]), DistSP(s, t[1]));\n  double b = min(DistSP(t, s[0]), DistSP(t, s[1]));\n  return min(a, b);\n}\n\nLine PerpendBisect(Line seg) {\n  Point mid = (seg[0]+seg[1])/2.0;\n  return Line{mid, mid+(seg[1]-seg[0])*Vec(0, 1)};\n}\n\nPoint CrossPointLL(Line l, Line m) {\n  double A = cross(l[1]-l[0], m[1]-m[0]);\n  double B = cross(l[1]-l[0], l[1]-m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0];\n  if (abs(A) < EPS) assert(0);\n  return m[0] + B / A * (m[1]-m[0]);\n}\n\nvector<Point> CrossPointCL(Circle c, Line l) {\n  vector<Point> ret;\n  double d = DistLP(l, c.c);\n  if (d < c.r + EPS) {\n    double ratio = (d > c.r) ? 0.0 : sqrt(c.r*c.r - d*d);\n    Vec sgn = (l[0]-l[1]) / abs(l[0]-l[1]);\n    ret.push_back(proj(l, c.c) + ratio*sgn);\n    ret.push_back(proj(l, c.c) - ratio*sgn);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCS(Circle c, Line s) {\n  vector<Point> ret;\n  vector<Point> res = CrossPointCL(c, s);\n  for (Point p : res) {\n    if(ccw(s[0], p, s[1]) == ABC) ret.push_back(p);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCC(Circle c1, Circle c2) {\n  vector<Point> ret;\n  double d = abs(c1.c - c2.c);\n  double rc = (d*d + c1.r*c1.r - c2.r*c2.r) / (2*d);\n  double dfr = c1.r*c1.r - rc*rc;\n\n  if (EQ(dfr, 0.0)) dfr = 0.0;\n  else if(dfr < 0.0) return ret;\n\n  double rs = sqrt(dfr);\n  Vec sgn = (c2.c - c1.c) / d;\n  ret.push_back(c1.c + sgn*Point(rc, rs));\n  if (dfr > 0.0) ret.push_back(c1.c + sgn*Point(rc, -rs));\n  return ret;\n}\n\n// Note that ccw(a, b, c) != CCW when a, b, c are colinear\nPoly GrahamScan(vector<Point> ps) {\n  int k = 0;\n  int n = ps.size();\n  Poly ret(n*2);\n\n  sort(ps.begin(), ps.end());\n  for (int i=0; i<n; i++) {\n    while (k > 1 && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  int k_ = k;\n  for (int i=n-1; i>=0; i--) {\n    while (k > k_ && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  ret.resize(k-1);\n  return ret;\n}\n\ndouble CalcArea(Poly ps) {\n  double ret = 0.0;\n  for (int i=0; i<ps.size(); i++) {\n    ret += cross(ps[i], ps[(i+1)%ps.size()]);\n  }\n  return ret/2.0;\n}\n\nbool IsConvex(Poly ps) {\n  return GrahamScan(ps).size() == ps.size();\n}\n\nGeometory ContainsPoint(Poly poly, Point p) {\n  bool in = false;\n  int n = poly.size();\n  for (int i=0; i<n; i++) {\n    Vec a = poly[i] - p;\n    Vec b = poly[(i+1)%n] - p;\n\n    if (a.Y > b.Y) swap(a, b);\n\n    double cr = cross(a, b);\n    if (a.Y <= 0 && 0 < b.Y && cr > EPS) in ^= 1;\n    if (IntersectSP({poly[i], poly[(i+1)%n]}, p)) return ON_LINE;\n  }\n\n  if (in) return INSIDE;\n  return OUTSIDE;\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\npair<int, int> ConvexDiameterApexes(Poly ps) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  int n = ps.size();\n  int is = 0;\n  int js = 0;\n  for (int i=1; i<n; i++) {\n    if (ps[i].Y > ps[is].Y) is = i;\n    if (ps[i].Y < ps[js].Y) js = i;\n  }\n\n  int maxi, maxj;\n  double maxd = norm(ps[is]-ps[js]);\n  int i = is;\n  int j = js;\n  do {\n    Vec a = ps[i+1] - ps[i];\n    Vec b = ps[j+1] - ps[j];\n    if (cross(a, b) > -EPS) j = (j+1)%n;\n    else i = (i+1)%n;\n\n    double d = norm(ps[i]-ps[j]);\n    if (d > maxd) {\n      maxd = d;\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n\n  return make_pair(maxi, maxj);\n}\n\nLine ClosestPair(vector<Point> ps) {\n  auto CompareY = [](const Point &a, const Point &b) {\n    if (a.Y != b.Y) return a.Y < b.Y;\n    return a.X < b.X;\n  };\n\n  function<Line(Point*,int)> Rec = [&Rec, &CompareY](Point *as, int n) {\n    if (n <= 1) return Line{Point(0, 0), Point(INF, INF)};\n    \n    int m = n/2;\n    double x = as[m].X;\n    Line a = Rec(as, m);\n    Line b = Rec(as+m, n-m);\n    double mind = DistL(a);\n    Line ret = a;\n    if (DistL(b) < mind) {\n      mind = DistL(b);\n      ret = b;\n    }\n\n    sort(as, as+n, CompareY);\n    vector<Point> bs;\n    bs.reserve(n);\n    for (int i=0; i<n; i++) {\n      if (abs(as[i].X - x) >= mind) continue;\n\n      for (int j=0; j<bs.size(); j++) {\n        Point p1 = as[i];\n        Point p2 = bs[b.size()-1-j];\n        if (p1.Y - p2.Y >= mind) break;\n\n        double d = abs(p1-p2);\n        if (mind > d) {\n          mind = d;\n          ret = Line{p1, p2};\n        }\n      }\n\n      bs.emplace_back(as[i]);\n    }\n\n    return ret;\n  };\n\n  int n = ps.size();\n  assert (n >= 2);\n  sort(ps.begin(), ps.end());\n  return Rec(&ps[0], n);\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\n// <left, right> or <upper, lower>\npair<Poly, Poly> CutConvex(Poly ps, Line l) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  if (l[0].Y > l[1].Y) swap(l[0], l[1]);\n  else if (EQ(l[0].Y, l[1].Y) && l[0].X > l[1].X) swap(l[0], l[1]);\n\n  Poly left;\n  Poly right;\n  for (int i=0; i<ps.size(); i++) {\n    Point a = ps[i];\n    Point b = ps[(i+1)%ps.size()];\n\n    if (ccw(l[0], l[1], a) != CW) left.emplace_back(a);\n    else right.emplace_back(a);\n\n    Line m{a, b};\n    if (IntersectLS(l, m)) {\n      Point p = CrossPointLL(l, m);\n      left.emplace_back(p);\n      right.emplace_back(p);\n    }\n  }\n\n  return make_pair(left, right);\n}\n\nint n;\nvector<Point> ps;\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i=0; i<n; i++) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    ps.emplace_back(Point{x, y});\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n\n    Geometory ret = ContainsPoint(ps, {x, y});\n    if (ret == INSIDE) puts(\"2\");\n    else if (ret == ON_LINE) puts(\"1\");\n    else puts(\"0\");\n\n    reverse(ps.begin(), ps.end());\n    assert(ContainsPoint(ps, {x, y}) == ret);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define EPS 1e-6\t\n\nstruct pt {\n\tint x, y;\n\tpt(){};\n\tpt(int _x, int _y) : x(_x), y(_y){};\n\n\n\tbool operator<(pt p) {\n\t\treturn(x < p.x || (x == p.x && y < p.y));\n\t}\n\n\tbool operator==(pt p) const {\n\t\treturn(x == p.x && y == p.y);\n\t};\n};\n\npt points[100];\n\n\ntypedef std::pair<pt, pt> seg;\n\ninline pt operator-(pt a, pt b) {\n\treturn pt(a.x-b.x, a.y-b.y);\n}\n\ninline double cross(pt a, pt b) {\n\treturn(a.x*b.y - a.y*b.x);\n}\n\ninline bool ccw(pt a, pt b, pt c) {\n\treturn cross(b-a, c-a) >= 0;\n}\n\ninline double dot(pt a, pt b) {\n\treturn (a.x*b.x + a.y*b.y);\n}\n\n\nvoid find(pt p, int numPoints) {\n\tdouble r;\n\tpt pa, pb;\n\tbool cut = false;\n\n\t// assume that there is a horizontal line ray with \n\t// p as its origin in the easterly direction\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tif (p == points[i]) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpa = points[i] - p;\n\t\tpb = points[(i+1)%numPoints] - p;\n\n\t\t// check that vectors are parallel && \n\t\t// have 0 distance between the two\n\t\t// i.e. are collinear\n\t\tif (cross(pa, pb) == 0 && dot(pa, pb) <= EPS) {\n\t\t\tprintf(\"1\\n\");\n\t\t\treturn;\n\t\t}\n\n\t\t// otherwise check if p-ray cuts across ab\n\t\tif (pa.y < pb.y) {\n\t\t\tpt temp = pa;\n\t\t\tpa = pb;\n\t\t\tpb = temp;\n\t\t}\n\n\t\t// pa points more up\n\t\t// pb points more down\n\t\t// i.e. ab is a vaguely vertical interval\n\t\tif (pa.y >= 0 && pb.y < 0) {\n\t\t\t// p-ray cuts between a and b\n\t\t\tif (cross(pa,pb) > 0) cut = (!cut);\n\t\t}\n\n\t\t\t\t\n\t}\n\tif (cut) {\n\t\tprintf(\"2\\n\");\n\t} else {\n\t\tprintf(\"0\\n\");\n\t}\n}\n\nint main() {\n\tint numPoints, numTests, val, a, b;\n\tscanf(\"%d\", &numPoints);\n\tfor (int i = 0; i < numPoints; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tpoints[i] = pt(a, b);\n\t}\n\n\tscanf(\"%d\", &numTests);\n\tfor (int i = 0; i < numTests; ++i) {\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tfind(pt(a,b), numPoints);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-7;\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\n#define INF INFINITY\nbool feq(double x, double y) { return abs(x - y) <= eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nbool fge(double x, double y) { return x >= y - eps; }\ndouble fsqrt(double x) { return feq(x, 0) ? 0 : sqrt(x); }\n\n// polygon\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) const { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) const { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) const { return { x * c, y * c }; }\n\tbool operator<(const pt_t &another) const {\n\t\treturn (x != another.x ? x < another.x : y < another.y);\n\t}\n};\n\n// aX + bY + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\n// (X - x)^2 + (Y - y)^2 = r^2\nstruct circle_t {\n\tdouble x, y, r;\n};\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// passing p, q\nline_t solve_line(pt_t p, pt_t q) {\n\treturn solve_line(q.y - p.y, -q.x + p.x, p);\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble norm2(pt_t p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\ndouble norm(pt_t p) {\n\treturn sqrt(norm2(p));\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / norm(p));\n\tq = q * (1.0 / norm(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t s, pt_t t, pt_t p) {\n\tline_t l = solve_line(s, t);\n\tif (feq(dist(l, p), 0)) return true;\n\telse return false;\n}\n\nbool in_segment(pt_t s, pt_t t, pt_t p) {\n\tline_t l = solve_line(s, t);\n\tif (feq(dist(l, p), 0)\n\t\t&& fge(p.x, min(s.x, t.x))\n\t\t&& fge(max(s.x, t.x), p.x)\n\t\t&& fge(p.y, min(s.y, t.y))\n\t\t&& fge(max(s.y, t.y), p.y)) return true;\n\telse return false;\n}\n\n// (NAN, NAN) if lines coincide with each other\n// (INF, INF) if lines are parallel but not coincide\npt_t cross_point(line_t l, line_t m) {\n\tdouble d = l.a * m.b - l.b * m.a;\n\tif (feq(d, 0)) {\n\t\tif (feq(l.a * m.c - l.c * m.a, 0)) return { INF, INF };\n\t\telse return { NAN, NAN };\n\t}\n\telse {\n\t\tdouble x = l.b * m.c - m.b * l.c;\n\t\tdouble y = l.a * m.c - m.a * l.c;\n\t\treturn { x / d, y / -d };\n\t}\n}\n\n// if size is 0, then not crossed\nvector<pt_t> cross_point(circle_t f, line_t l) {\n\tdouble d = dist(l, { f.x, f.y });\n\tif (!fge(f.r, d)) return {};\n\tline_t m = solve_line(l.b, -l.a, { f.x, f.y });\n\tpt_t p = cross_point(l, m);\n\tif (feq(d, f.r)) return { p };\n\telse {\n\t\tpt_t u = { l.b, -l.a };\n\t\tpt_t v = u * (sqrt(pow(f.r, 2) - pow(d, 2)) / norm(u));\n\t\treturn { p + v, p - v };\n\t}\n}\n\n// if size is 0, then not crossed\nvector<pt_t> cross_point(circle_t f, circle_t g) {\n\tline_t l = {\n\t\t-2 * f.x + 2 * g.x,\n\t\t-2 * f.y + 2 * g.y,\n\t\t(f.x * f.x + f.y * f.y - f.r * f.r) - (g.x * g.x + g.y * g.y - g.r * g.r)\n\t};\n\treturn cross_point(f, l);\n}\n\n// tangent points of f through p\n// if size is 0, then p is strictly contained in f\n// if size is 1, then p is on f\n// otherwise size is 2\nvector<pt_t> tangent_point(circle_t f, pt_t p) {\n\tvector<pt_t> ret;\n\tdouble d2 = norm2(pt_t({ f.x, f.y }) - p);\n\tdouble r2 = d2 - f.r * f.r;\n\tif (fge(r2, 0)) {\n\t\tcircle_t g = { p.x, p.y, fsqrt(r2) };\n\t\tret = cross_point(f, g);\n\t}\n\treturn ret;\n}\n\n// tangent lines of f through p\n// if size is 0, then p is strictly contained in f\n// if size is 1, then p is on f\n// otherwise size is 2\nvector<line_t> tangent_line(circle_t f, pt_t p) {\n\tvector<pt_t> qs = tangent_point(f, p);\n\tvector<line_t> ret(qs.size());\n\tLoop(i, ret.size()) {\n\t\tret[i] = solve_line(qs[i].x - f.x, qs[i].y - f.y, qs[i]);\n\t}\n\treturn ret;\n}\n\n// tangent points on f through which there is a line tangent to g\n// if size is 0, then one is strictly contained in the other\n// if size is 1, then they are touched inside\n// if size is 2, then they are crossed\n// if size is 3, then they are touched outside\n// otherwise size is 4\nvector<pt_t> tangent_point(circle_t f, circle_t g) {\n\tvector<pt_t> ret;\n\tdouble d2 = norm2({ g.x - f.x, g.y - f.y });\n\tvector<double> r2(2);\n\tr2[0] = d2 - f.r * f.r + 2 * f.r * g.r;\n\tr2[1] = d2 - f.r * f.r - 2 * f.r * g.r;\n\tLoop(k, 2) {\n\t\tif (fge(r2[k], 0)) {\n\t\t\tcircle_t g2 = { g.x, g.y, fsqrt(r2[k]) };\n\t\t\tvector<pt_t> buf = cross_point(f, g2);\n\t\t\tLoop(i, buf.size()) ret.push_back(buf[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\n// common tangent lines between two circles\n// if size is 0, then one is strictly contained in the other\n// if size is 1, then they are touched inside\n// if size is 2, then they are crossed\n// if size is 3, then they are touched outside\n// otherwise size is 4\nvector<line_t> tangent_line(circle_t f, circle_t g) {\n\tvector<pt_t> qs = tangent_point(f, g);\n\tvector<line_t> ret(qs.size());\n\tLoop(i, ret.size()) {\n\t\tret[i] = tangent_line(f, qs[i]).front();\n\t}\n\treturn ret;\n}\n\n// inner product\ndouble dot(pt_t p, pt_t q) {\n\treturn p.x * q.x + p.y * q.y;\n}\n\n// outer product\ndouble cross(pt_t p, pt_t q) {\n\treturn p.x * q.y - p.y * q.x;\n}\n\n// suppose a is counterclockwise, a.size() >= 3\ndouble polygon_area(vector<pt_t> a) {\n\tdouble ret = 0;\n\tLoop(i, a.size()) {\n\t\tint j = (i + 1 < a.size() ? i + 1 : 0);\n\t\tret += cross(a[i], a[j]);\n\t}\n\tret = abs(ret) / 2;\n\treturn ret;\n}\n\nclass Triangulate {\nprivate:\n\tvvi tri_ids;\n\tvector<vector<pt_t>> tri_pts;\n\tvector<pt_t> a;\n\tbool enable(pt_t p, pt_t q, pt_t r) {\n\t\tline_t l = solve_line(q, r);\n\t\tif (feq(dist(l, p), 0)) return false;\n\t\tif (fge(cross(q - p, r - p), 0)) return true;\n\t\telse return false;\n\t}\n\tvoid contraction(vi &ids) {\n\t\tint n = ids.size();\n\t\tif (n < 3) return;\n\t\tLoop(i, n) {\n\t\t\tint id_p = (i - 1 + n) % n;\n\t\t\tint id_q = i;\n\t\t\tint id_r = (i + 1) % n;\n\t\t\tpt_t p = a[ids[id_p]];\n\t\t\tpt_t q = a[ids[id_q]];\n\t\t\tpt_t r = a[ids[id_r]];\n\t\t\tline_t l = solve_line(p, r);\n\t\t\tif (feq(dist(l, q), 0)) {\n\t\t\t\tids.erase(ids.begin() + i);\n\t\t\t\tcontraction(ids);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tvoid divide(vi &ids) {\n\t\tcontraction(ids);\n\t\tint n = ids.size();\n\t\tif (n < 3) return;\n\t\tLoop(i, n) {\n\t\t\tint id_p = (i - 1 + n) % n;\n\t\t\tint id_q = i;\n\t\t\tint id_r = (i + 1) % n;\n\t\t\tpt_t p = a[ids[id_p]];\n\t\t\tpt_t q = a[ids[id_q]];\n\t\t\tpt_t r = a[ids[id_r]];\n\t\t\tif (enable(p, q, r)) {\n\t\t\t\tline_t l = solve_line(p, r);\n\t\t\t\tbool judge = true;\n\t\t\t\tLoop(j, n) {\n\t\t\t\t\tif (j == id_p || j == id_q || j == id_r) continue;\n\t\t\t\t\tpt_t xp = a[ids[j]];\n\t\t\t\t\tif (in_triangle({ p,q,r }, xp)) judge = false;\n\t\t\t\t}\n\t\t\t\tif (judge) {\n\t\t\t\t\ttri_ids.push_back({ id_p, id_q, id_r });\n\t\t\t\t\ttri_pts.push_back({ p, q, r });\n\t\t\t\t\tids.erase(ids.begin() + i);\n\t\t\t\t\tdivide(ids);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint in_triangle(const vector<pt_t> &a, pt_t p) {\n\t\tint ret = 2;\n\t\tLoop(i, 3) {\n\t\t\tint j = (i + 1) % 3;\n\t\t\tline_t l = solve_line(a[i], a[j]);\n\t\t\tdouble d = dist(l, p);\n\t\t\tif (feq(d, 0)) ret = 1;\n\t\t\telse if (fge(M_PI, angle(a[j] - a[i], p - a[i])));\n\t\t\telse return 0;\n\t\t}\n\t\treturn ret;\n\t}\npublic:\n\t// each triangle will be represented counterclockwisely\n\tTriangulate(const vector<pt_t> &a) {\n\t\tthis->a = a;\n\t\tvi ids(a.size());\n\t\tLoop(i, ids.size()) ids[i] = i;\n\t\tdivide(ids);\n\t}\n\tvvi get_ids() {\n\t\treturn tri_ids;\n\t}\n\tvector<vector<pt_t>> get_pts() {\n\t\treturn tri_pts;\n\t}\n\t// suppose a is counterclockwise, a.size() >= 3\n\t// return 0 if not, return 1 if on line, return 2 if strictly included\n\tint in_polygon(pt_t p) {\n\t\tint ret = 0;\n\t\tLoop(i, tri_pts.size()) {\n\t\t\tif (in_triangle(tri_pts[i], p)) {\n\t\t\t\tret = 2;\n\t\t\t}\n\t\t}\n\t\tif (ret != 0) {\n\t\t\tLoop(i, a.size()) {\n\t\t\t\tint j = (i + 1) % a.size();\n\t\t\t\tif (in_segment(a[i], a[j], p)) ret = 1;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n};\n\n\n\nint main() {\n\tint n; cin >> n;\n\tvector<pt_t> a(n);\n\tLoop(i, n) {\n\t\tcin >> a[i].x >> a[i].y;\n\t}\n\tTriangulate trg(a);\n\tint q; cin >> q;\n\tvi ans;\n\tLoop(_, q) {\n\t\tpt_t p; cin >> p.x >> p.y;\n\t\tans.push_back(trg.in_polygon(p));\n\t}\n\tLoop(i, q) {\n\t\tcout << ans[i] << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "# include \"bits/stdc++.h\"\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nconst double PI = acos(-1);\ntemplate<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }\ntemplate<class T>constexpr T HINF() { return INF<T>() / 2; }\ntemplate <typename T_char>T_char TL(T_char cX) { return tolower(cX); };\ntemplate <typename T_char>T_char TU(T_char cX) { return toupper(cX); };\ntypedef pair<LL, LL> pii;\nconst int vy[] = { -1, -1, -1, 0, 1, 1, 1, 0 }, vx[] = { -1, 0, 1, 1, 1, 0, -1, -1 };\nconst int dx[4] = { 0,1,0,-1 }, dy[4] = { 1,0,-1,0 };\nint popcnt(unsigned long long n) { int cnt = 0; for (int i = 0; i < 64; i++)if ((n >> i) & 1)cnt++; return cnt; }\nint d_sum(LL n) { int ret = 0; while (n > 0) { ret += n % 10; n /= 10; }return ret; }\nint d_cnt(LL n) { int ret = 0; while (n > 0) { ret++; n /= 10; }return ret; }\nLL gcd(LL a, LL b) { if (b == 0)return a; return gcd(b, a%b); };\nLL lcm(LL a, LL b) { LL g = gcd(a, b); return a / g*b; };\n# define ALL(qpqpq)           (qpqpq).begin(),(qpqpq).end()\n# define UNIQUE(wpwpw)        sort(ALL((wpwpw)));(wpwpw).erase(unique(ALL((wpwpw))),(wpwpw).end())\n# define LOWER(epepe)         transform(ALL((epepe)),(epepe).begin(),TL<char>)\n# define UPPER(rprpr)         transform(ALL((rprpr)),(rprpr).begin(),TU<char>)\n# define FOR(i,tptpt,ypypy)   for(LL i=(tptpt);i<(ypypy);i++)\n# define REP(i,upupu)         FOR(i,0,upupu)\n# define INIT                 std::ios::sync_with_stdio(false);std::cin.tie(0)\n# pragma warning(disable:4996)\n\n//定義系\n\ndouble EPS = 1e-10;\n\n//誤差を考慮して足し算を行う\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS*(abs(a) + abs(b)))return 0;\n\treturn a + b;\n}\n\n//Point\nstruct Point {\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {\n\t}\n\tPoint operator + (Point p) {\n\t\treturn Point(add(x, p.x), add(y, p.y));\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(add(x, -p.x), add(y, -p.y));\n\t}\n\tPoint operator * (double d) {\n\t\treturn Point(x*d, y*d);\n\t}\n\tPoint operator / (double d) {\n\t\treturn Point(x / d, y / d);\n\t}\n\t//内積\n\tdouble dot(Point p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\t//外積\n\tdouble det(Point p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\t//点の大小比較\n\tbool operator <(const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\n//ベクトル。使い分けるといいかも\ntypedef Point Vector;\n\n//ベクトルの大きさの2乗\ndouble norm(Vector p) {\n\treturn p.x*p.x + p.y*p.y;\n}\n\n//ベクトルの大きさ\ndouble abs(Vector p) {\n\treturn sqrt(norm(p));\n}\n\n//線分\nstruct Segment {\n\tPoint p1, p2;\n};\n\n//直線\ntypedef Segment Line;\n\n//中心c,半径rの円\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n//頂点集合\ntypedef vector<Point> Points;\n\n\n\n\n//計算・アルゴリズム系\n\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (a.det(b) > EPS)return COUNTER_CLOCKWISE;\n\tif (a.det(b) < -EPS)return CLOCKWISE;\n\tif (a.dot(b) < -EPS)return ONLINE_BACK;\n\tif (norm(a)<norm(b))return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//ベクトルa,bの直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn a.dot(b) == 0.0;\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).dot(s2.p2 - s2.p1) == 0.0;\n}\n\n//ベクトルa,bの並行判定\nbool isParallel(Vector a, Vector b) {\n\treturn a.det(b) == 0.0;\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).det(s2.p2 - s2.p1) == 0.0;\n}\n\n//射影(点p1と点p2を通る直線に点pから垂線を引いた交点xを求める)\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = (p - s.p1).dot(base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\n//反射(点p1と点p2を通る直線を対象軸として点pと線対称の位置にある点xを求める)\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\n//点aと点bの距離\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n//直線lと点pの距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs((l.p2 - l.p1).det(p - l.p1) / abs(l.p2 - l.p1));\n}\n\n//線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif ((s.p2 - s.p1).dot(p - s.p1) < 0.0)return abs(p - s.p1);\n\tif ((s.p1 - s.p2).dot(p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n//線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(base.det(s1.p1 - s2.p1));\n\tdouble d2 = abs(base.det(s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//円cと線分lの交点\npair<Point, Point>getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\n//円c1と円c2の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r)*a, sin(r)*a); }\npair<Point, Point>getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//点の内包 0:in,1:on,2:out\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(a.det(b)) < EPS&&a.dot(b) < EPS) return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS < b.y&&EPS < a.det(b))x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n//距離の二乗\ndouble dist(Point p, Point q) {\n\treturn (p - q).dot(p - q);\n}\n\n//辞書順で比較\nbool cmp_x(const Point& p, const Point& q) {\n\tif (p.x != q.x)return  p.x < q.x;\n\treturn p.y < q.y;\n}\n\n//凸包を求める\nvector<Point> convex_hull(Point* ps, int n) {\n\tsort(ps, ps + n, cmp_x);\n\tint k = 0;//凸法の頂点数\n\tvector<Point> qs(n * 2);//構築中の凸包\n\n\t\t\t\t\t\t//下限凸包の作成\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (k > 1 && (qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1]) <= 0)k--;\n\t\tqs[k++] = ps[i];\n\t}\n\n\t//上限凸包の作成\n\tfor (int i = n - 2, t = k; i >= 0; i--) {\n\t\twhile (k > t && (qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1]) <= 0)k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tqs.resize(k - 1);\n\treturn qs;\n}\n\nint main() {\n\tPolygon g;\n\tPoint p;\n\tint n;\n\tcin >> n;\n\tREP(i, n) {\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tg.emplace_back(pp);\n\t}\n\tint q;\n\tcin >> q;\n\tREP(qqq, q) {\n\t\tcin >> p.x >> p.y;\n\t\tcout << contains(g, p) << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// Polygon\n\n// area \n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol){\n\tint n=pol.size();\n\tR sum=0.0;\n\trep(i,n) sum+=det(O,pol[i],pol[(i+1)%n]);\n\treturn abs(sum/2.0L);\n}\n\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol){\n\tint n=pol.size();\n\trep(i,n)if(sdet(pol[i],pol[(i+1)%n],pol[(i+2)%n])<0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex) \n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p){\n\tint n=pol.size(),res=0;\n\trep(i,n){\n\t\tP a=pol[i],b=pol[(i+1)%n];\n\t\tif(sdet(p,a,b)==0 and sdot(p,a,b)<=0) return 1;\n\t\tbool f=sgn(imag(p-a))>=0,s=sgn(imag(p-b))<0;\n\t\tif(sgn(imag(b-a))*sdet(a,b,p)==1 and f==s) res+=(2*f-1);\n\t}\n\treturn res?2:0;\n}\n\n/*\n// polygon realation determination???(possible non-convex) \n// verified: AOJ 2514\nbool in_polygon(const VP& pol, const L& l){\n\tVP check{l.s,l.t};\n\tint n=pol.size();\n\trep(i,n){\n\t\tL edge={pol[i],pol[(i+1)%n]};\n\t\tif(iss(l,edge)) check.emplace_back(cross(l,edge));\n\t}\n\tsort(begin(check),end(check),[](P a,P b)->bool{return sgn(real(a)-real(b))?:sgn(imag(a)-imag(b));});\n\tn=check.size();\n\trep(i,n-1){\n\t\tP m=(check[i]+check[i+1])/2.0L;\n\t\tif(in_polygon(pol,m)==false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut \n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol,const L& l) {\n\tVP res;\n\tint n=pol.size();\n\trep(i,n){\n\t\tP a = pol[i],b=pol[(i+1)%n];\n\t\tint da=sdet(l.s,l.t,a),db=sdet(l.s,l.t,b);\n\t\tif(da>=0) res.emplace_back(a);\n\t\tif(da*db<0) res.emplace_back(cross({a,b},l));\n\t}\n\treturn res;\n}\n*/\n\nint main(void){\n\tint n,q;\n\tcin >> n;\n\tVP pol;\n\trep(i,n){\n\t\tP p;\n\t\tcin >> p;\n\t\tpol.push_back(p); \n\t}\n\tcin >> q;\n\trep(loop,q){\n\t\tP p;\n\t\tcin >> p;\n\t\tcout << in_polygon(pol,p) << endl;\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#include <vector>\n#include <stack>\n#include <queue>\n#define ESP (1e-13)\n#define INF 2000000000\nusing namespace std;\n\n//??§?¨????????§???????\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(const Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(const double& a) {\n\t\treturn Point(x*a, y*a);\n\t}\n\n\tPoint operator/(const double& a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tPoint operator=(const Point& p1) {\n\t\treturn Point(p1.x,p1.y);\n\t}\n\n};\n\n//??´??§?????????????§???????\ntypedef Point Vector;\n\n//??´???????§???????\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n\tLine operator=(const Line& l) {\n\t\treturn Line(l.p1, l.p2);\n\t}\n};\n\n //??????????§???????\n typedef Line Segment;\n\n //???????§???????\n struct Circle {\n\t Point c;\n\t double r;\n\t Circle(){ }\n\t Circle(const Point& p,const double& r) : c(p),r(r) { }\n };\n\n//2??????????????¢????±?????????¢??°\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\n//????????¢??°\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\n//????????¢??°\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\n//3??????????????¢???????±?????????¢??°\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\n//??????????????´????????????????°???±?????§?¨?????±?????????¢??°\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble x = abs(base, Point(0.0, 0.0))*abs(base, Point(0.0, 0.0));\n\tdouble r = product(p - s.p1, base) / x;\n\treturn s.p1 + base*r;\n}\n\n//????????????????±??????¨??????????????????????§°????????§?¨?????±?????????¢??°\nPoint reflect(Segment s, Point p) {\n\treturn (project(s, p) - p)*2.0 + p;\n}\n\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\n//????????????????????£??????????????????????????¢??°\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??´?????¨???????????¢????±?????????¢??°\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\n//????????¨???????????¢????±?????????¢??°\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < -ESP) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < -ESP) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\n//2??????????????¢????±?????????¢??°\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\n//?????´???????\\???¢????±?????????¢??°\nPoint CrossPoint(Line s1,Line s2) {\n\tdouble d1=DistanceLP(s2, s1.p1);\n\tdouble d2 = DistanceLP(s2, s1.p2);\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//?????¨??´?????????????????????????????¢??°\nbool intersect(Circle c, Line l) {\n\treturn DistanceLP(l, c.c) < c.r;\n}\n\n//?????¨??´????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c, Line l) {\n\tVector prpr = project(l, c.c);\n\tVector hshs = (l.p2 - l.p1)/abs(l.p2 ,l.p1);\n\tdouble base = sqrt(c.r*c.r - abs(c.c, prpr)*abs(c.c, prpr));\n\treturn make_pair(prpr - hshs*base, prpr + hshs*base);\n}\n\n//????§???¨?\\?\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r)*a, sin(r)*a); }\n\n//?????¨????????????????±?????????¢??°\npair<Point, Point> CrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c ,c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d)); //????????????\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//2??´??????????????¢???????±?????????¢??°???\n   //??´?????????\nbool isOrth(Vector a, Vector b) {\n\treturn abs(product(a, b)) < ESP;\n   }\nbool isOrth(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrth(a1 - a2, b1 - b2);\n}\nbool isOrth(Segment s1, Segment s2) {\n\treturn isOrth(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n    //????????????\nbool isPara(Vector a, Vector b) {\n\treturn abs(cross(a, b)) < ESP;\n}\nbool isPara(Point a1, Point a2, Point b1, Point b2) {\n\treturn isPara(a1 - a2, b1 - b2);\n}\nbool isPara(Segment s1, Segment s2) {\n\treturn isPara(s1.p2, s1.p1, s2.p2, s2.p1);\n}\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tPoint g[100];\n\tfor (int i = 0;i < n;i++) {\n\t\tcin >> g[i].x;\n\t\tcin >> g[i].y;\n\t}\n\tSegment s[100];\n\tfor (int j = 0;j < n;j++) {\n\t\tint k = (j + 1) % n;\n\t\ts[j].p1.x = g[j].x; s[j].p1.y = g[j].y;\n\t\ts[j].p2.x = g[k].x; s[j].p2.y = g[k].y;\n\t}\n\tPoint p;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tint flag = 0;\n\t\tcin >> p.x; cin >> p.y;\n\t\tSegment ps;\n\t\tps.p1.x = p.x; ps.p1.y = p.y;\n\t\tps.p2.x = 10001; ps.p2.y = p.y;\n\t\tfor (int j = 0;j < n;j++) {\n\t\t\tif (ccw(g[j], g[(j + 1) % n], p) == 0) {\n\t\t\t\tcout << 1 << endl;\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tint cnt = 0;\n\t\t\tfor (int j = 0;j < n;j++) {\n\t\t\t\tif (intersect(s[j], ps)) cnt++;\n\t\t\t\tif (p.y == g[j].y&&p.x < g[j].x) cnt--;\n\t\t\t}\n\t\t\t\n\t\t\tif (cnt % 2 == 1) cout << 2 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n    OTHER             = -3,\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n// Output of a line\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == ON_SEGMENT;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return sign(c1.r + c2.r - (c1 - c2).abs()) >= 0 &&\n        sign((c1 - c2).abs() - abs(c1.r - c2.r) >= 0);\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::vector<Point> CrossPoint(const Circle &c, const Line &l) {\n    if (!IsIntersect(c, l))\n        return std::vector<Point>();\n    Point mid = Projection(l, c);\n    if (equal((c - mid).abs(), c.r))\n        return {mid};\n\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return {mid + e * len, mid - e * len};\n}\nstd::vector<Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    if (!IsIntersect(c1, c2))\n        return std::vector<Point>();\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    if (dir == Point(0, 0))\n        return {base};\n    return {base + dir, base - dir};\n}\n\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n    if (q2 == Point(0, 0)) return {c + q1};\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    // two circle contact one point internally\n    if (equal(Distance(c1, c2), abs(c1.r - c2.r))) { // |  $ $|\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        return {Line(cross_point + up, cross_point - up)};\n    }\n\n    std::vector<Line> list;\n\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    if (equal(Distance(c1, c2), c1.r + c2.r)) {\n        // two circle contact one point outernally | |$ $\n        Point cross_point = CrossPoint(c1, c2)[0];\n        Point up = (cross_point - c1).rotate90();\n        list.emplace_back(Line(cross_point + up, cross_point - up));\n    }\n    else { // | |  $ $\n        Point p = (c1 * c2.r) + (c2 * c1.r);\n        p = p * (1 / (c1.r + c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    return list;\n}\n\n\n/**\n * Polygon\n */\nclass Polygon : public std::vector<Point> {\npublic:\n    Polygon() {}\n    Polygon(int size) : std::vector<Point>(size){}\n    Polygon(std::initializer_list<Point> p) : std::vector<Point>(p) {}\n\n    Number Area() const; // area of polygon : O(n)\n    bool IsConvex() const; // Test whether it's convex polygon : O(n)\n\n    // Is p contained or on segment or otherwise? : O(n)\n    enum { OUT, ON, IN, };\n    int Contain(const Point &p) const;\n    // convex version : O(log n)\n    int ConvexContain(const Point &p) const;\n\n};\n\n// Output of a polygon\nstd::ostream& operator<<(std::ostream &os, const Polygon &poly) {\n    for (auto p : poly) os << p << \", \";\n    return os;\n}\nNumber Polygon::Area() const {\n    const int n = (*this).size();\n    assert(1 < n);\n\n    Number area = abs_cross((*this)[n - 1], (*this)[0]);\n    for (int i = 0; i < n - 1; ++i)\n        area += abs_cross((*this)[i], (*this)[i + 1]);\n    return 0.5 * area;\n}\nbool Polygon::IsConvex() const {\n    const int n = (*this).size();\n    CCW diff = OTHER;\n    for (int i = 0; i < n; ++i) {\n        CCW cur = ccw((*this)[i], (*this)[(i + 1) % n], (*this)[(i + 2) % n]);\n        if (diff == OTHER && (cur == CLOCKWISE || cur == COUNTER_CLOCKWISE))\n            diff = static_cast<CCW>(-cur);\n        else if (cur == diff) return false;\n    }\n    return true;\n}\nint Polygon::Contain(const Point &p) const {\n    const int n = (*this).size();\n    bool count = false;\n    for (int i = 0; i < n; ++i) {\n        if (IsIntersect(Segment((*this)[i], (*this)[(i + 1) % n]), p))\n            return ON;\n        Point up = (*this)[i] - p, down = (*this)[(i + 1) % n] - p;\n        if (up.y < down.y)\n            std::swap(up, down);\n        if (sign(down.y) <= 0 && sign(up.y) == 1 && sign(abs_cross(up, down)) == 1)\n            count = !count;\n    }\n    return count ? IN : OUT;\n}\nint Polygon::ConvexContain(const Point &p) const {\n    const int n = (*this).size();\n    Point g = ((*this)[0] + (*this)[n / 3] + (*this)[2 * n / 3]) / 3.0; // inner point\n    int a = 0, b = n;\n    while (a + 1 < b) { // invariant : c is in fan g-poly[a]-poly[b]\n        int c = (a + b) * 0.5;\n        if (sign(abs_cross((*this)[a] - g, p - g)) == 1) { // angle < 180 deg\n            if (sign(abs_cross((*this)[a] - g, p - g)) == 1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == -1)\n                b = c;\n            else\n                a = c;\n        }\n        else {\n            if (sign(abs_cross((*this)[a] - g, p - g)) == -1 &&\n                sign(abs_cross((*this)[c] - g, p - g)) == 1)\n                a = c;\n            else\n                b = c;\n        }\n    }\n\n    b %= n;\n    int res = sign(abs_cross((*this)[a] - p, (*this)[b] - p));\n    return (res == -1 ? OUT : (res == 1 ? IN : ON));\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(1);\n\n    int n, q;\n    Point p;\n\n    std::cin >> n;\n    Polygon poly(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> poly[i];\n\n    bool is_convex = poly.IsConvex();\n\n    std::cin >> q;\n    while (q--) {\n        std::cin >> p;\n        std::cout << (is_convex ? poly.ConvexContain(p) : poly.Contain(p)) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\n//凸包判定\nbool isConvex(vector<point> poly){\n\tint sz = poly.size();\n\tREP(i,sz){\n\t\tint tmp = ccw(poly[i],poly[(i+1)%sz],poly[(i+2)%sz]);\n\t\tif(tmp == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\t\n\tint n;cin >> n;\n\t\n\tvector<point> poly;\n\tREP(i,n){\n\t\tdouble a,b;cin >> a >> b;\n\t\tpoly.PB(point(a,b));\n\t}\n\t\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tint a,b;cin >> a >> b;\n\t\tpoint tmp = point(a,b);\n\t\tint ret = contains(poly,tmp);\n\t\tcout << ret << endl;\n\t}\n\t\t\t\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <cmath>\n#include <utility>\n#include <cassert>\n#include <cmath>\n#include <iostream>\n\nconst double EPS=1e-10;\n\n#define equals(a, b) (fabs((a)-(b))<EPS)\n#define X real()\n#define Y imag()\n\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0) :\n        c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Vector a,Vector b) {\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2-s.p1;\n    double r=dot(p-s.p1,base) / norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p+(project(s,p)-p)*2.0;\n}\n\nenum CCW {\n    COUNTER_CLOCKWISE=1,\n    CLOCKWISE=-1,\n    ONLINE_BACK=2,\n    ONLINE_FRONT=-2,\n    ON_SEGMENT=0,\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return CCW::COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CCW::CLOCKWISE;\n    if(dot(a,b)<-EPS) return CCW::ONLINE_BACK;\n    if(norm(a)<norm(b)) return CCW::ONLINE_FRONT;\n\n    return CCW::ON_SEGMENT;\n}\n\ndouble getDistance(Point a,Point b) {\n    return abs(a-b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n            ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2) {\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\nbool intersect(Circle c,Line l) {\n    return getDistanceLP(l,c.r)<=c.r;\n}\n\nPoint getCrossPoint(Segment s1,Segment s2) {\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    // assert(intersect(c,l));\n    Vector pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n\n    return make_pair(pr+e*base,pr-e*base);\n\n}\n\npair<Point,Point> getCrossPoints(Circle c1, Circle c2) {\n    double d=abs(c1.c-c2.c);\n    double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\n// IN 2, ON 1, OUT 0\nint contains(Polygon g, Point p) {\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++) {\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS && dot(a,b)<EPS) return 1;\n        if(a.Y>b.Y) swap(a,b);\n        if(a.Y<EPS&&EPS<b.Y&&cross(a,b) > EPS) x=!x;\n    }\n\n    return x?2:0;\n}\n\nint main() {\n    int n;\n    cin>>n;\n    Polygon g(n);\n    for(int i=0;i<n;i++) {\n        double x,y;\n        cin>>x>>y;\n        g[i]=Point(x,y);\n    }\n    int q; cin>>q;\n    while(q-->0) {\n        double x,y;\n        cin>>x>>y;\n        Point p=Point(x,y);\n        cout<<contains(g,p)<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v){std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ (abs((a) - (b)) < EPS)\n\nint signum(double x) { return abs(x) < EPS ? 0 : x > 0 ? 1 : -1; }\n\ntypedef complex<double> P;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nint point_in_poly(Poly poly, P p) {\n    bool in = false;\n    int n = poly.size();\n    for (int i = 0; i < poly.size(); i++) {\n        P a = p - poly[i % n];\n        P b = p - poly[(i + 1) % n];\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= EPS && b.imag() > EPS && cross(a, b) < -EPS) in = !in;\n        if (signum(cross(a, b)) == 0 && signum(dot(a, b)) <= 0) return 1;\n    }\n    return in ? 2 : 0;\n}\n\nint main() {\n\n    int N;\n    cin >> N;\n\n    Poly poly(N);\n    for (int i = 0; i < N; i++) {\n        double x, y;\n        cin >> x >> y;\n        poly[i] = P(x, y);\n    }\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n        double x, y;\n        cin >> x >> y;\n        P p(x, y);\n        cout << point_in_poly(poly, p) << endl;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(relative_equal(norm(v2), - norm(v1))) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= EPS && -EPS < b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n  int n;\n  Polygon polygon;\n  for(cin >> n; n > 0; --n) {\n    int x, y;\n    cin >> x >> y;\n    polygon.add(Point(x, y));\n  }\n  // A\n//   cout << setprecision(1) << fixed  << polygon.area() << endl;\n  // B\n//   cout << (polygon.convex() ? 1 : 0) << endl;\n  // C\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nconst P pINF(INF, INF);\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n    L(const P &a, const P &b) {\n        push_back(a); push_back(b);\n    }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint polygonPointContainment(vector<P> &G, P p){\n    int cross = 0;\n    L infS(p, pINF);\n    for (int i=0;i<G.size()-1;i++){\n        L s(G[i], G[i+1]);\n        if(intersectSP(s, p)){\n            return 1;\n        }\n        if(intersectSS(infS, s)){\n            cross++;\n        }\n    }\n    if(cross%2){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int n, q;\n    cin >> n;\n    vector<P> G;\n    P p;\n    for (int i=0;i<n;i++){\n        cin >> p.real() >> p.imag();\n        G.push_back(p);\n    }\n    G.push_back(G[0]);\n\n    cin >> q;\n    for (int i=0;i<q;i++){\n        cin >> p.real() >> p.imag();\n        cout << polygonPointContainment(G, p) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n#define dTolerance 1.0e-10\n\nstruct POINT{\n    int x;\n    int y;\n};\n\nbool LF_POINT_ON_EDGE(const POINT &zp, const POINT &zp0, const POINT &zp1){\n    if( (zp0.x - zp.x) * (zp1.y - zp.y) - (zp1.x - zp.x) * (zp0.y - zp.y) != 0){\n        return false;\n    }\n    if(zp0.x == zp.x){\n        if(zp.y < min(zp0.y, zp1.y) || zp.y > max(zp0.y, zp1.y)){\n            return false;\n        }\n    } else {\n        if(zp.x < min(zp0.x, zp1.x) || zp.x > max(zp0.x, zp1.x)){\n            return false;\n        }\n    }\n    return true;\n}\n\nint LF_COUNTER_CLOCKWIZE(const POINT &zp, const POINT &zp0){    //zpを通る傾き30000の直線のどちら側にあるか\n    if( (zp0.y - zp.y) - 30000 * (zp0.x - zp.x) > 0 ){\n        return 1;\n    } else if ( (zp0.y - zp.y) - 30000 * (zp0.x - zp.x) < 0 ){\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\nbool LF_INTERSECT(const POINT &zp, const POINT &zp0, const POINT &zp1){    //zpを通る傾き30000の半直線が辺と交わるか\n    if(LF_COUNTER_CLOCKWIZE(zp, zp0) * LF_COUNTER_CLOCKWIZE(zp, zp1) != -1){\n        return false;\n    }\n    if(zp0.x == zp1.x){\n        if(zp0.x - zp.x <= 0){\n            return false;\n        }\n    } else if (zp0.x < zp1.x){\n        if((zp1.x - zp.x) * (zp0.y - zp.y) - (zp0.x - zp.x) * (zp1.y - zp.y) <= 0){\n            return false;\n        }\n    } else {\n        if((zp1.x - zp.x) * (zp0.y - zp.y) - (zp0.x - zp.x) * (zp1.y - zp.y) >= 0){\n            return false;\n        }\n    }\n    return true;\n}    \n\n//与えられた点p(px,py)に対し、制約より半直線y=30000(x-px)+py (x > px) 上に頂点は存在しない。この直線と交差する辺の本数を数えればよい\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<POINT> vzVertex;\n    POINT zVertex0;\n    for(int i = 0; i < n; i++){\n        POINT zVertex;\n        scanf(\"%d %d\", &zVertex.x, &zVertex.y);\n        if(i == 0){\n            zVertex0.x = zVertex.x;\n            zVertex0.y = zVertex.y;\n        }\n        vzVertex.push_back(zVertex);\n    }\n    vzVertex.push_back(zVertex0);\n    \n    int q;\n    scanf(\"%d\", &q);\n    for(int j = 0; j < q; j++){\n        POINT zPoint;\n        scanf(\"%d %d\", &zPoint.x, &zPoint.y);\n        int nCount = 0;\n        bool bOnEdge = false;\n        for (int i = 0; i < n; i++){\n            if( LF_POINT_ON_EDGE(zPoint, vzVertex[i], vzVertex[i+1]) ){\n                bOnEdge = true;\n                break;\n            } else {\n                if( LF_INTERSECT(zPoint, vzVertex[i], vzVertex[i+1]) ){\n                    nCount++;\n                }\n            }\n        }\n        if(bOnEdge == true){\n            printf(\"1\\n\");\n        } else {\n            if(nCount %2 == 1){\n                printf(\"2\\n\");\n            } else {\n                printf(\"0\\n\");\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define equals(a, b) (fabs((a)-(b)) < EPS)\nconst double EPS = (1e-10);\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n// 外積\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\ntypedef vector<Point> Polygon;  // 多角形\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; i++) {\n        Point a = g[i] - p, b = g[(i+1)%n] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < p.y+EPS && p.y+EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\nint main(void) {\n    int n; cin >> n;\n    int x, y;\n\n    Polygon g;\n    for (int i = 0; i < n; i++) {\n        cin >> x >> y;\n        g.push_back(Point(x, y));\n    }\n\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> x >> y;\n        cout << contains(g, Point(x, y)) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4, IN = 5, OUT = 6;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint cn = 0;\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint pointInPoly(Poly &po, PT a){\n\treturn 0;\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n}\n\nint main(){\t\n\tPoly poly;\n\tcout << setprecision(1) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tpoly.pb(p);\n\t}\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tint s = pointInPoly(poly, p);\n\t\tcout << (s == IN ? 2 : (s == ON ? 1 : 0)) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=jp\n#include <iostream>\n#include <cstdio>\n#include <iomanip> // setprecision\n#include <complex>\n#include <cmath>\nusing namespace std;\n\ntypedef complex<double> point;\n\ndouble inner_product(point x, point y) {\n  return (conj(x) * y).real();\n}\n\ndouble outer_product(point x, point y) {\n  return (conj(x) * y).imag();\n}\n\npoint normalize(point a) {\n  return a * (1/abs(a)); // normはabsの2乗、absは本来のノルム。\n}\n\npoint projection(point a, point b) {\n  point e = normalize(b);\n  return e * inner_product(a, e);\n}\n\nint n;\npoint P[110];\nconst double epsilon = 1e-11;\n\nbool isonedge(point X1, point X2, point p) { // X1 X2 の辺上(端点含む)にpがあるかを返す。今回の場合、X1, X2, pの座標は実はすべて整数だから、割り算が出ないようにすれば問題ない。\n  if ( (( X1.real() - p.real() ) * ( X2.real() - p.real() ) > 0)\n       || \n       (( X1.imag() - p.imag() ) * ( X2.imag() - p.imag() ) > 0)) { \n    // ともかくx, y座標を見て、辺上にない場合を弾く。\n    return false;\n  }\n  // その後は、X1 X2 と X1 P が平行かどうかを調べる。\n  // 念のためepsilonで誤差も気を使う。\n  return (abs(outer_product(X1 - X2, X1 - p)) < epsilon);\n}\n\nbool isonpol(point p) {\n  for (int i=0; i<n; i++) {\n    if (isonedge(P[i], P[(i+1)%n], p)) return true;\n  }\n  return false;\n}\n\nbool isin(point p) {\n  bool neg = (outer_product(P[0]-p, P[1]-p) < 0);\n  for (int i=1; i<n; i++) {\n    if ((outer_product(P[i]-p, P[(i+1)%n]-p) < 0) ^ neg) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  double x, y;\n  cin >> n;\n  for (int i=0; i<n; i++) {\n    cin >> x >> y;\n    P[i] = point(x, y);\n  }\n  int q;\n  cin >> q;\n  for (int i=0; i<q; i++) {\n    cin >> x >> y;\n    point p = point(x, y);\n    if (isonpol(p)) {\n      cout << \"1\" << endl;\n    } else if (isin(p)) {\n      cout << \"2\" << endl;\n    } else {\n      cout << \"0\" << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include<stdio.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst ll MOD = 1000000007;\nconst double EPS = 1e-12;\nstruct edge\n{\n\tint from, to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\n//int dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\ntemplate<class T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate<class T> T &chmax(T &a, const T &b) { return a = max(a, b); }\nbool valid(int x, int y, int h, int w) { return (x >= 0 && y >= 0 && x < h&&y < w); }\n//int index(int x, int y, int w) { return w*x + y; }\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\n\n\nconst double PI = acos(-1.0);\nbool eq(double a, double b) { return fabs(a - b) < EPS; }\ntypedef complex<double> Point;\ntypedef vector<Point> Polygon;\n\n\nnamespace std\n{\n\tbool operator < (const Point& a, const Point& b)\n\t{\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\n\nstruct Line\n{\n\tPoint a, b;\n\tLine(Point p, Point q) :a(p), b(q) {};\n};\n\nstruct Circle\n{\n\tPoint p; double r;\n\tCircle(Point a, double b) :p(a), r(b) {};\n};\n\ndouble dot(Point a, Point b)\n{\n\treturn real(conj(a)*b);\n}\n\ndouble cross(Point a, Point b)\n{\n\treturn imag(conj(a)*b);\n}\n\nint ccw(Point a, Point b, Point c)\n{\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS) return 1;\t//counter cloclwise\n\tif (cross(b, c) < -EPS) return -1;  //cloclwise\n\tif (dot(b, c) < 0) return 2;\t\t//c--a--b on line \n\tif (norm(b) < norm(c)) return -2;   //a--b--c on line\n\treturn 0;\t\t\t\t\t\t\t//a--c--b on line\n}\n\nbool isis_ll(Line l, Line m)\n{\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > EPS;\n}\n\nbool isis_ls(Line l, Line s)\n{\n\treturn cross(l.b - l.a, s.a - l.a)*cross(l.b - l.a, s.b - s.a) < EPS;\n}\n\nbool isis_ss(Line s, Line t)\n{\n\treturn (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\nbool isis_lp(Line l, Point p)\n{\n\treturn (abs(cross(l.b - p, l.a - p)) < EPS);\n}\n\nbool isis_sp(Line s, Point p)\n{\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a)) < EPS;\n}\n\nPoint projection(Line l, Point p)\n{\n\tPoint base = l.b - l.a;\n\tdouble r = dot(p - l.a, base) / norm(base);\n\treturn l.a + base*r;\n}\n\nPoint mirror(Line l, Point p)\n{\n\treturn 2.0*projection(l, p) - p;\n}\n\ndouble dist_lp(Line l, Point p)\n{\n\treturn abs(p - projection(l, p));\n}\n\ndouble dist_ll(Line l, Line m)\n{\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\ndouble dist_ls(Line l, Line s)\n{\n\tif (isis_ls(l, s)) return 0;\n\treturn min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\ndouble dist_sp(Line s, Point p)\n{\n\tPoint r = projection(s, p);\n\tif (isis_sp(s, r)) return abs(r - p);\n\treturn min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble dist_ss(Line s, Line t)\n{\n\tif (isis_ss(s, t)) return 0;\n\treturn min(min(dist_sp(s, t.a), dist_sp(s, t.b)), min(dist_sp(t, s.a), dist_sp(t, s.b)));\n}\n\nPoint is_ll(Line s, Line t)\n{\n\tdouble a = cross(s.b - s.a, t.b - t.a);\n\tdouble b = cross(s.b - s.a, s.b - t.a);\n\treturn t.a + b / a*(t.b - t.a);\n}\n\nvector<Point> is_cc(Circle c1, Circle c2)\n{\n\tvector<Point> res;\n\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.p - c2.p);\n\n\tif (c1.r-d-c2.r>EPS)\n\t{\n\t\tres.push_back(c2.p);\n\t\treturn res;\n\t}\n\n\tdouble rc = (d*d + pow(c1.r, 2) - pow(c2.r, 2)) / (2 * d);\n\tdouble dfr = pow(c1.r, 2) - rc*rc;\n\tif (abs(dfr) < EPS) dfr = 0;\n\tif (dfr < 0.0) return res;\n\tdouble rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff*Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff*Point(rc, -rs));\n\treturn res;\n}\n\ntypedef vector<Point> polygon;\n\n\n\nPolygon convex_hull(Polygon s)\n{\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(ALL(s));\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tFOR(i, 2, s.size())\n\t{\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != -1; n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--)\n\t{\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != -1; n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint contains(Polygon g, Point p)\n{\n\tbool f = false;\n\tREP(i, g.size())\n\t{\n\t\tPoint a = g[i] - p, b = g[(i + 1) % g.size()] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS) return 1;\n\t\tif (a.imag()>b.imag()) swap(a, b);\n\t\tif (a.imag()<EPS&&b.imag()>EPS&&cross(a, b)>EPS) f = !f;\n\t}\n\treturn (f ? 2 : 0);\n}\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\tPolygon poly(n);\n\tREP(i, n)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tpoly[i] = Point(x,y);\n\t}\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tcout << contains(poly, p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\n#include <vector>\nconst double EPS = 1e-9;\nusing namespace std;\nclass point {\npublic:\n\tdouble x, y;\n\tpoint(double a, double b) {\n\t\tx = a; y = b;\n\t}\n\tpoint operator - (point v) {\n\t\treturn point(x - v.x, y - v.y);\n\t}\n\tpoint operator + (point v) {\n\t\treturn point(x + v.x, y + v.y);\n\t}\n};\nclass Vector {\npublic:\n\n\tdouble x, y;\n\tVector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tVector operator * (const Vector &v)const {\n\t\treturn Vector(x*v.x, y* v.y);\n\t}\n\tVector operator * (double a) {\n\t\treturn Vector(x * a, y * a);\n\t}\n\tVector operator - (Vector v) {\n\t\treturn Vector(x - v.x, y - v.y);\n\t}\n\tVector operator + (Vector v) {\n\t\treturn Vector(x + v.x, y + v.y);\n\t}\n};\ntypedef vector<Vector> polygon;\nclass circle {\npublic:\n\tpoint p;\n\tdouble r;\n\tcircle(point a, double b) : p(a), r(b) {};\n\n};\ninline double dot(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(Vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(Vector v) {\n\treturn sqrt(squ(v));\n}\ninline void printv(Vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline void printpp(pair<point, point> p) {\n\tprintf(\"%.7f %.7f %.7f %.7f\", p.first.x, p.first.y, p.second.x, p.second.y);\n}\ninline void printc(Vector v1, Vector v2) {\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", v1.x, v1.y, v2.x, v2.y);\n}\ninline void printpg(polygon pg, int min) {\n\tcout << pg.size() << endl;\n\tfor (int i = min; i < pg.size(); i++)\n\t\t//printf(\"%d %d\\n\", pg[i].x, pg[i].y);\n\t\tcout << pg[i].x << \" \" << pg[i].y << endl;\n\tfor(int i = 0; i < min; i++) cout << pg[i].x << \" \" << pg[i].y << endl;\n}\ninline Vector pro(Vector base, Vector v, Vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tVector v1 = base * a;\n\treturn v1 + be;\n}\ninline Vector ref(Vector v, Vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(Vector v1, Vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(a)) return 2;\n\telse return 0;\n}\ninline int inter(Vector v1, Vector v2, Vector v3, Vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(Vector v1, Vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(Vector v1, Vector v2, Vector v3) {\n\tVector a = v2 - v1;\n\tVector b = v3 - v1;\n\tVector c = v1 - v2;\n\tVector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(Vector v1, Vector v2, Vector v3, Vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\ninline Vector getcross(Vector v1, Vector v2, Vector v3, Vector v4) {\n\tVector v5 = pro(v2 - v1, v3 - v1, v1);\n\tVector v6 = pro(v2 - v1, v4 - v1, v1);\n\tdouble a = disPP(v3, v5);\n\tdouble b = disPP(v4, v6);\n\tVector vans = (v6 - v5)*a*(1 / (a + b)) + v5;\n\treturn vans;\n\n}\ninline pair<Vector, Vector> getccl(double r, Vector o, Vector v1, Vector v2) {\n\tVector ev = (v2 - v1)*(1 / norm(v2 - v1));\n\tVector pr = pro(v2 - v1, o - v1, v1);\n\tdouble l = sqrt(r *r - squ(o - pr));\n\tVector ans1 = ev * l + pr;\n\tVector ans2 = pr - ev * l;\n\tif (ans1.x > ans2.x) swap(ans1, ans2);\n\telse if (ans1.x == ans2.x)\n\t\tif (ans1.y > ans2.y) swap(ans1, ans2);\n\treturn make_pair(ans1, ans2);\n}\ninline pair<point, point> getccc(circle c1, circle c2) {\n\tVector v1(c2.p.x - c1.p.x, c2.p.y - c1.p.y);\n\tdouble dis = norm(v1);\n\tdouble a = acos((dis*dis + c1.r*c1.r - c2.r*c2.r) / (2 * c1.r*dis));\n\tdouble b = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n\tpoint pa(c1.r*cos(a + b), c1.r*sin(a + b));\n\tpoint pb(c1.r*cos(b - a), c1.r*sin(b -a));\n\tpoint ans1(c1.p + pa);\n\tpoint ans2(c1.p + pb);\n\tif (ans1.x > ans2.x || ((ans1.x == ans2.x) && (ans1.y > ans2.y))) swap(ans1, ans2);\n\treturn make_pair(ans1, ans2);\n}\nconst int num = 100000;\ninline bool lessX(const Vector &p1, const Vector &p2) {\n\treturn (p1.x < p2.x) || ((p1.x == p2.x) && (p1.y < p2.y));\n}\ninline polygon getpg(polygon o) {\n\tsort(o.begin(), o.end(), lessX);\n\tpolygon t, u;\n\tt.push_back(o[0]);\n\tt.push_back(o[1]);\n\tu.push_back(o[0]);\n\tu.push_back(o[1]);\n\tfor (int i = 2; i < o.size(); i++) {\n\t\tfor (int j = t.size(); (t.size() > 1) && (ccw(t[t.size() - 2], t[t.size() - 1], o[i]) == 1); j--)\n\t\t\tt.pop_back();\n\t\tt.push_back(o[i]);\n\t}\n\tfor (int i = 2; i < o.size(); i++) {\n\t\tfor (int j = u.size(); (u.size() > 1) && (ccw(u[u.size() - 2], u[u.size() - 1], o[i]) == -1); j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(o[i]);\n\t}\n\treverse(t.begin(), t.end());\n\tfor (int i = 1; i < t.size() - 1; i++)\n\t\tu.push_back(t[i]);\n\treturn u;\n}\ninline int cont(polygon pg, Vector p) {\n\tint x = 0;\n\tVector v3(1, 1), v4(1, 1);\n\tfor (int i = 0; i < pg.size(); i++) {\n\t\tVector v1 = pg[i] - p;\n\t\tVector v2 = pg[(i + 1)%pg.size()] - p;\n\t\tif (((cross(v1, v2) == 0) && (dot(v1, v2) < 0.0)) || norm(v1) == 0 || norm(v2) == 0) return 1;\n\t\tif (v1.y > v2.y) swap(v1, v2);\n\t\tif ((cross(v1, v2) > 0.0) && v1.y < EPS && v2.y > EPS) x++;\n\t\tif (v3.y = 0 && v4.y == 0 && (v1.y == 0 || v2.y == 0)) x--;\n\t\tv3 = v1;\n\t\tv4 = v2;\n\t}\n\treturn (x % 2 == 0) ? 0 : 2;\n}\nint main() {\n\tint n, q;\n\tdouble x, y;\n\tpolygon o;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\to.push_back(Vector(x, y));\n\t}\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tcout << cont(o, Vector(x, y)) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-15, pi = acos(-1);\nint sign(db x) {return x < -eps ? -1 : x > eps;}\nint cmp(db x, db y) {return sign(x - y);}\nint intersect(db l1, db r1, db l2, db r2) {\n    if (l1 > r1) swap(l1, r1); if (l2 > r2) swap(l2, r2); return cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nint inmid(db k1, db k2, db k3) {return sign(k1 - k3) * sign(k2 - k3) <= 0;}//k3 in [k1,k2]?1:0\nstruct Point {\n    db x, y;\n    Point operator + (const Point & a)const {return Point{a.x + x, a.y + y};}\n    Point operator - (const Point & a)const {return Point{x - a.x, y - a.y};}\n    Point operator * (db a) const {return Point{x * a, y * a};}\n    Point operator / (db a) const {return Point{x / a, y / a};}\n    bool operator < (const Point p) const {int a = cmp(x, p.x); if (a) return a == -1; return cmp(y, p.y) == -1;}\n    bool operator == (const Point & a) const {return cmp(x, a.x) == 0 && cmp(y, a.y) == 0;}\n    db abs() {return sqrt(x * x + y * y);}\n    db dis(Point p) {return ((*this) - p).abs();}\n    int getP() const {return sign(y) == 1 || (sign(y) == 0 && sign(x) == -1);}\n    void input() {scanf(\"%lf%lf\", &x, &y);}\n};\ndb cross(Point p1, Point p2) {return p1.x * p2.y - p1.y * p2.x;}\ndb cross(Point p0, Point p1, Point p2) {return cross(p1 - p0, p2 - p0);}\ndb dot(Point p1, Point p2) {return p1.x * p2.x + p1.y * p2.y;}\nint inmid(Point k1, Point k2, Point k3) {return inmid(k1.x, k2.x, k3.x) && inmid(k1.y, k2.y, k3.y);}\nbool compareangle(Point p1, Point p2) {//Polar Angle Sort\n    return p1.getP() < p2.getP() || (p1.getP() == p2.getP() && sign(cross(p1, p2)) > 0);\n}\nint clockwise(Point p1, Point p2, Point p3) { // k1 k2 k3 anticlockwise:1 clockwise:-1 others:0\n    return sign(cross(p1, p2, p3));\n}\nstruct Line {\n    Point s, e;\n    void input() {scanf(\"%lf%lf%lf%lf\", &s.x, &s.y, &e.x, &e.y);}\n    Point vec() {return e - s;}\n    db length() {return sqrt(dot(s - e, s - e));}\n    db length2() {return dot(s - e, s - e);}\n};\nint onS(Line l, Point p) {// On Seg?\n    return inmid(l.s, l.e, p) && sign(cross(l.s - p, l.e - l.s)) == 0;\n}\nbool checkLL(Line l1, Line l2) {\n    return cmp(cross(l1.s, l2.s, l2.e), cross(l1.e, l2.s, l2.e)) != 0;\n}\nbool checkLS(Line l1, Line l2) {//Intersection of Line l1 and Seg l2?\n    return sign(cross(l2.s, l1.s, l1.e)) * sign(cross(l2.e, l1.s, l1.e)) <= 0;\n}\nint checkSS(Line l1, Line l2) {//Intersection of Two Seg?1:0\n    return intersect(l1.s.x, l1.e.x, l2.s.x, l2.e.x) && intersect(l1.s.y, l1.e.y, l2.s.y, l2.e.y) && checkLS(l1, l2) && checkLS(l2, l1);\n}\nPoint project(Line l, Point p) {\n    return l.s + l.vec() * dot(p - l.s, l.vec()) / l.length2();\n}\nPoint reflect(Line l, Point p) {//Mirror Point\n    return project(l, p) * 2 - p;\n}\nPoint getLL(Line l1, Line l2) {//Intersection Point of Line l1,l2\n    db w1 = cross(l2.s, l1.s, l2.e), w2 = cross(l2.s, l2.e, l1.e); return (l1.s * w2 + l1.e * w1) / (w1 + w2);\n}\ndb disSP(Line l, Point p) {\n    Point p2 = project(l, p);\n    if (inmid(l.s, l.e, p2)) return p.dis(p2); else return min(p.dis(l.s), p.dis(l.e));\n}\ndb disSS(Line l1, Line l2) {\n    if (checkSS(l1, l2)) return 0;\n    return min(min(disSP(l1, l2.s), disSP(l1, l2.e)), min(disSP(l2, l1.s), disSP(l2, l1.e)));\n}\ndb area(vector<Point> A) {//Anticlockwise\n    db ans = 0;\n    for (int i = 0; i < A.size(); i++) ans += cross(A[i], A[(i + 1) % A.size()]);\n    return ans / 2;\n}\nint contain(vector<Point>A, Point p) {//2:in 1:on 0:out\n    int ans = 0; A.push_back(A[0]);\n    for (int i = 1; i < A.size(); i++) {\n        Line l = {A[i - 1], A[i]};\n        if (onS(l, p)) return 1; if (cmp(l.s.y, l.e.y) > 0) swap(l.s, l.e);\n        if (cmp(l.s.y, p.y) >= 0 || cmp(l.e.y, p.y) < 0) continue;\n        if (sign(cross(l.e, l.s, p)) < 0)ans ^= 1;\n    }\n    return ans << 1;\n}\nbool checkconvex(vector<Point>A) { //anticlock\n    int n = A.size(); A.push_back(A[0]); A.push_back(A[1]);\n    for (int i = 0; i < n; i++) if (sign(cross(A[i], A[i + 1], A[i + 2])) == -1) return 0;\n    return 1;\n}\nint main() {\n    int n; cin >> n; vector<Point> A(n);\n    for (int i = 0; i < A.size(); ++i)A[i].input();\n    int Q;cin>>Q;while(Q--){\n        Point x;x.input();\n        cout<<contain(A,x)<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS 1e-10\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,P> L;\ntypedef vector<P> Poly;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < -EPS) return 2;\n  if(norm(b-a)+EPS < norm(c-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\nint in_poly(P a, Poly p){\n  int n = p.size(), c = 0;\n  p.push_back(p[0]);\n  for(int i = 0; i < n; ++i){\n    P s = p[i]-a, t = p[i+1]-a;\n    if(!ccw(s,t,P(0,0))) return 1;//辺上\n    if(s.Y > t.Y + EPS) swap(s,t);\n    if((s.Y*t.Y < 0 || (s.Y*t.Y < EPS && t.Y > EPS)) && cross(s,t) < EPS) ++c;\n  }\n  if(c%2) return 2;//内部\n  return 0;//外部\n}\n\nint main(){\n  int g, q;\n  cin >> g;\n  Poly p(g);\n  double x, y, Mx = 0, My = 0;\n  for(int i = 0; i < g; ++i){\n    cin >> x >> y;\n    p[i] = P(x,y);\n  }\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    cin >> x >> y;\n    cout << in_poly(P(x,y),p) << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nenum POSITION{ONLINE_BACK = -2, CCW = -1, ON_SEGMENT = 0,\n              CW = 1, ONLINE_FRONT = 2};\n\nstruct Point{\n    long x;\n    long y;\n    Point(long x, long y) : x(x), y(y) {}\n    Point(){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(){}\n};\ntypedef vector<Point> Polygon;\n\nPOSITION get_position(Segment s, Point p){\n    double c = cross(s.p2 - s.p1, p - s.p1);\n    if (c > 0) return CCW;\n    if (c < 0) return CW;\n    double d = dot(s.p2 - s.p1, p - s.p1);\n    if (d < 0) return ONLINE_BACK;\n    if (d > dot(s.p2 - s.p1, s.p2 - s.p1)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Segment s1, Segment s2){\n    if (get_position(s1, s2.p1) * get_position(s1, s2.p2) != -1) {\n        return false;\n    }\n    if (get_position(s2, s1.p1) * get_position(s2, s1.p2) != -1) {\n        return false;\n    }\n    return true;\n}\n\nint determine_containment(Point p, Polygon poly){\n    Segment s_right(p, Point(p.x + 1e5, p.y));\n    int count = 0;\n    for (int i = 0, n = poly.size(); i < n; i++) {\n        if (get_position(Segment(poly[i], poly[(i+1)%n]), p) == ON_SEGMENT) {\n            return 1;\n        }\n        if (intersect(s_right, Segment(poly[i], poly[(i+1)%n]))) {\n            count++;\n            continue;\n        }\n        if (get_position(s_right, poly[i]) == ON_SEGMENT) {\n            int i_pre = (i == 0 ? n - 1 : i - 1);\n            POSITION pos_pre = get_position(s_right, poly[i_pre]);\n            while (pos_pre != CCW && pos_pre != CW) {\n                i_pre = (i_pre == 0 ? n - 1 : i_pre - 1);\n                pos_pre = get_position(s_right, poly[i_pre]);\n            }\n            int i_aft = (i + 1) % n;\n            POSITION pos_aft = get_position(s_right, poly[i_aft]);\n            while (pos_aft != CCW && pos_aft != CW) {\n                i_aft = (i_aft + 1) % n;\n                pos_aft = get_position(s_right, poly[i_aft]);\n            }\n            if (get_position(s_right, poly[i_pre]) * get_position(s_right, poly[(i+1)%n]) == -1) {\n                count++;\n            }\n        }\n    }\n    if (count % 2) return 2;\n    return 0;\n}\nint main(){\n    int q;\n    cin >> q;\n    Polygon poly(q);\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        poly[i].x = x;\n        poly[i].y = y;\n    }\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        cout << determine_containment(Point(x, y), poly) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define Re real()\n#define Im imag()\nusing namespace std;\n\nconst double eps = 1e-9;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nPoint P[50050], s;\nint n, k, m;\nvector<Point> qs;\n\nbool cmp(Point a, Point b)\n{\n    if(fabs(a.Re - b.Re) < eps) return a.Im < b.Im;\n    else return a.Re < b.Re;\n}\n\ndouble cross(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Im;\n}\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a) * b).Re;\n}\n\nint check(const Point& t)\n{\n    int cnt = 0;\n    for(int i = 0; i < n; i++)\n    {\n        Vector v1 = P[i] - t, v2 = P[(i + 1) % n] - t;\n        if(v1.Im > v2.Im) swap(v1, v2);\n        if(v1.Im <= 0 && v2.Im > 0 && cross(v1, v2) < 0) cnt ^= 1;\n        if(cross(v1, v2) == 0 && dot(v1, v2) <= 0) return 1;\n    }\n    return cnt ? 2 : 0;\n}\n\nint main()\n{\n    while(~scanf(\"%d\", &n))\n    {\n        for(int i = 0; i < n; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            P[i] = complex<double>(tx, ty);\n        }\n        scanf(\"%d\", &m);\n        for(int i = 0; i < m; i++)\n        {\n            double tx, ty;\n            scanf(\"%lf%lf\", &tx, &ty);\n            s = Point(tx, ty);\n            printf(\"%d\\n\", check(s));\n        }\n    }\n    return 0;\n}\n\n/*\n\n5\n0 0\n2 0\n2 2\n0 2\n1 1\n\n4\n0 0\n3 1\n3 3\n0 3\n16\n1 1\n2 1\n1 2\n2 2\n3 1\n3 2\n0 3\n0 2\n2 0\n4 1\n-1 1\n0 -1\n1 4\n3 4\n4 3\n-2 3\n\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1128\n\n\n\n#include <iostream>\n#include <complex>\n#include <vector>\nusing namespace std;\n\ntypedef complex<double> point;\ndouble cross(const point& a, const point& b) {\n    return imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n    return real(conj(a)*b);\n}\n\ntypedef vector<point> polygon;\nenum { OUT, ON, IN };\nint contains(const polygon& P, const point& p) {\n    bool in = false;\n    for (int i = 0; i < P.size(); ++i) {\n        point a = P[i] - p, b = P[(i+1)%P.size()] - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b))\n            if (cross(a, b) < 0) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n\nint main() {\n    int n;\n    while (cin >> n) {\n        polygon pol(n);\n        for (auto& p : pol) {\n            int x, y;\n            cin >> x >> y;\n            p = point(x, y);\n        }\n        int q;\n        cin >> q;\n        for (int i = 0; i < q; i++) {\n            int x, y;\n            cin >> x >> y;\n            cout << contains(pol, point(x, y)) << endl;\n        }\n    }\n    return 0;\n}\n\n*/"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n\t//return (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad;\n\tPOINT g[101];//n\n\tPOINT q[10000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\nrad =0;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t,dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t);//q[j],g[i],g[i+1]\n\t\t\trad += w;\n//printf(\"%lf\\n\",w);\n\t\t\tif(fabs(w - 3.1415926535)<=0.00001 || fabs(w +3.1415926535)<=0.00001)ans[j] = 1;\n\t\t}\n//printf(\"\\n%lf\\n\\n\",rad);\n\t\tif(ans[j] != 1){\n\t\t\tif(fabs(rad - 3.1415926535 * 2)<=0.00001){//2??\n\t\t\t\tans[j] = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n\t//return (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad;\n\tPOINT g[101];//n\n\tPOINT q[1000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\nrad =0;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t,dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t);//q[j],g[i],g[i+1]\n\t\t\trad += w;\n//printf(\"%lf\\n\",w);\n\t\t\tif(fabs(w - 3.1415926535)<=0.000001 || fabs(w +3.1415926535)<=0.000001)ans[j] = 1;\n\t\t}\n//printf(\"\\n%lf\\n\\n\",rad);\n\t\tif(ans[j] != 1){\n\t\t\tif(fabs(rad - 3.1415926535 * 2)<=0.000001){//2??\n\t\t\t\tans[j] = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n\ntypedef struct POINT{\n\tdouble x,y;\n}POINT;\ntypedef struct LINE{\n\tdouble x,y;\n}LINE;\n\n//double \n\ndouble dot(POINT a,POINT b){//内積\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//外積\n\treturn a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - 3.1415926535) <= 0.000001 ||\n\t\t\t fabs(w + 3.1415926535) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - 3.1415926535*2)<=0.000001){//2π\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%d%d\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%d%d\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define MAX_N 100\n#define IN 2\n#define ON 1\n#define OUT 0\n#define EPS (1e-10)\n\n#define DOT(v1, v2) (v1.x * v2.x + v1.y * v2.y)\n#define CROSS(v1, v2) (v1.x * v2.y - v1.y * v2.x)\n\ntypedef struct { double x, y; } point_t;\ntypedef point_t vector_t;\n\nstatic vector_t minus(vector_t v1, vector_t v2) {\n  vector_t ret = { v1.x - v2.x, v1.y - v2.y };\n  return ret;\n}\n\nstatic int contains(point_t *g, int size, point_t q) {\n  vector_t a, b, tmp;\n  double c, d;\n  int i, intersect;\n\n  for (i = intersect = 0; i < size; ++i) {\n    a = minus(g[i], q);\n    b = minus(g[(i + 1) % size], q);\n    c = CROSS(a, b);\n    d = DOT(a, b);\n    if (fabs(c) < EPS && d < EPS) return ON;\n    if (a.y > b.y) {\n      tmp = a;\n      a = b;\n      b = tmp;\n    }\n    c = CROSS(a, b);\n    d = DOT(a, b);\n    if (a.y < EPS && EPS < b.y && c > EPS) ++intersect;\n  }\n\n  return intersect % 2 ? IN : OUT;\n}\n\nint main(int argc, char **argv) {\n  int n, m, i;\n  point_t q, g[MAX_N];\n\n  scanf(\"%d\", &n);\n  for (i = 0; i < n; ++i) scanf(\"%lf %lf\", &g[i].x, &g[i].y);\n\n  scanf(\"%d\", &m);\n  for (i = 0; i < m; ++i) {\n    scanf(\"%lf %lf\", &q.x, &q.y);\n    printf(\"%d\\n\", contains(g, n, q));\n  }\n}\n"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_3_C Polygon-Point Containment\n// 2018.5.3 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\nint containsSegP(PP p1, PP p2, PP p)   // p1-p2 = seg\n{\n\tdouble x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;\n\tif (x1 > x2) {\n\t\tdouble t;\n\t\tt = x1, x1 = x2, x2 = t;\n\t\tt = y1, y1 = y2, y2 = t;\n\t}\n\treturn x1 <= p.x && p.x <= x2 &&\n\t\t((y1 <= y2 && y1 <= p.y && p.y <= y2) ||\n\t\t(y1 > y2 && y2 <= p.y && p.y <= y1))\n\t\t&& EQ((p.y - y1)*(x2 - x1), (y2 - y1)*(p.x - x1));\n}\n\n// 点が多角形に含まれているかの判定　1:含まれる, 0:含まれない\nint containsPolyP(int n, PP *poly, PP p)\n{\n\tint i, f;\n\tPP a, b, t;\n\tdouble c;\t\t// cross(a,b)\n\n\tf = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tif (containsSegP(poly[i], poly[i+1], p)) return 1;\n\t\ta = vsub(poly[i], p), b = vsub(poly[i+1], p);\n\t\tif (EQ((c=cross(a, b)), 0) && dot(a, b) < EPS) return 0;\n\t\tif (!EQ(a.y, b.y) && a.y >= b.y) t = a, a = b, b = t, c = -c;\n\t\tif (a.y < EPS && EPS < b.y && c > EPS) f = !f;\n\t}\n\treturn f? 2: 0;\n}\n\nPP pp[110];\n\nint main()\n{\n\tint n, q, i;\n\tPP p;\n\n\tn = in();\n\tfor (i = 0; i < n; i++) pp[i].x = in(), pp[i].y = in();\n\tpp[n] = pp[0];\n\tq = in();\n\twhile (q--) {\n\t\tp.x = in(), p.y = in();\n\t\tputchar('0'+ containsPolyP(n, pp, p)), putchar('\\n');\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n \ntypedef struct POINT{\n    double x,y;\n}POINT;\ntypedef struct LINE{\n    double x,y;\n}LINE;\n \n//double \n \ndouble dot(POINT a,POINT b){//??????\n    return a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n    b.x -= a.x;\n    b.y -= a.y;\n    return b;\n}\n \nint inclusion(POINT a[],int n,POINT p){\n    int ans = 0;\n    int i;\n    POINT g[n+1];\n    double w,rad = 0.0;\n \n    for(i = 0;i < n;i++){\n        g[i] = a[i];\n    }\n    g[n] = g[0];\n \n    for(i = 0;i < n;i++){\n        if(g[i].x == p.x && g[i].y == p.y){\n            return ans = 1;\n        }\n    }\n    for(i = 0;i < n;i++){\n        w = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n                dot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n        rad += w;\n        if(fabs(w - 3.1415926535) <= 0.000001 ||\n             fabs(w + 3.1415926535) <= 0.000001)\n            return ans = 1;\n    }\n    if(fabs(rad - 3.1415926535*2)<=0.000001){//2??\n        return ans = 2;//in!\n    }\n    return ans;\n}\n \nint main(){\n    int i,m,n;\n    POINT g[100];//n\n    POINT q;//m\n    int ans = 0;\n \n    scanf(\"%d\",&n);\n    for(i = 0;i < n;i++){\n        scanf(\"%lf%lf\",&g[i].x,&g[i].y);\n    }\n    scanf(\"%d\",&m);\n    for(i = 0;i < m;i++){\n        scanf(\"%lf%lf\",&q.x,&q.y);\n        ans = inclusion(g,n,q);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n \ntypedef struct POINT{\n    double x,y;\n}POINT;\ntypedef struct LINE{\n    double x,y;\n}LINE;\n \n//double \n \ndouble dot(POINT a,POINT b){//??????\n    return a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n    b.x -= a.x;\n    b.y -= a.y;\n    return b;\n}\n \nint inclusion(POINT a[],int n,POINT p){\n    int ans = 0;\n    int i;\n    POINT g[n+1];\n    double w,rad = 0.0;\n \n    for(i = 0;i < n;i++){\n        g[i] = a[i];\n    }\n    g[n] = g[0];\n\n    for(i = 0;i < n;i++){\n        w = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n                dot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n        rad += w;\n        if(fabs(w - 3.1415926535) <= 0.000001 ||\n             fabs(w + 3.1415926535) <= 0.000001)\n            return ans = 1;\n    }\n    if(fabs(rad - 3.1415926535*2)<=0.000001){//2??\n        return ans = 2;//in!\n    }\n    return ans;\n}\n \nint main(){\n    int i,m,n;\n    POINT g[100];//n\n    POINT q;//m\n    int ans = 0;\n \n    scanf(\"%d\",&n);\n    for(i = 0;i < n;i++){\n        scanf(\"%lf%lf\",&g[i].x,&g[i].y);\n    }\n    scanf(\"%d\",&m);\n    for(i = 0;i < m;i++){\n        scanf(\"%lf%lf\",&q.x,&q.y);\n        ans = inclusion(g,n,q);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nconst double EPS = 1e-8;\ntypedef pair<double, double> pt;\n#define x first\n#define y second\nostream& operator<<(ostream& os, const pt& p) {\n    return os << p.x << \" \" << p.y;\n}\ntypedef pair<pt, pt> seg;\n#define a first\n#define b second\npt operator-(pt a, pt b) {\n  return pt(a.x - b.x, a.y - b.y);\n}\n\nbool zero(double x) {\n  return fabs(x) <= EPS;\n}\n\nbool dequal(double x, double y) {\n    return fabs(x-y) <= EPS;\n}\n\ndouble cross(pt a, pt b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nbool ccw(pt a, pt b, pt c) {\n  return cross(b - a, c - a) >= 0;\n}\nbool collinear(seg a, seg b) { // all four points collinear\n  return zero(cross(a.b - a.a, b.a - a.a)) &&\n         zero(cross(a.b - a.a, b.b - a.a));\n}\n\ndouble sq(double a) { return a * a; }\n\ndouble dist(pt p, pt q) {\n  return sqrt(sq(p.x - q.x) + sq(p.y - q.y));\n}\n\nbool intersect(seg a, seg b) {\n  if (collinear(a, b)) {\n    double maxDist = 0;\n    maxDist = max(maxDist, dist(a.a, a.b));\n    maxDist = max(maxDist, dist(a.a, b.a));\n    maxDist = max(maxDist, dist(a.a, b.b));\n    maxDist = max(maxDist, dist(a.b, b.a));\n    maxDist = max(maxDist, dist(a.b, b.b));\n    maxDist = max(maxDist, dist(b.a, b.b));\n    return maxDist < dist(a.a, a.b) + dist(b.a, b.b) + EPS;\n  }\n  return ccw(a.a, a.b, b.a) != ccw(a.a, a.b, b.b) &&\n         ccw(b.a, b.b, a.a) != ccw(b.a, b.b, a.b);\n}\n\nbool pointOnLine(pt a, seg s) {\n    if (a.x >= min(s.a.x, s.b.x) && a.x <= max(s.a.x, s.b.x)\n        &&\n        a.y >= min(s.a.y, s.b.y) && a.y <= max(s.a.y, s.b.y)) {\n            if (dequal(s.a.x, s.b.x)) return true;\n\n            const double M = (s.b.y - s.a.y) / (s.b.x - s.a.x);\n            const double C = (-M * s.a.x) + s.a.y;\n\n            return zero(a.y - (M*a.x+C));\n    }\n    return false;\n}\n\nint N, Q;\nvector<pt> polypts;\nvector<seg> poly;\nint main() {\n    cin >> N;\n    for ( int p = 0; p < N; ++p) {\n        int x, y;\n        cin >> x >> y;\n        polypts.push_back(pt(x, y));\n        if (p > 0) {\n            poly.push_back(seg(*(polypts.end()-2), polypts.back()));\n            // cout << \"created seg \" << poly.back().a << \" -> \" << poly.back().b << endl;\n        }        \n    }\n    poly.push_back(seg(polypts.back(), polypts.front()));\n    // cout << \"created seg \" << poly.back().a << \" -> \" << poly.back().b << endl;\n\n    cin >> Q;\n    for (int q = 0; q < Q; ++q) {\n        int x ,y;\n        cin >> x >> y;\n        pt p = pt(x, y);\n        seg ray = seg(pt(x,y), pt(11000, y));\n        int counter = 0;\n        bool done = false;\n        for (seg s : poly) {\n            if (pointOnLine(p, s)) {\n                //cout << \"point on polygon edge \" << p << endl;\n                cout << 1 << endl;\n                done = true;\n                break;\n            }\n            if (pointOnLine(s.a, ray)) {\n                // cout << \"seg point a on ray \" << endl;\n                if (s.b.y < p.y)\n                    counter++;\n                continue;\n            }\n            if (intersect(s, ray))\n                counter++;\n        }\n        if (!done) {\n            if (counter % 2 == 0) {\n                cout << 0 << endl;\n            } else {\n                cout << 2 << endl;\n            }\n        }\n        // cout << \"intersects \" << counter << endl;\n        // if (counter == 0) {\n        //     cout << 0 << endl;\n        // }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.y + a.y*b.x;\n}\ndouble cross(POINT a,POINT b){//??????\n\treturn (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad = 0;\n\tPOINT g[101];//n\n\tPOINT q[1000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%d%d\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%d%d\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t/dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t));//q[j],g[i],g[i+1]\n\t\t\trad += w;\n\t\t\tif(w == 3.1415926535 || w == -3.1415926535)ans[j] = 1;\n\t\t}\n\t\tif(ans[j] != 1){\n\t\t\tif(rad == 3.1415926535 * 2){//2??\n\t\t\t\tans = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d?\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.y + a.y*b.x;\n}\ndouble cross(POINT a,POINT b){//??????\n\treturn (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad = 0;\n\tPOINT g[101];//n\n\tPOINT q[1000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%d%d\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%d%d\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t,dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t);//q[j],g[i],g[i+1]\n\t\t\trad += w;\n\t\t\tif(w == 3.1415926535 || w == -3.1415926535)ans[j] = 1;\n\t\t}\n\t\tif(ans[j] != 1){\n\t\t\tif(rad == 3.1415926535 * 2){//2??\n\t\t\t\tans = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d?\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.y + a.y*b.x;\n}\ndouble cross(POINT a,POINT b){//??????\n\treturn (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad = 0;\n\tPOINT g[101];//n\n\tPOINT q[1000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%d%d\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%d%d\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t,dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t);//q[j],g[i],g[i+1]\n\t\t\trad += w;\n\t\t\tif(w == 3.1415926535 || w == -3.1415926535)ans[j] = 1;\n\t\t}\n\t\tif(ans[j] != 1){\n\t\t\tif(rad == 3.1415926535 * 2){//2??\n\t\t\t\tans[j] = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d?\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#define EPS 1e-8\n#define Size 101\nstruct point {\n  double x;\n  double y;\n};\nstruct point poly[Size];\nint constrain(int n, struct point p);\nint main(void)\n{\n  int i, n, q;\n  struct point qoly;\n  scanf(\"%d\", &n);\n  for (i = 0; i < n; i++) scanf(\"%lf%lf\", &poly[i].x, &poly[i].y);\n  poly[n] = poly[0];\n  scanf(\"%d\", &q);\n  for (i = 0; i < q; i++) {\n    scanf(\"%lf%lf\", &qoly.x, &qoly.y);\n    printf(\"%d\\n\", constrain(n, qoly));\n  }\n}\nint constrain(int n, struct point p)\n{\n  int i, x = 0;\n  double cross, dot;\n  struct point a, b;\n  for (i = 0; i < n; i++) {\n    a.x = poly[i].x - p.x, a.y = poly[i].y - p.y;\n    b.x = poly[i+1].x - p.x, b.y = poly[i+1].y - p.y;\n    cross = a.x * b.y - b.x * a.y;\n    dot = a.x * b.x + a.y * b.y;\n    if (abs(cross) < EPS && dot < EPS) return 1;\n    if (a.y > b.y) {\n      struct point temp = a;\n      a = b;\n      b = temp;\n      cross *= -1;\n    }\n    if (a.y < EPS && b.y > EPS && cross > EPS) x = !x;\n  }\n  return (x % 2 ? 2 : 0);\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n\t//return (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad;\n\tPOINT g[101];//n\n\tPOINT q[10000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\nrad =0;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t,dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t);//q[j],g[i],g[i+1]\n\t\t\trad += w;\n//printf(\"%lf\\n\",w);\n\t\t\tif(fabs(w - 3.1415926535)<=0.000001 || fabs(w +3.1415926535)<=0.000001)ans[j] = 1;\n\t\t}\n//printf(\"\\n%lf\\n\\n\",rad);\n\t\tif(ans[j] != 1){\n\t\t\tif(fabs(rad - 3.1415926535 * 2)<=0.000001){//2??\n\t\t\t\tans[j] = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n \n#define zahyoutype long\n \ntypedef struct Point{zahyoutype x,y;}P;\ntypedef struct line{P p1,p2;}L;\nint sgn(zahyoutype x){return x<0?-1:x>0;}\n \n//opとoqの内積と外積\nzahyoutype innerproduct(P p,P q,P o){return (p.x-o.x)*(q.x-o.x)+(p.y-o.y)*(q.y-o.y);}\nzahyoutype crossproduct(P p,P q,P o){return (p.x-o.x)*(q.y-o.y)-(p.y-o.y)*(q.x-o.x);}\n \nint iscrossSS(L s,L t){\n\t//点(p,q)が直線f(x,y)=ax+by+c=0のどっち側にあるかは外積を見ればよい\n\tzahyoutype t1=crossproduct(t.p1,s.p2,s.p1);\n\tzahyoutype t2=crossproduct(t.p2,s.p2,s.p1);\n\tzahyoutype t3=crossproduct(s.p1,t.p2,t.p1);\n\tzahyoutype t4=crossproduct(s.p2,t.p2,t.p1);\n\t//同一直線上にない\n\tif(t1 || t2)return sgn(t1)!=sgn(t2) && sgn(t3)!=sgn(t4);\n\t//if(t1 || t2)return sgn(t1)*sgn(t2)==-1 && sgn(t3)*sgn(t4)==-1;//端点を含まない\n\t//同一直線上にある\n\t//内積をみる\n\tzahyoutype c1=innerproduct(s.p2,s.p2,s.p1);\n\tzahyoutype c2=innerproduct(t.p1,s.p2,s.p1);\n\tzahyoutype c3=innerproduct(t.p2,s.p2,s.p1);\n\treturn 0<=c2&&c2<=c1 || 0<=c3&&c3<=c1 || c2<=0&&c1<=c3 || c3<=0&&c1<=c2;\n\t//return 0<c2&&c2<c1 || 0<c3&&c3<c1 || c2<=0&&c1<=c3 || c3<=0&&c1<=c2;//端点を含まない\n}\n \ndouble seglen(L s){return hypot(s.p2.x-s.p1.x,s.p2.y-s.p1.y);}\ndouble distPP(P p,P q){return hypot(p.x-q.x,p.y-q.y);}\ndouble distPL(P p,L s){return fabs(crossproduct(p,s.p2,s.p1)/seglen(s));}\ndouble distPS(P p,L s){\n\tzahyoutype c =innerproduct(   p,s.p2,s.p1);\n\tzahyoutype ss=innerproduct(s.p2,s.p2,s.p1);\n\tif(c<=0)return distPP(p,s.p1);\n\tif(c<=ss)return distPL(p,s);\n\treturn distPP(p,s.p2);\n}\n \nvoid readpoint(P*p){zahyoutype x=1;scanf(x/2?\"%lf%lf\":\"%ld%ld\",&p->x,&p->y);}\nvoid printpoint(P p){zahyoutype x=1;printf(x/2?\"%.f %.f\\n\":\"%ld %ld\\n\",p.x,p.y);}\n \nP p[110];\nL s[110];\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\treadpoint(p+i);\n\t\ts[i].p2=p[i];\n\t\ts[(i+1)%n].p1=p[i];\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tL t;\n\t\treadpoint(&t.p1);\n\t\t{\n\t\t\tint flag=0;\n\t\t\tfor(int i=0;i<n;i++)if(distPS(t.p1,s[i])==0)flag=1;\n\t\t\tif(flag){\n\t\t\t\tputs(\"1\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\tint flag=1;\n\t\t\twhile(flag){\n\t\t\t\tt.p2.x=rand()%1000+10000;\n\t\t\t\tt.p2.y=rand()%1000+10000;\n\t\t\t\tif(seglen(t)==0)continue;\n\t\t\t\tflag=0;\n\t\t\t\tfor(int i=0;i<n;i++)if(distPS(p[i],t)==0)flag=1;\n\t\t\t}\n\t\t}\n\t\t \n\t\tint flag2=0;\n\t\tfor(int i=0;i<n;i++)if(iscrossSS(t,s[i]))flag2^=1;\n\t\tputs(flag2?\"2\":\"0\");\n\t}\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.y + a.y*b.x;\n}\ndouble cross(POINT a,POINT b){//??????\n\treturn (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad = 0;\n\tPOINT g[101];//n\n\tPOINT q[1000];//m\n\tint ans[1000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%d%d\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%d%d\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i:1]))\n\t\t\t\t/dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i:1]))\n\t\t\t\t));//q[j],g[i],g[i+1]\n\t\t\trad += w;\n\t\t\tif(w == 3.1415926535 || w == -3.1415926535)ans[j] = 1;\n\t\t}\n\t\tif(ans[j] != 1){\n\t\t\tif(rad == 3.1415926535 * 2){//2??\n\t\t\t\tans = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d?\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n \ntypedef struct POINT{\n    double x,y;\n}POINT;\ntypedef struct LINE{\n    double x,y;\n}LINE;\n \n//double \n \ndouble dot(POINT a,POINT b){//??????\n    return a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n    b.x -= a.x;\n    b.y -= a.y;\n    return b;\n}\n \nint inclusion(POINT a[],int n,POINT p){\n    int ans = 0;\n    int i;\n    POINT g[n+1];\n    double w,rad = 0.0;\n \n    for(i = 0;i < n;i++){\n        g[i] = a[i];\n    }\n    g[n] = g[0];\n \n    for(i = 0;i < n;i++){\n        if(fabs(g[i].x - p.x)<=0.000001 && fabs(g[i].y - p.y) <= 0.000001){\n            return ans = 1;\n        }\n    }\n    for(i = 0;i < n;i++){\n        w = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n                dot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n        rad += w;\n        if(fabs(w - 3.1415926535) <= 0.000001 ||\n             fabs(w + 3.1415926535) <= 0.000001)\n            return ans = 1;\n    }\n    if(fabs(rad - 3.1415926535*2)<=0.000001){//2??\n        return ans = 2;//in!\n    }\n    return ans;\n}\n \nint main(){\n    int i,m,n;\n    POINT g[100];//n\n    POINT q;//m\n    int ans = 0;\n \n    scanf(\"%d\",&n);\n    for(i = 0;i < n;i++){\n        scanf(\"%lf%lf\",&g[i].x,&g[i].y);\n    }\n    scanf(\"%d\",&m);\n    for(i = 0;i < m;i++){\n        scanf(\"%lf%lf\",&q.x,&q.y);\n        ans = inclusion(g,n,q);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n\t//return (a.x*a.x + a.y*a.y)*(b.x*b.x + b.y*b.y) - dot(a,b)*dot(a,b);\n    return a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tPOINT ans;\n\tans.x = b.x-a.x;\n\tans.y = b.y-a.y;\n\treturn ans;\n}\n\nint main(){\n\tint i,j,k,l,m,n;\n\tdouble w,e,r,t,y;\n\tdouble rad;\n\tPOINT g[101];//n\n\tPOINT q[10000];//m\n\tint ans[10000] = {0};\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tg[n] = g[0];\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q[i].x,&q[i].y);\n\t\tfor(j = 0;j < n;j++){\n\t\t\tif(g[j].x == q[i].x && g[j].y == q[i].y){\n\t\t\t\tans[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j = 0;j < m;j++){\n\t\tif(ans[j] == 1)continue;\nrad =0;\n\t\tfor(i = 0;i < n;i++){\n\t\t\tw = atan2(cross(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t,dot(\n\t\t\t\tmake_vec(q[j],g[i]),\n\t\t\t\tmake_vec(q[j],g[i+1]))\n\t\t\t\t);//q[j],g[i],g[i+1]\n\t\t\trad += w;\n//printf(\"%lf\\n\",w);\n\t\t\tif(fabs(w - 3.1415926535)<=0.000001 || fabs(w +3.1415926535)<=0.000001)ans[j] = 1;\n\t\t}\n//printf(\"\\n%lf\\n\\n\",rad);\n\t\tif(ans[j] != 1){\n\t\t\tif(fabs(rad - 3.1415926535 * 2)<=0.000001){//2??\n\t\t\t\tans[j] = 2;//in!\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n\ntypedef struct POINT{\n\tdouble x,y;\n}POINT;\ntypedef struct LINE{\n\tdouble x,y;\n}LINE;\n\n//double \n\ndouble dot(POINT a,POINT b){//内積\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//外積\n\treturn a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - 3.1415926535) <= 0.000001 ||\n\t\t\t fabs(w + 3.1415926535) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - 3.1415926535*2)<=0.000001){//2π\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_3_C Polygon-Point Containment\n// 2018.5.3 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\n// 点が多角形に含まれているかの判定　2:含まれる, 1:辺上にある, 0:含まれない\nint containsPolyP(int n, PP *poly, PP p)\n{\n\tint i, f;\n\tPP a, b, t;\n\tdouble c;\t\t// cross(a,b)\n\n\tf = 0;\n\tfor (i = 0; i < n; i++) {\n\t\ta = vsub(poly[i], p), b = vsub(poly[i+1], p);\n\t\tif (EQ((c=cross(a, b)), 0) && dot(a, b) < EPS) return 1;\n\t\tif (!EQ(a.y, b.y) && a.y >= b.y) t = a, a = b, b = t, c = -c;\n\t\tif (a.y < EPS && EPS < b.y && c > EPS) f = !f;\n\t}\n\treturn f? 2: 0;\n}\n\nPP pp[110];\n\nint main()\n{\n\tint n, q, i;\n\tPP p;\n\n\tn = in();\n\tfor (i = 0; i < n; i++) pp[i].x = in(), pp[i].y = in();\n\tpp[n] = pp[0];\n\tq = in();\n\twhile (q--) {\n\t\tp.x = in(), p.y = in();\n\t\tputchar('0'+ containsPolyP(n, pp, p)), putchar('\\n');\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "\t#include<stdio.h>\n#include<math.h>\n\ntypedef struct{\n\tdouble x;\n\tdouble y;\n}POINT;\n\ndouble dot(POINT a,POINT b){//??????\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(POINT a,POINT b){//??????\n\treturn a.x*b.y - a.y*b.x;\n}\nPOINT make_vec(POINT a,POINT b){//a->b\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - 3.1415926535) <= 0.000001 ||\n\t\t\t fabs(w + 3.1415926535) <= 0.000001)\n\t\t\nreturn ans = 1;\n\t}\n\tif(fabs(rad - 3.1415926535*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\npublic class Main {\n\t\n\tstatic int INF = 1000000000;\n\tstatic int MAXN = 31;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint[][] point = new int[n][2];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tpoint[i][0] = input.nextInt();\n\t\t\tpoint[i][1] = input.nextInt();\n\t\t}\n\t\tint q = input.nextInt();\n\t\tfor (int i = 0; i < q; ++i) {\n\t\t\tint x, y;\n\t\t\tx = input.nextInt();\n\t\t\ty = input.nextInt();\n\t\t\tSystem.out.println(checkWithPolygon(x, y, point));\n\t\t}\n\t}\n\t\n\tstatic int checkWithPolygon(int x, int y, int[][] pol) {\n\t\tboolean check = false;\n\t\tfor (int i = 0; i < pol.length; ++i) {\n\t\t\tint ax = pol[i][0] - x, ay = pol[i][1] - y;\n\t\t\tint bx = pol[(i + 1) % pol.length][0] - x, by = pol[(i + 1) % pol.length][1] - y;\n\t\t\tif (ay > by) {\n\t\t\t\tint temp = ax; ax = bx; bx = temp;\n\t\t\t\ttemp = ay; ay = by; by = temp;\n\t\t\t}\n\t\t\tif (ay <= 0 && by > 0 && cross(ax, ay, bx, by) < 0) check = !check;\n\t\t\tif (cross(ax, ay, bx, by) == 0 && dot(ax, ay, bx, by) <= 0) return 1;\n\t\t}\n\t\treturn check ? 2 : 0;\n\t}\n\t\n\tstatic int cross(int ax, int ay, int bx, int by) {\n\t\treturn ax * by - ay * bx;\n\t}\n\t\n\tstatic int dot(int ax, int ay, int bx, int by) {\n\t\treturn ax * by + ay * bx;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }else if(x0 < x[j] && x0 < x[j + 1] && y0 == y[j] && y0 == y[j + 1]){\n            countr++;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0 && y[j] == y0)countr++;\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y, x0, y0;\n    int i, j;\n    double s, ax, ay, bx, by, min;\n\n    n = sc.nextInt();\n    x = new double[n];\n    y = new double[n];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n\n    q = sc.nextInt();\n    x0 = new double[q];\n    y0 = new double[q];\n\n    for(i = 0;i < q;i++){\n      x0[i] = sc.nextDouble();\n      y0[i] = sc.nextDouble();\n    }\n\n    sc.close();\n\n    for(j = 0;j < q;j++){\n      ax = x[n - 1] - x0[j];\n      ay = y[n - 1] - y0[j];\n      bx = x[0] - x0[j];\n      by = y[0] - y0[j];\n      min = ax * by - bx * ay;\n      for(i = 0;i < n - 1;i++){\n        ax = x[i] - x0[j];\n        ay = y[i] - y0[j];\n        bx = x[i + 1] - x0[j];\n        by = y[i + 1] - y0[j];\n        s = ax * by - bx * ay;\n        if(min > s)min = s;\n      }\n\n      if(min > 0){\n        System.out.println(\"2\");\n      }else if(min == 0){\n        System.out.println(\"1\");\n      }else{\n        System.out.println(\"0\");\n      }\n    }\n\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, count;\n    double x0, y0;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      count = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 || (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }\n        }\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j] &&\n        (x[j] + (x[j+1] - x[j]) * (y0 - y[j]) / (y[j+1] - y[j])) > x0){\n          count++;\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(count % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.*;\nimport java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\nclass WindingNumber {\n    private ArrayList<Point2D> polygon;\n\n    WindingNumber(ArrayList<Point2D> polygon) {\n        this.polygon = polygon;\n    }\n\n    private boolean eq(double a,double b) {\n        //System.out.println(Math.abs(a-b));\n        return Math.abs(a-b) < 0.0001;\n    }\n\n    private Point2D sub(Point2D p1,Point2D p2) {\n        return new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n    }\n\n    private double det(Point2D p1,Point2D p2) {\n        return p1.getX() * p2.getY() - p1.getY() * p2.getX();\n    }\n\n    private double dot(Point2D p1,Point2D p2) {\n        return p1.getX() * p2.getX() + p1.getY() * p2.getY();\n    }\n\n    private boolean onSegment(Point2D target,Point2D p1,Point2D p2) {\n        return eq(0,det(sub(p1,target),sub(p2,target))) && dot(sub(p1,target),sub(p2,target)) < 1e-10;\n    }\n\n    public int isContain(Point2D target) {\n        int wn = 0;\n        int sz = polygon.size();\n\n        for (int i = 0;i < polygon.size() ;i ++) {\n            if (onSegment(target,polygon.get(i),polygon.get((i+1)%sz))) return 1;\n        }\n\n        for(int i = 0; i < polygon.size() ; i++){\n            // 上向きの辺、下向きの辺によって処理が分かれる。\n            // 上向きの辺。点Pがy軸方向について、始点と終点の間にある。ただし、終点は含まない。(ルール1)\n            if ( (polygon.get(i).getY() <= target.getY()) && (polygon.get((i+1)%sz).getY() > target.getY()) ) {\n                // 辺は点pよりも右側にある。ただし、重ならない。(ルール4)\n                // 辺が点pと同じ高さになる位置を特定し、その時のxの値と点pのxの値を比較する。\n                double vt = (target.getY() - polygon.get(i).getY()) * (polygon.get((i+1)%sz).getX() - polygon.get(i).getX());\n                if(target.getX() < (polygon.get(i).getX() + (vt / (polygon.get((i+1)%sz).getY() - polygon.get(i).getY())))){\n                    wn++;  //ここが重要。上向きの辺と交差した場合は+1\n                }\n            }\n            // 下向きの辺。点Pがy軸方向について、始点と終点の間にある。ただし、始点は含まない。(ルール2)\n            else if ( (polygon.get(i).getY() > target.getY()) && (polygon.get((i+1)%sz).getY() <= target.getY()) ) {\n                // 辺は点pよりも右側にある。ただし、重ならない。(ルール4)\n                // 辺が点pと同じ高さになる位置を特定し、その時のxの値と点pのxの値を比較する。\n                double vt = (target.getY() - polygon.get(i).getY()) * (polygon.get((i+1)%sz).getX() - polygon.get(i).getX());\n                if(target.getX() < (polygon.get(i).getX() + (vt / (polygon.get((i+1)%sz).getY() - polygon.get(i).getY())))){\n                    --wn;  //ここが重要。下向きの辺と交差した場合は-1\n                }\n            }\n            // ルール1,ルール2を確認することで、ルール3も確認できている。\n        }\n\n        if (wn == 1) {\n            return 2;\n        }\n        else {\n             return 0;\n        }\n    }\n}\n\npublic class Main{\n    public static void main(String[] args){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        ArrayList<Point2D> polygon = new ArrayList<Point2D>();\n        for(int i=0;i<n;i++){\n            double x = stdIn.nextDouble();\n            double y = stdIn.nextDouble();\n            polygon.add(new Point2D.Double(x, y));\n        }\n        WindingNumber solve = new WindingNumber(polygon);\n        int q = stdIn.nextInt();\n        for(int i=0;i<q;i++){\n            double x = stdIn.nextDouble();\n            double y = stdIn.nextDouble();\n            System.out.println(solve.isContain(new Point2D.Double(x,y)));\n        }\n    }\n}\n\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\nimport java.math.BigInteger;\n \npublic class Main implements Runnable {\n\t\n\t//static int mod = 1000000007;\n\t\n    public static void main(String[] args) {\n    \tnew Thread(null, new Main(), \"\", 16 * 1024 * 1024).start();\n    }\n    \n    public void run() {\n        FastScanner sc = new FastScanner();\n        \n        int n = sc.nextInt();\n        ArrayList<Point> pol = new ArrayList<>();\n        \n        for(int i=0;i<n;i++){\n        \tpol.add(new Point(sc.nextDouble(),sc.nextDouble()));\n        }\n        \n        Polygon polygon = new Polygon(pol);\n\n        int q = sc.nextInt();\n        \n        for(int i=0;i<q;i++){\n        \tSystem.out.println(polygon.pointContain(new Point(sc.nextDouble(),sc.nextDouble())));\n        }\n    }\n\n    \n}\n\nclass Polygon {\n\tstatic final double allowableError = 0.00000001;\n\tArrayList<Point> pol; //反時計周り\n\t\n\tpublic Polygon(ArrayList<Point> pol){\n\t\tthis.pol = pol;\n\t}\n\t\n\t//面積を導出\n\tdouble area(){\n\t\t//|det|/2は作る三角形の面積に一致\n\t\tdouble ans = 0;\n\t\t\n\t\tfor(int i=0;i<pol.size();i++){\n\t\t\tans += det(pol.get(i), pol.get(next(i)));\n\t\t}\n\t\t\n\t\treturn ans/2;\n\t}\n\t\n\t//pが多角形に含まれるなら2、pが辺上にあるなら1、pが外側にあるなら0を返す\n\tint pointContain(Point p){\n\t\t//pからx軸と平行・正方向の半直線を引き、奇数回交差すれば内部にある\n\t\tboolean isIn = false;\n\t\tfor(int i=0;i<pol.size();i++){\n\t\t\tint upid = i;\n\t\t\tint downid = next(i);\n\t\t\tif(pol.get(i).y < pol.get(next(i)).y){\n\t\t\t\tupid = next(i);\n\t\t\t\tdownid = i;\n\t\t\t}\n\t\t\t\n\t\t\t//ベクトルを便宜的に\n\t\t\tPoint pup = new Point(pol.get(upid).x - p.x, pol.get(upid).y - p.y);\t//p→p_i\n\t\t\tPoint pdown = new Point(pol.get(downid).x - p.x, pol.get(downid).y - p.y); //p→p_next(i)\n\t\t\t\n\t\t\tdouble det = det(pup, pdown);\n\t\t\tif(pup.y > 0 && 0 >= pdown.y){\t//2重カウントしないために不等号を>と>=にする\n\t\t\t\tif(det < 0){\n\t\t\t\t\tisIn = !isIn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//辺上判定\n\t\t\tif(Math.abs(det) < allowableError){\t//p→p_iとp→p_next(i)が一直線上\n\t\t\t\tif(pup.x * pdown.x + pup.y * pdown.y <= 0){\t//pからみて同方向でない\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(isIn){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\t//反時計回りに1つ進んだ頂点のindex\n\tint next(int id){\n\t\tint size = pol.size();\n\t\tif(id<=size-2){\n\t\t\treturn id+1;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\t//ベクトルのdet\n\tstatic double det(double x1, double y1, double x2, double y2){\n\t\treturn x1*y2 - x2*y1;\n\t}\n\tstatic double det(Point p, Point q){\n\t\treturn p.x*q.y - p.y*q.x;\n\t}\n\t\n\t//p0を起点に、p1へのベクトルからみてp2へのベクトルが反時計回りなら1、時計回りなら2\n\t//↑が同一直線状にあるとき、→p2が→p1と反対側なら3、→p2が→p1の延長線上なら4、→p2が→p1上にあれば5を返す\n\tstatic int direction(Point p0, Point p1, Point p2) {\n\t\tif(p0.x == p1.x) {\n\t\t\tif(p2.x == p0.x) {\n\t\t\t\tif((p0.y <= p2.y && p2.y <= p1.y) || (p1.y <= p2.y && p2.y <= p0.y)) {\n\t\t\t\t\treturn 5;\n\t\t\t\t}else if (d2(p0,p2) < d2(p1,p2)) {\n\t\t\t\t\treturn 3;\n\t\t\t\t}else {\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\t\t\t}else if ((p0.y < p1.y && p2.x < p0.x) || (p0.y > p1.y && p2.x > p0.x)) {\n\t\t\t\treturn 1;\n\t\t\t}else {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t}else{\n\t\t\t//y=ax+b上にp0,p1が存在\n\t\t\tdouble a = (p1.y - p0.y) / (p1.x - p0.x);\n\t\t\tdouble b = p1.y - a * p1.x;\n\t\t\tif(Math.abs(p2.y - (a * p2.x + b)) < allowableError) {\n\t\t\t\tif((p0.x <= p2.x && p2.x <= p1.x) || (p1.x <= p2.x && p2.x <= p0.x)) {\n\t\t\t\t\treturn 5;\n\t\t\t\t}else if (d2(p0,p2) < d2(p1,p2)) {\n\t\t\t\t\treturn 3;\n\t\t\t\t}else {\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\t\t\t}else if ((p0.x < p1.x && p2.y - (a * p2.x + b) > 0) || (p0.x > p1.x && p2.y - (a * p2.x + b) < 0)) {\n\t\t\t\treturn 1;\n\t\t\t}else {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t}\n\t}\n\t//ユークリッド距離の2乗\n\tstatic double d2(Point p1, Point p2){\n\t\treturn (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y);\n\t}\n\n}\n\nclass Point implements Comparable<Point>{\n\tdouble x,y;\n\t\n\tpublic Point(double a, double b){\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(x);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\ttemp = Double.doubleToLongBits(y);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPoint other = (Point) obj;\n\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n\t\t\treturn false;\n\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Point o){\n\t\tif(x!=o.x){\n\t\t\treturn Double.compare(x,o.x);\n\t\t}\n\t\treturn Double.compare(y, o.y);\n\t}\n\t\t\n}\n\nclass FastScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\tprivate boolean hasNextByte() {\n\t\tif (ptr < buflen) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tptr = 0;\n\t\t\ttry {\n\t\t\t\tbuflen = in.read(buffer);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (buflen <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int readByte() {\n\t\tif (hasNextByte())\n\t\t\treturn buffer[ptr++];\n\t\telse\n\t\t\treturn -1;\n\t}\n\tprivate static boolean isPrintableChar(int c) {\n\t\treturn 33 <= c && c <= 126;\n\t}\n\tpublic boolean hasNext() {\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\tptr++;\n\t\treturn hasNextByte();\n\t}\n\tpublic String next() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = readByte();\n\t\twhile (isPrintableChar(b)) {\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic long nextLong() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tlong n = 0;\n\t\tboolean minus = false;\n\t\tint b = readByte();\n\t\tif (b == '-') {\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\tif (b < '0' || '9' < b) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile (true) {\n\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\treturn minus ? -n : n;\n\t\t\t} else {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\tpublic int nextInt() {\n\t\tlong nl = nextLong();\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\tthrow new NumberFormatException();\n\t\treturn (int) nl;\n\t}\n\tpublic int[] nextIntArray(int n){\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic Integer[] nextIntegerArray(int n){\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint n = stdIn.nextInt();\n\t\tPoint[] query = new Point[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tquery[i] = new Point(x,y);\n\t\t}\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tPoint z = new Point(x,y);\n\t\t\tint a = z.contains(query);\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\t\n}\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y);\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\tdouble t1 = getDistanceSP(b,c);\n\t\tdouble t2 = a.getDistanceSP(b,c);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tboolean flag2 = false;\n\t\tboolean flag3 = false;\n\t\tPoint p = new Point(this.x,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(judge(query[i]) || query[i].CCW(query[(i+1)%l],p) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tPoint p1 = new Point(Integer.MAX_VALUE/2,this.y);\n\t\tPoint p2 = new Point(-Integer.MAX_VALUE/2,this.y);\n\t\tfor(int i=0;i<l;i++){\n\t\t\tVector v1 = new Vector(p.x,p.y,p1.x,p1.y);\n\t\t\tVector v2 = new Vector(query[i].x,query[i].y,query[(i+1)%l].x,query[(i+1)%l].y);\n\t\t\tif(!v1.judgeisParallel(v2) && this.y != query[i].y && this.y != query[(i+1)%l].y){\n\t\t\t\tif(intersect(p1,query[i],query[(i+1)%l])){\n\t\t\t\tflag2 = true;\n\t\t\t\t}\n\t\t\t\tif(intersect(p2,query[i],query[(i+1)%l])){\n\t\t\t\t\tflag3 = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(flag1){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(flag2 && flag3){\n\t\t\treturn 2;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn this.x * a.x + this.y * a.y;\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn this.x * a.y - this.y * a.x;\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z ){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z ){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn this.x * this.x + this.y * this.y;\n\t}\n\n\tdouble cos(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tVector c = new Vector(a.x,a.y,b.x,b.y);\n\t\tif(judge(a.dot(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble cos = (Math.pow(a.abs(),2)+Math.pow(b.abs(),2)-Math.pow(c.abs(),2))/(2*a.abs()*b.abs());\n\t\treturn cos;\n\t}\n\tdouble sin(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tif(judge(a.cross(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble height = a.cross(b)/a.abs();\n\t\tdouble sin = b.abs()/height;\n\t\treturn sin;\n\t}\n\tdouble cosLength( double a , double b , double c ){\n\t\tdouble cos = (Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2))/(2 * a * b);\n\t\tif(judge(cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn cos;\n\t}\n\tdouble sinLength( double a , double b , double c ){\n\t\tdouble cos = cosLength(a,b,c);\n\t\tif(judge(1-cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.sqrt(1-Math.pow(cos,2));\n\n\t}\n\n\tvoid projection( Vector a ){\n\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\tdouble frac = a.abs() * cos/abs();\n\t\tmul(frac);\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tprivate static FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\n\tpublic static void main(String[] args) {\n\t\tint n = sc.nextInt();\n\t\tPoint[] p = new Point[n];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tp[i] = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t}\n\t\t\n\t\tPoint edge = new Point(10000.532523523, 0.3256235235);\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tPoint pq = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t\tboolean flag = false;\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif(Math.abs((p[j].x-p[(j+1)%n].x)*(pq.y-p[j].y)+(p[j].y-p[(j+1)%n].y)*(p[j].x-pq.x)) < ALLOWABLE_ERROR) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t\tans.append(\"\\n\");\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag) continue;\n\t\t\t\n\t\t\tint cnt = 0;\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif(checkCross(pq, edge, p[j], p[(j+1)%n])) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt%2 == 1) {\n\t\t\t\tans.append(2);\n\t\t\t} else {\n\t\t\t\tans.append(0);\n\t\t\t}\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic boolean checkCross(Point p1, Point p2, Point p3, Point p4) {\n\t\tif(p1.x >= p2.x) {\n\t\t\tif((p1.x<p3.x && p1.x<p4.x) || (p2.x>p3.x && p2.x>p4.x)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif((p2.x<p3.x && p2.x<p4.x) || (p1.x>p3.x && p1.x>p4.x)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(p1.y >= p2.y) {\n\t\t\tif((p1.y<p3.y && p1.y<p4.y) || (p2.y>p3.y && p2.y>p4.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif((p2.y<p3.y && p2.y<p4.y) || (p1.y>p3.y && p1.y>p4.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(((p1.x-p2.x)*(p3.y-p1.y)+(p1.y-p2.y)*(p1.x-p3.x))*((p1.x-p2.x)*(p4.y-p1.y)+(p1.y-p2.y)*(p1.x-p4.x))>0) {\n\t\t\treturn false;\n\t\t}\n\t\tif(((p3.x-p4.x)*(p1.y-p3.y)+(p3.y-p4.y)*(p3.x-p1.x))*((p3.x-p4.x)*(p2.y-p3.y)+(p3.y-p4.y)*(p3.x-p2.x))>0) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\tstatic class Point {\n\t\tdouble x;\n\t\tdouble y;\n\t\tPoint(double x, double y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t}\n\t\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint n = stdIn.nextInt();\n\t\tPoint[] query = new Point[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tquery[i] = new Point(x,y);\n\t\t}\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tPoint z = new Point(x,y);\n\t\t\tSystem.out.println(z.contains(query));\n\t\t}\n\t}\t\n}\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y);\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\tdouble t1 = getDistanceSP(b,c);\n\t\tdouble t2 = a.getDistanceSP(b,c);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tPoint p = new Point(this.x,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(judge(query[i]) || query[i].CCW(query[(i+1)%l],p) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tboolean flag2 = false;\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tVector v1 = new Vector(this.x,this.y,query[i].x,query[i].y);\n\t\t\tVector v2 = new Vector(this.x,this.y,query[(i+1)%query.length].x,query[(i+1)%query.length].y);\n\t\t\tif(v1.y<=0 && v2.y>0 && v1.cross(v2)<0){\n\t\t\t\tflag2 = !flag2;\n\t\t\t}\n\t\t\telse if(v2.y<=0 && v1.y>0 && v2.cross(v1)<0){\n\t\t\t\tflag2 = !flag2;\n\t\t\t}\n\t\t}\n\t\tif(flag1){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(flag2){\n\t\t\treturn 2;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn this.x * a.x + this.y * a.y;\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn this.x * a.y - this.y * a.x;\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z ){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z ){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn this.x * this.x + this.y * this.y;\n\t}\n\n\tdouble cos(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tVector c = new Vector(a.x,a.y,b.x,b.y);\n\t\tif(judge(a.dot(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble cos = (Math.pow(a.abs(),2)+Math.pow(b.abs(),2)-Math.pow(c.abs(),2))/(2*a.abs()*b.abs());\n\t\treturn cos;\n\t}\n\tdouble sin(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tif(judge(a.cross(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble height = a.cross(b)/a.abs();\n\t\tdouble sin = b.abs()/height;\n\t\treturn sin;\n\t}\n\tdouble cosLength( double a , double b , double c ){\n\t\tdouble cos = (Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2))/(2 * a * b);\n\t\tif(judge(cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn cos;\n\t}\n\tdouble sinLength( double a , double b , double c ){\n\t\tdouble cos = cosLength(a,b,c);\n\t\tif(judge(1-cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.sqrt(1-Math.pow(cos,2));\n\n\t}\n\n\tvoid projection( Vector a ){\n\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\tdouble frac = a.abs() * cos/abs();\n\t\tmul(frac);\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }else if(x0 < x[j + 1] && x0 < x[j] && y0 == y[j] && y0 == y[j + 1]){\n            if((y[(j - 1 + n) % n] - y0) * (y[(j + 2) % n] - y0) > 0){\n              countr++;\n            }\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0 && y[j] == y0){\n              countr++;\n            }\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint g = scan.nextInt();\n\t\tPolygon pol = new Polygon();\n\t\tfor (int i=0;i<g;i++) {\n\t\t\tpol.add(new Point(scan.nextInt(),scan.nextInt()));\n\t\t}\n\t\tint q = scan.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tSystem.out.println(contains(pol, new Point(scan.nextInt(),scan.nextInt())));\n\t\t}\n\t}\n\tstatic int contains(Polygon poly, Point p) {\n\t\tint nCross=0;\n\t\tfor (int i=0;i<poly.size();i++) {\n\t\t\tVector a = poly.get(i).diff(p); \n\t\t\tVector b = poly.get((i+1)%poly.size()).diff(p); \n\t\t\tif (Math.abs(a.crossProduct(b))<EPS && a.dotProduct(b)<EPS) return 1;// 1:on\n\t\t\tif (a.y>b.y){Vector tmp=a;a=b;b=tmp;}\n\t\t\tif (a.y<EPS && b.y>EPS && a.crossProduct(b)>EPS) nCross++;\n\t\t}\n\t\treturn nCross%2==1 ? 2 : 0;// 2:in, 0:out\n\t}\n\n\n}\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+p.y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n\tpublic String toString(){return \"(\"+x+\",\"+y+\")\";}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.y-p2.y)*(s.p1.y-s.p2.y);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n\tpublic String toString(){return p1.toString()+\"->\"+p2.toString();}\n\tpublic Line toLine() {return new Line(p1,p2);}\n}\nclass Line extends Segment{public Line(Point ap1, Point ap2){super(ap1,ap2);}}\n\nclass Circle {Point c;double r;Circle(Point ac, double ar){c=ac;r=ar;}public String toString(){return \"c:\"+c.toString()+\",r:\"+r;}}\nclass Polygon extends ArrayList<Point>{}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr, countl;\n    double x0, y0;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countl = 0;\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j]){\n          if((x[j] * (y[j + 1] - y[j]) + (x[j + 1] - x[j]) * (y0 - y[j])) > x0 * (y[j + 1] - y[j])){\n            countr++;\n          }else if((x[j] * (y[j + 1] - y[j]) + (x[j + 1] - x[j]) * (y0 - y[j])) < x0 * (y[j + 1] - y[j])){\n            countl++;\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countl % 2 == 1 && countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }else if(x0 < x[j] && x0 < x[j + 1] && y0 == y[j] && y0 == y[j + 1]){\n            countr++;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0 && y[j] == y0){\n              countr++;\n            }\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }else if(x0 < x[j] && x0 < x[j + 1] && y0 == y[j] && y0 == y[j + 1]){\n            countr++;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0)countr++;\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\npublic class Main {\n\t\n\tstatic int INF = 1000000000;\n\tstatic int MAXN = 31;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint[][] point = new int[n][2];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tpoint[i][0] = input.nextInt();\n\t\t\tpoint[i][1] = input.nextInt();\n\t\t}\n\t\tint q = input.nextInt();\n\t\tfor (int i = 0; i < q; ++i) {\n\t\t\tint x, y;\n\t\t\tx = input.nextInt();\n\t\t\ty = input.nextInt();\n\t\t\tSystem.out.println(checkWithPolygon(x, y, point));\n\t\t}\n\t}\n\t\n\tstatic int checkWithPolygon(int x, int y, int[][] pol) {\n\t\tboolean check = false;\n\t\tfor (int i = 0; i < pol.length; ++i) {\n\t\t\tint ax = pol[i][0] - x, ay = pol[i][1] - y;\n\t\t\tint bx = pol[(i + 1) % pol.length][0] - x, by = pol[(i + 1) % pol.length][1] - y;\n\t\t\tif (ay > by) {\n\t\t\t\tint temp = ax; ax = bx; bx = temp;\n\t\t\t\ttemp = ay; ay = by; by = temp;\n\t\t\t}\n\t\t\tif (ay <= 0 && by > 0 && cross(ax, ay, bx, by) < 0) check = !check;\n\t\t\tif (cross(ax, ay, bx, by) == 0) return 1;\n\t\t}\n\t\treturn check ? 2 : 0;\n\t}\n\t\n\tstatic int cross(int ax, int ay, int bx, int by) {\n\t\treturn ax * by - ay * bx;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.*;\nimport java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\nclass WindingNumber {\n    private ArrayList<Point2D> polygon;\n\n    WindingNumber(ArrayList<Point2D> polygon) {\n        this.polygon = polygon;\n    }\n\n    private boolean eq(double a,double b) {\n        return Math.abs(a-b) < 0.0001;\n    }\n\n    public int isContain(Point2D target) {\n        int wn = 0;\n        int sz = polygon.size();\n        for(int i = 0; i < polygon.size() ; i++){\n            // 上向きの辺、下向きの辺によって処理が分かれる。\n            // 上向きの辺。点Pがy軸方向について、始点と終点の間にある。ただし、終点は含まない。(ルール1)\n            if ( (polygon.get(i).getY() <= target.getY()) && (polygon.get((i+1)%sz).getY() > target.getY()) ) {\n                // 辺は点pよりも右側にある。ただし、重ならない。(ルール4)\n                // 辺が点pと同じ高さになる位置を特定し、その時のxの値と点pのxの値を比較する。\n                double vt = (target.getY() - polygon.get(i).getY()) / (polygon.get((i+1)%sz).getY() - polygon.get(i).getY());\n                if(eq(target.getX(),(polygon.get(i).getX() + (vt * (polygon.get((i+1)%sz).getX() - polygon.get(i).getX()))) )){\n                    return 1;\n                }\n                else if(target.getX() < (polygon.get(i).getX() + (vt * (polygon.get((i+1)%sz).getX() - polygon.get(i).getX())))){\n                    wn++;  //ここが重要。上向きの辺と交差した場合は+1\n                }\n            }\n            // 下向きの辺。点Pがy軸方向について、始点と終点の間にある。ただし、始点は含まない。(ルール2)\n            else if ( (polygon.get(i).getY() > target.getY()) && (polygon.get((i+1)%sz).getY() <= target.getY()) ) {\n                // 辺は点pよりも右側にある。ただし、重ならない。(ルール4)\n                // 辺が点pと同じ高さになる位置を特定し、その時のxの値と点pのxの値を比較する。\n                double vt = (target.getY() - polygon.get(i).getY()) / (polygon.get((i+1)%sz).getY() - polygon.get(i).getY());\n                if(eq(target.getX() ,(polygon.get(i).getX() + (vt * (polygon.get((i+1)%sz).getX() - polygon.get(i).getX()))))) {\n                    return 1;\n                }\n                else if(target.getX() < (polygon.get(i).getX() + (vt * (polygon.get((i+1)%sz).getX() - polygon.get(i).getX())))){\n                    --wn;  //ここが重要。下向きの辺と交差した場合は-1\n                }\n            }\n            // ルール1,ルール2を確認することで、ルール3も確認できている。\n        }\n\n        if (wn == 1) {\n            return 2;\n        }\n        else {\n             return 0;\n        }\n    }\n}\n\npublic class Main{\n    public static void main(String[] args){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        ArrayList<Point2D> polygon = new ArrayList<Point2D>();\n        for(int i=0;i<n;i++){\n            double x = stdIn.nextDouble();\n            double y = stdIn.nextDouble();\n            polygon.add(new Point2D.Double(x, y));\n        }\n        WindingNumber solve = new WindingNumber(polygon);\n        int q = stdIn.nextInt();\n        for(int i=0;i<q;i++){\n            double x = stdIn.nextDouble();\n            double y = stdIn.nextDouble();\n            System.out.println(solve.isContain(new Point2D.Double(x,y)));\n        }\n    }\n}\n\n\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint n = stdIn.nextInt();\n\t\tPoint[] query = new Point[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tquery[i] = new Point(x,y);\n\t\t}\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tPoint z = new Point(x,y);\n\t\t\tint a = z.contains(query);\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\t\n}\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y);\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\tdouble t1 = getDistanceSP(b,c);\n\t\tdouble t2 = a.getDistanceSP(b,c);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tboolean flag2 = false;\n\t\tboolean flag3 = false;\n\t\tPoint p = new Point(this.x,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(judge(query[i]) || query[i].CCW(query[(i+1)%l],p) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tPoint p1 = new Point(Integer.MAX_VALUE/2,this.y);\n\t\tPoint p2 = new Point(-Integer.MAX_VALUE/2,this.y);\n\t\tfor(int i=0;i<l;i++){\n\t\t\tVector v1 = new Vector(p.x,p.y,p1.x,p1.y);\n\t\t\tVector v2 = new Vector(query[i].x,query[i].y,query[(i+1)%l].x,query[(i+1)%l].y);\n\t\t\tif(!v1.judgeisParallel(v2)){\n\t\t\t\tif(intersect(p1,query[i],query[(i+1)%l])){\n\t\t\t\tflag2 = true;\n\t\t\t\t}\n\t\t\t\tif(intersect(p2,query[i],query[(i+1)%l])){\n\t\t\t\t\tflag3 = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(flag1){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(flag2 && flag3){\n\t\t\treturn 2;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn this.x * a.x + this.y * a.y;\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn this.x * a.y - this.y * a.x;\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z ){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z ){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn this.x * this.x + this.y * this.y;\n\t}\n\n\tdouble cos(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tVector c = new Vector(a.x,a.y,b.x,b.y);\n\t\tif(judge(a.dot(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble cos = (Math.pow(a.abs(),2)+Math.pow(b.abs(),2)-Math.pow(c.abs(),2))/(2*a.abs()*b.abs());\n\t\treturn cos;\n\t}\n\tdouble sin(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tif(judge(a.cross(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble height = a.cross(b)/a.abs();\n\t\tdouble sin = b.abs()/height;\n\t\treturn sin;\n\t}\n\tdouble cosLength( double a , double b , double c ){\n\t\tdouble cos = (Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2))/(2 * a * b);\n\t\tif(judge(cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn cos;\n\t}\n\tdouble sinLength( double a , double b , double c ){\n\t\tdouble cos = cosLength(a,b,c);\n\t\tif(judge(1-cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.sqrt(1-Math.pow(cos,2));\n\n\t}\n\n\tvoid projection( Vector a ){\n\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\tdouble frac = a.abs() * cos/abs();\n\t\tmul(frac);\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew CGL_3C().doIt();\n\t}\n\n\tclass CGL_3C{\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\t\tdouble dot(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getX()+p1.getY()*p2.getY();\n\t\t}\n\t\tPoint2D sub(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n\t\t}\n\t\tint contains(Point2D[] plist,Point2D p) {\n\t\t\tboolean in = false;\n\t\t\tint n = plist.length;\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tPoint2D a = sub(plist[i], p);\n\t\t\t\tPoint2D b = sub(plist[(i+1) % n], p);\n\t\t\t\tif(a.getY() > b.getY()){\n\t\t\t\t\tPoint2D temp = (Point2D) a.clone();\n\t\t\t\t\ta = b;\n\t\t\t\t\tb = temp;\n\t\t\t\t}\n\t\t\t\tif(a.getY() <= 0 && 0 < b.getY()){\n\t\t\t\t\tif(cross(a,b) < 0) in = ! in;\n\t\t\t\t}\n\t\t\t\tif(cross(a,b) == 0 && dot(a, b) <= 0) return 0;\n\t\t\t}\n\t\t\treturn in ? 1 : -1;\n\t\t}\n\n\t\tvoid doIt(){\n\t\t\tint n = in.nextInt();\n\t\t\tPoint2D[] ps = new Point2D[n];\n\t\t\tfor(int i=0;i<n;i++)ps[i] = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint m = in.nextInt();\n\t\t\tfor(int i=0;i<m;i++){\n\t\t\t\tPoint2D p = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tint result = contains(ps, p);\n\t\t\t\tif(result>0)System.out.println(\"2\");\n\t\t\t\telse if(result==0)System.out.println(\"1\");\n\t\t\t\telse if(result<0)System.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint n = stdIn.nextInt();\n\t\tPoint[] query = new Point[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tquery[i] = new Point(x,y);\n\t\t}\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x = stdIn.nextDouble();\n\t\t\tdouble y = stdIn.nextDouble();\n\t\t\tPoint z = new Point(x,y);\n\t\t\tint a = z.contains(query);\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\t\n}\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y);\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\tdouble t1 = getDistanceSP(b,c);\n\t\tdouble t2 = a.getDistanceSP(b,c);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tboolean flag2 = false;\n\t\tboolean flag3 = false;\n\t\tPoint p = new Point(this.x,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(judge(query[i]) || query[i].CCW(query[(i+1)%l],p) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tPoint p1 = new Point(Integer.MAX_VALUE/2,this.y);\n\t\tPoint p2 = new Point(-Integer.MAX_VALUE/2,this.y);\n\t\tfor(int i=0;i<l;i++){\n\t\t\tif(intersect(p1,query[i],query[(i+1)%l])){\n\t\t\t\tflag2 = true;\n\t\t\t}\n\t\t\tif(intersect(p2,query[i],query[(i+1)%l])){\n\t\t\t\tflag3 = true;\n\t\t\t}\n\t\t}\n\n\t\tif(flag1){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(flag2 && flag3){\n\t\t\treturn 2;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn this.x * a.x + this.y * a.y;\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn this.x * a.y - this.y * a.x;\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z ){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z ){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn this.x * this.x + this.y * this.y;\n\t}\n\n\tdouble cos(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tVector c = new Vector(a.x,a.y,b.x,b.y);\n\t\tif(judge(a.dot(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble cos = (Math.pow(a.abs(),2)+Math.pow(b.abs(),2)-Math.pow(c.abs(),2))/(2*a.abs()*b.abs());\n\t\treturn cos;\n\t}\n\tdouble sin(Vector a){\n\t\tVector b = new Vector(0,0,this.x,this.y);\n\t\tif(judge(a.cross(b))){\n\t\t\treturn 0.0;\n\t\t}\n\t\tdouble height = a.cross(b)/a.abs();\n\t\tdouble sin = b.abs()/height;\n\t\treturn sin;\n\t}\n\tdouble cosLength( double a , double b , double c ){\n\t\tdouble cos = (Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2))/(2 * a * b);\n\t\tif(judge(cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn cos;\n\t}\n\tdouble sinLength( double a , double b , double c ){\n\t\tdouble cos = cosLength(a,b,c);\n\t\tif(judge(1-cos)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.sqrt(1-Math.pow(cos,2));\n\n\t}\n\n\tvoid projection( Vector a ){\n\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\tdouble frac = a.abs() * cos/abs();\n\t\tmul(frac);\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0 && y[j] == y0){\n              countr++;\n            }\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tprivate static FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000000001;\n\n\tpublic static void main(String[] args) {\n\t\tint n = sc.nextInt();\n\t\tPoint[] p = new Point[n];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tp[i] = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t}\n\t\t\n\t\tPoint edge = new Point(10000.532523523, 0.3256235235);\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tPoint pq = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t\tboolean flag = false;\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif(Math.abs((p[j].x-p[(j+1)%n].x)*(pq.y-p[j].y)+(p[j].y-p[(j+1)%n].y)*(p[j].x-pq.x)) < ALLOWABLE_ERROR\n\t\t\t\t\t\t && pq.x >= Math.min(p[j].x, p[(j+1)%n].x) && pq.x <= Math.max(p[j].x, p[(j+1)%n].x) \n\t\t\t\t\t\t && pq.y >= Math.min(p[j].y, p[(j+1)%n].y) && pq.y <= Math.max(p[j].y, p[(j+1)%n].y)){\n\t\t\t\t\tans.append(1);\n\t\t\t\t\tans.append(\"\\n\");\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag) continue;\n\t\t\t\n\t\t\tint cnt = 0;\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif(checkCross(pq, edge, p[j], p[(j+1)%n])) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt%2 == 1) {\n\t\t\t\tans.append(2);\n\t\t\t} else {\n\t\t\t\tans.append(0);\n\t\t\t}\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic boolean checkCross(Point p1, Point p2, Point p3, Point p4) {\n\t\tif(p1.x >= p2.x) {\n\t\t\tif((p1.x<p3.x && p1.x<p4.x) || (p2.x>p3.x && p2.x>p4.x)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif((p2.x<p3.x && p2.x<p4.x) || (p1.x>p3.x && p1.x>p4.x)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(p1.y >= p2.y) {\n\t\t\tif((p1.y<p3.y && p1.y<p4.y) || (p2.y>p3.y && p2.y>p4.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif((p2.y<p3.y && p2.y<p4.y) || (p1.y>p3.y && p1.y>p4.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(((p1.x-p2.x)*(p3.y-p1.y)+(p1.y-p2.y)*(p1.x-p3.x))*((p1.x-p2.x)*(p4.y-p1.y)+(p1.y-p2.y)*(p1.x-p4.x))>0) {\n\t\t\treturn false;\n\t\t}\n\t\tif(((p3.x-p4.x)*(p1.y-p3.y)+(p3.y-p4.y)*(p3.x-p1.x))*((p3.x-p4.x)*(p2.y-p3.y)+(p3.y-p4.y)*(p3.x-p2.x))>0) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\tstatic class Point {\n\t\tdouble x;\n\t\tdouble y;\n\t\tPoint(double x, double y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t}\n\t\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }else if(x0 < x[j + 1] && x[j + 1] < x[j] && y0 == y[j] && y0 == y[j + 1]){\n//            System.out.print(j + \"soi \");\n            countr++;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0 && y[j] == y0){\n              countr++;\n            }\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int n, q;\n    double[] x, y;\n    int i, j, countr;\n    double x0, y0, ax, ay, bx, by, tmp;\n\n    n = sc.nextInt();\n    x = new double[n + 1];\n    y = new double[n + 1];\n\n    for(i = 0;i < n;i++){\n      x[i] = sc.nextDouble();\n      y[i] = sc.nextDouble();\n    }\n    x[n] = x[0];\n    y[n] = y[0];\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      x0 = sc.nextDouble();\n      y0 = sc.nextDouble();\n      countr = 0;\n\n      for(j = 0;j < n;j++){\n        if((x[j] - x0) * (y[j + 1] - y0) - (y[j] - y0) * (x[j + 1] - x0) == 0){\n          if((x[j] - x0) * (x[j + 1] - x0) <= 0 && (y[j] - y0) * (y[j + 1] - y0) <= 0){\n            break;\n          }else if(x0 < x[j + 1] && x0 < x[j] && y0 == y[j] && y0 == y[j + 1]){\n            countr++;\n          }\n        }\n\n        if((y[j] - y0) * (y[j + 1] - y0) <= 0 && y0 != y[j + 1]){\n          ax = x[j];\n          ay = y[j];\n          bx = x[j + 1];\n          by = y[j + 1];\n\n          if(ay > by){\n            tmp = ay;\n            ay = by;\n            by = tmp;\n            tmp = ax;\n            ax = bx;\n            bx = tmp;\n          }\n          if((ax - x0) * (by - y0) - (bx - x0) * (ay - y0) > 0){\n            countr++;\n            if((y[(j - 1 + n) % n] - y0) * (y[j + 1] - y0) > 0 && y[j] == y0){\n              countr++;\n            }\n          }\n        }\n      }\n\n      if(j < n){\n        System.out.println(\"1\");\n      }else{\n        if(countr % 2 == 1){\n          System.out.println(\"2\");\n        }else{\n          System.out.println(\"0\");\n        }\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\npublic class Main {\n\t\n\tstatic int INF = 1000000000;\n\tstatic int MAXN = 31;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint[][] point = new int[n][2];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tpoint[i][0] = input.nextInt();\n\t\t\tpoint[i][1] = input.nextInt();\n\t\t}\n\t\tint q = input.nextInt();\n\t\tfor (int i = 0; i < q; ++i) {\n\t\t\tint x, y;\n\t\t\tx = input.nextInt();\n\t\t\ty = input.nextInt();\n\t\t\tSystem.out.println(checkWithPolygon(x, y, point));\n\t\t}\n\t}\n\t\n\tstatic int checkWithPolygon(int x, int y, int[][] pol) {\n\t\tboolean check = false;\n\t\tfor (int i = 0; i < pol.length; ++i) {\n\t\t\tint ax = pol[i][0] - x, ay = pol[i][1] - y;\n\t\t\tint bx = pol[(i + 1) % pol.length][0] - x, by = pol[(i + 1) % pol.length][1] - y;\n\t\t\tif (ay > by) {\n\t\t\t\tint temp = ax; ax = bx; bx = temp;\n\t\t\t\ttemp = ay; ay = by; by = temp;\n\t\t\t}\n\t\t\tif (ay <= 0 && by > 0 && cross(ax, ay, bx, by) < 0) check = !check;\n\t\t\tif (cross(ax, ay, bx, by) == 0 && dot(ax, ay, bx, by) <= 0) return 1;\n\t\t}\n\t\treturn check ? 2 : 0;\n\t}\n\t\n\tstatic int cross(int ax, int ay, int bx, int by) {\n\t\treturn ax * by - ay * bx;\n\t}\n\t\n\tstatic int dot(int ax, int ay, int bx, int by) {\n\t\treturn ax * bx + ay * by;\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing P_Pair = System.Collections.Generic.KeyValuePair<CGL.Point, CGL.Point>;\nusing Polygon = System.Collections.Generic.List<CGL.Point>;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var n = scan[0];\n            var G = new Polygon();\n            for (int i = 0; i < n; i++)\n            {\n                var p = scan;\n                G.Add(new Point(p[0], p[1]));\n            }\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var p = scan;\n                Console.WriteLine((new Point(p[0],p[1])).Contains(G));\n            }\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        internal double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point a, double k) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(Point a, double k) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n        public double Arg { get { return Math.Atan2(y, x); } }\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n        public int Contains(Polygon g)\n        {\n            int n = g.Count;\n            bool x = false;\n            for (int i = 0; i < n; i++)\n            {\n                Point a = g[i] - this, b = g[(i + 1) % n] - this;\n                if (Math.Abs(a.Cross(b)) < EPS && a.Dot(b) < EPS) return 1;\n                if(a.y > b.y)\n                {\n                    Point t = a;\n                    a = b;\n                    b = t;\n                }\n                if (a.y < EPS && EPS < b.y && a.Cross(b) > EPS) x = !x;\n            }\n            return (x ? 2 : 0);\n        }\n    }\n    struct Segment\n    {\n        internal Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + b * r;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + (Projection(p) - p) * 2;\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public bool Intersect(Segment s)\n        {\n            return (p2 - p1).CCW(s.p1 - p1) * (p2 - p1).CCW(s.p2 - p1) <= 0 &&\n                (s.p2 - s.p1).CCW(p1 - s.p1) * (s.p2 - s.p1).CCW(p2 - s.p1) <= 0;\n        }\n        public double GetDistance(Segment s)\n        {\n            if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n        public Point GetCrossPoint(Segment s)\n        {\n            Point b = s.p2 - s.p1;\n            double d1 = Math.Abs(b.Cross(p1 - s.p1));\n            double d2 = Math.Abs(b.Cross(p2 - s.p1));\n            double t = d1 / (d1 + d2);\n            return p1 + (p2 - p1) * t;\n        }\n    }\n    struct Circle\n    {\n        internal Point c; internal double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n        public bool Intersect(Segment l)\n        {\n            return l.GetD_LP(c) <= r;\n        }\n        public P_Pair GetCrossPoints(Segment l)\n        {\n            Point pr = l.Projection(c);\n            Point e = (l.p2 - l.p1) / (l.p2 - l.p1).Abs;\n            double b = Math.Sqrt(r * r - (pr - c).Norm);\n            return new P_Pair(pr + e * b, pr - e * b);\n        }\n        public P_Pair GetCrossPoints(Circle c2)\n        {\n            double d = (c - c2.c).Abs;\n            double a = Math.Acos((r * r + d * d - c2.r * c2.r) / (2 * r * d));\n            double t = (c2.c - c).Arg;\n            Point p1 = c + new Point(Math.Cos(t + a) * r, Math.Sin(t + a) * r);\n            Point p2 = c + new Point(Math.Cos(t - a) * r, Math.Sin(t - a) * r);\n            return new P_Pair(p1, p2);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using P_Pair = System.Collections.Generic.KeyValuePair<CGL.Point, CGL.Point>;\nusing Polygon = System.Collections.Generic.List<CGL.Point>;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var n = scan[0];\n            var G = new Polygon();\n            for (int i = 0; i < n; i++)\n            {\n                var p = scan;\n                G.Add(new Point(p[0], p[1]));\n            }\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var p = scan;\n                Console.WriteLine((new Point(p[0],p[1])).Contains(G));\n            }\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point a, double k) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(Point a, double k) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n        public double Arg { get { return Math.Atan2(y, x); } }\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n        public int Contains(Polygon g)\n        {\n            int n = g.Count;\n            bool x = false;\n            for (int i = 0; i < n; i++)\n            {\n                Point a = g[i] - this, b = g[(i + 1) % n] - this;\n                if (Math.Abs(a.Cross(b)) < EPS && a.Dot(b) < EPS) return 1;\n                if(a.y>b.y)\n                {\n                    var t = a;\n                    a = b;\n                    b = t;\n                }\n                if (a.y < EPS && EPS < b.y && a.Cross(b) > EPS) x = !x;\n            }\n            return (x ? 2 : 0);\n        }\n    }\n    /*struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + b * r;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + (Projection(p) - p) * 2;\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public bool Intersect(Segment s)\n        {\n            return (p2 - p1).CCW(s.p1 - p1) * (p2 - p1).CCW(s.p2 - p1) <= 0 &&\n                (s.p2 - s.p1).CCW(p1 - s.p1) * (s.p2 - s.p1).CCW(p2 - s.p1) <= 0;\n        }\n        public double GetDistance(Segment s)\n        {\n            if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n        public Point GetCrossPoint(Segment s)\n        {\n            Point b = s.p2 - s.p1;\n            double d1 = Math.Abs(b.Cross(p1 - s.p1));\n            double d2 = Math.Abs(b.Cross(p2 - s.p1));\n            double t = d1 / (d1 + d2);\n            return p1 + (p2 - p1) * t;\n        }\n    }\n    struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n        public bool Intersect(Segment l)\n        {\n            return l.GetD_LP(c) <= r;\n        }\n        public P_Pair GetCrossPoints(Segment l)\n        {\n            Point pr = l.Projection(c);\n            Point e = (l.p2 - l.p1) / (l.p2 - l.p1).Abs;\n            double b = Math.Sqrt(r * r - (pr - c).Norm);\n            return new P_Pair(pr + e * b, pr - e * b);\n        }\n        public P_Pair GetCrossPoints(Circle c2)\n        {\n            double d = (c - c2.c).Abs;\n            double a = Math.Acos((r * r + d * d - c2.r * c2.r) / (2 * r * d));\n            double t = (c2.c - c).Arg;\n            Point p1 = c + new Point(Math.Cos(t + a) * r, Math.Sin(t + a) * r);\n            Point p2 = c + new Point(Math.Cos(t - a) * r, Math.Sin(t - a) * r);\n            return new P_Pair(p1, p2);\n        }\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nnamespace CGL_3_C_Polygon_Point_Containment\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\t\t\tVector2[] polygon = new Vector2[inputCount];\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] input = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\t\tpolygon[lp] = new Vector2 (input[0], input[1]);\n\t\t\t}\n\n\t\t\tinputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] input = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\t\tVector2 point = new Vector2 (input[0], input[1]);\n\n\t\t\t\tvar result = Vector2.Contains (polygon, point);\n\n\t\t\t\tConsole.WriteLine (result);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.X + line1.Y * line2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.Y - line1.Y * line2.X;\n\t\t}\n\n\t\tpublic const int Contain = 2;\n\t\tpublic const int On = 1;\n\t\tpublic const int Other = 0;\n\n\t\tpublic static int Contains ( Vector2[] polygon, Vector2 point )\n\t\t{\n\t\t\tint length = polygon.Length;\n\t\t\tbool isContain = false;\n\n\t\t\tfor (int lp = 0; lp < length; lp++)\n\t\t\t{\n\t\t\t\tVector2 a = polygon[lp] - point;\n\t\t\t\tVector2 b = polygon[(lp + 1) % length] - point;\n\n\t\t\t\tif (Math.Abs (Vector2.CrossProduct (a, b)) == 0m &&\n\t\t\t\t\tVector2.DotProduct (a, b) < 0m)\n\t\t\t\t{\n\t\t\t\t\treturn On;\n\t\t\t\t}\n\n\t\t\t\tif (a.Y > b.Y)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = new Vector2 (a.X, a.Y);\n\t\t\t\t\ta = new Vector2 (b.X, b.Y);\n\t\t\t\t\tb = new Vector2 (tmp.X, tmp.Y);\n\t\t\t\t}\n\n\t\t\t\tif (a.Y < 0m && 0m <= b.Y &&\n\t\t\t\t\t0m < Vector2.CrossProduct (a, b))\n\t\t\t\t{\n\t\t\t\t\tisContain = !isContain;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn isContain ? Contain : Other;\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Console;\nusing static System.Math;\nusing static MyIO;\nusing static MyUtil;\n\nusing static Geometory;\nusing Vector = Geometory.Point;\nusing Line = Geometory.Segment;\nusing Polygon = System.Collections.Generic.List<Geometory.Point>;\n\npublic class C\n{\n\tpublic static void Main() => (new Solver()).Solve();\n}\n\npublic class Solver\n{\n\tpublic void Solve()\n\t{\n\t\tvar g = new Polygon();\n\t\tint N = GetInt();\n\t\tfor(int i = 0; i < N; i++)\n\t\t\tg.Add(new Point(GetDouble(), GetDouble()));\n\n\t\tint Q = GetInt();\n\t\tvar ans = new int[Q];\n\t\tfor(int i = 0; i < Q; i++)\n\t\t\tans[i] = Contains(g, new Point(GetDouble(), GetDouble()));\n\n\t\tWriteLine(string.Join(\"\\n\", ans));\n\t}\n}\n\npublic static class Geometory\n{\n\tpublic const double EPS = 1e-10;\n\tpublic static bool Equals(double a, double b) => Math.Abs(a - b) < EPS;\n\n\tpublic class Point\n\t{\n\t\tpublic double X;\n\t\tpublic double Y;\t\t\n\t\tpublic Point(double x, double y)\n\t\t{\n\t\t\tX = x;\n\t\t\tY = y;\n\t\t}\n\t\n\t\tpublic static Point operator+(Point p, Point q) => new Point(p.X + q.X, p.Y + q.Y);\n\t\tpublic static Point operator-(Point p, Point q) => new Point(p.X - q.X, p.Y - q.Y);\n\t\tpublic static Point operator*(Point p, double a) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator*(double a, Point p) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator/(Point p, double a) => new Point(p.X / a, p.Y / a);\n\t}\n\n\tpublic class Segment\n\t{\n\t\tpublic Point P1;\n\t\tpublic Point P2;\n\t\tpublic Segment(Point p1, Point p2)\n\t\t{\n\t\t\tP1 = p1;\n\t\t\tP2 = p2;\n\t\t}\n\t}\n\n\tpublic class Circle\n\t{\n\t\tpublic Point C;\n\t\tpublic double R;\n\t\tpublic Circle(Point c, double r)\n\t\t{\n\t\t\tC = c;\n\t\t\tR = r;\n\t\t}\n\t}\n\n\tpublic static double Abs(Vector a) => Math.Sqrt(Norm(a));\n\tpublic static double Norm(Vector a) => a.X * a.X + a.Y * a.Y;\n\tpublic static double Dot(Vector a, Vector b) => a.X * b.X + a.Y * b.Y;\n\tpublic static double Cross(Vector a, Vector b) => a.X * b.Y - a.Y * b.X;\n\n\tpublic static bool IsOrthogonal(Vector a, Vector b) => Equals(Dot(a, b), 0.0);\n\tpublic static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2) => IsOrthogonal(a1 - a2, b1 - b2);\n\tpublic static bool IsOrthogonal(Segment s1, Segment s2) => Equals(Dot(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\tpublic static bool IsParallel(Vector a, Vector b) => Equals(Cross(a, b), 0.0);\n\tpublic static bool IsParallel(Point a1, Point a2, Point b1, Point b2) => IsParallel(a1 - a2, b1 - b2);\n\tpublic static bool IsParallel(Segment s1, Segment s2) => Equals(Cross(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\n\tpublic static Point Project(Segment s, Point p)\n\t{\n\t\tVector b = s.P2 - s.P1;\n\t\tdouble r = Dot(p - s.P1, b) / Norm(b);\n\t\treturn s.P1 + b * r;\n\t}\n\tpublic static Point Reflect(Segment s, Point p) => p + (Project(s, p) - p) * 2.0;\n\n\tpublic static double GetDistance(Point a, Point b) => Abs(a - b);\n\tpublic static double GetDistanceLP(Line l, Point p) => Math.Abs(Cross(l.P2 - l.P1, p - l.P1) / Abs(l.P2 - l.P1));\n\tpublic static double GetDistanceSP(Segment s, Point p)\n\t{\n\t\tif(Dot(s.P2 - s.P1, p - s.P1) < 0.0) return Abs(p - s.P1);\n\t\tif(Dot(s.P1 - s.P2, p - s.P2) < 0.0) return Abs(p - s.P2);\n\t\treturn GetDistanceLP(s, p);\n\t}\n\tpublic static double GetDistance(Segment s1, Segment s2)\n\t{\n\t\tif(Intersect(s1, s2)) return 0.0;\n\t\treturn Math.Min(Math.Min(GetDistanceSP(s1, s2.P1), GetDistanceSP(s1, s2.P2)),\n\t\t                Math.Min(GetDistanceSP(s2, s1.P1), GetDistanceSP(s2, s1.P2)));\n\t}\n\n\tpublic const int COUNTER_CLOCKWISE = 1;\n\tpublic const int CLOCKWISE = -1;\n\tpublic const int ONLINE_BACK = 2;\n\tpublic const int ONLINE_FRONT = -2;\n\tpublic const int ON_SEGMENT = 0;\n\tpublic static int Ccw(Point p0, Point p1, Point p2)\n\t{\n\t\tVector a = p1 - p0;\n\t\tVector b = p2 - p0;\n\t\tif(Cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif(Cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif(Dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif(Norm(a) < Norm(b)) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\tpublic static bool Intersect(Point p1, Point p2, Point p3, Point p4)\n\t{\n\t\treturn (Ccw(p1, p2, p3) * Ccw(p1, p2, p4) <= 0 && \n\t\t        Ccw(p3, p4, p1) * Ccw(p3, p4, p2) <= 0);\n\t}\n\tpublic static bool Intersect(Segment s1, Segment s2) => Intersect(s1.P1, s1.P2, s2.P1, s2.P2);\n\tpublic static bool Intersect(Circle c, Line l) => GetDistanceLP(l, c.C) - c.R < EPS;\n\tpublic static bool Intersect(Circle c1, Circle c2) => GetDistance(c1.C, c2.C) - c1.R - c2.R < EPS;\n\n\tpublic static Point GetCrossPoint(Segment s1, Segment s2)\n\t{\n\t\tVector b = s2.P2 - s2.P1;\n\t\tdouble d1 = Math.Abs(Cross(b, s1.P1 - s2.P1));\n\t\tdouble d2 = Math.Abs(Cross(b, s1.P2 - s2.P1));\n\t\tdouble t = d1 / (d1 + d2);\n\t\treturn s1.P1 + (s1.P2 - s1.P1) * t;\n\t}\n\tpublic static Tuple<Point, Point> GetCrossPoints(Circle c, Line l)\n\t{\n\t\tif(!Intersect(c, l)) throw new Exception();\n\t\tVector pr = Project(l, c.C);\n\t\tVector e = (l.P2 - l.P1) / Abs(l.P2 - l.P1);\n\t\tdouble b = Math.Sqrt(c.R * c.R - Norm(pr - c.C));\n\t\treturn Tuple.Create(pr + e * b, pr - e * b);\n\t}\n\n\tpublic static double Arg(Vector p) => Math.Atan2(p.Y, p.X);\n\tpublic static Vector Polar(double a, double r) => new Point(Math.Cos(r) * a, Math.Sin(r) * a);\n\tpublic static Tuple<Point, Point> GetCrossPoints(Circle c1, Circle c2)\n\t{\n\t\tif(!Intersect(c1, c2)) throw new Exception();\n\t\tdouble d = Abs(c1.C - c2.C);\n\t\tdouble a = Math.Acos((c1.R * c1.R + d * d - c2.R * c2.R) / (2 * c1.R * d));\n\t\tdouble t = Arg(c2.C - c1.C);\n\t\treturn Tuple.Create(c1.C + Polar(c1.R, t + a), c1.C + Polar(c1.R, t - a));\n\t}\n\n\tpublic static int Contains(Polygon g, Point p)\n\t{\n\t\tint n = g.Count;\n\t\tbool x = false;\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tPoint a = g[i] - p;\n\t\t\tPoint b = g[(i + 1) % n] - p;\n\t\t\tif(Math.Abs(Cross(a, b)) < EPS && Dot(a, b) < EPS) return 1;\n\t\t\tif(a.Y > b.Y) swap(ref a, ref b);\n\t\t\tif(a.Y < EPS && EPS < b.Y && Cross(a, b) > EPS) x = !x;\n\t\t}\n\t\treturn (x ? 2 : 0);\n\t}\n}\n\npublic static class MyIO\n{\n\tprivate static string[] args = null;\n\tprivate static int num = -1;\n\tprivate static int used = -1;\n\n\tprivate static string getArg()\n\t{\n\t\tif(used == num)\n\t\t{\n\t\t\targs = Console.ReadLine().Split(' ');\n\t\t\tnum = args.Length;\n\t\t\tused = 0;\n\t\t}\n\t\treturn args[used++];\n\t}\n\n\tpublic static int GetInt() => int.Parse(getArg());\n\tpublic static long GetLong() => long.Parse(getArg());\n\tpublic static double GetDouble() => double.Parse(getArg());\n\tpublic static decimal GetDecimal() => decimal.Parse(getArg());\n\tpublic static string GetString() => getArg();\n\tpublic static char GetChar() => getArg()[0];\n\tpublic static int[] GetInts(long N) => Enumerable.Range(0, (int)N).Select(_ => GetInt()).ToArray();\n\tpublic static long[] GetLongs(long N) => Enumerable.Range(0, (int)N).Select(_ => GetLong()).ToArray();\n\tpublic static double[] GetDoubles(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDouble()).ToArray();\n\tpublic static decimal[] GetDecimals(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDecimal()).ToArray();\n\tpublic static string[] GetStrings(long N) => Enumerable.Range(0, (int)N).Select(_ => GetString()).ToArray();\n}\n\npublic static class MyUtil\n{\n\tpublic static void chmax<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) < 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void chmin<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) > 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void swap<T>(ref T x, ref T y)\n\t{\n\t\tT tmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using P_Pair = System.Collections.Generic.KeyValuePair<CGL.Point, CGL.Point>;\nusing Polygon = System.Collections.Generic.List<CGL.Point>;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var n = scan[0];\n            var G = new Polygon();\n            for (int i = 0; i < n; i++)\n            {\n                var p = scan;\n                G.Add(new Point(p[0], p[1]));\n            }\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var p = scan;\n                Console.WriteLine((new Point(p[0],p[1])).Contains(G));\n            }\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point a, double k) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(Point a, double k) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n        public double Arg { get { return Math.Atan2(y, x); } }\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n        public int Contains(Polygon g)\n        {\n            int n = g.Count;\n            bool x = false;\n            for (int i = 0; i < n; i++)\n            {\n                Point a = g[i] - this, b = g[(i + 1) % n] - this;\n                if (Math.Abs(a.Cross(b)) < EPS && a.Dot(b) < EPS) return 1;\n                if(a.y > b.y)\n                {\n                    Point t = a;\n                    a = b;\n                    b = t;\n                }\n                if (a.y < EPS && EPS < b.y && a.Cross(b) > EPS) x = !x;\n            }\n            return (x ? 2 : 0);\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + b * r;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + (Projection(p) - p) * 2;\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public bool Intersect(Segment s)\n        {\n            return (p2 - p1).CCW(s.p1 - p1) * (p2 - p1).CCW(s.p2 - p1) <= 0 &&\n                (s.p2 - s.p1).CCW(p1 - s.p1) * (s.p2 - s.p1).CCW(p2 - s.p1) <= 0;\n        }\n        public double GetDistance(Segment s)\n        {\n            if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n        public Point GetCrossPoint(Segment s)\n        {\n            Point b = s.p2 - s.p1;\n            double d1 = Math.Abs(b.Cross(p1 - s.p1));\n            double d2 = Math.Abs(b.Cross(p2 - s.p1));\n            double t = d1 / (d1 + d2);\n            return p1 + (p2 - p1) * t;\n        }\n    }\n    struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n        public bool Intersect(Segment l)\n        {\n            return l.GetD_LP(c) <= r;\n        }\n        public P_Pair GetCrossPoints(Segment l)\n        {\n            Point pr = l.Projection(c);\n            Point e = (l.p2 - l.p1) / (l.p2 - l.p1).Abs;\n            double b = Math.Sqrt(r * r - (pr - c).Norm);\n            return new P_Pair(pr + e * b, pr - e * b);\n        }\n        public P_Pair GetCrossPoints(Circle c2)\n        {\n            double d = (c - c2.c).Abs;\n            double a = Math.Acos((r * r + d * d - c2.r * c2.r) / (2 * r * d));\n            double t = (c2.c - c).Arg;\n            Point p1 = c + new Point(Math.Cos(t + a) * r, Math.Sin(t + a) * r);\n            Point p2 = c + new Point(Math.Cos(t - a) * r, Math.Sin(t - a) * r);\n            return new P_Pair(p1, p2);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly double EPS = 1E-10;\n\n        static void Main(string[] args)\n        {\n            int n = int.Parse(Console.ReadLine());\n\n            Point[] G = new Point[n];\n\n            for (int i = 0; i < n; i++)\n            {\n                double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                G[i] = new Point(input[0], input[1]);\n            }\n\n            StringBuilder sb = new StringBuilder();\n            int q = int.Parse(Console.ReadLine());\n\n            for (int i = 0; i < q; i++)\n            {\n                double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Point p = new Point(input[0], input[1]);\n\n                sb.AppendLine(Contains(G, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static int Contains(Point[] G, Point p)\n        {\n            int n = G.Length;\n            bool x = false;\n\n            for (int i = 0; i < n; i++)\n            {\n                Point a = G[i] - p;\n                Point b = G[(i + 1) % n] - p;\n\n                if (Math.Abs(a.Cross(b)) < EPS && a.Dot(b) < EPS) return 1;\n\n                if (a.y > b.y)\n                {\n                    Point temp = a;\n                    a = b;\n                    b = temp;\n                }\n\n                if (a.y < EPS && EPS < b.y && a.Cross(b) > EPS) x = !x;\n            }\n            return x ? 2 : 0;\n        }\n    }\n\n    class Point : IComparable<Point>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point p, double d) { return new Point(p.x * d, p.y * d); }\n        public static Point operator /(Point p, double d) { return new Point(p.x / d, p.y / d); }\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(Point other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            Point other = obj as Point;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    class Segment\n    {\n        internal Point p1, p2;\n\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n\n    class Circle\n    {\n        internal Point p;\n        internal double r;\n\n        public Circle(Point p, double r)\n        {\n            this.p = p;\n            this.r = r;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing static System.Console;\nusing System.Text;\nusing System.IO;\n\n\nnamespace AOJ\n{\n    using Vector = Point;\n    using Line = Segment;\n    using Polygon = List<Point>;\n\n    class Consts\n    {\n        public static readonly double EPS = 1e-10;\n    }\n    class Point\n    {\n        double x, y;\n        public double X { get { return this.x; } set { this.x = value; } }\n        public double Y { get { return this.y; } set { this.y = value; } }\n        public Point(double x = 0, double y = 0)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        static public Point operator +(Point p1, Point p2) => new Point(p1.x + p2.x, p1.y + p2.y);\n        static public Point operator -(Point p1, Point p2) => new Point(p1.x - p2.x, p1.y - p2.y);\n        static public Point operator *(Point p, double a) => new Point(a * p.x, a * p.y);\n        static public Point operator *(double a, Point p) => p * a;\n        static public Point operator /(Point p, double a) => new Point(p.x / a, p.y / a);\n        static public bool operator <(Point p1, Point p2) => p1.x != p2.x ? p1.x < p2.x : p1.y < p2.y;\n        static public bool operator >(Point p1, Point p2) => p2 < p1;\n\n        static public bool operator ==(Point p1, Point p2) => (p1.x - p2.x) < Consts.EPS && (p1.y - p2.y) < Consts.EPS;\n        static public bool operator !=(Point p1, Point p2) => !(p1 == p2);\n\n        public double abs() => Math.Sqrt(norm());\n        public double norm() => this.x * this.x + this.y * this.y;\n\n        public override bool Equals(object obj)\n        {\n            if ((object)obj == null || this.GetType() != obj.GetType())\n            {\n                return false;\n            }\n            var c = (Point)obj;\n            return this == c;\n        }\n        public override int GetHashCode()\n        {\n            return this.x.GetHashCode() ^ this.y.GetHashCode();\n        }\n    }\n    struct Segment\n    {\n        public Segment(Point p1,Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point p1, p2;\n    }\n    class Circle\n    {\n        public Point c;\n        public double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n    }\n\n    class VecCalc\n    {\n        static bool equals(double a, double b) => Math.Abs(a - b) < Consts.EPS;\n        //内積\n        static public double dot(Vector a, Vector b)\n        {\n            return a.X * b.X + a.Y * b.Y;\n        }\n        //外積\n        static public double cross(Vector a, Vector b)\n        {\n            return a.X * b.Y - a.Y * b.X;\n        }\n        //16.2 直行判定\n        static public bool isOrthogonal(Vector a, Vector b)\n        {\n            return equals(dot(a, b), 0.0);\n        }\n        static public bool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isOrthogonal(a1 - a2, b1 - b2);\n        }\n        static public bool isOrthogonal(Segment s1, Segment s2)\n        {\n            return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //16.2 平行判定\n        static public bool isParallel(Vector a, Vector b)\n        {\n            return equals(cross(a, b), 0.0);\n        }\n        static public bool isParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isParallel(a1 - a2, b1 - b2);\n        }\n        static public bool isParallel(Segment s1, Segment s2)\n        {\n            return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //16.3 射影\n        static public Point project(Segment s, Point p)\n        {\n            Vector b = s.p2 - s.p1;\n            double r = dot(p - s.p1, b) / b.norm();\n            return s.p1 + b * r;\n        }\n        //16.4 反射\n        static public Point reflection(Segment s, Point p)\n        {\n            return 2 * project(s, p) - p;\n            //mid = project(s, p) - p;\n            //return mid + mid - p;\n        }\n        //16.5 距離\n        //2点間の距離\n        static public double getDistance(Point a, Point b)\n        {\n            return (a - b).abs();\n        }\n        //直線lと点pの距離\n        static public double getDistanceLP(Line l,Point p)\n        {\n            return Math.Abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n        }\n        //線分sと点pの距離\n        static public double getDistanceSP(Segment s, Point p)\n        {\n            if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n            if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n            return getDistanceLP(s, p);\n        }\n        static public double getDistance(Segment s1, Segment s2)\n        {\n            if (intersect(s1, s2)) return 0.0;\n            return Math.Min(\n                    Math.Min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                    Math.Min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n                );\n        }\n        //16.6 反時計回り\n        static public readonly int COUNTER_CLOCKWISE=1;\n        static public readonly int CLOCKWISE = -1;\n        static public readonly int ONLINE_BACK = 2;\n        static public readonly int ONLINE_FRONT = -2;\n        static public readonly int ON_SEGMENT = 0;\n        static public int ccw(Point p0, Point p1, Point p2)\n        {\n            Vector a = p1 - p0;\n            Vector b = p2 - p0;\n            var dot_ = dot(a, b);\n            var cross_ = cross(a, b);\n            if (Consts.EPS < cross_) return COUNTER_CLOCKWISE;\n            if (cross_ < -Consts.EPS) return CLOCKWISE;\n            if (dot_ < -Consts.EPS) return ONLINE_BACK;\n            if (a.norm() < b.norm()) return ONLINE_FRONT;\n            return ON_SEGMENT;\n        }\n        static public int ccw(Segment s, Point p)\n        {\n            return ccw(s.p1, s.p2, p);\n\n        }\n        //16.7 線分の交差判定\n        static public bool intersect(Point p1, Point p2,Point p3,Point p4)\n        {\n            return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n                ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n                );\n        }\n        static public bool intersect(Segment s1, Segment s2)\n        {\n            return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n        }\n        //16.8 線分の交点\n        static public Point getCrossPoint(Segment s1, Segment s2)\n        {\n            Vector b = s2.p2 - s2.p1;\n            double d1 = Math.Abs(cross(b, s1.p1 - s2.p1));\n            double d2 = Math.Abs(cross(b, s1.p2 - s2.p1));\n            double t = d1 / (d1 + d2);\n            return s1.p1 + (s1.p2 - s1.p1) * t;\n        }\n        //16.9 円と直線の交点\n        static public Segment getCrossPoints(Circle c, Line l)\n        {\n            Vector pr = project(l, c.c);\n            System.Diagnostics.Debug.Assert((c.c - pr).abs() <= c.r);\n            Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n            double b = Math.Sqrt(c.r * c.r - (c.c - pr).norm());\n            return new Segment(pr + e * b, pr - e * b);\n        }\n        //16.10 円と円の交点\n        static double arg(Vector p) { return Math.Atan2(p.Y, p.X); }\n        static Vector polar(double a, double r) { return new Point(Math.Cos(r) * a, Math.Sin(r) * a); }\n        static public Segment getCrossPoints(Circle c1 , Circle c2)\n        {\n            double d = (c1.c - c2.c).abs();\n            System.Diagnostics.Debug.Assert(d <= c1.r + c2.r);\n            double a = Math.Acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n            double t = arg(c2.c - c1.c);\n            return new Segment(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n        }\n        //他ヘロンの公式を使ったり。高さだす、交点の投影点求める、投影点から平行線へのベクトル出す、みたいなの)\n        //16.11 点の内包\n        //IN:2,ON:1,OUT:0\n        static public int contains(Polygon g, Point p)\n        {\n            int n = g.Count;\n            bool x = false;\n            for(var i=0;i<n;++i)\n            {\n                Point a = g[i] - p, b = g[(i + 1) % n] - p;\n                if (Math.Abs(cross(a, b)) < Consts.EPS && dot(a, b) < Consts.EPS) return 1;\n                if(b.Y<a.Y)\n                {\n                    var t = a;\n                    a = b;\n                    b = t;\n                }\n                if (a.Y < Consts.EPS && Consts.EPS < b.Y && Consts.EPS < cross(a, b)) x = !x;\n            }\n            return (x ? 2 : 0);\n        }\n        //他、xの最大・最小値を使って半直線を作り、各辺との交差、点を通る場合、辺と平行かつ通る場合を考えていく方法もあり\n        //半直線：判定対象点とPolygonの右端との差を使って適当に作る\n        //Polygonの各辺ごとに処理する\n        //  ccwでライン上にあるか判定\n        //  両方の点を通る場合(平行&通る):辺と点を合わせて1点と考える。次の辺は飛ばす\n        //  点を通る場合：Ｖ、Λの場合は無視する。j+1の点を通る場合は次の処理に任す\n\n    }\n    class Program\n    {\n        static public long[] Sarray() { return ReadLine().Trim().Split().Select(long.Parse).ToArray(); }\n        static public List<long> Slist() { return ReadLine().Split().Select(long.Parse).ToList(); }\n\n\n        static void Main(string[] args)\n        {\n            var g = Sarray()[0];\n            var poly = new Polygon();\n            for (var i = 0; i < g; ++i)\n            {\n                var p = Sarray();\n                poly.Add(new Point(p[0], p[1]));\n            }\n            var min = poly.Min(e => e.X);\n            var max = poly.Max(e => e.X);\n            var q = Sarray()[0];\n            var num = poly.Count;\n            var start = 0;\n            if (poly[0].Y == poly[num - 1].Y)\n                ++start;\n            for (var i = 0; i < q; ++i)\n            {\n                var p = Sarray();\n                var pos = new Point(p[0], p[1]);\n                WriteLine(VecCalc.contains(poly, pos));\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing P_Pair = System.Collections.Generic.KeyValuePair<CGL.Point, CGL.Point>;\nusing Polygon = System.Collections.Generic.List<CGL.Point>;\n//using System.Collections.Generic;\n//using System.Linq;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var n = scan[0];\n            var G = new Polygon();\n            for (int i = 0; i < n; i++)\n            {\n                var p = scan;\n                G.Add(new Point(p[0], p[1]));\n            }\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var p = scan;\n                Console.WriteLine((new Point(p[0],p[1])).Contains(G));\n            }\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        internal double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point a, double k) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(Point a, double k) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n        public double Arg { get { return Math.Atan2(y, x); } }\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n        public int Contains(Polygon g)\n        {\n            int n = g.Count;\n            bool x = false;\n            for (int i = 0; i < n; i++)\n            {\n                Point a = g[i] - this, b = g[(i + 1) % n] - this;\n                if (Math.Abs(a.Cross(b)) < EPS && a.Dot(b) < EPS) return 1;\n                if(a.y > b.y)\n                {\n                    Point t = a;\n                    a = b;\n                    b = t;\n                }\n                if (a.y < EPS && EPS < b.y && a.Cross(b) > EPS) x = !x;\n            }\n            return (x ? 2 : 0);\n        }\n    }\n    struct Segment\n    {\n        internal Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + b * r;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + (Projection(p) - p) * 2;\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public bool Intersect(Segment s)\n        {\n            return (p2 - p1).CCW(s.p1 - p1) * (p2 - p1).CCW(s.p2 - p1) <= 0 &&\n                (s.p2 - s.p1).CCW(p1 - s.p1) * (s.p2 - s.p1).CCW(p2 - s.p1) <= 0;\n        }\n        public double GetDistance(Segment s)\n        {\n            if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n        public Point GetCrossPoint(Segment s)\n        {\n            Point b = s.p2 - s.p1;\n            double d1 = Math.Abs(b.Cross(p1 - s.p1));\n            double d2 = Math.Abs(b.Cross(p2 - s.p1));\n            double t = d1 / (d1 + d2);\n            return p1 + (p2 - p1) * t;\n        }\n    }\n    struct Circle\n    {\n        internal Point c; internal double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n        public bool Intersect(Segment l)\n        {\n            return l.GetD_LP(c) <= r;\n        }\n        public P_Pair GetCrossPoints(Segment l)\n        {\n            Point pr = l.Projection(c);\n            Point e = (l.p2 - l.p1) / (l.p2 - l.p1).Abs;\n            double b = Math.Sqrt(r * r - (pr - c).Norm);\n            return new P_Pair(pr + e * b, pr - e * b);\n        }\n        public P_Pair GetCrossPoints(Circle c2)\n        {\n            double d = (c - c2.c).Abs;\n            double a = Math.Acos((r * r + d * d - c2.r * c2.r) / (2 * r * d));\n            double t = (c2.c - c).Arg;\n            Point p1 = c + new Point(Math.Cos(t + a) * r, Math.Sin(t + a) * r);\n            Point p2 = c + new Point(Math.Cos(t - a) * r, Math.Sin(t - a) * r);\n            return new P_Pair(p1, p2);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nnamespace CGL_3_C_Polygon_Point_Containment\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\t\t\tVector2[] polygon = new Vector2[inputCount];\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] input = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\t\tpolygon[lp] = new Vector2 (input[0], input[1]);\n\t\t\t}\n\n\t\t\tinputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] input = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\t\tVector2 point = new Vector2 (input[0], input[1]);\n\n\t\t\t\tvar result = Vector2.Contains (polygon, point);\n\n\t\t\t\tConsole.WriteLine (result);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.X + line1.Y * line2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.Y - line1.Y * line2.X;\n\t\t}\n\n\t\tpublic const int Contain = 2;\n\t\tpublic const int On = 1;\n\t\tpublic const int Other = 0;\n\n\t\tpublic static int Contains ( Vector2[] polygon, Vector2 point )\n\t\t{\n\t\t\tint length = polygon.Length;\n\t\t\tbool isContain = false;\n\n\t\t\tfor (int lp = 0; lp < length; lp++)\n\t\t\t{\n\t\t\t\tVector2 a = polygon[lp] - point;\n\t\t\t\tVector2 b = polygon[(lp + 1) % length] - point;\n\n\t\t\t\tif (Math.Abs (Vector2.CrossProduct (a, b)) == 0m &&\n\t\t\t\t\tVector2.DotProduct (a, b) <= 0m)\n\t\t\t\t{\n\t\t\t\t\treturn On;\n\t\t\t\t}\n\n\t\t\t\tif (a.Y > b.Y)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = new Vector2 (a.X, a.Y);\n\t\t\t\t\ta = new Vector2 (b.X, b.Y);\n\t\t\t\t\tb = new Vector2 (tmp.X, tmp.Y);\n\t\t\t\t}\n\n\t\t\t\tif (a.Y < 0m && 0m <= b.Y &&\n\t\t\t\t\t0m < Vector2.CrossProduct (a, b))\n\t\t\t\t{\n\t\t\t\t\tisContain = !isContain;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn isContain ? Contain : Other;\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;//リストの使用\nusing System.Collections.Generic;\nclass Program\n{\n\tstatic void Main()\n\t{\n    long n = long.Parse(Console.ReadLine());\n    Vector2[] polygon = new Vector2[n];//多角形の頂点\n    for(long i = 0; i < n; i++)\n    {\n      long[] nums = Array.ConvertAll(Console.ReadLine().Split(' '),long.Parse);//１行ごとに受け取る\n      polygon[i] = new Vector2(nums[0], nums[1]);\n    }\n\n    long q = long.Parse(Console.ReadLine());\n    for(long i = 0; i < q; i++)\n    {\n      long[] numsa = Array.ConvertAll(Console.ReadLine().Split(' '),long.Parse);\n      Vector2 aimPoint = new Vector2(numsa[0], numsa[1]);\n      Console.WriteLine(Vector2.PolygonPointContain(polygon, aimPoint));\n    }\n\t}\n}\n\nclass Vector2//2次元ベクトル\n{\nstatic decimal EPS = 1e-10m;//小数誤差比較\n\n  public Vector2 (decimal X, decimal Y)\n  {\n    this.x = X;\n    this.y = Y;\n  }\n\n  public decimal x {private set; get;}\n  public decimal y {private set; get;}\n\n  public static Vector2 operator + (Vector2 ob1, Vector2 ob2)//ベクトルの基本演算\n  {\n    return new Vector2 (ob1.x + ob2.x, ob1.y + ob2.y);\n  }\n  public static Vector2 operator - (Vector2 ob1, Vector2 ob2)\n  {\n    return new Vector2 (ob1.x - ob2.x, ob1.y - ob2.y);\n  }\n  public static Vector2 operator * (Vector2 ob, decimal scalar)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n  public static Vector2 operator * (decimal scalar, Vector2 ob)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n  public static Vector2 operator / (Vector2 ob, decimal scalar)\n  {\n    return new Vector2 (ob.x / scalar, ob.y / scalar);\n  }\n\n  public decimal Length()//ベクトルの長さの2乗\n  {\n    return x * x + y * y;\n  }\n  public static decimal Distance(Vector2 ob1, Vector2 ob2)//2点間の距離\n  {\n    return (decimal)Math.Sqrt((double)((ob1.x-ob2.x) * (ob1.x-ob2.x) + (ob1.y-ob2.y) * (ob1.y-ob2.y)));\n  }\n  public static decimal DotProduct(Vector2 ob1, Vector2 ob2)//内積\n  {\n    return ob1.x * ob2.x + ob1.y * ob2.y;\n  }\n  public static decimal CrossProduct(Vector2 ob1, Vector2 ob2)//外積。第2引数が反時計回り側で正。\n  {\n    return ob1.x * ob2.y - ob1.y * ob2.x;\n  }\n  public static decimal Arg(Vector2 p)//x軸に対する偏角\n  {\n    return (decimal)Math.Atan2((double)p.y, (double)p.x);\n  }\n  public static Vector2 PoralCoordinate(decimal radius, decimal angle)//長さと座標から極座標にする\n  {\n    return new Vector2(radius * (decimal)Math.Cos((double)angle), radius * (decimal)Math.Sin((double)angle));\n  }\n\n  public static Vector2 Projection(Vector2 beginPoint, Vector2 endPoint, Vector2 point)//点の射影\n  {\n    Vector2 segment = endPoint - beginPoint;\n    decimal ratio = Vector2.DotProduct(point - beginPoint, segment) / segment.Length();\n    return beginPoint + segment * ratio;//始点にたす\n  }\n\npublic static long WhereVector(Vector2 beginPoint, Vector2 endPoint, Vector2 point)\n  {//ベクトルに対する点の位置\n    Vector2 segment = endPoint - beginPoint;\n    Vector2 aimVec = point - beginPoint;\n    if(Vector2.CrossProduct(segment, aimVec) > EPS)\n      return 1;//反時計回り側\n    else if(Vector2.CrossProduct(segment, aimVec) < -EPS)\n      return 2;//時計回り側\n    else if(Vector2.DotProduct(segment, aimVec) < -1+EPS)\n      return 3;//ベクトル反対向きの側\n    else if(segment.Length() < aimVec.Length())\n      return 4;//ベクトル向きの側\n    else\n      return 5;//ベクトル上\n  }\n\n  public static long IsIntersect(Vector2 vecA, Vector2 vecB,\n    Vector2 vecAsub, Vector2 vecBsub)//2線分の交差判定\n  {\n    bool answer = false;\n\n    if(Vector2.WhereVector(vecA, vecB, vecAsub) + Vector2.WhereVector(vecA, vecB, vecBsub) == 3\n    && Vector2.WhereVector(vecAsub, vecBsub, vecA) + Vector2.WhereVector(vecAsub, vecBsub, vecB) == 3)\n      answer = true;\n    if(Vector2.WhereVector(vecA, vecB, vecAsub) == 5 || Vector2.WhereVector(vecA, vecB, vecBsub) == 5\n    || Vector2.WhereVector(vecAsub, vecBsub, vecA) == 5 || Vector2.WhereVector(vecAsub, vecBsub, vecB) == 5)\n      answer = true;\n    return((answer) ? 1 : 0);\n  }\n\n  public static Vector2 IntersectPoint(Vector2 vecA, Vector2 vecB, \n    Vector2 vecAsub, Vector2 vecBsub)//2線分の交点\n  {\n    Vector2 leftPoint = Vector2.Projection(vecA, vecB, vecAsub);//線分左端点の射影\n    Vector2 rightPoint = Vector2.Projection(vecA, vecB, vecBsub);//線分右端点の射影\n    decimal leftLength = (vecAsub - leftPoint).Length();\n    decimal rightLength = (vecBsub - rightPoint).Length();\n\n    leftLength = (decimal)(Math.Sqrt((double)leftLength));\n    rightLength = (decimal)(Math.Sqrt((double)rightLength));\n    \n    if(leftLength < EPS) return leftPoint;\n    else if(rightLength < EPS) return rightPoint;\n    decimal ratio = leftLength / (leftLength + rightLength);\n    return (leftPoint + ratio * (rightPoint - leftPoint));\n  }\n\npublic static Vector2[] circleLineIntersection(Vector2 centerPoint, decimal circleRadius, \n    Vector2 beginPoint, Vector2 endPoint)//円と直線の交点\n  {\n    Vector2[] answers = new Vector2[2];\n    Vector2 segment = endPoint - beginPoint;\n    Vector2 unitSegment = segment / (decimal)Math.Sqrt((double)segment.Length());\n    Vector2 circleProjection = Projection(beginPoint, endPoint, centerPoint);//交点の中点\n    decimal lineLength = \n      (decimal)Math.Sqrt((double)(circleRadius*circleRadius - (circleProjection-centerPoint).Length()));//端点と中点の距離\n    //Console.WriteLine(unitSegment.x+\" \"+unitSegment.y);\n    answers[0] = circleProjection + (unitSegment * lineLength);\n    answers[1] = circleProjection - (unitSegment * lineLength);\n    return answers;\n  }\n\n  public static Vector2[] CircleIntersection(Vector2 centerPointA, decimal circleRadiusA, \n      Vector2 centerPointB, decimal circleRadiusB)//2円の交点\n    {\n      Vector2[] answers = new Vector2[2];\n      decimal centerDistance = Distance(centerPointA, centerPointB);//2円の中心間距離\n      decimal centerAngle = Arg(centerPointB - centerPointA);\n      decimal intersectionAngle = (decimal)Math.Acos((double)(circleRadiusA*circleRadiusA\n        + centerDistance*centerDistance - circleRadiusB*circleRadiusB)\n        /(double)(2*circleRadiusA*centerDistance));//余弦定理\n      answers[0] = centerPointA + PoralCoordinate(circleRadiusA, centerAngle+intersectionAngle);\n      answers[1] = centerPointA + PoralCoordinate(circleRadiusA, centerAngle-intersectionAngle); \n      if(answers[0].x > answers[1].x || (Math.Abs(answers[0].x - answers[1].x) < EPS && answers[0].y > answers[1].y))\n      {\n        Vector2 swapMemo = answers[0];\n        answers[0] = answers[1];\n        answers[1] = swapMemo;\n      }\n      return answers; \n    }\n\n    public static decimal TriangleAria(Vector2 PointA, Vector2 PointB, Vector2 PointC)//3頂点に対する三角形の面積\n    {\n      decimal a = PointB.x - PointA.x;\n      decimal b = PointB.y - PointA.y;\n      decimal c = PointC.x - PointA.x;\n      decimal d = PointC.y - PointA.y;\n      return (Math.Abs(a*d-b*c)) / 2;\n    }\n\n    public static long PolygonPointContain(Vector2[] polygon, Vector2 aimPoint)\n      //多角形が点を含めば2,辺上は1,他は0\n    {\n      long n = polygon.Length;\n      bool answer = false;\n      for(int i = 0; i < n; i++)\n      {\n        if(WhereVector(polygon[i], polygon[(i+1)%n], aimPoint) == 5) return 1;//点は多角形上\n        \n        Vector2 toEgdeA = polygon[i] - aimPoint;//点から、多角形の各頂点へ線分を引く\n        Vector2 toEgdeB = polygon[(i+1)%n] - aimPoint;\n        if(toEgdeA.y > toEgdeB.y)\n        {\n          Vector2 swapMemo = toEgdeA;\n          toEgdeA = toEgdeB;\n          toEgdeB = swapMemo;\n        }\n        if(toEgdeA.y < EPS && toEgdeB.y > EPS && CrossProduct(toEgdeA, toEgdeB) > EPS)\n        {//点をx軸正の方向に伸ばして、奇数回交われば内部。\n          answer = !answer;\n        }\n      }\n      return ((answer) ? 2 : 0);\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        int N = Reader.Int();\n        var poly = new Polygon(Enu.Range(0, N).Select(i => new Point(Reader.Int(), Reader.Int())));\n        int NQ = Reader.Int();\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var P = new Point(Reader.Int(), Reader.Int());\n            Console.WriteLine(PointInPolygon(P, poly));\n        }\n\n        Console.ReadLine();\n    }\n\n    public const int Outside = 0, OnSegment = 1, Inside = 2;\n\n    public int PointInPolygon(Point p, Polygon poly)\n    {\n        bool inside = false;\n        for (int i = 0; i < poly.N; i++)\n        {\n            var a = poly[i] - p;\n            var b = poly[i + 1] - p;\n            if (a.Y > b.Y) { var t = a; a = b; b = t; }\n            var det = a.Det(b);\n            if (det == 0 && a.Dot(b) <= 0) return OnSegment;\n            if (det < 0 && a.Y <= 0 && b.Y > 0) inside = !inside;\n        }\n        return inside ? Inside : Outside;\n    }\n\n    public class Polygon\n    {\n        public readonly Point[] P;\n        public Polygon(Point[] points) { P = points; }\n        public Polygon(IEnumerable<Point> points) { P = points.ToArray(); }\n        public int N { get { return P.Length; } }\n        public Point this[int i] { get { return P[(i % N + N) % N]; } }\n\n        public double Area() { return Math.Abs(SignedArea()); }\n        public double SignedArea()\n        {\n            double area = 0;\n            for (int i = 0; i < P.Length; i++)\n                area += P[i].Det(P[(i + 1) % P.Length]);\n            return area / 2;\n        }\n        public bool IsConvex()\n        {\n            for (int i = 1; i < P.Length; i++)\n                if ((P[i] - P[i - 1]).Det(P[(i + 1) % P.Length] - P[i]) < 0)\n                    return false;\n            return true;\n        }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n        public Point(double x, double y) { X = x; Y = y; }\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Distance(Point b) { return Math.Sqrt((b - this).Dot(b - this)); }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;//リストの使用\nusing System.Collections.Generic;\nclass Program\n{\n\tstatic void Main()\n\t{\n    long n = long.Parse(Console.ReadLine());\n    Vector2[] polygon = new Vector2[n];//多角形の頂点\n    for(long i = 0; i < n; i++)\n    {\n      long[] nums = Array.ConvertAll(Console.ReadLine().Split(' '),long.Parse);//１行ごとに受け取る\n      polygon[i] = new Vector2(nums[0], nums[1]);\n    }\n\n    long q = long.Parse(Console.ReadLine());\n    for(long i = 0; i < q; i++)\n    {\n      long[] numsa = Array.ConvertAll(Console.ReadLine().Split(' '),long.Parse);\n      Vector2 aimPoint = new Vector2(numsa[0], numsa[1]);\n      Console.WriteLine(PolygonPointContain(polygon, aimPoint));\n    }\n\t}\n}\n\nclass Vector2//2次元ベクトル\n{\nstatic decimal EPS = 1e-10m;//小数誤差比較\n\n  public Vector2 (decimal X, decimal Y)\n  {\n    this.x = X;\n    this.y = Y;\n  }\n\n  public decimal x {private set; get;}\n  public decimal y {private set; get;}\n\n  public static Vector2 operator + (Vector2 ob1, Vector2 ob2)//ベクトルの基本演算\n  {\n    return new Vector2 (ob1.x + ob2.x, ob1.y + ob2.y);\n  }\n  public static Vector2 operator - (Vector2 ob1, Vector2 ob2)\n  {\n    return new Vector2 (ob1.x - ob2.x, ob1.y - ob2.y);\n  }\n  public static Vector2 operator * (Vector2 ob, decimal scalar)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n  public static Vector2 operator * (decimal scalar, Vector2 ob)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n  public static Vector2 operator / (Vector2 ob, decimal scalar)\n  {\n    return new Vector2 (ob.x / scalar, ob.y / scalar);\n  }\n\n  public decimal Length()//ベクトルの長さの2乗\n  {\n    return x * x + y * y;\n  }\n  public static decimal Distance(Vector2 ob1, Vector2 ob2)//2点間の距離\n  {\n    return (decimal)Math.Sqrt((double)((ob1.x-ob2.x) * (ob1.x-ob2.x) + (ob1.y-ob2.y) * (ob1.y-ob2.y)));\n  }\n  public static decimal DotProduct(Vector2 ob1, Vector2 ob2)//内積\n  {\n    return ob1.x * ob2.x + ob1.y * ob2.y;\n  }\n  public static decimal CrossProduct(Vector2 ob1, Vector2 ob2)//外積。第2引数が反時計回り側で正。\n  {\n    return ob1.x * ob2.y - ob1.y * ob2.x;\n  }\n  public static decimal Arg(Vector2 p)//x軸に対する偏角\n  {\n    return (decimal)Math.Atan2((double)p.y, (double)p.x);\n  }\n  public static Vector2 PoralCoordinate(decimal radius, decimal angle)//長さと座標から極座標にする\n  {\n    return new Vector2(radius * (decimal)Math.Cos((double)angle), radius * (decimal)Math.Sin((double)angle));\n  }\n\n  public static Vector2 Projection(Vector2 beginPoint, Vector2 endPoint, Vector2 point)//点の射影\n  {\n    Vector2 segment = endPoint - beginPoint;\n    decimal ratio = Vector2.DotProduct(point - beginPoint, segment) / segment.Length();\n    return beginPoint + segment * ratio;//始点にたす\n  }\n\npublic static long WhereVector(Vector2 beginPoint, Vector2 endPoint, Vector2 point)\n  {//ベクトルに対する点の位置\n    Vector2 segment = endPoint - beginPoint;\n    Vector2 aimVec = point - beginPoint;\n    if(Vector2.CrossProduct(segment, aimVec) > EPS)\n      return 1;//反時計回り側\n    else if(Vector2.CrossProduct(segment, aimVec) < -EPS)\n      return 2;//時計回り側\n    else if(Vector2.DotProduct(segment, aimVec) < -1+EPS)\n      return 3;//ベクトル反対向きの側\n    else if(segment.Length() < aimVec.Length())\n      return 4;//ベクトル向きの側\n    else\n      return 5;//ベクトル上\n  }\n\n  public static long IsIntersect(Vector2 vecA, Vector2 vecB,\n    Vector2 vecAsub, Vector2 vecBsub)//2線分の交差判定\n  {\n    bool answer = false;\n\n    if(Vector2.WhereVector(vecA, vecB, vecAsub) + Vector2.WhereVector(vecA, vecB, vecBsub) == 3\n    && Vector2.WhereVector(vecAsub, vecBsub, vecA) + Vector2.WhereVector(vecAsub, vecBsub, vecB) == 3)\n      answer = true;\n    if(Vector2.WhereVector(vecA, vecB, vecAsub) == 5 || Vector2.WhereVector(vecA, vecB, vecBsub) == 5\n    || Vector2.WhereVector(vecAsub, vecBsub, vecA) == 5 || Vector2.WhereVector(vecAsub, vecBsub, vecB) == 5)\n      answer = true;\n    return((answer) ? 1 : 0);\n  }\n\n  public static Vector2 IntersectPoint(Vector2 vecA, Vector2 vecB, \n    Vector2 vecAsub, Vector2 vecBsub)//2線分の交点\n  {\n    Vector2 leftPoint = Vector2.Projection(vecA, vecB, vecAsub);//線分左端点の射影\n    Vector2 rightPoint = Vector2.Projection(vecA, vecB, vecBsub);//線分右端点の射影\n    decimal leftLength = (vecAsub - leftPoint).Length();\n    decimal rightLength = (vecBsub - rightPoint).Length();\n\n    leftLength = (decimal)(Math.Sqrt((double)leftLength));\n    rightLength = (decimal)(Math.Sqrt((double)rightLength));\n    \n    if(leftLength < EPS) return leftPoint;\n    else if(rightLength < EPS) return rightPoint;\n    decimal ratio = leftLength / (leftLength + rightLength);\n    return (leftPoint + ratio * (rightPoint - leftPoint));\n  }\n\npublic static Vector2[] circleLineIntersection(Vector2 centerPoint, decimal circleRadius, \n    Vector2 beginPoint, Vector2 endPoint)//円と直線の交点\n  {\n    Vector2[] answers = new Vector2[2];\n    Vector2 segment = endPoint - beginPoint;\n    Vector2 unitSegment = segment / (decimal)Math.Sqrt((double)segment.Length());\n    Vector2 circleProjection = Projection(beginPoint, endPoint, centerPoint);//交点の中点\n    decimal lineLength = \n      (decimal)Math.Sqrt((double)(circleRadius*circleRadius - (circleProjection-centerPoint).Length()));//端点と中点の距離\n    //Console.WriteLine(unitSegment.x+\" \"+unitSegment.y);\n    answers[0] = circleProjection + (unitSegment * lineLength);\n    answers[1] = circleProjection - (unitSegment * lineLength);\n    return answers;\n  }\n\n  public static Vector2[] CircleIntersection(Vector2 centerPointA, decimal circleRadiusA, \n      Vector2 centerPointB, decimal circleRadiusB)//2円の交点\n    {\n      Vector2[] answers = new Vector2[2];\n      decimal centerDistance = Distance(centerPointA, centerPointB);//2円の中心間距離\n      decimal centerAngle = Arg(centerPointB - centerPointA);\n      decimal intersectionAngle = (decimal)Math.Acos((double)(circleRadiusA*circleRadiusA\n        + centerDistance*centerDistance - circleRadiusB*circleRadiusB)\n        /(double)(2*circleRadiusA*centerDistance));//余弦定理\n      answers[0] = centerPointA + PoralCoordinate(circleRadiusA, centerAngle+intersectionAngle);\n      answers[1] = centerPointA + PoralCoordinate(circleRadiusA, centerAngle-intersectionAngle); \n      if(answers[0].x > answers[1].x || (Math.Abs(answers[0].x - answers[1].x) < EPS && answers[0].y > answers[1].y))\n      {\n        Vector2 swapMemo = answers[0];\n        answers[0] = answers[1];\n        answers[1] = swapMemo;\n      }\n      return answers; \n    }\n\n    public static decimal TriangleAria(Vector2 PointA, Vector2 PointB, Vector2 PointC)//3頂点に対する三角形の面積\n    {\n      decimal a = PointB.x - PointA.x;\n      decimal b = PointB.y - PointA.y;\n      decimal c = PointC.x - PointA.x;\n      decimal d = PointC.y - PointA.y;\n      return (Math.Abs(a*d-b*c)) / 2;\n    }\n\n    public long PolygonPointContain(Vector2[] polygon, Vector2 aimPoint)\n      //多角形が点を含めば2,辺上は1,他は0\n    {\n      long n = polygon.Length;\n      bool answer = false;\n      for(int i = 0; i < n; i++)\n      {\n        Vector2 toEgdeA = polygon[i] - aimPoint;//点から、多角形の各頂点へ線分を引く\n        Vector2 toEgdeB = polygon[(i+1)%n] - aimPoint;\n        if(WhereVector(toEgdeA, toEgdeB, aimPoint) == 5) return 1;//点は多角形上\n        if(toEgdeA.y > toEgdeB.y)\n        {\n          Vector2 swapMemo = toEgdeA;\n          toEgdeA = toEgdeB;\n          toEgdeB = swapMemo;\n        }\n        if(toEgdeA.y < EPS && toEgdeB > EPS && CrossProduct(toEgdeA, toEgdeB) > EPS)\n        {//点をx軸正の方向に伸ばして、奇数回交われば内部。\n          answer = !answer;\n        }\n        Console.WriteLine((answer) ? 2 : 0);\n      }\n    }\n}\n\n"
  },
  {
    "language": "JavaScript",
    "code": "// Vector2d\nvar Vector2D = class Vector2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nVector2D.prototype.Init = function(x,y){\n\tthis.x = x;\n\tthis.y = y;\n}\n\n/*\n * v: Vector2D\n */\nfunction rotateVector90(v){\n\tvar r = new Vector2D();\n\tr.x = -v.y;\n\tr.y = v.x;\n\treturn r;\n}\n\n/*\n * get degree to radian return radian\n */\nfunction getDegreeToRadian(degree){\n\tvar pi = 3.14159265358979323846;\n\treturn degree * pi / 180;\n}\n\n/*\n * vec:Vector2D return Vector2D\n */\nfunction getRotateVector(vec,degree){\n\tvar radian = getDegreeToRadian(degree);\n\n\tvar sin = Math.sin(radian);\n\tvar cos = Math.cos(radian);\n\n\tvar r = new Vector2D();\n\tr.x = vec.x * cos - vec.y * sin;\n\tr.y = vec.x * sin + vec.y * cos;\n\n\treturn r;\n}\n\nfunction isEqualVectors(a,b){\n\treturn equalFloats(a.x - b.x,0) && equalFloats(a.y - b.y,0);\n}\n\n/**\n * vec:Vector2D\n * \n * return unitVector\n */\nfunction getUnitVector(vec){\n\tvar length = getVectorLength2D(vec);\n\tif(length > 0){\n\t\treturn getDivideVector(vec,length);\n\t}\n\treturn vec;\n}\n\n/**\n * return vector length\n * \n * vec:Vector2D\n */\nfunction getVectorLength2D(vec){\n\treturn Math.sqrt((vec.x * vec.x) + (vec.y * vec.y));\n}\n\nfunction getDivideVector(vec2D,length){\n\tvec2D.x = vec2D.x / length;\n\tvec2D.y = vec2D.y / length;\n\treturn vec2D;\n}\n\nfunction equalFloats(a,b){\n\tvar threshold = 1 / 8192;\n\treturn Math.abs(a - b) < threshold;\n}\n\nfunction isParallelVector(vectorA,vectorB){\n\tvar na = rotateVector90(vectorA);\n\treturn equalFloats(0,dotProduct2D(na,vectorB));\n}\n\nfunction isVerticalVector(vectorA,vectorB){\n\treturn equalFloats(0,dotProduct2D(vectorA,vectorB));\n}\n\nfunction subtractVector(vecA,vecB){\n\tvar vec = new Vector2D();\n\tvec.x = vecA.x - vecB.x;\n\tvec.y = vecA.y - vecB.y;\n\treturn vec;\n}\n\nfunction dotProduct2D(vecA,vecB){\n    var dot = vecA.x * vecB.x + vecA.y * vecB.y;\n    //console.log(dot);\n\treturn vecA.x * vecB.x + vecA.y * vecB.y;\n}\n\n/**\n * 外積\n * \n * @param vecA\n * @param vecB\n * @returns\n */\nfunction getCross(vecA,vecB){\n\treturn vecA.x * vecB.y - vecA.y * vecB.x;\n}\n\n/**\n * line segment\n * \n * point1:Vector2D point2:Vector2D\n */\nvar LineSegment2D = class LineSegment2D {\n\tconstructor(point1,point2){\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t}\n}\n\nLineSegment2D.prototype.Init = function(point1,point2){\n\tthis.point1 = point1;\n\tthis.point2 = point2;\n}\n\nfunction onOneSide(axis,segment){\n\tvar d1 = new Vector2D();\n\td1 = subtractVector(segment.point1,axis.base);\n\n\tvar d2 = new Vector2D();\n\td2 = subtractVector(segment.point2,axis.base);\n\n\tvar n = new Vector2D();\n\tn = rotateVector90(axis.direction);\n\n\t// 同じ方向だということを返す\n\treturn dotProduct2D(n,d1) * dotProduct2D(n,d2) > 0;\n}\n\nfunction overLapping(minA,maxA,minB,maxB){\n\treturn minB <= maxA && minA <= maxB;\n}\n\nfunction isSegmentsCollide(segment1,segment2){\n\t// 線分の方向をチェックするためのベクトル\n\tvar axisA = new Line();\n\tvar axisB = new Line();\n\n\t// 線分1のベクトルに対して、線分2が片側にあるかチェック\n\taxisA.base = segment1.point1;\n\taxisA.direction = subtractVector(segment1.point2,segment1.point1);\n\n\tif(onOneSide(axisA,segment2)){\n\t\treturn false;\n\t}\n\n\t// 同じく\n\taxisB.base = segment2.point1;\n\taxisB.direction = subtractVector(segment2.point2,segment2.point1);\n\n\tif(onOneSide(axisB,segment1)){\n\t\treturn false;\n\t}\n\n\t// 同じベクトルをもつケース\n\tif(isParallelVector(axisA.direction,axisB.direction)){\n\t\tvar rangeA = getProjectSegment(segment1,axisA.direction);\n\t\tvar rangeB = getProjectSegment(segment2,axisA.direction);\n\n\t\t// 重なっているか\n\t\treturn isOverLappingRanges(rangeA,rangeB);\n\t}\n\telse{\n\t\treturn true;\n\t}\n}\n\n/*\n * Line Object\n */\nfunction Line(){\n\t// vector2D\n\tthis.base;\n\t// vector2D\n\tthis.direction\n}\n\nLine.prototype.Init = function(base,direction,color){\n\tthis.base = base;\n\tthis.direction = direction;\n}\n\n/**\n * Range\n */\nvar Range = class Range {\n\tconstructor(min,max){\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\nfunction getMaxMinRange(range1,range2){\n\tvar range = new Range();\n\trange.min = range1.min < range2.min ? range1.min : range2.min;\n\trange.max = range1.max < range2.max ? range2.max : range1.max;\n\treturn range;\n}\n\nfunction getSortRange(range){\n\tvar sorted = new Range(range.min,range.max);\n\tif(range.min > range.max){\n\t\tsorted.min = range.max;\n\t\tsorted.max = range.min;\n\t}\n\treturn sorted;\n}\n\nfunction getNegateVector(vector){\n\tvector.x = -vector.x;\n\tvector.y = -vector.y;\n\treturn vector;\n}\n\nfunction getAddVector(vecA,vecB){\n\treturn new Vector2D(vecA.x + vecB.x,vecA.y + vecB.y);\n}\n\n/**\n * segment:segment onto:Vector2D\n * \n * return Range\n */\nfunction getProjectSegment(segment,onto){\n\tvar ontoUnitVec = getUnitVector(onto);\n\n\tvar range = new Range();\n\trange.min = dotProduct2D(ontoUnitVec,segment.point1);\n\trange.max = dotProduct2D(ontoUnitVec,segment.point2);\n\n\trange = getSortRange(range);\n\treturn range;\n}\n\nfunction isOverLappingRanges(range1,range2){\n\treturn overLapping(range1.min,range1.max,range2.min,range2.max);\n}\n\nfunction projectVector(project,onto){\n\tvar d = dotProduct2D(onto,onto);\n\tif(0 < d){\n\t    var dp = dotProduct2D(project,onto);\n\t    return multiplyVector(onto,dp / d);\n\t}\n\treturn onto;\n}\n\nfunction getNorm(vec){\n\treturn vec.x * vec.x + vec.y * vec.y;\n}\n\nfunction getVec2DLength(vec){\n\treturn Math.sqrt(getNorm(vec));\n}\n\n\n/**\n * point class\n */\nvar Point2D = class Point2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n}\n\nfunction addPoint(point1,point2){\n\treturn new Point2D(point1.x + point2.x,point1.y + point2.y);\n}\n\nfunction subtractPoint(point1,point2){\n\treturn new Point2D(point1.x - point2.x,point1.y - point2.y);\n}\n\nfunction multiplyPoint(point,scalar){\n\treturn new Point2D(point.x * scalar,point.y * scalar);\n}\n\n/**\n * segment : LineSegment2D\n * point : Point\n */\nfunction getProjectPoint(segment,point){\n\tvar vec1 = new Vector2D(segment.point2.x - segment.point1.x,segment.point2.y - segment.point1.y);\n\tvar vec2 = new Vector2D(point.x - segment.point1.x,point.y - segment.point1.y);\n\tvar rate = dotProduct2D(vec2,vec1) / getNorm(vec1);\n\tvar vec3 = multiplyVector(vec1,rate);\n\tvar project = new Point2D(segment.point1.x + vec3.x,segment.point1.y + vec3.y);\n\treturn project; \n}\n\nfunction getReflectionPoint(segment,point){\n\tvar projection = getProjectPoint(segment,point);\n\t// pから射影点までのベクトル\n\tvar vec = subtractPoint(projection,point);\n\t// 2倍したものが射影点になる\n\tvar refrectionPoint = multiplyPoint(vec,2);\n\t// 始点を足す\n\treturn addPoint(refrectionPoint,point);\n}\n\n/**\n * \n * @param segment1\n * @param segment2\n * @returns point\n */\nfunction getCrossPoint(segment1,segment2){\n\t// 基準となる線を決める\n\tvar baseVector = new Vector2D(segment2.point2.x - segment2.point1.x,segment2.point2.y - segment2.point1.y);\n\tvar d1Vec = new Vector2D(segment1.point1.x - segment2.point1.x,segment1.point1.y - segment2.point1.y);\n\tvar d2Vec = new Vector2D(segment1.point2.x - segment2.point1.x,segment1.point2.y - segment2.point1.y);\n\tvar d1 = Math.abs(getCross(baseVector,d1Vec));\n\tvar d2 = Math.abs(getCross(baseVector,d2Vec));\n\tvar t = d1 / (d1 + d2);\n\tvar x = segment1.point1.x + (segment1.point2.x - segment1.point1.x) * t;\n\tvar y = segment1.point1.y + (segment1.point2.y - segment1.point1.y) * t;\n\treturn new Point2D(x,y);\n}\n\nfunction multiplyVector(vec,scalar){\n\tvar temp = new Vector2D();\n\ttemp.x = vec.x * scalar;\n\ttemp.y = vec.y * scalar;\n\treturn temp;\n}\n\nfunction clampOnRange(x,min,max){\n\tif(x < min){\n\t\treturn min;\n\t}else if(x > max){\n\t\treturn max;\n\t}else{\n\t\treturn x;\n\t}\n}\n\n/**\n * 直線と点との距離\n */\nfunction getDistanceLinePoint(line,point){\n\tvar vec1 = new Vector2D(line.point2.x - line.point1.x,line.point2.y - line.point1.y);\n\tvar vec2 = new Vector2D(point.x - line.point1.x,point.y - line.point1.y);\n\treturn Math.abs(getCross(vec1,vec2) / getVec2DLength(vec1)); \n}\n\n/**\n * 線分と点との距離を求める\n */\nfunction getDistanceSegmentPoint(segment,point){    \n\t// ベクトルp2 - p1とベクトルp - p1がなす角θが90どより大きい場合(-90より小さい場合)\n\t// dは点pと点p1の距離になる\n\tif(dotProduct2D(subtractPoint(segment.point2,segment.point1),subtractPoint(point,segment.point1)) < 0){\n\t\treturn getVec2DLength(subtractPoint(point,segment.point1));\n\t}\n\t// ベクトルp1 - p2とベクトルp - p2がなす角θが90どより大きい場合(-90より小さい場合)\n\t// dは点pと点p2の距離になる\n\tif(dotProduct2D(subtractPoint(segment.point1,segment.point2),subtractPoint(point,segment.point2)) < 0){\n\t\treturn getVec2DLength(subtractPoint(point,segment.point2));\n\t}\n\t// それ以外はdは点pと直線p1p2の距離になる\n\treturn getDistanceLinePoint(segment,point);\n}\n\n/**\n * 線分と線分との距離を求める\n */\nfunction getSegmentDistance(segment1,segment2){\n\t// 交差していた場合距離は0になる\n\tif(isSegmentsCollide(segment1,segment2)){\n\t\treturn 0;\n\t}\n\treturn Math.min(Math.min(getDistanceSegmentPoint(segment1,segment2.point1),getDistanceSegmentPoint(segment1,segment2.point2)),\n\t\t\tMath.min(getDistanceSegmentPoint(segment2,segment1.point1),getDistanceSegmentPoint(segment2,segment1.point2)));\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\n//var input = require('fs').readFileSync('input.txt', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\t\nvar n = Arr[0];\nvar points = [];\n// 消す\nArr.shift();\n\n// 多角形の点を記録する\nfor(var i = 0;i < n;++i){\n    var nums = Arr[0].split(\" \").map(Number);\n    Arr.shift();\n    points[i] = new Point2D(nums[0],nums[1]);\n}\nvar q = Arr[0];\nArr.shift();\nvar cross = 0;\nvar ans = 1;\n\n// 各々の点について内包するか調べる\nfor(var i = 0;i < q;++i){\n    var nums = Arr[i].split(\" \").map(Number);\n    var point = new Point2D(nums[0],nums[1]);\n    var ans = 0;\n    \n    for(var j = 0;j < n;++j){\n        var vec1 = subtractVector(points[j],point);\n        var vec2 = subtractVector(points[(j + 1) % n],point);\n        // vec1とvec2が同一直線かつ逆向き:線分上にある場合\n        var cross = Math.abs(getCross(vec1,vec2));\n        if(equalFloats(cross,0) && dotProduct2D(vec1,vec2) < Number.EPSILON){\n            ans = 1;\n            break;\n        }\n        if(vec1.y > vec2.y){\n            // 点1と点2のy座標を反転させる\n            var y = vec1.y;\n            vec1.y = vec2.y;\n            vec2.y = y;\n            // x忘れてた\n            var x = vec1.x;\n            vec1.x = vec2.x;\n            vec2.x = x;\n        }\n        // vec1とvec2の外積が正かつ2点が半直線をまたいで反対側にある場合交差している\n        if(vec1.y < Number.EPSILON && vec2.y > Number.EPSILON && getCross(vec1,vec2) > Number.EPSILON){\n            ans = ans == 0 ? 2 : 0;\n        }\n    }\n    console.log(ans);\n}\n"
  },
  {
    "language": "Ruby",
    "code": "n = gets.to_i\np = []\nn.times{|i|\n  p[i] = gets.split.map(&:to_f)\n}\np << p[0]\n\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  count = 0\n  on_line = false\n  n.times{|i|\n    if (p[i][1] <= y && p[i+1][1] > y) || (p[i][1] > y && p[i+1][1] <= y) then\n      vt = (y - p[i][1]) / (p[i+1][1] - p[i][1])\n      if x < p[i][0] + vt * (p[i+1][0] - p[i][0])\n        count += 1\n      end\n    end\n    l0 = Math.sqrt((x - p[i][0])**2 + (y - p[i][1])**2)\n    l1 = Math.sqrt((p[i+1][0] - p[i][0])**2 + (p[i+1][1] - p[i][1])**2)\n    if (x-p[i][0])*(p[i+1][0]-p[i][0])+(y-p[i][1])*(p[i+1][1]-p[i][1])==l0*l1 \\\n      && l0 <= l1\n      on_line = true\n      break\n    end\n  }\n  if on_line == true\n    puts \"1\"\n  elsif count % 2 == 0\n    puts \"0\"\n  else\n    puts \"2\"\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "pi = 2 * Math.atan2(1,0)\nepsilon = 1e-12\n\nn = gets.to_i\np = []\nn.times{|i|\n  p[i] = gets.split.map(&:to_f)\n}\np << p[0]\n\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  sum = 0\n  on_line_flag = false\n  n.times{|i|\n    v0 = [p[i][0] - x, p[i][1] - y]\n    r0 = Math.sqrt(v0[0]*v0[0]+v0[1]*v0[1])\n    v1 = [p[i+1][0] - x, p[i+1][1] - y]\n    r1 = Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1])\n    sum += Math.acos((v0[0]*v1[0]+v0[1]*v1[1])/(r0 * r1))\n    v2 = [p[i+1][0]-p[i][0], p[i+1][1] - p[i][1]]\n    r2 = Math.sqrt(v2[0]*v2[0]+v2[1]*v2[1])\n    if (v0[0]*v2[0]+v0[1]*v2[1])/(r0*r2) == -1 && r2 >= r1\n      on_line_flag = true\n      next\n    end\n  }\n  if on_line_flag\n    puts 1\n  elsif (sum - 2.0 * pi).abs < epsilon\n    puts 2\n  else\n    puts 0\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "n = gets.to_i\np = []\nn.times{|i|\n  p[i] = gets.split.map(&:to_i)\n}\np << p[0]\n\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_i)\n  count = 0\n  on_line = false\n  n.times{|i|\n    if (p[i][1] <= y && y < p[i+1][1]) || (p[i+1][1] <= y && y < p[i][1]) then\n      vt = (y - p[i][1]).to_f / (p[i+1][1] - p[i][1]).to_f\n      if x < p[i][0] + vt * (p[i+1][0] - p[i][0])\n        count += 1\n      end\n    end\n    l0 = Math.sqrt((x - p[i][0])**2 + (y - p[i][1])**2)\n    l1 = Math.sqrt((p[i+1][0] - p[i][0])**2 + (p[i+1][1] - p[i][1])**2)\n    if (x-p[i][0])*(p[i+1][0]-p[i][0])+(y-p[i][1])*(p[i+1][1]-p[i][1])==l0*l1 \\\n      && l0 <= l1\n      on_line = true\n      break\n    end\n  }\n  if on_line == true\n    puts \"1\"\n  elsif count % 2 == 0\n    puts \"0\"\n  else\n    puts \"2\"\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\n\nclass Polygon\n  attr_accessor :points\n  def initialize\n    @points = []\n  end\nend\n\ndef cross(p1, p2)\n  return p1[0]*p2[1] - p1[1]*p2[0]\nend\n\npoly = Polygon.new\ngets.to_i.times do\n  x, y = gets.split.map &:to_i\n  point = Vector[x, y]\n  poly.points << point\nend\n\ngets.to_i.times do\n  x, y = gets.split.map &:to_i\n  q = Vector[x, y]\n  n = 0\n  on_segment = false\n  poly.points.each_with_index do |v, i|\n    a = poly.points[i] - q\n    b = poly.points[(i+1) % poly.points.size] - q\n    if cross(a, b) == 0 && a.inner_product(b) <= 0\n      on_segment = true\n      break\n    end\n    a, b = b, a if a[1] > b[1]\n    n += 1 if a[1] <= 0 && b[1] > 0 && cross(a,b) > 0\n  end\n  if on_segment\n    puts 1\n  else\n    puts n.odd?? 2 : 0\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "n = gets.to_i\np = []\nn.times{|i|\n  p[i] = gets.split.map(&:to_i)\n}\np << p[0]\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_i)\n  count = 0\n  on_line = false\n  n.times{|i|\n    a = [p[i  ][0] - x, p[i  ][1] - y]\n    b = [p[i+1][0] - x, p[i+1][1] - y]\n    cross = a[0]*b[1] - a[1]*b[0]\n    if  cross == 0 && a[0]*b[0]+a[1]*b[1] <= 0\n      on_line = true\n      break\n    end\n    a, b = b, a if a[1] > b[1]\n    count += 1 if a[1] <= 0 && b[1] > 0 && cross > 0\n  }\n  if on_line == true\n    puts \"1\"\n  elsif count % 2 == 0\n    puts \"2\"\n  else\n    puts \"0\"\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "pi = 2 * Math.atan2(1,0)\nepsilon = 1e-12\n\nn = gets.to_i\np = []\nn.times{|i|\n  p[i] = gets.split.map(&:to_f)\n}\np << p[0]\n\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  sum = 0\n  on_line_flag = false\n  n.times{|i|\n    v0 = [p[i][0] - x, p[i][1] - y]\n    r0 = Math.sqrt(v0[0]*v0[0]+v0[1]*v0[1])\n    v1 = [p[i+1][0] - x, p[i+1][1] - y]\n    r1 = Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1])\n    if r0 == 0 or r1 == 0\n      on_line_flag = true\n      break\n    end\n    sum += Math.acos((v0[0]*v1[0]+v0[1]*v1[1])/(r0 * r1))\n    v2 = [p[i+1][0]-p[i][0], p[i+1][1] - p[i][1]]\n    r2 = Math.sqrt(v2[0]*v2[0]+v2[1]*v2[1])\n    if (v0[0]*v2[0]+v0[1]*v2[1]) == -(r0*r2) && r2 >= r1\n      on_line_flag = true\n      break\n    end\n  }\n  if on_line_flag\n    puts 1\n  elsif (sum - 2.0 * pi).abs < epsilon\n    puts 2\n  else\n    puts 0\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\n\nclass Polygon\n  attr_accessor :points\n  def initialize\n    @points = []\n  end\nend\n\ndef cross(p1, p2)\n  return p1[0]*p2[1] - p1[1]*p2[0]\nend\n\npoly = Polygon.new\ngets.to_i.times do\n  x, y = gets.split.map &:to_i\n  point = Vector[x, y]\n  poly.points << point\nend\n\ngets.to_i.times do\n  x, y = gets.split.map &:to_i\n  q = Vector[x, y]\n  n = 0\n  on_segment = false\n  poly.points.each_with_index do |v, i|\n    a = poly.points[i] - q\n    b = poly.points[(i+1) % poly.points.size] - q\n    if cross(a, b) == 0 && a.inner_product(b) <= 0\n      on_segment = true\n      break\n    end\n    a, b = b, a if a[1] > b[1]\n    n += 1 if a[1] < q[1] && b[1] > q[1] && cross(a,b) > 0\n  end\n  if on_segment\n    puts 1\n  else\n    puts n.odd?? 2 : 0\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "n = gets.to_i\np = []\nn.times{|i|\n  p[i] = gets.split.map(&:to_i)\n}\np << p[0]\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_i)\n  count = 0\n  on_line = false\n  n.times{|i|\n    a = [p[i  ][0] - x, p[i  ][1] - y]\n    b = [p[i+1][0] - x, p[i+1][1] - y]\n    if  a[0]*b[1] - a[1]*b[0] == 0 && a[0]*b[0]+a[1]*b[1] <= 0\n      on_line = true\n      break\n    end\n    a, b = b, a if a[1] > b[1]\n    count += 1 if a[1] <= 0 && b[1] > 0 && a[0]*b[1] - a[1]*b[0] > 0\n  }\n  if on_line == true\n    puts \"1\"\n  elsif count % 2 == 0\n    puts \"0\"\n  else\n    puts \"2\"\n  end\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-8;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c???????¬????????????´????????\\?????§???    if (cross(b, c) < -EPS) return -1;     // a,b,c???????¬???????????????¨??\\?????§???                      \n    if (dot(b, c) < 0) return +2;          // c--a--b ??¶??´??±???                      \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??¶??´??±???                      \n    return 0;                              // a--c--b ??¶??´??±???}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool contains(in Polygon polygon, in Point p) { // ???????????????p???????????§??\\?£°??´?????????????????§??\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    int count = 0;\n    foreach (int i; 0 .. N) {\n        auto a = vs[i] - p;\n        auto b = vs[next(i)] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return true; // ???????????????p\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {\n            count++;\n        }\n    }\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c???????¬????????????´????????\\?????§???    if (cross(b, c) < -EPS) return -1;     // a,b,c???????¬???????????????¨??\\?????§???                      \n    if (dot(b, c) < 0) return +2;          // c--a--b ??¶??´??±???                      \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??¶??´??±???                      \n    return 0;                              // a--c--b ??¶??´??±???}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nclass Polygon {\n    Point[] vs;\n    this(in Point[] vs) {\n        this.vs = vs.dup;\n    }\n    override string toString() const { return vs.to!string; }\n}\nclass convexPolygon : Polygon {\n    this(in Point[] vs) { super(vs); }\n}\nbool contains(in convexPolygon polygon, in Point p) {\n    int N = cast(int)polygon.vs.length;\n    int prev(int i) { return (i + N - 1) % N; }\n    int next(int i) { return (i + 1) % N; }\n    foreach (i; 0 .. N) {\n        if (ccw(p, polygon.vs[i], polygon.vs[next(i)]) != CCW) return false;\n    }\n    return true;\n\n}\nconvexPolygon[] triangleDivision(in Polygon p) {\n    auto vs = p.vs.dup;\n    convexPolygon[] ret;\n    while (vs.length >= 3) {\n        int N = cast(int)vs.length;\n        int prev(int i) { return (i + N - 1) % N; }\n        int next(int i) { return (i + 1) % N; }\n        ret ~= new convexPolygon([ vs[prev(N - 1)], vs[N - 1], vs[next(N - 1)] ]);\n        vs.popBack;\n    }\n    return ret;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    auto ts = triangleDivision(new Polygon(vs));\n    int Q; readf(\"%d\\n\", &Q);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            foreach (t; ts) {\n                if (t.contains(p)) {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nclass Polygon {\n    Point[] vs;\n    this(in Point[] vs) {\n        this.vs = vs.dup;\n    }\n    override string toString() const { return vs.to!string; }\n}\nclass convexPolygon : Polygon {\n    this(in Point[] vs) { super(vs); }\n}\nbool contains(in convexPolygon polygon, in Point p) {\n    int N = cast(int)polygon.vs.length;\n    int prev(int i) { return (i + N - 1) % N; }\n    int next(int i) { return (i + 1) % N; }\n    foreach (i; 0 .. N) {\n        if (ccw(p, polygon.vs[i], polygon.vs[next(i)]) != CCW) return false;\n    }\n    return true;\n\n}\nconvexPolygon[] triangleDivision(in Polygon p) {\n    auto vs = p.vs.dup;\n    convexPolygon[] ret;\n    while (vs.length >= 3) {\n        int N = cast(int)vs.length;\n        int prev(int i) { return (i + N - 1) % N; }\n        int next(int i) { return (i + 1) % N; }\n        ret ~= new convexPolygon([ vs[prev(N - 1)], vs[N - 1], vs[next(N - 1)] ]);\n        vs.popBack;\n    }\n    return ret;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    auto ts = triangleDivision(new Polygon(vs));\n    int Q; readf(\"%d\\n\", &Q);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            foreach (t; ts) {\n                if (t.contains(p)) {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    auto t = Segment(p, Point(1e7 + 7, 1e7 + 9));\n    int count = 0;\n    foreach (i; 0 .. N) {\n        auto s = Segment(vs[i], vs[next(i)]);\n        if (t.intersects(s) && ! t.contains(s.a)) {\n            count++;\n        }\n\n    }\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nclass Polygon {\n    Point[] vs;\n    this(in Point[] vs) {\n        this.vs = vs.dup;\n    }\n    override string toString() const { return vs.to!string; }\n}\nclass convexPolygon : Polygon {\n    this(in Point[] vs) { super(vs); }\n}\nbool contains(in convexPolygon polygon, in Point p) { // ?????????p???????????´????????????\n    int N = cast(int)polygon.vs.length;\n    int prev(int i) { return (i + N - 1) % N; }\n    int next(int i) { return (i + 1) % N; }\n    foreach (i; 0 .. N) {\n        int c = ccw(p, polygon.vs[i], polygon.vs[next(i)]);\n        if (c <= 0) return false;\n    }\n    return true;\n\n}\nconvexPolygon[] triangleDivision(in Polygon p) {\n    auto vs = p.vs.dup;\n    convexPolygon[] ret;\n    while (vs.length >= 3) {\n        int N = cast(int)vs.length;\n        int prev(int i) { return (i + N - 1) % N; }\n        int next(int i) { return (i + 1) % N; }\n        foreach (int i; 0 .. N) {\n            if (ccw(vs[prev(i)], vs[i], vs[next(i)]) == CCW) {\n                ret ~= new convexPolygon([ vs[prev(i)], vs[i], vs[next(i)] ]);\n                vs = (i == N - 1 ? vs[0 .. $ - 1] : vs[0 .. i] ~ vs[i + 1 .. $]);\n                break;\n            }\n        }\n    }\n    return ret;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    const ts = triangleDivision(new Polygon(vs));\n    log(ts);\n    int Q; readf(\"%d\\n\", &Q);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            foreach (t; ts) {\n                if (t.contains(p)) {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-11;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    auto t = Segment(p, Point(1e7 + 7, 2e7 + 9));\n    int count = 0;\n    foreach (i; 0 .. N) {\n        auto s = Segment(vs[i], vs[next(i)]);\n        if (t.intersects(s)) {\n            count++;\n        }\n\n    }\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-9;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    auto t = Segment(p, Point(1e8 + 7, 2e7 + 9));\n    int count = 0;\n    foreach (i; 0 .. N) {\n        auto s = Segment(vs[i], vs[next(i)]);\n        if (t.intersects(s)) {\n            count++;\n        }\n\n    }\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nclass Polygon {\n    Point[] vs;\n    this(in Point[] vs) {\n        this.vs = vs.dup;\n    }\n    override string toString() const { return vs.to!string; }\n}\nclass convexPolygon : Polygon {\n    this(in Point[] vs) { super(vs); }\n}\nbool contains(in convexPolygon polygon, in Point p) { // ?????????p???????????´????????????\n    int N = cast(int)polygon.vs.length;\n    int prev(int i) { return (i + N - 1) % N; }\n    int next(int i) { return (i + 1) % N; }\n    foreach (i; 0 .. N) {\n        int c = ccw(p, polygon.vs[i], polygon.vs[next(i)]);\n        if (c <= 0) return false;\n    }\n    return true;\n\n}\nconvexPolygon[] triangleDivision(in Polygon p) {\n    auto vs = p.vs.dup;\n    convexPolygon[] ret;\n    while (vs.length >= 3) {\n        int N = cast(int)vs.length;\n        int prev(int i) { return (i + N - 1) % N; }\n        int next(int i) { return (i + 1) % N; }\n        foreach (int i; 0 .. N) {\n            if (ccw(vs[prev(i)], vs[i], vs[next(i)]) == CCW) {\n                ret ~= new convexPolygon([ vs[prev(i)], vs[i], vs[next(i)] ]);\n                vs = (i == N - 1 ? vs[0 .. $ - 1] : vs[0 .. i] ~ vs[i + 1 .. $]);\n                break;\n            }\n        }\n    }\n    return ret;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    const ts = triangleDivision(new Polygon(vs));\n    int Q; readf(\"%d\\n\", &Q);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            foreach (t; ts) {\n                if (t.contains(p)) {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nclass Polygon {\n    Point[] vs;\n    this(in Point[] vs) {\n        this.vs = vs.dup;\n    }\n    override string toString() const { return vs.to!string; }\n}\nclass ConvexPolygon : Polygon {\n    this(in Point[] vs) { super(vs); }\n}\nbool contains(in ConvexPolygon polygon, in Point p) { // ?????????p???????????´????????????\n    int N = cast(int)polygon.vs.length;\n    int prev(int i) { return (i + N - 1) % N; }\n    int next(int i) { return (i + 1) % N; }\n    foreach (i; 0 .. N) {\n        int c = ccw(p, polygon.vs[i], polygon.vs[next(i)]);\n        if (c <= 0) return false;\n    }\n    return true;\n\n}\nConvexPolygon[] triangleDivision(in Polygon p) {\n    auto vs = p.vs.dup;\n    ConvexPolygon[] ret;\n    while (vs.length > 3) {\n        int N = cast(int)vs.length;\n        int prev(int i) { return (i + N - 1) % N; }\n        int next(int i) { return (i + 1) % N; }\n        foreach (int i; 0 .. N) {\n            if (ccw(vs[prev(i)], vs[i], vs[next(i)]) == CCW) {\n                ret ~= new ConvexPolygon([ vs[prev(i)], vs[i], vs[next(i)] ]);\n                vs = (i == N - 1 ? vs[0 .. $ - 1] : vs[0 .. i] ~ vs[i + 1 .. $]);\n                break;\n            }\n        }\n    }\n    if (ccw(vs[0], vs[1], vs[2]) == CW) reverse(vs);\n    ret ~= new ConvexPolygon(vs);\n    return ret;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    const ts = triangleDivision(new Polygon(vs));\n    int Q; readf(\"%d\\n\", &Q);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            foreach (t; ts) {\n                if (t.contains(p)) {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-9;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    real theta = 0;\n    foreach (int i; 0 .. N) {\n        auto a = vs[i] - p;\n        auto b = vs[next(i)] - p;\n        real x = norm(a),\n             y = norm(b),\n             z = norm(b - a);\n        theta += (ccw(p, vs[i], vs[next(i)]) == CCW ? 1 : -1) * acos( (x^^2 + y^^2 - z^^2) / (2.0 * x * y) );\n    }\n    return abs(theta) + EPS >= PI;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-8;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    int count = 0;\n    foreach (int i; 0 .. N) {\n        auto a = vs[i] - p;\n        auto b = vs[next(i)] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return true; // ?????????p\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {\n            log([vs[i], vs[next(i)]]);\n            count++;\n        }\n    }\n    log([count]);\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-7;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nclass Polygon {\n    Point[] vs;\n    this(in Point[] vs) {\n        this.vs = vs.dup;\n    }\n    override string toString() const { return vs.to!string; }\n}\nclass convexPolygon : Polygon {\n    this(in Point[] vs) { super(vs); }\n}\nbool contains(in convexPolygon polygon, in Point p) { // ?????????p???????????´????????????\n    int N = cast(int)polygon.vs.length;\n    int prev(int i) { return (i + N - 1) % N; }\n    int next(int i) { return (i + 1) % N; }\n    foreach (i; 0 .. N) {\n        int c = ccw(p, polygon.vs[i], polygon.vs[next(i)]);\n        if (c <= 0) return false;\n    }\n    return true;\n\n}\nconvexPolygon[] triangleDivision(in Polygon p) {\n    auto vs = p.vs.dup;\n    convexPolygon[] ret;\n    while (vs.length >= 3) {\n        int N = cast(int)vs.length;\n        int prev(int i) { return (i + N - 1) % N; }\n        int next(int i) { return (i + 1) % N; }\n        ret ~= new convexPolygon([ vs[prev(N - 1)], vs[N - 1], vs[next(N - 1)] ]);\n        vs.popBack;\n    }\n    return ret;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    const ts = triangleDivision(new Polygon(vs));\n    int Q; readf(\"%d\\n\", &Q);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            foreach (t; ts) {\n                if (t.contains(p)) {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-9;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    auto t = Segment(p, Point(1e7 + 7, 1e7 + 9));\n    int count = 0;\n    foreach (i; 0 .. N) {\n        auto s = Segment(vs[i], vs[next(i)]);\n        if (t.intersects(s) && ! t.contains(s.a)) {\n            count++;\n        }\n\n    }\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.ascii;\nimport std.container;\nimport std.conv;\nimport std.math;\nimport std.numeric;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nvoid log(A...)(A arg) {\n    stderr.writeln(arg);\n}\nint size(T)(in T s) {\n    return cast(int)s.length;\n}\n\n\nimmutable real EPS = 1e-8;\n\nstruct Point {\n    real x, y;\n    Point opBinary(string op)(in Point p) const if (op == \"+\" || op == \"-\") {\n        return Point(mixin(\"x\" ~ op ~ \"p.x\"), mixin(\"y\" ~ op ~ \"p.y\"));\n    }\n    Point opBinary(string op)(real k) const if (op == \"*\" || op == \"/\") {\n        return Point(mixin(\"x\" ~ op ~ \"k\"), mixin(\"y\" ~ op ~ \"k\"));\n    }\n};\nreal dot(in Point a, in Point b) { return a.x * b.x + a.y * b.y; }\nreal cross(in Point a, in Point b) { return a.x * b.y - a.y * b.x; }\nreal norm(in Point a) { return sqrt(dot(a, a)); }\nPoint rot90(in Point p) { return Point(-p.y, p.x); }\nreal angle(in Point a) { return atan2(a.y, a.x); }\n\nconst int CW = -1;\nconst int CCW = 1;\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;                                          \n    if (cross(b, c) > EPS) return +1;      // a,b,c????????????????¨???¨???\n    if (cross(b, c) < -EPS) return -1;     // a,b,c?????????????¨???¨???                       \n    if (dot(b, c) < 0) return +2;          // c--a--b ??´???                       \n    if (norm(b) < norm(c)) return -2;      // a--b--c ??´???                       \n    return 0;                              // a--c--b ??´???\n}\n\nstruct Segment {\n    Point a, b;\n};\nbool contains(in Segment s, in Point p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersects(in Segment s, in Segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nstruct Polygon {\n    Point[] vs;\n}\nbool contains(in Polygon polygon, in Point p) { // ?????????p???????????´????????????\n    auto vs = polygon.vs;\n    int N = cast(int)vs.length;\n    int next(int i) { return (i + 1) % N; }\n    int count = 0;\n    foreach (int i; 0 .. N) {\n        auto a = vs[i] - p;\n        auto b = vs[next(i)] - p;\n        if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return true; // ?????????p\n        if (a.y > b.y) swap(a, b);\n        if (a.y < EPS && EPS < b.y && cross(a, b) > EPS) {\n            count++;\n        }\n    }\n    return count % 2 == 1;\n}\n\nvoid main() {\n    int N; readf(\"%d\\n\", &N);\n    auto vs = new Point[N];\n    foreach (ref v; vs) {\n        readf(\"%s %s\\n\", &v.x, &v.y);\n    }\n    int Q; readf(\"%d\\n\", &Q);\n    auto poly = Polygon(vs);\n    foreach (q; 0 .. Q) {\n        Point p; readf(\"%s %s\\n\", &p.x, &p.y);\n        int f() {\n            foreach (i, v; vs) {\n                if (Segment(v, vs[(i + 1) % N]).contains(p)) return 1;\n            }\n            if (poly.contains(p)) {\n                return 2;\n            }\n            return 0;\n        }\n        writeln(f());\n    }\n}"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom sys import stdin\ninput = stdin.readline\nimport collections\nimport math\n\n\n__author__ = \"Hamukichi (Nombiri)\"\n__copyright__ = \"Copyright 2015, Hamukichi (Nombiri)\"\n__version__ = \"0.1.0\"\n__date__ = \"2015-11-29\"\n__licence__ = \"MIT License\"\n\neps = 10E-4\n\ndef is_equal(v1, v2):\n    d = abs(v1 - v2)\n    if d < eps:\n        return True\n    return False\n\nclass Vector2(collections.namedtuple(\"Vector2\", \"x y\")):\n    \"\"\"Class for representing a two-dimensional vector.\n    :param x: The x component of the vector.\n    :type x: float\n    :param y: The y component of the vector.\n    :type y: float\n    \"\"\"\n\n    __slots__ = ()\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dotproduct(self, other):\n        \"\"\"Returns the dot product of this vector and the given vector.\n        :param other: The second vector.\n        \"\"\"\n\n        return self.x * other.x + self.y * other.y\n\nlines = stdin.readlines()\nn = int(lines[0])\nq = int(lines[n+1])\n\nv_set = []\nfor i in range(1, n+1):\n    v_set.append(Vector2(*list(map(int, lines[i].split()))))\n\ndef is_involed(p):\n\n    counter = 0\n\n    for i in range(n):\n        g_i = v_set[i-1]\n        g_in = v_set[i]\n        if g_i.y <= g_in.y:\n            a = g_i - p\n            b = g_in - p\n        else:\n            b = g_i - p\n            a = g_in - p\n\n        if  a * b > 0:\n            if a.y  <= 0 < b.y :\n                counter += 1\n        elif a * b == 0:\n            if a.dotproduct(b) <= 0:\n                return -1\n\n    return counter\n\nfor k in range(q):\n    p = Vector2(*list(map(int, lines[n+2+k].split())))\n    t = is_involed(p)\n    if t < 0:\n        print(1)\n    elif t % 2 == 0:\n        print(0)\n    else:\n        print(2)\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef eq(a, b):\n    return abs(a - b) < 1e-10\n\n\ndef on_line(p, s, e):\n    d = dot(p - s, e - s)\n    c = cross(p - s, e - s)\n    if c == 0 and 0 <= d <= abs(e - s) ** 2:\n        return True\n    return False\n\n\ndef on_polygon_line(xy, p):\n    for i in range(len(p)):\n        j = i - 1\n        if on_line(xy, p[i], p[j]):\n            return True\n    return False\n\n\ndef in_polygon(xy, p):\n    wn = 0\n    for i in range(len(p)):\n        j = i - 1\n        if 0 == (p[i] - p[j]).imag:\n            continue\n        vt = (xy - p[j]).imag / (p[i] - p[j]).imag\n        tmp = p[j] + vt * (p[i] - p[j])\n        if xy.real < tmp.real:\n            wn += 1 if p[j].imag <= xy.imag < p[i].imag else\\\n                 -1 if p[i].imag <= xy.imag < p[j].imag else 0\n    return wn\n\nn = int(readline())\np = [map(int, readline().split()) for _ in range(n)]\np = [x + y * 1j for x, y in p]\n\nq = int(readline())\nfor _ in range(q):\n    x, y = map(int, readline().split())\n    xy = x + y * 1j\n    print(1 if on_polygon_line(xy, p) else 2 if in_polygon(xy, p) else 0)"
  },
  {
    "language": "Python",
    "code": "import math\nEPS=1e-14\n\n#点类\nclass Point():\n\n    def __init__(self,x,y):\n        self.x=x\n        self.y=y\n    \n    def __sub__(self,p):\n        return Point(self.x - p.x, self.y - p.y);\n    def __add__(self,p):\n        return Point(self.x + p.x, self.y + p.y)\n           \n    def __mul__(self,a): #a: scalar\n        return Point(self.x * a, self.y * a)\n    def __truediv__(self,a): #a: scalar\n        return Point(self.x / a, self.y / a)\n   \n    def __str__(self):\n       return  str(self.x)+','+str(self.y)\n    def __repr__(self):\n        return  'Point('+str(self.x)+','+str(self.y)+')'\n    \n    def __lt__(self, other):    \n        if self.y-other.y==0:\n            return self.x<other.x\n        else:\n            return self.y<other.y\n            \n    def __eq__(self, other):    \n        return abs(self.x-other.x)<EPS and  abs(self.y-other.y)<EPS\n\n\n# 线段类\nclass Segment():\n    def __init__(self,p1, p2):\n        self.p1=p1\n        self.p2=p2\n    def __str__(self):\n        return  'segment:('+str(self.p1)+';'+str(self.p2)+')'\n    def __repr__(self):\n        return  'segment:('+str(self.p1)+';'+str(self.p2)+')'\n\n\nclass Circle():\n    def __init__(self,c, r):\n        self.c=c\n        self.r=r\n\n    def __str__(self):\n       return  'Circle:(center point: '+str(self.c)+'; radius: '+str(self.r)+')'\n    def __repr__(self):\n       return  'Circle:(center point: '+str(self.c)+'; radius: '+str(self.r)+')'\n   \n    \n#定义多边形\nclass Polygon():\n    def __init__(self,ps=[]):\n        self.ps=ps\n        self.size=len(ps)\n  \n    def __getitem__(self, i):#iter override \n        return self.ps[i]  \n    def __setitem__(self,i,p): \n        self.ps[i]=p               \n    def __iter__(self):     \n        return self.ps  \n    \n    def addpoint(self,i,p):\n        self.ps.insert(i,p)\n        self.size+=1\n    def delpoint(self,i):\n        self.size-=1\n        return self.ps.pop(i)\n    def sortYX(self):\n        self.ps.sort()\n        #self.ps.sort(key=attrgetter('y','x'))\n    def __str__(self):\n       return  'Polygon:'+str(tuple(self.ps))\n    def __repr__(self):\n       return  'Polygon:'+str(tuple(self.ps))\n        \n    def __len__(self):\n        return len(self.ps)\n    def __eq__(self, other):  \n         return self.ps==other.ps\n    \n    def draw(self):\n      \n       turtle.screensize(800,800,\"black\")\n       #turtle.setup(width=0.9,height=0.9)\n       turtle.title(\"Polygon convex hull\")\n       turtle.setworldcoordinates(-400,-400,400,400) \n\n       #print(turtle.screensize())\n       #mywin = turtle.Screen()    \n       #mywin.   \n       t=turtle.Turtle() \n       #mywin=turtle.Screen()\n       \n       t.pencolor(\"red\")\n       for pt in self.ps:\n           t.goto(pt.x,pt.y)\n           t.dot(10,'white')\n       \n \n\n#***************************点、向量****************************\n\n#向量的模的平方\ndef norm(p):  \n    return p.x * p.x + p.y * p.y\n\n\n#向量P的长度\ndef length(p):\n    return math.sqrt(p.x * p.x + p.y * p.y)\n\n\n# 向量的(点)内积, dot(a,b)=|a|*|b|*cos(a,b) (从a,到b的角)\n# =============================================================================\n# r=dot(a,b),得到矢量a和b的点积，如果两个矢量都非零矢量  \n# r<0：两矢量夹角为钝角； \n# r=0：两矢量夹角为直角； \n# r>0：两矢量夹角为锐角  \n# =============================================================================\ndef dot(a, b) :\n    return a.x * b.x + a.y * b.y\n\n\n\n# =============================================================================\n# # 向量的（叉）外积 cross(a,b)=|a||b|*sin(a,b) (从a,到b的角)由a,b构成的平行四边的面积\n# r=cross(a,b),得到向量a和向量b的叉积  \n# r>0：b在矢量a的逆时针方向；  \n# r=0：a,b 平行共线；  \n# r<0：b在向量a的顺时针方向 \n# =============================================================================\ndef cross( a, b) :\n    return a.x * b.y - a.y * b.x\n\n# 点p在线段s上的投影\ndef project(s, p):\n    base = s.p2 - s.p1\n    r = dot(p - s.p1, base) / norm(base)\n    return s.p1 + base * r \n\n\n# 点a到点b的距离\ndef getDistance(a, b) :\n    return length(a - b)\n\n# 线段l和点p的距离\ndef getDistanceLP(l, p) :\n    return abs( cross(l.p2 - l.p1, p - l.p1) / length(l.p2 - l.p1) )\n\n#getDistanceLP(s3, p7)\n    \n#线段s与点p的距离\ndef getDistanceSP(s, p) :\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0):\n        return length(p - s.p1)\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0):\n        return length(p - s.p2)\n    return getDistanceLP(s, p)\n\n#print(getDistanceLP(s3, Point(5,5)))\n#print(getDistanceSP(s3, Point(5,5)))\n\n\n#*************************线段********************************/\n# 线段s1，s2是否正交 <==> 内积为0\ndef isOrthogonalSG(s1, s2) :\n    return abs(dot(s1.p2 - s1.p1, s2.p2 - s2.p1))<EPS\n\n\n# 线段s1，s2是否平行 <==> 叉积为0\ndef isParallelLN(s1,s2) :\n    return abs(cross(s1.p2 - s1.p1, s2.p2 - s2.p1))<0\n\n\n\n\n# 逆时针方向ccw（Counter-Clockwise）\nCOUNTER_CLOCKWISE = 1;\nCLOCKWISE = -1;\nONLINE_BACK = -2;\nONLINE_FRONT = 2;\nON_SEGMENT = 0;\n\ndef ccw(p0, p1, p2) :\n    a = p1 - p0\n    b = p2 - p0\n    if (cross(a, b) > EPS):\n        return COUNTER_CLOCKWISE\n    if (cross(a, b) < -EPS):\n        return CLOCKWISE\n    if (dot(a, b) < -EPS):\n        return ONLINE_BACK\n    if (norm(a) < norm(b)):\n        return ONLINE_FRONT\n    \n    return ON_SEGMENT;\n\n\ndef toleft(p0,p1,p2):\n    a = p1 - p0\n    b = p2 - p0  \n    tmp=cross(a,b)\n    if tmp > EPS:\n        return 1\n    elif abs(tmp)<EPS and norm(a)<=norm(b):\n        return 2  #共线，p2在p0p1的右延长线上\n    elif abs(tmp)<EPS and norm(a)>norm(b):\n        return -2  #共线，p2在p0p1的left延长线上    \n    else:\n        return -1\n\n\n#以线段s为对称轴与点p成线对称的点\ndef reflect(s, p) :\n    return p + (project(s, p) - p) * 2.0\n\n\n\n#判断线段s1和s2是否相交\ndef intersectSG(s1, s2) :\n    return intersectP4(s1.p1, s1.p2, s2.p1, s2.p2)\n\n\n# 线段s1和线段s2的距离\ndef getDistanceSG(s1, s2) :\n    # 相交\n    if (intersectSG(s1, s2)):\n        return 0.0\n    return min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\\\n        getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\n# 判断线段p1p2和线段p3p4是否相交\ndef intersectP4(p1, p2, p3, p4) :\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and \\\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\n\n# 线段s1与线段s2的交点\ndef getCrossPoint(s1,s2) :\n    base = s2.p2 - s2.p1;\n    d1 = abs(cross(base, s1.p1 - s2.p1));\n    d2 = abs(cross(base, s1.p2 - s2.p1));\n    if d1+d2==0:\n        return s2.p1\n    t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n\n\n# 圆c和直线l的交点\ndef getCrossPointsCL(c, l) :\n    pr = project(l, c.c);\n    e = (l.p2 - l.p1) / length(l.p2 - l.p1)\n    base = math.sqrt(c.r * c.r - norm(pr - c.c))\n    return (pr - e * base),(pr + e * base)\n\n\n# 圆c1和圆c2的交点\ndef arg(p):\n    return math.atan2(p.y, p.x)\n\ndef polar(a, r):\n    return Point(math.cos(r) * a, math.sin(r) * a)\n\ndef getCrossPointsCC(c1, c2): \n    d = length(c1.c - c2.c)\n    #余弦定理\n    if d<EPS:\n        print (\"two circels with the same center point\")\n        return -1\n    a = math.acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d))\n    t = arg(c2.c - c1.c)\n    return (c1.c + polar(c1.r, t - a)), ( c1.c + polar(c1.r, t + a))\n\n\n#***************************多边形****************************/\n# 点的内包\n # IN 2\n  #  ON 1\n   # OUT 0\n\ndef contains(g, p) : # polygon is not necessarily convex.\n    n =len(g)\n    x = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if (abs(cross(a, b)) ==0 and dot(a, b) < 0):\n            return 1\n        if (a.y > b.y):\n            a,b=b,a\n        if (a.y <= 0 and 0 < b.y and cross(a, b) > 0):\n            x = not x\n     \n    if x==True:\n        return 2 #in\n    else:\n        return 0 #out\n\nn=int(input())\ng=[]\nfor i in range(0,n):\n    s= [int(x) for x in input().split()]\n    p0=Point(s[0],s[1])\n    g.append(p0)\n\nq=int(input())\nfor i in range(0,q):\n    s= [int(x) for x in input().split()]\n    pa=Point(s[0],s[1])\n    rt=contains(g, pa)\n    print(rt) \n"
  },
  {
    "language": "Python",
    "code": "from math import atan2\nn = input()\np = [map(int, raw_input().split()) for i in xrange(n)]\nfor t in xrange(input()):\n    x, y = map(int, raw_input().split())\n\n    inline = 0\n    theta = 0.\n    for i in xrange(n):\n        x0 = p[i-1][0] - x\n        y0 = p[i-1][1] - y\n        x1 = p[i][0] - x\n        y1 = p[i][1] - y\n\n        if x0*y1 == y0*x1 and x0*x1+y0*y1 <= 0:\n            inline = 1\n            break\n        theta += atan2(x0*y1-y0*x1, x0*x1+y0*y1)\n    if inline:\n        print 1\n    elif theta > 1:\n        print 2\n    else:\n        print 0"
  },
  {
    "language": "Python",
    "code": "def dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef string_to_complex(s):\n    x, y = map(int, s.split())\n    return x + y * 1j\n\ndef contains(polygon, point):\n    flag = False\n    for v1, v2 in zip(polygon[0:], polygon[1:]):\n        a = v1 - point\n        b = v2 - point\n        if a.imag > b.imag:\n            a, b = b, a\n        cross_ab = cross(a, b)\n        if a.imag <= 0 and b.imag > 0 and cross_ab > 0:\n            flag = not flag\n        if cross_ab == 0 and dot(a, b) <= 0:\n            return 1\n    if flag:\n        return 2\n    else:\n        return 0\n\nimport sys\n\nfile_input = sys.stdin\n\nn = int(file_input.readline())\n\npolygon = [string_to_complex(file_input.readline()) for i in range(n)]\npolygon.append(polygon[0])\n\nq = int(file_input.readline())\n\nfor line in file_input:\n    t = string_to_complex(line)\n    print(contains(polygon, t))"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __eq__(self, pnt):\n        if self.x == pnt.x and self.y == pnt.y: return True\n        return False\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def inner_product(self, vec):\n        return self.x*vec.x + self.y*vec.y\n\n    def outer_product(self, vec):\n        return self.x*vec.y - self.y*vec.x\n\n    def norm(self):\n        return math.sqrt(self.x**2 + self.y**2)\n\n    def polar(self):\n        r = self.norm()\n        theta = math.atan2(self.y, self.x)\n        return r, theta\n\n\nclass Segment():\n    def __init__(self, p1=None, p2=None):\n        self.p1 = p1\n        self.p2 = p2\n\n    def is_intersect(self, seg):\n        a = (seg.p1.x - seg.p2.x) * (self.p1.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p1.x)\n        b = (seg.p1.x - seg.p2.x) * (self.p2.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p2.x)\n        c = (self.p1.x - self.p2.x) * (seg.p1.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p1.x)\n        d = (self.p1.x - self.p2.x) * (seg.p2.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p2.x)\n        e = (self.p1.x - seg.p1.x)*(self.p2.x - seg.p2.x)\n        f = (self.p1.x - seg.p2.x)*(self.p2.x - seg.p1.x)\n        g = (self.p1.y - seg.p1.y)*(self.p2.y - seg.p2.y)\n        h = (self.p1.y - seg.p2.y)*(self.p2.y - seg.p1.y)\n        return a*b <= 0 and c*d <= 0 and (e <= 0 or f <= 0) and (g <= 0 or h <= 0)\n\n    def on_segment(self, pnt):\n        if self.p1 == pnt or self.p2 == pnt: return True\n        a, b = Vector(self.p2.x - self.p1.x, self.p2.y - self.p1.y), Vector(pnt.x - self.p1.x, pnt.y - self.p1.y)\n        a_r, a_theta = a.polar()\n        b_r, b_theta = b.polar()\n        if a_theta == b_theta:\n            if 0 < b_r/a_r and b_r/a_r < 1:\n                return True\n        return False\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = list(map(int, input().split(' ')))\n    points.append(Point(x, y))\npoints.append(points[0])\nsegments = [Segment(points[i], points[i+1]) for i in range(n)]\n\nq = int(input())\nfor i in range(q):\n    x, y = list(map(int, input().split(' ')))\n    right, left = Segment(Point(x, y), Point(10001, y)), Segment(Point(x, y), Point(-10001, y))\n    up, down = Segment(Point(x, y), Point(x, 10001)), Segment(Point(x, y), Point(x, -10001))\n    r_int, l_int, u_int, d_int = 0, 0, 0, 0\n    on_segment = False\n    for seg in segments:\n        if seg.on_segment(Point(x, y)):\n            on_segment = True\n            break\n        if seg.is_intersect(right): r_int += 1\n        if seg.is_intersect(left): l_int += 1\n        if seg.is_intersect(up): u_int += 1\n        if seg.is_intersect(down): d_int += 1\n\n    if on_segment:\n        print(1)\n    elif r_int%2 == 1 or l_int%2 == 1 or u_int%2 == 1 or d_int%2 == 1:\n        print(2)\n    else:\n        print(0)\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n\nimport sys\nimport math\nimport itertools as it\nfrom collections import deque\n\nsys.setrecursionlimit(10000000)\n\ndef in_sec(a, b, c):\n    return min(a, b) <= c <= max(a, b)\n\ng = input()\nlst = []\nfor loop in range(g):\n    x, y = map(int, raw_input().split())\n    lst.append((x, y))\nlst += lst[:1]\n\nn = input()\nfor loop in range(n):\n    x, y = map(int, raw_input().split())\n    flag = False\n    for i in range(g):\n        x1, y1 = lst[i]\n        x2, y2 = lst[i + 1]\n        if (x1 - x) * (y2 - y) == (x2 - x) * (y1 - y) and \\\n            (x1 - x) * (x2 - x) <= 0 and (y1 - y) * (y2 - y) <= 0:\n            print 1\n            flag = True\n            break\n    if flag:\n        continue\n    cnt = 0\n    for i in range(g):\n        x1, y1 = [x + 1, y + 10000000]\n        x2, y2 = lst[i]\n        x3, y3 = lst[i + 1]\n        a1, b1, c1 = [y1 - y, x - x1, x * (y1 - y) - y * (x1 - x)]\n        a2, b2, c2 = [y3 - y2, x2 - x3, x2 * (y3 - y2) - y2 * (x3 - x2)]\n        det = a1 * b2 - b1 * a2\n        if in_sec(x2 * det, x3 * det, c1 * b2 - c2 * b1) \\\n            and in_sec(y2 * det, y3 * det, c2 * a1 - c1 * a2) \\\n            and y < float(c2 * a1 - c1 * a2) / det:\n            cnt += 1\n    print (cnt % 2) * 2\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a: complex, b: complex) -> float:\n    return a.real * b.real + a.imag * b.imag\n\n\ndef cross(a: complex, b: complex) -> float:\n    return a.real * b.imag - a.imag * b.real\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    coordinates = [complex(*map(int, input().split())) for _ in range(n)]\n    pairs = [(p0, p1) for p0, p1\n             in zip(coordinates, coordinates[1:] + [coordinates[0]])]\n    q = int(input())\n\n    for _ in range(q):\n        p = complex(*map(int, input().split()))\n        counter = 0\n        for p0, p1 in pairs:\n            a, b = p0 - p, p1 - p\n            if a.imag > b.imag:\n                a, b = b, a\n            crs = cross(a, b)\n            if a.imag <= 0 and 0 < b.imag and crs < 0:\n                counter += 1\n            if crs == 0 and dot(a, b) <= 0:\n                print(1)\n                break\n        else:\n            print(2 if counter % 2 else 0)\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Vector:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        \n    def __add__(self,other):\n        return Vector(self.x+other.x,self.y+other.y)\n    \n    def __sub__(self,other):\n        return Vector(self.x-other.x,self.y-other.y)\n    \n    def __mul__(self,scalar):\n        return Vector(self.x*scalar,self.y*scalar)\n    def __rmul__(self, scalar):\n        return Vector(self.x*scalar,self.y*scalar)\n    \n   \n    def __repr__(self):\n        return str([self.x,self.y])\n        \n    def norm_2(self):\n        return dot(self,self)\n    \n    def norm(self):\n        return math.sqrt(self.norm_2())\n    \ndef v_sum(v1,v2):\n    return Vector(v1.x+v2.x,v1.y+v2.y) \ndef scalar_multi(k,v):\n    return Vector(k*v.x,k*v.y)\ndef v_diff(v1,v2):\n    return v_sum(v1,scalar_multi(-1,v2))\n    \ndef dot(vector1,vector2):\n    return vector1.x*vector2.x+vector1.y*vector2.y\n\ndef cross(vector1,vector2):\n    return vector1.x*vector2.y-vector1.y*vector2.x\n\ndef is_crossed(p,far_point,s,t):\n    a = far_point-p\n    b = t-s\n    v = s-p\n    w = t-p\n    x = p-s\n    y = far_point-s\n    if cross(a,v)*cross(a,w)<0 and cross(b,x)*cross(b,y)<0:\n        return 0#'crossed on the edge'\n    if cross(b,x) == 0 and 0<=dot(b,x)<=b.norm_2():\n        return 1#'p on segment'\n    if (cross(a,v)== 0 and 0<=dot(a,v)<=a.norm_2()) or (cross(a,w)==0 and 0<=dot(a,w)<=a.norm_2()):\n        return 2#'crossed on the corner'\n    return 3#not crossed\n\ndef polygon_content(point):\n    insec_count = 0\n    \n    \n    far_point = Vector(21001,21011) + point\n    \n    for i in range(n):\n        judge = is_crossed(point,far_point,p[i-1],p[i])\n        if judge==0:\n            insec_count+=1\n        elif judge==1:\n            return 1\n        elif judge==2:\n            insec_count+=0.5\n        \n    if insec_count==0:\n        return 0\n    elif insec_count%2==0:\n            return 0\n    else:\n        return 2\n\nn = int(input())\np = []\nfor i in range(n):\n    x,y = map(int,input().split())\n    p.append(Vector(x,y))\n\nq = int(input())\nfor i in range(q):\n    x,y = map(int,input().split())\n    print(polygon_content(Vector(x,y)))\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\nn = int(input())\nvertices = [complex(*map(int, input().split())) for _ in range(n)]\nedges = [(p0, p1) for p0, p1 in zip(vertices, vertices[1:] + [vertices[0]])]\n\nq = int(input())\nwhile q:\n    q -= 1\n    p = complex(*map(int, input().split()))\n    counter = 0\n    for p0, p1 in edges:\n        a, b = p0 - p, p1 - p\n        if a.imag > b.imag:\n            a, b = b, a\n        crs = cross(a, b)\n        if a.imag <= 0 and 0 < b.imag and crs < 0:\n            counter += 1\n        if crs == 0 and dot(a, b) <= 0:\n            print(1)\n            break\n    else:\n        print(2 if counter % 2 else 0)\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom operator import itemgetter, attrgetter\nfrom itertools import starmap\nimport cmath\nfrom math import isinf, sqrt, acos, atan2\nreadline = sys.stdin.readline\nEPS = 1e-9\nONLINE_FRONT = -2\nCLOCKWISE = -1\nON_SEGMENT = 0\nCOUNTER_CLOCKWISE = 1\nONLINE_BACK = 2\nclass Circle(object):\n    __slots__ = ('c', 'r')\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\nLine = Segment\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\ndef getCrossPoint(s1, s2):\n\tbase = s2.se - s2.fi\n\td1 = abs(cross(base, s1.fi - s2.fi))\n\td2 = abs(cross(base, s1.se - s2.fi))\n\tt = d1 / (d1 + d2)\n\treturn s1.fi + (s1.se - s1.fi) * t\ndef getCrossPointsCL(c, l):\n    pr = project(l, c.c)\n    e = (l.se - l.fi) / abs(l.se - l.fi)\n    base = sqrt(c.r * c.r - norm(pr - c.c))\n    return Segment(*sorted((pr + e * base, pr - e * base)), key=attrgetter('real', 'imag'))\ndef getCrossPointsCC(c1, c2):\n    d = abs(c1.c - c2.c)\n    a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d))\n    t = cmath.phase(c2.c - c1.c)\n    return Segment(*sorted((c1.c + cmath.rect(c1.r, t + a), c1.c + cmath.rect(c1.r, t - a)), key=attrgetter('real', 'imag')))\ndef contains(g, p):\n    n = len(g)\n    x = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS: return 1\n        if a.imag > b.imag: a, b = b, a\n        if a.imag < EPS and EPS < b.imag and cross(a, b) > EPS: x = not x\n    return 2 if x else 0\nn = int(readline())\npg = [0] * n\nfor i in range(n):\n    x, y = map(int, readline().split())\n    pg[i] = complex(x, y)\nq = int(readline())\nfor _ in [0] * q:\n    x, y = map(int, readline().split())\n    print(contains(pg, complex(x, y)))"
  },
  {
    "language": "Python",
    "code": "# https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_3_C\n# 本の説明を図に書き出してみるとよく理解できる。\nfrom math import sqrt\n\n\nclass Vector:\n    def __init__(self, ls):\n        '''\n        ls ... list\n        '''\n        self.vec = ls\n\n    def __len__(self):\n        return len(self.vec)\n\n    def __getitem__(self, idx):\n        return self.vec[idx]\n\n    def __repr__(self):\n        return f'Vector({self.vec})'\n\n    def add(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a + b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def sub(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a - b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def mul(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a * b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def norm(self):\n        tmp = sum([x * x for x in self.vec])\n        return sqrt(tmp)\n\n\ndef norm(vec):\n    '''\n    vec ... Vector class\n    '''\n    return vec.norm()\n\n\ndef cross(a, b):\n    '''\n    Outer product for 2d\n    a,b ... Vector class\n    '''\n    assert len(a) == 2 and len(b) == 2\n    first = a[0] * b[1]\n    second = a[1] * b[0]\n    return first - second\n\n\ndef dot(a, b):\n    return sum(a.mul(b))\n\n\nEPS = 1e-10\n\n\ndef contains(G, p):\n    '''\n    Gは多角形を表すリストで、今回ならばvectorが中に並んでいることとする\n    pは内容しているか判別したい点で、Vectorで表す\n\n    pが多角形Gの辺上にあれば1\n    pが多角形Gに内包されていれば2\n    それ以外は0をreturnする\n    '''\n    is_contain = False  # 内包してるか\n    for i in range(len(G)):\n        a = G[i].sub(p)\n        b = G[(i + 1) % len(G)].sub(p)  # i+1が0に戻るようにこのような形式にしている。\n        # もしpがG[i]とG[i+1]の線分上にある場合は即座に1をreturnします\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            # 外積が0→a,bが同一直線上\n            # かつ 内積が負→a,bは逆を向いている\n            # ならばpは線分上に存在する\n            return 1\n        # 内包を判定する。前処理として、yの座標によってa,bを入れ替える\n        if a[1] > b[1]:  # aの方のy座標を小さくしたい\n            a, b = b, a\n        if a[1] < EPS and b[1] > EPS and cross(a, b) > EPS:  # 実際に判別する\n            is_contain = (not is_contain)\n    return (0, 2)[is_contain]  # 書き方キモいけど三項演算子の短い書き方\n\n\n# load data\nN = int(input())\nG = []\nfor _ in range(N):\n    g = Vector(list(map(int, input().split())))\n    G.append(g)\n\n# answer query\nQ = int(input())\nfor _ in range(Q):\n    p = Vector(list(map(int, input().split())))\n    print(contains(G, p))\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n4\n0 0\n3 1\n2 3\n0 3\n3\n2 1\n0 2\n3 2\n\noutput:\n2\n1\n0\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef check_contains(g, p):\n    flag = False\n    for j in range(edges):\n        a, b = g[j] - p, g[(j + 1) % edges] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        elif a.imag > b.imag:\n            a, b = b, a\n\n        if a.imag < EPS < b.imag and cross(a, b) > EPS:\n            flag = not flag\n    return 2 if flag else 0\n\n\ndef solve(_p_info):\n    for point in _p_info:\n        px, py = map(int, point)\n        p = px + py * 1j\n        print(check_contains(polygon, p))\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    edges = int(_input[0])\n    e_info = map(lambda x: x.split(), _input[1:edges + 1])\n    points = int(_input[edges + 1])\n    p_info = map(lambda x: x.split(), _input[edges + 2:])\n\n    polygon = [int(x) + int(y) * 1j for x, y in e_info]\n    solve(p_info)"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem CGL_3_C: Polygon-Point-Containment\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef cross_product_test(A, B, C):\n    if A[1] == B[1] == C[1]:\n        if B[0] <= A[0] <= C[0] or C[0] <= A[0] <= B[0]:\n            return 0\n        else:\n            return 1\n    if B[1] > C[1]:\n        B, C = C[:], B[:]\n    if A[1] == B[1] and A[0] == B[0]:\n        return 0\n    if A[1] <= B[1] or A[1] > C[1]:\n        return 1\n    delta = (B[0] - A[0]) * (C[1] - A[1]) - (B[1] - A[1]) * (C[0] - A[0])\n    if delta > 0:\n        return -1\n    elif delta < 0:\n        return 1\n    else:\n        return 0\n\ndef point_in_polygon(polygon, point):\n    t = -1\n    polygon.append(polygon[0])\n    for i in range(len(polygon) - 1):\n        t *= cross_product_test(point, polygon[i], polygon[i+1])\n    return t\n\nN = int(input())\nP = [[int(_) for _ in input().split()] for __ in range(N)]\nQ = int(input())\nfor q in range(Q):\n    x, y = [int(_) for _ in input().split()]\n    print(point_in_polygon(P, [x, y]) + 1)"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\ndef equals(a, b):\n    return abs(a - b) < EPS\n\n\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __add__(self, p):\n        return Point(self.x + p.x, self.y + p.y)\n\n    def __sub__(self, p):\n        return Point(self.x - p.x, self.y - p.y)\n\n    def __mul__(self, a):\n        return Point(self.x * a, self.y * a)\n\n    def __rmul__(self, a):\n        return self * a\n\n    def __truediv__(self, a):\n        return Point(self.x / a, self.y / a)\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __lt__(self, p):\n        if self.x != p.x:\n            return self. x < p.x\n        else:\n            return self.y < p.y\n\n    def __eq__(self, p):\n        return equals(self.x, p.x) and equals(self.y, p.y)\n\n\ndef dot(a, b):\n    return a.x * b.x + a.y * b.y\n\n\ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n\n\ndef contains(g, p):\n    n = len(g)\n    isIn = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        if a.y > b.y:\n            a, b = b, a\n        if a.y < EPS and EPS < b.y and cross(a, b) > EPS:\n            isIn = not isIn\n    if isIn:\n        return 2\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    n = int(input())\n    g = []\n    for i in range(n):\n        x, y =  [int(v) for v in input().split()]\n        g.append(Point(x, y))\n\n    q = int(input())\n    ans = []\n    for i in range(q):\n        x, y =  [int(v) for v in input().split()]\n        ans.append(contains(g, Point(x, y)))\n\n    for v in ans:\n        print(v)\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple, Optional, Generator\nfrom math import sqrt, sin, cos, acos, atan2\nfrom enum import IntEnum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(IntEnum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = -1\n    ONLINE_BACK = 2\n    ONLINE_FRONT = -2\n    ON_SEGMENT = 0\n\n    def is_online(self):\n        return self in [PointLocation.ON_SEGMENT,\n                        PointLocation.ONLINE_BACK,\n                        PointLocation.ONLINE_FRONT]\n\n\nclass Containment(IntEnum):\n    OUTSIDE = 0\n    ONLINE = 1\n    INSIDE = 2\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    @staticmethod\n    def polar(a: float, r: float) -> 'Point':\n        return Point(a * cos(r), a * sin(r))\n\n    def arg(self) -> float:\n        return atan2(self.y, self.x)\n\n    def norm(self) -> float:\n        return self.x * self.x + self.y * self.y\n\n    def abs(self) -> float:\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if d > EPS:\n            return PointLocation.COUNTER_CLOCKWISE\n        if d < -EPS:\n            return PointLocation.CLOCKWISE\n        if seg.vector().dot(p) < 0.0:\n            return PointLocation.ONLINE_BACK\n        if seg.vector().norm() < p.norm():\n            return PointLocation.ONLINE_FRONT\n        return PointLocation.ON_SEGMENT\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self,\n                 p1: Optional[Point] = None,\n                 p2: Optional[Point] = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersects(self, other: 'Segment') -> bool:\n        d0: PointLocation = self.p1.location(other)\n        d1: PointLocation = self.p2.location(other)\n        d2: PointLocation = other.p1.location(self)\n        d3: PointLocation = other.p2.location(self)\n        return d0 * d1 * d2 * d3 == 0 or \\\n            (d0 * d1 == -1 and d2 * d3 == -1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        return self.p1 + s * a\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self,\n                 c: Optional[Point] = None,\n                 r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\n    def cross_point_line(self, line: Line) -> List[Point]:\n        proj = line.projection(self.c)\n        dist = self.c.distance_to_line(line)\n        tan = sqrt(self.r * self.r - dist * dist)\n        u = line.vector() / line.vector().abs()\n        return sorted([proj - tan * u, proj + tan * u])\n\n    def cross_point_circle(self, other: 'Circle') -> List[Point]:\n        d = (other.c - self.c).abs()\n        r1 = self.r\n        r2 = other.r\n        a = acos((r1 * r1 + d * d - r2 * r2) / (2 * r1 * d))\n        t = (other.c - self.c).arg()\n        return sorted([self.c + Vector.polar(self.r, t + a),\n                       self.c + Vector.polar(self.r, t - a)])\n\n\nclass Polygon:\n    def __init__(self, vertices: List[Point]) -> None:\n        self.vertices = vertices\n        self.n = len(vertices)\n\n    def sides(self) -> Generator[Segment, None, None]:\n        for i in range(self.n):\n            yield Segment(self.vertices[i],\n                          self.vertices[(i + 1) % self.n])\n\n    def my_contains(self, p: Point) -> Containment:\n        ps = Segment(p, Point(100000.0, p.y))\n        count = 0\n\n        prev_l = self.vertices[0].location(ps)\n        if prev_l.is_online():\n            prev_l = self.vertices[-1].location(ps)\n\n        for s in self.sides():\n            if p.location(s) == PointLocation.ON_SEGMENT:\n                return Containment.ONLINE\n            cur_l = s.p2.location(ps)\n            if cur_l.is_online() or prev_l == cur_l:\n                continue\n            if ps.intersects(s):\n                count += 1\n            prev_l = cur_l\n\n        return Containment.OUTSIDE if count % 2 == 0 \\\n            else Containment.INSIDE\n\n    def contains(self, p: Point) -> Containment:\n        ps = Segment(p, Point(100000.0, p.y))\n        count = 0\n\n        for s in self.sides():\n            if p.location(s) == PointLocation.ON_SEGMENT:\n                return Containment.ONLINE\n            if s.p1.y > s.p2.y:\n                s = s.reverse()\n            l1 = s.p1.location(ps)\n            l2 = s.p2.location(ps)\n            if l1 != PointLocation.COUNTER_CLOCKWISE and \\\n                l2 == PointLocation.COUNTER_CLOCKWISE and \\\n                ps.intersects(s):\n                count += 1\n\n        return Containment.OUTSIDE if count % 2 == 0 \\\n            else Containment.INSIDE\n\ndef main() -> None:\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = [int(x) for x in input().split()]\n        points.append(Point(x, y))\n    polygon = Polygon(points)\n\n    q = int(input())\n    for _ in range(q):\n        x, y = [int(x) for x in input().split()]\n        print(int(polygon.contains(Point(x, y))))\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/python\nimport sys\nif sys.version_info[0]>=3: raw_input=input\n\ncross=lambda a,b: (a.conjugate()*b).imag\ndot=lambda a,b: (a.conjugate()*b).real\n\ndef solve(poly, p):\n\tf=False\n\tfor i in range(len(poly)):\n\t\ta=poly[i]-p\n\t\tb=poly[(i+1)%len(poly)]-p\n\t\tif a.imag>b.imag: a,b=b,a\n\t\tif a.imag<=0 and 0<b.imag and cross(a,b)<0: f=not f\n\t\tif cross(a,b)==0 and dot(a,b)<=0: return 1\n\treturn 2 if f else 0\n\ncheckio=lambda data: solve([complex(*e) for e in data[0]],complex(*data[1]))\n\nn=int(raw_input())\npoly=[[float(e) for e in raw_input().split()] for i in range(n)]\nn=int(raw_input())\ntry:\n\tfor i in range(n):\n\t\tprint(checkio([poly,[float(e) for e in raw_input().split()]]))\nexcept EOFError:\n\tpass"
  },
  {
    "language": "Python",
    "code": "n = input()\np = [map(int, raw_input().split()) for i in xrange(n)]\nfor t in xrange(input()):\n    x, y = map(int, raw_input().split())\n    cnt = 0\n    online = 0\n    for i in xrange(n):\n        x0 = p[i-1][0] - x\n        y0 = p[i-1][1] - y\n        x1 = p[i][0] - x\n        y1 = p[i][1] - y\n        #print \"a\", x0, y0, x1, y1\n        if x0*(y1 - y0) == y0*(x1 - x0):\n            online = 1\n            break\n        if (y0*y1 < 0 or (y0==0 and y1!=0)) and x0 - y0*(x1-x0)/float(y1-y0) > 0:\n            #print y0*y1, x0 - float(y0*(x1-x0))/(y1-y0)\n            cnt += 1\n    if online:\n        print 1\n    elif cnt % 2:\n        print 2\n    else:\n        print 0"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom operator import itemgetter, attrgetter\nfrom itertools import starmap\nimport cmath\nfrom math import isinf, sqrt, acos, atan2\nreadline = sys.stdin.readline\nEPS = 1e-9\nONLINE_FRONT = -2\nCLOCKWISE = -1\nON_SEGMENT = 0\nCOUNTER_CLOCKWISE = 1\nONLINE_BACK = 2\nclass Circle(object):\n    __slots__ = ('c', 'r')\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\nLine = Segment\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\ndef getCrossPoint(s1, s2):\n\tbase = s2.se - s2.fi\n\td1 = abs(cross(base, s1.fi - s2.fi))\n\td2 = abs(cross(base, s1.se - s2.fi))\n\tt = d1 / (d1 + d2)\n\treturn s1.fi + (s1.se - s1.fi) * t\ndef getCrossPointsCL(c, l):\n    pr = project(l, c.c)\n    e = (l.se - l.fi) / abs(l.se - l.fi)\n    base = sqrt(c.r * c.r - norm(pr - c.c))\n    return Segment(*sorted((pr + e * base, pr - e * base)), key=attrgetter('real', 'imag'))\ndef getCrossPointsCC(c1, c2):\n    d = abs(c1.c - c2.c)\n    a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d))\n    t = cmath.phase(c2.c - c1.c)\n    return Segment(*sorted((c1.c + cmath.rect(c1.r, t + a), c1.c + cmath.rect(c1.r, t - a)), key=attrgetter('real', 'imag')))\ndef contains(g, p):\n    n = len(g)\n    x = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS: return 1\n        if a.imag > b.imag: a, b = b, a\n        if a.imag < EPS and EPS < b.imag and cross(a, b) > EPS: x = not x\n    return 2 if x else 0\nn = int(readline())\npg = tuple(complex(*map(int, readline().split())) for _ in [0] * n)\nq = int(readline())\nfor _ in [0] * q:\n    print(contains(pg, complex(*map(int, readline().split()))))"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n4\n0 0\n3 1\n2 3\n0 3\n3\n2 1\n0 2\n3 2\n\noutput:\n2\n1\n0\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\ndef generate_polygon(_e_info):\n    for edge in _e_info:\n        ex, ey = map(int, edge)\n        init_polygon.append(ex + ey * 1j)\n\n    return init_polygon\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef check_contains(g, p):\n    flag = False\n    for j in range(edges):\n        a, b = g[j] - p, g[(j + 1) % edges] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        elif a.imag > b.imag:\n            a, b = b, a\n\n        if a.imag < EPS < b.imag and cross(a, b) > EPS:\n            flag = not flag\n    return 2 if flag else 0\n\n\ndef solve(_p_info):\n    for point in _p_info:\n        px, py = map(int, point)\n        p = px + py * 1j\n        print(check_contains(polygon, p))\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    edges = int(_input[0])\n    e_info = map(lambda x: x.split(), _input[1:edges + 1])\n    points = int(_input[edges + 1])\n    p_info = map(lambda x: x.split(), _input[edges + 2:])\n\n    init_polygon = list()\n    polygon = generate_polygon(e_info)\n    solve(p_info)"
  },
  {
    "language": "Python",
    "code": "def dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef string_to_complex(s):\n    x, y = map(int, s.split())\n    return x + y * 1j\n\ndef contains(polygon, point):\n    flag = False\n    for v1, v2 in zip(polygon[0:], polygon[1:]):\n        a = v1 - point\n        b = v2 - point\n        if a.imag > b.imag:\n            a, b = b, a\n        cross_ab = cross(a, b)\n        if cross_ab == 0 and dot(a, b) <= 0:\n            return 1\n        if a.imag <= 0 and b.imag > 0 and cross_ab > 0:\n            flag = not flag\n    if flag:\n        return 2\n    else:\n        return 0\n\nimport sys\n\nfile_input = sys.stdin\n\nn = int(file_input.readline())\n\npolygon = [string_to_complex(file_input.readline()) for i in range(n)]\npolygon.append(polygon[0])\n\nq = int(file_input.readline())\n\nfor line in file_input:\n    t = string_to_complex(line)\n    print(contains(polygon, t))"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def inner_product(self, vec):\n        return self.x*vec.x + self.y*vec.y\n\n    def outer_product(self, vec):\n        return self.x*vec.y - self.y*vec.x\n\n    def norm(self):\n        return math.sqrt(self.x**2 + self.y**2)\n\n    def polar(self):\n        r = self.norm()\n        theta = math.atan2(self.y, self.x)\n        return r, theta\n\n\nclass Segment():\n    def __init__(self, p1=None, p2=None):\n        self.p1 = p1\n        self.p2 = p2\n\n    def is_intersect(self, seg):\n        a = (seg.p1.x - seg.p2.x) * (self.p1.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p1.x)\n        b = (seg.p1.x - seg.p2.x) * (self.p2.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p2.x)\n        c = (self.p1.x - self.p2.x) * (seg.p1.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p1.x)\n        d = (self.p1.x - self.p2.x) * (seg.p2.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p2.x)\n        e = (self.p1.x - seg.p1.x)*(self.p2.x - seg.p2.x)\n        f = (self.p1.x - seg.p2.x)*(self.p2.x - seg.p1.x)\n        g = (self.p1.y - seg.p1.y)*(self.p2.y - seg.p2.y)\n        h = (self.p1.y - seg.p2.y)*(self.p2.y - seg.p1.y)\n        return a*b <= 0 and c*d <= 0 and (e <= 0 or f <= 0) and (g <= 0 or h <= 0)\n\n    def on_segment(self, pnt):\n        if self.p1 == pnt or self.p2 == pnt: return True\n        a, b = Vector(self.p2.x - self.p1.x, self.p2.y - self.p1.y), Vector(pnt.x - self.p1.x, pnt.y - self.p1.y)\n        a_r, a_theta = a.polar()\n        b_r, b_theta = b.polar()\n        if a_theta == b_theta:\n            if 0 < b_r/a_r and b_r/a_r < 1:\n                return True\n        return False\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = list(map(int, input().split(' ')))\n    points.append(Point(x, y))\npoints.append(points[0])\nsegments = [Segment(points[i], points[i+1]) for i in range(n)]\n\nq = int(input())\nfor i in range(q):\n    x, y = list(map(int, input().split(' ')))\n    right, left = Segment(Point(x, y), Point(10001, y)), Segment(Point(x, y), Point(-10001, y))\n    up, down = Segment(Point(x, y), Point(x, 10001)), Segment(Point(x, y), Point(x, -10001))\n    r_int, l_int, u_int, d_int = 0, 0, 0, 0\n    on_segment = False\n    for seg in segments:\n        if seg.on_segment(Point(x, y)):\n            on_segment = True\n            break\n        if seg.is_intersect(right): r_int += 1\n        if seg.is_intersect(left): l_int += 1\n        if seg.is_intersect(up): u_int += 1\n        if seg.is_intersect(down): d_int += 1\n\n    if on_segment:\n        print(1)\n    elif r_int%2 == 1 or l_int%2 == 1 or u_int%2 == 1 or d_int%2 == 1:\n        print(2)\n    else:\n        print(0)\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef eq(a, b):\n    return abs(a - b) < 1e-10\n\n\ndef on_line(p, s, e):\n    d = dot(p - s, e - s)\n    c = cross(p - s, e - s)\n    if c == 0 and 0 <= d <= abs(e - s) ** 2:\n        return True\n    return False\n\n\ndef on_polygon_line(xy, p):\n    for i in range(len(p)):\n        j = i - 1\n        if on_line(xy, p[i], p[j]):\n            return True\n    return False\n\n\ndef in_polygon(xy, p):\n    wn = 0\n    for i in range(len(p)):\n        j = i - 1\n        if 0 == (p[i] - p[j]).imag:\n            continue\n        vt = (xy - p[j]).imag / (p[i] - p[j]).imag\n        tmp = p[i] + vt * (p[i] - p[j])\n        if xy.real < tmp.real:\n            wn += 1 if p[j].imag < xy.imag <= p[i].imag else\\\n                 -1 if p[i].imag < xy.imag <= p[j].imag else 0\n    return wn\n\nn = int(readline())\np = [map(int, readline().split()) for _ in range(n)]\np = [x + y * 1j for x, y in p]\n\nq = int(readline())\nfor _ in range(q):\n    x, y = map(int, readline().split())\n    xy = x + y * 1j\n    print(1 if on_polygon_line(xy, p) else 2 if in_polygon(xy, p) else 0)"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nvec = []\nfor i in range(n):\n    vec += [list(map(int, input().split()))]\nvec += [vec[0]]\n \ndef cross(a, b):\n    return a[0]*b[1]-a[1]*b[0]\ndef ab(a, b):\n    c = (b[0]-a[0],b[1]-a[1])\n    return c\ndef dot(a, b):\n    n = len(a)\n    if n != len(b):\n        return None\n    ans = 0\n    for i, j in zip(a, b):\n        ans += i*j\n    return ans\n\ndef check(a, b):\n    if abs(cross(a, b)) < pow(10,-8) and dot(a,b)<pow(10,-8):\n        return 1\n    else:\n        return 0\n    \ndef contain():\n    x = 0\n    p = list(map(int, input().split()))\n    for a,b in zip(vec[:-1],vec[1:]):\n        a = ab(p,a)\n        b = ab(p,b)\n        if check(a, b) == 1:\n            print(1)\n            return \n        if a[1] > b[1]:\n            a, b = b, a\n        if a[1] < pow(10,-8) and b[1] > pow(10,-8) and cross(a, b) > 0:\n            x += 1 \n        \n    if x%2==1:print(2)\n    else:print(0)\nk = int(input()) \nfor i in range(k):\n    contain()\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom operator import itemgetter, attrgetter\nfrom itertools import starmap\nimport cmath\nfrom math import isinf, sqrt, acos, atan2\nreadline = sys.stdin.readline\nEPS = 1e-9\nONLINE_FRONT = -2\nCLOCKWISE = -1\nON_SEGMENT = 0\nCOUNTER_CLOCKWISE = 1\nONLINE_BACK = 2\nclass Circle(object):\n    __slots__ = ('c', 'r')\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\nLine = Segment\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\ndef getCrossPoint(s1, s2):\n\tbase = s2.se - s2.fi\n\td1 = abs(cross(base, s1.fi - s2.fi))\n\td2 = abs(cross(base, s1.se - s2.fi))\n\tt = d1 / (d1 + d2)\n\treturn s1.fi + (s1.se - s1.fi) * t\ndef getCrossPointsCL(c, l):\n    pr = project(l, c.c)\n    e = (l.se - l.fi) / abs(l.se - l.fi)\n    base = sqrt(c.r * c.r - norm(pr - c.c))\n    return Segment(*sorted((pr + e * base, pr - e * base)), key=attrgetter('real', 'imag'))\ndef getCrossPointsCC(c1, c2):\n    d = abs(c1.c - c2.c)\n    a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d))\n    t = cmath.phase(c2.c - c1.c)\n    return Segment(*sorted((c1.c + cmath.rect(c1.r, t + a), c1.c + cmath.rect(c1.r, t - a)), key=attrgetter('real', 'imag')))\ndef contains(g, p):\n    n = len(g)\n    x = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS: return 1\n        if a.imag > b.imag: a, b = b, a\n        if a.imag < EPS and EPS < b.imag and cross(a, b) > EPS: x = not x\n    return 2 if x else 0\nn = int(readline())\npg = tuple(complex(*map(int, readline().split())) for _ in [0] * n)\nq = int(readline())\nfor _ in [0] * q:\n    print(contains(pg, complex(*map(float, readline().split()))))"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, pnt):\n        if self.x == pnt.x and self.y == pnt.y: return True\n        return False\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def inner_product(self, vec):\n        return self.x*vec.x + self.y*vec.y\n\n    def outer_product(self, vec):\n        return self.x*vec.y - self.y*vec.x\n\n    def norm(self):\n        return math.sqrt(self.x**2 + self.y**2)\n\n    def polar(self):\n        r = self.norm()\n        theta = math.atan2(self.y, self.x)\n        return r, theta\n\n\nclass Segment():\n    def __init__(self, p1=None, p2=None):\n        self.p1 = p1\n        self.p2 = p2\n\n    def is_intersect(self, seg):\n        a = (seg.p1.x - seg.p2.x) * (self.p1.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p1.x)\n        b = (seg.p1.x - seg.p2.x) * (self.p2.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p2.x)\n        c = (self.p1.x - self.p2.x) * (seg.p1.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p1.x)\n        d = (self.p1.x - self.p2.x) * (seg.p2.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p2.x)\n        e = (self.p1.x - seg.p1.x)*(self.p2.x - seg.p2.x)\n        f = (self.p1.x - seg.p2.x)*(self.p2.x - seg.p1.x)\n        g = (self.p1.y - seg.p1.y)*(self.p2.y - seg.p2.y)\n        h = (self.p1.y - seg.p2.y)*(self.p2.y - seg.p1.y)\n        return a*b <= 0 and c*d <= 0 and (e <= 0 or f <= 0) and (g <= 0 or h <= 0)\n\n    def on_segment(self, pnt):\n        if self.p1 == pnt or self.p2 == pnt:\n            return True\n        a, b = Vector(self.p2.x - self.p1.x, self.p2.y - self.p1.y), Vector(pnt.x - self.p1.x, pnt.y - self.p1.y)\n        a_r, a_theta = a.polar()\n        b_r, b_theta = b.polar()\n        if a_theta == b_theta:\n            if 0 < b_r/a_r and b_r/a_r < 1:\n                return True\n        return False\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = list(map(int, input().split(' ')))\n    points.append(Point(x, y))\npoints.append(points[0])\nsegments = [Segment(points[i], points[i+1]) for i in range(n)]\n\nq = int(input())\nfor i in range(q):\n    x, y = list(map(int, input().split(' ')))\n    right, left = Segment(Point(x, y), Point(10001, y)), Segment(Point(x, y), Point(-10001, y))\n    up, down = Segment(Point(x, y), Point(x, 10001)), Segment(Point(x, y), Point(x, -10001))\n    r_int, l_int, u_int, d_int = 0, 0, 0, 0\n    on_segment = False\n    for seg in segments:\n        if seg.on_segment(Point(x, y)):\n            on_segment = True\n            break\n        if seg.is_intersect(right): r_int += 1\n        if seg.is_intersect(left): l_int += 1\n        if seg.is_intersect(up): u_int += 1\n        if seg.is_intersect(down): d_int += 1\n\n    if on_segment:\n        print(1)\n    elif (r_int%2 == 1 or l_int%2 == 1) and (u_int%2 == 1 or d_int%2 == 1):\n        print(2)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef string_to_complex(s):\n    x, y = map(int, s.split())\n    return x + y * 1j\n\ndef contains(polygon, point):\n    flag = False\n    up = False\n    down = False\n    for v1, v2 in zip(polygon[0:], polygon[1:]):\n        a = v1 - point\n        b = v2 - point\n        if cross(a, b) == 0 and dot(a, b) <= 0:\n            return 1\n        if a.imag < b.imag:\n            if a.imag < 0 and b.imag > 0 and cross(a, b) > 0:\n                flag = not flag\n            elif a.imag == 0 and up:\n                flag = not flag\n            up = True\n            down = False\n        elif a.imag > b.imag:\n            if a.imag > 0 and b.imag < 0 and cross(a, b) < 0:\n                flag = not flag\n            elif a.imag == 0 and down:\n                flag = not flag\n            up = False\n            down = True\n    if flag:\n        return 2\n    else:\n        return 0\n\nimport sys\n\nfile_input = sys.stdin\n\nn = int(file_input.readline())\n\npolygon = [string_to_complex(file_input.readline()) for i in range(n)]\npolygon.append(polygon[0])\npolygon.append(polygon[1])\n\nq = int(file_input.readline())\n\nfor line in file_input:\n    t = string_to_complex(line)\n    print(contains(polygon, t))"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\n# Your code here!\n\n# coding: utf-8\n# Your code here!\nimport math\n\nEPS = 0.0000000001\n\nCOUNTER_CLOCKWISE = 1\nCLOCKWISE = -1\nONLINE_BACK = 2\nONLINE_FRONT = -2\nON_SEGMENT = 0\n\nIN = 2\nON = 1\nOUT = 0\n\nclass Point:\n    \n    global EPS\n    \n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n        \n        \n    def __add__(a, b):\n        s = a.x + b.x\n        t = a.y + b.y\n        return Point(s, t)\n        \n    def __sub__(a, b):\n        s = a.x - b.x\n        t = a.y - b.y\n        return Point(s, t)\n            \n    def __mul__(self, a):\n        s = a * self.x\n        t = a * self.y\n        return Point(s, t)\n        \n    def __truediv__(self, a):\n        s = self.x / a\n        t = self.y / a\n        return Point(s, t)\n            \n            \n            \n            \n    def norm(self):\n        return self.x * self.x + self.y * self.y\n        \n    def abs(self):\n        return self.norm() ** 0.5\n            \n    \n            \n            \n    def __eq__(self, other):\n        return abs(self.x - other.y) < self.EPS and abs(self.y - other.y) < self.EPS\n            \n            \n            \n    def dot(self, b):\n        return self.x * b.x + self.y * b.y\n        \n    def cross(self, b):\n        return self.x * b.y - self.y * b.x\n    \n    \nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Circle:\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\ndef project(s, p):\n    base = s.p2 - s.p1\n    hypo = p - s.p1\n    r = hypo.dot(base) / base.norm()\n    return s.p1 + base * r\n\ndef reflecton(s, p):\n    return p + (project(s,p) - p) * 2\n\n\ndef getDistance(a, b):\n    return (a-b).abs()\n\ndef getDistanceLP(l, p):\n    return abs((l.p2-l.p1).cross(p-l.p1)) / ((l.p2-l.p1).abs())\n\ndef getDistanceSP(s, p):\n    if (s.p2 - s.p1).dot(p-s.p1) < 0:\n        return (p-s.p1).abs()\n    elif (s.p1 - s.p2).dot(p-s.p2) < 0:\n        return (p-s.p2).abs()\n    return getDistanceLP(s,p)\n\n\ndef getDistanceSS(s1, s2):\n    if intersectS(s1, s2):\n        return 0\n    return min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\n\n\ndef ccw(p0, p1, p2):\n    a = p1-p0\n    b = p2-p0\n    \n    if a.cross(b) > 0:\n        return COUNTER_CLOCKWISE\n    elif a.cross(b) <0:\n        return CLOCKWISE\n    elif a.dot(b) < 0:\n        return ONLINE_BACK\n    elif a.abs() < b.abs():\n        return ONLINE_FRONT\n    else:\n        return ON_SEGMENT\n\ndef intersect(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) *ccw(p1, p2, p4) <=0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\ndef intersectS(s1, s2):\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n\n\ndef getCrossPoint(s1, s2):\n    base = s2.p2-s2.p1\n    a = s1.p1-s2.p1\n    b = s1.p2-s2.p1\n    \n    d1 = abs(a.cross(base))\n    d2 = abs(b.cross(base))\n    \n    t = d1 / (d1+d2)\n    return s1.p1 + (s1.p2-s1.p1) * t\n\n\ndef getCrossPointC(c, l):\n    pr = project(l, c.c)\n    e = (l.p2-l.p1) / (l.p2-l.p1).abs()\n    base = (c.r *c.r  - (pr - c.c).norm()) ** 0.5\n    return pr - e * base, pr + e * base\n\ndef printPoint(p1, p2):\n    print(round(p1.x, 8), round(p1.y, 8), round(p2.x, 8), round(p2.y, 8))\n\n\ndef arg(p):\n    return math.atan2(p.y ,p.x)\n\ndef polar(a, r):\n    return Point(a * math.cos(r), a * math.sin(r))\n\ndef getCrossPointCC(c1, c2):\n    d = (c2.c - c1.c).abs()\n    a = math.acos((c1.r * c1.r + d*d - c2.r*c2.r) / (2*c1.r*d))\n    b = arg(c2.c-c1.c)\n    return c1.c + polar(c1.r, b+a), c1.c + polar(c1.r, b-a)\n\n\ndef contains(g, p):\n    n = len(g)\n    flg = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i+1)%n] - p\n        if abs(a.cross(b)) < EPS and a.dot(b) < EPS:\n            return ON\n        if a.y > b.y:\n            a,b = b,a\n        if a.y < EPS and EPS < b.y and a.cross(b) > EPS:\n            flg = not flg\n        \n    if flg:\n        return IN\n    else:\n        return OUT\n\n\n\n\nn = int(input())\ng = []\nfor i in range(n):\n    nums=list(map(int,input().split()))\n    g.append(Point(nums[0], nums[1]))\n\nq = int(input())\nfor i in range(q):\n    nums=list(map(int,input().split()))\n    p = Point(nums[0], nums[1])\n    result = contains(g, p)\n    print(result)\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nif sys.version_info[0]>=3: raw_input=input\n\ncross=lambda a,b: (a.conjugate()*b).imag\ndot=lambda a,b: (a.conjugate()*b).real\n\ndef solve(poly, p):\n\tf=False\n\tfor i in range(len(poly)):\n\t\ta=poly[i]-p\n\t\tb=poly[(i+1)%len(poly)]-p\n\t\tif a.imag>b.imag: a,b=b,a\n\t\tif a.imag<=0 and 0<b.imag and cross(a,b)<0: f=not f\n\t\tif cross(a,b)==0 and dot(a,b)<=0: return 1\n\treturn 2 if f else 0\n\ncheckio=lambda data: solve([complex(*e) for e in data[0]],complex(*data[1]))\n\nn=int(raw_input())\npoly=[[float(e) for e in raw_input().split()] for i in range(n)]\nn=int(raw_input())\ntry:\n\tfor i in range(n):\n\t\tprint(checkio([poly,[float(e) for e in raw_input().split()]]))\nexcept EOFError:\n\tpass\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nif sys.version_info[0]>=3: raw_input=input\n\ncross=lambda a,b: (a.conjugate()*b).imag\ndot=lambda a,b: (a.conjugate()*b).real\n\ndef solve(poly, p):\n\tf=False\n\tfor i in range(len(poly)):\n\t\ta=poly[i]-p\n\t\tb=poly[(i+1)%len(poly)]-p\n\t\tif a.imag>b.imag: a,b=b,a\n\t\tif a.imag<=0 and 0<b.imag and cross(a,b)<0: f=not f\n\t\tif cross(a,b)==0 and dot(a,b)<=0: return 1\n\treturn 2 if f else 0\n\ncheckio=lambda data: solve([complex(*e) for e in data[0]],complex(*data[1]))\n\nn=int(raw_input())\npoly=[[float(e) for e in raw_input().split()] for i in range(n)]\nn=int(raw_input())\ntry:\n\tfor i in range(n):\n\t\tprint(checkio([poly,[float(e) for e in raw_input().split()]]))\nexcept EOFError:\n\tpass"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n4\n0 0\n3 1\n2 3\n0 3\n3\n2 1\n0 2\n3 2\n\noutput:\n2\n1\n0\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef check_contains(g, p):\n    flag = False\n    for j in range(edges):\n        a, b = g[j] - p, g[(j + 1) % edges] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        elif a.imag > b.imag:\n            a, b = b, a\n\n        if a.imag < EPS < b.imag and cross(a, b) > EPS:\n            flag = not flag\n    return 2 if flag else 0\n\n\ndef solve(_p_info):\n    for point in _p_info:\n        px, py = map(float, point)\n        p = px + py * 1j\n        print(check_contains(polygon, p))\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    edges = int(_input[0])\n    e_info = map(lambda x: x.split(), _input[1:edges + 1])\n    points = int(_input[edges + 1])\n    p_info = map(lambda x: x.split(), _input[edges + 2:])\n\n    polygon = [float(x) + float(y) * 1j for x, y in e_info]\n    solve(p_info)"
  },
  {
    "language": "Python",
    "code": "def inside_polygon(p0, qs):\n    cnt = 0\n    L = len(qs)\n    x, y = p0\n    for i in range(L):\n        x0, y0 = qs[i-1]; x1, y1 = qs[i]\n        x0 -= x; y0 -= y\n        x1 -= x; y1 -= y\n\n        cv = x0*x1 + y0*y1\n        sv = x0*y1 - x1*y0\n        if sv == 0 and cv <= 0:\n            return 1\n\n        if not y0 < y1:\n            x0, x1 = x1, x0\n            y0, y1 = y1, y0\n\n        if y0 <= 0 < y1 and x0*(y1 - y0) > y0*(x1 - x0):\n            cnt += 1\n    return 2 if cnt % 2 == 1 else 0\n\ndef solve():\n    N = int(input())\n    qs = [list(map(int, input().split())) for i in range(N)]\n\n    Q = int(input())\n    for i in range(Q):\n        *p0, = map(int, input().split())\n        print(inside_polygon(p0, qs))\nsolve()\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef cross(a,b):\n  return a.real * b.imag - a.imag * b.real\n\nn=int(input())\nvs=[complex(*map(int,input().split())) for i in range(n)]\nedges=[(p0,p1) for p0,p1 in zip(vs,vs[1:]+[vs[0]])]\n\nq=int(input())\n\nwhile q:\n  q -= 1\n  p = complex(*map(int,input().split()))\n  count=0\n  for p0,p1 in edges:\n    a=p0-p\n    b=p1-p\n    if a.imag>b.imag:\n      a,b=b,a\n    crs=cross(a,b)\n    if a.imag <= 0 and 0 < b.imag and crs < 0:\n      count+=1\n    if crs == 0 and dot(a,b) <= 0:\n      print(1)\n      break\n  else:\n    print(2 if count %2 else 0)\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\nn = int(input())\nvertices = [complex(*map(int, input().split())) for _ in range(n)]\nedges = [(p0, p1, p1 - p0) for p0, p1 in zip(vertices, vertices[1:] + [vertices[0]])]\n\nq = int(input())\nwhile q:\n    q -= 1\n    p = complex(*map(int, input().split()))\n    counter = 0\n    for p0, p1, edge in edges:\n        a, b = p0 - p, p1 - p\n        if a.imag > b.imag:\n            a, b = b, a\n        crs = cross(a, b)\n        if a.imag <= 0 and 0 < b.imag and crs < 0:\n            counter += 1\n        if crs == 0 and dot(a, b) <= 0:\n            print(1)\n            break\n    else:\n        print(2 if counter % 2 else 0)"
  },
  {
    "language": "Python",
    "code": "import math\n\n\ndef dot(ux, uy, vx, vy):\n    return ux*vx + uy*vy\n\n\ndef cross(ux, uy, vx, vy):\n    return ux*vy - uy*vx\n\n\ndef dist_to_segment(x, y, ax, ay, bx, by):\n    if dot(x - ax, y - ay, bx - ax, by - ay) < 0:\n        return math.hypot(x - ax, y - ay)\n    if dot(x - bx, y - by, ax - bx, ay - by) < 0:\n        return math.hypot(x - bx, y - by)\n    c = abs(cross(bx - ax, by - ay, x - ax, y - ay))\n    return c / math.hypot(bx - ax, by - ay)\n\n\nn = int(input())\ng = [list(map(int, input().split())) for _ in range(n)]\ng.append(g[0])\n\nq = int(input())\nfor _ in range(q):\n    x, y = map(int, input().split())\n    i_min, d_min = 0, 1e7\n    for i in range(n):\n        x1, y1 = g[i]\n        x2, y2 = g[i + 1]\n        d = dist_to_segment(x, y, x1, y1, x2, y2)\n        if d < d_min:\n            i_min, d_min = i, d\n\n    x1, y1 = g[i_min]\n    x2, y2 = g[i_min + 1]\n\n    if cross(x1 - x, y1 - y, x2 - x, y2 - y) > 0:\n        print(2)\n    elif dist_to_segment(x, y, x1, y1, x2, y2) > 0:\n        print(0)\n    else:\n        print(1)\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\n\ndef dot(ux, uy, vx, vy):\n    return ux*vx + uy*vy\n\n\ndef cross(ux, uy, vx, vy):\n    return ux*vy - uy*vx\n\n\ndef dist_to_segment(x, y, ax, ay, bx, by):\n    if dot(x - ax, y - ay, bx - ax, by - ay) < 0:\n        return math.hypot(x - ax, y - ay)\n    if dot(x - bx, y - by, ax - bx, ay - by) < 0:\n        return math.hypot(x - bx, y - by)\n    c = abs(cross(bx - ax, by - ay, x - ax, y - ay))\n    return c / math.hypot(bx - ax, by - ay)\n\n\nn = int(input())\ng = [list(map(int, input().split())) for _ in range(n)]\ng.append(g[0])\n\nq = int(input())\nfor _ in range(q):\n    x, y = map(int, input().split())\n    i_min, d_min = 0, 1e7\n    for i in range(n):\n        x1, y1 = g[i]\n        x2, y2 = g[i + 1]\n        d = dist_to_segment(x, y, x1, y1, x2, y2)\n        if d < d_min:\n            i_min, d_min = i, d\n\n    x1, y1 = g[i_min]\n    x2, y2 = g[i_min + 1]\n    print(cross(x1 - x, y1 - y, x2 - x, y2 - y) + 1)\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=jp\n\n\"\"\"\nimport sys\nfrom math import sqrt, atan2, acos, sin, cos\nfrom sys import stdin\ninput = stdin.readline\n\n\nclass Point(object):\n    epsilon = 1e-10\n\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Point(self.x / other, self.y / other)\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\n    def __eq__(self, other):\n        from math import fabs\n        if fabs(self.x - other.x) < Point.epsilon and fabs(self.y - other.y) < Point.epsilon:\n            return True\n        else:\n            return False\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        return sqrt(self.norm())\n\n    def ccw(self, p0, p1):\n        # ??????2???(p0, p1)?????????????????????????????????????????¢????????????\n        a = Vector(p1 - p0)\n        b = Vector(self - p0)\n        if Vector.cross(a, b) > Point.epsilon:\n            return 1 # 'COUNTER_CLOCKWISE'\n        elif Vector.cross(a, b) < -Point.epsilon:\n            return -1 # 'CLOCKWISE'\n        elif Vector.dot(a, b) < -Point.epsilon:\n            return 2 # 'ONLINE_BACK'\n        elif a.norm() < b.norm():\n            return -2 # 'ONLINE_FRONT'\n        else:\n            return 0 # 'ON_SEGMENT'\n\n    def project(self, s):\n        # ??????(Point)????????????s??????????????????????????????????????§?¨?(?°???±)????±???????\n        base = Vector(s.p2 - s.p1)\n        a = Vector(self - s.p1)\n        r = Vector.dot(a, base)\n        r /= base.norm()\n        return s.p1 + base * r\n\n    def reflect(self, s):\n        # ??????s???????§°?????¨?????????????????¨???????§°??????????????§?¨?(????°?)????±???????\n        proj = self.project(s)\n        return self + (proj - self)*2\n\n    def distance(self, s):\n        # ????????¨??????s????????¢????¨??????????\n        if Vector.dot(s.p2-s.p1, self-s.p1) < 0.0:\n            return abs(self - s.p1)\n        if Vector.dot(s.p1-s.p2, self-s.p2) < 0.0:\n            return abs(self - s.p2)\n        return abs(Vector.cross(s.p2-s.p1, self-s.p1) / abs(s.p2-s.p1))\n\n\nclass Vector(Point):\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        elif isinstance(x, Point):\n            self.x = x.x\n            self.y = x.y\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Vector(self.x / other, self.y / other)\n\n\n    @classmethod\n    def dot(cls, a, b):\n        return a.x * b.x + a.y * b.y\n\n    @classmethod\n    def cross(cls, a, b):\n        return a.x * b.y - a.y * b.x\n\n    @classmethod\n    def is_orthogonal(cls, a, b):\n        return Vector.dot(a, b) == 0.0\n\n    @classmethod\n    def is_parallel(cls, a, b):\n        return Vector.cross(a, b) == 0.0\n\n\nclass Segment(object):\n    def __init__(self, p1=Point(), p2=Point()):\n        if isinstance(p1, Point):\n            self.p1 = p1\n            self.p2 = p2\n        elif isinstance(p1, tuple):\n            self.p1 = Point(p1[0], p1[1])\n            self.p2 = Point(p2[0], p2[1])\n\n    def intersect(self, s):\n        # ????????¨??????????????????????????????????????????????????????\n        ans1 = s.p1.ccw(self.p1, self.p2) * s.p2.ccw(self.p1, self.p2)\n        ans2 = self.p1.ccw(s.p1, s.p2) * self.p2.ccw(s.p1, s.p2)\n        return ans1 <= 0 and ans2 <= 0\n\n    def cross_point(self, s):\n        # ????????¨??????????????????????????????????????§?¨?????±???????\n        base = s.p2 - s.p1\n        d1 = abs(Vector.cross(base, self.p1-s.p1))\n        d2 = abs(Vector.cross(base, self.p2-s.p1))\n        t = d1 / (d1 + d2)\n        return self.p1 + (self.p2 - self.p1) * t\n\n    def distance(self, s):\n        # ????????¨?????????????????????????????¢????±???????\n        if self.intersect(s):\n            return 0.0\n        d1 = s.p1.distance(self)\n        d2 = s.p2.distance(self)\n        d3 = self.p1.distance(s)\n        d4 = self.p2.distance(s)\n        return min(d1, d2, d3, d4)\n\n\n    @classmethod\n    def is_orthogonal(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_orthogonal(a, b)\n\n    @classmethod\n    def is_parallel(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_parallel(a, b)\n\n\nclass Line(Segment):\n    pass\n\n\nclass Cirle(object):\n    def __init__(self, x, y=Point(), r=1.0):\n        if isinstance(x, Point):\n            self.c = x\n            self.r = y\n        elif isinstance(x, tuple):\n            self.c = Point(x[0], x[1])\n            self.r = r\n\n    def cross_points(self, s):\n        if isinstance(s, Segment):\n            pr = self.c.project(s)\n            e = (s.p2 - s.p1) / abs(s.p2 - s.p1)\n            base = sqrt(self.r * self.r - (pr - self.c).norm())\n            return pr + e * base, pr - e * base\n        elif isinstance(s, Cirle):\n            c2 = s\n            d = abs(self.c - c2.c)\n            a = acos((self.r * self.r + d * d - c2.r * c2.r) / (2 * self.r * d))\n            t = atan2(c2.c.y - self.c.y, c2.c.x - self.c.x)\n            temp1 = Point(cos(t+a)*self.r, sin(t+a)*self.r)\n            temp2 = Point(cos(t-a)*self.r, sin(t-a)*self.r)\n            return self.c + temp1, self.c + temp2\n\n\ndef contains(polygon, p):\n    n = len(polygon)\n    x = False\n    for i in range(n):\n        a = polygon[i] - p\n        b = polygon[(i+1)%n] - p\n        if abs(Vector.cross(a, b)) < Point.epsilon and Vector.dot(a, b) < Point.epsilon:\n            return 1\n        if a.y > b.y:\n            temp = a\n            a = b\n            b = temp\n        if a.y < Point.epsilon and Point.epsilon < b.y and Vector.cross(a, b) > Point.epsilon:\n            x = not x\n    return 2 if x else 0\n\n\ndef main(args):\n    n = int(input())\n    polygon = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        polygon.append(Point(x, y))\n    q = int(input())\n    for _ in range(q):\n        x, y = map(int, input().split())\n        result = contains(polygon, Point(x, y))\n        print(result)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "import sys\nif sys.version_info[0]>=3: raw_input=input\n\ncross=lambda a,b: (a.conjugate()*b).imag\ndot=lambda a,b: (a.conjugate()*b).real\n\ndef solve(poly, p):\n\tf=False\n\tfor i in range(len(poly)):\n\t\ta=poly[i]-p\n\t\tb=poly[(i+1)%len(poly)]-p\n\t\tif a.imag>b.imag: a,b=b,a\n\t\tif a.imag<=0 and 0<b.imag and cross(a,b)<0: f=not f\n\t\tif cross(a,b)==0 and dot(a,b)<=0: return 1\n\treturn 2 if f else 0\n\ncheckio=lambda data: solve([complex(*e) for e in data[0]],complex(*data[1]))\n\nn=int(raw_input())\npoly=[[float(e) for e in raw_input().split()] for i in range(n)]\nn=int(raw_input())\ntry:\n\tfor i in range(n):\n\t\tprint(checkio([poly,[float(e) for e in raw_input().split()]]))\nexcept EOFError:\n\tpass"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n4\n0 0\n3 1\n2 3\n0 3\n3\n2 1\n0 2\n3 2\n\noutput:\n2\n1\n0\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\ndef generate_polygon(_e_info):\n    for edge in _e_info:\n        ex, ey = map(int, edge)\n        init_polygon.append(ex + ey * 1j)\n\n    return init_polygon\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef check_contains(g, p):\n    flag = False\n    for j in range(edges):\n        a, b = g[j] - p, g[(j + 1) % edges] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        elif a.imag > b.imag:\n            a, b = b, a\n\n        if a.imag < EPS < b.imag and cross(a, b) > EPS:\n            flag = not flag\n    return 2 if flag else 0\n\n\ndef solve(_p_info):\n    for point in _p_info:\n        px, py = map(int, point)\n        p = px + py * 1j\n        print(check_contains(polygon, p))\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    edges = int(_input[0])\n    e_info = map(lambda x: x.split(), _input[1:edges + 1])\n    points = int(_input[edges + 1])\n    p_info = map(lambda x: x.split(), _input[edges + 2:])\n\n    init_polygon = list()\n    polygon = generate_polygon(e_info)\n    solve(p_info)"
  },
  {
    "language": "Python",
    "code": "def dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef string_to_complex(s):\n    x, y = map(int, s.split())\n    return x + y * 1j\n\ndef contains(polygon, point):\n    flag = False\n    up = False\n    down = False\n    for v1, v2 in zip(polygon[0:], polygon[1:]):\n        a = v1 - point\n        b = v2 - point\n        if cross(a, b) == 0 and dot(a, b) <= 0:\n            return 1\n        if a.imag < b.imag:\n            if a.imag < 0 or (a.imag == 0 and up):\n                if b.imag > 0 and cross(a, b) > 0:\n                    flag = not flag\n            up = True\n            down = False\n        elif a.imag > b.imag:\n            if a.imag > 0 or (a.imag == 0 and down):\n                if b.imag < 0 and cross(a, b) < 0:\n                    flag = not flag\n            up = False\n            down = True\n    if flag:\n        return 2\n    else:\n        return 0\n\nimport sys\n\nfile_input = sys.stdin\n\nn = int(file_input.readline())\n\npolygon = [string_to_complex(file_input.readline()) for i in range(n)]\npolygon.append(polygon[0])\npolygon.append(polygon[1])\n\nq = int(file_input.readline())\n\nfor line in file_input:\n    t = string_to_complex(line)\n    print(contains(polygon, t))"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def __truediv__(self, scalar):\n        return Vector2(self.x / scalar, self.y / scalar)\n\n    def abs2(self):\n        return float(self.x * self.x + self.y * self.y)\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\ndef getDistanceSP(segment, point):\n    p = point\n    p1, p2 = segment\n    if (p2 - p1).dot(p - p1) < 0:\n        return abs(p - p1)\n    if (p1 - p2).dot(p - p2) < 0:\n        return abs(p - p2)\n    return abs((p2 - p1).cross(p - p1)) / abs(p2 - p1)\n\n\ndef getDistance(s1, s2):\n    a, b = s1\n    c, d = s2\n    if intersect(s1, s2):  # intersect\n        return 0\n    return min(getDistanceSP(s1, c), getDistanceSP(s1, d), getDistanceSP(s2, a), getDistanceSP(s2, b))\n\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > 0:\n        return 1  # COUNTER_CLOCKWISE\n    elif a.cross(b) < 0:\n        return -1  # CLOCKWISE\n    elif a.dot(b) < 0:\n        return 2  # ONLINE_BACK\n    elif abs(a) < abs(b):\n        return -2  # ONLINE_FRONT\n    else:\n        return 0  # ON_SEGMENT\n\n\ndef intersect(s1, s2):\n    a, b = s1\n    c, d = s2\n    return ccw(a, b, c) * ccw(a, b, d) <= 0 and ccw(c, d, a) * ccw(c, d, b) <= 0\n\n\ndef project(l, p):\n    p1, p2 = l\n    base = p2 - p1\n    hypo = p - p1\n    return p1 + base * (hypo.dot(base) / abs(base)**2)\n\n\nclass Circle():\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\n\ndef getCrossPoints(c, l):\n    pr = project(l, c.c)\n    p1, p2 = l\n    e = (p2 - p1) / abs(p2 - p1)\n    base = math.sqrt(c.r * c.r - (pr - c.c).abs2())\n    return [pr + e * base, pr - e * base]\n\n\ndef polar(r, a):\n    return Vector2(r * math.cos(a), r * math.sin(a))\n\n\ndef getCrossPointsCircle(c1, c2):\n    base = c2.c - c1.c\n    d = abs(base)\n    a = math.acos((c1.r**2 + d**2 - c2.r**2) / (2 * c1.r * d))\n    t = math.atan2(base.y, base.x)\n    return [c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a)]\n\n\ndef contains(g, p):\n    n = len(g)\n    x = 0\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if a.cross(b) == 0 and a.dot(b) <= 0:\n            return 1\n        if a.y > b.y:\n            a, b = b, a\n        if a.y <= 0 and b.y > 0 and a.cross(b) > 0:\n            x += 1\n\n    if x % 2 == 1:\n        return 2\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n\n    n = int(input())\n    g = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        g.append(Vector2(a, b))\n    q = int(input())\n    for _ in range(q):\n        c, d = map(int, input().split())\n        print(contains(g, Vector2(c, d)))\n\n"
  },
  {
    "language": "Python",
    "code": "import math\nfrom typing import Union, Tuple\n\nclass Point(object):\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other: Union[int, float]):\n        return Point(self.x * other, self.y * other)\n\n    def norm(self):\n        return pow(self.x, 2) + pow(self.y, 2)\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n\nclass Vector(Point):\n    __slots__ = ['x', 'y', 'pt1', 'pt2']\n\n    def __init__(self, pt1: Point, pt2: Point):\n        super().__init__(pt2.x - pt1.x, pt2.y - pt1.y)\n        self.pt1 = pt1\n        self.pt2 = pt2\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def arg(self) -> float:\n        return math.atan2(self.y, self.x)\n\n    @staticmethod\n    def polar(r, theta) -> Point:\n        return Point(r * math.cos(theta), r * math.sin(theta))\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n\nclass Segment(Vector):\n    __slots__ = ['x', 'y', 'pt1', 'pt2']\n\n    def __init__(self, pt1: Point, pt2: Point):\n        super().__init__(pt1, pt2)\n\n    def projection(self, pt: Point)-> Point:\n        t = self.dot(Vector(self.pt1, pt)) / self.norm()\n        return self.pt1 + self * t\n\n    def reflection(self, pt: Point) -> Point:\n        return self.projection(pt) * 2 - pt\n\n    def is_intersected_with(self, other) -> bool:\n        if (self.point_geometry(other.pt1) * self.point_geometry(other.pt2)) <= 0\\\n                and other.point_geometry(self.pt1) * other.point_geometry(self.pt2) <= 0:\n            return True\n        else:\n            return False\n\n    def point_geometry(self, pt: Point) -> int:\n        \"\"\"\n        [-2:\"Online Back\", -1:\"Counter Clockwise\", 0:\"On Segment\", 1:\"Clockwise\",  2:\"Online Front\"]\n        \"\"\"\n        vec_pt1_to_pt = Vector(self.pt1, pt)\n        cross = self.cross(vec_pt1_to_pt)\n        if cross > 0:\n            return -1   # counter clockwise\n        elif cross < 0:\n            return 1    # clockwise\n        else:           # cross == 0\n            dot = self.dot(vec_pt1_to_pt)\n            if dot < 0:\n                return -2    # online back\n            else:       # dot > 0\n                if self.abs() < vec_pt1_to_pt.abs():\n                    return 2    # online front\n                else:\n                    return 0    # on segment\n\n    def cross_point(self, other) -> Point:\n        d1 = abs(self.cross(Vector(self.pt1, other.pt1)))       # / self.abs()\n        d2 = abs(self.cross(Vector(self.pt1, other.pt2)))       # / self.abs()\n        t = d1 / (d1 + d2)\n        return other.pt1 + other * t\n\n    def distance_to_point(self, pt: Point) -> Union[int, float]:\n        vec_pt1_to_pt = Vector(self.pt1, pt)\n        if self.dot(vec_pt1_to_pt) <= 0:\n            return vec_pt1_to_pt.abs()\n        vec_pt2_to_pt = Vector(self.pt2, pt)\n        if Vector.dot(self * -1, vec_pt2_to_pt) <= 0:\n            return vec_pt2_to_pt.abs()\n        return (self.projection(pt) - pt).abs()\n\n    def distance_to_segment(self, other) -> Union[int, float]:\n        if self.is_intersected_with(other):\n            return 0.0\n        else:\n            return min(\n                self.distance_to_point(other.pt1),\n                self.distance_to_point(other.pt2),\n                other.distance_to_point(self.pt1),\n                other.distance_to_point(self.pt2)\n            )\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2}\"\n\n\nclass Circle(Point):\n    __slots__ = ['x', 'y', 'r']\n    def __init__(self, x, y, r):\n        super().__init__(x, y)\n        self.r = r\n\n    def cross_point_with_circle(self, other) -> Tuple[Point, Point]:\n        vec_self_to_other = Vector(self, other)\n        vec_abs = vec_self_to_other.abs()\n        # if vec_abs > (self.r + other.r):\n        #     raise AssertionError\n        t = ((pow(self.r, 2) - pow(other.r, 2)) / pow(vec_abs, 2) + 1) / 2\n        pt = (other - self) * t\n        abs_from_pt = math.sqrt(pow(self.r, 2) - pt.norm())\n        inv = Point(vec_self_to_other.y / vec_abs,  - vec_self_to_other.x / vec_abs) * abs_from_pt\n        pt_ = self + pt\n        return (pt_ + inv), (pt_ - inv)\n\n    def cross_point_with_circle2(self, other) -> Tuple[Point, Point]:\n        vec_self_to_other = Vector(self, other)\n        vec_abs = vec_self_to_other.abs()\n        # if vec_abs > (self.r + other.r):\n        #     raise AssertionError\n\n        theta_base_to_other = vec_self_to_other.arg()\n        theta_other_to_pt = math.acos((pow(self.r, 2) + pow(vec_abs, 2) - pow(other.r, 2)) / (2 * self.r * vec_abs))\n\n        return self + Vector.polar(self.r, theta_base_to_other + theta_other_to_pt),\\\n               self + Vector.polar(self.r, theta_base_to_other - theta_other_to_pt)\n\n    def __repr__(self):\n        return f\"({self.x},{self.y}), {self.r}\"\n\n\nclass Polygon(object):\n    def __init__(self, vertices):\n        self.vertices = vertices\n        self.num_vertices = len(vertices)\n\n    def contains_point(self, pt: Point) -> int:\n        \"\"\"\n        {0:\"not contained\", 1: \"on a edge\", 2:\"contained\"}\n        \"\"\"\n        cross_count = 0\n        for i in range(self.num_vertices):\n            vec_a = Vector(pt, self.vertices[i])\n            vec_b = Vector(pt, self.vertices[(i+1) % self.num_vertices])\n            if vec_a.y > vec_b.y:\n                vec_a, vec_b = vec_b, vec_a\n            dot   = vec_a.dot(  vec_b)\n            cross = vec_a.cross(vec_b)\n\n            #print(\"pt\", pt, \"vtx\", self.vertices[i], self.vertices[(i+1) % self.num_vertices], \"vec\", vec_a, vec_b, \"dot\", dot, \"cross\", cross)\n            if math.isclose(cross, 0.0) and dot <= 0:\n                return 1        #  on a edge\n            elif vec_a.y <= 0.0 < vec_b.y and cross > 0:\n                cross_count += 1\n        return [0, 2][cross_count % 2]\n\n    def __repr__(self):\n        return f\"{self.vertices}\"\n\n\ndef main():\n    num_vertices = int(input())\n    polygon_vertices = []\n    for i in range(num_vertices):\n        pt_x, pt_y = map(int, input().split())\n        polygon_vertices.append(Point(pt_x, pt_y))\n\n    polygon = Polygon(polygon_vertices)\n\n    num_queries = int(input())\n    for i in range(num_queries):\n        pt_x, pt_y = map(int, input().split())\n        ret = polygon.contains_point(Point(pt_x, pt_y))\n        print(ret)\n    return\n\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# CGL_3_C: Polygon - Polygon-Point Containment\n\nfrom enum import Enum\n\n\nclass Position(Enum):\n    OUTSIDE = 0\n    BORDER = 1\n    INSIDE = 2\n\n\nclass Polygon:\n    def __init__(self, ps):\n        self.ps = ps\n        self.convex_poligons = divide(ps)\n\n    def position(self, p):\n        if p in self.ps:\n            return Position.BORDER\n\n        pos = [position(*c, p) for c in self.convex_poligons]\n        if all([x == Position.OUTSIDE for x in pos]):\n            return Position.OUTSIDE\n        elif any([x == Position.INSIDE for x in pos]):\n            return Position.INSIDE\n        elif len([x for x in pos if x == Position.BORDER]) > 1:\n            return Position.INSIDE\n        else:\n            return Position.BORDER\n\n\ndef divide(ps):\n    if len(ps) < 3:\n        return []\n\n    p0, p1, p2, *ps = ps\n    if not ccw(p0, p1, p2):\n        return divide([p1, p2] + ps + [p0])\n\n    for p in ps:\n        if position(p0, p1, p2, p) != Position.OUTSIDE:\n            return divide([p1, p2] + ps + [p0])\n\n    return [(p0, p1, p2)] + divide([p0, p2] + ps)\n\n\ndef ccw(p0, p1, p2):\n    x0, y0 = p0\n    x1, y1 = p1\n    x2, y2 = p2\n    v1 = (x1-x0, y1-y0)\n    v2 = (x2-x1, y2-y1)\n    return dot(orthogonal(v1), v2) > 0\n\n\ndef dot(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1 * x2 + y1 * y2\n\n\ndef cross(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1 * y2 - y1 * x2\n\n\ndef orthogonal(v):\n    x, y = v\n    return -y, x\n\n\ndef position(p0, p1, p2, p):\n    x, y = p\n    ps = [p0, p1, p2]\n    online = False\n    for i in range(3):\n        pa = ps[i]\n        pb = ps[(i+1) % 3]\n        pc = ps[(i+2) % 3]\n        xa, ya = pa\n        xb, yb = pb\n        xc, yc = pc\n        vab = (xb-xa, yb-ya)\n        vac = (xc-xa, yc-ya)\n        vp = (x-xa, y-ya)\n        c = cross(vab, vp) * cross(vp, vac)\n        if c == 0:\n            online = True\n        elif c < 0:\n            return Position.OUTSIDE\n\n    if online:\n        return Position.BORDER\n    else:\n        return Position.INSIDE\n\n\ndef run():\n    g = int(input())\n\n    ps = []\n    for _ in range(g):\n        x, y = [int(i) for i in input().split()]\n        ps.append((x, y))\n\n    poly = Polygon(ps)\n\n    n = int(input())\n    for _ in range(n):\n        qx, qy = [int(i) for i in input().split()]\n\n        pos = poly.position((qx, qy))\n        print(pos.value)\n\n\nif __name__ == '__main__':\n    run()\n\n"
  },
  {
    "language": "Python",
    "code": "from math import pi, cos, sin, atan2\nfrom operator import itemgetter\nEPS = 10**(-9)\n\ndef eq(value1, value2):\n    return abs(value1-value2) <= EPS\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __str__(self):\n        #return \"{0:.8f} {1:.8f}\".format(self.x, self.y)\n        return \"{0} {1}\".format(self.x, self.y)\n    \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scal):\n        return Point(self.x*scal, self.y*scal)\n    \n    def __truediv__(self, scal):\n        return Point(self.x/scal, self.y/scal)\n    \n    def __eq__(self, other):\n        return eq(self.x, other.x) and eq(self.y, other.y)\n\n    # 原点からの距離\n    def __abs__(self):\n        return (self.x**2+self.y**2)**0.5\n\n    def arg(self):\n        return atan2(self.y, self.x)\n    \n# 原点を中心にrad角だけ回転した点\ndef Rotation(vec: Point, rad):\n    return Point(vec.x*cos(rad)-vec.y*sin(rad), vec.x*sin(rad)+vec.y*cos(rad))\n\n\nclass Circle():\n    def __init__(self, p, r):\n        self.p = p\n        self.r = r\n\n\nclass Line():\n    # 点a, bを通る\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    \n    def __str__(self):\n        return \"[({0}, {1}) - ({2}, {3})]\".format(self.a.x, self.a.y, self.b.x, self.b.y)\n    \n    def arg(self):\n        return (a-b).arg() % pi\n\n    # pointを通って平行\n    def par(self, point):\n        return Line(point, point+(self.a-self.b))\n\n    # pointを通って垂直\n    def tan(self, point):\n        return Line(point, point + Rotation(self.a-self.b, pi/2))\n\n\nclass Segment(Line):\n    def __init__(self, a, b):\n        super().__init__(a, b)\n\n\n# 符号付き面積\ndef cross(vec1: Point, vec2: Point):\n    return vec1.x*vec2.y - vec1.y*vec2.x\n\n# 内積\ndef dot(vec1: Point, vec2: Point):\n    return vec1.x*vec2.x + vec1.y*vec2.y\n\n# 点a->b->cの回転方向\ndef ccw(a, b, c):\n    if cross(b-a, c-a) > EPS: return +1 # COUNTER_CLOCKWISE\n    if cross(b-a, c-a) < -EPS: return -1 # CLOCKWISE\n    if dot(c-a, b-a) < -EPS: return +2 # c -> a -> b\n    if abs(b-a) < abs(c-a): return -2 # a -> b -> c\n    return 0 # a -> c -> b\n\n\n# pのlへの射影\ndef projection(l, p):\n    t = dot(l.b-l.a, p-l.a) / abs(l.a-l.b)**2\n    return l.a + (l.b-l.a)*t\n\n# pのlによる反射\ndef reflection(l, p):\n    return p + (projection(l, p) - p)*2\n\ndef isPararell(l1, l2):\n    return eq(cross(l1.a-l1.b, l2.a-l2.b), 0)\n\ndef isVertical(l1, l2):\n    return eq(dot(l1.a-l1.b, l2.a-l2.b), 0)\n\n\ndef Intersect_lp(l, p):\n    return abs(ccw(l.a, l.b, p)) != 1\n\ndef Intersect_ll(l1, l2):\n    return not isPararell(l1, l2) or Intersect_lp(l1, l2.a)\n\ndef Intersect_sp(s, p):\n    return ccw(s.a, s.b, p) == 0\n\ndef Intersect_ss(s1, s2):\n    return ccw(s1.a, s1.b, s2.a)*ccw(s1.a, s1.b, s2.b) <= 0 and ccw(s2.a, s2.b, s1.a)*ccw(s2.a, s2.b, s1.b) <= 0\n\ndef Intersect_ls(l, s):\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS\n\ndef Intersect_cp(c, p):\n    return abs(abs(c.p - p) - c.r) < EPS\n\ndef Intersect_cl(c, l):\n    return distance_lp(l, c.p) <= c.r + EPS\n\ndef Intersect_cs(c, s):\n    h = projection(s, c.p)\n    if abs(h - c.p)**2 - c.r**2 > EPS: return 0 # 遠い\n    d1 = abs(c.p - s.a); d2 = abs(c.p - s.b)\n    if d1 < c.r - EPS and d2 < c.r - EPS: return 0 # どちらも内側\n    if (d1 < c.r - EPS and d2 > c.r + EPS) or (d1 > c.r + EPS and d2 < c.r - EPS): return 1 # 片方だけ内側\n    if dot(s.a-h, s.b-h) < 0: return 2 # 2点で交わる\n    return 0\n\n\ndef Intersect_cc(c1, c2):\n    if c1.r < c2.r:\n        c1, c2 = c2, c1\n    d = abs(c1.p - c2.p)\n    if eq(c1.r + c2.r, d): return 3 # 内接\n    if eq(c1.r - c2.r, d): return 1 # 外接\n    if c1.r + c2.r < d: return 4 # 含まれてる\n    if c1.r - c2.r < d: return 2 # 2交点持つ\n    return 0 # 離れてる\n\n\ndef distance_pp(p1, p2):\n    return abs(p1-p2)\n\ndef distance_lp(l, p):\n    return abs(projection(l,p)-p)\n\ndef distance_ll(l1, l2):\n    return 0 if Intersect_ll(l1, l2) else distance_lp(l1, l2.a)\n\ndef distance_sp(s, p):\n    r = projection(s, p)\n    if Intersect_sp(s, r): return abs(r-p)\n    return min(abs(s.a-p), abs(s.b-p))\n\ndef distance_ss(s1, s2):\n    if Intersect_ss(s1, s2): return 0\n    return min([distance_sp(s1, s2.a), distance_sp(s1, s2.b), distance_sp(s2, s1.a), distance_sp(s2, s1.b)])\n\ndef distance_ls(l, s):\n    if Intersect_ls(l, s): return 0\n    return min(distance_lp(l, s.a), distance_lp(l, s.b))\n\n\ndef crosspoint_ll(l1, l2):\n    A = cross(l1.b - l1.a, l2.b - l2.a)\n    B = cross(l1.b - l1.a, l1.b - l2.a)\n    if eq(abs(A), 0) and eq(abs(B), 0): return l2.a\n    return l2.a + (l2.b - l2.a) * B / A\n\ndef crosspoint_ss(s1, s2):\n    return crosspoint_ll(s1, s2)\n\ndef crosspoint_lc(l, c):\n    p = projection(l, c.p)\n    if eq(distance_lp(l, c.p), c.r): return [p]\n    e = (l.b - l.a) / abs(l.b-l.a)\n    dis = (c.r**2-abs(p-c.p)**2)**0.5\n    return [p + e*dis, p - e*dis]\n\ndef crosspoint_sc(s, c):\n    l = Line(s.a, s.b)\n    if Intersect_cs(c, s) == 2: return crosspoint_lc(l, c)\n    Points = crosspoint_lc(l, c)\n    if len(Points) == 1:\n        return Points\n    if dot(s.a-Points[0], s.b-Points[0]) < 0: return [Points[0]]\n    return [Points[1]]\n\n\ndef crosspoint_cc(c1, c2):\n    d = abs(c1.p-c2.p)\n    if not abs(c1.r-c2.r) <= d <= c1.r+c2.r:\n        return []\n    mid_p = (c2.p * (c1.r**2-c2.r**2+d**2) + c1.p * (c2.r**2-c1.r**2+d**2)) / (2*d**2)\n    tanvec = Rotation(c1.p-c2.p, pi/2)\n    return crosspoint_lc(Line(mid_p, mid_p+tanvec), c1)\n\n\n# pからのcの接点\ndef tangent_cp(c, p):\n    return crosspoint_cc(c, Circle(p, (abs(p-c.p)**2 - c.r**2)**0.5))\n\n# 共通接線\ndef tangent_cc(c1, c2):\n    pass\n\n\ndef isConvex(Points):\n    n = len(Points)\n    for i in range(n):\n        if ccw(Points[i-1], Points[i], Points[(i+1)%n]) == -1: return False\n    return True\n\n\ndef ConvexHull(Points):\n    Points.sort(key=lambda p: p.y)\n    Points.sort(key=lambda p: p.x)\n\n    Qs = []\n    for p in Points:\n        while len(Qs) > 1 and ccw(Qs[-2], Qs[-1], p) == -1:\n            Qs.pop()\n        Qs.append(p)\n        \n    t = len(Qs)\n    Qs.pop()\n    for p in reversed(Points):\n        while len(Qs) > t and ccw(Qs[-2], Qs[-1], p) == -1:\n            Qs.pop()\n        Qs.append(p)\n    Qs.pop()\n\n    return Qs\n\ndef contains(Points, p):\n    inside = False\n    for i in range(len(Points)):\n        a = Points[i-1] - p\n        b = Points[i] - p\n        if a.y > b.y: a, b = b, a\n        if a.y <= 0 and 0 < b.y and cross(a, b) < 0:\n            inside = not inside\n        if cross(a, b) == 0 and dot(a, b) <= 0:\n            return 1 #辺上\n    return 2 if inside else 0\n    \n\ndef area(Points):\n    S = 0\n    for i in range(len(Points)):\n        S += cross(Points[i-1], Points[i])/2\n    return S\n\n\n\nimport sys\ninput = sys.stdin.readline\n\ndef verify_1A():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(projection(l, p))\n\ndef verify_1B():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(reflection(l, p))\n\ndef verify_1C():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    p1 = Point(p1x, p1y); p2 = Point(p2x, p2y)\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        result = ccw(p1, p2, p)\n        if result == 1:\n            print(\"COUNTER_CLOCKWISE\")\n        elif result == -1:\n            print(\"CLOCKWISE\")\n        elif result == 2:\n            print(\"ONLINE_BACK\")\n        elif result == -2:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n\ndef verify_2A():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        l1 = Line(Point(p0x, p0y), Point(p1x, p1y))\n        l2 = Line(Point(p2x, p2y), Point(p3x, p3y))\n        if isPararell(l1, l2):\n            print(2)\n        elif isVertical(l1, l2):\n            print(1)\n        else:\n            print(0)\n\ndef verify_2B():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        if Intersect_ss(s1, s2):\n            print(1)\n        else:\n            print(0)\n\n\ndef verify_2C():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        print(crosspoint_ss(s1, s2))  \n\ndef verify_2D():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        print(\"{:.8f}\".format(distance_ss(s1, s2)))\n\ndef verify_3A():\n    Q = int(input())\n    Points = [Point(*map(int, input().split())) for _ in range(Q)]\n    S = area(Points)\n    print(\"{:.1f}\".format(S))\n\ndef verify_3B():\n    Q = int(input())\n    Points = [Point(*map(int, input().split())) for _ in range(Q)]\n    print(1 if isConvex(Points) else 0)\n\ndef verify_3C():\n    N = int(input())\n    Points = [Point(*map(int, input().split())) for _ in range(N)]\n    Q = int(input())\n    Query = [Point(*map(int, input().split())) for _ in range(Q)]\n    for p in Query:\n        print(contains(Points, p))\n\nverify_3C()\n\ndef verify_4A():\n    Q = int(input())\n    Points = [Point(*map(int, input().split())) for _ in range(Q)]\n    Qs = ConvexHull(Points)\n    min_y = 10**10\n    min_x = 10**10\n    for i, p in enumerate(Qs):\n        if p.y < min_y:\n            min_y = p.y\n            min_x = p.x\n            min_ind = i\n        elif p.y == min_y and p.x < min_x:\n            min_x = p.x\n            min_ind = i\n    Qs = Qs[min_ind:] + Qs[:min_ind]\n    print(len(Qs))\n    print(\"\\n\".join([str(p.x) + \" \" + str(p.y) for p in Qs]))\n\ndef verify_7A():\n    c1x, c1y, c1r = map(int, input().split())\n    c2x, c2y, c2r = map(int, input().split())\n    print(Intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))\n\ndef verify_7D():\n    cx, cy, cr = map(int, input().split())\n    c = Circle(Point(cx, cy), cr)\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for x1, y1, x2, y2 in Query:\n        Points = crosspoint_lc(Line(Point(x1, y1), Point(x2,y2)), c)\n        if len(Points) == 1:\n            Points.append(Points[-1])\n        Points.sort(key=lambda p: p.y)\n        Points.sort(key=lambda p: p.x)\n        print(*Points)\n\ndef verify_7E():\n    c1x, c1y, c1r = map(int, input().split())\n    c1 = Circle(Point(c1x, c1y), c1r)\n    c2x, c2y, c2r = map(int, input().split())\n    c2 = Circle(Point(c2x, c2y), c2r)\n\n    Points = crosspoint_cc(c1, c2)\n    if len(Points) == 1:\n        Points.append(Points[-1])\n    Points.sort(key=lambda p: p.y)\n    Points.sort(key=lambda p: p.x)\n    print(*Points)  \n\ndef verify_7F():\n    px, py = map(int, input().split())\n    cx, cy, cr = map(int, input().split())\n    Points = tangent_cp(Circle(Point(cx, cy), cr), Point(px, py))\n    if len(Points) == 1:\n        Points.append(Points[-1])\n    Points.sort(key=lambda p: p.y)\n    Points.sort(key=lambda p: p.x)\n    print(*Points, sep=\"\\n\")    \n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a: complex, b: complex):\n    return (a.conjugate() * b).real\n\n\ndef cross(a: complex, b: complex):\n    return (a.conjugate() * b).imag\n\n\ndef is_contained(p: complex, g: list):\n    flag = False\n\n    for i in range(len(g)):\n        a, b = g[i] - p, g[(i + 1) % len(g)] - p\n        if a.imag > b.imag:\n            a, b = b, a\n        if a.imag <= 0 and 0 < b.imag:\n            if cross(a, b) < 0:\n                flag = not(flag)\n        if cross(a, b) == 0 and dot(a, b) <= 0:\n            return 1\n\n    return 2 if flag else 0\n\n\nn = int(input())\ng = [complex(*map(int, input().split())) for _ in range(n)]\nq = int(input())\n\nfor _ in range(q):\n    p = complex(*map(int, input().split()))\n    print(is_contained(p, g))\n\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\ng = []\nfor i in range(n):\n    g.append([int(i) for i in input().split()])\nq = int(input())\nEPS = 0.001\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\ndef contains(g, p):\n    x = False\n    for i in range(n):\n        a = sub(g[i], p)\n        b = sub(g[(i+1)%n], p)\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS: \n            return 1\n        if a[1] > b[1]:\n            a,b=b,a\n        if a[1] < EPS and EPS < b[1] and cross(a,b) > EPS:\n            x = not x\n    return 2 if x else 0\nfor i in range(q):\n    x,y = map(int, input().split())\n    print(contains(g, [x,y]))\n\n"
  },
  {
    "language": "Python",
    "code": "from functools import singledispatch\nimport math\n\nEPS = 1e-10\n\nCOUNTER_CLOCKWISE = 1\nCLOCKWISE = -1\nONLINE_BACK = 2\nONLINE_FRONT = -2\nON_SEGMENT = 0\n\nclass Segment():\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Circle():\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, point):\n        # + 演算子での挙動を指定\n        return Point(self.x+point.x, self.y+point.y)\n\n    def __sub__(self, point):\n        # - 演算子での挙動を指定\n        return Point(self.x-point.x, self.y-point.y)\n\n    def __mul__(self, a):\n        # * 演算子での挙動を指定\n        return Point(a*self.x, a*self.y)\n\n    def __truediv__(self, a):\n        # / 演算子での挙動を指定\n        return Point(self.x/a, self.y/a)\n\n    def __abs__(self):\n        # abs関数での挙動を指定\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2+self.y**2\n\n    def __eq__(self, point):\n        # == 演算子での挙動を指定\n        return abs(self.x-point.x) < EPS and abs(self.y-point.y) <EPS\n\ndef dot(a, b):\n    return a.x*b.x+a.y*b.y\n\ndef cross(a, b):\n    return a.x*b.y - a.y*b.x\n\ndef isOrthogonal(a, b):\n    return dot(a, b) == 0\n\ndef isParallel(a, b):\n    return cross(a, b) == 0\n\ndef project(s, p):\n    #s: Segment(), p: Point()\n    base = s.p2 - s.p1\n    r = dot(p-s.p1, base)/base.norm()\n    return s.p1+base*r\n\ndef reflect(s, p):\n    return p+(project(s, p)-p)*2\n\n@singledispatch\ndef get_distance(a, b):\n    return abs(a-b)\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.p2-l.p1, p-l.p1)/abs(l.p2-l.p1))\n\ndef get_distance_sp(s, p):\n    if dot(s.p2-s.p1, p-s.p1) < 0:\n        return abs(p-s.p1)\n    if dot(s.p1-s.p2, p-s.p2) < 0:\n        return abs(p-s.p2)\n    return get_distance_lp(s, p)\n    \n@get_distance.register(Segment)\ndef _(s1, s2):\n    if intersect(s1, s2):\n        return 0\n    return min([get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2),\n                get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2)])\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if cross(a, b) > EPS:\n        return COUNTER_CLOCKWISE\n    if cross(a, b) < -EPS:\n        return CLOCKWISE\n    if dot(a, b) < -EPS:\n        return ONLINE_BACK\n    if a.norm() < b.norm():\n        return ONLINE_FRONT\n    return ON_SEGMENT\n\n@singledispatch\ndef intersect(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n            and ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0)\n\n@intersect.register(Segment)\ndef _(s1, s2):\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n\ndef get_cross_point(s1, s2):\n    base = s2.p2 - s2.p1\n    d1 = abs(cross(base, s1.p1-s2.p1))\n    d2 = abs(cross(base, s1.p2-s2.p1))\n    t = d1/(d1+d2)\n    return s1.p1 + (s1.p2-s1.p1)*t\n\ndef get_cross_points(c, l):\n    # 次の行のコメントのコードは、新しいintersect関数を作る必要があり(おそらくpython3.7以上必須)、手間取るので割愛します。\n    # assert(intersect(c, l))\n    pr = project(l, c.c)\n    e = (l.p2 - l.p1)/abs(l.p2-l.p1)\n    base = (c.r**2-(pr-c.c).norm())**0.5\n    return (pr+e*base, pr-e*base)\n\ndef arg(p):\n    return math.atan2(p.y, p.x)\n\ndef polar(a, r):\n    return Point(math.cos(r)*a, math.sin(r)*a)\n\ndef get_cross_points_(c1, c2):\n    # 関数名かぶるので、_つけました。\n    # python3.7以上でsingledispatchを使えば同じ関数名も可能ですが、\n    # atcoderのpython3.4も想定しているため、関数名を変えておきます。\n    # assert(intersect(c, c))\n    d = abs(c1.c-c2.c)\n    a = math.acos((c1.r**2+d**2-c2.r**2)/(2*c1.r*d))\n    t = arg(c2.c-c1.c)\n    return (c1.c+polar(c1.r, t+a), c1.c+polar(c1.r, t-a))\n\ndef contains(g, p):\n    # gは多角形の頂点を順番に並べたリスト/タプル\n    n = len(g)\n    x = False\n    for i in range(n):\n        a = g[i]-p\n        b = g[(i+1)%n]-p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        if a.y > b.y:\n            a, b = b, a\n        if a.y < EPS and EPS < b.y and cross(a, b) > EPS:\n            x = not x\n    return 2 if x else 0\n\nif __name__ == '__main__':\n    from sys import stdin\n    input = stdin.readline\n\n    n = int(input())\n    g = [0]*n   # 初期化\n    for i in range(n):\n        x, y = map(int, input().split())\n        p = Point(x, y)\n        g[i] = p\n    q = int(input())\n    for _ in range(q):\n        x, y = map(int, input().split())\n        p = Point(x, y)\n        print(contains(g, p))\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n4\n0 0\n3 1\n2 3\n0 3\n3\n2 1\n0 2\n3 2\n\noutput:\n2\n1\n0\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef check_contains(g, p):\n    flag = False\n    for j in range(edges):\n        a, b = g[j] - p, g[(j + 1) % edges] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        elif a.imag > b.imag:\n            a, b = b, a\n\n        if a.imag < EPS < b.imag and cross(a, b) > EPS:\n            flag = not flag\n    return 2 if flag else 0\n\n\ndef solve(_p_info):\n    for point in _p_info:\n        px, py = map(float, point)\n        p = px + py * 1j\n        print(check_contains(polygon, p))\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    edges = int(_input[0])\n    e_info = map(lambda x: x.split(), _input[1:edges + 1])\n    points = int(_input[edges + 1])\n    p_info = map(lambda x: x.split(), _input[edges + 2:])\n\n    polygon = [float(x) + float(y) * 1j for x, y in e_info]\n    solve(p_info)"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom operator import itemgetter, attrgetter\nfrom itertools import starmap\nimport cmath\nfrom math import isinf, sqrt, acos, atan2\nreadline = sys.stdin.readline\nEPS = 1e-9\nONLINE_FRONT = -2\nCLOCKWISE = -1\nON_SEGMENT = 0\nCOUNTER_CLOCKWISE = 1\nONLINE_BACK = 2\nclass Circle(object):\n    __slots__ = ('c', 'r')\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\nLine = Segment\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\ndef getCrossPoint(s1, s2):\n\tbase = s2.se - s2.fi\n\td1 = abs(cross(base, s1.fi - s2.fi))\n\td2 = abs(cross(base, s1.se - s2.fi))\n\tt = d1 / (d1 + d2)\n\treturn s1.fi + (s1.se - s1.fi) * t\ndef getCrossPointsCL(c, l):\n    pr = project(l, c.c)\n    e = (l.se - l.fi) / abs(l.se - l.fi)\n    base = sqrt(c.r * c.r - norm(pr - c.c))\n    return Segment(*sorted((pr + e * base, pr - e * base)), key=attrgetter('real', 'imag'))\ndef getCrossPointsCC(c1, c2):\n    d = abs(c1.c - c2.c)\n    a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d))\n    t = cmath.phase(c2.c - c1.c)\n    return Segment(*sorted((c1.c + cmath.rect(c1.r, t + a), c1.c + cmath.rect(c1.r, t - a)), key=attrgetter('real', 'imag')))\ndef contains(g, p):\n    n = len(g)\n    x = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS: return 1\n        if a.imag > b.imag: a, b = b, a\n        if a.imag < EPS and EPS < b.imag and cross(a, b) > EPS: x = not x\n    return 2 if x else 0\nn = int(readline())\npg = [complex(*map(int, readline().split())) for _ in [0] * n]\nq = int(readline())\nfor _ in [0] * q:\n    x, y = map(int, readline().split())\n    print(contains(pg, complex(x, y)))"
  },
  {
    "language": "Python",
    "code": "def dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef string_to_complex(s):\n    x, y = map(int, s.split())\n    return x + y * 1j\n\ndef contains(polygon, point):\n    up = False\n    down = False\n    start_point = polygon[0]\n    for p in polygon[::-1]:\n        if start_point.imag > p.imag:\n            up = True\n            break\n        elif start_point.imag < p.imag:\n            down = True\n            break\n    flag = False\n    for v1, v2 in zip(polygon[0:], polygon[1:]):\n        a = v1 - point\n        b = v2 - point\n        if cross(a, b) == 0 and dot(a, b) <= 0:\n            return 1\n        if a.imag < b.imag:\n            if a.imag < 0 or (a.imag == 0 and up):\n                if b.imag > 0 and cross(a, b) > 0:\n                    flag = not flag\n            up = True\n            down = False\n        elif a.imag > b.imag:\n            if a.imag > 0 or (a.imag == 0 and down):\n                if b.imag < 0 and cross(a, b) < 0:\n                    flag = not flag\n            up = False\n            down = True\n    if flag:\n        return 2\n    else:\n        return 0\n\nimport sys\n\nfile_input = sys.stdin\n\nn = int(file_input.readline())\n\npolygon = [string_to_complex(file_input.readline()) for i in range(n)]\npolygon.append(polygon[0])\n\nq = int(file_input.readline())\n\nfor line in file_input:\n    t = string_to_complex(line)\n    print(contains(polygon, t))"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n    def __truediv__(self, other):\n        return Point(self.x / other, self.y / other)\n    def __repr__(self):\n        return str(round(self.x, 8)) + ' ' + str(round(self.y, 8))\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\nclass Vector(Point):\n    pass\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Segment(Line):\n    pass\n\nclass Circle:\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\nclass Polygon:\n    def __init__(self, points):\n        self.points = points\n\ndef points_to_vector(p1, p2):\n    x = p1.x - p2.x\n    y = p1.y - p2.y\n    return Vector(x, y)\n\ndef vector(p):\n    return Vector(p.x, p.y)\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef norm(v):\n    return v.x**2 + v.y**2\n\ndef distance(v):\n    return math.sqrt(norm(v))\n\ndef project(s, p):\n    base = points_to_vector(s.p1, s.p2)\n    hypo = points_to_vector(p, s.p1)\n    r = dot(hypo, base) / norm(base)\n    return s.p1 + base * r\n\ndef reflect(s, p):\n    return p + (project(s, p) -p) * 2\n\ndef get_distance(s1, s2):\n    if intersect_s(s1, s2):\n        return 0\n    d1 = get_distance_sp(s1, s2.p1)\n    d2 = get_distance_sp(s1, s2.p2)\n    d3 = get_distance_sp(s2, s1.p1)\n    d4 = get_distance_sp(s2, s1.p2)\n    return min(d1, min(d2, min(d3, d4)))\n\ndef get_distance_pp(p1, p2):\n    return distance(p1 - p2)\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.p2 - l.p1, p - l.p1) / distance(l.p2 - l.p1))\n\ndef get_distance_sp(s, p):\n    if dot(s.p2 - s.p1, p - s.p1) < 0:\n        return distance(p - s.p1)\n    elif dot(s.p1 - s.p2, p - s.p2) < 0:\n        return distance(p - s.p2)\n    else:\n        return get_distance_lp(s, p)\n\ndef ccw(p0, p1, p2):\n    EPS = 1e-10\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = -1\n    ONLINE_BACK = 2\n    ONLINE_FRONT = -2\n    ON_SEGMENT = 0\n    v1 = p1 - p0\n    v2 = p2 - p0\n    if cross(v1, v2) > EPS:\n        return COUNTER_CLOCKWISE\n    elif cross(v1, v2) < -EPS:\n        return CLOCKWISE\n    elif dot(v1, v2) < -EPS:\n        return ONLINE_BACK\n    elif norm(v1) < norm(v2):\n        return ONLINE_FRONT\n    else:\n        return ON_SEGMENT\n\ndef intersect_p(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\ndef intersect_s(s1, s2):\n    return intersect_p(s1.p1, s1.p2, s2.p1, s2.p2)\n\ndef get_cross_point(s1, s2):\n    base = s2.p2 - s2.p1\n    d1 = abs(cross(base, s1.p1 - s2.p1))\n    d2 = abs(cross(base, s1.p2 - s2.p1))\n    t = d1 / (d1 + d2)\n    return s1.p1 + (s1.p2 - s1.p1) * t\n\ndef get_cross_points(c, l):\n    pr = project(l, c.c)\n    e = (l.p2 - l.p1) / distance(l.p2 - l.p1)\n    base = math.sqrt(c.r**2 - norm(pr - c.c))\n    return pr + e * base, pr - e * base\n\ndef arg(p):\n    return math.atan2(p.y, p.x)\n\ndef polar(a, r):\n    return Point(math.cos(r) * a, math.sin(r) * a)\n\ndef get_cross_points_cirlces(c1, c2):\n    d = distance(c1.c - c2.c)\n    a = math.acos((c1.r**2 + d * d - c2.r**2) / (2 * c1.r * d))\n    t = arg(c2.c - c1.c)\n    return c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a)\n\ndef pol_contains(g, p):\n    EPS = 1e-10\n    n = len(g.points)\n    x = False\n    for i in range(n):\n        a = g.points[i] - p\n        b = g.points[(i+1)%n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            return 1\n        if a.y > b.y:\n            a, b = b, a\n        if a.y < EPS < b.y and cross(a, b) > EPS:\n            x = not x\n    if x % 2 == 0:\n        return 0\n    else:\n        return 2\n\nimport sys\n# sys.stdin = open('input.txt')\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append(Point(x, y))\ng = Polygon(points)\nq = int(input())\nfor i in range(q):\n    x, y = map(int, input().split())\n    p = Point(x, y)\n    print(pol_contains(g, p))\n"
  },
  {
    "language": "Python",
    "code": "# https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_3_C\n# 本の説明を図に書き出してみるとよく理解できる。\nfrom math import sqrt\n\n\nclass Vector:\n    def __init__(self, ls):\n        '''\n        ls ... list\n        '''\n        self.vec = ls\n\n    def __len__(self):\n        return len(self.vec)\n\n    def __getitem__(self, idx):\n        return self.vec[idx]\n\n    def __repr__(self):\n        return f'Vector({self.vec})'\n\n    def add(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a + b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def sub(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a - b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def mul(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a * b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def norm(self):\n        tmp = sum([x * x for x in self.vec])\n        return sqrt(tmp)\n\n\ndef norm(vec):\n    '''\n    vec ... Vector class\n    '''\n    return vec.norm()\n\n\ndef cross(a, b):\n    '''\n    Outer product for 2d\n    a,b ... Vector class\n    '''\n    assert len(a) == 2 and len(b) == 2\n    first = a[0] * b[1]\n    second = a[1] * b[0]\n    return first - second\n\n\ndef dot(a, b):\n    return sum(a.mul(b))\n\n\nEPS = 1e-10\n\n\ndef contains(G, p):\n    '''\n    Gは多角形を表すリストで、今回ならばvectorが中に並んでいることとする\n    pは内容しているか判別したい点で、Vectorで表す\n\n    pが多角形Gの辺上にあれば1\n    pが多角形Gに内包されていれば2\n    それ以外は0をreturnする\n    '''\n    is_contain = False  # 内包してるか\n    for i in range(len(G)):\n        a = G[i].sub(p)\n        b = G[(i + 1) % len(G)].sub(p)  # i+1が0に戻るようにこのような形式にしている。\n        # もしpがG[i]とG[i+1]の線分上にある場合は即座に1をreturnします\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS:\n            # 外積が0→a,bが同一直線上\n            # かつ 内積が負→a,bは逆を向いている\n            # ならばpは線分上に存在する\n            return 1\n        # 内包を判定する。前処理として、yの座標によってa,bを入れ替える\n        if a[1] > b[1]:  # aの方のy座標を小さくしたい\n            a, b = b, a\n        if a[1] < EPS and b[1] > EPS and cross(a, b) > EPS:  # 実際に判別する\n            is_contain = (not is_contain)\n    return (0, 2)[is_contain]\n\n\n# load data\nN = int(input())\nG = []\nfor _ in range(N):\n    g = Vector(list(map(int, input().split())))\n    G.append(g)\n\n# answer query\nQ = int(input())\nfor _ in range(Q):\n    p = Vector(list(map(int, input().split())))\n    print(contains(G, p))\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def __truediv__(self, scalar):\n        return Vector2(self.x / scalar, self.y / scalar)\n\n    def abs2(self):\n        return float(self.x * self.x + self.y * self.y)\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\ndef getDistanceSP(segment, point):\n    p = point\n    p1, p2 = segment\n    if (p2 - p1).dot(p - p1) < 0:\n        return abs(p - p1)\n    if (p1 - p2).dot(p - p2) < 0:\n        return abs(p - p2)\n    return abs((p2 - p1).cross(p - p1)) / abs(p2 - p1)\n\n\ndef getDistance(s1, s2):\n    a, b = s1\n    c, d = s2\n    if intersect(s1, s2):  # intersect\n        return 0\n    return min(getDistanceSP(s1, c), getDistanceSP(s1, d), getDistanceSP(s2, a), getDistanceSP(s2, b))\n\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > 0:\n        return 1  # COUNTER_CLOCKWISE\n    elif a.cross(b) < 0:\n        return -1  # CLOCKWISE\n    elif a.dot(b) < 0:\n        return 2  # ONLINE_BACK\n    elif abs(a) < abs(b):\n        return -2  # ONLINE_FRONT\n    else:\n        return 0  # ON_SEGMENT\n\n\ndef intersect(s1, s2):\n    a, b = s1\n    c, d = s2\n    return ccw(a, b, c) * ccw(a, b, d) <= 0 and ccw(c, d, a) * ccw(c, d, b) <= 0\n\n\ndef project(l, p):\n    p1, p2 = l\n    base = p2 - p1\n    hypo = p - p1\n    return p1 + base * (hypo.dot(base) / abs(base)**2)\n\n\nclass Circle():\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\n\ndef getCrossPoints(c, l):\n    pr = project(l, c.c)\n    p1, p2 = l\n    e = (p2 - p1) / abs(p2 - p1)\n    base = math.sqrt(c.r * c.r - (pr - c.c).abs2())\n    return [pr + e * base, pr - e * base]\n\n\ndef polar(r, a):\n    return Vector2(r * math.cos(a), r * math.sin(a))\n\n\ndef getCrossPointsCircle(c1, c2):\n    base = c2.c - c1.c\n    d = abs(base)\n    a = math.acos((c1.r**2 + d**2 - c2.r**2) / (2 * c1.r * d))\n    t = math.atan2(base.y, base.x)\n    return [c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a)]\n\n\ndef contains(g, p):\n    n = len(g)\n    x = 0\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if a.cross(b) == 0 and a.dot(b) < 0:\n            return 1\n        if a.y > b.y:\n            a, b = b, a\n        if a.y <= 0 and b.y > 0 and a.cross(b) > 0:\n            x += 1\n\n    if x % 2 == 1:\n        return 2\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n\n    n = int(input())\n    g = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        g.append(Vector2(a, b))\n    q = int(input())\n    for _ in range(q):\n        c, d = map(int, input().split())\n        print(contains(g, Vector2(c, d)))\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/python3\n\nimport array\nfrom fractions import Fraction\nimport math\nimport os\nimport sys\n\n\ndef main():\n    N = read_int()\n    P = [Vec(x, y) for x, y in [read_ints() for _ in range(N)]]\n    Q = read_int()\n    for _ in range(Q):\n        x, y = read_ints()\n        print(solve(N, P, Vec(x, y)))\n\n\nINSIDE = 2\nON_EDGE = 1\nOUTSIDE = 0\n\n\ndef solve(N, P, A):\n    P = [p - A for p in P]\n\n    min_v = Vec(-1, 0)\n    for p in P:\n        if p == Vec(0, 0):\n            return ON_EDGE\n\n        v = Vec(p.x, p.y)\n        if v.y == 0:\n            continue\n        if v.y < 0:\n            v = -v\n\n        if min_v.cross(v) < 0:\n            min_v = v\n\n    assert min_v != Vec(-1, 0)\n\n    u = min_v + Vec(1, 0)\n\n    neg_count = 0\n    for i in range(N):\n        a = P[i]\n        b = P[(i + 1) % N]\n\n        c_a = u.cross(a)\n        c_b = u.cross(b)\n        assert c_a != 0\n        assert c_b != 0\n        if c_a * c_b > 0:\n            continue\n\n        ba = b - a\n        k = Fraction(a.cross(ba), u.cross(ba))\n        if k == 0:\n            return ON_EDGE\n        if k < 0:\n            neg_count += 1\n\n    if neg_count % 2 == 1:\n        return INSIDE\n    return OUTSIDE\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nclass Vec(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        super().__init__()\n\n    def __add__(self, other):\n        return Vec(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vec(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __rmul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __truediv__(self, scalar):\n        return Vec(self.x / scalar, self.y / scalar)\n\n    def __iadd__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\n    def __isub__(self, other):\n        self.x -= other.x\n        self.y -= other.y\n        return self\n\n    def __imul__(self, scalar):\n        self.x *= scalar\n        self.y *= scalar\n        return self\n\n    def __idiv__(self, scalar):\n        self.x /= scalar\n        self.y /= scalar\n        return self\n\n    def __neg__(self):\n        return Vec(-self.x, -self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash('Vec', self.x, self.y)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def abs2(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        return math.sqrt(float(self.abs2()))\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "compare=lambda a,b: a.real<b.real if a.real!=b.real else a.imag<b.imag\ncross=lambda a,b: (a.conjugate()*b).imag\ndot=lambda a,b: (a.conjugate()*b).real\n\ndef solve(poly, p):\n\tf=False\n\tfor i in range(len(poly)):\n\t\ta=poly[i]-p\n\t\tb=poly[(i+1)%len(poly)]-p\n\t\tif a.imag>b.imag: a,b=b,a\n\t\tif a.imag<=0 and 0<b.imag and cross(a,b)<0: f=not f\n\t\tif cross(a,b)==0 and dot(a,b)<=0: return 1\n\treturn 2 if f else 0\n\ncheckio=lambda data: solve([complex(*e) for e in data[0]],complex(*data[1]))\n\nn=int(raw_input())\npoly=[[float(e) for e in raw_input().split()] for i in range(n)]\nn=int(raw_input())\ntry:\n\tfor i in range(n):\n\t\tprint(checkio([poly,[float(e) for e in raw_input().split()]]))\nexcept EOFError:\n\tpass"
  },
  {
    "language": "Python",
    "code": "def point_in_poly(x,y,poly):\n\n   # check if point is a vertex\n   if (x,y) in poly: return 1\n\n   # check if point is on a boundary\n   for i in range(len(poly)):\n      p1 = None\n      p2 = None\n      if i==0:\n         p1 = poly[0]\n         p2 = poly[1]\n      else:\n         p1 = poly[i-1]\n         p2 = poly[i]\n      if p1[1] == p2[1] and p1[1] == y and x > min(p1[0], p2[0]) and x < max(p1[0], p2[0]):\n         return 1\n      \n   n = len(poly)\n   inside = False\n\n   p1x,p1y = poly[0]\n   for i in range(n+1):\n      p2x,p2y = poly[i % n]\n      if y > min(p1y,p2y):\n         if y <= max(p1y,p2y):\n            if x <= max(p1x,p2x):\n               if p1y != p2y:\n                  xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n               if p1x == p2x or x <= xints:\n                  inside = not inside\n      p1x,p1y = p2x,p2y\n\n   if inside: return 2\n   else: return 0\n   \n   \nn=int(input())\ng=[]\nfor i in range(0,n):\n    s= [int(x) for x in input().split()]\n    #p0=Point(s[0],s[1])\n    g.append((s[0],s[1]))\n\nq=int(input())\nfor i in range(0,q):\n    s= [int(x) for x in input().split()]\n    #pa=Point(s[0],s[1])\n    rt=point_in_poly(s[0],s[1],g)\n    print(rt) \n"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\n\nclass Vector2():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        return Vector2(self.x+v.x, self.y+v.y)\n\n    def __sub__(self, v):\n        return Vector2(self.x-v.x, self.y-v.y)\n\n    def __mul__(self, v):\n        return Vector2(self.x*v, self.y*v)\n\n    def __truediv__(self, v):\n        return Vector2(self.x/v, self.y/v)\n\n    def __abs__(self):\n        return math.sqrt(float(self.x*self.x+self.y*self.y))\n\n    def __str__(self):\n        return f\"({self.x},{self.y})\"\n\n    def __lt__(self, v):\n        if math.isclose(self.x, v.x):\n            return self.y < v.y\n        return self.x < v.x\n\n    def dot(self, v):\n        return self.x*v.x+self.y*v.y\n\n    def cross(self, v):\n        return self.x*v.y-self.y*v.x\n\n    def norm(self):\n        d = abs(self)\n        return Vector2(self.x/d, self.y/d)\n\n\ndef projection(v1, v2, p):\n    v12 = (v2-v1).norm()\n    v1p = p-v1\n    d = v12.dot(v1p)\n    return v1+v12*d\n\n\ndef distanceLP(v1, v2, p):\n    '''\n    v1 -> v2の直線とpとの距離\n    '''\n    return abs((v2-v1).cross(p-v1))/abs(v2-v1)\n\n\ndef distanceSP(v1, v2, p):\n    '''\n    v1 -> v2の線分とpとの距離\n    '''\n    if (v2-v1).dot(p-v1) < 0.0:\n        return abs(p-v1)\n    if (v1-v2).dot(p-v2) < 0.0:\n        return abs(p-v2)\n    return distanceLP(v1, v2, p)\n\n\ndef ccw(p0, p1, p2):\n    c = (p1-p0).cross(p2-p0)\n    if math.isclose(c, 0.0, abs_tol=EPS):\n        d = (p1-p0).dot(p2-p0)\n        if d < 0.0:\n            return -1\n        else:\n            d1 = abs(p1-p0)\n            d2 = abs(p2-p0)\n            if d1 < d2:\n                return 1\n            else:\n                return 0\n    elif c < 0.0:\n        return -1\n    else:\n        return 1\n\n\ndef intersect(p1, p2, p3, p4):\n    '''\n    p1p2とp3p4の交差判定\n    '''\n    #t1 = (p1.x-p2.x)*(p3.y-p1.y)+(p1.y-p2.y)*(p1.x-p3.x)\n    #t2 = (p1.x-p2.x)*(p4.y-p1.y)+(p1.y-p2.y)*(p1.x-p4.x)\n    #t3 = (p3.x-p4.x)*(p1.y-p3.y)+(p3.y-p4.y)*(p3.x-p1.x)\n    #t4 = (p3.x-p4.x)*(p2.y-p3.y)+(p3.y-p4.y)*(p3.x-p2.x)\n    # return (t1*t2) <= 0.0 and (t3*t4) <= 0.0\n    c1 = ccw(p1, p2, p3)*ccw(p1, p2, p4)\n    c2 = ccw(p3, p4, p1)*ccw(p3, p4, p2)\n    return c1 <= 0.0 and c2 <= 0.0\n\n\ndef distance(a1, a2, b1, b2):\n    '''\n    線分a1a2とb1b2の距離\n    '''\n    if intersect(a1, a2, b1, b2):\n        return 0.0\n    return min([\n        min([distanceSP(a1, a2, b1), distanceSP(a1, a2, b2)]),\n        min([distanceSP(b1, b2, a1), distanceSP(b1, b2, a2)])\n    ])\n\n\nn = int(input())\ng = [list(map(int, input().split())) for _ in range(n)]\nq = int(input())\np = [list(map(int, input().split())) for _ in range(q)]\n\nfor pi in p:\n    pv = Vector2(pi[0], pi[1])\n\n    '''\n    多角形の内包判定\n    右に大きく線分を引いて、線分と奇数回ぶつかる -> 内包\n    or\n    多角形を構成する線分上にある\n    '''\n    ans = None\n    x = False\n    for i in range(n):\n        a = Vector2(g[i][0], g[i][1]) - pv\n        b = Vector2(g[(i+1) % n][0], g[(i+1) % n][1]) - pv\n        # a,b上に点pがある\n        if math.isclose(abs(a.cross(b)), 0.0) and a.dot(b) < EPS:\n            ans = \"1\"\n            break\n        else:\n            # yが小さい順に入れ替える\n            if a.y > b.y:\n                a, b = b, a\n            # a->bが反時計回りで、a.yとb.yの間にp(0.0)がある\n            if a.cross(b) > EPS and a.y < EPS and b.y > EPS:\n                x = not x\n    if ans == None:\n        ans = \"2\" if x else \"0\"\n    print(ans)\n\n"
  },
  {
    "language": "Python",
    "code": "from math import atan2\nn = input()\np = [map(int, raw_input().split()) for i in xrange(n)]\nfor t in xrange(input()):\n    x, y = map(int, raw_input().split())\n\n    inline = 0\n    theta = 0.\n    for i in xrange(n):\n        x0 = p[i-1][0] - x\n        y0 = p[i-1][1] - y\n        x1 = p[i][0] - x\n        y1 = p[i][1] - y\n\n        if x0*y1 == y0*x1:\n            inline = 1\n            break\n        theta += atan2(x0*y1-y0*x1, x0*x1+y0*y1)\n    if inline:\n        print 1\n    elif theta > 1:\n        print 2\n    else:\n        print 0"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nimport math\n\nEPS = 1e-10\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    # can't  apply \"number * Vector\" but \"Vector * number\"\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __truediv__(self, k):\n        return Vector(self.x / k, self.y / k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.yb\n\n    def __lt__(self, other):\n        return self.x < other.x and self.y < other.yb\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def rotate(self, theta):\n        return Vector(self.x * math.cos(theta)\n                               - self.y * math.sin(theta),\n                               self.x * math.sin(theta)\n                               + self.y * math.cos(theta))\n\nclass Point(Vector):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\nclass Segment:\n    def __init__(self, p1=Point(0, 0), p2=Point(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Line(Segment):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > EPS:\n        return 1\n    elif a.cross(b) < -EPS:\n        return -1\n    elif a.dot(b) < -EPS:\n        return 2\n    elif a.norm() < b.norm():\n        return -2\n    else:\n        return 0\n\ndef contains(P, p):\n    n = len(P)\n    count = 0\n    for i in range(n):\n        a = P[i]\n        b = P[ (i + 1) % n ]\n        if a.y > b.y:\n            a, b = b, a\n        if ccw(p, a, b) == 2:\n            return 1\n        if ccw(p, a, b) == 1 and b.y > p.y and a.y <= p.y:\n            count = count + 1\n    if count % 2 == 0:\n        return 0\n    else:\n        return 2\n\ndef read_polygon(n):\n    P = []\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p = Vector(int(line[0]), int(line[1]))\n        P.append(p)\n    return P\n\ndef read_and_print_results(k, P):\n    for _ in range(k):\n        line = stdin.readline().strip().split()\n        p = Vector(int(line[0]), int(line[1]))\n        result = contains(P, p)\n        print(result)\n\ndef __main():\n    n = int(input())\n    P = read_polygon(n)\n    k = int(input())\n    read_and_print_results(k, P)\n\nif __name__ == '__main__':\n    __main()\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nimport math\n\nEPS = 1e-10\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    # can't  apply \"number * Vector\" but \"Vector * number\"\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __truediv__(self, k):\n        return Vector(self.x / k, self.y / k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.yb\n\n    def __lt__(self, other):\n        return self.x < other.x and self.y < other.yb\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def rotate(self, theta):\n        return Vector(self.x * math.cos(theta)\n                               - self.y * math.sin(theta),\n                               self.x * math.sin(theta)\n                               + self.y * math.cos(theta))\n\nclass Point(Vector):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\nclass Segment:\n    def __init__(self, p1=Point(0, 0), p2=Point(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Line(Segment):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > EPS:\n        return 1\n    elif a.cross(b) < -EPS:\n        return -1\n    elif a.dot(b) < -EPS:\n        return 2\n    elif a.norm() < b.norm():\n        return -2\n    else:\n        return 0\n\ndef contains(P, p):\n    n = len(P)\n    count = 0\n    for i in range(n):\n        a = P[i]\n        b = P[ (i + 1) % n ]\n        if a.y > b.y:\n            a, b = b, a\n        if ccw(p, a, b) == 2 or p == a or p == b:\n            return 1\n        if ccw(p, a, b) == 1 and b.y > p.y and a.y <= p.y:\n            count = count + 1\n    if count % 2 == 0:\n        return 0\n    else:\n        return 2\n\ndef read_polygon(n):\n    P = []\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p = Vector(int(line[0]), int(line[1]))\n        P.append(p)\n    return P\n\ndef read_and_print_results(k, P):\n    for _ in range(k):\n        line = stdin.readline().strip().split()\n        p = Vector(int(line[0]), int(line[1]))\n        result = contains(P, p)\n        print(result)\n\ndef __main():\n    n = int(input())\n    P = read_polygon(n)\n    k = int(input())\n    read_and_print_results(k, P)\n\nif __name__ == '__main__':\n    __main()\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom operator import itemgetter, attrgetter\nfrom itertools import starmap\nimport cmath\nfrom math import isinf, sqrt, acos, atan2\nreadline = sys.stdin.readline\nEPS = 1e-9\nONLINE_FRONT = -2\nCLOCKWISE = -1\nON_SEGMENT = 0\nCOUNTER_CLOCKWISE = 1\nONLINE_BACK = 2\nclass Circle(object):\n    __slots__ = ('c', 'r')\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\nLine = Segment\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\ndef getCrossPoint(s1, s2):\n\tbase = s2.se - s2.fi\n\td1 = abs(cross(base, s1.fi - s2.fi))\n\td2 = abs(cross(base, s1.se - s2.fi))\n\tt = d1 / (d1 + d2)\n\treturn s1.fi + (s1.se - s1.fi) * t\ndef getCrossPointsCL(c, l):\n    pr = project(l, c.c)\n    e = (l.se - l.fi) / abs(l.se - l.fi)\n    base = sqrt(c.r * c.r - norm(pr - c.c))\n    return Segment(*sorted((pr + e * base, pr - e * base)), key=attrgetter('real', 'imag'))\ndef getCrossPointsCC(c1, c2):\n    d = abs(c1.c - c2.c)\n    a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2.0 * c1.r * d))\n    t = cmath.phase(c2.c - c1.c)\n    return Segment(*sorted((c1.c + cmath.rect(c1.r, t + a), c1.c + cmath.rect(c1.r, t - a)), key=attrgetter('real', 'imag')))\ndef contains(g, p):\n    n = len(g)\n    x = False\n    for i in range(n):\n        a = g[i] - p\n        b = g[(i + 1) % n] - p\n        if abs(cross(a, b)) < EPS and dot(a, b) < EPS: return 1\n        if a.imag > b.imag: a, b = b, a\n        if a.imag < EPS and EPS < b.imag and cross(a, b) > EPS: x = not x\n    return 2 if x else 0\nn = int(readline())\npg = tuple(complex(*map(int, readline().split())) for _ in [0] * n)\nq = int(readline())\nfor _ in [0] * q:\n    x, y = map(int, readline().split())\n    print(contains(pg, complex(x, y)))"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\nn = int(input())\nvertices = [complex(*map(int, input().split())) for _ in range(n)]\nedges = [(p0, p1) for p0, p1 in zip(vertices, vertices[1:] + [vertices[0]])]\n\nq = int(input())\nwhile q:\n    q -= 1\n    p = complex(*map(int, input().split()))\n    counter = 0\n    for p0, p1 in edges:\n        a, b = p0 - p, p1 - p\n        if a.imag > b.imag:\n            a, b = b, a\n        crs = cross(a, b)\n        if a.imag <= 0 and 0 < b.imag and crs < 0:\n            counter += 1\n        if crs == 0 and dot(a, b) <= 0:\n            print(1)\n            break\n    else:\n        print(2 if counter % 2 else 0)"
  },
  {
    "language": "Python",
    "code": "import cmath\nimport math\nimport os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nPI = cmath.pi\nTAU = cmath.pi * 2\nEPS = 1e-8\n\n\nclass Point:\n    \"\"\"\n    2次元空間上の点\n    \"\"\"\n\n    # 反時計回り側にある\n    CCW_COUNTER_CLOCKWISE = 1\n    # 時計回り側にある\n    CCW_CLOCKWISE = -1\n    # 線分の後ろにある\n    CCW_ONLINE_BACK = 2\n    # 線分の前にある\n    CCW_ONLINE_FRONT = -2\n    # 線分上にある\n    CCW_ON_SEGMENT = 0\n\n    def __init__(self, c: complex):\n        self.c = c\n\n    @property\n    def x(self):\n        return self.c.real\n\n    @property\n    def y(self):\n        return self.c.imag\n\n    @staticmethod\n    def from_rect(x: float, y: float):\n        return Point(complex(x, y))\n\n    @staticmethod\n    def from_polar(r: float, phi: float):\n        return Point(cmath.rect(r, phi))\n\n    def __add__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c + p.c)\n\n    def __iadd__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c += p.c\n        return self\n\n    def __sub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c - p.c)\n\n    def __isub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c -= p.c\n        return self\n\n    def __mul__(self, f: float):\n        return Point(self.c * f)\n\n    def __imul__(self, f: float):\n        self.c *= f\n        return self\n\n    def __truediv__(self, f: float):\n        return Point(self.c / f)\n\n    def __itruediv__(self, f: float):\n        self.c /= f\n        return self\n\n    def __repr__(self):\n        return \"({}, {})\".format(round(self.x, 10), round(self.y, 10))\n\n    def __neg__(self):\n        return Point(-self.c)\n\n    def __eq__(self, p):\n        return abs(self.c - p.c) < EPS\n\n    def __abs__(self):\n        return abs(self.c)\n\n    @staticmethod\n    def ccw(a, b, c):\n        \"\"\"\n        線分 ab に対する c の位置\n        線分上にあるか判定するだけなら on_segment とかのが速い\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point a:\n        :param Point b:\n        :param Point c:\n        \"\"\"\n        b = b - a\n        c = c - a\n        det = b.det(c)\n        if det > EPS:\n            return Point.CCW_COUNTER_CLOCKWISE\n        if det < -EPS:\n            return Point.CCW_CLOCKWISE\n        if b.dot(c) < -EPS:\n            return Point.CCW_ONLINE_BACK\n        if c.norm() - b.norm() > EPS:\n            return Point.CCW_ONLINE_FRONT\n        return Point.CCW_ON_SEGMENT\n\n    def dot(self, p):\n        \"\"\"\n        内積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.x + self.y * p.y\n\n    def det(self, p):\n        \"\"\"\n        外積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.y - self.y * p.x\n\n    def dist(self, p):\n        \"\"\"\n        距離\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return abs(self.c - p.c)\n\n    def norm(self):\n        \"\"\"\n        原点からの距離\n        :rtype: float\n        \"\"\"\n        return abs(self.c)\n\n    def phase(self):\n        \"\"\"\n        原点からの角度\n        :rtype: float\n        \"\"\"\n        return cmath.phase(self.c)\n\n    def angle(self, p, q):\n        \"\"\"\n        p に向いてる状態から q まで反時計回りに回転するときの角度\n        -pi <= ret <= pi\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return (cmath.phase(q.c - self.c) - cmath.phase(p.c - self.c) + PI) % TAU - PI\n\n    def area(self, p, q):\n        \"\"\"\n        p, q となす三角形の面積\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return abs((p - self).det(q - self) / 2)\n\n    def projection_point(self, p, q, allow_outer=False):\n        \"\"\"\n        線分 pq を通る直線上に垂線をおろしたときの足の座標\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_outer: 答えが線分の間になくても OK\n        :rtype: Point|None\n        \"\"\"\n        diff_q = q - p\n        # 答えの p からの距離\n        r = (self - p).dot(diff_q) / abs(diff_q)\n        # 線分の角度\n        phase = diff_q.phase()\n\n        ret = Point.from_polar(r, phase) + p\n        if allow_outer or (p - ret).dot(q - ret) < EPS:\n            return ret\n        return None\n\n    def reflection_point(self, p, q):\n        \"\"\"\n        直線 pq を挟んで反対にある点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n        :param Point p:\n        :param Point q:\n        :rtype: Point\n        \"\"\"\n        # 距離\n        r = abs(self - p)\n        # pq と p-self の角度\n        angle = p.angle(q, self)\n        # 直線を挟んで角度を反対にする\n        angle = (q - p).phase() - angle\n        return Point.from_polar(r, angle) + p\n\n    def on_segment(self, p, q, allow_side=True):\n        \"\"\"\n        点が線分 pq の上に乗っているか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        :rtype: bool\n        \"\"\"\n        if not allow_side and (self == p or self == q):\n            return False\n        # 外積がゼロ: 面積がゼロ == 一直線\n        # 内積がマイナス: p - self - q の順に並んでる\n        return abs((p - self).det(q - self)) < EPS and (p - self).dot(q - self) < EPS\n\n\nclass Line:\n    \"\"\"\n    2次元空間上の直線\n    \"\"\"\n\n    def __init__(self, a: float, b: float, c: float):\n        \"\"\"\n        直線 ax + by + c = 0\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    @staticmethod\n    def from_gradient(grad: float, intercept: float):\n        \"\"\"\n        直線 y = ax + b\n        :param grad: 傾き\n        :param intercept: 切片\n        :return:\n        \"\"\"\n        return Line(grad, -1, intercept)\n\n    @staticmethod\n    def from_segment(p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        a = p2.y - p1.y\n        b = p1.x - p2.x\n        c = p2.y * (p2.x - p1.x) - p2.x * (p2.y - p1.y)\n        return Line(a, b, c)\n\n    @property\n    def gradient(self):\n        \"\"\"\n        傾き\n        \"\"\"\n        return INF if self.b == 0 else -self.a / self.b\n\n    @property\n    def intercept(self):\n        \"\"\"\n        切片\n        \"\"\"\n        return INF if self.b == 0 else -self.c / self.b\n\n    def is_parallel_to(self, l):\n        \"\"\"\n        平行かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の外積がゼロ\n        return abs(Point.from_rect(self.a, self.b).det(Point.from_rect(l.a, l.b))) < EPS\n\n    def is_orthogonal_to(self, l):\n        \"\"\"\n        直行しているかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の内積がゼロ\n        return abs(Point.from_rect(self.a, self.b).dot(Point.from_rect(l.a, l.b))) < EPS\n\n    def intersection_point(self, l):\n        \"\"\"\n        交差する点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n        FIXME: 誤差が気になる。EPS <= 1e-9 だと CGL_2_B ダメだった。\n        :param l:\n        :rtype: Point|None\n        \"\"\"\n        a1, b1, c1 = self.a, self.b, self.c\n        a2, b2, c2 = l.a, l.b, l.c\n        det = a1 * b2 - a2 * b1\n        if abs(det) < EPS:\n            # 並行\n            return None\n        x = (b1 * c2 - b2 * c1) / det\n        y = (a2 * c1 - a1 * c2) / det\n        return Point.from_rect(x, y)\n\n\nclass Segment:\n    \"\"\"\n    2次元空間上の線分\n    \"\"\"\n\n    def __init__(self, p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        self.p1 = p1\n        self.p2 = p2\n\n    def norm(self):\n        \"\"\"\n        線分の長さ\n        \"\"\"\n        return abs(self.p1 - self.p2)\n\n    def intersects_with(self, s, allow_side=True):\n        \"\"\"\n        交差するかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        :param Segment s:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        \"\"\"\n        l1 = Line.from_segment(self.p1, self.p2)\n        l2 = Line.from_segment(s.p1, s.p2)\n        if l1.is_parallel_to(l2):\n            # 並行なら線分の端点がもう片方の線分の上にあるかどうか\n            return (s.p1.on_segment(self.p1, self.p2, allow_side) or\n                    s.p2.on_segment(self.p1, self.p2, allow_side) or\n                    self.p1.on_segment(s.p1, s.p2, allow_side) or\n                    self.p2.on_segment(s.p1, s.p2, allow_side))\n        else:\n            # 直線同士の交点が線分の上にあるかどうか\n            p = l1.intersection_point(l2)\n            return p.on_segment(self.p1, self.p2, allow_side) and p.on_segment(s.p1, s.p2, allow_side)\n\n    def closest_point(self, p):\n        \"\"\"\n        線分上の、p に最も近い点\n        :param Point p:\n        \"\"\"\n        # p からおろした垂線までの距離\n        d = (p - self.p1).dot(self.p2 - self.p1) / self.norm()\n        # p1 より前\n        if d < EPS:\n            return self.p1\n        # p2 より後\n        if -EPS < d - self.norm():\n            return self.p2\n        # 線分上\n        return Point.from_polar(d, (self.p2 - self.p1).phase()) + self.p1\n\n    def dist(self, p):\n        \"\"\"\n        他の点との最短距離\n        :param Point p:\n        \"\"\"\n        return abs(p - self.closest_point(p))\n\n    def dist_segment(self, s):\n        \"\"\"\n        他の線分との最短距離\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\n        :param Segment s:\n        \"\"\"\n        if self.intersects_with(s):\n            return 0.0\n        return min(\n            self.dist(s.p1),\n            self.dist(s.p2),\n            s.dist(self.p1),\n            s.dist(self.p2),\n        )\n\n\nclass Polygon:\n    \"\"\"\n    2次元空間上の多角形\n    \"\"\"\n\n    def __init__(self, points):\n        \"\"\"\n        :param list of Point points:\n        \"\"\"\n        self.points = points\n\n    def iter2(self):\n        \"\"\"\n        隣り合う2点を順に返すイテレータ\n        :rtype: typing.Iterator[(Point, Point)]\n        \"\"\"\n        return zip(self.points, self.points[1:] + self.points[:1])\n\n    def iter3(self):\n        \"\"\"\n        隣り合う3点を順に返すイテレータ\n        :rtype: typing.Iterator[(Point, Point, Point)]\n        \"\"\"\n        return zip(self.points,\n                   self.points[1:] + self.points[:1],\n                   self.points[2:] + self.points[:2])\n\n    def area(self):\n        \"\"\"\n        面積\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja\n        \"\"\"\n        # 外積の和 / 2\n        dets = []\n        for p, q in self.iter2():\n            dets.append(p.det(q))\n        return abs(math.fsum(dets)) / 2\n\n    def is_convex(self, allow_straight=False, allow_collapsed=False):\n        \"\"\"\n        凸多角形かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=ja\n        :param allow_straight: 3点がまっすぐ並んでるのを許容するかどうか\n        :param allow_collapsed: 面積がゼロの場合を許容するか\n        \"\"\"\n        ccw = []\n        for a, b, c in self.iter3():\n            ccw.append(Point.ccw(a, b, c))\n        ccw = set(ccw)\n        if len(ccw) == 1:\n            if ccw == {Point.CCW_CLOCKWISE}:\n                return True\n            if ccw == {Point.CCW_COUNTER_CLOCKWISE}:\n                return True\n        if allow_straight and len(ccw) == 2:\n            if ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_CLOCKWISE}:\n                return True\n            if ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_COUNTER_CLOCKWISE}:\n                return True\n        if allow_collapsed and len(ccw) == 3:\n            return ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_ONLINE_BACK, Point.CCW_ON_SEGMENT}\n        return False\n\n    def has_point_on_edge(self, p):\n        \"\"\"\n        指定した点が辺上にあるか\n        :param Point p:\n        :rtype: bool\n        \"\"\"\n        for a, b in self.iter2():\n            if p.on_segment(a, b):\n                return True\n        return False\n\n    def contains(self, p, allow_on_edge=True):\n        \"\"\"\n        指定した点を含むか\n        Winding Number Algorithm\n        https://www.nttpc.co.jp/technology/number_algorithm.html\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja\n        :param Point p:\n        :param bool allow_on_edge: 辺上の点を許容するか\n        \"\"\"\n        angles = []\n        for a, b in self.iter2():\n            if p.on_segment(a, b):\n                return allow_on_edge\n            angles.append(p.angle(a, b))\n        # 一周以上するなら含む\n        return abs(math.fsum(angles)) > EPS\n\n    @staticmethod\n    def convex_hull(points, allow_straight=False):\n        \"\"\"\n        凸包。x が最も小さい点のうち y が最も小さい点から右回り。\n        Graham Scan O(N log N)\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=ja\n        :param list of Point points:\n        :param allow_straight: 3点がまっすぐ並んでるのを許容するかどうか\n        :rtype: Polygon\n        \"\"\"\n        points = points[:]\n        points.sort(key=lambda p: (p.x, p.y))\n\n        # allow_straight なら 0 を許容する\n        det_lower = -EPS if allow_straight else EPS\n\n        sz = 0\n        #: :type: list of (Point|None)\n        ret = [None] * (N * 2)\n        for p in points:\n            while sz > 1 and (ret[sz - 1] - ret[sz - 2]).det(p - ret[sz - 1]) < det_lower:\n                sz -= 1\n            ret[sz] = p\n            sz += 1\n        floor = sz\n        for p in reversed(points[:-1]):\n            while sz > floor and (ret[sz - 1] - ret[sz - 2]).det(p - ret[sz - 1]) < det_lower:\n                sz -= 1\n            ret[sz] = p\n            sz += 1\n        ret = ret[:sz - 1]\n\n        if allow_straight and len(ret) > len(points):\n            # allow_straight かつ全部一直線のときに二重にカウントしちゃう\n            ret = points\n        return Polygon(ret)\n\n\nN = int(sys.stdin.buffer.readline())\nGXY = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(N)]\nQ = int(sys.stdin.buffer.readline())\nXY = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(Q)]\n\npoints = []\nfor x, y in GXY:\n    points.append(Point(complex(x, y)))\npolygon = Polygon(points)\n\nfor x, y in XY:\n    p = Point(complex(x, y))\n    if polygon.has_point_on_edge(p):\n        print(1)\n    elif polygon.contains(p, allow_on_edge=False):\n        print(2)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\ng = []\nfor i in range(n):\n    g.append([int(i) for i in input().split()])\nq = int(input())\n\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\ndef contains(g, p):\n    x = False\n    for i in range(n):\n        a = sub(g[i], p)\n        b = sub(g[(i+1)%n], p)\n        if abs(cross(a, b)) == 0 and dot(a, b) < 0: \n            return 1\n        if a[1] > b[1]:\n            a,b=b,a\n        if a[1] < 0 and 0 < b[1] and abs(cross(a,b)) > 0:\n            x = not x\n    return 2 if x else 0\nfor i in range(q):\n    x,y = map(int, input().split())\n    print(contains(g, [x,y]))\n\n"
  },
  {
    "language": "Python",
    "code": "import cmath\nEPS = 1e-4\n\n#外積\ndef OuterProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.imag\n\n#内積\ndef InnerProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.real\n\n#点が線分上にあるか\ndef IsOnSegment(point, begin, end):\n\tif abs(OuterProduct(begin-point, end-point)) <= EPS and InnerProduct(begin-point, end-point) <= EPS:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef InsidePolygon(point, dots):\n\tres = 0\n\tfor i in range(len(dots)-1):\n\t\tres += cmath.phase((dots[i+1]-point) / (dots[i]-point))\n\tres += cmath.phase((dots[0]-point) / (dots[-1]-point))\n\tif abs(res) <= EPS:\n\t\treturn False\n\telse:\n\t\treturn True\n\nn = int(input())\ndots = []\nfor _ in range(n):\n\tx, y = map(int, input().split())\n\tdots.append(complex(x, y))\nans = []\n\ndef solve(p, dots):\n\tfor i in range(n-1):\n\t\tif IsOnSegment(p, dots[i], dots[i+1]):\n\t\t\treturn 1\n\tif IsOnSegment(p, dots[n-1], dots[0]):\n\t\treturn 1\n\tif InsidePolygon(p, dots):\n\t\treturn 2\n\telse:\n\t\treturn 0\n\nq = int(input())\nfor _ in range(q):\n\tx, y = map(int, input().split())\n\tp = complex(x, y)\n\tans.append(solve(p, dots))\n\nprint(*ans, sep=\"\\n\")\n"
  },
  {
    "language": "Rust",
    "code": "use std::f64::consts::PI;\n\nconst EPS: f64 = 1e-8;\n\nfn main() {\n    let mut sc = Scanner::new();\n\n    let g: Vec<Pt> = sc.next_vec_len();\n    let q: usize = sc.next();\n\n    for _ in 0..q {\n        let p: Pt = sc.next();\n        let ans = polygon_contains(&g, p);\n        println!(\n            \"{}\",\n            match ans {\n                PolygonContains::On => 1,\n                PolygonContains::In => 2,\n                PolygonContains::Out => 0,\n            }\n        );\n    }\n}\n\n//==========\n\npub fn cross(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).im\n}\n\npub fn dot(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).re\n}\n\n/// Positional relationship of 3-points\n#[derive(Debug, PartialEq, Eq, Clone, Copy)]\npub enum CCW {\n    /// a->b->c is counter clockwise\n    CounterClockwise = 1,\n    /// a->b->c is clockwise\n    Clockwise = -1,\n    /// c--a--b\n    OnLineBack = 2,\n    /// a--b--c\n    OnLineFront = -2,\n    /// a--c--b\n    OnSegment = 0,\n}\n\n/// Positional relationship of 3-points\npub fn ccw(a: Pt, b: Pt, c: Pt) -> CCW {\n    let b = b - a;\n    let c = c - a;\n    if cross(b, c) > 0.0 {\n        CCW::CounterClockwise\n    } else if cross(b, c) < 0.0 {\n        CCW::Clockwise\n    } else if dot(b, c) < 0.0 {\n        CCW::OnLineBack\n    } else if b.norm() < c.norm() {\n        CCW::OnLineFront\n    } else {\n        CCW::OnSegment\n    }\n}\n\n/// Signed area of triangle\npub fn triangle_area_signed(a: Pt, b: Pt, c: Pt) -> f64 {\n    cross(b - a, c - a) / 2.0\n}\n\n/// Area of polygon\npub fn polygon_area_signed(p: &[Pt]) -> f64 {\n    let mut ret = 0.0;\n    for r in p[1..].windows(2) {\n        ret += triangle_area_signed(p[0], r[0], r[1]);\n    }\n    ret\n}\n\n#[derive(Debug, Clone, PartialEq, Eq)]\npub enum PolygonContains {\n    On,\n    In,\n    Out,\n}\n\npub fn polygon_contains(poly: &[Pt], p: Pt) -> PolygonContains {\n    let n = poly.len();\n    let mut is_in = false;\n\n    for i in 0..poly.len() {\n        let a = poly[i] - p;\n        let b = poly[(i + 1) % n] - p;\n        let (a, b) = if a.im > b.im { (b, a) } else { (a, b) };\n\n        if (a.im <= 0.0 && 0.0 < b.im && cross(a, b) < 0.0) {\n            is_in = !is_in\n        };\n        if cross(a, b) == 0.0 && dot(a, b) <= 0.0 {\n            return PolygonContains::On;\n        }\n    }\n\n    if is_in {\n        PolygonContains::In\n    } else {\n        PolygonContains::Out\n    }\n}\n\npub fn is_convex(p: &[Pt]) -> bool {\n    let n = p.len();\n    for i in 0..n {\n        if ccw(p[i], p[(i + 1) % n], p[(i + 2) % n]) == CCW::Clockwise {\n            return false;\n        }\n    }\n    true\n}\n\npub fn projection(l: &LineSegment, p: Pt) -> Pt {\n    let t = dot(p - l.0, l.0 - l.1) / (l.0 - l.1).norm_sqr();\n    l.0 + (l.0 - l.1) * t\n}\n\npub struct Line(Pt, Pt);\npub struct LineSegment(Pt, Pt);\n\npub fn intersect_lines(a: &Line, b: &Line) -> bool {\n    cross(a.1 - a.0, b.1 - b.0) > EPS || cross(a.1 - a.0, b.0 - b.1) < EPS\n}\n\npub fn intersect_segment_pt(a: &LineSegment, p: Pt) -> bool {\n    (a.0 - p).norm() + (a.1 - p).norm() - (a.1 - a.0).norm() < EPS\n}\n\npub fn intersect_segments(a: &LineSegment, b: &LineSegment) -> bool {\n    ccw(a.0, a.1, b.0) as i32 * ccw(a.0, a.1, b.1) as i32 <= 0\n        && ccw(b.0, b.1, a.0) as i32 * ccw(b.0, b.1, a.1) as i32 <= 0\n}\n\npub fn distance_segment_pt(a: &LineSegment, p: Pt) -> f64 {\n    let r = projection(a, p);\n    if intersect_segment_pt(a, r) {\n        (r - p).norm()\n    } else {\n        (a.0 - p).norm().min((a.1 - p).norm())\n    }\n}\n\npub fn distance_segments(a: &LineSegment, b: &LineSegment) -> f64 {\n    if intersect_segments(a, b) {\n        return 0.0;\n    }\n    distance_segment_pt(a, b.0)\n        .min(distance_segment_pt(a, b.1))\n        .min(distance_segment_pt(b, a.0))\n        .min(distance_segment_pt(b, a.1))\n}\n\n#[derive(Debug)]\npub enum CrossLineSegment {\n    None,\n    Many,\n    One(Pt),\n}\n\nimpl CrossLineSegment {\n    fn ok(&self) -> Option<Pt> {\n        match self {\n            &CrossLineSegment::One(p) => Some(p.clone()),\n            _ => None,\n        }\n    }\n}\n\npub fn cross_line_segment(a: &LineSegment, b: &LineSegment) -> CrossLineSegment {\n    use CrossLineSegment::*;\n\n    let ccw_a_b0 = ccw(a.0, a.1, b.0);\n    let ccw_a_b1 = ccw(a.0, a.1, b.1);\n\n    let ccw_b_a0 = ccw(b.0, b.1, a.0);\n    let ccw_b_a1 = ccw(b.0, b.1, a.1);\n\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 == 0 {\n        if ccw_a_b1 == CCW::CounterClockwise || ccw_a_b1 == CCW::Clockwise {\n            return One(b.0);\n        } else if ccw_a_b0 == CCW::CounterClockwise || ccw_a_b0 == CCW::Clockwise {\n            return One(b.1);\n        } else {\n            return Many;\n        }\n    }\n\n    if ccw_b_a0 as i32 * ccw_b_a1 as i32 == 0 {\n        if ccw_b_a1 == CCW::CounterClockwise || ccw_b_a1 == CCW::Clockwise {\n            return One(a.0);\n        } else if ccw_b_a0 == CCW::CounterClockwise || ccw_b_a0 == CCW::Clockwise {\n            return One(a.1);\n        } else {\n            return Many;\n        }\n    }\n\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 == -4 || ccw_b_a0 as i32 * ccw_b_a1 as i32 == -4 {\n        return Many;\n    }\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 > 0 || ccw_b_a0 as i32 * ccw_b_a1 as i32 > 0 {\n        return None;\n    }\n\n    assert!(ccw_a_b0 as i32 * ccw_a_b1 as i32 == -1);\n    assert!(ccw_b_a0 as i32 * ccw_b_a1 as i32 == -1);\n\n    // normalize a to [(0, 0), (0, 1)]\n    let b0 = b.0 - a.0;\n    let b1 = b.1 - a.0;\n    let va = a.1 - a.0;\n\n    let b0 = b0 / va;\n    let b1 = b1 / va;\n    let vb = b1 - b0;\n\n    let t = -b0.im / vb.im;\n    assert!(t >= 0.0 && t <= 1.0);\n\n    One(b.0 + (b.1 - b.0) * t)\n}\n\n//==========\n\nuse std::fmt::Debug;\nuse std::ops::{Add, Div, Mul, Sub};\n\n#[derive(PartialEq, Eq, Copy, Clone, Hash, Debug, Default)]\n#[repr(C)]\npub struct Complex<T> {\n    /// Real portion of the complex number\n    pub re: T,\n    /// Imaginary portion of the complex number\n    pub im: T,\n}\n\nimpl<T> Complex<T> {\n    #[inline]\n    pub fn new(re: T, im: T) -> Self {\n        Complex { re, im }\n    }\n}\n\nimpl Complex<f64> {\n    #[inline]\n    pub fn conj(&self) -> Self {\n        Self::new(self.re.clone(), -self.im.clone())\n    }\n\n    #[inline]\n    pub fn norm(&self) -> f64 {\n        self.re.hypot(self.im)\n    }\n\n    #[inline]\n    pub fn norm_sqr(&self) -> f64 {\n        self.re.clone() * self.re.clone() + self.im.clone() * self.im.clone()\n    }\n\n    #[inline]\n    pub fn arg(&self) -> f64 {\n        self.im.atan2(self.re)\n    }\n}\n\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, rhs: Self) -> Self::Output {\n        Self::new(self.re + rhs.re, self.im + rhs.im)\n    }\n}\n\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, rhs: Self) -> Self::Output {\n        Self::new(self.re - rhs.re, self.im - rhs.im)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: Self) -> Self::Output {\n        Self::new(\n            self.re * rhs.re - self.im * rhs.im,\n            self.re * rhs.im + self.im * rhs.re,\n        )\n    }\n}\n\nimpl<T: Copy + Mul<Output = T>> Mul<T> for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: T) -> Self::Output {\n        Self::new(self.re * rhs, self.im * rhs)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, rhs: Self) -> Self::Output {\n        let d = rhs.re * rhs.re + rhs.im * rhs.im;\n        Self::new(\n            (self.re * rhs.re + self.im * rhs.im) / d,\n            (self.im * rhs.re - self.re * rhs.im) / d,\n        )\n    }\n}\n\nimpl<T: Copy + Div<Output = T>> Div<T> for Complex<T> {\n    type Output = Self;\n    fn div(self, rhs: T) -> Self::Output {\n        Self::new(self.re / rhs, self.im / rhs)\n    }\n}\n\ntype Pt = Complex<f64>;\n\n//==========\n\npub struct Scanner {\n    buf: Vec<char>,\n    cur: usize,\n}\n\nimpl Scanner {\n    pub fn new() -> Scanner {\n        Scanner {\n            buf: vec![],\n            cur: 0,\n        }\n    }\n\n    fn fill(&mut self) {\n        let mut s = String::new();\n        let len = std::io::stdin().read_line(&mut s).unwrap();\n        if len == 0 {\n            panic!(\"unexpected EOF\");\n        }\n        for c in s.chars() {\n            self.buf.push(c);\n        }\n    }\n\n    pub fn next_char(&mut self) -> char {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n        let ret = self.buf[self.cur];\n        self.cur += 1;\n        ret\n    }\n\n    pub fn next_word(&mut self) -> String {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n\n        let mut s = String::new();\n        while self.cur < self.buf.len() && !self.buf[self.cur].is_whitespace() {\n            s.push(self.buf[self.cur]);\n            self.cur += 1;\n        }\n        s\n    }\n\n    pub fn next<T: Reader>(&mut self) -> T {\n        T::read(self)\n    }\n\n    pub fn next_vec_len<T: Reader>(&mut self) -> Vec<T> {\n        let n: usize = self.next();\n        self.next_vec(n)\n    }\n\n    pub fn next_vec<T: Reader>(&mut self, n: usize) -> Vec<T> {\n        (0..n).map(|_| self.next()).collect()\n    }\n}\n\npub trait Reader {\n    fn read(sc: &mut Scanner) -> Self;\n}\n\nimpl<T: Reader> Reader for Complex<T> {\n    fn read(sc: &mut Scanner) -> Self {\n        Self::new(sc.next(), sc.next())\n    }\n}\n\nimpl Reader for char {\n    fn read(sc: &mut Scanner) -> Self {\n        sc.next_char()\n    }\n}\n\nmacro_rules! impl_for_from_str {\n    ($typ:ty) => {\n        impl Reader for $typ {\n            fn read(sc: &mut Scanner) -> Self {\n                sc.next_word().parse().unwrap()\n            }\n        }\n    };\n}\n\nimpl_for_from_str!(i8);\nimpl_for_from_str!(u8);\nimpl_for_from_str!(i16);\nimpl_for_from_str!(u16);\nimpl_for_from_str!(i32);\nimpl_for_from_str!(u32);\nimpl_for_from_str!(i64);\nimpl_for_from_str!(u64);\n// impl_for_from_str!(i128);\n// impl_for_from_str!(u128);\nimpl_for_from_str!(isize);\nimpl_for_from_str!(usize);\nimpl_for_from_str!(f32);\nimpl_for_from_str!(f64);\nimpl_for_from_str!(String);\n\n"
  }
]