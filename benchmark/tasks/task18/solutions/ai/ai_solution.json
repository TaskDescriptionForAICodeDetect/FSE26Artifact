[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "def solve(n, k):\n    n_str = str(n)\n    mod = 10 ** k\n    \n    # Try all possible deletions\n    min_deletions = len(n_str)\n    \n    # Iterate through all possible combinations of deletion\n    for mask in range(1 << len(n_str)):\n        # Build number after deletions\n        num_str = ''.join(n_str[i] for i in range(len(n_str)) if mask & (1 << i))\n        \n        # Skip if number starts with unnecessary leading zero\n        if len(num_str) > 1 and num_str[0] == '0':\n            continue\n        \n        # Convert to integer \n        if num_str == '':\n            num = 0\n        else:\n            num = int(num_str)\n        \n        # Check divisibility\n        if num % mod == 0:\n            deletions = len(n_str) - len(num_str)\n            min_deletions = min(min_deletions, deletions)\n    \n    return min_deletions\n\n# Read input\nn, k = map(int, input().split())\nprint(solve(n, k))",
    "timestamp": "2025-08-05 17:31:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "n, k = input().split()\nk = int(k)\ndigits = list(n)\ncount_zeros_needed = k\nremovals = 0\nlength = len(digits)\nnon_zero_count = 0\n\n# We need to find k zeros in the number, not necessarily consecutive\n# The zeros must have at least k non-leading zeros after processing\ntotal_zeros = digits.count('0')\nif total_zeros < k:\n    # Then we must delete all except one zero (to make the result 0)\n    removals = len(digits) - 1\nelse:\n    # We need to find k zeros, and the digits before the k-th zero must be removed except the necessary non-zeros\n    zero_positions = []\n    for i in range(len(digits)):\n        if digits[i] == '0':\n            zero_positions.append(i)\n    # The k-th zero is zero_positions[k-1]\n    # The number of non-zero digits before the k-th zero is (zero_positions[k-1] + 1 - k)\n    # Because we need to keep those zeros, but remove the non-zeros in between\n    # The total removals is the number of non-zero digits before the k-th zero\n    if k == 0:\n        removals = 0\n    else:\n        if len(zero_positions) >= k:\n            kth_zero_pos = zero_positions[k-1]\n            non_zero_before = 0\n            for i in range(kth_zero_pos):\n                if digits[i] != '0':\n                    non_zero_before += 1\n            removals = non_zero_before\n        else:\n            # This shouldn't happen as per problem statement\n            removals = len(digits) - 1\n\nprint(removals)",
    "timestamp": "2025-08-05 17:32:00"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def min_digits_to_remove(n, k):\n    n_str = str(n)\n    cnt = 0\n    zeros_needed = k\n    i = len(n_str) - 1\n\n    while zeros_needed > 0 and i >= 0:\n        if n_str[i] == '0':\n            zeros_needed -= 1\n        else:\n            cnt += 1\n        i -= 1\n\n    # If there are not enough zeros found, all must be removed for zero result\n    return cnt if zeros_needed == 0 else len(n_str) - 1\n\n# Read input\nn, k = map(int, input().split())\nprint(min_digits_to_remove(n, k))",
    "timestamp": "2025-08-12 21:41:31"
  }
]