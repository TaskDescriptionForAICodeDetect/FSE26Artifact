[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_CONTESTANTS 1000\n\nbool is_valid_tournament(char* chart, int* wins, int num_contestants) {\n    int actual_wins[MAX_CONTESTANTS] = {0};\n    int i, j, len;\n\n    len = strlen(chart);\n    for (i = 0; i < len; i += 3) {\n        int winner = chart[i] - 'A';\n        int loser = chart[i+1] - 'A';\n        \n        actual_wins[winner]++;\n    }\n\n    for (i = 0; i < num_contestants; i++) {\n        if (actual_wins[i] != wins[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    char chart[10001];\n    int wins[MAX_CONTESTANTS];\n    int num_contestants;\n\n    scanf(\"%d\", &num_contestants);\n    scanf(\"%s\", chart);\n\n    for (int i = 0; i < num_contestants; i++) {\n        scanf(\"%d\", &wins[i]);\n    }\n\n    printf(\"%s\\n\", is_valid_tournament(chart, wins, num_contestants) ? \"YES\" : \"NO\");\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:01:58"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_N 100\n\ntypedef struct {\n    int id;\n    int wins;\n} Contestant;\n\nContestant stack[MAX_N];\nint top = -1;\n\nvoid push(Contestant c) {\n    stack[++top] = c;\n}\n\nContestant pop() {\n    return stack[top--];\n}\n\nint is_digit(char c) {\n    return c >= '0' && c <= '9';\n}\n\nint main() {\n    char S[201];\n    int N;\n    scanf(\"%s\", S);\n    scanf(\"%d\", &N);\n    int wins[N + 1];\n    for (int i = 1; i <= N; i++) {\n        scanf(\"%d\", &wins[i]);\n    }\n\n    int len = strlen(S);\n    for (int i = 0; i < len; i++) {\n        if (S[i] == '(') {\n            continue;\n        } else if (S[i] == ')') {\n            Contestant c2 = pop();\n            Contestant c1 = pop();\n            if (c1.wins > 0 && c2.wins > 0) {\n                printf(\"NO\\n\");\n                return 0;\n            }\n            Contestant winner;\n            if (c1.wins > 0) {\n                winner.id = c1.id;\n                winner.wins = c1.wins - 1;\n            } else if (c2.wins > 0) {\n                winner.id = c2.id;\n                winner.wins = c2.wins - 1;\n            } else {\n                printf(\"NO\\n\");\n                return 0;\n            }\n            push(winner);\n        } else {\n            int num = 0;\n            while (i < len && is_digit(S[i])) {\n                num = num * 10 + (S[i] - '0');\n                i++;\n            }\n            i--;\n            Contestant c = {num, wins[num]};\n            push(c);\n        }\n    }\n\n    Contestant winner = pop();\n    if (winner.wins != 0) {\n        printf(\"NO\\n\");\n    } else {\n        printf(\"YES\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:02:23"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <map>\nusing namespace std;\n\nbool solve(string S, vector<int> W) {\n    int n = W.size();\n    map<char, int> winCount;\n    for (int i = 0; i < n; ++i) {\n        winCount['a' + i] = W[i];\n    }\n\n    stack<char> st;\n    for (char c : S) {\n        if (c == '(') {\n            continue;\n        } else if (c == ')') {\n            char b = st.top(); st.pop();\n            char a = st.top(); st.pop();\n            if (winCount[a] <= 0 && winCount[b] <= 0) {\n                return false;\n            }\n            if (winCount[a] > winCount[b]) {\n                winCount[a]--;\n                st.push(a);\n            } else if (winCount[b] > winCount[a]) {\n                winCount[b]--;\n                st.push(b);\n            } else {\n                return false;\n            }\n        } else {\n            st.push(c);\n        }\n    }\n\n    char winner = st.top(); st.pop();\n    if (!st.empty()) return false;\n    if (winCount[winner] != 0) return false;\n\n    for (auto& p : winCount) {\n        if (p.second < 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    string S;\n    cin >> S;\n    int n;\n    cin >> n;\n    vector<int> W(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> W[i];\n    }\n    cout << (solve(S, W) ? \"Yes\" : \"No\") << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:02:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class TournamentChart {\n    public String check(String[] S, int[] W) {\n        int n = W.length;\n        int[] actualWins = new int[n];\n        Stack<Integer> stack = new Stack<>();\n        \n        for (char c : S[0].toCharArray()) {\n            if (c == '(') {\n                stack.push(-1);\n            } else if (c == ')') {\n                List<Integer> players = new ArrayList<>();\n                while (stack.peek() != -1) {\n                    players.add(stack.pop());\n                }\n                stack.pop(); // remove the '('\n                if (players.size() != 2) {\n                    return \"Invalid\";\n                }\n                int a = players.get(0);\n                int b = players.get(1);\n                if (W[a] > W[b]) {\n                    actualWins[a]++;\n                    stack.push(a);\n                } else if (W[b] > W[a]) {\n                    actualWins[b]++;\n                    stack.push(b);\n                } else {\n                    return \"Invalid\";\n                }\n            } else {\n                int player = c - '0';\n                stack.push(player);\n            }\n        }\n        \n        if (stack.size() != 1) {\n            return \"Invalid\";\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (actualWins[i] != W[i]) {\n                return \"Invalid\";\n            }\n        }\n        \n        return \"Valid\";\n    }\n}",
    "timestamp": "2025-08-05 22:02:55"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class JAGTournamentValidator {\n    public static boolean validateTournamentWins(String chart, int[] reportedWins) {\n        int n = reportedWins.length;\n        boolean[][] matches = new boolean[n][n];\n        \n        // Parse tournament chart\n        for (char c : chart.toCharArray()) {\n            if (c >= '0' && c <= '9') {\n                int winner = c - '0';\n                int loser = c + 1 - '0';\n                matches[winner][loser] = true;\n            }\n        }\n        \n        // Check win consistency\n        for (int i = 0; i < n; i++) {\n            int actualWins = 0;\n            for (int j = 0; j < n; j++) {\n                if (i != j && matches[i][j]) {\n                    actualWins++;\n                }\n            }\n            if (actualWins != reportedWins[i]) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}",
    "timestamp": "2025-08-05 22:02:59"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    string S;\n    cin >> n >> S;\n    \n    vector<int> wins(n);\n    for (int i = 0; i < n; i++) {\n        cin >> wins[i];\n    }\n    \n    vector<bool> eliminated(n, false);\n    \n    for (char c : S) {\n        int a = c - '1';\n        int b = c + 1 - '1';\n        \n        if (eliminated[a] || eliminated[b]) continue;\n        \n        if (wins[a] > wins[b]) {\n            eliminated[b] = true;\n        } else if (wins[a] < wins[b]) {\n            eliminated[a] = true;\n        } else {\n            cout << \"No\" << endl;\n            return 0;\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        int possibleWins = 0;\n        for (int j = 0; j < n; j++) {\n            if (i != j && !eliminated[j]) {\n                possibleWins++;\n            }\n        }\n        \n        if (wins[i] > possibleWins) {\n            cout << \"No\" << endl;\n            return 0;\n        }\n    }\n    \n    cout << \"Yes\" << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:03:05"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_reported_wins_consistent(chart, wins):\n    from collections import defaultdict\n    \n    def count_wins(s, i):\n        if s[i].isdigit():\n            id_ = int(s[i])\n            win_count[id_] += 1\n            return id_, i + 1\n        if s[i] != '(':\n            return None, i\n        i += 1\n        left_winner, i = count_wins(s, i)\n        i += 1\n        right_winner, i = count_wins(s, i)\n        i += 1\n        if left_winner is not None and right_winner is not None:\n            win_count[left_winner] += 1\n            return left_winner, i\n        if left_winner is not None:\n            return left_winner, i\n        return right_winner, i\n\n    win_count = defaultdict(int)\n    count_wins(chart, 0)\n    n = len(wins)\n    for i in range(n):\n        if win_count[i] != wins[i]:\n            return False\n    return True\n\n# Example use case\nchart = \"((0(10))(2(3(4)))(52))\"\nwins = [2, 1, 2, 1, 0, 2, 0, 0, 0, 0, 0]\nprint(is_reported_wins_consistent(chart, wins))  # True or False",
    "timestamp": "2025-08-13 08:37:50"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class TournamentValidator {\n    public boolean validateTournament(String chart, Map<Character, Integer> reportedWins) {\n        Map<Character, Integer> actualWins = new HashMap<>();\n        \n        Stack<Character> stack = new Stack<>();\n        for (char ch : chart.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                stack.push(ch);\n            } else if (Character.isUpperCase(ch)) {\n                if (stack.size() < 2) {\n                    return false;\n                }\n                char c1 = stack.pop();\n                char c2 = stack.pop();\n                if (ch == Character.toUpperCase(c1)) {\n                    actualWins.put(c1, actualWins.getOrDefault(c1, 0) + 1);\n                } else if (ch == Character.toUpperCase(c2)) {\n                    actualWins.put(c2, actualWins.getOrDefault(c2, 0) + 1);\n                }\n                stack.push(ch);\n            }\n        }\n        \n        if (stack.size() != 1) {\n            return false;\n        }\n        \n        for (Map.Entry<Character, Integer> entry : reportedWins.entrySet()) {\n            if (!actualWins.getOrDefault(entry.getKey(), 0).equals(entry.getValue())) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}",
    "timestamp": "2025-08-13 08:37:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <ctype.h>\n\n#define MAX_CONTESTANTS 256\n\nbool validateWins(const char* tournamentChart, int* reportedWins, int contestantCount) {\n    int wins[MAX_CONTESTANTS] = {0};\n    int matchStack[MAX_CONTESTANTS];\n    int stackSize = 0;\n    \n    for (int i = 0; tournamentChart[i] != '\\0'; i++) {\n        if (isalpha(tournamentChart[i])) {\n            matchStack[stackSize++] = tournamentChart[i] - 'A';\n        } else if (tournamentChart[i] == ')') {\n            int winner = matchStack[--stackSize];\n            int loser1 = matchStack[--stackSize];\n            int loser2 = matchStack[--stackSize];\n            \n            wins[winner]++;\n            matchStack[stackSize++] = winner;\n        }\n    }\n    \n    for (int i = 0; i < contestantCount; i++) {\n        if (wins[i] != reportedWins[i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    const char* tournamentChart = \"(A(B(CD)))\";\n    int reportedWins[] = {2, 1, 0, 0}; // A, B, C, D\n    int contestantCount = 4; // Number of contestants\n    \n    if (validateWins(tournamentChart, reportedWins, contestantCount)) {\n        printf(\"The reported wins are consistent.\\n\");\n    } else {\n        printf(\"The reported wins are inconsistent.\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 08:38:03"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_valid_tournament(S, wins):\n    N = len(wins)\n    contestants = list(range(N))\n    \n    def simulate_matches(remaining):\n        if len(remaining) == 1:\n            return remaining\n        \n        next_round = []\n        for i in range(0, len(remaining), 2):\n            if i + 1 < len(remaining):\n                winner = int(S[i//2]) - 1\n                next_round.append(remaining[winner])\n        \n        if len(remaining) % 2 == 1:\n            next_round.append(remaining[-1])\n        \n        return simulate_matches(next_round)\n    \n    def count_wins(contestant):\n        total_wins = 0\n        current = contestant\n        round_matches = S\n        \n        while round_matches:\n            round_index = round_matches.index(str(current + 1))\n            if round_index % 2 == 0:\n                if round_matches[round_index + 1] != '0':\n                    total_wins += 1\n            else:\n                if round_matches[round_index - 1] != '0':\n                    total_wins += 1\n            \n            round_matches = round_matches[len(round_matches)//2:]\n            current = round_index // 2\n        \n        return total_wins\n    \n    for i in range(N):\n        if count_wins(i) != wins[i]:\n            return False\n    \n    return True",
    "timestamp": "2025-08-13 08:38:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    from collections import defaultdict\n\n    S = sys.stdin.readline().strip()\n    wins = defaultdict(int)\n    stack = []\n    \n    for c in S:\n        if c.islower():\n            stack.append([c])\n        else:\n            right = stack.pop()\n            left = stack.pop()\n            merged = left + right\n            winner = None\n            if len(left) == 1 and len(right) == 1:\n                # This is a match between two players\n                winner = c.lower()\n                wins[winner] += 1\n            else:\n                # At least one is a team, find the representative\n                left_rep = left[0]\n                right_rep = right[0]\n                if c.isupper():\n                    # Winner is left team's representative\n                    winner = left_rep\n                    wins[winner] += 1\n                else:\n                    # Winner is right team's representative\n                    winner = right_rep\n                    wins[winner] += 1\n            merged = [winner] + merged\n            stack.append(merged)\n    \n    # Now check the input counts\n    input_counts = sys.stdin.readline().split()\n    contestants = sorted(wins.keys())\n    input_pairs = []\n    for i in range(0, len(input_counts), 2):\n        contestant = input_counts[i]\n        count = int(input_counts[i+1])\n        input_pairs.append((contestant, count))\n    \n    # Check if all contestants in input are in the winners\n    input_contestants = set(c for c, _ in input_pairs)\n    if not input_contestants.issubset(set(contestants)):\n        print(\"NO\")\n        return\n    \n    # Create a dictionary for input counts\n    input_dict = {c: cnt for c, cnt in input_pairs}\n    \n    # Check all contestants in input_dict\n    for c in input_dict:\n        if wins[c] != input_dict[c]:\n            print(\"NO\")\n            return\n    \n    # Also, check if any contestant not in input_dict has wins > 0\n    for c in contestants:\n        if c not in input_dict and wins[c] > 0:\n            print(\"NO\")\n            return\n    \n    print(\"YES\")\n\nsolve()",
    "timestamp": "2025-08-13 08:38:33"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <stack>\n\nbool isValidWinCounts(const std::string& S, const std::unordered_map<char, int>& reportedWins) {\n    std::unordered_map<char, int> actualWins;\n    std::stack<char> tournamentStack;\n    \n    for (char ch : S) {\n        if (actualWins.find(ch) == actualWins.end()) {\n            actualWins[ch] = 0;\n        }\n        tournamentStack.push(ch);\n    }\n\n    while (!tournamentStack.empty()) {\n        char winner = tournamentStack.top(); tournamentStack.pop();\n        char loser = tournamentStack.empty() ? 0 : tournamentStack.top(); tournamentStack.pop();\n        \n        if (loser) {\n            actualWins[winner]++;\n        }\n    }\n    \n    for (auto& entry : reportedWins) {\n        if (actualWins[entry.first] != entry.second) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    std::string tournamentChart = \"ABAC\";\n    std::unordered_map<char, int> reportedWins = { {'A', 2}, {'B', 1}, {'C', 0} };\n    \n    if (isValidWinCounts(tournamentChart, reportedWins)) {\n        std::cout << \"Win counts are consistent.\" << std::endl;\n    } else {\n        std::cout << \"Win counts are not consistent.\" << std::endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:47:16"
  }
]