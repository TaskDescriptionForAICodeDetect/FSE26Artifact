[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <limits.h>\n\n#define MAX_N 20\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\nint solve(int N, int A[], int B[]) {\n    int minCycle = INT_MAX;\n    int perm[MAX_N];\n    \n    for (int i = 0; i < N; i++) {\n        perm[i] = i;\n    }\n    \n    do {\n        int totalWeight = 0;\n        for (int i = 0; i < N; i++) {\n            int curr = perm[i];\n            int next = perm[(i + 1) % N];\n            totalWeight += min(A[curr], B[next]);\n        }\n        \n        if (totalWeight < minCycle) {\n            minCycle = totalWeight;\n        }\n    } while (next_permutation(perm, N));\n    \n    return minCycle;\n}\n\nint next_permutation(int* arr, int n) {\n    int i = n - 2;\n    while (i >= 0 && arr[i] >= arr[i + 1]) {\n        i--;\n    }\n    \n    if (i < 0) return 0;\n    \n    int j = n - 1;\n    while (j > i && arr[j] <= arr[i]) {\n        j--;\n    }\n    \n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    \n    int left = i + 1;\n    int right = n - 1;\n    \n    while (left < right) {\n        temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n    \n    return 1;\n}\n\nint main() {\n    int N;\n    int A[MAX_N], B[MAX_N];\n    \n    scanf(\"%d\", &N);\n    \n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    \n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &B[i]);\n    }\n    \n    int result = solve(N, A, B);\n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 23:01:13"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <limits.h>\n\n#define MAX_N 8\n\nint N;\nint A[MAX_N], B[MAX_N];\nint visited[MAX_N];\nint min_total = INT_MAX;\n\nvoid dfs(int current, int depth, int total) {\n    if (depth == N) {\n        total += min(A[current], B[0]);\n        if (total < min_total) {\n            min_total = total;\n        }\n        return;\n    }\n    for (int i = 0; i < N; i++) {\n        if (!visited[i]) {\n            visited[i] = 1;\n            dfs(i, depth + 1, total + min(A[current], B[i]));\n            visited[i] = 0;\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d\", &N);\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d %d\", &A[i], &B[i]);\n    }\n    for (int i = 0; i < N; i++) {\n        visited[i] = 1;\n        dfs(i, 1, 0);\n        visited[i] = 0;\n    }\n    printf(\"%d\\n\", min_total);\n    return 0;\n}",
    "timestamp": "2025-08-05 23:01:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<int> A(N), B(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> A[i];\n    }\n    for (int i = 0; i < N; ++i) {\n        cin >> B[i];\n    }\n\n    sort(A.begin(), A.end());\n    sort(B.begin(), B.end());\n\n    long long total = 0;\n    for (int i = 0; i < N; ++i) {\n        total += max(A[i], B[i]);\n    }\n\n    cout << total << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 23:01:34"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int[] A = new int[N];\n        int[] B = new int[N];\n        \n        for (int i = 0; i < N; i++) {\n            A[i] = scanner.nextInt();\n            B[i] = scanner.nextInt();\n        }\n        \n        Arrays.sort(A);\n        Arrays.sort(B);\n        \n        long totalWeight = 0;\n        for (int i = 0; i < N; i++) {\n            totalWeight += Math.max(A[i], B[i]);\n        }\n        \n        System.out.println(totalWeight);\n    }\n}",
    "timestamp": "2025-08-05 23:01:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    public static long minimumCycleCost(int N, int[] A, int[] B) {\n        long[][] graph = new long[N][N];\n        \n        // Build the graph\n        for (int x = 0; x < N; x++) {\n            for (int y = 0; y < N; y++) {\n                graph[x][y] = Math.min(A[x], B[y]);\n            }\n        }\n        \n        // Try all possible starting permutations\n        long minCost = Long.MAX_VALUE;\n        int[] perm = new int[N];\n        for (int i = 0; i < N; i++) {\n            perm[i] = i;\n        }\n        \n        do {\n            long currentCost = 0;\n            for (int i = 0; i < N; i++) {\n                int from = perm[i];\n                int to = perm[(i + 1) % N];\n                currentCost += graph[from][to];\n            }\n            minCost = Math.min(minCost, currentCost);\n        } while (nextPermutation(perm));\n        \n        return minCost;\n    }\n    \n    private static boolean nextPermutation(int[] arr) {\n        int i = arr.length - 2;\n        while (i >= 0 && arr[i] >= arr[i + 1]) {\n            i--;\n        }\n        \n        if (i < 0) return false;\n        \n        int j = arr.length - 1;\n        while (j > i && arr[j] <= arr[i]) {\n            j--;\n        }\n        \n        swap(arr, i, j);\n        reverse(arr, i + 1, arr.length - 1);\n        \n        return true;\n    }\n    \n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    private static void reverse(int[] arr, int start, int end) {\n        while (start < end) {\n            swap(arr, start++, end--);\n        }\n    }\n}",
    "timestamp": "2025-08-05 23:01:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMinCycle(vector<int>& A, vector<int>& B) {\n        int N = A.size();\n        vector<vector<int>> weights(N, vector<int>(N));\n        \n        // Compute edge weights\n        for (int x = 0; x < N; x++) {\n            for (int y = 0; y < N; y++) {\n                weights[x][y] = min(A[x], B[y]);\n            }\n        }\n        \n        // Try all possible permutations\n        vector<int> perm(N);\n        for (int i = 0; i < N; i++) {\n            perm[i] = i;\n        }\n        \n        int minCycleWeight = INT_MAX;\n        do {\n            int cycleWeight = 0;\n            \n            // Compute cycle weight for current permutation\n            for (int i = 0; i < N; i++) {\n                int curr = perm[i];\n                int next = perm[(i + 1) % N];\n                cycleWeight += weights[curr][next];\n            }\n            \n            minCycleWeight = min(minCycleWeight, cycleWeight);\n        } while (next_permutation(perm.begin(), perm.end()));\n        \n        return minCycleWeight;\n    }\n};",
    "timestamp": "2025-08-05 23:01:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from itertools import permutations\n\ndef min_cycle_weight(N, A, B):\n    def calculate_weight(permutation):\n        weight = 0\n        for i in range(N):\n            x = permutation[i]\n            y = permutation[(i + 1) % N]\n            weight += min(A[x], B[y])\n        return weight\n    \n    vertices = list(range(N))\n    min_weight = float('inf')\n    \n    for perm in permutations(vertices):\n        cycle_weight = calculate_weight(perm)\n        min_weight = min(min_weight, cycle_weight)\n    \n    return min_weight\n\n# Example usage:\n# N = 3\n# A = [1, 2, 3]\n# B = [3, 2, 1]\n# result = min_cycle_weight(N, A, B)\n# print(result)",
    "timestamp": "2025-08-13 13:20:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Arrays;\n\npublic class MinWeightCycle {\n    private static final int INF = Integer.MAX_VALUE / 2;\n\n    public static int minCycleWeight(int N, int[] A, int[] B) {\n        int[][] dp = new int[1 << N][N];\n        for (int[] row : dp) Arrays.fill(row, INF);\n        int[][] weights = new int[N][N];\n\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                weights[i][j] = Math.min(A[i], B[j]);\n            }\n        }\n\n        for (int i = 0; i < N; i++) dp[1 << i][i] = 0;\n\n        for (int mask = 1; mask < (1 << N); mask++) {\n            for (int u = 0; u < N; u++) {\n                if ((mask & (1 << u)) != 0) {\n                    for (int v = 0; v < N; v++) {\n                        if ((mask & (1 << v)) == 0) {\n                            dp[mask | (1 << v)][v] = Math.min(\n                                    dp[mask | (1 << v)][v],\n                                    dp[mask][u] + weights[u][v]);\n                        }\n                    }\n                }\n            }\n        }\n\n        int minCycleWeight = INF;\n        for (int i = 0; i < N; i++) {\n            minCycleWeight = Math.min(minCycleWeight, dp[(1 << N) - 1][i] + weights[i][0]);\n        }\n        \n        return minCycleWeight >= INF ? -1 : minCycleWeight;\n    }\n\n    public static void main(String[] args) {\n        int N = 4;\n        int[] A = {4, 2, 3, 1};\n        int[] B = {2, 3, 1, 4};\n\n        int result = minCycleWeight(N, A, B);\n        System.out.println(result);\n    }\n}",
    "timestamp": "2025-08-13 13:20:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <limits.h>\n\n#define MAXN 16\n\nint N;\nint A[MAXN];\nint B[MAXN];\nint dp[1 << MAXN][MAXN];\nint graph[MAXN][MAXN];\n\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}\n\nvoid build_graph() {\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            graph[i][j] = min(A[i], B[j]);\n        }\n    }\n}\n\nint tsp(int mask, int pos) {\n    if (mask == (1 << N) - 1)\n        return graph[pos][0];\n    if (dp[mask][pos] != -1)\n        return dp[mask][pos];\n\n    int ans = INT_MAX;\n    for (int next = 0; next < N; ++next) {\n        if (!(mask & (1 << next))) {\n            int new_ans = graph[pos][next] + tsp(mask | (1 << next), next);\n            if (new_ans < ans) {\n                ans = new_ans;\n            }\n        }\n    }\n    return dp[mask][pos] = ans;\n}\n\nint main() {\n    scanf(\"%d\", &N);\n    for (int i = 0; i < N; ++i) {\n        scanf(\"%d%d\", &A[i], &B[i]);\n    }\n\n    build_graph();\n\n    for (int i = 0; i < (1 << N); ++i) {\n        for (int j = 0; j < N; ++j) {\n            dp[i][j] = -1;\n        }\n    }\n\n    printf(\"%d\\n\", tsp(1, 0));\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 13:20:42"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nconst int INF = 1e9;\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<int> A(N), B(N);\n    \n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i] >> B[i];\n    }\n    \n    std::vector<std::vector<int>> weight(N, std::vector<int>(N));\n    for (int x = 0; x < N; ++x) {\n        for (int y = 0; y < N; ++y) {\n            weight[x][y] = (x != y) ? std::min(A[x], B[y]) : INF;\n        }\n    }\n\n    std::vector<int> vertices(N);\n    for (int i = 0; i < N; ++i) {\n        vertices[i] = i;\n    }\n\n    int min_cycle_weight = INF;\n    do {\n        int current_weight = 0;\n        for (int i = 0; i < N; ++i) {\n            current_weight += weight[vertices[i]][vertices[(i + 1) % N]];\n        }\n        min_cycle_weight = std::min(min_cycle_weight, current_weight);\n    } while (std::next_permutation(vertices.begin(), vertices.end()));\n    \n    std::cout << min_cycle_weight << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 13:20:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def find_min_cycle_weight(N, A, B):\n    # Initialize minimum cycle weight to a large value\n    min_cycle_weight = float('inf')\n    \n    # Try all possible starting vertices\n    for start in range(N):\n        # Current permutation of vertices\n        perm = list(range(N))\n        perm.remove(start)\n        \n        # Try all permutations\n        from itertools import permutations\n        for p in permutations(perm):\n            # Reconstruct full cycle\n            cycle = [start] + list(p) + [start]\n            \n            # Calculate cycle weight\n            cycle_weight = 0\n            for i in range(N):\n                cycle_weight += min(A[cycle[i]], B[cycle[i+1]])\n            \n            # Update minimum cycle weight\n            min_cycle_weight = min(min_cycle_weight, cycle_weight)\n    \n    return min_cycle_weight\n\n# Example usage\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nprint(find_min_cycle_weight(N, A, B))",
    "timestamp": "2025-08-13 13:20:50"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef solve():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n    \n    min_A = min(A)\n    min_B = min(B)\n    \n    # The minimal possible cycle is either:\n    # 1. The minimal A_i and B_i are from the same vertex, then the cycle is that vertex alone (but N >= 2)\n    # 2. Otherwise, the best is to pair min_A and min_B in a cycle of two vertices (if N >= 2)\n    # For N >= 3, the minimal total is max(N * min_A, N * min_B, min_A + min_B + (N-2)*min_AB)\n    # where min_AB is the minimal between all A_i and B_i\n    \n    min_AB = min(min_A, min_B)\n    total1 = N * min_A\n    total2 = N * min_B\n    total3 = min_A + min_B + (N - 2) * min_AB\n    \n    res = min(total1, total2, total3)\n    print(res)\n\nsolve()",
    "timestamp": "2025-08-13 13:21:04"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function findMinimumCycle(N, A, B) {\n    const INF = Number.MAX_SAFE_INTEGER;\n    const adjMatrix = Array.from({ length: N }, () => Array(N).fill(INF));\n\n    // Build the adjacency matrix\n    for (let x = 0; x < N; x++) {\n        for (let y = 0; y < N; y++) {\n            if (x !== y) {\n                adjMatrix[x][y] = Math.min(A[x], B[y]);\n            }\n        }\n    }\n\n    // DP table where dp[mask][i] is the minimum weight to visit set `mask` and end at i\n    const dp = Array.from({ length: 1 << N }, () => Array(N).fill(INF));\n    for (let i = 0; i < N; i++) {\n        dp[1 << i][i] = 0;  // Start visiting from each vertex\n    }\n\n    for (let mask = 0; mask < (1 << N); mask++) {\n        for (let i = 0; i < N; i++) {\n            if (mask & (1 << i)) {\n                for (let j = 0; j < N; j++) {\n                    if (!(mask & (1 << j))) {\n                        const nextMask = mask | (1 << j);\n                        dp[nextMask][j] = Math.min(dp[nextMask][j], dp[mask][i] + adjMatrix[i][j]);\n                    }\n                }\n            }\n        }\n    }\n\n    let minCycleWeight = INF;\n    for (let i = 0; i < N; i++) {\n        minCycleWeight = Math.min(minCycleWeight, dp[(1 << N) - 1][i] + adjMatrix[i][0]);\n    }\n\n    return minCycleWeight;\n}\n\n// Example usage:\nconst N = 3;\nconst A = [1, 3, 5];\nconst B = [2, 7, 8];\nconsole.log(findMinimumCycle(N, A, B)); // Output: should be the minimum weight of the cycle",
    "timestamp": "2025-08-13 13:21:21"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function minCycleCost(N, A, B) {\n    let minCost = Infinity;\n    \n    for (let start = 0; start < N; start++) {\n        let path = new Array(N).fill(-1);\n        let visited = new Array(N).fill(false);\n        let currentCost = 0;\n        let current = start;\n        \n        for (let step = 0; step < N; step++) {\n            visited[current] = true;\n            let nextVertex = -1;\n            let minWeight = Infinity;\n            \n            for (let next = 0; next < N; next++) {\n                if (!visited[next]) {\n                    let weight = Math.min(A[current], B[next]);\n                    if (weight < minWeight) {\n                        minWeight = weight;\n                        nextVertex = next;\n                    }\n                }\n            }\n            \n            if (nextVertex === -1) break;\n            \n            path[step] = current;\n            currentCost += minWeight;\n            current = nextVertex;\n        }\n        \n        if (path.filter(x => x !== -1).length === N) {\n            let finalWeight = Math.min(A[current], B[start]);\n            currentCost += finalWeight;\n            minCost = Math.min(minCost, currentCost);\n        }\n    }\n    \n    return minCost;\n}",
    "timestamp": "2025-08-13 13:21:30"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function solve() {\n    const readline = require('readline');\n    const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n\n    let N;\n    let A = [];\n    let B = [];\n    let linesRead = 0;\n\n    rl.on('line', (line) => {\n        if (linesRead === 0) {\n            N = parseInt(line.trim());\n            linesRead++;\n        } else if (linesRead <= N) {\n            const [a, b] = line.trim().split(' ').map(Number);\n            A.push(a);\n            B.push(b);\n            linesRead++;\n            if (linesRead > N) {\n                rl.close();\n            }\n        }\n    });\n\n    rl.on('close', () => {\n        let sumA = A.reduce((acc, val) => acc + val, 0);\n        let sumB = B.reduce((acc, val) => acc + val, 0);\n        let minA = Math.min(...A);\n        let minB = Math.min(...B);\n        let result = Math.min(sumA, sumB, minA + minB);\n        console.log(result);\n    });\n}\n\nsolve();",
    "timestamp": "2025-08-13 13:21:37"
  }
]