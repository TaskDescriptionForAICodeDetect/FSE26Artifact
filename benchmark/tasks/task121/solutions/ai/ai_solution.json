[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <limits.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int image[N][N];\n    \n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            scanf(\"%d\", &image[i][j]);\n        }\n    }\n    \n    int max_sum = INT_MIN;\n    \n    for (int x1 = 0; x1 < N; x1++) {\n        for (int y1 = 0; y1 < N; y1++) {\n            for (int x2 = x1; x2 < N; x2++) {\n                for (int y2 = y1; y2 < N; y2++) {\n                    int sum = 0;\n                    for (int i = x1; i <= x2; i++) {\n                        for (int j = y1; j <= y2; j++) {\n                            if (i == x1 || i == x2 || j == y1 || j == y2) {\n                                sum += image[i][j];\n                            }\n                        }\n                    }\n                    if (sum > max_sum) {\n                        max_sum = sum;\n                    }\n                }\n            }\n        }\n    }\n    \n    printf(\"%d\\n\", max_sum);\n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:17"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ImageBorderExtraction {\n    public static int findMaxBorderSum(int[][] image) {\n        int n = image.length;\n        int maxSum = Integer.MIN_VALUE;\n\n        // Iterate through all possible border configurations\n        for (int top = 0; top < n; top++) {\n            for (int bottom = top; bottom < n; bottom++) {\n                for (int left = 0; left < n; left++) {\n                    for (int right = left; right < n; right++) {\n                        int borderSum = calculateBorderSum(image, top, bottom, left, right);\n                        maxSum = Math.max(maxSum, borderSum);\n                    }\n                }\n            }\n        }\n        return maxSum;\n    }\n\n    private static int calculateBorderSum(int[][] image, int top, int bottom, int left, int right) {\n        int sum = 0;\n        \n        // Top border\n        for (int j = left; j <= right; j++) {\n            sum += image[top][j];\n        }\n        \n        // Bottom border\n        for (int j = left; j <= right; j++) {\n            sum += image[bottom][j];\n        }\n        \n        // Left border (excluding corners already counted)\n        for (int i = top + 1; i < bottom; i++) {\n            sum += image[i][left];\n        }\n        \n        // Right border (excluding corners already counted)\n        for (int i = top + 1; i < bottom; i++) {\n            sum += image[i][right];\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[][] image = {\n            {1, 2, 3, 4},\n            {5, 6, 7, 8},\n            {9, 10, 11, 12},\n            {13, 14, 15, 16}\n        };\n        \n        System.out.println(findMaxBorderSum(image));\n    }\n}",
    "timestamp": "2025-08-05 18:42:24"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <climits>\n\nusing namespace std;\n\nint maxBorderSum(vector<vector<int>>& matrix) {\n    int N = matrix.size();\n    if (N == 0) return 0;\n    \n    int maxSum = INT_MIN;\n    \n    for (int top = 0; top < N; ++top) {\n        for (int bottom = top; bottom < N; ++bottom) {\n            for (int left = 0; left < N; ++left) {\n                for (int right = left; right < N; ++right) {\n                    int sum = 0;\n                    // Top border\n                    for (int j = left; j <= right; ++j) {\n                        sum += matrix[top][j];\n                    }\n                    // Bottom border (if different from top)\n                    if (bottom > top) {\n                        for (int j = left; j <= right; ++j) {\n                            sum += matrix[bottom][j];\n                        }\n                    }\n                    // Left border (excluding corners if already counted)\n                    if (right > left) {\n                        for (int i = top + 1; i < bottom; ++i) {\n                            sum += matrix[i][left];\n                        }\n                    }\n                    // Right border (excluding corners if already counted)\n                    if (right > left) {\n                        for (int i = top + 1; i < bottom; ++i) {\n                            sum += matrix[i][right];\n                        }\n                    }\n                    if (sum > maxSum) {\n                        maxSum = sum;\n                    }\n                }\n            }\n        }\n    }\n    \n    return maxSum;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<vector<int>> matrix(N, vector<int>(N));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            cin >> matrix[i][j];\n        }\n    }\n    cout << maxBorderSum(matrix) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:43"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <limits.h>\n\n#define MAX_N 100\n\nint image[MAX_N][MAX_N];\nint N;\n\nint calculate_border_sum(int top, int left, int height, int width) {\n    int sum = 0;\n    \n    // Top border\n    for (int j = left; j < left + width; j++) {\n        sum += image[top][j];\n    }\n    \n    // Bottom border\n    for (int j = left; j < left + width; j++) {\n        sum += image[top + height - 1][j];\n    }\n    \n    // Left border (excluding corners already counted)\n    for (int i = top + 1; i < top + height - 1; i++) {\n        sum += image[i][left];\n    }\n    \n    // Right border (excluding corners already counted)\n    for (int i = top + 1; i < top + height - 1; i++) {\n        sum += image[i][left + width - 1];\n    }\n    \n    return sum;\n}\n\nint main() {\n    scanf(\"%d\", &N);\n    \n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            scanf(\"%d\", &image[i][j]);\n        }\n    }\n    \n    int max_sum = INT_MIN;\n    \n    // Try all possible borders\n    for (int top = 0; top < N; top++) {\n        for (int left = 0; left < N; left++) {\n            for (int height = 1; height <= N - top; height++) {\n                for (int width = 1; width <= N - left; width++) {\n                    int current_sum = calculate_border_sum(top, left, height, width);\n                    if (current_sum > max_sum) {\n                        max_sum = current_sum;\n                    }\n                }\n            }\n        }\n    }\n    \n    printf(\"%d\\n\", max_sum);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:51"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <climits>\n\nusing namespace std;\n\nint findMaxBorderSum(vector<vector<int>>& image) {\n    int N = image.size();\n    int maxSum = INT_MIN;\n\n    // Precompute 2D prefix sum\n    vector<vector<int>> prefixSum(N + 1, vector<int>(N + 1, 0));\n    for (int i = 1; i <= N; i++) {\n        for (int j = 1; j <= N; j++) {\n            prefixSum[i][j] = image[i-1][j-1] + prefixSum[i-1][j] + prefixSum[i][j-1] - prefixSum[i-1][j-1];\n        }\n    }\n\n    // Try all possible border configurations\n    for (int r1 = 0; r1 < N; r1++) {\n        for (int c1 = 0; c1 < N; c1++) {\n            for (int r2 = r1; r2 < N; r2++) {\n                for (int c2 = c1; c2 < N; c2++) {\n                    // Check if rectangle forms a border\n                    if (r1 == r2 || c1 == c2 || r1 + 1 == r2 || c1 + 1 == c2) {\n                        int borderSum = 0;\n                        \n                        // Top border\n                        borderSum += prefixSum[r1+1][c2+1] - prefixSum[r1+1][c1] - prefixSum[r1][c2+1] + prefixSum[r1][c1];\n                        \n                        // Bottom border\n                        borderSum += prefixSum[r2+1][c2+1] - prefixSum[r2+1][c1] - prefixSum[r2][c2+1] + prefixSum[r2][c1];\n                        \n                        // Left border\n                        borderSum += prefixSum[r2+1][c1+1] - prefixSum[r1][c1+1] - prefixSum[r2+1][c1] + prefixSum[r1][c1];\n                        \n                        // Right border\n                        borderSum += prefixSum[r2+1][c2+1] - prefixSum[r1][c2+1] - prefixSum[r2+1][c2] + prefixSum[r1][c2];\n                        \n                        // Remove duplicate pixels at the corners\n                        if (r1 == r2) {\n                            borderSum -= image[r1][c1] + image[r1][c2];\n                        }\n                        if (c1 == c2) {\n                            borderSum -= image[r1][c1] + image[r2][c1];\n                        }\n\n                        maxSum = max(maxSum, borderSum);\n                    }\n                }\n            }\n        }\n    }\n\n    return maxSum;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<vector<int>> image(N, vector<int>(N));\n    \n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            cin >> image[i][j];\n        }\n    }\n    \n    int result = findMaxBorderSum(image);\n    cout << result << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:44:41"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class MaxBorderSum {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int[][] image = new int[N][N];\n        \n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                image[i][j] = scanner.nextInt();\n            }\n        }\n        \n        int maxSum = Integer.MIN_VALUE;\n        \n        for (int x1 = 0; x1 < N; x1++) {\n            for (int y1 = 0; y1 < N; y1++) {\n                for (int x2 = x1; x2 < N; x2++) {\n                    for (int y2 = y1; y2 < N; y2++) {\n                        int sum = 0;\n                        for (int i = x1; i <= x2; i++) {\n                            if (y1 < N) sum += image[i][y1];\n                            if (y2 != y1 && y2 < N) sum += image[i][y2];\n                        }\n                        for (int j = y1 + 1; j < y2; j++) {\n                            if (x1 < N) sum += image[x1][j];\n                            if (x2 != x1 && x2 < N) sum += image[x2][j];\n                        }\n                        if (sum > maxSum) {\n                            maxSum = sum;\n                        }\n                    }\n                }\n            }\n        }\n        \n        System.out.println(maxSum);\n    }\n}",
    "timestamp": "2025-08-05 18:44:58"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_border_sum(matrix):\n    N = len(matrix)\n    \n    if N < 2:\n        return sum(matrix[0]) if N == 1 else 0\n    \n    def border_sum(x1, y1, x2, y2):\n        if x1 > x2 or y1 > y2:\n            return 0\n        sum_ = 0\n        for i in range(y1, y2 + 1):\n            sum_ += matrix[x1][i]  # Top border\n            if x2 != x1:\n                sum_ += matrix[x2][i]  # Bottom border\n        for i in range(x1 + 1, x2):\n            sum_ += matrix[i][y1]  # Left border\n            if y2 != y1:\n                sum_ += matrix[i][y2]  # Right border\n        return sum_\n    \n    max_sum = float('-inf')\n    \n    for x1 in range(N):\n        for y1 in range(N):\n            for x2 in range(x1, min(N, x1 + 3)):\n                for y2 in range(y1, min(N, y1 + 3)):\n                    curr_sum = border_sum(x1, y1, x2, y2)\n                    max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n\n# Example usage\nimage = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n]\nprint(max_border_sum(image))",
    "timestamp": "2025-08-13 00:39:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class MaximumBorderSum {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[][] image = new int[n][n];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                image[i][j] = scanner.nextInt();\n            }\n        }\n        \n        int maxSum = Integer.MIN_VALUE;\n        \n        // Iterate over possible top-left corners of the border\n        for (int r1 = 0; r1 < n; r1++) {\n            for (int c1 = 0; c1 < n; c1++) {\n                // Iterate over possible bottom-right corners of the border\n                for (int r2 = r1; r2 < n; r2++) {\n                    for (int c2 = c1; c2 < n; c2++) {\n                        int height = r2 - r1 + 1;\n                        int width = c2 - c1 + 1;\n                        \n                        if (height < 1 || width < 1) continue;\n                        \n                        int sum = 0;\n                        \n                        // Only consider borders with height or width of 1 or 2\n                        if (height == 1 || height == 2 || width == 1 || width == 2) {\n                            // Add top border\n                            for (int j = c1; j <= c2; j++) {\n                                sum += image[r1][j];\n                            }\n                            // Add bottom border\n                            if (r2 != r1) {\n                                for (int j = c1; j <= c2; j++) {\n                                    sum += image[r2][j];\n                                }\n                            }\n                            // Add left border\n                            for (int i = r1 + 1; i < r2; i++) {\n                                sum += image[i][c1];\n                            }\n                            // Add right border\n                            if (c2 != c1) {\n                                for (int i = r1 + 1; i < r2; i++) {\n                                    sum += image[i][c2];\n                                }\n                            }\n                            maxSum = Math.max(maxSum, sum);\n                        }\n                    }\n                }\n            }\n        }\n        \n        System.out.println(maxSum);\n    }\n}",
    "timestamp": "2025-08-13 00:39:12"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\n// Function to calculate the sum of border pixels for a given rectangle\nint calculateBorderSum(int matrix[100][100], int N, int x1, int y1, int x2, int y2) {\n    int sum = 0;\n    for (int j = y1; j <= y2; j++) {\n        sum += matrix[x1][j]; // Top border\n        if (x2 != x1) sum += matrix[x2][j]; // Bottom border (if different)\n    }\n    for (int i = x1 + 1; i < x2; i++) {\n        sum += matrix[i][y1]; // Left border (excluding corners)\n        if (y2 != y1) sum += matrix[i][y2]; // Right border (if different)\n    }\n    return sum;\n}\n\nint main() {\n    int N, matrix[100][100];\n    \n    // Read the size of the matrix\n    scanf(\"%d\", &N);\n    \n    // Read the matrix values\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n    \n    int maxSum = -2147483648; // Initialize with minimum possible integer\n    int bestX1, bestY1, bestX2, bestY2;\n    \n    // Iterate over all possible rectangles\n    for (int x1 = 0; x1 < N; x1++) {\n        for (int y1 = 0; y1 < N; y1++) {\n            for (int x2 = x1; x2 < N && (x2 - x1 < 3 || (x2 - x1 + 1) == N); x2++) {\n                for (int y2 = y1; y2 < N && (y2 - y1 < 3 || (y2 - y1 + 1) == N); y2++) {\n                    int borderSum = calculateBorderSum(matrix, N, x1, y1, x2, y2);\n                    if (borderSum > maxSum) {\n                        maxSum = borderSum;\n                        bestX1 = x1;\n                        bestY1 = y1;\n                        bestX2 = x2;\n                        bestY2 = y2;\n                    }\n                }\n            }\n        }\n    }\n    \n    // Output the maximum border sum\n    printf(\"%d\\n\", maxSum);\n    // Output the coordinates of the rectangle\n    printf(\"%d %d %d %d\\n\", bestX1, bestY1, bestX2, bestY2);\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 00:39:18"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_border_sum(image):\n    N = len(image)\n    max_sum = float('-inf')\n    best_border = None\n\n    for top in range(N):\n        for left in range(N):\n            for bottom in range(top, N):\n                for right in range(left, N):\n                    # Check border scenarios\n                    border_sum = calculate_border_sum(image, top, left, bottom, right)\n                    if border_sum > max_sum:\n                        max_sum = border_sum\n                        best_border = (top, left, bottom, right)\n\n    return max_sum, best_border\n\ndef calculate_border_sum(image, top, left, bottom, right):\n    border_sum = 0\n    \n    # Top border\n    for col in range(left, right + 1):\n        border_sum += image[top][col]\n    \n    # Bottom border\n    for col in range(left, right + 1):\n        border_sum += image[bottom][col]\n    \n    # Left border (excluding corners)\n    for row in range(top + 1, bottom):\n        border_sum += image[row][left]\n    \n    # Right border (excluding corners)\n    for row in range(top + 1, bottom):\n        border_sum += image[row][right]\n    \n    return border_sum\n\n# Example usage\ndef main():\n    N = int(input())\n    image = [list(map(int, input().split())) for _ in range(N)]\n    \n    max_sum, border = max_border_sum(image)\n    print(max_sum)",
    "timestamp": "2025-08-13 00:39:30"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_border_sum(matrix):\n    n = len(matrix)\n    if n == 0:\n        return 0\n    \n    max_sum = -float('inf')\n    \n    for top in range(n):\n        for left in range(n):\n            for bottom in range(top, n):\n                for right in range(left, n):\n                    current_sum = 0\n                    # Sum top border\n                    for j in range(left, right + 1):\n                        current_sum += matrix[top][j]\n                    # Sum bottom border if different from top\n                    if bottom > top:\n                        for j in range(left, right + 1):\n                            current_sum += matrix[bottom][j]\n                    # Sum left border excluding corners if already counted\n                    if right > left:\n                        for i in range(top + 1, bottom):\n                            current_sum += matrix[i][left]\n                    # Sum right border excluding corners if already counted\n                    if right > left and bottom > top:\n                        for i in range(top + 1, bottom):\n                            current_sum += matrix[i][right]\n                    \n                    if current_sum > max_sum:\n                        max_sum = current_sum\n    return max_sum",
    "timestamp": "2025-08-13 00:39:44"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint maxBorderSum(const vector<vector<int>>& matrix, int N) {\n    int maxSum = 0;\n\n    for (int r1 = 0; r1 < N; ++r1) {\n        for (int r2 = r1; r2 < N; ++r2) {\n            for (int c1 = 0; c1 < N; ++c1) {\n                for (int c2 = c1; c2 < N; ++c2) {\n                    if (r2 - r1 < 2 && c2 - c1 < 2) continue;\n\n                    int sum = 0;\n\n                    for (int j = c1; j <= c2; ++j) sum += matrix[r1][j] + matrix[r2][j];\n                    for (int i = r1 + 1; i < r2; ++i) sum += matrix[i][c1] + matrix[i][c2];\n\n                    maxSum = max(maxSum, sum);\n                }\n            }\n        }\n    }\n\n    return maxSum;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<vector<int>> matrix(N, vector<int>(N));\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            cin >> matrix[i][j];\n        }\n    }\n\n    cout << maxBorderSum(matrix, N) << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:55:12"
  }
]