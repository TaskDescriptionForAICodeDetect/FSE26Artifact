[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint comparisons = 0;\n\nvoid merge(int arr[], int left, int mid, int right) {\n    int i, j, k;\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    int *leftArr = malloc(n1 * sizeof(int));\n    int *rightArr = malloc(n2 * sizeof(int));\n\n    for (i = 0; i < n1; i++)\n        leftArr[i] = arr[left + i];\n    for (j = 0; j < n2; j++)\n        rightArr[j] = arr[mid + 1 + j];\n\n    i = 0;\n    j = 0;\n    k = left;\n\n    while (i < n1 && j < n2) {\n        comparisons++;\n        if (leftArr[i] <= rightArr[j]) {\n            arr[k] = leftArr[i];\n            i++;\n        } else {\n            arr[k] = rightArr[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = leftArr[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = rightArr[j];\n        j++;\n        k++;\n    }\n\n    free(leftArr);\n    free(rightArr);\n}\n\nvoid mergeSort(int arr[], int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    int *arr = malloc(n * sizeof(int));\n\n    printf(\"Enter the elements:\\n\");\n    for (int i = 0; i < n; i++)\n        scanf(\"%d\", &arr[i]);\n\n    comparisons = 0;\n    mergeSort(arr, 0, n - 1);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n\n    printf(\"Number of comparisons: %d\\n\", comparisons);\n\n    free(arr);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:11:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint comparisons = 0;\n\nvoid merge(int arr[], int l, int m, int r) {\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    int L[n1], R[n2];\n\n    for (i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    i = 0;\n    j = 0;\n    k = l;\n\n    while (i < n1 && j < n2) {\n        comparisons++;\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = l + (r - l) / 2;\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n        merge(arr, l, m, r);\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n\n    mergeSort(arr, 0, n - 1);\n\n    printf(\"%d\\n\", comparisons);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:11:59"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint comparisons = 0;\n\nvoid merge(vector<int>& arr, int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    vector<int> L(n1), R(n2);\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    int i = 0, j = 0, k = l;\n\n    while (i < n1 && j < n2) {\n        comparisons++;\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(vector<int>& arr, int l, int r) {\n    if (l < r) {\n        int m = l + (r - l) / 2;\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n        merge(arr, l, m, r);\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++)\n        cin >> arr[i];\n\n    mergeSort(arr, 0, n - 1);\n\n    cout << comparisons << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:12:16"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "public class MergeSort {\n    private static int comparisons = 0;\n\n    public static void main(String[] args) {\n        int[] array = {12, 11, 13, 5, 6, 7};\n        System.out.println(\"Given Array:\");\n        printArray(array);\n\n        mergeSort(array, 0, array.length - 1);\n\n        System.out.println(\"\\nSorted Array:\");\n        printArray(array);\n        System.out.println(\"\\nNumber of comparisons in Merge function: \" + comparisons);\n    }\n\n    public static void mergeSort(int[] array, int left, int right) {\n        if (left < right) {\n            int mid = left + (right - left) / 2;\n            mergeSort(array, left, mid);\n            mergeSort(array, mid + 1, right);\n            merge(array, left, mid, right);\n        }\n    }\n\n    public static void merge(int[] array, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        System.arraycopy(array, left, L, 0, n1);\n        System.arraycopy(array, mid + 1, R, 0, n2);\n\n        int i = 0, j = 0, k = left;\n\n        while (i < n1 && j < n2) {\n            comparisons++;\n            if (L[i] <= R[j]) {\n                array[k] = L[i];\n                i++;\n            } else {\n                array[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        while (i < n1) {\n            array[k] = L[i];\n            i++;\n            k++;\n        }\n\n        while (j < n2) {\n            array[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    public static void printArray(int[] array) {\n        for (int num : array) {\n            System.out.print(num + \" \");\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:13:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Arrays;\n\npublic class MergeSort {\n    private static int comparisons = 0;\n\n    public static void mergeSort(int[] arr) {\n        if (arr == null || arr.length <= 1) {\n            return;\n        }\n        mergeSortHelper(arr, 0, arr.length - 1);\n    }\n\n    private static void mergeSortHelper(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = left + (right - left) / 2;\n            mergeSortHelper(arr, left, mid);\n            mergeSortHelper(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n\n    private static void merge(int[] arr, int left, int mid, int right) {\n        int[] leftArray = Arrays.copyOfRange(arr, left, mid + 1);\n        int[] rightArray = Arrays.copyOfRange(arr, mid + 1, right + 1);\n\n        int i = 0, j = 0, k = left;\n\n        while (i < leftArray.length && j < rightArray.length) {\n            comparisons++;\n            if (leftArray[i] <= rightArray[j]) {\n                arr[k++] = leftArray[i++];\n            } else {\n                arr[k++] = rightArray[j++];\n            }\n        }\n\n        while (i < leftArray.length) {\n            arr[k++] = leftArray[i++];\n        }\n\n        while (j < rightArray.length) {\n            arr[k++] = rightArray[j++];\n        }\n    }\n\n    public static int getComparisons() {\n        return comparisons;\n    }\n\n    public static void resetComparisons() {\n        comparisons = 0;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        mergeSort(arr);\n        System.out.println(\"Sorted array: \" + Arrays.toString(arr));\n        System.out.println(\"Number of comparisons: \" + getComparisons());\n    }\n}",
    "timestamp": "2025-08-05 22:13:12"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint comparisons = 0;\n\nvoid merge(vector<int>& arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    vector<int> L(n1);\n    vector<int> R(n2);\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n\n    int i = 0, j = 0, k = left;\n\n    while (i < n1 && j < n2) {\n        comparisons++;\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(vector<int>& arr, int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        merge(arr, left, mid, right);\n    }\n}\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n\n    vector<int> arr(n);\n    cout << \"Enter \" << n << \" elements:\\n\";\n    for (int i = 0; i < n; i++)\n        cin >> arr[i];\n\n    comparisons = 0;\n    mergeSort(arr, 0, n - 1);\n\n    cout << \"Sorted array: \";\n    for (int num : arr)\n        cout << num << \" \";\n    cout << \"\\nNumber of comparisons: \" << comparisons << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:13:19"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def merge_sort(arr):\n    def merge(left, right):\n        nonlocal comparisons\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            comparisons += 1\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\narr = [38, 27, 43, 3, 9, 82, 10]\ncomparisons = 0\nsorted_arr = merge_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\nprint(\"Number of comparisons:\", comparisons)",
    "timestamp": "2025-08-13 09:27:11"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class MergeSortWithComparisons {\n\n    private int comparisonCount;\n\n    public static void main(String[] args) {\n        int[] array = {38, 27, 43, 3, 9, 82, 10};\n        MergeSortWithComparisons sorter = new MergeSortWithComparisons();\n        sorter.mergeSort(array, 0, array.length - 1);\n        \n        System.out.println(\"Sorted array:\");\n        for (int num : array) {\n            System.out.print(num + \" \");\n        }\n        System.out.println(\"\\nNumber of comparisons in merge function: \" + sorter.comparisonCount);\n    }\n\n    public void mergeSort(int[] array, int left, int right) {\n        if (left < right) {\n            int middle = (left + right) / 2;\n            \n            mergeSort(array, left, middle);\n            mergeSort(array, middle + 1, right);\n            \n            merge(array, left, middle, right);\n        }\n    }\n\n    private void merge(int[] array, int left, int middle, int right) {\n        int n1 = middle - left + 1;\n        int n2 = right - middle;\n\n        int[] leftArray = new int[n1];\n        int[] rightArray = new int[n2];\n\n        for (int i = 0; i < n1; i++) {\n            leftArray[i] = array[left + i];\n        }\n        for (int j = 0; j < n2; j++) {\n            rightArray[j] = array[middle + 1 + j];\n        }\n\n        int i = 0, j = 0;\n        int k = left;\n        \n        while (i < n1 && j < n2) {\n            comparisonCount++;\n            if (leftArray[i] <= rightArray[j]) {\n                array[k] = leftArray[i];\n                i++;\n            } else {\n                array[k] = rightArray[j];\n                j++;\n            }\n            k++;\n        }\n\n        while (i < n1) {\n            array[k] = leftArray[i];\n            i++;\n            k++;\n        }\n\n        while (j < n2) {\n            array[k] = rightArray[j];\n            j++;\n            k++;\n        }\n    }\n}",
    "timestamp": "2025-08-13 09:27:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\nvoid merge(int arr[], int left, int mid, int right, int* comparisonCount) {\n    int i, j, k;\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    int L[n1], R[n2];\n\n    for (i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n\n    i = 0;\n    j = 0;\n    k = left;\n    while (i < n1 && j < n2) {\n        (*comparisonCount)++;\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int left, int right, int* comparisonCount) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n\n        mergeSort(arr, left, mid, comparisonCount);\n        mergeSort(arr, mid + 1, right, comparisonCount);\n\n        merge(arr, left, mid, right, comparisonCount);\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int arr_size = sizeof(arr) / sizeof(arr[0]);\n    int comparisonCount = 0;\n\n    mergeSort(arr, 0, arr_size - 1, &comparisonCount);\n\n    printf(\"Sorted array: \\n\");\n    for (int i = 0; i < arr_size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n\n    printf(\"Number of comparisons: %d\\n\", comparisonCount);\n    return 0;\n}",
    "timestamp": "2025-08-13 09:27:34"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def merge_sort(arr):\n    comparisons = [0]  # Use a list to allow modification in nested functions\n    \n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        \n        while i < len(left) and j < len(right):\n            comparisons[0] += 1\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        \n        result.extend(left[i:])\n        result.extend(right[j:])\n        \n        return result\n    \n    def sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = sort(arr[:mid])\n        right = sort(arr[mid:])\n        \n        return merge(left, right)\n    \n    sorted_arr = sort(arr)\n    return sorted_arr, comparisons[0]\n\n# Example usage\narr = [64, 34, 25, 12, 22, 11, 90]\nsorted_array, num_comparisons = merge_sort(arr)\nprint(\"Sorted array:\", sorted_array)\nprint(\"Number of comparisons:\", num_comparisons)",
    "timestamp": "2025-08-13 09:27:43"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        comparisons = merge(arr, left_half, right_half)\n        print(f\"Number of comparisons in merge step: {comparisons}\")\n\ndef merge(arr, left, right):\n    i = j = k = 0\n    comparisons = 0\n\n    while i < len(left) and j < len(right):\n        comparisons += 1\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n        k += 1\n\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n\n    return comparisons\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = [12, 11, 13, 5, 6, 7]\n    print(\"Given array is:\", data)\n    merge_sort(data)\n    print(\"Sorted array is:\", data)",
    "timestamp": "2025-08-13 09:27:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint comparisonCount = 0;\n\nvoid merge(vector<int> &arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n    \n    vector<int> L(n1), R(n2);\n    \n    for (int i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (int i = 0; i < n2; i++)\n        R[i] = arr[mid + 1 + i];\n    \n    int i = 0, j = 0, k = left;\n    \n    while (i < n1 && j < n2) {\n        comparisonCount++;\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(vector<int> &arr, int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        \n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nint main() {\n    vector<int> arr = {12, 11, 13, 5, 6, 7};\n    int arrSize = arr.size();\n    \n    mergeSort(arr, 0, arrSize - 1);\n\n    cout << \"Sorted array is: \";\n    for (int i = 0; i < arrSize; i++)\n        cout << arr[i] << \" \";\n    cout << \"\\n\";\n\n    cout << \"Number of comparisons: \" << comparisonCount << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:51:35"
  }
]