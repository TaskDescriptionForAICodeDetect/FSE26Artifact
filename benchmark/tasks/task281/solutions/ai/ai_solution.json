[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint evaluate_left_to_right(const char* expr) {\n    int result = expr[0] - '0';\n    for (int i = 1; i < strlen(expr); i += 2) {\n        char op = expr[i];\n        int num = expr[i + 1] - '0';\n        if (op == '+') {\n            result += num;\n        } else if (op == '*') {\n            result *= num;\n        }\n    }\n    return result;\n}\n\nint evaluate_multiplication_first(const char* expr) {\n    int nums[100];\n    char ops[100];\n    int num_count = 0;\n    int op_count = 0;\n    \n    nums[num_count++] = expr[0] - '0';\n    \n    for (int i = 1; i < strlen(expr); i += 2) {\n        ops[op_count++] = expr[i];\n        nums[num_count++] = expr[i + 1] - '0';\n    }\n    \n    for (int i = 0; i < op_count; ) {\n        if (ops[i] == '*') {\n            nums[i] *= nums[i + 1];\n            for (int j = i + 1; j < num_count - 1; j++) {\n                nums[j] = nums[j + 1];\n            }\n            for (int j = i; j < op_count - 1; j++) {\n                ops[j] = ops[j + 1];\n            }\n            num_count--;\n            op_count--;\n        } else {\n            i++;\n        }\n    }\n    \n    int result = nums[0];\n    for (int i = 0; i < op_count; i++) {\n        if (ops[i] == '+') {\n            result += nums[i + 1];\n        }\n    }\n    return result;\n}\n\nint main() {\n    char expr[201];\n    int bob_answer;\n    scanf(\"%200s %d\", expr, &bob_answer);\n    \n    int left_right = evaluate_left_to_right(expr);\n    int mult_first = evaluate_multiplication_first(expr);\n    \n    if (left_right == bob_answer && mult_first == bob_answer) {\n        printf(\"U\\n\");\n    } else if (left_right == bob_answer) {\n        printf(\"L\\n\");\n    } else if (mult_first == bob_answer) {\n        printf(\"M\\n\");\n    } else {\n        printf(\"I\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:54:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\nint evaluateLeftToRight(const string& expr) {\n    int result = expr[0] - '0';\n    for (size_t i = 1; i < expr.size(); i += 2) {\n        char op = expr[i];\n        int num = expr[i + 1] - '0';\n        if (op == '+') {\n            result += num;\n        } else if (op == '*') {\n            result *= num;\n        }\n    }\n    return result;\n}\n\nint evaluateMultiplicationFirst(const string& expr) {\n    stack<int> nums;\n    stack<char> ops;\n    nums.push(expr[0] - '0');\n    \n    for (size_t i = 1; i < expr.size(); i += 2) {\n        char op = expr[i];\n        int num = expr[i + 1] - '0';\n        if (op == '*') {\n            int top = nums.top();\n            nums.pop();\n            nums.push(top * num);\n        } else {\n            ops.push(op);\n            nums.push(num);\n        }\n    }\n    \n    while (!ops.empty()) {\n        char op = ops.top();\n        ops.pop();\n        int a = nums.top();\n        nums.pop();\n        int b = nums.top();\n        nums.pop();\n        nums.push(a + b);\n    }\n    \n    return nums.top();\n}\n\nint main() {\n    string expr;\n    int bobAnswer;\n    cin >> expr >> bobAnswer;\n    \n    int leftToRight = evaluateLeftToRight(expr);\n    int multiplicationFirst = evaluateMultiplicationFirst(expr);\n    \n    if (leftToRight == bobAnswer && multiplicationFirst == bobAnswer) {\n        cout << \"U\" << endl;\n    } else if (leftToRight == bobAnswer) {\n        cout << \"L\" << endl;\n    } else if (multiplicationFirst == bobAnswer) {\n        cout << \"M\" << endl;\n    } else {\n        cout << \"I\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:55:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.Stack;\n\npublic class BobsCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String expression = scanner.next();\n        int bobAnswer = scanner.nextInt();\n        \n        int leftToRight = evaluateLeftToRight(expression);\n        int multiplicationFirst = evaluateMultiplicationFirst(expression);\n        \n        if (leftToRight == bobAnswer && multiplicationFirst == bobAnswer) {\n            System.out.println(\"U\");\n        } else if (leftToRight == bobAnswer) {\n            System.out.println(\"L\");\n        } else if (multiplicationFirst == bobAnswer) {\n            System.out.println(\"M\");\n        } else {\n            System.out.println(\"I\");\n        }\n    }\n    \n    private static int evaluateLeftToRight(String expression) {\n        if (expression.isEmpty()) return 0;\n        int result = Character.getNumericValue(expression.charAt(0));\n        for (int i = 1; i < expression.length(); i += 2) {\n            char operator = expression.charAt(i);\n            int nextNum = Character.getNumericValue(expression.charAt(i + 1));\n            if (operator == '+') {\n                result += nextNum;\n            } else if (operator == '*') {\n                result *= nextNum;\n            }\n        }\n        return result;\n    }\n    \n    private static int evaluateMultiplicationFirst(String expression) {\n        Stack<Integer> numbers = new Stack<>();\n        Stack<Character> operators = new Stack<>();\n        \n        for (int i = 0; i < expression.length(); i++) {\n            char c = expression.charAt(i);\n            if (Character.isDigit(c)) {\n                numbers.push(Character.getNumericValue(c));\n            } else if (c == '+' || c == '*') {\n                while (!operators.isEmpty() && operators.peek() == '*' && c == '+') {\n                    numbers.push(applyOp(operators.pop(), numbers.pop(), numbers.pop()));\n                }\n                operators.push(c);\n            }\n        }\n        \n        while (!operators.isEmpty()) {\n            numbers.push(applyOp(operators.pop(), numbers.pop(), numbers.pop()));\n        }\n        \n        return numbers.pop();\n    }\n    \n    private static int applyOp(char op, int b, int a) {\n        switch (op) {\n            case '+': return a + b;\n            case '*': return a * b;\n            default: return 0;\n        }\n    }\n}",
    "timestamp": "2025-08-05 20:55:25"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class BobCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String expression = scanner.next();\n        int bobAnswer = scanner.nextInt();\n\n        int multiplyFirst = calculateMultiplyFirst(expression);\n        int leftToRight = calculateLeftToRight(expression);\n\n        if (multiplyFirst == bobAnswer && leftToRight == bobAnswer) {\n            System.out.println(\"BOTH\");\n        } else if (multiplyFirst == bobAnswer) {\n            System.out.println(\"MULTIPLY_FIRST\");\n        } else if (leftToRight == bobAnswer) {\n            System.out.println(\"LEFT_TO_RIGHT\");\n        } else {\n            System.out.println(\"ERROR\");\n        }\n    }\n\n    static int calculateMultiplyFirst(String expression) {\n        StringBuilder modifiedExpression = new StringBuilder(expression);\n        int index = 0;\n        while (index < modifiedExpression.length()) {\n            if (modifiedExpression.charAt(index) == '*') {\n                int left = Character.getNumericValue(modifiedExpression.charAt(index - 1));\n                int right = Character.getNumericValue(modifiedExpression.charAt(index + 1));\n                int result = left * right;\n\n                modifiedExpression.replace(index - 1, index + 2, String.valueOf(result));\n                index = 0;\n            } else {\n                index++;\n            }\n        }\n\n        return calculateLeftToRight(modifiedExpression.toString());\n    }\n\n    static int calculateLeftToRight(String expression) {\n        int result = Character.getNumericValue(expression.charAt(0));\n        for (int i = 1; i < expression.length(); i += 2) {\n            char operator = expression.charAt(i);\n            int operand = Character.getNumericValue(expression.charAt(i + 1));\n\n            if (operator == '+') {\n                result += operand;\n            } else {\n                result *= operand;\n            }\n        }\n        return result;\n    }\n}",
    "timestamp": "2025-08-05 20:55:32"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nint calculate_mult_first(char* expr) {\n    int result = expr[0] - '0';\n    for (int i = 1; i < strlen(expr); i += 2) {\n        if (expr[i] == '*') {\n            int next = expr[i+1] - '0';\n            result *= next;\n        } else if (expr[i] == '+') {\n            int next = expr[i+1] - '0';\n            result += next;\n        }\n    }\n    return result;\n}\n\nint calculate_left_right(char* expr) {\n    int result = expr[0] - '0';\n    for (int i = 1; i < strlen(expr); i += 2) {\n        if (expr[i] == '*') {\n            int next = expr[i+1] - '0';\n            result *= next;\n        } else if (expr[i] == '+') {\n            int next = expr[i+1] - '0';\n            result += next;\n        }\n    }\n    return result;\n}\n\nint main() {\n    char expr[100];\n    int bob_answer;\n    \n    scanf(\"%s %d\", expr, &bob_answer);\n    \n    int mult_first = calculate_mult_first(expr);\n    int left_right = calculate_left_right(expr);\n    \n    bool is_mult_first = (mult_first == bob_answer);\n    bool is_left_right = (left_right == bob_answer);\n    \n    if (is_mult_first && is_left_right)\n        printf(\"both\\n\");\n    else if (is_mult_first)\n        printf(\"multiplication first\\n\");\n    else if (is_left_right)\n        printf(\"left to right\\n\");\n    else\n        printf(\"error\\n\");\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:55:39"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint evaluateMultiplicationFirst(const string& expr) {\n    string modifiedExpr = expr;\n    size_t pos;\n    \n    // First handle all multiplications\n    while ((pos = modifiedExpr.find('*')) != string::npos) {\n        int left = pos - 1;\n        int right = pos + 1;\n        \n        int leftNum = modifiedExpr[left] - '0';\n        int rightNum = modifiedExpr[right] - '0';\n        int result = leftNum * rightNum;\n        \n        modifiedExpr.replace(left, 3, to_string(result));\n    }\n    \n    // Then do additions from left to right\n    int total = modifiedExpr[0] - '0';\n    for (size_t i = 1; i < modifiedExpr.length(); i += 2) {\n        if (modifiedExpr[i] == '+') {\n            total += modifiedExpr[i+1] - '0';\n        }\n    }\n    \n    return total;\n}\n\nint evaluateLeftToRight(const string& expr) {\n    int total = expr[0] - '0';\n    \n    for (size_t i = 1; i < expr.length(); i += 2) {\n        if (expr[i] == '+') {\n            total += expr[i+1] - '0';\n        } else if (expr[i] == '*') {\n            total *= expr[i+1] - '0';\n        }\n    }\n    \n    return total;\n}\n\nint main() {\n    string expr;\n    int bobAnswer;\n    \n    cin >> expr >> bobAnswer;\n    \n    int multiplicationFirst = evaluateMultiplicationFirst(expr);\n    int leftToRight = evaluateLeftToRight(expr);\n    \n    if (multiplicationFirst == bobAnswer && leftToRight == bobAnswer) {\n        cout << \"both\" << endl;\n    } else if (multiplicationFirst == bobAnswer) {\n        cout << \"multiplication first\" << endl;\n    } else if (leftToRight == bobAnswer) {\n        cout << \"left to right\" << endl;\n    } else {\n        cout << \"error\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:55:47"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def evaluate_expression(expression, method):\n    if method == 'left_to_right':\n        total, i = 0, 0\n        while i < len(expression):\n            if expression[i].isdigit():\n                num = int(expression[i])\n                total = num if i == 0 else (total + num if op == '+' else total * num)\n            else:\n                op = expression[i]\n            i += 1\n        return total\n    \n    elif method == 'mult_first':\n        terms = expression.split('+')\n        total = 0\n        for term in terms:\n            factors = map(int, term.split('*'))\n            product = 1\n            for factor in factors:\n                product *= factor\n            total += product\n        return total\n\ndef determine_method(expression, bob_answer):\n    bob_answer = int(bob_answer)\n    result_ltr = evaluate_expression(expression, 'left_to_right')\n    result_mult_first = evaluate_expression(expression, 'mult_first')\n    \n    if bob_answer == result_ltr and bob_answer == result_mult_first:\n        return 'both'\n    elif bob_answer == result_ltr:\n        return 'left to right'\n    elif bob_answer == result_mult_first:\n        return 'multiplication first'\n    else:\n        return 'error'\n\n# Example usage:\nexpression = \"2+3*2+1\"\nbob_answer = 9\nprint(determine_method(expression, bob_answer))",
    "timestamp": "2025-08-13 04:04:42"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class CalculatorCheck {\n    public static String checkExpression(String expression, int bobsAnswer) {\n        int leftToRightResult = evaluateLeftToRight(expression);\n        int multiplicationFirstResult = evaluateMultiplicationFirst(expression);\n        \n        boolean matchesLeftToRight = (leftToRightResult == bobsAnswer);\n        boolean matchesMultiplicationFirst = (multiplicationFirstResult == bobsAnswer);\n        \n        if (matchesLeftToRight && matchesMultiplicationFirst) {\n            return \"both\";\n        } else if (matchesLeftToRight) {\n            return \"left to right\";\n        } else if (matchesMultiplicationFirst) {\n            return \"multiplication first\";\n        } else {\n            return \"error\";\n        }\n    }\n\n    private static int evaluateLeftToRight(String expression) {\n        int result = 0;\n        char operator = '+';\n        for (int i = 0; i < expression.length(); i++) {\n            char ch = expression.charAt(i);\n            if (Character.isDigit(ch)) {\n                int num = ch - '0';\n                result = operator == '+' ? result + num : result * num;\n            } else if (ch == '+' || ch == '*') {\n                operator = ch;\n            }\n        }\n        return result;\n    }\n\n    private static int evaluateMultiplicationFirst(String expression) {\n        int result = 0;\n        int temp = 1;\n        char lastOperator = '+';\n        for (int i = 0; i < expression.length(); i++) {\n            char ch = expression.charAt(i);\n            if (Character.isDigit(ch)) {\n                int num = ch - '0';\n                temp = lastOperator == '*' ? temp * num : num;\n            } else if (ch == '*') {\n                lastOperator = '*';\n            } else if (ch == '+') {\n                result += temp;\n                lastOperator = '+';\n                temp = 1;\n            }\n        }\n        result += temp;\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkExpression(\"2+3*4\", 20)); // left to right\n        System.out.println(checkExpression(\"2+3*4\", 14)); // multiplication first\n        System.out.println(checkExpression(\"2+3*4\", 14)); // both\n        System.out.println(checkExpression(\"2+3*4\", 15)); // error\n    }\n}",
    "timestamp": "2025-08-13 04:04:47"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <ctype.h>\n\nint evaluateLeftToRight(const char *expr) {\n    int result = 0;\n    char operator = '+';\n\n    for (int i = 0; expr[i] != '\\0'; ++i) {\n        if (isdigit(expr[i])) {\n            int num = expr[i] - '0';\n            if (operator == '+') {\n                result += num;\n            } else if (operator == '*') {\n                result *= num;\n            }\n        } else if (expr[i] == '+' || expr[i] == '*') {\n            operator = expr[i];\n        }\n    }\n    return result;\n}\n\nint evaluateMultiplicationFirst(const char *expr) {\n    int temps[100], tempsIndex = 0;\n    char operators[100], operatorsIndex = 0;\n\n    for (int i = 0; expr[i] != '\\0'; ++i) {\n        if (isdigit(expr[i])) {\n            int num = expr[i] - '0';\n            if (operatorsIndex > 0 && operators[operatorsIndex - 1] == '*') {\n                temps[tempsIndex - 1] *= num;\n            } else {\n                temps[tempsIndex++] = num;\n            }\n        } else if (expr[i] == '+' || expr[i] == '*') {\n            operators[operatorsIndex++] = expr[i];\n        }\n    }\n\n    int result = temps[0];\n    for (int i = 1, op = 0; i < tempsIndex; ++i, ++op) {\n        if (operators[op] == '+') {\n            result += temps[i];\n        }\n    }\n    return result;\n}\n\nint main() {\n    char expression[101];\n    int bobsAnswer;\n\n    scanf(\"%100s %d\", expression, &bobsAnswer);\n\n    int leftToRightResult = evaluateLeftToRight(expression);\n    int multiplicationFirstResult = evaluateMultiplicationFirst(expression);\n\n    if (leftToRightResult == bobsAnswer && multiplicationFirstResult == bobsAnswer) {\n        printf(\"both\\n\");\n    } else if (leftToRightResult == bobsAnswer) {\n        printf(\"left to right\\n\");\n    } else if (multiplicationFirstResult == bobsAnswer) {\n        printf(\"multiplication first\\n\");\n    } else {\n        printf(\"error\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 04:04:54"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_expression(expression, precedence_type):\n    if precedence_type == 'multiplication_first':\n        while '*' in expression:\n            for i in range(len(expression)):\n                if expression[i] == '*':\n                    result = int(expression[i-1]) * int(expression[i+1])\n                    expression = expression[:i-1] + str(result) + expression[i+2:]\n                    break\n        \n        result = 0\n        for i in range(0, len(expression), 2):\n            if i == 0:\n                result = int(expression[i])\n            else:\n                if expression[i-1] == '+':\n                    result += int(expression[i])\n        return result\n    \n    else:  # left to right\n        result = int(expression[0])\n        for i in range(1, len(expression), 2):\n            if expression[i] == '+':\n                result += int(expression[i+1])\n            else:\n                result *= int(expression[i+1])\n        return result\n\ndef check_calculation(expression, bob_answer):\n    mult_first = calculate_expression(expression, 'multiplication_first')\n    left_right = calculate_expression(expression, 'left_to_right')\n    \n    if mult_first == bob_answer and left_right == bob_answer:\n        return \"both\"\n    elif mult_first == bob_answer:\n        return \"multiplication first\"\n    elif left_right == bob_answer:\n        return \"left to right\"\n    else:\n        return \"error\"\n\ndef main():\n    expression = input().strip()\n    bob_answer = int(input().strip())\n    print(check_calculation(expression, bob_answer))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 04:05:08"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "expression, answer = input().split('=')\nanswer = int(answer.strip())\n\ndef evaluate_left_to_right(expr):\n    tokens = []\n    current = ''\n    for c in expr:\n        if c in ' +*':\n            if current:\n                tokens.append(current)\n                current = ''\n            if c != ' ':\n                tokens.append(c)\n        else:\n            current += c\n    if current:\n        tokens.append(current)\n    \n    if not tokens:\n        return 0\n    \n    result = int(tokens[0])\n    i = 1\n    while i < len(tokens):\n        op = tokens[i]\n        num = int(tokens[i+1])\n        if op == '+':\n            result += num\n        elif op == '*':\n            result *= num\n        i += 2\n    return result\n\ndef evaluate_multiplication_first(expr):\n    tokens = []\n    current = ''\n    for c in expr:\n        if c in ' +*':\n            if current:\n                tokens.append(current)\n                current = ''\n            if c != ' ':\n                tokens.append(c)\n        else:\n            current += c\n    if current:\n        tokens.append(current)\n    \n    # First pass for multiplication\n    i = 0\n    new_tokens = []\n    while i < len(tokens):\n        if tokens[i] == '*':\n            left = int(new_tokens.pop())\n            right = int(tokens[i+1])\n            new_tokens.append(str(left * right))\n            i += 2\n        elif tokens[i] in '+':\n            new_tokens.append(tokens[i])\n            i += 1\n        else:\n            new_tokens.append(tokens[i])\n            i += 1\n    \n    # Second pass for addition\n    if not new_tokens:\n        return 0\n    \n    result = int(new_tokens[0])\n    i = 1\n    while i < len(new_tokens):\n        op = new_tokens[i]\n        num = int(new_tokens[i+1])\n        if op == '+':\n            result += num\n        i += 2\n    return result\n\nleft_right = evaluate_left_to_right(expression)\nmulti_first = evaluate_multiplication_first(expression)\n\nif left_right == answer and multi_first == answer:\n    print('U')\nelif left_right == answer:\n    print('L')\nelif multi_first == answer:\n    print('M')\nelse:\n    print('I')",
    "timestamp": "2025-08-13 04:05:27"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nint evaluateLeftToRight(const string &expression) {\n    int result = 0;\n    int currentNum = 0;\n    char lastOp = '+';\n    \n    for (char ch : expression) {\n        if (isdigit(ch)) {\n            currentNum = currentNum * 10 + (ch - '0');\n        } else if (ch == '+' || ch == '*') {\n            if (lastOp == '+') {\n                result += currentNum;\n            } else if (lastOp == '*') {\n                result *= currentNum;\n            }\n            currentNum = 0;\n            lastOp = ch;\n        }\n    }\n    \n    // Apply the last operation\n    if (lastOp == '+') {\n        result += currentNum;\n    } else if (lastOp == '*') {\n        result *= currentNum;\n    }\n    \n    return result;\n}\n\nint evaluateMultiplicationFirst(const string &expression) {\n    int result = 0;\n    int currentNum = 1;\n    bool isMultiplying = false;\n\n    for (size_t i = 0; i < expression.length(); ++i) {\n        if (isdigit(expression[i])) {\n            if (isMultiplying) {\n                currentNum *= (expression[i] - '0');\n            } else {\n                currentNum = expression[i] - '0';\n                isMultiplying = true;\n            }\n        } else if (expression[i] == '+') {\n            result += currentNum;\n            isMultiplying = false;\n        } else if (expression[i] == '*') {\n            isMultiplying = true;\n        }\n    }\n    result += currentNum;\n    return result;\n}\n\nint main() {\n    string expression;\n    int bobAnswer;\n    cin >> expression >> bobAnswer;\n\n    int leftToRightResult = evaluateLeftToRight(expression);\n    int multiplicationFirstResult = evaluateMultiplicationFirst(expression);\n\n    bool matchesLeftToRight = (leftToRightResult == bobAnswer);\n    bool matchesMultiplicationFirst = (multiplicationFirstResult == bobAnswer);\n\n    if (matchesLeftToRight && matchesMultiplicationFirst) {\n        cout << \"both\" << endl;\n    } else if (matchesLeftToRight) {\n        cout << \"left to right\" << endl;\n    } else if (matchesMultiplicationFirst) {\n        cout << \"multiplication first\" << endl;\n    } else {\n        cout << \"error\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:17:06"
  }
]