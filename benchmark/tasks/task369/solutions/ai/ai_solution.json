[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char suit;\n    int rank;\n} Card;\n\nint get_suit_value(char suit) {\n    switch (suit) {\n        case 'S': return 10;\n        case 'H': return 20;\n        case 'D': return 30;\n        case 'C': return 40;\n        default: return 0;\n    }\n}\n\nint get_rank_value(char rank) {\n    if (rank >= '2' && rank <= '9') return rank - '0';\n    switch (rank) {\n        case 'T': return 10;\n        case 'J': return 11;\n        case 'Q': return 12;\n        case 'K': return 13;\n        case 'A': return 14;\n        default: return 0;\n    }\n}\n\nint compare_cards(const void *a, const void *b) {\n    Card *cardA = (Card *)a;\n    Card *cardB = (Card *)b;\n    return cardA->rank - cardB->rank;\n}\n\nint is_flush(Card hand[]) {\n    char suit = hand[0].suit;\n    for (int i = 1; i < 5; i++) {\n        if (hand[i].suit != suit) return 0;\n    }\n    return 1;\n}\n\nint is_straight(Card hand[]) {\n    for (int i = 0; i < 4; i++) {\n        if (hand[i+1].rank != hand[i].rank + 1) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint get_hand_rank(Card hand[]) {\n    int ranks[15] = {0};\n    for (int i = 0; i < 5; i++) {\n        ranks[hand[i].rank]++;\n    }\n\n    int pairs = 0, three = 0, four = 0;\n    for (int i = 2; i <= 14; i++) {\n        if (ranks[i] == 2) pairs++;\n        else if (ranks[i] == 3) three++;\n        else if (ranks[i] == 4) four++;\n    }\n\n    int flush = is_flush(hand);\n    int straight = is_straight(hand);\n\n    if (flush && straight) {\n        if (hand[4].rank == 14) return 10; // Royal flush\n        return 9; // Straight flush\n    }\n    if (four) return 8; // Four of a kind\n    if (three && pairs == 1) return 7; // Full house\n    if (flush) return 6; // Flush\n    if (straight) return 5; // Straight\n    if (three) return 4; // Three of a kind\n    if (pairs == 2) return 3; // Two pairs\n    if (pairs == 1) return 2; // One pair\n    return 1; // High card\n}\n\nint get_multiplier(int hand_rank) {\n    switch (hand_rank) {\n        case 10: return 100;\n        case 9: return 50;\n        case 8: return 20;\n        case 7: return 10;\n        case 6: return 5;\n        case 5: return 4;\n        case 4: return 3;\n        case 3: return 2;\n        case 2: return 1;\n        default: return 0;\n    }\n}\n\nint calculate_score(Card hand[]) {\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += get_suit_value(hand[i].suit);\n    }\n    qsort(hand, 5, sizeof(Card), compare_cards);\n    int hand_rank = get_hand_rank(hand);\n    int multiplier = get_multiplier(hand_rank);\n    return sum * multiplier;\n}\n\nint main() {\n    Card hand[5];\n    for (int i = 0; i < 5; i++) {\n        char card[3];\n        scanf(\"%2s\", card);\n        hand[i].suit = card[0];\n        hand[i].rank = get_rank_value(card[1]);\n    }\n    printf(\"%d\\n\", calculate_score(hand));\n    return 0;\n}",
    "timestamp": "2025-08-05 21:15:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\n\nint getSuitValue(char suit) {\n    switch (suit) {\n        case 'S': return 10;\n        case 'H': return 20;\n        case 'D': return 30;\n        case 'C': return 40;\n        default: return 0;\n    }\n}\n\nint getRankValue(char rank) {\n    if (isdigit(rank)) return rank - '0';\n    switch (rank) {\n        case 'A': return 1;\n        case 'T': return 10;\n        case 'J': return 11;\n        case 'Q': return 12;\n        case 'K': return 13;\n        default: return 0;\n    }\n}\n\nint getHandRank(const vector<pair<int, int>>& cards) {\n    vector<int> ranks;\n    for (const auto& card : cards) {\n        ranks.push_back(card.first);\n    }\n    sort(ranks.begin(), ranks.end());\n\n    bool isFlush = true;\n    int suit = cards[0].second;\n    for (const auto& card : cards) {\n        if (card.second != suit) {\n            isFlush = false;\n            break;\n        }\n    }\n\n    bool isStraight = true;\n    for (int i = 1; i < 5; ++i) {\n        if (ranks[i] != ranks[i-1] + 1) {\n            isStraight = false;\n            break;\n        }\n    }\n\n    if (isStraight && isFlush) {\n        if (ranks.back() == 13) return 1000; // Royal Flush\n        return 900; // Straight Flush\n    }\n\n    map<int, int> rankCount;\n    for (int r : ranks) {\n        rankCount[r]++;\n    }\n\n    bool hasFour = false, hasThree = false;\n    int pairs = 0;\n    for (const auto& p : rankCount) {\n        if (p.second == 4) hasFour = true;\n        else if (p.second == 3) hasThree = true;\n        else if (p.second == 2) pairs++;\n    }\n\n    if (hasFour) return 800; // Four of a Kind\n    if (hasThree && pairs == 1) return 700; // Full House\n    if (isFlush) return 600; // Flush\n    if (isStraight) return 500; // Straight\n    if (hasThree) return 400; // Three of a Kind\n    if (pairs == 2) return 300; // Two Pair\n    if (pairs == 1) return 200; // One Pair\n    return 100; // High Card\n}\n\nint main() {\n    vector<pair<int, int>> cards(5);\n    for (int i = 0; i < 5; ++i) {\n        string card;\n        cin >> card;\n        int rank = getRankValue(card[0]);\n        int suit = getSuitValue(card[1]);\n        cards[i] = {rank, suit};\n    }\n\n    int sumBasic = 0;\n    for (const auto& card : cards) {\n        sumBasic += card.second;\n    }\n\n    int handRank = getHandRank(cards);\n    int totalScore = sumBasic * handRank;\n\n    cout << totalScore << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:15:45"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class KPoker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        scanner.nextLine();\n        \n        for (int i = 0; i < N; i++) {\n            String[] parts = scanner.nextLine().split(\" \");\n            String[] cards = new String[5];\n            System.arraycopy(parts, 0, cards, 0, 5);\n            int multiplier = Integer.parseInt(parts[5]);\n            \n            int baseSum = 0;\n            for (String card : cards) {\n                char suit = card.charAt(0);\n                switch (suit) {\n                    case 'S': baseSum += 10; break;\n                    case 'C': baseSum += 20; break;\n                    case 'D': baseSum += 30; break;\n                    case 'H': baseSum += 40; break;\n                }\n            }\n            \n            int totalScore = baseSum * multiplier;\n            System.out.println(totalScore);\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 21:16:26"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class KPoker {\n    private static final Map<Character, Integer> SUIT_POINTS = Map.of(\n        'S', 4, 'H', 3, 'D', 2, 'C', 1\n    );\n\n    private static final Map<String, Integer> HAND_MULTIPLIERS = Map.of(\n        \"High Card\", 1,\n        \"One Pair\", 2,\n        \"Two Pair\", 3,\n        \"Three of a Kind\", 4,\n        \"Straight\", 5,\n        \"Flush\", 6,\n        \"Full House\", 7,\n        \"Four of a Kind\", 8,\n        \"Straight Flush\", 9,\n        \"Royal Flush\", 10\n    );\n\n    public static int calculateHandScore(List<Card> hand) {\n        int basicPoints = hand.stream()\n            .mapToInt(card -> SUIT_POINTS.get(card.suit))\n            .sum();\n\n        String handRank = determineHandRank(hand);\n        int multiplier = HAND_MULTIPLIERS.get(handRank);\n\n        return basicPoints * multiplier;\n    }\n\n    private static String determineHandRank(List<Card> hand) {\n        // Implement hand ranking logic similar to standard poker\n        // This is a placeholder and would require full poker hand evaluation logic\n        return \"High Card\";\n    }\n\n    static class Card {\n        char suit;\n        int value;\n\n        Card(char suit, int value) {\n            this.suit = suit;\n            this.value = value;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Card> hand = Arrays.asList(\n            new Card('S', 10),\n            new Card('H', 9),\n            new Card('D', 8),\n            new Card('C', 7),\n            new Card('S', 6)\n        );\n\n        int score = calculateHandScore(hand);\n        System.out.println(\"Hand Score: \" + score);\n    }\n}",
    "timestamp": "2025-08-05 21:16:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Suit point mapping\nconst int SUIT_POINTS[] = {0, 1, 2, 3, 4}; // Hearts, Diamonds, Clubs, Spades, Other\n\n// Hand ranking multipliers\nconst int HAND_MULTIPLIERS[] = {\n    1,      // High Card\n    2,      // One Pair\n    3,      // Two Pair\n    4,      // Three of a Kind\n    5,      // Straight\n    6,      // Flush\n    7,      // Full House\n    8,      // Four of a Kind\n    9,      // Straight Flush\n    10      // Royal Flush\n};\n\ntypedef struct {\n    char suit;\n    int value;\n} Card;\n\nint get_suit_points(char suit) {\n    switch(suit) {\n        case 'H': return SUIT_POINTS[0];\n        case 'D': return SUIT_POINTS[1];\n        case 'C': return SUIT_POINTS[2];\n        case 'S': return SUIT_POINTS[3];\n        default: return SUIT_POINTS[4];\n    }\n}\n\nint calculate_hand_score(Card hand[], int hand_rank) {\n    int total_suit_points = 0;\n    for (int i = 0; i < 5; i++) {\n        total_suit_points += get_suit_points(hand[i].suit);\n    }\n    \n    return total_suit_points * HAND_MULTIPLIERS[hand_rank];\n}\n\nint main() {\n    // Placeholder for actual poker hand determination logic\n    Card hand[5];\n    int hand_rank = 0; // Determined by poker hand classification algorithm\n\n    int score = calculate_hand_score(hand, hand_rank);\n    printf(\"Hand Score: %d\\n\", score);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:16:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <string>\n\nusing namespace std;\n\n// Card suit basic points mapping\nmap<char, int> suitPoints = {\n    {'S', 4},\n    {'H', 3},\n    {'D', 2},\n    {'C', 1}\n};\n\n// Hand ranking multipliers\nmap<string, int> handMultipliers = {\n    {\"High Card\", 1},\n    {\"One Pair\", 2},\n    {\"Two Pair\", 3},\n    {\"Three of a Kind\", 4},\n    {\"Straight\", 5},\n    {\"Flush\", 6},\n    {\"Full House\", 7},\n    {\"Four of a Kind\", 8},\n    {\"Straight Flush\", 9},\n    {\"Royal Flush\", 10}\n};\n\nclass Card {\npublic:\n    char suit;\n    string value;\n    \n    Card(char s, string v) : suit(s), value(v) {}\n};\n\nclass Hand {\nprivate:\n    vector<Card> cards;\n    string ranking;\n    \n    int calculateBasicPoints() {\n        int totalPoints = 0;\n        for (const auto& card : cards) {\n            totalPoints += suitPoints[card.suit];\n        }\n        return totalPoints;\n    }\n    \n    string determineHandRanking() {\n        // Implement standard poker hand ranking logic\n        // This is a simplified placeholder\n        return \"One Pair\";\n    }\n    \npublic:\n    Hand(vector<Card> h) : cards(h) {\n        ranking = determineHandRanking();\n    }\n    \n    int calculateScore() {\n        int basicPoints = calculateBasicPoints();\n        int multiplier = handMultipliers[ranking];\n        return basicPoints * multiplier;\n    }\n};\n\nint main() {\n    vector<Card> handCards = {\n        Card('S', \"10\"),\n        Card('H', \"J\"),\n        Card('D', \"Q\"),\n        Card('C', \"K\"),\n        Card('S', \"A\")\n    };\n    \n    Hand hand(handCards);\n    int score = hand.calculateScore();\n    \n    cout << \"Hand Score: \" << score << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:16:50"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from collections import Counter\n\n# Dictionary for card's basic points based on suit\nbasic_points = {'Hearts': 3, 'Diamonds': 2, 'Clubs': 1, 'Spades': 0}\n\n# Dictionary for hand multipliers based on ranking\nhand_multiplier = {\n    'High Card': 1,\n    'One Pair': 2,\n    'Two Pair': 3,\n    'Three of a Kind': 4,\n    'Straight': 5,\n    'Flush': 6,\n    'Full House': 8,\n    'Four of a Kind': 10,\n    'Straight Flush': 15,\n    'Royal Flush': 20\n}\n\ndef calculate_points(hand):\n    # Calculate the sum of basic points based on the card suits in the hand\n    total_basic_points = sum(basic_points[card.suit] for card in hand)\n    \n    # Determine the hand ranking\n    ranks = [card.rank for card in hand]\n    rank_count = Counter(ranks)\n    unique_ranks = len(rank_count)\n    sorted_ranks = sorted(rank_count.values(), reverse=True)\n\n    # Check for the hand type\n    if unique_ranks == 5:\n        is_straight = max(ranks) - min(ranks) == 4\n        is_flush = len(set(card.suit for card in hand)) == 1\n        if is_straight and is_flush:\n            if max(ranks) == 14:\n                hand_type = 'Royal Flush'\n            else:\n                hand_type = 'Straight Flush'\n        elif is_flush:\n            hand_type = 'Flush'\n        elif is_straight:\n            hand_type = 'Straight'\n        else:\n            hand_type = 'High Card'\n    else:\n        if sorted_ranks == [4, 1]:\n            hand_type = 'Four of a Kind'\n        elif sorted_ranks == [3, 2]:\n            hand_type = 'Full House'\n        elif sorted_ranks == [3, 1, 1]:\n            hand_type = 'Three of a Kind'\n        elif sorted_ranks == [2, 2, 1]:\n            hand_type = 'Two Pair'\n        elif sorted_ranks == [2, 1, 1, 1]:\n            hand_type = 'One Pair'\n    \n    # Calculate the hand score\n    score = total_basic_points * hand_multiplier[hand_type]\n    return score\n\nclass Card:\n    def __init__(self, rank, suit):\n        self.rank = rank\n        self.suit = suit\n\n# Example usage:\n# hand = [Card(10, 'Hearts'), Card(11, 'Hearts'), Card(12, 'Hearts'), Card(13, 'Hearts'), Card(14, 'Hearts')]\n# score = calculate_points(hand)\n# print(score)",
    "timestamp": "2025-08-13 05:41:40"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class KPoker {\n\n    enum Suit {\n        CLUBS, DIAMONDS, HEARTS, SPADES;\n    }\n\n    enum Rank {\n        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE;\n    }\n\n    static class Card {\n        Rank rank;\n        Suit suit;\n        int basicPoints;\n\n        public Card(Rank rank, Suit suit, int basicPoints) {\n            this.rank = rank;\n            this.suit = suit;\n            this.basicPoints = basicPoints;\n        }\n    }\n\n    enum HandRank {\n        HIGH_CARD(1),\n        ONE_PAIR(2),\n        TWO_PAIR(3),\n        THREE_OF_A_KIND(4),\n        STRAIGHT(5),\n        FLUSH(6),\n        FULL_HOUSE(7),\n        FOUR_OF_A_KIND(8),\n        STRAIGHT_FLUSH(9),\n        ROYAL_FLUSH(10);\n\n        int multiplier;\n\n        HandRank(int multiplier) {\n            this.multiplier = multiplier;\n        }\n    }\n\n    public static int calculateHandScore(List<Card> hand) {\n        int basicPointsSum = hand.stream().mapToInt(card -> card.basicPoints).sum();\n        HandRank handRank = evaluateHand(hand);\n        return basicPointsSum * handRank.multiplier;\n    }\n\n    private static HandRank evaluateHand(List<Card> hand) {\n        Map<Rank, Integer> rankCount = new HashMap<>();\n        Map<Suit, Integer> suitCount = new HashMap<>();\n        boolean isStraight = true;\n        int minRank = Integer.MAX_VALUE;\n        int maxRank = Integer.MIN_VALUE;\n\n        for (Card card : hand) {\n            rankCount.put(card.rank, rankCount.getOrDefault(card.rank, 0) + 1);\n            suitCount.put(card.suit, suitCount.getOrDefault(card.suit, 0) + 1);\n            int rankOrdinal = card.rank.ordinal();\n            minRank = Math.min(minRank, rankOrdinal);\n            maxRank = Math.max(maxRank, rankOrdinal);\n        }\n\n        isStraight = (maxRank - minRank == 4 || (maxRank == 12 && minRank == 0)) && rankCount.size() == 5;\n        boolean isFlush = suitCount.values().stream().anyMatch(count -> count == 5);\n        int pairs = 0, threeOfKind = 0, fourOfKind = 0;\n\n        for (int count : rankCount.values()) {\n            if (count == 2) pairs++;\n            if (count == 3) threeOfKind++;\n            if (count == 4) fourOfKind++;\n        }\n\n        if (isFlush && isStraight && maxRank == 12) return HandRank.ROYAL_FLUSH;\n        if (isFlush && isStraight) return HandRank.STRAIGHT_FLUSH;\n        if (fourOfKind == 1) return HandRank.FOUR_OF_A_KIND;\n        if (threeOfKind == 1 && pairs == 1) return HandRank.FULL_HOUSE;\n        if (isFlush) return HandRank.FLUSH;\n        if (isStraight) return HandRank.STRAIGHT;\n        if (threeOfKind == 1) return HandRank.THREE_OF_A_KIND;\n        if (pairs == 2) return HandRank.TWO_PAIR;\n        if (pairs == 1) return HandRank.ONE_PAIR;\n        return HandRank.HIGH_CARD;\n    }\n\n    public static void main(String[] args) {\n        List<Card> hand = Arrays.asList(\n                new Card(Rank.TEN, Suit.HEARTS, 1),\n                new Card(Rank.JACK, Suit.HEARTS, 1),\n                new Card(Rank.QUEEN, Suit.HEARTS, 1),\n                new Card(Rank.KING, Suit.HEARTS, 1),\n                new Card(Rank.ACE, Suit.HEARTS, 1)\n        );\n        int score = calculateHandScore(hand);\n        System.out.println(\"Hand score: \" + score);\n    }\n}",
    "timestamp": "2025-08-13 05:42:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n// Define card suits and their basic points\nenum Suit {\n    HEARTS, DIAMONDS, CLUBS, SPADES\n};\n\n// Define hand rankings and their multipliers\nenum Ranking {\n    HIGH_CARD = 1,\n    ONE_PAIR = 2,\n    TWO_PAIR = 3,\n    THREE_OF_A_KIND = 4,\n    STRAIGHT = 5,\n    FLUSH = 6,\n    FULL_HOUSE = 7,\n    FOUR_OF_A_KIND = 8,\n    STRAIGHT_FLUSH = 9\n};\n\n// Function to calculate basic points of card\nint getBasicPoints(char suit) {\n    switch (suit) {\n        case 'H': return 4; // Heart\n        case 'D': return 3; // Diamond\n        case 'C': return 2; // Club\n        case 'S': return 1; // Spade\n        default: return 0;\n    }\n}\n\n// Dummy function to determine hand ranking\nint determineRanking(char *hand) {\n    // This is a placeholder. You would implement actual poker hand ranking here.\n    return HIGH_CARD;\n}\n\n// Function to calculate score of a hand\nint calculateScore(char *hand) {\n    int basicPointsSum = 0;\n    char suits[5];\n    \n    for (int i = 0; i < 5; i++) {\n        suits[i] = hand[i * 3 + 1]; // Assuming hand is formatted as \"2H 3D 5C 9S KD\"\n        basicPointsSum += getBasicPoints(suits[i]);\n    }\n    \n    int ranking = determineRanking(hand);\n    return basicPointsSum * ranking;\n}\n\nint main() {\n    char hand[] = \"2H 3D 5C 9S KD\";\n    int score = calculateScore(hand);\n    printf(\"Score of hand: %d\\n\", score);\n    return 0;\n}",
    "timestamp": "2025-08-13 05:42:19"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_hand_value(hand, basic_points, hand_rankings):\n    # Calculate total basic points for the hand\n    total_basic_points = sum(basic_points[card[1]] for card in hand)\n    \n    # Determine hand ranking and its multiplier\n    ranking, multiplier = max(\n        (ranking, mult) \n        for ranking, mult in hand_rankings.items() \n        if is_valid_hand(hand, ranking)\n    )\n    \n    # Calculate final score\n    return total_basic_points * multiplier\n\ndef is_valid_hand(hand, ranking):\n    # Implement hand ranking detection logic\n    if ranking == 'Royal Flush':\n        return is_royal_flush(hand)\n    elif ranking == 'Straight Flush':\n        return is_straight_flush(hand)\n    elif ranking == 'Four of a Kind':\n        return is_four_of_a_kind(hand)\n    elif ranking == 'Full House':\n        return is_full_house(hand)\n    elif ranking == 'Flush':\n        return is_flush(hand)\n    elif ranking == 'Straight':\n        return is_straight(hand)\n    elif ranking == 'Three of a Kind':\n        return is_three_of_a_kind(hand)\n    elif ranking == 'Two Pair':\n        return is_two_pair(hand)\n    elif ranking == 'One Pair':\n        return is_one_pair(hand)\n    else:\n        return True  # High card or default case\n\ndef is_royal_flush(hand):\n    # Implement Royal Flush detection\n    pass\n\ndef is_straight_flush(hand):\n    # Implement Straight Flush detection\n    pass\n\ndef is_four_of_a_kind(hand):\n    # Implement Four of a Kind detection\n    pass\n\ndef is_full_house(hand):\n    # Implement Full House detection\n    pass\n\ndef is_flush(hand):\n    # Implement Flush detection\n    pass\n\ndef is_straight(hand):\n    # Implement Straight detection\n    pass\n\ndef is_three_of_a_kind(hand):\n    # Implement Three of a Kind detection\n    pass\n\ndef is_two_pair(hand):\n    # Implement Two Pair detection\n    pass\n\ndef is_one_pair(hand):\n    # Implement One Pair detection\n    pass\n\n# Example usage\nbasic_points = {\n    'Hearts': 1,\n    'Diamonds': 2,\n    'Clubs': 3,\n    'Spades': 4\n}\n\nhand_rankings = {\n    'Royal Flush': 10,\n    'Straight Flush': 8,\n    'Four of a Kind': 6,\n    'Full House': 5,\n    'Flush': 4,\n    'Straight': 3,\n    'Three of a Kind': 2,\n    'Two Pair': 1,\n    'One Pair': 0.5,\n    'High Card': 0.1\n}\n\n# Example hand input format: [('A', 'Hearts'), ('K', 'Spades'), ...]",
    "timestamp": "2025-08-13 05:42:32"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_poker_score(hand):\n    # Define basic points for each suit\n    suit_points = {'S': 0, 'D': 2, 'H': 3, 'C': 1}\n    \n    # Extract ranks and suits\n    ranks = []\n    suits = []\n    for card in hand:\n        rank = card[:-1]\n        suit = card[-1]\n        ranks.append(rank)\n        suits.append(suit)\n    \n    # Calculate basic points\n    basic_points = sum(suit_points[s] for s in suits)\n    \n    # Convert ranks to numerical values for easier comparison\n    rank_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, \n                  '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n    numerical_ranks = [rank_order[r] for r in ranks]\n    numerical_ranks_sorted = sorted(numerical_ranks)\n    \n    # Check for hand rankings\n    def is_flush():\n        return len(set(suits)) == 1\n    \n    def is_straight():\n        if len(set(numerical_ranks_sorted)) != 5:\n            return False\n        if numerical_ranks_sorted[-1] - numerical_ranks_sorted[0] == 4:\n            return True\n        # Check for low straight (A-2-3-4-5)\n        if set(numerical_ranks_sorted) == {14, 2, 3, 4, 5}:\n            return True\n        return False\n    \n    def get_rank_counts():\n        from collections import defaultdict\n        counts = defaultdict(int)\n        for r in numerical_ranks:\n            counts[r] += 1\n        return sorted(counts.values(), reverse=True)\n    \n    rank_counts = get_rank_counts()\n    \n    # Determine hand ranking and multiplier\n    multiplier = 0\n    if is_flush() and is_straight():\n        if numerical_ranks_sorted[-1] == 14 and numerical_ranks_sorted[0] == 10:\n            multiplier = 100  # Royal flush\n        else:\n            multiplier = 50  # Straight flush\n    elif rank_counts[0] == 4:\n        multiplier = 20  # Four of a kind\n    elif rank_counts == [3, 2]:\n        multiplier = 10  # Full house\n    elif is_flush():\n        multiplier = 5  # Flush\n    elif is_straight():\n        multiplier = 4  # Straight\n    elif rank_counts[0] == 3:\n        multiplier = 3  # Three of a kind\n    elif rank_counts == [2, 2, 1]:\n        multiplier = 2  # Two pair\n    elif rank_counts[0] == 2:\n        multiplier = 1  # One pair\n    else:\n        multiplier = 0  # High card\n    \n    total_score = basic_points * multiplier\n    return total_score",
    "timestamp": "2025-08-13 05:42:57"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nenum HandRank {\n    HIGH_CARD,\n    ONE_PAIR,\n    TWO_PAIR,\n    THREE_OF_A_KIND,\n    STRAIGHT,\n    FLUSH,\n    FULL_HOUSE,\n    FOUR_OF_A_KIND,\n    STRAIGHT_FLUSH\n};\n\nunordered_map<char, int> suit_map = {\n    {'C', 1}, // Clubs\n    {'D', 2}, // Diamonds\n    {'H', 3}, // Hearts\n    {'S', 4}  // Spades\n};\n\nunordered_map<HandRank, int> hand_multiplier = {\n    {HIGH_CARD, 1},\n    {ONE_PAIR, 2},\n    {TWO_PAIR, 2},\n    {THREE_OF_A_KIND, 3},\n    {STRAIGHT, 4},\n    {FLUSH, 5},\n    {FULL_HOUSE, 6},\n    {FOUR_OF_A_KIND, 7},\n    {STRAIGHT_FLUSH, 8}\n};\n\nint cardValue(char c) {\n    if (isdigit(c)) return c - '0';\n    switch (c) {\n        case 'T': return 10;\n        case 'J': return 11;\n        case 'Q': return 12;\n        case 'K': return 13;\n        case 'A': return 14;\n    }\n    return 0;\n}\n\nHandRank determineHandRank(vector<int>& values, vector<char>& suits) {\n    bool flush = all_of(suits.begin(), suits.end(), [&](char s) { return s == suits[0]; });\n    sort(values.begin(), values.end());\n    bool straight = adjacent_find(values.begin(), values.end(), [](int a, int b) { return b != a + 1; }) == values.end();\n\n    if (straight && flush) return STRAIGHT_FLUSH;\n    unordered_map<int, int> value_counts;\n    for (int value : values) value_counts[value]++;\n\n    vector<int> counts;\n    for (auto& entry : value_counts) counts.push_back(entry.second);\n    sort(counts.rbegin(), counts.rend());\n    \n    if (counts[0] == 4) return FOUR_OF_A_KIND;\n    if (counts[0] == 3 && counts[1] == 2) return FULL_HOUSE;\n    if (flush) return FLUSH;\n    if (straight) return STRAIGHT;\n    if (counts[0] == 3) return THREE_OF_A_KIND;\n    if (counts[0] == 2 && counts[1] == 2) return TWO_PAIR;\n    if (counts[0] == 2) return ONE_PAIR;\n    return HIGH_CARD;\n}\n\nint calculateHandScore(vector<string>& hand) {\n    vector<int> values;\n    vector<char> suits;\n    \n    int basicPointsSum = 0;\n    for (string& card : hand) {\n        int value = cardValue(card[0]);\n        char suit = card[1];\n        values.push_back(value);\n        suits.push_back(suit);\n\n        basicPointsSum += suit_map[suit];\n    }\n    \n    HandRank rank = determineHandRank(values, suits);\n    return basicPointsSum * hand_multiplier[rank];\n}\n\nint main() {\n    vector<string> hand = {\"AS\", \"KH\", \"QD\", \"TC\", \"9H\"}; // Example input\n    cout << calculateHandScore(hand) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 11:27:07"
  }
]