[
  {
    "language": "C++",
    "code": "#include<string>\n#include<vector>\n#include<iostream>\n\n#define\tpb\tpush_back\n\nusing namespace std;\n\nint main(){\n\tfor(int plen;cin>>plen,plen;){\n\t\tint cnum,w,cspace;\n\t\tcin>>cnum>>w>>cspace;\n\t\tcin.ignore();\n\n\t\tvector<string> mul;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tint len=s.length();\n\t\t\tif(len==0)\tmul.pb(\"\");\n\t\t\tfor(int i=0;i<len;i+=w){\n\t\t\t\tif(w<len-i)\tmul.pb(s.substr(i,w));\n\t\t\t\telse\t\tmul.pb(s.substr(i));\n\t\t\t}\n\t\t}\n//for(int i=0;i<mul.size();i++)\tcout<<mul[i]<<endl;\n\t\tint m=mul.size();\n\t\tint pages=(m+(plen*cnum-1))/(plen*cnum);\t// ceiling\n\t\tfor(int i=0;i<pages;i++){\n\t\t\tint offset=i*plen*cnum;\n\t\t\tvector<string> pg(plen);\n\t\t\tif(i==pages-1){\t// last page\n\t\t\t\tfor(int j=offset;j<m;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t\tfor(int j=m;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=string(w,'.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j=0;j<plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tfor(int j=0;j<cnum;j++){\n\t\t\t\t\tif(j>0)\tcout<<string(cspace,'.');\n\t\t\t\t\tcout<<pg[i].substr(w*j,w);\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\n\t\tcout<<'?'<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <sstream>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n#define rp(i,c) rep(i,(c).size())\n#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n#define mp make_pair\n#define pb push_back\n#define all(c) (c).begin(),(c).end()\n#define dbg(x) cerr<<#x<<\" = \"<<(x)<<endl\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pi;\nconst int inf=1<<28;\nconst double INF=1e10,EPS=1e-9;\n\nint pl,cn,w,sp;\nint W,page,line,col;\nvector<vector<string> > ans;\n\nvoid out(string s)\n{\n\tif(col==0&&line==0)\n\tans.pb(vector<string>(pl,string(W,'.')));\n\t\t\t\n\tint x=(w+sp)*col,l=s.size();\n\trep(i,min(l,w))ans[page][line][x+i]=s[i];\n\tif(++line==pl)\n\t{\n\t\tline=0;\n\t\tif(++col==cn)col=0,page++;\n\t}\n\tif(l>w)out(s.substr(w));\n}\nint main()\n{\n\twhile(cin>>pl,pl)\n\t{\n\t\tcin>>cn>>w>>sp; cin.ignore();\n\t\t\n\t\tW=cn*w+sp*(cn-1); page=line=col=0;\n\t\tans.clear();\n\t\t\n\t\tstring str;\n\t\twhile(getline(cin,str),str!=\"?\")out(str);\n\t\trep(i,page+1)\n\t\t{\n\t\t\trep(j,pl)cout<<ans[i][j]<<endl;\n\t\t\tcout<<\"#\"<<endl;\n\t\t}\n\t\tcout<<\"?\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "# 2 \"1115.cpp\"\n#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <vector>\n#include <set>\n#include <map>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <complex>\n#include <functional>\n#include <iterator>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n\n\nnamespace solution {\n    using namespace std;\n\n    typedef istringstream ISS;\n    typedef ostringstream OSS;\n    typedef vector<string> VS;\n    typedef long long LL;\n    typedef int INT;\n    typedef vector<INT> VI;\n    typedef vector<VI> VVI;\n    typedef pair<INT, INT> II;\n\n    const int SIZE = 101;\n    const int WORD_MAX = 1001;\n    int n;\n    int m;\n    int w;\n    int p;\n    string S[WORD_MAX];\n    int si;\n    string T[SIZE][SIZE];\n    int pi;\n    int ti;\n\n    class Solution {\n    private:\n        void init() {\n        }\n\n        int get_number() {\n            string line;\n            getline( cin, line );\n            ISS iss( line );\n            int res;\n            iss >> res;\n            return res;\n        }\n\n        bool input() {\n            n = get_number();\n            if ( n == 0 ) return false;\n            m = get_number();\n            w = get_number();\n            p = get_number();\n\n            string line;\n            si = 0;\n            while ( getline( cin, line ) ) {\n                if ( line == \"?\" ) break;\n                S[si ++] = line;\n            }\n            return true;\n        }\n\n        void add_item( string s ) {\n            int len = s.size();\n            if ( len > w ) {\n                for ( int i = 0; i < len; ) {\n                    string t = s.substr( i, w );\n                    add_item(t);\n                    i += w;\n                }\n            } else {\n                int r = ti % n;\n                int c = ti / n;\n\n                for ( int i = 0; i < len; ++ i ) {\n                    T[pi-1][r][i+w*c+p*c] = s[i];\n                }\n\n                ti ++;\n                if ( ti >= n * m ) {\n                    ti = 0;\n                    pi ++;\n                }\n            }\n        }\n\n        void solve() {\n            pi = 1;\n            ti = 0;\n            for ( int i = 0; i < SIZE; ++ i ) {\n                for ( int j = 0; j < n; ++ j ) {\n                    T[i][j] = string( m * w + p * ( m - 1 ), '.' );\n                }\n            }\n\n            for ( int i = 0; i < si; ++ i ) {\n                string word = S[i];\n                add_item(word);\n            }\n        }\n\n        void output() {\n            for ( int i = 0; i < pi; ++ i ) {\n                for ( int j = 0; j < n; ++ j ) {\n                    cout << T[i][j] << endl;\n                }\n                cout << \"#\" << endl;\n            }\n            cout << \"?\" << endl;\n        }\n\n    public:\n        int run() {\n            while ( init(), input() ) {\n                solve();\n                output();\n            }\n            return 0;\n        }\n    };\n}\n\nint main() {\n    using namespace solution;\n    Solution s;\n    return s.run();\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<(int)b;i++)\n#define rep(i,n) REP(i,0,n)\n\nint PLen, CNum, Width, CSpace;\nvector<string> lines;\n\nvoid solve() {\n  vector<string> output;\n  int N = PLen, M = Width * CNum + CSpace * (CNum - 1);\n  output.resize(PLen);\n  rep(i, N) output[i] = string(M, '.');\n  \n  int currColumn = 0;\n  pair<int, int> currPos = {0, 0};\n  \n  auto printPage = [&]() {\n    rep(i, N) cout << output[i] << endl;\n    cout << \"#\" << endl;\n    fill(output.begin(), output.end(), string(M, '.'));\n    currColumn = 0;\n    currPos = {0, 0};\n  };\n  \n  auto print = [&](char c) {\n    if(currPos.second >= (currColumn * Width + CSpace * currColumn) + Width) {\n      currPos.first ++;\n      if(currPos.first >= PLen) {\n\tcurrPos.first = 0;\n\tcurrColumn ++;\n      }\n      currPos.second = currColumn * Width + CSpace * currColumn;\n    }\n    \n    if(currColumn >= CNum) {\n      printPage();\n    }\n    \n    output[currPos.first][currPos.second++] = c;\n  };\n\n  auto nextLine = [&]() {\n    currPos.first ++;\n    if(currPos.first >= PLen) {\n      currColumn ++;\n      currPos.first = 0;\n    }\n    currPos.second = currColumn * Width + CSpace * currColumn;\n  };\n  \n  rep(i, lines.size()) {    \n    int LLen = lines[i].size();\n    rep(j, LLen) {\n      print(lines[i][j]);\n    }\n    nextLine();\n  }\n  \n  printPage();\n  cout << \"?\" << endl;\n}\n\nint main() {\n\n  while(1) {\n    \n    lines.clear();\n    \n    cin >> PLen >> CNum >> Width >> CSpace; cin.ignore();\n    if(PLen == 0) break;\n    \n    for(int i=0;; i++) {\n      string in;\n      getline(cin, in);\n      if(in == \"?\") break;\n      else {\n\tlines.push_back(in);\n      }\n    }\n    solve();\n    \n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main()\n{\n  while(true){\n    int plen,cnum,width,cspace;\n    cin >> plen;\n    if( plen == 0 ) break;\n    cin >> cnum >> width >> cspace;\n    vector<string> column;\n    vector<string> words;\n    string s;\n    int len=0;\n    getline(cin,s);\n    while(true){\n      getline(cin,s);\n      if(s==\"?\")break;\n      len+=s.length();\n      words.push_back(s);\n    }\n    if(len==0){\n      cout <<\"?\"<<endl;\n    }\n    for(int i = 0; i < (int)words.size(); ++i){\n      if((int)words[i].length()<width){\n\tcolumn.push_back(words[i]);\n      }else{\n\tstring t = words[i];\n\twhile((int)t.length()>=width){\n\t  column.push_back(t.substr(0,width));\n\t  t.erase(t.begin(),t.begin()+width);\n\t}\n\tif(t.length()>0){\n\t  column.push_back(t);\n\t}\n      }\n    }\n    while((column.size()%(plen*cnum))!=0){\n      column.push_back(\"\");\n    }\n    int now_page=1;\n    for(int i = 0; i < (int)column.size(); ++i){\n      if(i>0&&(i%plen)==0){\n\ti=plen*cnum*now_page;\n\tcout<<\"#\"<<endl;\n\tif(i>=(int)column.size())break;\n\t++now_page;\n      }\n\n      int now_print = i;\n      for(int j = 0; j < cnum; ++j){\n\tcout << column[now_print];\n\tfor(int k = 0; k < width-(int)column[now_print].length(); ++k){\n\t  cout<<'.';\n\t}\n\tif(j<cnum-1){\n\t  for(int k = 0; k < cspace; ++k){\n\t    cout <<'.';\n\t  }\n\t}\n\tnow_print += plen;\n      }\n      cout << endl;\n    }\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n\nint R, C, W, S;\nvector<string> V;\n\nint main() {\n  while(cin >> R && R) {\n    V.clear();\n    cin >> C;\n    cin >> W;\n    cin >> S;\n    cin.ignore();\n    string line;\n    while(getline(cin, line) && line != \"?\") {\n      for(int i = 0; i < line.size(); i += W) {\n        V.push_back(line.substr(i, W));\n        V.back().resize(W, '.');\n      }\n    }\n\n    while(V.size() % (R*C) != 0) V.push_back(string(W, '.'));\n\n    for(int k = 0; k < V.size(); k += R*C) {\n      for(int i = 0; i < R; ++i) {\n        for(int j = 0; j < C; ++j) {\n          if(j) cout << string(S, '.');\n          cout << V[k + i + j * R];\n        }\n        cout << endl;\n      }\n      cout << \"#\" << endl;\n    }\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  char text[plen][cnum*width+cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  while(true)\n    {\n      getline(cin,line);\n      if(line == \"?\")break;\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t  printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n  // cout << \"printed ? \" << printed << endl;\n  if(!printed)\n    {\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <deque>\n\nusing namespace std;\n\nint L, C, W, S;\ndeque<string> lines;\n\nvoid Print() {\n  if (lines.size() < L*C) lines.resize(L*C);\n  for (int i = 0; i < L; ++i) {\n    string buf(W*C + S*(C-1), '.');\n    for (int j = 0; j < C; ++j) {\n      memcpy(&buf[(W+S)*j], lines[L*j+i].data(), lines[L*j+i].size());\n    }\n    cout << buf << endl;\n  }\n  cout << \"#\" << endl;\n  lines.erase(lines.begin(), lines.begin() + L*C);\n}\n\nint main() {\n  while (cin >> L >> C >> W >> S && L) {\n    lines.clear();\n    string line;\n    getline(cin, line);\n    while (getline(cin, line) && line != \"?\") {\n      if (line.size() < W) {\n\tlines.push_back(line);\n      } else {\n\tfor (int x = 0; x < line.size(); x += W) {\n\t  lines.push_back(line.substr(x, W));\n\t}\n      }\n      if (lines.size() > L * C) Print();\n    }\n    Print();\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n#define dump(n) cerr<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define rep(i,n) for(int i=0;i<n;i++)\n\ntypedef vector<string> vs;\n\nint main()\n{\n\tfor(int r,c,w,b;cin>>r>>c>>w>>b;){\n\t\tcin.get();\n\t\t\n\t\tvs lines;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tif(s==\"\")\n\t\t\t\ts+='.';\n\t\t\twhile(s.size()%w)\n\t\t\t\ts+='.';\n\t\t\tfor(int i=0;i<s.size();i+=w)\n\t\t\t\tlines.push_back(s.substr(i,w));\n\t\t}\n\t\twhile(lines.size()%(r*c))\n\t\t\tlines.push_back(string(w,'.'));\n\t\tfor(int i=0;i<lines.size();i+=r*c){\n\t\t\trep(j,r) rep(k,c)\n\t\t\t\tcout<<lines[i+j+k*r]<<(k==c-1?\"\\n\":string(b,'.'));\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\t\tcout<<'?'<<endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define BW(a,x,b) ((a)<=(x)&&(x)<=(b))\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define INF 1 << 30\n#define EPS 1e-10\n\ntypedef pair<int, int> pi;\ntypedef pair<int, pi> pii;\ntypedef vector<int> vi;\ntypedef queue<int> qi;\ntypedef long long ll;\n\nint plen, cnum, width, cspace;\nchar res[128][64], line[1024];\n\nint main(){\n  while(scanf(\"%d\", &plen) && plen){\n    scanf(\"%d%d%d\", &cnum, &width, &cspace);\n\n    //    fill(res[0][0], res[4098][63], '.');\n    rep(i, plen){\n      rep(j, cnum * width + cspace * (cnum-1)) res[i][j] = '.';\n      res[i][cnum * width + cspace * (cnum-1)] = '\\0';\n    }\n\n    int p = 0, c = 0;\n    fgets(line, sizeof(line), stdin);\n    while(1){\n      fgets(line, sizeof(line), stdin);\n      if(line[0] == '?') break;\n      line[strlen(line)-1] = '\\0';\n      //      printf(\"%d %d %d\\n\", (int)strlen(line), p, c);\n      if(p == plen){ c++; p = 0;}\n      if(c == cnum){\n\trep(i, plen) printf(\"%s\\n\", res[i]);\n\tputs(\"#\");\n\tp = c = 0;\n\trep(i, plen) rep(j, cnum * width + cspace * (cnum-1)) res[i][j] = '.';\n      }\n      rep(i, strlen(line)){\n\tif(i && i%width == 0) p++;\n\tif(p == plen){ c++; p = 0;}\n\tif(c == cnum){\n\t  rep(i, plen) printf(\"%s\\n\", res[i]);\n\t  puts(\"#\");\n\t  p = c = 0;\n\t  rep(i, plen) rep(j, cnum * width + cspace * (cnum-1)) res[i][j] = '.';\n\t}\n\tres[p][c*width+c*cspace+i%width] = line[i];\n      }\n      p++;\n    }\n    if(res[0][0] != '.'){\n      rep(i, plen) printf(\"%s\\n\", res[i]);\n      puts(\"#\");\n    }\n    puts(\"?\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  char text[plen][cnum*width+(cnum-1)*cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+(cnum-1)*cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  bool update = false;\n  while(true)\n    {\n\n      getline(cin,line);\n      if(line == \"?\")break;\n      update = true;\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\t  printed = false;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t  printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+(cnum-1)*cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n  // cout << \"printed ? \" << printed << endl;\n  if(!update)printed =true;\n  if(!printed)\n    {\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace*(cnum-1))text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l,m;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        string res[1024];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if( j%plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<space;\n            if( j%plen + plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<'\\n';\n            if((j+1)%plen==0){\n                cout<<\"#\"<<endl;\n                if( j + j/plen*plen*cnum >= k ) break;\n            }\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nvoid print(const vector<string> &page) {\n  for(const auto &line : page) {\n    cout << line << endl;\n  }\n  cout << \"#\" << endl;\n}\n\nint main(){\n  for(int plen, cnum, width, cspace; cin >> plen && plen;) {\n    cin >> cnum >> width >> cspace;\n    cin.ignore();\n\n    const int len = cnum * width + cspace * (cnum - 1);\n    vector<string> page(plen, string(len, '.'));\n\n    int r = 0, c = 0;\n    for(string line; getline(cin, line) && line != \"?\";) {\n      bool first = true;\n      while(line.size() || first) {\n\tstring word;\n\tif(line.size() >= width) {\n\t  word = line.substr(0, width);\n\t  line = line.substr(width);\n\t}\n\telse {\n\t  word = line;\n\t  line = \"\";\n\t}\n\n\tconst int offset = c * (width + cspace);\n\tfor(int i = 0; i < word.size(); ++i) {\n\t  page[r][i + offset] = word[i];\n\t}\n\n\tif(++r == plen) {\n\t  r = 0;\n\t  if(++c == cnum) {\n\t    c = 0;\n\t    print(page);\n\t    page = vector<string>(plen, string(len, '.'));\n\t  }\n\t}\n\n\tfirst = false;\n      }\n    }\n\n    if(any_of(page[0].begin(), page[0].end(), [](char c) { return c != '.';})) {\n      print(page);\n    }\n    cout << \"?\" << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main()\n{\n  int plen,cnum,width,cspace;\n  while(cin >> plen >> cnum >> width >> cspace && plen){\n    vector<string> column;\n    vector<string> words;\n    string s;\n    int len=0;\n    getline(cin,s);\n    while(true){\n      getline(cin,s);\n      if(s==\"?\")break;\n      len+=s.length();\n      words.push_back(s);\n    }\n    //cout << \"TEXT LENGTH = \" << len << endl;\n    if(len==0){\n      cout <<\"?\"<<endl;\n      continue;\n    }\n    for(int i = 0; i < (int)words.size(); ++i){\n      if((int)words[i].length()<width){\n\tcolumn.push_back(words[i]);\n      }else{\n\tstring t = words[i];\n\twhile((int)t.length()>=width){\n\t  column.push_back(t.substr(0,width));\n\t  t.erase(t.begin(),t.begin()+width);\n\t}\n\tif(t.length()>0){\n\t  column.push_back(t);\n\t}\n      }\n    }\n    while((column.size()%(plen*cnum))!=0){\n      column.push_back(\"\");\n    }\n    int now_page=1;\n    for(int i = 0; i < (int)column.size(); ++i){\n      if(i>0&&(i%plen)==0){\n\ti=plen*cnum*now_page;\n\tcout<<\"#\"<<endl;\n\tif(i>=(int)column.size())break;\n\t++now_page;\n      }\n\n      int now_print = i;\n      for(int j = 0; j < cnum; ++j){\n\tcout << column[now_print];\n\tfor(int k = 0; k < width-(int)column[now_print].length(); ++k){\n\t  cout<<'.';\n\t}\n\tif(j<cnum-1){\n\t  for(int k = 0; k < cspace; ++k){\n\t    cout <<'.';\n\t  }\n\t}\n\tnow_print += plen;\n      }\n      cout << endl;\n    }\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define MAX 100\n\nchar data[MAX][MAX/2][MAX];\nint plen, cnum, width, cspace, page;\nint x, y;\nstring ss;\n\nvoid init(){\n  page = 0;\n  for(int i = 0 ; i < MAX ; i++){\n    for(int j = 0 ; j < MAX/2 ; j++){\n      for(int k = 0 ; k < MAX ; k++){\n        data[i][j][k] = '.';\n      }\n    }\n  }\n}\n\nbool check(){\n  bool ok = true;\n  if(ss.empty()) return ok;\n\n  for(int i = 0 ; i < plen ; i++){\n    for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n      if(data[i][j][page] != '.') return ok;\n    }\n  }\n  return !ok;\n}\n\nvoid change(){\n  y++;\n  if(y == plen){\n    y = 0;\n    x++;\n    if(x == cnum){\n      x = y = 0;\n      page++;\n    }\n  }\n}\n\nvoid insert(string &str){\n  int size = str.size(), start;\n  int end, p = 0;\n  bool flg = true;\n\n  while(flg){\n    start = x*(width+cspace);\n    if(size - p <= width){\n      end = start + size - p;\n      flg = false;\n    }else{\n      flg = true;\n      end = start + width;\n    }\n    for(int i = start ; i < end ; i++, p++){\n      if(p == size){ \n        flg = false;\n        break;\n      }\n      data[y][i][page] = str[p];\n    }\n    change(); \n  }\n}\n\nvoid print(){\n  if(!check()) page--;\n  for(int k = 0 ; k <= page ; k++){\n    for(int i = 0 ; i < plen ; i++){\n      for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n        cout << data[i][j][k];\n      }\n      cout << endl;\n    }\n    cout << '#' << endl;\n  }\n  cout << '?' << endl;\n}\n\nint main(){\n  string str;\n  while(cin >> plen && plen){\n    init();\n    cin >> cnum >> width >> cspace;\n\n    cin.ignore();\n    x = y = 0;\n    while(getline(cin,str), str != \"?\"){\n      ss = str;\n      if(str.empty()){\n        change();\n      }else{\n        insert(str);\n      }\n    }\n    print();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  char text[plen][cnum*width+cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  while(true)\n    {\n      getline(cin,line);\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n      if(line == \"?\")break;\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n\n  if(!printed)\n    {\n\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    for(;cin >> plen, plen;){\n        vector<string> line(0);\n        cin >> cnum >> width >> cspace;\n        int i = 0, j, k, l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore(256, '\\n');\n        string tmp;\n        for(i=0;;i++){\n            getline(cin, tmp);\n            if(tmp == \"?\") break;\n            line.push_back(tmp);\n        }\n        vector<string> res(0);\n        for(j=0, k=0; j<i; j++, k++){\n            res.push_back(string(\"\"));\n            for(l=0; l < line[j].size(); l++){\n                if(l && l % width == 0){\n                    res.push_back(string(\"\"));\n                    k++;\n                }\n                res[ k ].append(1, line[j][l]);\n            }\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j = 0;; j++){\n            if( j && j%plen == 0 ){\n                cout << \"#\" << endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n            for(l = 0; l < cnum; l++){\n                if(l) cout << space;\n                if( j%plen + plen*l + j/plen*plen*cnum < k ){\n                    cout << res[ j%plen + plen*l + j/plen*plen*cnum ];\n                }else{\n                    cout << empty;\n                }\n            }\n            cout<<'\\n';\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,a,b;\nstring s[111];\nvoid init() {\n  a=b=0;\n  for(int i=0; i<n; i++) {\n    s[i]=\"\";\n    for(int j=0; j<x; j++) {\n      if(j) for(int k=0; k<y; k++) s[i]+='.';\n      for(int k=0; k<m; k++) s[i]+='.';\n    }\n  }\n}\n \nvoid print() {\n  for(int i=0; i<n; i++) cout << s[i] << endl;\n  cout << \"#\" << endl;\n}\n \nvoid next() {\n  a++;\n  if(a==n) {\n    a=0;\n    b++;\n  }\n  if(b==x) {\n    print();\n    init();\n  }\n}\n \nint main() {\n  while(cin >> n && n) {\n    cin >> x >> m >> y;\n    string t;\n    getline(cin,t);\n    init();\n    while(getline(cin,t)) {\n      if(t==\"?\") {\n        if(a||b) print();\n        cout << t << endl;\n        break;\n      }\n      int k=0;\n      for(int i=0; i<t.size(); i++) {\n        s[a][b*(m+y)+k]=t[i];\n        k++;\n        if(k==m) {\n          k=0;\n          next();\n        }\n      }\n      if(k||t==\"\") next();\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <deque>\nusing namespace std;\n\nint pl,cn,w,cs;\ndeque<string> str;\nstring fie[51][51];\nint main(void){\n\twhile(1){\n\t\tscanf(\"%d%*c\",&pl);\n\t\tif(pl==0)break;\n\t\tscanf(\"%d%*c\",&cn);\n\t\tscanf(\"%d%*c\",&w);\n\t\tscanf(\"%d%*c\",&cs);\n\t\tfor(int i=0;i<=50;i++){\n\t\t\tfor(int j=0;j<=50;j++)fie[i][j].clear();\n\t\t}\n\t\twhile(1){\n\t\t\tstring str2;\n\t\t\tgetline(cin,str2);\n\t\t\tif(str2==\"?\")break;\n\t\t\tstr.push_back(str2);\n\t\t}\n\t\tint np=0,cnum=0,nx=0;\n\t\twhile(str.size()){\n\t\t\tstring s=str[0];\n\t\t\tstr.pop_front();\n\t\t\tif(s.size()>w){\n\t\t\t\tstring str3=s.substr(w);\n\t\t\t\ts=s.substr(0,w);\n\t\t\t\tstr.push_front(str3);\n\t\t\t}\n\t\t\twhile(s.size()<w)s+='.';\n\t\t\tfie[np][nx]+=s;\n\t\t\tif(cnum+1<cn){\n\t\t\t\tfor(int i=0;i<cs;i++){\n\t\t\t\t\tfie[np][nx]+='.';\n\t\t\t\t}\n\t\t\t}\n\t\t\tnx++;\n\t\t\tif(nx==pl){\n\t\t\t\tnx=0;\n\t\t\t\tcnum++;\n\t\t\t}\n\t\t\tif(cnum==cn){\n\t\t\t\tcnum=0;\n\t\t\t\tnp++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=np;i++){\n\t\t\tfor(int j=0;j<pl;j++){\n\t\t\t\twhile(fie[i][j].size()<cn*w+cs*(cn-1))fie[i][j]+='.';\n\t\t\t\tcout << fie[i][j] << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstring>\n#include <iostream>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nstring buf[101];\n\nint main() {\n  string input;\n  vector<string> vs;\n  int plen,cnum,width,cspace;\n  while(cin>>plen, plen) {\n    cin>>cnum>>width>>cspace;\n    cin.ignore();\n    vs.clear();\n    while(true) {\n      getline(cin, input);\n      if(input == \"?\") break;\n      vs.push_back(input);\n    }\n\n    vector<string> normalized;\n    for(int i=0; i<vs.size(); ++i) {\n      while(vs[i].length() > width) {\n        normalized.push_back(vs[i].substr(0,width));\n        vs[i] = vs[i].substr(width);\n      }\n      normalized.push_back(vs[i]);\n    }\n\n    for(int i=0; i<normalized.size(); ++i) {\n      if(normalized[i].length() < width)\n        normalized[i] += string(width-normalized[i].length(), '.');\n    }\n\n    if(normalized.size()%(plen*cnum) > 0) {\n      for(int i=0; i<normalized.size()%(plen*cnum); ++i) {\n        normalized.push_back(string(width, '.'));\n      }\n    }\n\n    vector<vector<string> > pages;\n    for(int i=0; i<normalized.size(); i += plen * cnum) {\n      vector<string> op;\n      for(int j=0; j<plen*cnum; ++j)\n        op.push_back(normalized[i+j]);\n      pages.push_back(op);\n    }\n\n    for(int i=0; i<pages.size(); ++i) {\n      for(int j=0; j<100; ++j) buf[j] = \"\";\n      for(int j=0; j<pages[i].size(); ++j) {\n        buf[j%plen] += (j>=plen?\".\":\"\") + pages[i][j];\n      }\n      for(int i=0; i<plen; ++i) cout<<buf[i]<<endl;\n      cout<<\"#\"<<endl;\n    }\n    cout<<\"?\"<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        string res[2048];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if( j && j%plen==0 ){\n                cout<<\"#\"<<endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n            if( j%plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<space;\n            if( j%plen + plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<'\\n';\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <deque>\n#include <iomanip>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <stack>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\n\n#pragma comment(linker, \"/STACK:400000000\")\n\n#define EPS 1e-9\n#define INF MOD\n#define MOD 1000000007LL\n#define fir first\n#define foreach(it,X) for(it=X.begin();it!=X.end();it++)\n#define iss istringstream\n#define ite iterator\n#define ll long long\n#define mp make_pair\n#define rep(i,n) rep2(i,0,n)\n#define rep2(i,m,n) for(int i=m;i<n;i++)\n#define pi pair<int,int>\n#define pb push_back\n#define sec second\n#define sh(i) (1LL<<i)\n#define sst stringstream\n#define sz size()\n#define vi vector<int>\n#define vc vector\n#define vl vector<ll>\n#define vs vector<string>\n\nint p,c,w,s;\nstring l;\n\nint main(){\n\twhile(cin>>p && p){\n        cin>>c>>w>>s;\n        vs col;\n        getline(cin,l);\n        while(getline(cin,l) && l!=\"?\"){\n            if(l==\"\"){\n                col.pb(string(w,'.'));\n            }else{\n                while(l.sz%w!=0)l+='.';\n                rep(i,l.sz/w){\n                    string t;\n                    rep(j,w)t+=l[i*w+j];\n                    col.pb(t);\n                }\n            }\n        }\n        while(col.sz%(p*c)!=0){\n            col.pb(string(w,'.'));\n        }\n        rep(i,col.sz/(p*c)){\n            vs ans(p,\"\");\n            rep(j,c){\n                rep(h,p){\n                    ans[h]+=col[i*p*c+j*p+h];\n                    if(j<c-1)ans[h]+=string(s,'.');\n                }\n            }\n            rep(j,p)cout<<ans[j]<<endl;\n            cout<<\"#\\n\";\n        }\n        cout<<\"?\\n\";\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    while (true) {\n        int plen;\n        cin >> plen;\n        if (plen == 0) {\n            break;\n        }\n        int cnum;\n        cin >> cnum;\n        int width;\n        cin >> width;\n        int cspace;\n        cin >> cspace;\n        vector<string> v;\n        {\n            string s;\n            // ignore newline character after cspace\n            getline(cin, s);\n            while (true) {\n                getline(cin, s);\n                if (s == \"?\") {\n                    break;\n                }\n                v.push_back(s);\n            };\n        }\n        vector<string> columnLines;\n        for (auto&& i : v) {\n            if (i == \"\\n\") {\n                columnLines.emplace_back(width, '.');\n            }\n            else if (i.size() < width) {\n                columnLines.push_back(i + string(width - i.size(), '.'));\n            }\n            else if (i.size() == width) {\n                columnLines.push_back(i);\n            }\n            else {\n                columnLines.push_back(i.substr(0, static_cast<size_t>(width)));\n                auto rest = i.substr(static_cast<size_t>(width));\n                columnLines.push_back(rest + string(width - rest.size(), '.'));\n            }\n        }\n        auto emptyLines = columnLines.size() % (plen * cnum);\n        if (emptyLines != 0) {\n            auto s = string(static_cast<size_t>(width), '.');\n            fill_n(back_inserter(columnLines), plen * cnum - emptyLines, s);\n        }\n\n        vector<vector<string>> pages;\n        for (int i = 0; i < columnLines.size() / (plen * cnum); ++i) {\n            vector<string> p;\n            copy_n(begin(columnLines) + i * plen * cnum, plen * cnum,\n                   back_inserter(p));\n            pages.push_back(move(p));\n        }\n\n        for (size_t n = 0; n < pages.size(); ++n) {\n            auto&& page = pages[n];\n            for (int i = 0; i < plen; ++i) {\n                stringstream ss;\n                for (int j = 0; j < cnum; ++j) {\n                    if (j != 0) {\n                        ss << string(static_cast<size_t>(cspace), '.');\n                    }\n                    ss << page[i + j * plen];\n                }\n                cout << ss.str() << endl;\n            }\n            cout << '#' << endl;\n        }\n\n        cout << \"?\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <sstream>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <climits>\n#include <cassert>\nusing namespace std;\ninline int toInt (string s) {int v; istringstream sin(s); sin>>v; return v;}\ntemplate<class T> inline string toString(T x){ostringstream sout;sout<<x;return sout.str();}\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(),(a).rend()\n#define EACH(t,i,c) for(t::iterator i=(c).begin();i!=(c).end();++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n) FOR(i,0,n)\nconst double EPS=1e-10;\nconst double PI=acos(-1.0);\n\nstring filldot(string s, int w) {\n\tstring str = s;\n\n\tREP(i, w-s.size()) {\n\t\tstr.push_back('.');\n\t}\n\n\treturn str;\n}\n\nint main(){\n\tint plen, cnum, width, cspace;\n\n\tbool hoge = false;\n\n\twhile(cin >> plen, plen) {\n\t\tcin >> cnum >> width >> cspace;\n\n\t\tstring str;\n\t\tvs elements;\n\n\t\t\tgetline(cin,str);\n\t\twhile(1) {\n\t\t\tgetline(cin,str);\n\t\t\tif(str == \"?\")break;\n\t\t\t\n\t\t\tif(str != \"\") hoge = true;\n\t\t\t\n\t\t\t\n\t\t\tif(str.size() < width) {\n\t\t\t\tstr = filldot(str, width);\n\t\t\t\telements.push_back(str);\n\t\t\t} else if(str.size() == width) {\n\t\t\t\telements.push_back(str);\n\t\t\t} else {\n\t\t\t\tstring ss;\n\t\t\t\tfor(int i=1;i<str.size()+1;i++){\n\t\t\t\t\tss += str[i-1];\n\t\t\t\t\tif(i%8==0){\n\t\t\t\t\t\telements.push_back(ss);\n\t\t\t\t\t\tss=\"\";\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(ss != \"\") {\n\t\t\t\t\tss = filldot(ss, width);\n\t\t\t\t\telements.push_back(ss);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(elements.size() % (plen*cnum)) {\n\t\t\tstring dots = \".\";\n\t\t\tdots = filldot(dots, width);\n\n\t\t\tint size = elements.size() % (plen*cnum);\n\n\t\t\tREP(i, plen*cnum-size) {\n\t\t\t\telements.push_back(dots);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint N = elements.size()/(plen*cnum);\n\n\n\t\tif(hoge) {\n\t\tREP(k, N) {\n\t\t\tREP(i, plen) {\n\t\t\t\tREP(j, cnum) {\n\t\t\t\t\tcout << elements[k*cnum*plen + j*plen + i];\n\n\t\t\t\t\tif(j < cnum-1) {\n\t\t\t\t\t\tREP(h, cspace) {\n\t\t\t\t\t\t\tcout << \".\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\t}\n\n\t\tcout << \"?\" << endl;\n\t\t\t\t\t\n\t\t\t\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        string res[2048];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if( j && j%plen==0 ){\n                cout<<\"#\"<<endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n            for( l = 0; l < cnum; l++){\n                if(l) cout << space;\n                if( j%plen + plen*l + j/plen*plen*cnum < k ){\n                    cout << res[ j%plen + plen*l + j/plen*plen*cnum ];\n                }else{\n                    cout << empty;\n                }\n            }\n            cout<<'\\n';\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<string>\n#include<vector>\n#include<iostream>\n\n#define\tpb\tpush_back\n\nusing namespace std;\n\nint main(){\n\tfor(int plen;cin>>plen,plen;){\n\t\tint cnum,w,cspace;\n\t\tcin>>cnum>>w>>cspace;\n\t\tcin.ignore();\n\n\t\tvector<string> mul;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tint len=s.length();\n\t\t\tif(len==0)\tmul.pb(\"\");\n\t\t\tfor(int i=0;i<len;i+=w){\n\t\t\t\tif(w<len-i)\tmul.pb(s.substr(i,w));\n\t\t\t\telse\t\tmul.pb(s.substr(i));\n\t\t\t}\n\t\t}\n//for(int i=0;i<mul.size();i++)\tcout<<mul[i]<<endl;\n\t\tint m=mul.size();\n\t\tint pages=(m+(plen*cnum-1))/(plen*cnum);\t// ceiling\n\t\tfor(int i=0;i<pages;i++){\n\t\t\tint offset=i*plen*cnum;\n\t\t\tvector<string> pg(plen);\n\t\t\tif(i==pages-1){\t// last page\n\t\t\t\tfor(int j=offset;j<m;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t\tfor(int j=m;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=string(w,'.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j=0;j<plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tfor(int j=0;j<cnum;j++){\n\t\t\t\t\tif(j>0)\tcout<<string(cspace,'.');\n\t\t\t\t\tcout<<pg[i].substr(w*j,w*(j+1));\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\n\t\tcout<<'?'<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define REP(i,a,b) for(int i=a;i<(int)b;i++)\n#define rep(i,n) REP(i,0,n)\n \nint PLen, CNum, Width, CSpace;\nvector<string> lines;\n \nint currColumn;\npair<int, int> currPos;\nint N, M;\nvector<string> output;\nbool dirty;\n \nvoid printPage() {\n  rep(i, N) cout << output[i] << endl;\n  cout << \"#\" << endl;\n  fill(output.begin(), output.end(), string(M, '.'));\n  currColumn = 0;\n  currPos = {0, 0};\n  dirty = 0;\n}\n \nvoid print(char c) {\n  if(currPos.second >= (currColumn * Width + CSpace * currColumn) + Width) {\n    currPos.first ++;\n    if(currPos.first >= PLen) {\n      currPos.first = 0;\n      currColumn ++;\n    }\n    currPos.second = currColumn * Width + CSpace * currColumn;\n  }\n     \n  if(currColumn >= CNum) {\n    printPage();\n  }\n   \n  dirty = 1;\n  output[currPos.first][currPos.second++] = c;\n}\n \nvoid nextLine() {\n  currPos.first ++;\n  if(currPos.first >= PLen) {\n    currColumn ++;\n    currPos.first = 0;\n    if(currColumn >= CNum && dirty) printPage();\n  }\n  currPos.second = currColumn * Width + CSpace * currColumn;\n}\n \nvoid solve() {\n   \n  output.clear();\n  output.resize(PLen);\n  dirty = 0;\n   \n  N = PLen, M = Width * CNum + CSpace * (CNum - 1);\n   \n  rep(i, N) output[i] = string(M, '.');\n \n  currColumn = 0;\n  currPos = {0, 0};\n   \n  rep(i, lines.size()) {    \n    int LLen = lines[i].size();\n    dirty = 1;\n    rep(j, LLen) {\n      print(lines[i][j]);\n    }\n    nextLine();\n  }\n   \n  if(dirty) printPage();\n  cout << \"?\" << endl;\n}\n \nint main() {\n \n  while(1) {\n     \n    lines.clear();    \n    cin >> PLen >> CNum >> Width >> CSpace; cin.ignore();\n \n    if(PLen == 0) break;\n     \n    for(int i=0;; i++) {\n      string in;\n      getline(cin, in);\n      if(in == \"?\") break;\n      else {\n    lines.push_back(in);\n      }\n    }\n     \n    solve();\n     \n  }\n   \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    for(;cin>>plen, plen;){\n        cin >> cnum >> width >> cspace;\n        cin.ignore();\n        int W = cnum * width + (cnum-1) * cspace;\n        bool eot = false;\n        string tmp;\n        for(; !eot;){\n            vector< string > line(plen, string(W, '.'));\n            int x, y;\n            for(x = 0; x < W && !eot; x += cspace + width){\n                for(y = 0; y < plen; y++){\n                    if(!tmp.size()){\n                        getline(cin, tmp);\n                    }\n                    if( tmp == \"?\" ){\n                        eot = true;\n                        break;\n                    }\n                    while( y < plen && tmp.size() > width ){\n                        line[ y++ ].replace(x, width,\n                                            tmp.substr(0, width));\n                        tmp = tmp.substr(width);\n                    }\n                    if( y == plen ) continue;\n                    line[ y ].replace(x, tmp.size(), tmp);\n                    tmp = \"\";\n                }\n            }\n            for(x = 0; x < plen; x++){\n                cout << line[x] << endl;\n            }\n            cout << \"#\" << endl;\n        }\n        cout << \"?\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\n\nint main() {\n\twhile (1) {\n\t\tint H, C, W, space;\n\t\tcin >> H; if (!H)break;\n\t\tcin >>  C >> W >> space;\n\t\tvector<vector<vector<string>>>anss;\n\t\tconst vector<vector<string>>plane(H, vector<string>(C));\n\t\tvector<vector<string>>page(plane);\n\t\tint ny = 0, nx = 0;\n\t\tstring dummy;\n\t\tgetline(cin, dummy);\n\t\twhile (1) {\n\t\t\tstring st; \n\t\t\tgetline(cin, st);\n\t\t\tif (st == \"?\")break;\n\t\t\telse {\n\t\t\t\tif (st.empty())st = \".\";\n\t\t\t\tfor (int i = 0; i < (int(st.size())-1) / W+1; ++i) {\n\t\t\t\t\t\n\t\t\t\t\tpage[ny][nx] = st.substr(i*W, W);\n\t\t\t\t\tny++;\n\t\t\t\t\tif (ny == H) {\n\t\t\t\t\t\tny = 0;\n\t\t\t\t\t\tnx++;\n\t\t\t\t\t\tif (nx == C) {\n\t\t\t\t\t\t\tanss.emplace_back(page);\n\t\t\t\t\t\t\tpage = plane;\n\t\t\t\t\t\t\tnx = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (nx!=0||ny!=0) {\n\n\t\t\tanss.emplace_back(page);\n\t\t}\n\t\tfor (int i = 0; i < anss.size(); ++ i) {\n\t\t\tauto page(anss[i]);\n\t\t\tfor (int y = 0; y < H; ++y) {\n\t\t\t\tfor (int x = 0; x < C; ++x) {\n\t\t\t\t\tstring st = page[y][x];\n\t\t\t\t\tcout << st;\n\t\t\t\t\tfor (int n = st.size(); n < W; ++n) {\n\t\t\t\t\t\tcout << '.';\n\t\t\t\t\t}\n\t\t\t\t\tif (x != C - 1) {\n\t\t\t\t\t\tfor (int n = 0; n < space; ++n) {\n\t\t\t\t\t\t\tcout << '.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << '#' << endl;\n\t\t}\n\t\tcout << '?' << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\n#include<string.h>\nusing namespace std;\nchar str[1010];\nchar out[110][60];\nint main(){\n\tint a,b,c,d;\n\twhile(scanf(\"%d\",&a),a){\n\t\tscanf(\"%d%d%d\",&b,&c,&d);\n\t\tgets(str);\n\t\tint now=0;\n\t\tfor(int i=0;i<a;i++){\n\t\t\tfor(int j=0;j<c*b+d*(b-1);j++)out[i][j]='.';\n\t\t\tout[i][c*b+d*(b-1)]=0;\n\t\t}\n\t\twhile(1){\n\t\t\tgets(str);\n\t\t\tif(str[0]=='?')break;\n\t\t\tint len=strlen(str);\n\t\t\t//printf(\"%s\\n\",str);\n\t\t\tint at=0;\n\t\t\tfor(int i=0;i<len;i++){\n\t\t\t\tout[now%a][at+(now/a)*(c+d)]=str[i];\n\t\t\t\tat++;\n\t\t\t\tif(at==c){\n\t\t\t\t\tat=0;now++;\n\t\t\t\t\tif(now==a*b){\n\t\t\t\t\t\tnow=0;\n\t\t\t\t\t\tfor(int j=0;j<a;j++)printf(\"%s\\n\",out[j]);printf(\"#\\n\");\n\t\t\t\t\t\tfor(int j=0;j<a;j++)for(int k=0;k<c*b+d*(b-1);k++)out[j][k]='.';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len==0||at){\n\t\t\t\tnow++;\n\t\t\t\tif(now==a*b){\n\t\t\t\t\tnow=0;\n\t\t\t\t\tfor(int i=0;i<a;i++)printf(\"%s\\n\",out[i]);printf(\"#\\n\");\n\t\t\t\t\tfor(int j=0;j<a;j++)for(int k=0;k<c*b+d*(b-1);k++)out[j][k]='.';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(now){\t\n\t\t\tfor(int i=0;i<a;i++)printf(\"%s\\n\",out[i]);\n\t\t\tprintf(\"#\\n\");\n\t\t}printf(\"?\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        string res[2048];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if(j%plen==0){\n                cout<<\"#\"<<endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n            if( j%plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<space;\n            if( j%plen + plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<'\\n';\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define MAX 100\n\nchar data[MAX][MAX/2][MAX];\nint plen, cnum, width, cspace, page;\nint x, y;\nstring ss;\n\nvoid init(){\n  page = 0;\n  for(int i = 0 ; i < MAX ; i++){\n    for(int j = 0 ; j < MAX/2 ; j++){\n      for(int k = 0 ; k < MAX ; k++){\n        data[i][j][k] = '.';\n      }\n    }\n  }\n}\n\nbool check(){\n  bool ok = true;\n  if(ss.empty()) return ok;\n\n  for(int i = 0 ; i < plen ; i++){\n    for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n      if(data[i][j][page] != '.') return ok;\n    }\n  }\n  return !ok;\n}\n\nvoid change(){\n  y++;\n  if(x == cnum){\n    x = y = 0;\n    page++;\n  }else if(y == plen){\n    y = 0;\n    x++;\n    if(x == cnum){\n      x = y = 0;\n      page++;\n    }\n  }\n}\n\nvoid insert(string &str){\n  int size = str.size(), start;\n  int end, p = 0;\n  bool flg = true;\n\n  while(flg){\n    start = x*(width+cspace);\n    if(size - p <= width){\n      end = start + size - p;\n      flg = false;\n    }else{\n      flg = true;\n      end = start + width;\n    }\n    for(int i = start ; i < end ; i++, p++){\n      if(p == size){ \n        flg = false;\n        break;\n      }\n      data[y][i][page] = str[p];\n    }\n    change(); \n  }\n}\n\nvoid print(){\n  if(!check()) page--;\n  for(int k = 0 ; k <= page ; k++){\n    for(int i = 0 ; i < plen ; i++){\n      for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n        cout << data[i][j][k];\n      }\n      cout << endl;\n    }\n    cout << '#' << endl;\n  }\n  cout << '?' << endl;\n}\n\nint main(){\n  string str;\n  while(cin >> plen && plen){\n    init();\n    cin >> cnum >> width >> cspace;\n\n    cin.ignore();\n    x = y = 0;\n    while(getline(cin,str), str != \"?\"){\n      ss = str;\n      if(str.empty()){\n        change();\n      }else{\n        insert(str);\n      }\n    }\n    print();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define MAX 100\n \nchar data[MAX][MAX/2][MAX];\nint plen, cnum, width, cspace, page;\nint x, y;\nstring ss;\n \nvoid init(){\n    page = 0;\n    for(int i = 0 ; i < MAX ; i++){\n\tfor(int j = 0 ; j < MAX/2 ; j++){\n\t    for(int k = 0 ; k < MAX ; k++){\n\t\tdata[i][j][k] = '.';\n\t    }\n\t}\n    }\n}\n \nbool check(){\n    bool ok = true;\n    if(ss.empty()) return ok;\n \n    for(int i = 0 ; i < plen ; i++){\n\tfor(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n\t    if(data[i][j][page] != '.') return ok;\n\t}\n    }\n    return !ok;\n}\n \nvoid change(){\n    y++;\n    if(y == plen){\n\ty = 0;\n\tx++;\n\tif(x == cnum){\n\t    x = y = 0;\n\t    page++;\n\t}\n    }\n}\n \nvoid insert(string &str){\n    int size = str.size(), start;\n    int end, p = 0;\n    bool flg = true;\n \n    while(flg){\n\tstart = x*(width+cspace);\n\tif(size - p <= width){\n\t    end = start + size - p;\n\t    flg = false;\n\t}else{\n\t    flg = true;\n\t    end = start + width;\n\t}\n\tfor(int i = start ; i < end ; i++, p++){\n\t    if(p == size){ \n\t\tflg = false;\n\t\tbreak;\n\t    }\n\t    data[y][i][page] = str[p];\n\t}\n\tchange(); \n    }\n}\n \nvoid print(){\n    if(!check()) page--;\n    for(int k = 0 ; k <= page ; k++){\n\tfor(int i = 0 ; i < plen ; i++){\n\t    for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n\t\tcout << data[i][j][k];\n\t    }\n\t    cout << endl;\n\t}\n\tcout << '#' << endl;\n    }\n    cout << '?' << endl;\n}\n \nint main(){\n    string str;\n    while(cin >> plen && plen){\n\tinit();\n\tcin >> cnum >> width >> cspace;\n \n\tcin.ignore();\n\tx = y = 0;\n\twhile(getline(cin,str), str != \"?\"){\n\t    ss = str;\n\t    if(str.empty()){\n\t\tchange();\n\t    }else{\n\t\tinsert(str);\n\t    }\n\t}\n\tprint();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <deque>\n\nusing namespace std;\n\nint L, C, W, S;\ndeque<string> lines;\n\nvoid Print() {\n  if (lines.size() < L*C) lines.resize(L*C);\n  for (int i = 0; i < L; ++i) {\n    string buf(W*C + S*(C-1), '.');\n    for (int j = 0; j < C; ++j) {\n      memcpy(&buf[(W+S)*j], lines[L*j+i].data(), lines[L*j+i].size());\n    }\n    cout << buf << endl;\n  }\n  cout << \"#\" << endl;\n  lines.erase(lines.begin(), lines.begin() + L*C);\n}\n\nint main() {\n  while (cin >> L >> C >> W >> S && L) {\n    lines.clear();\n    string line;\n    getline(cin, line);\n    while (getline(cin, line) && line != \"?\") {\n      if (line.size() < W) {\n\tlines.push_back(line);\n      } else {\n\tfor (int x = 0; x < line.size(); x += W) {\n\t  lines.push_back(line.substr(x, W));\n\t}\n      }\n      while (lines.size() > L * C) Print();\n    }\n    Print();\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#include <cassert>\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\nint dx[]={0,1,0,-1},dy[]={1,0,-1,0};\n\nmain(){\n  string str;\n  while(getline(cin,str)){\n    if(str==\"0\")break;\n\n    int plen,cnum,width,cspace;\n    {\n      stringstream ss(str);\n      ss>>plen;\n    }\n\n    {\n      getline(cin,str);\n      stringstream ss(str);\n      ss>>cnum;\n    }\n\n    {\n      getline(cin,str);\n      stringstream ss(str);\n      ss>>width;\n    }\n\n    {\n      getline(cin,str);\n      stringstream ss(str);\n      ss>>cspace;\n    }\n\n    vector<string> out;\n\n    while(getline(cin,str)){\n      if(str==\"?\")break;\n\n      int pos=0;\n      string pu;\n      while(pos<str.size()){\n\tif(pu.size()==width){\n\t  out.pb(pu);\n\t  pu=\"\";\n\t}\n\tpu+=str[pos];\n\t++pos;\n      }\n      out.pb(pu);\n    }\n    \n    while(out.size()%(cnum*plen))out.pb(\"\");\n\n    rep(i,out.size()){\n      while(out[i].size()<width)out[i]+='.';\n    }\n\n    rep(i,out.size()/cnum/plen){\n      rep(j,plen){\n\trep(k,cnum){\n\t  if(k)rep(l,cspace)cout<<\".\";\n\t  cout<<out[i*cnum*plen+k*plen+j];\n\t}\n\tcout<<endl;\n      }\n      cout<<\"#\"<<endl;\n    }\n    cout<<\"?\"<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n    while(1){\n        int h,w,cnum,sp;\n        cin >> h;\n        if(h == 0) break;\n        cin >> cnum >> w >> sp;\n        vector<string> str;\n        string s;\n        getline(cin, s);\n        while(getline(cin, s), s!=\"?\"){\n            str.push_back(s);\n        }\n        \n        vector<string> fstr;\n        for(auto s: str){\n            int len = s.length();\n            if(len == 0) len++;\n            s += string(w, '.');\n            for(int i=0; i<len; i+=w){\n                fstr.push_back(s.substr(i, w));\n            }\n        }\n\n        int page = (fstr.size() +h*cnum -1) /(h*cnum);\n        for(int i=0; i<h*cnum; i++){\n            fstr.emplace_back(w, '.');\n        }\n\n        for(int i=0; i<page; i++){\n            for(int j=0; j<h; j++){\n                string s = \"\";\n                for(int k=0; k<cnum; k++){\n                    if(k != 0){\n                        s += string(sp, '.');\n                    }\n                    s += fstr[i*h*cnum +k*h +j];\n                }\n                cout << s << endl;\n            }\n            cout << \"#\" << endl;\n        }\n        cout << \"?\" << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<string>\n#include<vector>\n#include<iostream>\n\n#define\tpb\tpush_back\n\nusing namespace std;\n\nint main(){\n\tfor(int plen;cin>>plen,plen;){\n\t\tint cnum,w,cspace;\n\t\tcin>>cnum>>w>>cspace;\n\t\tcin.ignore();\n\n\t\tvector<string> mul;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tint len=s.length();\n\t\t\tif(len==0)\tmul.pb(\"\");\n\t\t\tfor(int i=0;i<len;i+=w){\n\t\t\t\tif(w<len-i)\tmul.pb(s.substr(i,w));\n\t\t\t\telse\t\tmul.pb(s.substr(i));\n\t\t\t}\n\t\t}\n\t\tif(mul.size()==0)\tmul.pb(\"\");\n//for(int i=0;i<mul.size();i++)\tcout<<mul[i]<<endl;\n\t\tint m=mul.size();\n\t\tint pages=(m+(plen*cnum-1))/(plen*cnum);\t// ceiling\n\t\tfor(int i=0;i<pages;i++){\n\t\t\tint offset=i*plen*cnum;\n\t\t\tvector<string> pg(plen);\n\t\t\tif(i==pages-1){\t// last page\n\t\t\t\tfor(int j=offset;j<m;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t\tfor(int j=m;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=string(w,'.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j=0;j<plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tfor(int j=0;j<cnum;j++){\n\t\t\t\t\tif(j>0)\tcout<<string(cspace,'.');\n\t\t\t\t\tcout<<pg[i].substr(w*j,w*(j+1));\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\n\t\tcout<<'?'<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint pl,cn,wi,cs,r,c,p;\nchar f[102][52];\n\nvoid init()\n{\n\tr=0; c=0; p=0;\n\tmemset(f,'.',sizeof(f));\n}\n\nvoid output()\n{\n\tfor(int i=0; i<pl; i++)\n\t{\n\t\tfor(int j=0; j<(cn*wi+cs*(cn-1)); j++)\n\t\t\tcout << f[j][i];\n\t\tcout << endl;\n\t}\n\t\n\tcout << \"#\" << endl;\n}\n\nint main()\n{\n\twhile(cin >> pl, pl)\n\t{\n\t \tcin >> cn >> wi >> cs;\n\t\t\n\t\tinit();\n\t\tstring s;\n\t\tcin.ignore();\n\t\twhile(getline(cin, s), s!=\"?\")\n\t\t{\n\t\t\tp=0;\n\t\t\tfor(int i=0; i<s.size(); i++)\n\t\t\t{\n\t\t\t\tif(p==wi)\n\t\t\t\t{\n\t\t\t\t\tr++;\n\t\t\t\t\tp=0;\n\t\t\t\t}\n\t\t\t\tif(r==pl)\n\t\t\t\t{\n\t\t\t\t\tr=0;\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tif(c==cn)\n\t\t\t\t{\n\t\t\t\t\toutput();\n\t\t\t\t\tinit();\n\t\t\t\t}\n\t\t\t\tf[p+c*wi+cs*c][r]=s[i];\n\t\t\t\t\n\t\t\t\tp++;\n\t\t\t}\n\t\t\t\n\t\t\tr++;\n\t\t}\n\t\t\n\t\tif(p!=0&&(c!=0||r!=0)) output();\n\t\t\n\t\tcout << \"?\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main(int argc, char*argv[])\n{\n  for(;;) {\n    int P, C, W, S;\n    cin >> P;\n    if(P==0) break;\n    cin >> C >> W >> S;\n    vector<string> lines;\n    string line;\n    int n = 0;\n    getline(cin, line); // to skip the first one \n    for(;;) {\n      getline(cin, line);\n      if(line == \"?\") break;\n      lines.push_back(line);\n      n++;\n    }\n    auto printpage=[&](vector<vector<string>> &page) {\n      int LS = W*C+(C-1)*S;\n      char pp[P][LS+1];\n      for(int i = 0; i < P; i++) {\n        for(int j = 0; j < LS; j++) {\n          pp[i][j] = '.';\n        }\n        pp[i][LS] = 0;\n      }\n      for(int c = 0; c < page.size(); c++) {\n        for(int s = 0; s < page[c].size(); s++) {\n          for(int k = 0; k < page[c][s].size(); k++) {\n            pp[s][c*W+c*S + k] = page[c][s][k];\n          }\n        }\n      }\n      for(int i = 0; i < P; i++) {\n        cout << pp[i] << endl;\n      }\n      cout << \"#\" << endl;\n    };\n    vector<vector<string>> page;\n    vector<string> col;\n    for(int i = 0; i < n;) {\n      if(lines[i].length() > W) {\n        col.push_back(lines[i].substr(0, W));\n        lines[i] = lines[i].substr(W);\n      } else {\n        col.push_back(lines[i]);\n        i++;\n      }\n      if(col.size() == P) {\n        page.push_back(col);\n        col.clear();\n      }\n      if(page.size() == C) {\n        printpage(page);\n        page.clear();\n      }\n    }\n    if(col.size() > 0) {\n      page.push_back(col);\n    }\n    if(page.size() > 0) {\n      printpage(page);\n    }\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n\nint R, C, W, S;\nvector<string> V;\n\nint main() {\n  while(cin >> R && R) {\n    V.clear();\n    cin >> C;\n    cin >> W;\n    cin >> S;\n    cin.ignore();\n    string line;\n    while(getline(cin, line) && line != \"?\") {\n      if(line == \"\") line = \".\";\n      for(int i = 0; i < line.size(); i += W) {\n        V.push_back(line.substr(i, W));\n        V.back().resize(W, '.');\n      }\n    }\n\n    while(V.size() % (R*C) != 0) V.push_back(string(W, '.'));\n\n    for(int k = 0; k < V.size(); k += R*C) {\n      for(int i = 0; i < R; ++i) {\n        for(int j = 0; j < C; ++j) {\n          if(j) cout << string(S, '.');\n          cout << V[k + i + j * R];\n        }\n        cout << endl;\n      }\n      cout << \"#\" << endl;\n    }\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nbool fs;\nint pl,cn,wi,cs,r,c,p;\nchar f[102][52];\n\nvoid init()\n{\n\tfs=false;\n\tr=0; c=0; p=0;\n\tmemset(f,'.',sizeof(f));\n}\n\nvoid output()\n{\n\tfor(int i=0; i<pl; i++)\n\t{\n\t\tfor(int j=0; j<(cn*wi+cs*(cn-1)); j++)\n\t\t\tcout << f[j][i];\n\t\tcout << endl;\n\t}\n\t\n\tcout << \"#\" << endl;\n}\n\nint main()\n{\n\twhile(cin >> pl, pl)\n\t{\n\t \tcin >> cn >> wi >> cs;\n\t\t\n\t\tinit();\n\t\tstring s;\n\t\tcin.ignore();\n\t\twhile(getline(cin, s), s!=\"?\")\n\t\t{\n\t\t\tfs=true;\n\t\t\tp=0;\n\t\t\tfor(int i=0; i<s.size(); i++)\n\t\t\t{\n\t\t\t\tif(p==wi)\n\t\t\t\t{\n\t\t\t\t\tr++;\n\t\t\t\t\tp=0;\n\t\t\t\t}\n\t\t\t\tif(r==pl)\n\t\t\t\t{\n\t\t\t\t\tr=0;\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tif(c==cn)\n\t\t\t\t{\n\t\t\t\t\toutput();\n\t\t\t\t\tinit();\n\t\t\t\t}\n\t\t\t\tf[p+c*wi+cs*c][r]=s[i];\n\t\t\t\t\n\t\t\t\tp++;\n\t\t\t}\n\t\t\t\n\t\t\tr++;\n\t\t}\n\t\t\n\t\tif(fs) output();\n\t\t\n\t\tcout << \"?\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\n#include<cstdlib>\n#define DOT '.'\n\nusing namespace std;\n\nint h, w, cl, sp;\nvector<string> data;\n\nvoid insert(const string& s){\n  int i=0;\n  while(i+w<s.size()){\n    data.push_back(s.substr(i,w));\n    i+=w;\n  }\n  data.push_back(s.substr(i) + string(i+w-s.size(),DOT));\n}\n\nvoid print(){\n  const string SP1(w,DOT);\n  const string SP2(sp,DOT);\n\n  int tmp=data.size();\n  for(int i=0; i<h*cl-tmp%(h*cl); ++i) data.push_back(SP1);\n\n  for(int k=0; k<data.size()/(h*cl); ++k){\n    for(int i=0; i<h; ++i){\n      for(int j=0; j<cl; ++j){\n\tcout << data[i+h*j+h*cl*k] << (j==cl-1 ? \"\\n\" : SP2);\n      }\n    }\n    cout << \"#\" << endl;\n  }\n  cout << \"?\" << endl;\n}\n\nint main(){\n  string s;\n  bool end=false;\n  while(1){\n    data.clear();\n    for(int i=0; ; ++i){\n      getline(cin, s);\n      if(i<4){\n\tint x = atoi(s.c_str());\n\tif(i==0 && x==0){ end=true; break; }\n\tif(i==0) h=x;\n\tif(i==1) cl=x;\n\tif(i==2) w=x;\n\tif(i==3) sp=x;\n\tcontinue;\n      }\n      if(s==\"?\") break;\n      insert(s);\n    }\n    if(end) break;\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nint main() {\n    while (true) {\n        int plen, cnum, width, cspace;\n        cin >> plen >> cnum >> width >> cspace;\n        if (plen == 0) {\n            break;\n        }\n        cin.ignore();\n        queue<string> lines;\n        string line;\n        while (true) {\n            getline(cin, line);\n            if (line == \"?\") {\n                break;\n            } else {\n                lines.push(line);\n            }\n        }\n        while (lines.empty() == false) {\n            vector<string> outputLines(plen);\n            for (int x = 0; x < cnum; x++) {\n                for (int y = 0; y < plen; y++) {\n                    if (x > 0) {\n                        outputLines[y].insert(outputLines[y].end(), cspace, '.');\n                    }\n                    if (lines.empty() == false) {\n                        if ((int) lines.front().length() <= width) {\n                            outputLines[y].insert(outputLines[y].end(), lines.front().begin(), lines.front().end());\n                            outputLines[y].insert(outputLines[y].end(), width - lines.front().length(), '.');\n                            lines.pop();\n                        } else {\n                            outputLines[y].insert(outputLines[y].end(), lines.front().begin(), lines.front().begin() + 8);\n                            lines.front().erase(lines.front().begin(), lines.front().begin() + 8);\n                        }\n                    } else {\n                        outputLines[y].insert(outputLines[y].end(), width, '.');\n                    }\n                }\n            }\n            for (vector<string>::iterator it = outputLines.begin(); it != outputLines.end(); it++) {\n                cout << *it << endl;\n            }\n            cout << \"#\" << endl;\n        }\n        cout << \"?\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nchar mp[100][2001];\nint p,c,w,s;\nint I,J;\n\nvoid init(){\n  I=J=0;\n  memset(mp,'.',sizeof(mp));\n  for(int i=0;i<p;i++)mp[i][c*w+(c-1)*s]='\\0';\n}\n\nint Idx(int a){\n  if(!a)return 0;\n  return a*(s+w);\n}\n\nvoid write(string str){\n  for(int i=0;i<(int)str.size();i++) mp[I][Idx(J)+i]=str[i];\n  I++;\n\n  if(I==p&&J>=c-1){\n    for(int i=0;i<p;i++) printf(\"%s\\n\",mp[i]);\n    cout<<\"#\"<<endl;\n    init();\n  }\n  if(I==p)I=0,J++;\n\n}\n\n\n//p=tate, c=page , w=moji, s=space\nint main(){\n  \n  while(1){\n    cin>>p;\n    if(!p)return 0;\n    cin>>c>>w>>s;\n    \n    init();\n    string str;\n    getline(cin,str);\n\n    while(1){\n      getline(cin,str);\n      if(str==\"?\")break;\n      if(!str.size()){write(\"\");continue;}\n\n      string a=\"\";\n      for(int i=0;i<str.size();i++){\n\ta+=str[i];\n\tif((int)a.size()>=w)write(a),a=\"\";\n      }\n      if(a.size())write(a);\n    }\n    if(I!=0||J!=0)I=p-1,J=c-1,write(\"\");\n    cout<<\"?\"<<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        string res[2048];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        cout<<\"BEGIN debug\"<<endl;\n        for(j=0;j<k;j++){\n            cout<<res[j]<<endl;\n        }\n        cout<<\"END debug\"<<endl;\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if( j && j%plen==0 ){\n                cout<<\"#\"<<endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n            for( l = 0; l < cnum; l++){\n                if(l) cout << space;\n                if( j%plen + plen*l + j/plen*plen*cnum < k ){\n                    cout << res[ j%plen + plen*l + j/plen*plen*cnum ];\n                }else{\n                    cout << empty;\n                }\n            }\n            cout<<'\\n';\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <climits>\n#include <cctype>\n#include <ctime>\n#include <cassert>\n#include <cwchar>\n#include <cstdarg>\n#include <cwctype>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <vector>\n#include <set>\n#include <map>\n#include <iostream>\n#include <deque>\n#include <complex>\n#include <string>\n#include <functional>\n#include <iomanip>\n#include <sstream>\n\n#include <tr1/unordered_map>\n#include <boost/foreach.hpp>\n#include <boost/lexical_cast.hpp>\n#define foreach BOOST_FOREACH\n\nusing namespace std;\nusing namespace tr1;\nusing namespace boost;\n\n\ntypedef long long int lli;\nint plen,cnum,width,cspace;\nstring String(int Number,string Character){\n\tstring ret=\"\";\n\tfor(int i=0;i<Number;i++)ret+=Character;\n\treturn ret;\n}\n\nint main() {\n\tfor(;;){\n\t\tstring t;\n\t\tgetline(cin,t);\n\t\tplen=boost::lexical_cast<int>(t);\n\t\tif(!plen)break;\n\t\tgetline(cin,t);\n\t\tcnum=boost::lexical_cast<int>(t);\n\t\tgetline(cin,t);\n\t\twidth=boost::lexical_cast<int>(t);\n\t\tgetline(cin,t);\n\t\tcspace=boost::lexical_cast<int>(t);\n\t\tdeque<string> in;\n\t\twhile(1){\n\t\t\tgetline(cin,t);\n\t\t\tif(t==\"?\")break;\n\t\t\tin.push_back(t);\n\t\t}\n\t\tdeque<string> str;\n\t\tforeach(string t,in){\n\t\t\tfor(int i=0;i<(int)t.size();i+=width){\n\t\t\t\tstr.push_back(t.substr(i,min(width,(int)t.size()-i)));\n\t\t\t}\n\t\t\tif(t==\"\")str.push_back(\"\");\n\t\t}\n\t\tfor(;;){\n\t\t\tif((str.size()%(plen*cnum))==0)break;\n\t\t\tstr.push_back(\"\");\n\t\t}\n\t\tfor(int i=0;i<(int)str.size();i++){\n\t\t\tstr[i]+=String(width-str[i].size(),\".\");\n\t\t}\n\t\tvector<string> p(plen);\n\n\t\twhile(!str.empty()){\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tp[i]=\"\";\n\t\t\t}\n\t\t\tfor(int i=0;i<cnum;i++){\n\t\t\t\tfor(int j=0;j<plen;j++){\n\t\t\t\t\tif(i)p[j]+=String(cspace,\".\");\n\t\t\t\t\tp[j]+=str.front();\n\t\t\t\t\tstr.pop_front();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tcout<<p[i]<<endl;\n\t\t\t}\n\t\t\tcout<<\"#\"<<endl;\n\t\t}\n\t\tcout<<\"?\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <sstream>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <climits>\n#include <cassert>\nusing namespace std;\ninline int toInt (string s) {int v; istringstream sin(s); sin>>v; return v;}\ntemplate<class T> inline string toString(T x){ostringstream sout;sout<<x;return sout.str();}\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(),(a).rend()\n#define EACH(t,i,c) for(t::iterator i=(c).begin();i!=(c).end();++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n) FOR(i,0,n)\nconst double EPS=1e-10;\nconst double PI=acos(-1.0);\n\nstring filldot(string &s, int w) {\n\tstring str = s;\n\n\tREP(i, w-s.size()) {\n\t\tstr.push_back('.');\n\t}\n\n\treturn str;\n}\n\nint main(){\n\tint plen, cnum, width, cspace;\n\n\tbool hoge = false;\n\n\twhile(cin >> plen, plen) {\n\t\tcin >> cnum >> width >> cspace;\n\n\t\tstring str;\n\t\tvs elements;\n\n\t\t\tgetline(cin,str);\n\t\twhile(1) {\n\t\t\tgetline(cin,str);\n\t\t\tif(str == \"?\")break;\n\t\t\t\n\t\t\tif(str != \"\") hoge = true;\n\t\t\t\n\t\t\t\n\t\t\tif(str.size() < width) {\n\t\t\t\tstr = filldot(str, width);\n\t\t\t\telements.push_back(str);\n\t\t\t} else if(str.size() == width) {\n\t\t\t\telements.push_back(str);\n\t\t\t} else {\n\t\t\t\tstring ss;\n\t\t\t\tfor(int i=1;i<str.size()+1;i++){\n\t\t\t\t\tss += str[i-1];\n\t\t\t\t\tif(i%width==0){\n\t\t\t\t\t\telements.push_back(ss);\n\t\t\t\t\t\tss=\"\";\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(ss != \"\") {\n\t\t\t\t\tss = filldot(ss, width);\n\t\t\t\t\telements.push_back(ss);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(elements.size() % (plen*cnum)) {\n\t\t\tstring dots = \".\";\n\t\t\tdots = filldot(dots, width);\n\n\t\t\tint size = elements.size() % (plen*cnum);\n\n\t\t\tREP(i, plen*cnum-size) {\n\t\t\t\telements.push_back(dots);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint N = elements.size()/(plen*cnum);\n\n\n\t\tif(hoge) {\n\t\tREP(k, N) {\n\t\t\tREP(i, plen) {\n\t\t\t\tREP(j, cnum) {\n\t\t\t\t\tcout << elements[k*cnum*plen + j*plen + i];\n\n\t\t\t\t\tif(j < cnum-1) {\n\t\t\t\t\t\tREP(h, cspace) {\n\t\t\t\t\t\t\tcout << \".\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\t}\n\n\t\tcout << \"?\" << endl;\n\t\t\t\t\t\n\t\t\t\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "# 2 \"1115.cpp\"\n#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <vector>\n#include <set>\n#include <map>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <complex>\n#include <functional>\n#include <iterator>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n\n\nnamespace solution {\n    using namespace std;\n\n    typedef istringstream ISS;\n    typedef ostringstream OSS;\n    typedef vector<string> VS;\n    typedef long long LL;\n    typedef int INT;\n    typedef vector<INT> VI;\n    typedef vector<VI> VVI;\n    typedef pair<INT, INT> II;\n\n    const int SIZE = 101;\n    const int WORD_MAX = 1001;\n    int n;\n    int m;\n    int w;\n    int p;\n    string S[WORD_MAX];\n    int si;\n    string T[SIZE][SIZE];\n    int pi;\n    int ti;\n\n    class Solution {\n    private:\n        void init() {\n        }\n\n        int get_number() {\n            string line;\n            getline( cin, line );\n            ISS iss( line );\n            int res;\n            iss >> res;\n            return res;\n        }\n\n        bool input() {\n            n = get_number();\n            if ( n == 0 ) return false;\n            m = get_number();\n            w = get_number();\n            p = get_number();\n\n            string line;\n            si = 0;\n            while ( getline( cin, line ) ) {\n                if ( line == \"?\" ) break;\n                S[si ++] = line;\n            }\n            return true;\n        }\n\n        void add_item( string s ) {\n            int len = s.size();\n            if ( len > w ) {\n                for ( int i = 0; i < len; ) {\n                    string t = s.substr( i, w );\n                    add_item(t);\n                    i += w;\n                }\n            } else {\n                int r = ti % n;\n                int c = ti / n;\n\n                for ( int i = 0; i < len; ++ i ) {\n                    T[pi][r][i+w*c+p*c] = s[i];\n                }\n\n                ti ++;\n                if ( ti >= n * m ) {\n                    ti = 0;\n                    pi ++;\n                }\n            }\n        }\n\n        void solve() {\n            pi = 0;\n            ti = 0;\n            for ( int i = 0; i < SIZE; ++ i ) {\n                for ( int j = 0; j < n; ++ j ) {\n                    T[i][j] = string( m * w + p * ( m - 1 ), '.' );\n                }\n            }\n\n            for ( int i = 0; i < si; ++ i ) {\n                string word = S[i];\n                add_item(word);\n            }\n        }\n\n        void output() {\n            for ( int i = 0; i <= pi; ++ i ) {\n                if ( i == pi && ti == 0 ) {\n                    continue;\n                }\n                for ( int j = 0; j < n; ++ j ) {\n                    cout << T[i][j] << endl;\n                }\n                cout << \"#\" << endl;\n            }\n            cout << \"?\" << endl;\n        }\n\n    public:\n        int run() {\n            while ( init(), input() ) {\n                solve();\n                output();\n            }\n            return 0;\n        }\n    };\n}\n\nint main() {\n    using namespace solution;\n    Solution s;\n    return s.run();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <sstream>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n#define rp(i,c) rep(i,(c).size())\n#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n#define mp make_pair\n#define pb push_back\n#define all(c) (c).begin(),(c).end()\n#define dbg(x) cerr<<#x<<\" = \"<<(x)<<endl\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pi;\nconst int inf=1<<28;\nconst double INF=1e10,EPS=1e-9;\n\nint pl,cn,w,sp;\nint W,page,line,col;\nvector<vector<string> > ans;\n\nvoid out(string s)\n{\n\tif(col==0&&line==0)\n\tans.pb(vector<string>(pl,string(W,'.')));\n\t\t\t\n\tint x=(w+sp)*col,l=s.size();\n\trep(i,min(l,w))ans[page][line][x+i]=s[i];\n\tif(++line==pl)\n\t{\n\t\tline=0;\n\t\tif(++col==cn)col=0,page++;\n\t}\n\tif(l>w)out(s.substr(w));\n}\nint main()\n{\n\twhile(cin>>pl,pl)\n\t{\n\t\tcin>>cn>>w>>sp; cin.ignore();\n\t\t\n\t\tW=cn*w+sp*(cn-1); page=line=col=0;\n\t\tans.clear();\n\t\t\n\t\tstring str;\n\t\twhile(getline(cin,str),str!=\"?\")out(str);\n\t\tif(ans.empty())out(\"\");\n\t\trep(i,page+1)\n\t\t{\n\t\t\trep(j,pl)cout<<ans[i][j]<<endl;\n\t\t\tcout<<\"#\"<<endl;\n\t\t}\n\t\tcout<<\"?\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//00\n#include<iostream>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  for(int p,c,w,s;cin>>p>>c>>w>>s,p;){\n    cin.ignore();\n    vector<string> v;\n    for(string t;getline(cin,t),t!=\"?\";){\n      if(t.size()==0){\n\tv.push_back(string(w,'.'));\n      }else{\n\tfor(int i=0;i*w<t.size();i++){\n\t  string ds=t.substr(i*w,w);\n\t  ds+=string(w-ds.size(),'.');\n\t  v.push_back(ds);\n\t}\n      }\n    }\n    while(v.size()%(p*c)){\n      v.push_back(string(w,'.'));\n    }\n    for(int i=0;i*c<v.size();i++){\n      for(int j=0;j<c;j++){\n\tcout<<v[i+(i/p)*p*(c-1)+p*j];\n\tif((j==c-1)){\n\t  cout<<endl;\n\t}else{\n\t  cout<<string(s,'.');\n\t}\n      }\n      if((i+1)%p==0){\n\tcout<<'#'<<endl;\n      }\n    }\n    cout<<'?'<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n   \ntypedef long long int64;\nconst int INF = 1 << 30;\n\nint main(){\n  int plen, cnum, width, cspace;\n  string str;\n\n  while(cin >> plen, plen){\n    cin >> cnum;\n    cin >> width;\n    cin >> cspace;\n\n    vector< string > buffer;\n    cin.ignore();\n    while(getline(cin, str), str != \"?\"){\n      if(str.empty()){\n        buffer.push_back(\"\");\n      } else {\n        for(int i = 0; i < str.size(); i += width){\n          buffer.push_back( str.substr( i, i + width));\n        }\n      }\n    }\n    while(buffer.size() % (plen * cnum) != 0){\n      buffer.push_back(\"\");\n    }\n    for(int i = 0; i < buffer.size() / (plen * cnum); i++){ //ページ数\n      for(int j = 0; j < plen; j++){ // 行数\n        for(int k = 0; k < cnum; k++){ // 横数\n          int pos = i * plen * cnum + j + plen * k;\n          cout << (k ? string(cspace,'.') : \"\") << buffer[pos] << string(width - buffer[pos].size(), '.');\n        }\n        cout << endl;\n      }\n      cout << \"#\" << endl;\n    }\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <numeric>\n#include <map>\n#include <vector>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <stack>\n#include <cctype>\n#include <queue>\n#include <algorithm>\n#include <memory>\n#include <memory.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef pair<int, P> PP;\nconst int INF = 1 << 30;\nconst double EPS = 1e-10;\nconst double PI = 3.14159;\n\nint main(){\n\tint plen, cnum, width, cspace;\n\twhile(cin >> plen && plen){\n\t\tcin >> cnum >> width >> cspace;\n\t\tvector<string> vs[200];\n\t\tstring s;\n\t\tstring space(cspace, '.');\n\t\tstring spacec(width, '.');\n\t\tint count = 0;\n\t\tgetline(cin,s);\n\t\twhile(getline(cin,s) && s != \"?\"){\n\t\t\twhile(s.size() > width){\n\t\t\t\tstring s1(s.begin(), s.begin() + width);\n\t\t\t\tstring s2(s.begin() + width, s.end());\n\t\t\t\tvs[count++%plen].push_back(s1);\n\t\t\t\ts = s2;\n\t\t\t}\n\t\t\twhile(s.size() < width) s.push_back('.');\n\t\t\tvs[count++%plen].push_back(s);\n\t\t}\n\t\tfor(int i = 0; i < plen; i++){\n\t\t\twhile(vs[i].size() % cnum != 0) vs[i].push_back(spacec);\n\t\t}\n\t\tint page = vs[0].size() / cnum;\n\t\tfor(int i = 0; i < plen; i++){\n\t\t\twhile(vs[i].size() < vs[0].size()) vs[i].push_back(spacec);\n\t\t}\n\t\tfor(int i = 0; i < page; i++){\n\t\t\tfor(int j = 0; j < plen; j++){\n\t\t\t\tfor(int k = 0; k < cnum; k++){\n\t\t\t\t\tcout << vs[j][k+i*cnum];\n\t\t\t\t\tif(k != cnum - 1) cout << space;\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}\n\t\t"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,a,b;\nstring s[111];\nvoid init() {\n  a=b=0;\n  for(int i=0; i<n; i++) {\n    s[i]=\"\";\n    for(int j=0; j<x; j++) {\n      if(j) for(int k=0; k<y; k++) s[i]+='.';\n      for(int k=0; k<m; k++) s[i]+='.';\n    }\n  }\n}\n\nvoid print() {\n  for(int i=0; i<n; i++) cout << s[i] << endl;\n  cout << \"#\" << endl;\n}\n\nvoid next() {\n  a++;\n  if(a==n) {\n    a=0;\n    b++;\n  }\n  if(b==x) {\n    print();\n    init();\n  }\n}\n\nint main() {\n  while(cin >> n && n) {\n    cin >> x >> m >> y;\n    string t;\n    getline(cin,t);\n    init();\n    while(getline(cin,t)) {\n      if(t==\"?\") {\n        if(!a||!b) print();\n        cout << t << endl;\n        break;\n      }\n      int k=0;\n      for(int i=0; i<t.size(); i++) {\n        s[a][b*(m+y)+k]=t[i];\n        k++;\n        if(k==m) {\n          k=0;\n          next();\n        }\n      }\n      if(k||t==\"\") next();\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint main(){\n\n    int plen,cnum,width,cspace;\n    while(1){\n        cin>>plen;\n        if(plen==0)\n            break;\n        cin>>cnum>>width>>cspace;\n        string str;\n        getline(cin,str);\n        vector<string> lines;\n        while(getline(cin,str)&&str!=\"?\"){\n            if(str.size()<=width){\n                for(int i = str.size(); i < width; i++){\n                    str+='.';\n                }\n                lines.push_back(str);\n            }\n            // ¡sÉÊ¯é\n            else{\n                // width¶¸ÂÅÊ¯é\n                for(int k = 0; k < (str.size()/width)+(str.size()%width==0?0:1); k++){\n                    // ÅIsÈçA.Åâ®\n                    if(k+1==(str.size()/width)+(str.size()%width==0?0:1)){\n                        string s=str.substr(k*width);\n                        for(int i = s.size(); i < width; i++)\n                            s+='.';\n                        lines.push_back(s);\n                    }\n                    else\n                        lines.push_back(str.substr(k,width));\n                }\n            }\n        }\n        const int onePageLine=plen*cnum;\n        for(int i = 0; i < (lines.size()/onePageLine)+(lines.size()%onePageLine==0?0:1); i++){\n            vector<string> page(plen,\"\");\n            for(int j = 0; j < cnum; j++){\n                for(int k = 0; k < plen; k++){\n                    // àµlinesÌI[ÜÅ«½çA½àÇÁµÈ¢\n                    if(i*onePageLine+j*plen+k<lines.size())\n                        page[k]+=lines[i*onePageLine+j*plen+k];\n                    else{\n                        for(int l = 0; l < width; l++)\n                            page[k]+='.';\n                    }\n                    if(j!=cnum-1){\n                        for(int l = 0; l < cspace; l++)\n                            page[k]+='.';\n                    }\n                }\n            }\n            // print\n            for(int j = 0; j < page.size(); j++){\n                cout<<page[j]<<endl;\n            }\n            cout<<\"#\"<<endl;\n        }\n        cout<<'?'<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int pl,cn,wi,cs;\n    while(cin>>pl,pl){\n        cin>>cn>>wi>>cs;\n        vector<string> vs,ans;\n        string s;\n        cin.ignore();\n        while(getline(cin,s),s!=\"?\"){\n            if(s.size()==0) vs.pb(string(wi,'.'));\n            else if(s.size()<=wi){\n                while(s.size()%wi!=0) s+='.';\n                vs.pb(s);\n            }\n            else{\n                int curl=0;\n                while(s.size()-curl>=wi){\n                    vs.pb(s.substr(curl,wi));\n                    curl+=wi;\n                }\n                if(curl!=s.size()){\n                    string ls=s.substr(curl);\n                    while(ls.size()%wi!=0) ls+='.';\n                    vs.pb(ls);\n                }\n            }\n        }\n        int nump=vs.size()/(cn*pl)+1;\n        string sp(cs,'.');\n        string pad(wi,'.');\n        rep(k,nump){\n            rep(i,cn){\n                rep(j,pl){\n                    if(vs.size()>k*pl*cn+(j+i*pl)){\n                        if(i==0) ans.pb(vs[k*pl*cn+(j+i*pl)]);\n                        else ans[k*pl+j+k]+=sp+vs[k*pl*cn+(j+i*pl)];\n                    }\n                    else{\n                        if(i==0) ans.pb(pad);\n                        else ans[k*pl+j+k]+=sp+pad;\n                    }\n                }\n            }\n            ans.pb(\"#\");\n        }\n        ans.pb(\"?\");\n        rep(i,ans.size()) cout<<ans[i]<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main()\n{\n  while(true){\n    int plen,cnum,width,cspace;\n    cin >> plen;\n    if( plen == 0 ) break;\n    cin >> cnum >> width >> cspace;\n    vector<string> column;\n    vector<string> words;\n    string s;\n    getline(cin,s);\n    int cnt=0;\n    while(true){\n      getline(cin,s);\n      if(s==\"?\")break;\n      ++cnt;\n      words.push_back(s);\n    }\n    if(cnt==0){\n      cout<<\"\\?\"<<endl;\n      continue;\n    }\n    for(int i = 0; i < (int)words.size(); ++i){\n      if((int)words[i].length()<width){\n\tcolumn.push_back(words[i]);\n      }else{\n\tstring t = words[i];\n\twhile((int)t.length()>=width){\n\t  column.push_back(t.substr(0,width));\n\t  t.erase(t.begin(),t.begin()+width);\n\t}\n\tif(t.length()>0){\n\t  column.push_back(t);\n\t}\n      }\n    }\n    while((column.size()%(plen*cnum))!=0){\n      column.push_back(\"\");\n    }\n    int now_page=1;\n    for(int i = 0; i < (int)column.size(); ++i){\n      if(i>0&&i%plen==0){\n\ti=plen*cnum*now_page;\n\tcout<<\"#\"<<endl;\n\tif(i>=(int)column.size())break;\n\t++now_page;\n      }\n\n      int now_print = i;\n      //cout << \"NOW PRINT : \" << now_print << endl;\n      for(int j = 0; j < cnum; ++j){\n\tcout << column[now_print];\n\tfor(int k = 0; k < width-(int)column[now_print].length(); ++k){\n\t  cout<<'.';\n\t}\n\tif(j<cnum-1){\n\t  for(int k = 0; k < cspace; ++k){\n\t    cout <<'.';\n\t  }\n\t}\n\tnow_print += plen;\n      }\n      cout << endl;\n    }\n    cout << \"\\?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\n\nint main() {\n\twhile (1) {\n\t\tint H, C, W, space;\n\t\tcin >> H; if (!H)break;\n\t\tcin >>  C >> W >> space;\n\t\tvector<vector<vector<string>>>anss;\n\t\tconst vector<vector<string>>plane(H, vector<string>(C));\n\t\tvector<vector<string>>page(plane);\n\t\tint ny = -1, nx = 0;\n\t\tstring dummy;\n\t\tgetline(cin, dummy);\n\t\twhile (1) {\n\t\t\tstring st; \n\t\t\tgetline(cin, st);\n\t\t\tif (st == \"?\")break;\n\t\t\telse {\n\t\t\t\tif (st.empty())st = \".\";\n\t\t\t\tfor (int i = 0; i < (int(st.size())-1) / W+1; ++i) {\n\t\t\t\t\tny++;\n\t\t\t\t\tif (ny == H) {\n\t\t\t\t\t\tny = 0;\n\t\t\t\t\t\tnx++;\n\t\t\t\t\t\tif (nx == C) {\n\t\t\t\t\t\t\tanss.emplace_back(page);\n\t\t\t\t\t\t\tpage = plane;\n\t\t\t\t\t\t\tnx = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpage[ny][nx] = st.substr(i*W, W);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (nx || ny) {\n\n\t\t\tanss.emplace_back(page);\n\t\t}\n\t\tfor (int i = 0; i < anss.size(); ++ i) {\n\t\t\tauto page(anss[i]);\n\t\t\tfor (int y = 0; y < H; ++y) {\n\t\t\t\tfor (int x = 0; x < C; ++x) {\n\t\t\t\t\tstring st = page[y][x];\n\t\t\t\t\tcout << st;\n\t\t\t\t\tfor (int n = st.size(); n < W; ++n) {\n\t\t\t\t\t\tcout << '.';\n\t\t\t\t\t}\n\t\t\t\t\tif (x != C - 1) {\n\t\t\t\t\t\tfor (int n = 0; n < space; ++n) {\n\t\t\t\t\t\t\tcout << '.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << '#' << endl;\n\t\t}\n\t\tcout << '?' << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <deque>\n\nusing namespace std;\n\nint L, C, W, S;\ndeque<string> lines;\n\nvoid Print() {\n  if (lines.size() < L*C) lines.resize(L*C);\n  bool non_empty = false;\n  for (int i = 0; i < L*C; ++i) if (!lines[i].empty()) non_empty = true;\n  if (non_empty) {\n    for (int i = 0; i < L; ++i) {\n      string buf(W*C + S*(C-1), '.');\n      for (int j = 0; j < C; ++j) {\n\tmemcpy(&buf[(W+S)*j], lines[L*j+i].data(), lines[L*j+i].size());\n      }\n      cout << buf << endl;\n    }\n    cout << \"#\" << endl;\n  }\n  lines.erase(lines.begin(), lines.begin() + L*C);\n}\n\nint main() {\n  while (cin >> L >> C >> W >> S && L) {\n    lines.clear();\n    string line;\n    getline(cin, line);\n    while (getline(cin, line) && line != \"?\") {\n      if (line.size() < W) {\n\tlines.push_back(line);\n      } else {\n\tfor (int x = 0; x < line.size(); x += W) {\n\t  lines.push_back(line.substr(x, W));\n\t}\n      }\n      if (lines.size() > L * C) Print();\n    }\n    Print();\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<string>\n#include<vector>\n#include<iostream>\n\n#define\tpb\tpush_back\n\nusing namespace std;\n\nint main(){\n\tfor(int plen,cnum,w,cspace;cin>>plen>>cnum>>w>>cspace,plen;){\n\t\tstring dummy;\tgetline(cin,dummy);\n\n\t\tvector<string> mul;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tint len=s.length();\n\t\t\tif(len==0)\tmul.pb(\"\");\n\t\t\tfor(int i=0;i<len;i+=w){\n\t\t\t\tif(w<len-i)\tmul.pb(s.substr(i,w));\n\t\t\t\telse\t\tmul.pb(s.substr(i));\n\t\t\t}\n\t\t}\n//for(int i=0;i<mul.size();i++)\tcout<<mul[i]<<endl;\n\t\tint m=mul.size();\n\t\tint pages=(m+(plen*cnum-1))/(plen*cnum);\t// ceiling\n\t\tfor(int i=0;i<pages;i++){\n\t\t\tint offset=i*plen*cnum;\n\t\t\tvector<string> pg(plen);\n\t\t\tif(i==pages-1){\t// last page\n\t\t\t\tfor(int j=offset;j<m;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t\tfor(int j=m;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=string(w,'.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j=0;j<plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tfor(int j=0;j<cnum;j++){\n\t\t\t\t\tif(j>0)\tcout<<string(cspace,'.');\n\t\t\t\t\tcout<<pg[i].substr(w*j,w*(j+1));\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\n\t\tcout<<'?'<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define MAX 100\n\nchar data[MAX][MAX/2][MAX*10];\nint plen, cnum, width, cspace, page;\nint x, y;\nstring ss;\n\nvoid init(){\n  page = 0;\n  for(int i = 0 ; i < MAX ; i++){\n    for(int j = 0 ; j < MAX/2 ; j++){\n      for(int k = 0 ; k < MAX*10 ; k++){\n        data[i][j][k] = '.';\n      }\n    }\n  }\n}\n\nbool check(){\n  bool ok = true;\n  if(ss.empty()) return ok;\n\n  for(int i = 0 ; i < plen ; i++){\n    for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n      if(data[i][j][page] != '.') return ok;\n    }\n  }\n  return !ok;\n}\n\nvoid change(){\n  y++;\n  if(x == cnum){\n    x = y = 0;\n    page++;\n  }else if(y == plen){\n    y = 0;\n    x++;\n    if(x == cnum){\n      x = y = 0;\n      page++;\n    }\n  }\n}\n\nvoid insert(string &str){\n  int size = str.size(), start;\n  int end, p = 0;\n  bool flg = true;\n\n  while(flg){\n    start = x*(width+cspace);\n    if(size - p <= width){\n      end = start + size - p;\n      flg = false;\n    }else{\n      flg = true;\n      end = start + width;\n    }\n    for(int i = start ; i < end ; i++, p++){\n      if(p == size){ \n        flg = false;\n        break;\n      }\n      data[y][i][page] = str[p];\n    }\n    change(); \n  }\n}\n\nvoid print(){\n  if(!check()) page--;\n  for(int k = 0 ; k <= page ; k++){\n    for(int i = 0 ; i < plen ; i++){\n      for(int j = 0 ; j < cnum*width+cspace*(cnum-1) ; j++){\n        cout << data[i][j][k];\n      }\n      cout << endl;\n    }\n    cout << '#' << endl;\n  }\n  cout << '?' << endl;\n}\n\nint main(){\n  string str;\n  while(cin >> plen && plen){\n    init();\n    cin >> cnum >> width >> cspace;\n\n    cin.ignore();\n    x = y = 0;\n    while(getline(cin,str), str != \"?\"){\n      ss = str;\n      if(str.empty()){\n        change();\n      }else{\n        insert(str);\n      }\n    }\n    print();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nvector<string> vs,ans;\nint main(){\n    int pl,cn,wi,cs;\n    while(cin>>pl,pl){\n        cin>>cn>>wi>>cs;\n        vs.clear();ans.clear();\n        string s;\n        cin.ignore();\n        while(getline(cin,s),s!=\"?\"){\n            if(s.size()==0) vs.pb(string(wi,'.'));\n            else if(s.size()<=wi){\n                while(s.size()%wi!=0) s+='.';\n                vs.pb(s);\n            }\n            else{\n                int curl=0;\n                while(s.size()-curl>=wi){\n                    vs.pb(s.substr(curl,wi));\n                    curl+=wi;\n                }\n                if(curl!=s.size()){\n                    string ls=s.substr(curl);\n                    while(ls.size()%wi!=0) ls+='.';\n                    vs.pb(ls);\n                }\n            }\n        }\n        int nump=(vs.size()-1)/(cn*pl)+1;\n        string sp(cs,'.');\n        string pad(wi,'.');\n        rep(k,nump){\n            rep(i,cn){\n                rep(j,pl){\n                    if(vs.size()>k*pl*cn+(j+i*pl)){\n                        if(i==0) ans.pb(vs[k*pl*cn+(j+i*pl)]);\n                        else ans[k*pl+j+k]+=sp+vs[k*pl*cn+(j+i*pl)];\n                    }\n                    else{\n                        if(i==0) ans.pb(pad);\n                        else ans[k*pl+j+k]+=sp+pad;\n                    }\n                }\n            }\n            ans.pb(\"#\");\n        }\n        ans.pb(\"?\");\n        rep(i,ans.size()) cout<<ans[i]<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<deque>\n#include<list>\n#include<map>\n#include<queue>\n#include<set>\n#include<stack>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<iostream>\n#include<sstream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\nint main(){\n  int i,j,k,l;\n  int h,n,w,s;\n  while(cin>>h,h){\n    cin>>n>>w>>s;\n    vector<string> a;\n    string t;\n    getline(cin,t);\n    while(getline(cin,t),t[0]!='?'){\n      int ln=t.length(),sz;\n      if(ln){\n\tif(ln%w)\n\t  sz=ln/w+1;\n\telse\n\t  sz=ln/w;\n      }else{\n\tsz=1;\n      }\n      for(i=0;i<sz-1;++i)\n\ta.push_back(t.substr(w*i,w));\n      a.push_back(t.substr(w*i));\n    }\n    int sz;\n    if(a.size()%(h*n))\n      sz=a.size()/(h*n)+1;\n    else\n      sz=a.size()/(h*n);\n    for(i=0;i<sz;++i){      \n      for(j=0;j<h;++j){\n\tfor(k=0;k<n-1;++k){\n\t  if(h*n*i+j+h*k<(int)a.size()){\n\t    cout<<a[h*n*i+j+h*k];\n\t    int ln=a[h*n*i+j+h*k].length();\n\t    for(l=0;l<w-ln;++l)\n\t      cout<<'.';\n\t  }else{\n\t    for(l=0;l<w;++l)\n\t      cout<<'.';\n\t  }\n\t  for(l=0;l<s;++l)\n\t    cout<<'.';\n\t}\n\tif(h*n*i+j+h*k<(int)a.size()){\n\t  cout<<a[h*n*i+j+h*k];\n\t  int ln=a[h*n*i+j+h*k].length();\n\t  for(l=0;l<w-ln;++l)\n\t    cout<<'.';\n\t}else{\n\t  for(l=0;l<w;++l)\n\t    cout<<'.';\n\t}\n\tcout<<endl;\n      }\n      cout<<'#'<<endl;\n    }\n    cout<<'?'<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <sstream>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n#define rp(i,c) rep(i,(c).size())\n#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n#define mp make_pair\n#define pb push_back\n#define all(c) (c).begin(),(c).end()\n#define dbg(x) cerr<<#x<<\" = \"<<(x)<<endl\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pi;\nconst int inf=1<<28;\nconst double INF=1e10,EPS=1e-9;\n\nint pl,cn,w,sp;\nint W,page,line,col;\nvector<vector<string> > ans;\n\nvoid out(string s)\n{\n\tif(col==0&&line==0)\n\tans.pb(vector<string>(pl,string(W,'.')));\n\t\t\t\n\tint x=(w+sp)*col,l=s.size();\n\trep(i,min(l,w))ans[page][line][x+i]=s[i];\n\tif(++line==pl)\n\t{\n\t\tline=0;\n\t\tif(++col==cn)col=0,page++;\n\t}\n\tif(l>w)out(s.substr(w));\n}\nint main()\n{\n\twhile(cin>>pl,pl)\n\t{\n\t\tcin>>cn>>w>>sp; cin.ignore();\n\t\t\n\t\tW=cn*w+sp*(cn-1); page=line=col=0;\n\t\tans.clear();\n\t\t\n\t\tstring str;\n\t\twhile(getline(cin,str),str!=\"?\")out(str);\n\t\trep(i,ans.size())\n\t\t{\n\t\t\trep(j,pl)cout<<ans[i][j]<<endl;\n\t\t\tcout<<\"#\"<<endl;\n\t\t}\n\t\tcout<<\"?\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int pl,cn,wi,cs;\n    while(cin>>pl,pl){\n        cin>>cn>>wi>>cs;\n        vector<string> vs,ans;\n        string s;\n        cin.ignore();\n        while(getline(cin,s),s!=\"?\"){\n            if(s.size()==0) vs.pb(string(wi,'.'));\n            else if(s.size()<=wi){\n                while(s.size()%wi!=0) s+='.';\n                vs.pb(s);\n            }\n            else{\n                int curl=0;\n                while(s.size()-curl>=wi){\n                    vs.pb(s.substr(curl,wi));\n                    curl+=wi;\n                }\n                if(curl!=s.size()){\n                    string ls=s.substr(curl);\n                    while(ls.size()%wi!=0) ls+='.';\n                    vs.pb(ls);\n                }\n            }\n        }\n        int nump=(vs.size()-1)/(cn*pl)+1;\n        if(vs.empty()) nump=0;\n        string sp(cs,'.');\n        string pad(wi,'.');\n        rep(k,nump){\n            rep(i,cn){\n                rep(j,pl){\n                    if(vs.size()>k*pl*cn+(j+i*pl)){\n                        if(i==0) ans.pb(vs[k*pl*cn+(j+i*pl)]);\n                        else ans[k*pl+j+k]+=sp+vs[k*pl*cn+(j+i*pl)];\n                    }\n                    else{\n                        if(i==0) ans.pb(pad);\n                        else ans[k*pl+j+k]+=sp+pad;\n                    }\n                }\n            }\n            ans.pb(\"#\");\n        }\n        ans.pb(\"?\");\n        rep(i,ans.size()) cout<<ans[i]<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main()\n{\n  int plen,cnum,width,cspace;\n  while(cin >> plen >> cnum >> width >> cspace && plen){\n    vector<string> column;\n    vector<string> words;\n    string s;\n    int len=0;\n    getline(cin,s);\n    while(true){\n      getline(cin,s);\n      if(s==\"?\")break;\n      len+=s.length();\n      words.push_back(s);\n    }\n    if(len==0){\n      cout <<\"?\"<<endl;\n      continue;\n    }\n    for(int i = 0; i < (int)words.size(); ++i){\n      if((int)words[i].length()<width){\n\tcolumn.push_back(words[i]);\n      }else{\n\tstring t = words[i];\n\twhile((int)t.length()>=width){\n\t  column.push_back(t.substr(0,width));\n\t  t.erase(t.begin(),t.begin()+width);\n\t}\n\tif(t.length()>0){\n\t  column.push_back(t);\n\t}\n      }\n    }\n    while((column.size()%(plen*cnum))!=0){\n      column.push_back(\"\");\n    }\n    int now_page=1;\n    bool broke=false;\n    for(int i = 0; i < (int)column.size(); ++i){\n      if(i>0&&(i%plen)==0){\n\ti=plen*cnum*now_page;\n\tcout<<\"#\"<<endl;\n\tif(i>=(int)column.size()){\n\t  broke=true;\n\t  break;\n\t}\n\t++now_page;\n      }\n\n      int now_print = i;\n      for(int j = 0; j < cnum; ++j){\n\tcout << column[now_print];\n\tfor(int k = 0; k < width-(int)column[now_print].length(); ++k){\n\t  cout<<'.';\n\t}\n\tif(j<cnum-1){\n\t  for(int k = 0; k < cspace; ++k){\n\t    cout <<'.';\n\t  }\n\t}\n\tnow_print += plen;\n      }\n      cout << endl;\n    }\n    if(!broke)cout<<\"#\"<<endl;\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;main(){int p,c,w,s,l,i,x,y,z;for(string t,B,S,L[500];cin>>p>>c>>w>>s,p;puts(\"?\")){B=S=\"\";for(l=x=y=z=i=0;i++<w;)B+=\".\";for(;y++<s;)S+=\".\";for(getline(cin,t);getline(cin,t),t!=\"?\";){if(t==\"\")t=\".\";for(;t.size()%w!=0;)t+=\".\";for(i=0;i+w<=t.size();i+=w)L[l++]=t.substr(i,w);}for(;l%(p*c);)L[l++]=B;for(;p*c*z<l;){t=\"\";for(y=0;y<c;t+=(y++?S:\"\")+(i<=l?L[i]:B))i=x+y*p+z*p*c;cout<<t<<\"\\n\";if(++x>=p){x=0;z++;puts(\"#\");}}}}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define BW(a,x,b) ((a)<=(x)&&(x)<=(b))\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define INF 1 << 30\n#define EPS 1e-10\n\ntypedef pair<int, int> pi;\ntypedef pair<int, pi> pii;\ntypedef vector<int> vi;\ntypedef queue<int> qi;\ntypedef long long ll;\n\nint plen, cnum, width, cspace;\nchar res[128][64], line[1024];\n\nint main(){\n  while(scanf(\"%d\", &plen) && plen){\n    scanf(\"%d%d%d\", &cnum, &width, &cspace);\n\n    //    fill(res[0][0], res[4098][63], '.');\n    rep(i, plen){\n      rep(j, cnum * width + cspace * (cnum-1)) res[i][j] = '.';\n      res[i][cnum * width + cspace * (cnum-1)] = '\\0';\n    }\n\n    int p = 0, c = 0;\n    fgets(line, sizeof(line), stdin);\n    while(1){\n      fgets(line, sizeof(line), stdin);\n      if(line[0] == '?') break;\n      line[strlen(line)-1] = '\\0';\n      //      printf(\"%d %d %d\\n\", (int)strlen(line), p, c);\n      rep(i, strlen(line)){\n\n\tif(i && i%width == 0) p++;\n\tif(p == plen){ c++; p = 0;}\n\tif(c == cnum){\n\t  rep(i, plen) printf(\"%s\\n\", res[i]);\n\t  puts(\"#\");\n\t  p = c = 0;\n\t  rep(i, plen) rep(j, cnum * width + cspace * (cnum-1)) res[i][j] = '.';\n\t}\n\tres[p][c*width+c*cspace+i%width] = line[i];\n      }\n      p++;\n    }\n    if(res[0][0] != '.'){\n      rep(i, plen) printf(\"%s\\n\", res[i]);\n      puts(\"#\");\n    }\n    puts(\"?\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main()\n{\n  while(true){\n    int plen,cnum,width,cspace;\n    cin >> plen;\n    if( plen == 0 ) break;\n    cin >> cnum >> width >> cspace;\n    vector<string> column;\n    vector<string> words;\n    string s;\n    getline(cin,s);\n    //int cnt=0;\n    while(true){\n      getline(cin,s);\n      if(s==\"?\")break;\n      //++cnt;\n      words.push_back(s);\n    }\n    /*\n    if(cnt==0){\n      cout<<\"?\"<<endl;\n      continue;\n    }\n    */\n    for(int i = 0; i < (int)words.size(); ++i){\n      if((int)words[i].length()<width){\n\tcolumn.push_back(words[i]);\n      }else{\n\tstring t = words[i];\n\twhile((int)t.length()>=width){\n\t  column.push_back(t.substr(0,width));\n\t  t.erase(t.begin(),t.begin()+width);\n\t}\n\tif(t.length()>0){\n\t  column.push_back(t);\n\t}\n      }\n    }\n    while((column.size()%(plen*cnum))!=0){\n      column.push_back(\"\");\n    }\n    int now_page=1;\n    for(int i = 0; i < (int)column.size(); ++i){\n      if(i>0&&i%plen==0){\n\ti=plen*cnum*now_page;\n\tcout<<\"#\"<<endl;\n\tif(i>=(int)column.size())break;\n\t++now_page;\n      }\n\n      int now_print = i;\n      //cout << \"NOW PRINT : \" << now_print << endl;\n      for(int j = 0; j < cnum; ++j){\n\tcout << column[now_print];\n\tfor(int k = 0; k < width-(int)column[now_print].length(); ++k){\n\t  cout<<'.';\n\t}\n\tif(j<cnum-1){\n\t  for(int k = 0; k < cspace; ++k){\n\t    cout <<'.';\n\t  }\n\t}\n\tnow_print += plen;\n      }\n      cout << endl;\n    }\n    cout << \"?\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\n\nint main() {\n\twhile (1) {\n\t\tint H, C, W, space;\n\t\tcin >> H; if (!H)break;\n\t\tcin >>  C >> W >> space;\n\t\tvector<vector<vector<string>>>anss;\n\t\tconst vector<vector<string>>plane(H, vector<string>(C));\n\t\tvector<vector<string>>page(plane);\n\t\tint ny = -1, nx = 0;\n\t\tstring dummy;\n\t\tgetline(cin, dummy);\n\t\twhile (1) {\n\t\t\tstring st; \n\t\t\tgetline(cin, st);\n\t\t\tif (st == \"?\")break;\n\t\t\telse {\n\t\t\t\tif (st.empty())st = \".\";\n\t\t\t\tfor (int i = 0; i < (int(st.size())-1) / W+1; ++i) {\n\t\t\t\t\tny++;\n\t\t\t\t\tif (ny == H) {\n\t\t\t\t\t\tny = 0;\n\t\t\t\t\t\tnx++;\n\t\t\t\t\t\tif (nx == C) {\n\t\t\t\t\t\t\tanss.emplace_back(page);\n\t\t\t\t\t\t\tpage = plane;\n\t\t\t\t\t\t\tnx = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpage[ny][nx] = st.substr(i*W, W);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tanss.emplace_back(page);\n\t\tfor (int i = 0; i < anss.size(); ++ i) {\n\t\t\tauto page(anss[i]);\n\t\t\tfor (int y = 0; y < H; ++y) {\n\t\t\t\tfor (int x = 0; x < C; ++x) {\n\t\t\t\t\tstring st = page[y][x];\n\t\t\t\t\tcout << st;\n\t\t\t\t\tfor (int n = st.size(); n < W; ++n) {\n\t\t\t\t\t\tcout << '.';\n\t\t\t\t\t}\n\t\t\t\t\tif (x != C - 1) {\n\t\t\t\t\t\tfor (int n = 0; n < space; ++n) {\n\t\t\t\t\t\t\tcout << '.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << '#' << endl;\n\t\t}\n\t\tcout << '?' << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <numeric>\n#include <map>\n#include <vector>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <stack>\n#include <cctype>\n#include <queue>\n#include <algorithm>\n#include <memory>\n#include <memory.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef pair<int, P> PP;\nconst int INF = 1 << 30;\nconst double EPS = 1e-10;\nconst double PI = 3.14159;\n\nint main(){\n\tint plen, cnum, width, cspace;\n\twhile(cin >> plen && plen){\n\t\tcin >> cnum >> width >> cspace;\n\t\tvector<string> vs[100];\n\t\tstring s;\n\t\tstring space(cspace, '.');\n\t\tstring spacec(width, '.');\n\t\tint count = 0;\n\t\twhile(cin >> s && s != \"?\"){\n\t\t\twhile(s.size() > width){\n\t\t\t\tstring s1(s.begin(), s.begin() + width);\n\t\t\t\tstring s2(s.begin() + width, s.end());\n\t\t\t\tvs[count++%plen].push_back(s1);\n\t\t\t\ts = s2;\n\t\t\t}\n\t\t\twhile(s.size() < width) s.push_back('.');\n\t\t\tvs[count++%plen].push_back(s);\n\t\t}\n\t\tfor(int i = 0; i < plen; i++){\n\t\t\twhile(vs[i].size() % cnum != 0) vs[i].push_back(spacec);\n\t\t}\n\t\tint page = vs[0].size() / cnum;\n\t\tfor(int i = 0; i < plen; i++){\n\t\t\twhile(vs[i].size() < vs[0].size()) vs[i].push_back(spacec);\n\t\t}\n\t\tfor(int i = 0; i < page; i++){\n\t\t\tfor(int j = 0; j < plen; j++){\n\t\t\t\tfor(int k = 0; k < cnum; k++){\n\t\t\t\t\tcout << vs[j][k+i*page];\n\t\t\t\t\tif(k != cnum - 1) cout << space;\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}\n\t"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        string res[2048];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if( j%plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<space;\n            if( j%plen + plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<'\\n';\n            if((j+1)%plen==0){\n                cout<<\"#\"<<endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef complex<double> P;\nstatic const double EPS = 1e-8;\nstatic const int INF = (int)1e8;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) for (int i=0; i<(int)(n); ++i)\n#define FOREQ(i,k,n) for (int i=(k); i<=(int)(n); ++i)\n#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define FIND(m,w) ((m).find(w)!=(m).end())\n\nint main(void){\n  int height,column,width,space;\n  while(cin>>height>>column>>width>>space){\n    cin.ignore();\n    string line;\n    vector<string> words;\n    while(getline(cin,line)){\n      if(line==\"?\") break;\n      for(int i=0; i==0||i<line.size(); i+=width){\n        string word = line.substr(i,width);\n        while(word.size()!=width)word+=\".\";\n        words.push_back(word);\n      }\n    }\n    string brank;  while(brank.size()<width)brank+=\".\";\n    string spacestr; while(spacestr.size()<space)spacestr+=\".\";\n    int page = 0;\n    while(true){\n      if(page>=words.size()) break;\n      REP(y,height){\n        string output;\n        REP(x,column){\n          if(x) output+=spacestr;\n          if(page+height*x+y<words.size()) output += words[page+x*height+y];\n          else {\n            output+=brank;\n          }\n        }\n        cout<<output<<endl;\n      }\n      cout<<\"#\"<<endl;\n      page+=height*column;\n    }\n    cout<<\"?\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nint main()\n{\n  int plen,cnum,width,cspace;\n  string s;\n  string blank,space;\n  vector<string>list;\n  while(cin>>plen>>cnum>>width>>cspace,plen){\n    blank=space=\"\";\n    for(int i=0;i<width;i++)blank+=\".\";\n    for(int i=0;i<cspace;i++)space+=\".\";\n    list.clear();\n    getline(cin,s);\n    while(getline(cin,s),s!=\"?\"){\n      if(s.length()==0)s=\".\";\n      while(s.length()%width != 0)s+=\".\";\n      for(int i=0;i+width<=s.length();i+=width)\n\tlist.push_back(s.substr(i,i+width));\n    }\n    while(list.size()%(plen*cnum) != 0)list.push_back(blank);\n\n    int line=0,column=0,page=0;\n    while(plen*cnum*page < list.size()){\n      s=\"\";\n      for(column=0;column<cnum;column++){\n\tif(column!=0)s+=space;\n\tint i = line + column*plen + page*plen*cnum;\n\tif(i <= list.size())s+=list[i];\n\telse s+=blank;\n      }\n      cout<<s<<endl;\n      line++;\n      if(line >= plen){\n\tline=0;\n\tpage++;\n\tputs(\"#\");\n      }\n    }\n    puts(\"?\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[1024];\n    while(cin>>plen, plen){\n        cin>>cnum>>width>>cspace;\n        int i = 0,j,k,l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore();\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i]==\"?\") break;\n        }\n        i--;\n        string res[1024];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j=0;;j++){\n            if( j%plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<space;\n            if( j%plen + plen + j/plen*plen*cnum < k ){\n                cout<<res[ j%plen + plen + j/plen*plen*cnum ];\n            }else{\n                cout<<empty;\n            }\n            cout<<'\\n';\n            if((j+1)%plen==0){\n                cout<<\"#\"<<endl;\n                if( j + j/plen*plen*cnum >= k ) break;\n            }\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<(int)b;i++)\n#define rep(i,n) REP(i,0,n)\n\nint PLen, CNum, Width, CSpace;\nvector<string> lines;\n\nint currColumn;\npair<int, int> currPos;\nint N, M;\nvector<string> output;\nbool dirty;\n\nvoid printPage() {\n  rep(i, N) cout << output[i] << endl;\n  cout << \"#\" << endl;\n  fill(output.begin(), output.end(), string(M, '.'));\n  currColumn = 0;\n  currPos = {0, 0};\n  dirty = 0;\n}\n\nvoid print(char c) {\n  if(currPos.second >= (currColumn * Width + CSpace * currColumn) + Width) {\n    currPos.first ++;\n    if(currPos.first >= PLen) {\n      currPos.first = 0;\n      currColumn ++;\n    }\n    currPos.second = currColumn * Width + CSpace * currColumn;\n  }\n    \n  if(currColumn >= CNum) {\n    printPage();\n  }\n  \n  dirty = 1;\n  output[currPos.first][currPos.second++] = c;\n}\n\nvoid nextLine() {\n  currPos.first ++;\n  if(currPos.first >= PLen) {\n    currColumn ++;\n    currPos.first = 0;\n    if(currColumn >= CNum && dirty) printPage();\n  }\n  currPos.second = currColumn * Width + CSpace * currColumn;\n}\n\nvoid solve() {\n  \n  output.clear();\n  output.resize(PLen);\n  dirty = 0;\n  \n  N = PLen, M = Width * CNum + CSpace * (CNum - 1);\n  \n  rep(i, N) output[i] = string(M, '.');\n\n  currColumn = 0;\n  currPos = {0, 0};\n  \n  rep(i, lines.size()) {    \n    int LLen = lines[i].size();\n    dirty = 1;\n    rep(j, LLen) {\n      print(lines[i][j]);\n    }\n    nextLine();\n  }\n  \n  if(dirty) printPage();\n  cout << \"?\" << endl;\n}\n\nint main() {\n\n  while(1) {\n    \n    lines.clear();    \n    cin >> PLen >> CNum >> Width >> CSpace; cin.ignore();\n\n    if(PLen == 0) break;\n    \n    for(int i=0;; i++) {\n      string in;\n      getline(cin, in);\n      if(in == \"?\") break;\n      else {\n\tlines.push_back(in);\n      }\n    }\n    \n    solve();\n    \n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//00\n#include<iostream>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  for(int p,c,w,s;cin>>p>>c>>w>>s,p;){\n    cin.ignore();\n    vector<string> v;\n    for(string t;getline(cin,t),t!=\"?\";){\n      if(t.size()==0){\n\tv.push_back(string(w,'.'));\n      }else{\n\tfor(int i=0;i*w<t.size();i++){\n\t  string ds=t.substr(i*w,w);\n\t  ds+=string(w-ds.size(),'.');\n\t  v.push_back(ds);\n\t}\n      }\n    }\n    while(v.size()%(p*c)){\n      v.push_back(string(w,'.'));\n    }\n    for(int i=0;i*c<v.size();i++){\n      for(int j=0;j<c;j++){\n\tcout<<v[i+(i/p)*p*(c-1)+p*j]<<((j==c-1)?'\\n':'.');\n      }\n      if((i+1)%p==0){\n\tcout<<'#'<<endl;\n      }\n    }\n    cout<<'?'<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint pl,cn,wi,cs,r,c,p;\nchar f[101][51];\n\nvoid init()\n{\n\tr=0; c=0; p=0;\n\tmemset(f,'.',sizeof(f));\n}\n\nvoid output()\n{\n\tfor(int i=0; i<pl; i++)\n\t{\n\t\tfor(int j=0; j<(cn*wi+cs*(cn-1)); j++)\n\t\t\tcout << f[j][i];\n\t\tcout << endl;\n\t}\n\t\n\tcout << \"#\" << endl;\n}\n\nint main()\n{\n\twhile(cin >> pl, pl)\n\t{\n\t \tcin >> cn >> wi >> cs;\n\t\t\n\t\tinit();\n\t\tstring s;\n\t\tcin.ignore();\n\t\twhile(getline(cin, s), s!=\"?\")\n\t\t{\n\t\t\tp=0;\n\t\t\tfor(int i=0; i<s.size(); i++)\n\t\t\t{\n\t\t\t\tif(p==wi)\n\t\t\t\t{\n\t\t\t\t\tr++;\n\t\t\t\t\tp=0;\n\t\t\t\t}\n\t\t\t\tif(r==pl)\n\t\t\t\t{\n\t\t\t\t\tr=0;\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tif(c==cn)\n\t\t\t\t{\n\t\t\t\t\toutput();\n\t\t\t\t\tinit();\n\t\t\t\t}\n\t\t\t\tf[p+c*wi+cs*c][r]=s[i];\n\t\t\t\t\n\t\t\t\tp++;\n\t\t\t}\n\t\t\t\n\t\t\tr++;\n\t\t}\n\t\t\n\t\tif(p!=0&&(c!=0||r!=0)) output();\n\t\t\n\t\tcout << \"?\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,a,b;\nstring s[111];\nvoid init() {\n  a=b=0;\n  for(int i=0; i<n; i++) {\n    s[i]=\"\";\n    for(int j=0; j<x; j++) {\n      if(j) for(int k=0; k<y; k++) s[i]+='.';\n      for(int k=0; k<m; k++) s[i]+='.';\n    }\n  }\n}\n\nvoid print() {\n  for(int i=0; i<n; i++) cout << s[i] << endl;\n  cout << \"#\" << endl;\n}\n\nvoid next() {\n  a++;\n  if(a==n) {\n    a=0;\n    b++;\n  }\n  if(b==x) {\n    print();\n    init();\n  }\n}\n\nint main() {\n  while(cin >> n && n) {\n    cin >> x >> m >> y;\n    string t;\n    getline(cin,t);\n    init();\n    while(getline(cin,t)) {\n      if(t==\"?\") {\n        if(a||b) print();\n        cout << t << endl;\n        break;\n      }\n      int k=0;\n      for(int i=0; i<t.size(); i++) {\n        s[a][b*(m+y)+k]=t[i];\n        k++;\n        if(k==m) {\n          k=0;\n          next();\n        }\n      }\n      if(k||t==\"\") next();\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  if(cnum == 1)cspace = 0;\n  char text[plen][cnum*width+cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  while(true)\n    {\n      getline(cin,line);\n      if(line == \"?\")break;\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\t  printed = false;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t  printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n  // cout << \"printed ? \" << printed << endl;\n  if(!printed)\n    {\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <numeric>\n#include <map>\n#include <vector>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <stack>\n#include <cctype>\n#include <queue>\n#include <algorithm>\n#include <memory>\n#include <memory.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef pair<int, P> PP;\nconst int INF = 1 << 30;\nconst double EPS = 1e-10;\nconst double PI = 3.14159;\n\nint main(){\n\tint plen, cnum, width, cspace;\n\twhile(cin >> plen && plen){\n\t\tcin >> cnum >> width >> cspace;\n\t\tvector<string> vs[200];\n\t\tstring s;\n\t\tstring space(cspace, '.');\n\t\tstring spacec(width, '.');\n\t\tint count = 0;\n\t\tgetline(cin,s);\n\t\twhile(getline(cin,s) && s != \"?\"){\n\t\t\twhile(s.size() > width){\n\t\t\t\tstring s1(s.begin(), s.begin() + width);\n\t\t\t\tstring s2(s.begin() + width, s.end());\n\t\t\t\tvs[count++%plen].push_back(s1);\n\t\t\t\ts = s2;\n\t\t\t}\n\t\t\twhile(s.size() < width) s.push_back('.');\n\t\t\tvs[count++%plen].push_back(s);\n\t\t}\n\t\tfor(int i = 0; i < plen; i++){\n\t\t\twhile(vs[i].size() % cnum != 0) vs[i].push_back(spacec);\n\t\t}\n\t\tint page = vs[0].size() / cnum;\n\t\tfor(int i = 0; i < plen; i++){\n\t\t\twhile(vs[i].size() < vs[0].size()) vs[i].push_back(spacec);\n\t\t}\n\t\tfor(int i = 0; i < page; i++){\n\t\t\tfor(int j = 0; j < plen; j++){\n\t\t\t\tfor(int k = 0; k < cnum; k++){\n\t\t\t\t\tcout << vs[j][k+i*page];\n\t\t\t\t\tif(k != cnum - 1) cout << space;\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\n\nint main(){\n    int h, c, w, space;\n    while(scanf(\"%d\\n\", &h), h){\n        scanf(\"%d\\n%d\\n%d\\n\", &c, &w, &space);\n        \n        string in = \"\";\n        while(space--)  in += \".\";\n\n        string line;\n        vector<string> v;\n        while(getline(cin, line), line != \"?\"){\n            int pos = 0;\n            while(pos < line.length()){\n                v.push_back(line.substr(pos, min((int)line.length()-pos, w)));\n                pos += min((int)line.length()-pos, w);\n            }\n            if(pos == 0)    v.push_back(\"\");\n        }\n        while(v.size()%(h*c))   v.push_back(\"\");\n        int pos = 0;\n        while(pos < v.size()){\n            for(int i = 0; i < h; i++){\n                for(int j = 0; j < c; j++){\n                    if(j)   cout << in;\n                    cout << v[pos+j*h+i];\n                    for(int k = 0; k < w-v[pos+j*h+i].length(); k++)    cout << \".\";\n                }\n                cout << endl;\n            }\n            pos += h*c;\n            cout << \"#\" << endl;\n        }\n        cout << \"?\" << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#define DEBUG false\nusing namespace std;\n\nint main(){\n  int plen,cnum,width,cspace;\n  string s, t;\n  vector<string> v;\n\n  while( cin>>plen && plen ){\n    /*\n    cout << \"************************\"<<endl;\n    cout << \"plen=\" << plen << endl;\n    */\n    cin >> cnum >> width >> cspace;\n\n    v.clear();\n    getline( cin,s ); // üsÌÇÝÝ\n    while( getline(cin,s) && s!=\"?\" ){\n      while( (int)s.length()>width ){ // ÍÝo½ª\n\tv.push_back( s.substr( 0,width ) );\n\ts = s.substr( width );\n      }\n      while( (int)s.length()<width )\n\ts=s+\".\";\n      v.push_back( s );\n    }\n\n    s=\"\"; for( int i=0;i<width;i++ ) s+=\".\";\n    int pN = plen*cnum;\n    while( v.size()%pN!=0 ) v.push_back( s );\n\n    if( DEBUG )\n      for( unsigned int i=0;i<v.size();i++ )\n\tcout << \"[\"<<v[i]<<\"]\"<<endl;\n\n    s=\"\"; for( int i=0;i<cspace;i++ ) s+=\".\";\n    int Np = v.size()/pN;\n    for( int np=0;np<Np;np++ ){\n      for( int i=0;i<plen;i++ ){\n\tcout << v[ np*pN + i ]; \n\tfor( int cn=1;cn<cnum;cn++ )\n\t  cout << s << v[ np*pN + i + plen*cn ];\n\tcout << endl;\n      }\n      cout << \"#\"<<endl;\n    }\n    cout << \"?\"<<endl;\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <deque>\n\nusing namespace std;\n\nint L, C, W, S;\ndeque<string> lines;\n\nvoid Print() {\n  if (lines.size() < L*C) lines.resize(L*C);\n  for (int i = 0; i < L; ++i) {\n    string buf(W*C + S*(C-1), '.');\n    for (int j = 0; j < C; ++j) {\n      memcpy(&buf[(W+S)*j], lines[L*j+i].data(), lines[L*j+i].size());\n    }\n    cout << buf << endl;\n  }\n  cout << \"#\" << endl;\n  lines.erase(lines.begin(), lines.begin() + L*C);\n}\n\nint main() {\n  while (cin >> L >> C >> W >> S && L) {\n    lines.clear();\n    string line;\n    getline(cin, line);\n    while (getline(cin, line) && line != \"?\") {\n      if (line.empty()) {\n\tlines.push_back(line);\n      } else {\n\tfor (int x = 0; x < line.size(); x += W) {\n\t  lines.push_back(line.substr(x, W));\n\t}\n      }\n      while (lines.size() > L*C) Print();\n    }\n    if (!lines.empty()) Print();\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nint main()\n{\n    for(;;){\n        int plen, cnum, width, cspace;\n        cin >> plen >> cnum >> width >> cspace;\n        if(plen == 0)\n            return 0;\n        cin.ignore();\n\n        string s;\n        int w = width * cnum + cspace * (cnum-1);\n        for(;;){\n            vector<string> ret(plen, string(w, '.'));\n            for(int x=0; x<w; x+=width+cspace){\n                for(int y=0; y<plen; ++y){\n                    if(s == \"\")\n                        getline(cin, s);\n                    if(s == \"?\")\n                        break;\n                    string s1;\n                    if(s.size() <= width){\n                        s1 = s;\n                        s = \"\";\n                    }else{\n                        s1 = s.substr(0, width);\n                        s = s.substr(width);\n                    }\n\n                    ret[y].replace(x, s1.size(), s1);\n                }\n            }\n\n            for(int y=0; y<plen; ++y)\n                cout << ret[y] << endl;\n            cout << '#' << endl;\n            if(s == \"?\"){\n                cout << '?' << endl;\n                break;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint main(){\n    int plen,cnum,width,cspace;\n    while(1){\n        cin>>plen;\n        if(plen==0)\n            break;\n        cin>>cnum>>width>>cspace;\n        string str;\n        getline(cin,str);\n        vector<string> lines;\n        while(getline(cin,str)&&str!=\"?\"){\n            // width¶¸ÂÅÊ¯é\n            if(str==\"\"){\n                string s;\n                for(int i = 0; i < width; i++)\n                    s+='.';\n                lines.push_back(s);\n                continue;\n            }\n            for(int k = 0; k < (str.size()/width)+(str.size()%width==0?0:1); k++){\n                // ÅIsÈçA.Åâ®\n                if(k+1==(str.size()/width)+(str.size()%width==0?0:1)){\n                    string s=str.substr(k*width);\n                    for(int i = s.size(); i < width; i++)\n                        s+='.';\n                    lines.push_back(s);\n                }\n                else\n                    lines.push_back(str.substr(k,width));\n            }\n        }\n        const int onePageLine=plen*cnum;\n        for(int i = 0; i < (lines.size()/onePageLine)+(lines.size()%onePageLine==0?0:1); i++){\n            vector<string> page(plen,\"\");\n            bool isDotOnly=true;\n            for(int j = 0; j < cnum; j++){\n                for(int k = 0; k < plen; k++){\n                    // àµlinesÌI[ÜÅ«½çA½àÇÁµÈ¢\n                    if(i*onePageLine+j*plen+k<lines.size())\n                        page[k]+=lines[i*onePageLine+j*plen+k];\n                    else{\n                        for(int l = 0; l < width; l++)\n                            page[k]+='.';\n                    }\n                    if(j!=cnum-1){\n                        for(int l = 0; l < cspace; l++)\n                            page[k]+='.';\n                    }\n                }\n            }\n            // .µ©È¢y[WÍóµÈ¢\n            for(int j = 0; j < page.size(); j++){\n                for(int k = 0; k < page[j].size(); k++){\n                    if(page[j][k]!='.')\n                        isDotOnly=false;\n                }\n            }\n            if(!isDotOnly){\n                // print\n                for(int j = 0; j < page.size(); j++)\n                    cout<<page[j]<<endl;\n                cout<<\"#\"<<endl;\n            }\n        }\n        cout<<'?'<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<(int)b;i++)\n#define rep(i,n) REP(i,0,n)\n\nint PLen, CNum, Width, CSpace;\nvector<string> lines;\n\nint currColumn;\npair<int, int> currPos;\nint N, M;\nvector<string> output;\nbool dirty;\n\nvoid printPage() {\n  rep(i, N) cout << output[i] << endl;\n  cout << \"#\" << endl;\n  fill(output.begin(), output.end(), string(M, '.'));\n  currColumn = 0;\n  currPos = {0, 0};\n  dirty = 0;\n}\n\nvoid print(char c) {\n  if(currPos.second >= (currColumn * Width + CSpace * currColumn) + Width) {\n    currPos.first ++;\n    if(currPos.first >= PLen) {\n      currPos.first = 0;\n      currColumn ++;\n    }\n    currPos.second = currColumn * Width + CSpace * currColumn;\n  }\n    \n  if(currColumn >= CNum) {\n    printPage();\n  }\n  \n  dirty = 1;\n  output[currPos.first][currPos.second++] = c;\n}\n\nvoid nextLine() {\n  currPos.first ++;\n  if(currPos.first >= PLen) {\n    if(dirty) printPage();\n    currColumn ++;\n    currPos.first = 0;\n  }\n  currPos.second = currColumn * Width + CSpace * currColumn;\n}\n\nvoid solve() {\n  \n  output.clear();\n  output.resize(PLen);\n  dirty = 0;\n  \n  N = PLen, M = Width * CNum + CSpace * (CNum - 1);\n  \n  rep(i, N) output[i] = string(M, '.');\n\n  currColumn = 0;\n  currPos = {0, 0};\n  \n  rep(i, lines.size()) {    \n    int LLen = lines[i].size();\n    dirty = 1;\n    rep(j, LLen) {\n      print(lines[i][j]);\n    }\n    nextLine();\n  }\n  \n  if(dirty) printPage();\n  cout << \"?\" << endl;\n}\n\nint main() {\n\n  while(1) {\n    \n    lines.clear();    \n    cin >> PLen >> CNum >> Width >> CSpace; cin.ignore();\n\n    if(PLen == 0) break;\n    \n    for(int i=0;; i++) {\n      string in;\n      getline(cin, in);\n      if(in == \"?\") break;\n      else {\n\tlines.push_back(in);\n      }\n    }\n    \n    solve();\n    \n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<(int)b;i++)\n#define rep(i,n) REP(i,0,n)\n\nint PLen, CNum, Width, CSpace;\nvector<string> lines;\n\nint currColumn;\npair<int, int> currPos;\nint N, M;\nvector<string> output;\nbool dirty;\n\nvoid printPage() {\n  rep(i, N) cout << output[i] << endl;\n  cout << \"#\" << endl;\n  fill(output.begin(), output.end(), string(M, '.'));\n  currColumn = 0;\n  currPos = {0, 0};\n  dirty = 0;\n}\n  \nvoid print(char c) {\n  if(currPos.second >= (currColumn * Width + CSpace * currColumn) + Width) {\n    currPos.first ++;\n    if(currPos.first >= PLen) {\n      currPos.first = 0;\n      currColumn ++;\n    }\n    currPos.second = currColumn * Width + CSpace * currColumn;\n  }\n    \n  if(currColumn >= CNum) {\n    printPage();\n  }\n  \n  dirty = 1;\n  output[currPos.first][currPos.second++] = c;\n}\n\nvoid nextLine() {\n  currPos.first ++;\n  if(currPos.first >= PLen) {\n    if(dirty) printPage();\n    currColumn ++;\n    currPos.first = 0;\n  }\n  currPos.second = currColumn * Width + CSpace * currColumn;\n}\n\nvoid solve() {\n  \n  output.clear();\n  output.resize(PLen);\n  dirty = 1;\n  \n  N = PLen, M = Width * CNum + CSpace * (CNum - 1);\n  \n  rep(i, N) output[i] = string(M, '.');\n\n  currColumn = 0;\n  currPos = {0, 0};\n  \n  rep(i, lines.size()) {    \n    int LLen = lines[i].size();\n    dirty = 1;\n    rep(j, LLen) {\n      print(lines[i][j]);\n    }\n    nextLine();\n  }\n  \n  if(dirty) printPage();\n  cout << \"?\" << endl;\n}\n\nint main() {\n\n  while(1) {\n    \n    lines.clear();    \n    cin >> PLen >> CNum >> Width >> CSpace; cin.ignore();\n\n    if(PLen == 0) break;\n    \n    for(int i=0;; i++) {\n      string in;\n      getline(cin, in);\n      if(in == \"?\") break;\n      else {\n\tlines.push_back(in);\n      }\n    }\n    \n    solve();\n    \n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int pl,cn,wi,cs;\n    while(cin>>pl,pl){\n        cin>>cn>>wi>>cs;\n        vector<string> vs,ans;\n        string s;\n        cin.ignore();\n        while(getline(cin,s),s!=\"?\"){\n            if(s.size()==0) vs.pb(string(wi,'.'));\n            else if(s.size()<=wi){\n                while(s.size()%wi!=0) s+='.';\n                vs.pb(s);\n            }\n            else{\n                int curl=0;\n                while(s.size()-curl>=wi){\n                    vs.pb(s.substr(curl,wi));\n                    curl+=wi;\n                }\n                if(curl!=s.size()){\n                    string ls=s.substr(curl);\n                    while(ls.size()%wi!=0) ls+='.';\n                    vs.pb(ls);\n                }\n            }\n        }\n        int nump=(vs.size()-1)/(cn*pl)+1;\n        string sp(cs,'.');\n        string pad(wi,'.');\n        rep(k,nump){\n            rep(i,cn){\n                rep(j,pl){\n                    if(vs.size()>k*pl*cn+(j+i*pl)){\n                        if(i==0) ans.pb(vs[k*pl*cn+(j+i*pl)]);\n                        else ans[k*pl+j+k]+=sp+vs[k*pl*cn+(j+i*pl)];\n                    }\n                    else{\n                        if(i==0) ans.pb(pad);\n                        else ans[k*pl+j+k]+=sp+pad;\n                    }\n                }\n            }\n            ans.pb(\"#\");\n        }\n        ans.pb(\"?\");\n        rep(i,ans.size()) cout<<ans[i]<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n   \ntypedef long long int64;\nconst int INF = 1 << 30;\n\nint main(){\n  int plen, cnum, width, cspace;\n  string str;\n\n  while(cin >> plen, plen){\n    cin >> cnum;\n    cin >> width;\n    cin >> cspace;\n\n    vector< string > buffer;\n    cin.ignore();\n    while(getline(cin, str), str != \"?\"){\n      if(str.empty()){\n        buffer.push_back(\"\");\n      } else {\n        for(int i = 0; i < str.size(); i += width){\n          buffer.push_back( str.substr( i, width));\n        }\n      }\n    }\n    while(buffer.size() % (plen * cnum) != 0){\n      buffer.push_back(\"\");\n    }\n    for(int i = 0; i < buffer.size() / (plen * cnum); i++){ //ページ数\n      for(int j = 0; j < plen; j++){ // 行数\n        for(int k = 0; k < cnum; k++){ // 横数\n          int pos = i * plen * cnum + j + plen * k;\n          cout << (k ? string(cspace,'.') : \"\") << buffer[pos] << string(width - buffer[pos].size(), '.');\n        }\n        cout << endl;\n      }\n      cout << \"#\" << endl;\n    }\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint main(){\n    int plen,cnum,width,cspace;\n    while(1){\n        cin>>plen;\n        if(plen==0)\n            break;\n        cin>>cnum>>width>>cspace;\n        string str;\n        getline(cin,str);\n        vector<string> lines;\n        while(getline(cin,str)&&str!=\"?\"){\n            // width¶¸ÂÅÊ¯é\n            if(str==\"\"){\n                string s;\n                for(int i = 0; i < width; i++)\n                    s+='.';\n                lines.push_back(s);\n                continue;\n            }\n            for(int k = 0; k < (str.size()/width)+(str.size()%width==0?0:1); k++){\n                // ÅIsÈçA.Åâ®\n                if(k+1==(str.size()/width)+(str.size()%width==0?0:1)){\n                    string s=str.substr(k*width);\n                    for(int i = s.size(); i < width; i++)\n                        s+='.';\n                    lines.push_back(s);\n                }\n                else\n                    lines.push_back(str.substr(k,width));\n            }\n        }\n        const int onePageLine=plen*cnum;\n        for(int i = 0; i < (lines.size()/onePageLine)+(lines.size()%onePageLine==0?0:1); i++){\n            vector<string> page(plen,\"\");\n            for(int j = 0; j < cnum; j++){\n                for(int k = 0; k < plen; k++){\n                    // àµlinesÌI[ÜÅ«½çA½àÇÁµÈ¢\n                    if(i*onePageLine+j*plen+k<lines.size())\n                        page[k]+=lines[i*onePageLine+j*plen+k];\n                    else{\n                        for(int l = 0; l < width; l++)\n                            page[k]+='.';\n                    }\n                    if(j!=cnum-1){\n                        for(int l = 0; l < cspace; l++)\n                            page[k]+='.';\n                    }\n                }\n            }\n            // print\n            for(int j = 0; j < page.size(); j++)\n                cout<<page[j]<<endl;\n            cout<<\"#\"<<endl;\n        }\n        cout<<'?'<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    while (true) {\n        int plen;\n        cin >> plen;\n        if (plen == 0) {\n            break;\n        }\n        int cnum;\n        cin >> cnum;\n        int width;\n        cin >> width;\n        int cspace;\n        cin >> cspace;\n        vector<string> v;\n        {\n            string s;\n            // ignore newline character after cspace\n            getline(cin, s);\n            while (true) {\n                getline(cin, s);\n                if (s == \"?\") {\n                    break;\n                }\n                v.push_back(s);\n            };\n        }\n        vector<string> columnLines;\n        for (auto&& i : v) {\n            if (i == \"\\n\") {\n                columnLines.emplace_back(width, '.');\n            }\n            else if (i.size() < width) {\n                columnLines.push_back(i + string(width - i.size(), '.'));\n            }\n            else if (i.size() == width) {\n                columnLines.push_back(i);\n            }\n            else {\n                auto t = i;\n                while (true) {\n                    columnLines.push_back(\n                        t.substr(0, static_cast<size_t>(width)));\n                    t = t.substr(static_cast<size_t>(width));\n                    if (t.size() < width) {\n                        break;\n                    }\n                }\n                if (!t.empty()) {\n                    columnLines.push_back(t + string(width - t.size(), '.'));\n                }\n            }\n        }\n        auto emptyLines = columnLines.size() % (plen * cnum);\n        if (emptyLines != 0) {\n            auto s = string(static_cast<size_t>(width), '.');\n            fill_n(back_inserter(columnLines), plen * cnum - emptyLines, s);\n        }\n\n        vector<vector<string>> pages;\n        for (int i = 0; i < columnLines.size() / (plen * cnum); ++i) {\n            vector<string> p;\n            copy_n(begin(columnLines) + i * plen * cnum, plen * cnum,\n                   back_inserter(p));\n            pages.push_back(move(p));\n        }\n\n        for (auto&& page : pages) {\n            for (int i = 0; i < plen; ++i) {\n                stringstream ss;\n                for (int j = 0; j < cnum; ++j) {\n                    if (j != 0) {\n                        ss << string(static_cast<size_t>(cspace), '.');\n                    }\n                    ss << page[i + j * plen];\n                }\n                cout << ss.str() << endl;\n            }\n            cout << '#' << endl;\n        }\n\n        cout << \"?\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nint main()\n{\n    for(;;){\n        int plen, cnum, width, cspace;\n        cin >> plen >> cnum >> width >> cspace;\n        if(plen == 0)\n            return 0;\n        cin.ignore();\n\n        string s;\n        int w = width * cnum + cspace * (cnum-1);\n        for(;;){\n            vector<string> ret(plen, string(w, '.'));\n            bool ng = true;\n            for(int x=0; x<w; x+=width+cspace){\n                for(int y=0; y<plen; ++y){\n                    if(s == \"\")\n                        getline(cin, s);\n                    if(s == \"?\")\n                        break;\n                    ng = false;\n                    string s1;\n                    if(s.size() <= width){\n                        s1 = s;\n                        s = \"\";\n                    }else{\n                        s1 = s.substr(0, width);\n                        s = s.substr(width);\n                    }\n\n                    ret[y].replace(x, s1.size(), s1);\n                }\n            }\n\n            if(!ng){\n                for(int y=0; y<plen; ++y)\n                    cout << ret[y] << endl;\n                cout << '#' << endl;\n            }\n            if(s == \"?\"){\n                cout << '?' << endl;\n                break;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n    int plen, cnum, width, cspace;\n    string line[4096];\n    while(cin>>plen, plen){\n        cin>> cnum >> width >> cspace;\n        int i = 0, j, k, l;\n        string space;\n        space.append(cspace, '.');\n        cin.ignore(256, '\\n');\n        for(i=0;;i++){\n            getline(cin, line[i]);\n            if(line[i] == \"?\") break;\n        }\n        string res[4096];\n        for(j=0, k=0; j<i; j++, k++){\n            for(l=0; l < line[j].size(); l++){\n                res[ k+l/width ].append(1, line[j][l]);\n            }\n            k += (l-1) / width;\n            for(;!l || l % width; l++){\n                res[k].append(1, '.');\n            }\n        }\n        string empty;\n        empty.append(width, '.');\n        for(j = 0;; j++){\n            if( j && j%plen == 0 ){\n                cout << \"#\" << endl;\n                if( j%plen + j/plen*plen*cnum >= k ) break;\n            }\n            for(l = 0; l < cnum; l++){\n                if(l) cout << space;\n                if( j%plen + plen*l + j/plen*plen*cnum < k ){\n                    cout << res[ j%plen + plen*l + j/plen*plen*cnum ];\n                }else{\n                    cout << empty;\n                }\n            }\n            cout<<'\\n';\n        }\n        cout<<\"?\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  char text[plen][cnum*width+(cnum-1)*cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+(cnum-1)*cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  bool update = false;\n  while(true)\n    {\n\n      getline(cin,line);\n      if(line == \"?\")break;\n      update = true;\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\t  printed = false;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t  printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+(cnum-1)*cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n  // cout << \"printed ? \" << printed << endl;\n  if(!update)printed =true;\n  if(!printed)\n    {\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace*(cnum-1))text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef complex<double> P;\nstatic const double EPS = 1e-8;\nstatic const int INF = (int)1e8;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) for (int i=0; i<(int)(n); ++i)\n#define FOREQ(i,k,n) for (int i=(k); i<=(int)(n); ++i)\n#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define FIND(m,w) ((m).find(w)!=(m).end())\n\nint main(void){\n  int height,column,width,space;\n  while(cin>>height>>column>>width>>space){\n    cin.ignore();\n    string line;\n    vector<string> words;\n    while(getline(cin,line)){\n      if(line==\"?\") break;\n      for(int i=0; i==0||i<line.size(); i+=width){\n        string word = line.substr(i,width);\n        while(word.size()!=width)word+=\".\";\n        words.push_back(word);\n      }\n    }\n    string brank;  while(brank.size()<width)brank+=\".\";\n    string spacestr; while(spacestr.size()<space)spacestr+=\".\";\n    bool end = false;\n    int page = 0;\n    while(!end){\n      REP(y,height){\n        string output;\n        REP(x,column){\n          if(x) output+=spacestr;\n          if(page+height*x+y<words.size()) output += words[page+x*height+y];\n          else {\n            output+=brank;\n            end = true;\n          }\n        }\n        cout<<output<<endl;\n      }\n      cout<<\"#\"<<endl;\n      page+=height*column;\n    }\n    cout<<\"?\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint pl,cn,wi,cs,r,c,p;\nchar f[102][52];\n\nvoid init()\n{\n\tr=0; c=0; p=0;\n\tmemset(f,'.',sizeof(f));\n}\n\nvoid output()\n{\n\tfor(int i=0; i<pl; i++)\n\t{\n\t\tfor(int j=0; j<(cn*wi+cs*(cn-1)); j++)\n\t\t\tcout << f[j][i];\n\t\tcout << endl;\n\t}\n\t\n\tcout << \"#\" << endl;\n}\n\nint main()\n{\n\twhile(cin >> pl, pl)\n\t{\n\t \tcin >> cn >> wi >> cs;\n\t\t\n\t\tinit();\n\t\tstring s;\n\t\tcin.ignore();\n\t\twhile(getline(cin, s), s!=\"?\")\n\t\t{\n\t\t\tp=0;\n\t\t\tfor(int i=0; i<s.size(); i++)\n\t\t\t{\n\t\t\t\tif(p==wi)\n\t\t\t\t{\n\t\t\t\t\tr++;\n\t\t\t\t\tp=0;\n\t\t\t\t}\n\t\t\t\tif(r==pl)\n\t\t\t\t{\n\t\t\t\t\tr=0;\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tif(c==cn)\n\t\t\t\t{\n\t\t\t\t\toutput();\n\t\t\t\t\tinit();\n\t\t\t\t}\n\t\t\t\tf[p+c*wi+cs*c][r]=s[i];\n\t\t\t\t\n\t\t\t\tp++;\n\t\t\t}\n\t\t\t\n\t\t\tr++;\n\t\t\tif(r==pl)\n\t\t\t{\n\t\t\t\tr=0;\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tif(c==cn)\n\t\t\t{\n\t\t\t\toutput();\n\t\t\t\tinit();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(c!=0||r!=0||p!=0) output();\n\t\t\n\t\tcout << \"?\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid print(const vector<string> &page) {\n\tfor(const auto &line : page) {\n\t\tcout << line << endl;\n\t}\n\tcout << \"#\" << endl;\n}\n\nint main(){\n\tcin.tie(nullptr);\n\tios::sync_with_stdio(false);\n\n\tfor(int plen, cnum, width, cspace; cin >> plen && plen;) {\n\t\tcin >> cnum >> width >> cspace;\n\t\tcin.ignore();\n\n\t\tconst int len = cnum * width + cspace * (cnum - 1);\n\t\tvector<string> page(plen, string(len, '.'));\n\n\t\tint r = 0, c = 0;\n\t\tfor(string line; getline(cin, line) && line != \"?\";) {\n\t\t\tbool first = true;\n\n\t\t\twhile(first || line.size()) {\n\t\t\t\tstring word;\n\t\t\t\tif(line.size() >= width) {\n\t\t\t\t\tword = line.substr(0, width);\n\t\t\t\t\tline = line.substr(width);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tword = move(line);\n\t\t\t\t\tline = \"\";\n\t\t\t\t}\n\n\t\t\t\tconst int offset = c * (width + cspace);\n\t\t\t\tcopy(word.begin(), word.end(), page[r].begin() + offset);\n\n\t\t\t\tif(++r == plen) {\n\t\t\t\t\tr = 0;\n\t\t\t\t\tif(++c == cnum) {\n\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\tprint(page);\n\t\t\t\t\t\tfill(page.begin(), page.end(), string(len, '.'));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t}\n\n\t\tif(any_of(page[0].begin(), page[0].end(), [](char c) { return c != '.';})) {\n\t\t\tprint(page);\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\nint main()\n{\n  int plen,cnum,width,cspace;\n  string s;\n  string blank,space;\n  vector<string>list;\n  while(cin>>plen>>cnum>>width>>cspace,plen){\n    blank=space=\"\";\n    for(int i=0;i<width;i++)blank+=\".\";\n    for(int i=0;i<cspace;i++)space+=\".\";\n    list.clear();\n    getline(cin,s);\n    while(getline(cin,s),s!=\"?\"){\n      if(s.length()==0)s=\".\";\n      while(s.length()%width != 0)s+=\".\";\n      for(int i=0;i+width<=s.length();i+=width)\n\tlist.push_back(s.substr(i,width));\n    }\n    while(list.size()%(plen*cnum) != 0)list.push_back(blank);\n\n    int line=0,column=0,page=0;\n    while(plen*cnum*page < list.size()){\n      s=\"\";\n      for(column=0;column<cnum;column++){\n\tif(column!=0)s+=space;\n\tint i = line + column*plen + page*plen*cnum;\n\tif(i <= list.size())s+=list[i];\n\telse s+=blank;\n      }\n      cout<<s<<endl;\n      line++;\n      if(line >= plen){\n\tline=0;\n\tpage++;\n\tputs(\"#\");\n      }\n    }\n    puts(\"?\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  char text[plen][cnum*width+(cnum-1)*cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+(cnum-1)*cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  while(true)\n    {\n      getline(cin,line);\n      if(line == \"?\")break;\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\t  printed = false;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t  printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+(cnum-1)*cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+(cnum-1)*cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n  // cout << \"printed ? \" << printed << endl;\n  if(!printed)\n    {\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace*(cnum-1))\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace*(cnum-1))text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<string>\n#include<vector>\n#include<iostream>\n\n#define\tpb\tpush_back\n\nusing namespace std;\n\nint main(){\n\tfor(int plen,cnum,w,cspace;cin>>plen>>cnum>>w>>cspace,plen;){\n\t\tcin.ignore();\n\n\t\tvector<string> mul;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tint len=s.length();\n\t\t\tif(len==0)\tmul.pb(\"\");\n\t\t\tfor(int i=0;i<len;i+=w){\n\t\t\t\tif(w<len-i)\tmul.pb(s.substr(i,w));\n\t\t\t\telse\t\tmul.pb(s.substr(i));\n\t\t\t}\n\t\t}\n\n\t\tint m=mul.size();\n\t\tint pages=(m+(plen*cnum-1))/(plen*cnum);\n\t\tfor(int i=0;i<pages;i++){\n\t\t\tint offset=i*plen*cnum;\n\t\t\tvector<string> pg(plen);\n\t\t\tif(i==pages-1){\n\t\t\t\tfor(int j=offset;j<m;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t\tfor(int j=m;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=string(w,'.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j=offset;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tfor(int j=0;j<cnum;j++){\n\t\t\t\t\tif(j>0)\tcout<<string(cspace,'.');\n\t\t\t\t\tcout<<pg[i].substr(w*j,w);\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\n\t\tcout<<'?'<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cassert>\n\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint plen,cnum,width,cspace;\n\nvoid compute()\n{\n  char text[plen][cnum*width+cspace];  \n  string line;\n  int x,y,r;\n  x = y = r = 0;\n  rep(i,plen)rep(j,cnum*width+cspace)text[i][j] = '.';\n  cin.ignore();\n  bool printed = false;\n  while(true)\n    {\n      getline(cin,line);\n      if(line == \"?\")break;\n      if(printed)printed = false;\n      //cout << \"line : \" << line << endl;\n\n      if(line == \"\")\n\t{\n\t  x = 0;\n\t  y++;\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t    }\n\t  continue;\n\t}\n      rep(i,line.size())\n\t{\n\n\t  if(x >= width)\n\t    {\n\t      x = 0;\n\t      y++;\n\t    }\n\t  if(y >= plen)\n\t    {\n\t      y = 0;\n\t      r++;\n\t    }\n\t  if(r >= cnum)\n\t    {\n\t      printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t      cout << \"#\" << endl;\n\t    }\n\n\t  text[y][x+r*(width+cspace)] = line[i];\n\t  x++;\n\t  printed = false;\n\n\t}\n      x = 0;\n      y++;\n      if(y >= plen)\n\t{\n\t  y = 0;\n\t  r++;\n\t}\n      if(r >= cnum)\n\t{\n\t  printed = true;\n\t      x = y = r = 0;\n\t      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n\t}\n      // cout << \"x,y,r = \" << x << \",\" << y << \",\" << r<< endl;\n    }\n  // cout << \"printed ? \" << printed << endl;\n  if(!printed)\n    {\n      rep(j,plen)\n\t\t{\n\t\t  rep(k,width*cnum+cspace)\n\t\t    {\n\t\t      cout << text[j][k];\n\t\t    }\n\t\t  cout << endl;\n\t\t}\n\t      cout << \"#\" << endl;\n\t      rep(j,plen)rep(k,width*cnum+cspace)text[j][k] = '.';\n    }\n  cout << \"?\" << endl;\n}\n\nint main()\n{\n  while(cin >> plen,plen)\n    {\n      cin >> cnum >> width >> cspace;\n      compute();\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint main(){\n    int plen,cnum,width,cspace;\n    while(1){\n        cin>>plen;\n        if(plen==0)\n            break;\n        cin>>cnum>>width>>cspace;\n        string str;\n        getline(cin,str);\n        vector<string> lines;\n        while(getline(cin,str)&&str!=\"?\"){\n            // width¶¸ÂÅÊ¯é\n            if(str==\"\"){\n                string s;\n                for(int i = 0; i < width; i++)\n                    s+='.';\n                lines.push_back(s);\n                continue;\n            }\n            for(int k = 0; k < (str.size()/width)+(str.size()%width==0?0:1); k++){\n                // ÅIsÈçA.Åâ®\n                if(k+1==(str.size()/width)+(str.size()%width==0?0:1)){\n                    string s=str.substr(k*width);\n                    for(int i = s.size(); i < width; i++)\n                        s+='.';\n                    lines.push_back(s);\n                }\n                else\n                    lines.push_back(str.substr(k*width,width));\n            }\n        }\n        const int onePageLine=plen*cnum;\n        for(int i = 0; i < (lines.size()/onePageLine)+(lines.size()%onePageLine==0?0:1); i++){\n            vector<string> page(plen,\"\");\n            bool isDotOnly=true;\n            for(int j = 0; j < cnum; j++){\n                for(int k = 0; k < plen; k++){\n                    // àµlinesÌI[ÜÅ«½çA½àÇÁµÈ¢\n                    if(i*onePageLine+j*plen+k<lines.size())\n                        page[k]+=lines[i*onePageLine+j*plen+k];\n                    else{\n                        for(int l = 0; l < width; l++)\n                            page[k]+='.';\n                    }\n                    if(j!=cnum-1){\n                        for(int l = 0; l < cspace; l++)\n                            page[k]+='.';\n                    }\n                }\n            }\n            // .µ©È¢y[WÍóµÈ¢\n            for(int j = 0; j < page.size(); j++){\n                for(int k = 0; k < page[j].size(); k++){\n                    if(page[j][k]!='.')\n                        isDotOnly=false;\n                }\n            }\n            if(!isDotOnly){\n                // print\n                for(int j = 0; j < page.size(); j++)\n                    cout<<page[j]<<endl;\n                cout<<\"#\"<<endl;\n            }\n        }\n        cout<<'?'<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nstring buf[101];\n\nint main() {\n  string input;\n  vector<string> vs;\n  int plen,cnum,width,cspace;\n  while(cin>>plen, plen) {\n    cin>>cnum>>width>>cspace;\n    cin.ignore();\n    vs.clear();\n    while(true) {\n      getline(cin, input);\n      if(input == \"?\") break;\n      vs.push_back(input);\n    }\n\n    vector<string> normalized;\n    for(int i=0; i<vs.size(); ++i) {\n      while(vs[i].length() > width) {\n        normalized.push_back(vs[i].substr(0,width));\n        vs[i] = vs[i].substr(width);\n      }\n      normalized.push_back(vs[i]);\n    }\n\n    for(int i=0; i<normalized.size(); ++i) {\n      if(normalized[i].length() < width)\n        normalized[i] += string(width-normalized[i].length(), '.');\n    }\n\n    if(normalized.size()%(plen*cnum) > 0) {\n      for(int i=0; i<normalized.size()%(plen*cnum); ++i) {\n        normalized.push_back(string(width, '.'));\n      }\n    }\n\n    vector<vector<string> > pages;\n    for(int i=0; i<normalized.size(); i += plen * cnum) {\n      vector<string> op;\n      for(int j=0; j<plen*cnum; ++j)\n        op.push_back(normalized[i+j]);\n      pages.push_back(op);\n    }\n\n    for(int i=0; i<pages.size(); ++i) {\n      for(int j=0; j<100; ++j) buf[j] = \"\";\n      for(int j=0; j<pages[i].size(); ++j) {\n        buf[j%plen] += (j>=plen?\".\":\"\") + pages[i][j];\n      }\n      for(int i=0; i<plen; ++i) cout<<buf[i]<<endl;\n      cout<<\"#\"<<endl;\n    }\n    cout<<\"?\"<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nint main() {\n  int plen;\n  while(cin >> plen, plen) {\n    int cnum, width, cspace;\n    cin >> cnum >> width >> cspace;\n    vector<string> res(plen);\n    string str;\n    int cnt = 0;\n    cin.ignore();\n    while(getline(cin,str), str!=\"?\") {\n      int pos = 0;\n      while(pos == 0 && str.size() == 0 || pos < str.size()) {\n        if (cnt >= plen) {\n          res[cnt%plen] += string(cspace, '.');\n        }\n        string tmp = str.substr(pos, width);\n        res[cnt%plen] += tmp + string(width-tmp.size(), '.');\n        cnt++;\n        pos += width;\n        if (cnt >= plen * cnum) {\n          REP(i,plen) {\n            cout << res[i] << endl;\n          }\n          cout << \"#\" << endl;\n          res = vector<string>(plen);\n          cnt = 0;\n        }\n      }\n    }\n    if (cnt) {\n      while(cnt < plen * cnum) {\n        if (cnt >= plen) {\n          res[cnt%plen] += string(cspace, '.');\n        }\n        res[cnt%plen] += string(width, '.');\n        cnt++;\n      }\n      REP(i,plen)\n        cout << res[i] << endl;\n      cout << \"#\" << endl;\n    }\n    cout << \"?\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <deque>\nusing namespace std;\n\nint pl,cn,w,cs;\ndeque<string> str;\nstring fie[1001][101];\nint main(void){\n\twhile(1){\n\t\tscanf(\"%d%*c\",&pl);\n\t\tif(pl==0)break;\n\t\tscanf(\"%d%*c\",&cn);\n\t\tscanf(\"%d%*c\",&w);\n\t\tscanf(\"%d%*c\",&cs);\n\t\tfor(int i=0;i<=1000;i++){\n\t\t\tfor(int j=0;j<=100;j++)fie[i][j].clear();\n\t\t}\n\t\twhile(1){\n\t\t\tstring str2;\n\t\t\tgetline(cin,str2);\n\t\t\tif(str2==\"?\")break;\n\t\t\tstr.push_back(str2);\n\t\t}\n\t\tint np=0,cnum=0,nx=0;\n\t\twhile(str.size()){\n\t\t\tstring s=str[0];\n\t\t\tstr.pop_front();\n\t\t\tif(s.size()>w){\n\t\t\t\tstring str3=s.substr(w);\n\t\t\t\ts=s.substr(0,w);\n\t\t\t\tstr.push_front(str3);\n\t\t\t}\n\t\t\twhile(s.size()<w)s+='.';\n\t\t\tfie[np][nx]+=s;\n\t\t\tif(cnum+1<cn){\n\t\t\t\tfor(int i=0;i<cs;i++){\n\t\t\t\t\tfie[np][nx]+='.';\n\t\t\t\t}\n\t\t\t}\n\t\t\tnx++;\n\t\t\tif(nx==pl){\n\t\t\t\tnx=0;\n\t\t\t\tcnum++;\n\t\t\t}\n\t\t\tif(cnum==cn){\n\t\t\t\tcnum=0;\n\t\t\t\tnp++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=np;i++){\n\t\t\tfor(int j=0;j<pl;j++){\n\t\t\t\twhile(fie[i][j].size()<cn*w+cs*(cn-1))fie[i][j]+='.';\n\t\t\t\tcout << fie[i][j] << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint plen,clen,width,cspace;\nstring fix(string name){\n\twhile( name.size() < width ) name += \".\";\n\treturn name;\n}\nint main(){\n\twhile(cin >> plen && plen){\n\t\tcin >> clen >> width >> cspace;\n\t\tstring s;\n\t\tgetline(cin,s);\n\t\tvector<string> ad;\n\t\twhile( getline(cin,s) && s[0] != '?' ){\n\t\t\tif( s.size() && s[s.size()-1] == '\\r' ) s = s.substr(0,s.size()-1);\n\t\t\tif(s==\"\")ad.push_back(\"\");\n\t\t\twhile(s.size()){\n\t\t\t\tad.push_back(s.substr(0,min<int>(width,s.size())));\n\t\t\t\t\n\t\t\t\ts = s.substr(min<int>(width,s.size()));\n\t\t\t}\n\t\t}\n\t\tvector< vector< vector<string> > > output( (ad.size()+plen*clen-1) / (plen*clen) , vector< vector<string> > (plen,vector<string>(clen)));\n\t\tfor(int i = 0 ; i < ad.size() ; i++){\n\t\t\tint p = i/(plen*clen);\n\t\t\tint x = i / plen % clen;\n\t\t\tint y = i % plen;\n\t\t\toutput[p][y][x] = ad[i];\n\t\t}\n\t\tfor(int i = 0 ; i < output.size() ; i++){\n\t\t\tfor(int j = 0 ; j < output[i].size() ; j++){\n\t\t\t\tfor(int k = 0 ; k < output[i][j].size() ; k++) cout << (k?string(cspace,'.'):\"\") << fix(output[i][j][k]);\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <deque>\nusing namespace std;\n\nint pl,cn,w,cs;\ndeque<string> str;\nstring fie[1001][101];\nint main(void){\n\twhile(1){\n\t\tscanf(\"%d%*c\",&pl);\n\t\tif(pl==0)break;\n\t\tscanf(\"%d%*c\",&cn);\n\t\tscanf(\"%d%*c\",&w);\n\t\tscanf(\"%d%*c\",&cs);\n\t\tfor(int i=0;i<=1000;i++){\n\t\t\tfor(int j=0;j<=100;j++)fie[i][j].clear();\n\t\t}\n\t\twhile(1){\n\t\t\tstring str2;\n\t\t\tgetline(cin,str2);\n\t\t\tif(str2==\"?\")break;\n\t\t\tstr.push_back(str2);\n\t\t}\n\t\tint np=0,nn=-1,cnum=0,nx=0;\n\t\twhile(str.size()){\n\t\t\tstring s=str[0];\n\t\t\tstr.pop_front();\n\t\t\tnn=np;\n\t\t\tif(s.size()>w){\n\t\t\t\tstring str3=s.substr(w);\n\t\t\t\ts=s.substr(0,w);\n\t\t\t\tstr.push_front(str3);\n\t\t\t}\n\t\t\twhile(s.size()<w)s+='.';\n\t\t\tfie[np][nx]+=s;\n\t\t\tif(cnum+1<cn){\n\t\t\t\tfor(int i=0;i<cs;i++){\n\t\t\t\t\tfie[np][nx]+='.';\n\t\t\t\t}\n\t\t\t}\n\t\t\tnx++;\n\t\t\tif(nx==pl){\n\t\t\t\tnx=0;\n\t\t\t\tcnum++;\n\t\t\t}\n\t\t\tif(cnum==cn){\n\t\t\t\tcnum=0;\n\t\t\t\tnp++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=nn;i++){\n\t\t\tfor(int j=0;j<pl;j++){\n\t\t\t\twhile(fie[i][j].size()<cn*w+cs*(cn-1))fie[i][j]+='.';\n\t\t\t\tcout << fie[i][j] << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#define DOT '.'\n\nusing namespace std;\n\nint h, w, cl, sp;\nvector<string> data;\n\nvoid insert(const string& s){\n  int i=0;\n  while(i+w<s.size()){\n    data.push_back(s.substr(i,w));\n    i+=w;\n  }\n  data.push_back(s.substr(i) + string(i+w-s.size(),DOT));\n}\n\nvoid print(){\n  const string SP1(w,DOT), SP2(sp,DOT);\n  int tmp=data.size();\n  if(tmp%(h*cl)){\n    for(int i=0; i<h*cl-tmp%(h*cl); ++i) data.push_back(SP1);\n  }\n  for(int k=0; k<data.size()/(h*cl); ++k){\n    for(int i=0; i<h; ++i){\n      for(int j=0; j<cl; ++j){\n\tcout << data[i+h*j+h*cl*k] << (j==cl-1 ? \"\\n\" : SP2);\n      }\n    }\n    printf(\"#\\n\");\n  }\n  printf(\"?\\n\");\n}\n\nint main(){\n  string s;\n  bool end=false;\n  while(1){\n    data.clear();\n    for(int i=0; ; ++i){\n      getline(cin, s);\n      if(i<4){\n\tint x = atoi(s.c_str());\n\tif(i==0 && x==0){ end=true; break; }\n\tif(i==0) h=x;\n\tif(i==1) cl=x;\n\tif(i==2) w=x;\n\tif(i==3) sp=x;\n\tcontinue;\n      }\n      if(s==\"?\") break;\n      insert(s);\n    }\n    if(end) break;\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <deque>\nusing namespace std;\n\nint pl,cn,w,cs;\ndeque<string> str;\nstring fie[51][101];\nint main(void){\n\twhile(1){\n\t\tscanf(\"%d%*c\",&pl);\n\t\tif(pl==0)break;\n\t\tscanf(\"%d%*c\",&cn);\n\t\tscanf(\"%d%*c\",&w);\n\t\tscanf(\"%d%*c\",&cs);\n\t\tfor(int i=0;i<=50;i++){\n\t\t\tfor(int j=0;j<=100;j++)fie[i][j].clear();\n\t\t}\n\t\twhile(1){\n\t\t\tstring str2;\n\t\t\tgetline(cin,str2);\n\t\t\tif(str2==\"?\")break;\n\t\t\tstr.push_back(str2);\n\t\t}\n\t\tint np=0,cnum=0,nx=0;\n\t\twhile(str.size()){\n\t\t\tstring s=str[0];\n\t\t\tstr.pop_front();\n\t\t\tif(s.size()>w){\n\t\t\t\tstring str3=s.substr(w);\n\t\t\t\ts=s.substr(0,w);\n\t\t\t\tstr.push_front(str3);\n\t\t\t}\n\t\t\twhile(s.size()<w)s+='.';\n\t\t\tfie[np][nx]+=s;\n\t\t\tif(cnum+1<cn){\n\t\t\t\tfor(int i=0;i<cs;i++){\n\t\t\t\t\tfie[np][nx]+='.';\n\t\t\t\t}\n\t\t\t}\n\t\t\tnx++;\n\t\t\tif(nx==pl){\n\t\t\t\tnx=0;\n\t\t\t\tcnum++;\n\t\t\t}\n\t\t\tif(cnum==cn){\n\t\t\t\tcnum=0;\n\t\t\t\tnp++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=np;i++){\n\t\t\tfor(int j=0;j<pl;j++){\n\t\t\t\twhile(fie[i][j].size()<cn*w+cs*(cn-1))fie[i][j]+='.';\n\t\t\t\tcout << fie[i][j] << endl;\n\t\t\t}\n\t\t\tcout << \"#\" << endl;\n\t\t}\n\t\tcout << \"?\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<string>\n#include<vector>\n#include<iostream>\n\n#define\tpb\tpush_back\n\nusing namespace std;\n\nint main(){\n\tfor(int plen;cin>>plen,plen;){\n\t\tint cnum,w,cspace;\n\t\tcin>>cnum>>w>>cspace;\n\t\tcin.ignore();\n\n\t\tvector<string> mul;\n\t\tfor(string s;getline(cin,s),s!=\"?\";){\n\t\t\tint len=s.length();\n\t\t\tif(len==0)\tmul.pb(\"\");\n\t\t\tfor(int i=0;i<len;i+=w){\n\t\t\t\tif(w<len-i)\tmul.pb(s.substr(i,w));\n\t\t\t\telse\t\tmul.pb(s.substr(i));\n\t\t\t}\n\t\t}\n//for(int i=0;i<mul.size();i++)\tcout<<mul[i]<<endl;\n\t\tint m=mul.size();\n\t\tint pages=(m+(plen*cnum-1))/(plen*cnum);\t// ceiling\n\t\tfor(int i=0;i<pages;i++){\n\t\t\tint offset=i*plen*cnum;\n\t\t\tvector<string> pg(plen);\n\t\t\tif(i==pages-1){\t// last page\n\t\t\t\tfor(int j=offset;j<m;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t\tfor(int j=m;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=string(w,'.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j=offset;j<offset+plen*cnum;j++){\n\t\t\t\t\tpg[j%plen]+=mul[j];\n\t\t\t\t\tint padding=w-mul[j].length();\n\t\t\t\t\tpg[j%plen]+=string(padding,'.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i=0;i<plen;i++){\n\t\t\t\tfor(int j=0;j<cnum;j++){\n\t\t\t\t\tif(j>0)\tcout<<string(cspace,'.');\n\t\t\t\t\tcout<<pg[i].substr(w*j,w);\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t\tcout<<'#'<<endl;\n\t\t}\n\n\t\tcout<<'?'<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nint P_LEN,C_NUM,WIDTH,C_SPACE;\nchar buf[1020];\nchar*** table;\n\nvoid my_strcpy(char* to,char* str){\n\tfor(int i=0;str[i] != '\\0';i++){\n\t\tto[i] = str[i];\n\t\tto[i+1] = '\\0';\n\t}\n}\n\nint getNUM(){\n\n\tint ret = 0;\n\tfor(int i = 0; buf[i] != '\\0'; i++){\n\t\tret = 10*ret + (buf[i] - '0');\n\t}\n\n\treturn ret;\n}\n\nvoid func(){\n\n\tP_LEN = getNUM();\n\n\tscanf(\"%s\",buf);\n\tC_NUM = getNUM();\n\n\tscanf(\"%s\",buf);\n\tWIDTH = getNUM();\n\n\tscanf(\"%s\",buf);\n\tC_SPACE = getNUM();\n\n\tchar work[55];\n\n\tint row = 0,col = 0,buf_index,work_index,index;\n\n\tgetchar();\n\tstring S;\n\n\twhile(true){\n\t\tgetline(cin,S);\n\t\tif(S[0] == '?')break;\n\n\t\tif(S == \"\"){ //?????????\n\t\t\tfor(int a = 0; a < WIDTH; a++){\n\t\t\t\twork[a] = '.';\n\t\t\t}\n\t\t\tif(col < C_NUM-1){\n\t\t\t\tfor(int a = 0; a < C_SPACE; a++){\n\t\t\t\t\twork[WIDTH+a] = '.';\n\t\t\t\t}\n\t\t\t\twork[WIDTH+C_SPACE] = '\\0';\n\t\t\t}else{\n\t\t\t\twork[WIDTH] = '\\0';\n\t\t\t}\n\n\t\t\tmy_strcpy(table[row][col],work);\n\n\t\t\trow++;\n\t\t\tif(row == P_LEN){\n\t\t\t\trow = 0;\n\t\t\t\tcol++;\n\n\t\t\t\tif(col == C_NUM){\n\n\t\t\t\t\tfor(int a = 0; a < P_LEN; a++){\n\t\t\t\t\t\tfor(int k = 0; k < C_NUM;k++){\n\t\t\t\t\t\t\tprintf(\"%s\",table[a][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprintf(\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tprintf(\"#\\n\");\n\t\t\t\t\tcol = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\n\t\t\tfor(index = 0; index < S.length();index++){\n\t\t\t\tbuf[index] = S[index];\n\t\t\t}\n\t\t\tbuf[index] = '\\0';\n\n\t\t\tbuf_index = 0;\n\t\t\twhile(buf[buf_index] != '\\0'){\n\n\t\t\t\tfor(work_index = 0; work_index < WIDTH && buf[buf_index] != '\\0';work_index++,buf_index++){\n\t\t\t\t\twork[work_index] = buf[buf_index];\n\t\t\t\t}\n\n\t\t\t\twhile(work_index < WIDTH){\n\t\t\t\t\twork[work_index] = '.';\n\t\t\t\t\twork_index++;\n\t\t\t\t}\n\n\t\t\t\tif(col < C_NUM-1){\n\t\t\t\t\tfor(int i = 0; i < C_SPACE; i++){\n\t\t\t\t\t\twork[work_index++] = '.';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twork[work_index] = '\\0';\n\t\t\t\tmy_strcpy(table[row][col],work);\n\n\t\t\t\trow++;\n\t\t\t\tif(row == P_LEN){\n\t\t\t\t\trow = 0;\n\t\t\t\t\tcol++;\n\n\t\t\t\t\tif(col == C_NUM){\n\n\t\t\t\t\t\tfor(int a = 0; a < P_LEN; a++){\n\t\t\t\t\t\t\tfor(int k = 0; k < C_NUM;k++){\n\t\t\t\t\t\t\t\tprintf(\"%s\",table[a][k]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprintf(\"\\n\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprintf(\"#\\n\");\n\t\t\t\t\t\tcol = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(row == 0 && col == 0){\n\t\t//Do nothing\n\t}else{\n\t\twhile(row != 0 || col != 0){\n\t\t\tfor(int a = 0; a < WIDTH; a++){\n\t\t\t\twork[a] = '.';\n\t\t\t}\n\t\t\tif(col < C_NUM-1){\n\t\t\t\tfor(int a = 0; a < C_SPACE; a++){\n\t\t\t\t\twork[WIDTH+a] = '.';\n\t\t\t\t}\n\t\t\t\twork[WIDTH+C_SPACE] = '\\0';\n\t\t\t}else{\n\t\t\t\twork[WIDTH] = '\\0';\n\t\t\t}\n\n\t\t\tmy_strcpy(table[row][col],work);\n\n\t\t\trow++;\n\t\t\tif(row == P_LEN){\n\t\t\t\trow = 0;\n\t\t\t\tcol++;\n\n\t\t\t\tif(col == C_NUM){\n\n\t\t\t\t\tfor(int a = 0; a < P_LEN; a++){\n\t\t\t\t\t\tfor(int k = 0; k < C_NUM;k++){\n\t\t\t\t\t\t\tprintf(\"%s\",table[a][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprintf(\"\\n\");\n\t\t\t\t\t}\n\n\t\t\t\t\tprintf(\"#\\n\");\n\t\t\t\t\tcol = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"?\\n\");\n\n}\n\nint main(){\n\n\ttable = new char**[105];\n\tfor(int i = 0; i < 105; i++){\n\t\ttable[i] = new char*[55];\n\t\tfor(int k = 0; k < 55; k++)table[i][k] = new char[55];\n\t}\n\n\twhile(true){\n\t\tscanf(\"%s\",buf);\n\t\tif(buf[0] == '0')break;\n\n\t\tfunc();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint page_length;\nint dan_num;\nint onedan_width;\nint space_width;\nchar line_buffer[2000];\n\nchar buffer[100][100];\nint buffer_x,buffer_y;\nint buffer_pos;\nint did_flush_buffer;\nint did_new_line;\n\nvoid buffer_init(void) {\n\tint i,j,length;\n\tbuffer_x=0;\n\tbuffer_y=0;\n\tbuffer_pos=0;\n\tmemset(buffer,0,sizeof(buffer));\n\tlength=onedan_width*dan_num+space_width*(dan_num-1);\n\tfor(i=0;i<page_length;i++) {\n\t\tfor(j=0;j<length;j++) {\n\t\t\tbuffer[i][j]='.';\n\t\t}\n\t}\n\tdid_flush_buffer=0;\n\tdid_new_line=0;\n}\n\nvoid flush_buffer(void) {\n\tint i;\n\tif(!did_flush_buffer) {\n\t\tfor(i=0;i<page_length;i++)puts(buffer[i]);\n\t\tputs(\"#\");\n\t} else {did_flush_buffer=0;return;}\n\tbuffer_init();\n}\n\nvoid new_line(void) {\n\tif(did_new_line){did_new_line=0;return;}\n\tbuffer_pos=0;\n\tbuffer_y++;\n\tif(buffer_y>=page_length) {\n\t\tbuffer_y=0;\n\t\tbuffer_x++;\n\t\tif(buffer_x>=dan_num) {\n\t\t\tflush_buffer();\n\t\t\tdid_flush_buffer=1;\n\t\t}\n\t}\n}\n\nvoid insert_one_char(char c) {\n\tdid_new_line=0;\n\tdid_flush_buffer=0;\n\tbuffer[buffer_y]\n\t\t[(onedan_width+space_width)*buffer_x+buffer_pos]=c;\n\tbuffer_pos++;\n\tif(buffer_pos>=onedan_width) {\n\t\tnew_line();\n\t\tdid_new_line=1;\n\t}\n}\n\nint main(void) {\n\tchar* cptr;\n\twhile(1) {\n\t\tscanf(\"%d\",&page_length);\n\t\tif(page_length==0)break;\n\t\tscanf(\"%d\",&dan_num);\n\t\tscanf(\"%d\",&onedan_width);\n\t\tscanf(\"%d\",&space_width);\n\t\tbuffer_init();\n\t\tfgets(line_buffer,sizeof(line_buffer),stdin);\n\t\twhile(1) {\n\t\t\tfgets(line_buffer,sizeof(line_buffer),stdin);\n\t\t\tcptr=strchr(line_buffer,'\\n');\n\t\t\tif(cptr)*cptr=0;\n\t\t\tif(line_buffer[0]=='?' && line_buffer[1]==0)break;\n\t\t\tfor(cptr=line_buffer;*cptr;cptr++)insert_one_char(*cptr);\n\t\t\tnew_line();\n\t\t}\n\t\tflush_buffer();\n\t\tputs(\"?\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// Aizu 1115: Multi-column List\n// 2017.9.15 bal4u@uu\n\n#include <stdio.h>\n#include <stdlib.h>\n\nchar buf[505][1005]; int len;\nchar pag[102][52];\n\nstatic int ln, ii, ff;\nint nxchar()   // return -1: eol, -2: null line, -3: eof\n{\n\tint c;\n\n\tif (len == 0 || ff) return -3;\n\tc = buf[ln][ii];\n\tif (c < ' ') {\n\t\tif (++ln >= len) ff = 1;\n\t\tif (ii == 0) return -2;\n\t\tii = 0;\n\t\treturn -1;\n\t} else ii++;\n\treturn c;\n}\n\nint main()\n{\n\tint p, n, w, s, pw;\n\tint i, j, r, c, cc, m, f;\n\tchar t[15];\n\n\twhile (1) {\n\t\tfgets(t, 10, stdin); p = atoi(t); if (!p) break;\n\t\tfgets(t, 10, stdin); n = atoi(t);\n\t\tfgets(t, 10, stdin); w = atoi(t);\n\t\tfgets(t, 10, stdin); s = atoi(t);\n\t\tpw = n*w + s*(n-1);\n\t\tfor (len = 0; ; len++) {\n\t\t\tfgets(buf[len], 1002, stdin);\n\t\t\tif (buf[len][0] == '?') break;\n\t\t}\n\t\tfor (ln = ii = ff = 0, f = 0; ; ) {\n\t\t\tfor (r = 0; r < p; r++) {\n\t\t\t\tfor (c = 0; c < pw; c++) pag[r][c] = '.';\n\t\t\t\tpag[r][c] = 0;\n\t\t\t}\n\t\t\tfor (cc = 0, i = 0; i < n; i++, cc += w+s) {\n\t\t\t\tfor (r = 0; r < p; r++) {\n\t\t\t\t\tfor (j = 0; j < w; ) {\n\t\t\t\t\t\tc = cc + j;\n\t\t\t\t\t\tm = nxchar();\n\t\t\t\t\t\tif (m == -1) {\n\t\t\t\t\t\t\tif (j > 0) break; else continue;\n\t\t\t\t\t\t} else if (m == -2) break;\n\t\t\t\t\t\telse if (m == -3) {\tf = 1; goto Done; }\n\t\t\t\t\t\tpag[r][c] = m, j++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\nDone:\t\t\n\t\t\tif (f && i == 0 && r == 0 && j == 0) break;\n\t\t\tfor (r = 0; r < p; r++) puts(pag[r]);\n\t\t\tputs(\"#\");\n\t\t\tif (f) break;\n\t\t}\n\t\tputs(\"?\");\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// Aizu 1115: Multi-column List\n// 2017.9.15 bal4u@uu\n\n#include <stdio.h>\n#include <stdlib.h>\n\nchar buf[1002][1005]; int len;\nchar pag[102][52];\n\nstatic int ln, ii, ff;\nint nxchar()   // return -1: eol, -2: null line, -3: eof\n{\n\tint c;\n\n\tif (ff) return -3;\n\tc = buf[ln][ii];\n\tif (c < ' ') {\n\t\tif (++ln >= len) ff = 1;\n\t\tif (ii == 0) return -2;\n\t\tii = 0;\n\t\treturn -1;\n\t} else ii++;\n\treturn c;\n}\n\nint main()\n{\n\tint p, n, w, s, pw;\n\tint i, j, r, c, cc, m, f;\n\tchar t[15];\n\n\twhile (1) {\n\t\tfgets(t, 10, stdin); p = atoi(t); if (!p) break;\n\t\tfgets(t, 10, stdin); n = atoi(t);\n\t\tfgets(t, 10, stdin); w = atoi(t);\n\t\tfgets(t, 10, stdin); s = atoi(t);\n\t\tpw = n*w + s*(n-1);\n\t\tfor (len = 0; ; len++) {\n\t\t\tfgets(buf[len], 1002, stdin);\n\t\t\tif (buf[len][0] == '?') break;\n\t\t}\n\t\tfor (ln = ii = ff = 0, f = 0; ; ) {\n\t\t\tfor (r = 0; r < p; r++) {\n\t\t\t\tfor (c = 0; c < pw; c++) pag[r][c] = '.';\n\t\t\t\tpag[r][c] = 0;\n\t\t\t}\n\t\t\tfor (cc = 0, i = 0; i < n; i++, cc += w+s) {\n\t\t\t\tfor (r = 0; r < p; r++) {\n\t\t\t\t\tfor (j = 0; j < w; ) {\n\t\t\t\t\t\tc = cc + j;\n\t\t\t\t\t\tm = nxchar();\n\t\t\t\t\t\tif (m == -1) {\n\t\t\t\t\t\t\tif (j > 0) break; else continue;\n\t\t\t\t\t\t} else if (m == -2) break;\n\t\t\t\t\t\telse if (m == -3) {\tf = 1; goto Done; }\n\t\t\t\t\t\tpag[r][c] = m, j++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\nDone:\t\t\n\t\t\tif (f && i == 0 && r == 0 && j == 0) break;\n\t\t\tfor (r = 0; r < p; r++) puts(pag[r]);\n\t\t\tputs(\"#\");\n\t\t\tif (f) break;\n\t\t}\n\t\tputs(\"?\");\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint page_length;\nint dan_num;\nint onedan_width;\nint space_width;\nchar line_buffer[2000];\n\nchar buffer[100][100];\nint buffer_x,buffer_y;\nint buffer_pos;\nint did_flush_buffer;\nint did_new_line;\n\nvoid buffer_init(void) {\n\tint i,j,length;\n\tbuffer_x=0;\n\tbuffer_y=0;\n\tbuffer_pos=0;\n\tmemset(buffer,0,sizeof(buffer));\n\tlength=onedan_width*dan_num+space_width*(dan_num-1);\n\tfor(i=0;i<page_length;i++) {\n\t\tfor(j=0;j<length;j++) {\n\t\t\tbuffer[i][j]='.';\n\t\t}\n\t}\n\tdid_flush_buffer=1;\n\tdid_new_line=0;\n}\n\nvoid flush_buffer(void) {\n\tint i;\n\tif(!did_flush_buffer) {\n\t\tfor(i=0;i<page_length;i++)puts(buffer[i]);\n\t\tputs(\"#\");\n\t} else {did_flush_buffer=0;return;}\n\tbuffer_init();\n}\n\nvoid new_line(void) {\n\tif(did_new_line){did_new_line=0;return;}\n\tbuffer_pos=0;\n\tbuffer_y++;\n\tif(buffer_y>=page_length) {\n\t\tbuffer_y=0;\n\t\tbuffer_x++;\n\t\tif(buffer_x>=dan_num) {\n\t\t\tflush_buffer();\n\t\t\tdid_flush_buffer=1;\n\t\t}\n\t}\n}\n\nvoid insert_one_char(char c) {\n\tdid_new_line=0;\n\tdid_flush_buffer=0;\n\tbuffer[buffer_y]\n\t\t[(onedan_width+space_width)*buffer_x+buffer_pos]=c;\n\tbuffer_pos++;\n\tif(buffer_pos>=onedan_width) {\n\t\tnew_line();\n\t\tdid_new_line=1;\n\t}\n}\n\nint main(void) {\n\tchar* cptr;\n\twhile(1) {\n\t\tscanf(\"%d\",&page_length);\n\t\tif(page_length==0)break;\n\t\tscanf(\"%d\",&dan_num);\n\t\tscanf(\"%d\",&onedan_width);\n\t\tscanf(\"%d\",&space_width);\n\t\tbuffer_init();\n\t\tfgets(line_buffer,sizeof(line_buffer),stdin);\n\t\twhile(1) {\n\t\t\tfgets(line_buffer,sizeof(line_buffer),stdin);\n\t\t\tcptr=strchr(line_buffer,'\\n');\n\t\t\tif(cptr)*cptr=0;\n\t\t\tif(line_buffer[0]=='?' && line_buffer[1]==0)break;\n\t\t\tfor(cptr=line_buffer;*cptr;cptr++)insert_one_char(*cptr);\n\t\t\tnew_line();\n\t\t}\n\t\tflush_buffer();\n\t\tputs(\"?\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(void){\n \n  int plen,cnum,width,cspace;\n  char **line;\n  char **output;\n  int linenum,i,j,k,l,m,n,o;\n  int f;\n\n  line = (char**)malloc(sizeof(char)*1002);\n  for(i=0;i<1002;i++)line[i] = (char*)malloc(sizeof(char)*1002);\n\n  output = (char**)malloc(sizeof(char)*2002);\n  for(i=0;i<2002;i++)output[i] = (char*)malloc(sizeof(char)*52);\n\n  while(1){\n    scanf(\" %d \",&plen);\n    if(!plen)break;\n    scanf(\" %d %d %d \",&cnum,&width,&cspace);\n\n    linenum = 0;\n    while(1){\n      fgets(line[linenum],1000,stdin);\n      if(line[linenum][0] == '?')break;\n      linenum++;\n    }\n\n    i = 0;\n    j = 0;\n    f = 0;\n    o = 0;\n    while(1){\n      l = 0;\n      m = 0;\n      while(1){\n\tfor(k=0;k<plen;k++){\n\t  if(f){\n\t    i++;\n\t    j = 0;\n\t    f = 0;\n\t  }\n\t  while(1){\n\t    if(i >= linenum){\n\t      output[o+k][m+j%width] = '.';\n\t    }else if(!f && line[i][j] != '\\n'){\n\t      output[o+k][m+j%width] = line[i][j];\n\t    }else if(line[i][j] == '\\n'){\n\t      if(j!=0 && j%width == 0)f = 2;\n\t      else f = 1;\n\t    }\n\t    if(f == 2){\n\t      k--;\n\t      break;\n\t    }\n\t    if(f == 1)output[o+k][m+j%width] = '.';\n\t    j++;\n\t    if( j%width == 0)break;\n\t  }\n\t}\n\tl++;\n\tm += width;\n\tif(l==cnum){\n\t  for(k=0;k<plen;k++){\n\t    output[o+k][m] = '\\0';\n\t  }\n\t  break;\n\t}else{\n\t  for(k=0;k<plen;k++){\n\t    for(n=0;n<cspace;n++){\n\t      output[o+k][m+n] = '.';\n\t    }\n\t  }\n\t}\n\tm += cspace;\n      }\n\n      o += plen;\n      if(i == linenum-1 && (f || line[i][j] == '\\n'))break;\n      if(i >= linenum)break;\n    }\n    if(linenum>0){\n      for(j=0;j<o;j++){\n\tprintf(\"%s\\n\",output[j]);\n\tif( (j+1)%plen == 0)printf(\"#\\n\");\n      }\n    }\n    printf(\"?\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(void){\n \n  int plen,cnum,width,cspace;\n  char line[100][1000];\n  char output[2000][50];\n  int linenum,i,j,k,l,m,n,o;\n  int f;\n\n  while(1){\n    scanf(\" %d \",&plen);\n    if(!plen)break;\n    scanf(\" %d %d %d \",&cnum,&width,&cspace);\n\n    linenum = 0;\n    while(1){\n      fgets(line[linenum],1000,stdin);\n      if(line[linenum][0] == '?')break;\n      linenum++;\n    }\n\n    i = 0;\n    j = 0;\n    f = 0;\n    o = 0;\n    while(1){\n      l = 0;\n      m = 0;\n      while(1){\n\tfor(k=0;k<plen;k++){\n\t  if(f){\n\t    i++;\n\t    j = 0;\n\t    f = 0;\n\t  }\n\t  while(1){\n\t    if(i >= linenum){\n\t      output[o+k][m+j%width] = '.';\n\t    }else if(!f && line[i][j] != '\\n'){\n\t      output[o+k][m+j%width] = line[i][j];\n\t    }else if(line[i][j] == '\\n'){\n\t      if(j!=0 && j%width == 0)f = 2;\n\t      else f = 1;\n\t    }\n\t    if(f == 2){\n\t      k--;\n\t      break;\n\t    }\n\t    if(f == 1)output[o+k][m+j%width] = '.';\n\t    j++;\n\t    if( j%width == 0)break;\n\t  }\n\t}\n\tl++;\n\tm += width;\n\tif(l==cnum){\n\t  for(k=0;k<plen;k++){\n\t    output[o+k][m] = '\\0';\n\t  }\n\t  break;\n\t}else{\n\t  for(k=0;k<plen;k++){\n\t    for(n=0;n<cspace;n++){\n\t      output[o+k][m+n] = '.';\n\t    }\n\t  }\n\t}\n\tm += cspace;\n      }\n\n      o += plen;\n      if(i >= linenum)break;\n    }\n\n    for(j=0;j<o;j++){\n    printf(\"%s\\n\",output[j]);\n    if( (j+1)%plen == 0)printf(\"#\\n\");\n    }\n    printf(\"?\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(void){\n \n  int plen,cnum,width,cspace;\n  char **line;\n  char **output;\n  int linenum,i,j,k,l,m,n,o;\n  int f;\n\n  line = (char**)malloc(sizeof(char)*100);\n  for(i=0;i<100;i++)line[i] = (char*)malloc(sizeof(char)*1000);\n\n  output = (char**)malloc(sizeof(char)*2000);\n  for(i=0;i<2000;i++)output[i] = (char*)malloc(sizeof(char)*50);\n\n\n\n  while(1){\n    scanf(\" %d \",&plen);\n    if(!plen)break;\n    scanf(\" %d %d %d \",&cnum,&width,&cspace);\n\n    linenum = 0;\n    while(1){\n      fgets(line[linenum],1000,stdin);\n      if(line[linenum][0] == '?')break;\n      linenum++;\n    }\n\n    i = 0;\n    j = 0;\n    f = 0;\n    o = 0;\n    while(1){\n      l = 0;\n      m = 0;\n      while(1){\n\tfor(k=0;k<plen;k++){\n\t  if(f){\n\t    i++;\n\t    j = 0;\n\t    f = 0;\n\t  }\n\t  while(1){\n\t    if(i >= linenum){\n\t      output[o+k][m+j%width] = '.';\n\t    }else if(!f && line[i][j] != '\\n'){\n\t      output[o+k][m+j%width] = line[i][j];\n\t    }else if(line[i][j] == '\\n'){\n\t      if(j!=0 && j%width == 0)f = 2;\n\t      else f = 1;\n\t    }\n\t    if(f == 2){\n\t      k--;\n\t      break;\n\t    }\n\t    if(f == 1)output[o+k][m+j%width] = '.';\n\t    j++;\n\t    if( j%width == 0)break;\n\t  }\n\t}\n\tl++;\n\tm += width;\n\tif(l==cnum){\n\t  for(k=0;k<plen;k++){\n\t    output[o+k][m] = '\\0';\n\t  }\n\t  break;\n\t}else{\n\t  for(k=0;k<plen;k++){\n\t    for(n=0;n<cspace;n++){\n\t      output[o+k][m+n] = '.';\n\t    }\n\t  }\n\t}\n\tm += cspace;\n      }\n\n      o += plen;\n      if(i >= linenum)break;\n    }\n\n    for(j=0;j<o;j++){\n    printf(\"%s\\n\",output[j]);\n    if( (j+1)%plen == 0)printf(\"#\\n\");\n    }\n    printf(\"?\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(void){\n \n  int plen,cnum,width,cspace;\n  char **line;\n  char **output;\n  int linenum,i,j,k,l,m,n,o;\n  int f;\n\n  line = (char**)malloc(sizeof(char)*1002);\n  for(i=0;i<1002;i++)line[i] = (char*)malloc(sizeof(char)*1002);\n\n  output = (char**)malloc(sizeof(char)*2002);\n  for(i=0;i<2002;i++)output[i] = (char*)malloc(sizeof(char)*52);\n\n  while(1){\n    scanf(\" %d \",&plen);\n    if(!plen)break;\n    scanf(\" %d %d %d \",&cnum,&width,&cspace);\n\n    linenum = 0;\n    while(1){\n      fgets(line[linenum],1000,stdin);\n      if(line[linenum][0] == '?')break;\n      linenum++;\n    }\n\n    i = 0;\n    j = 0;\n    f = 0;\n    o = 0;\n    while(1){\n      l = 0;\n      m = 0;\n      while(1){\n\tfor(k=0;k<plen;k++){\n\t  if(f){\n\t    i++;\n\t    j = 0;\n\t    f = 0;\n\t  }\n\t  while(1){\n\t    if(i >= linenum){\n\t      output[o+k][m+j%width] = '.';\n\t    }else if(!f && line[i][j] != '\\n'){\n\t      output[o+k][m+j%width] = line[i][j];\n\t    }else if(line[i][j] == '\\n'){\n\t      if(j!=0 && j%width == 0)f = 2;\n\t      else f = 1;\n\t    }\n\t    if(f == 2){\n\t      k--;\n\t      break;\n\t    }\n\t    if(f == 1)output[o+k][m+j%width] = '.';\n\t    j++;\n\t    if( j%width == 0)break;\n\t  }\n\t}\n\tl++;\n\tm += width;\n\tif(l==cnum){\n\t  for(k=0;k<plen;k++){\n\t    output[o+k][m] = '\\0';\n\t  }\n\t  break;\n\t}else{\n\t  for(k=0;k<plen;k++){\n\t    for(n=0;n<cspace;n++){\n\t      output[o+k][m+n] = '.';\n\t    }\n\t  }\n\t}\n\tm += cspace;\n      }\n\n      o += plen;\n      if(i >= linenum-1)break;\n    }\n\n    for(j=0;j<o;j++){\n    printf(\"%s\\n\",output[j]);\n    if( (j+1)%plen == 0)printf(\"#\\n\");\n    }\n    printf(\"?\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void){\n\tint i,j,k,l,ti,flg;\n\tint plen,cnum,width,cspace;\n\tchar out[512][50];\n\tchar s[1004];\n\n\twhile(1){\n\t\tscanf(\"%d\",&plen);\n\t\tif(plen == 0) break;\n\n\t\tscanf(\"%d%d%d \",&cnum,&width,&cspace);\n\t\tmemset(out,'.',sizeof(out));\n\n\t\ti = 0;\n\t\twhile(1){\n\t\t\tfgets(s,1004,stdin);\n\t\t\tif(strcmp(s,\"?\\n\") == 0) break;\n\t\t\tif(strcmp(s,\"\\n\") == 0){i++;continue;}\n\n\t\t\tk = 0;\n\t\t\tflg = 1;\n\t\t\tfor(;flg;i++){\n\t\t\t\tif(s[k] == '\\n') break;\n\t\t\t\tfor(j=0;j<width;j++){\n\t\t\t\t\tif(s[k] == '\\n'){flg=0;break;}\n\t\t\t\t\tout[i][j] = s[k++];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tti = i;\n\t\tfor(l=0;l<ti;l+=plen*cnum){\n\t\t\tfor(i=l;i<l+plen;i++){\n\t\t\t\tfor(k=0;k<cnum;k++){\n\t\t\t\t\tfor(j=0;j<width;j++)putchar(out[i+k*plen][j]);\n\t\t\t\t\tif(k!=cnum-1) for(j=0;j<cspace;j++) printf(\".\");\n\t\t\t\t}\n\t\t\t\tprintf(\"\\n\");\n\t\t\t}\n\t\t\tprintf(\"#\\n\");\n\t\t}\n\t\tprintf(\"?\\n\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(void){\n \n  int plen,cnum,width,cspace;\n  char **line;\n  char **output;\n  int linenum,i,j,k,l,m,n,o;\n  int f;\n\n  line = (char**)malloc(sizeof(char)*1002);\n  for(i=0;i<1002;i++)line[i] = (char*)malloc(sizeof(char)*1002);\n\n  output = (char**)malloc(sizeof(char)*2002);\n  for(i=0;i<2002;i++)output[i] = (char*)malloc(sizeof(char)*52);\n\n  while(1){\n    scanf(\" %d \",&plen);\n    if(!plen)break;\n    scanf(\" %d %d %d \",&cnum,&width,&cspace);\n\n    linenum = 0;\n    while(1){\n      fgets(line[linenum],1000,stdin);\n      if(line[linenum][0] == '?')break;\n      linenum++;\n    }\n\n    i = 0;\n    j = 0;\n    f = 0;\n    o = 0;\n    while(1){\n      l = 0;\n      m = 0;\n      while(1){\n\tfor(k=0;k<plen;k++){\n\t  if(f){\n\t    i++;\n\t    j = 0;\n\t    f = 0;\n\t  }\n\t  while(1){\n\t    if(i >= linenum){\n\t      output[o+k][m+j%width] = '.';\n\t    }else if(!f && line[i][j] != '\\n'){\n\t      output[o+k][m+j%width] = line[i][j];\n\t    }else if(line[i][j] == '\\n'){\n\t      if(j!=0 && j%width == 0)f = 2;\n\t      else f = 1;\n\t    }\n\t    if(f == 2){\n\t      k--;\n\t      break;\n\t    }\n\t    if(f == 1)output[o+k][m+j%width] = '.';\n\t    j++;\n\t    if( j%width == 0)break;\n\t  }\n\t}\n\tl++;\n\tm += width;\n\tif(l==cnum){\n\t  for(k=0;k<plen;k++){\n\t    output[o+k][m] = '\\0';\n\t  }\n\t  break;\n\t}else{\n\t  for(k=0;k<plen;k++){\n\t    for(n=0;n<cspace;n++){\n\t      output[o+k][m+n] = '.';\n\t    }\n\t  }\n\t}\n\tm += cspace;\n      }\n\n      o += plen;\n      if(i == linenum-1 && (f || line[i][j] == '\\n'))break;\n      if(i >= linenum)break;\n    }\n\n    for(j=0;j<o;j++){\n    printf(\"%s\\n\",output[j]);\n    if( (j+1)%plen == 0)printf(\"#\\n\");\n    }\n    printf(\"?\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "// Aizu 1115: Multi-column List\n// 2017.9.15 bal4u@uu\n\n#include <stdio.h>\n#include <stdlib.h>\n\nchar buf[102][1005]; int len;\nchar pag[102][52];\n\nstatic int ln, ii, ff;\nint nxchar()   // return -1: eol, -2: null line, -3: eof\n{\n\tint c;\n\n\tif (ff) return -3;\n\tc = buf[ln][ii];\n\tif (c < ' ') {\n\t\tif (++ln >= len) ff = 1;\n\t\tif (ii == 0) return -2;\n\t\tii = 0;\n\t\treturn -1;\n\t} else ii++;\n\treturn c;\n}\n\nint main()\n{\n\tint p, n, w, s, pw;\n\tint i, j, r, c, cc, m, f;\n\tchar t[15];\n\n\twhile (1) {\n\t\tfgets(t, 10, stdin); p = atoi(t); if (!p) break;\n\t\tfgets(t, 10, stdin); n = atoi(t);\n\t\tfgets(t, 10, stdin); w = atoi(t);\n\t\tfgets(t, 10, stdin); s = atoi(t);\n\t\tpw = n*w + s*(n-1);\n\t\tfor (len = 0; ; len++) {\n\t\t\tfgets(buf[len], 1002, stdin);\n\t\t\tif (buf[len][0] == '?') break;\n\t\t}\n\t\tfor (ln = ii = ff = 0, f = 0; ; ) {\n\t\t\tfor (r = 0; r < p; r++) {\n\t\t\t\tfor (c = 0; c < pw; c++) pag[r][c] = '.';\n\t\t\t\tpag[r][c] = 0;\n\t\t\t}\n\t\t\tfor (cc = 0, i = 0; i < n; i++, cc += w+s) {\n\t\t\t\tfor (r = 0; r < p; r++) {\n\t\t\t\t\tfor (j = 0; j < w; ) {\n\t\t\t\t\t\tc = cc + j;\n\t\t\t\t\t\tm = nxchar();\n\t\t\t\t\t\tif (m == -1) {\n\t\t\t\t\t\t\tif (j > 0) break; else continue;\n\t\t\t\t\t\t} else if (m == -2) break;\n\t\t\t\t\t\telse if (m == -3) {\tf = 1; goto Done; }\n\t\t\t\t\t\tpag[r][c] = m, j++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\nDone:\t\t\n\t\t\tif (f && i == 0 && r == 0 && j == 0) break;\n\t\t\tfor (r = 0; r < p; r++) puts(pag[r]);\n\t\t\tputs(\"#\");\n\t\t\tif (f) break;\n\t\t}\n\t\tputs(\"?\");\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(void){\n \n  int plen,cnum,width,cspace;\n  char **line;\n  char **output;\n  int linenum,i,j,k,l,m,n,o;\n  int f;\n\n  line = (char**)malloc(sizeof(char)*1002);\n  for(i=0;i<1002;i++)line[i] = (char*)malloc(sizeof(char)*1002);\n\n  output = (char**)malloc(sizeof(char)*2002);\n  for(i=0;i<2002;i++)output[i] = (char*)malloc(sizeof(char)*52);\n\n  while(1){\n    scanf(\" %d \",&plen);\n    if(!plen)break;\n    scanf(\" %d %d %d \",&cnum,&width,&cspace);\n\n    linenum = 0;\n    while(1){\n      fgets(line[linenum],1000,stdin);\n      if(line[linenum][0] == '?')break;\n      linenum++;\n    }\n\n    i = 0;\n    j = 0;\n    f = 0;\n    o = 0;\n    while(1){\n      l = 0;\n      m = 0;\n      while(1){\n\tfor(k=0;k<plen;k++){\n\t  if(f){\n\t    i++;\n\t    j = 0;\n\t    f = 0;\n\t  }\n\t  while(1){\n\t    if(i >= linenum){\n\t      output[o+k][m+j%width] = '.';\n\t    }else if(!f && line[i][j] != '\\n'){\n\t      output[o+k][m+j%width] = line[i][j];\n\t    }else if(line[i][j] == '\\n'){\n\t      if(j!=0 && j%width == 0)f = 2;\n\t      else f = 1;\n\t    }\n\t    if(f == 2){\n\t      k--;\n\t      break;\n\t    }\n\t    if(f == 1)output[o+k][m+j%width] = '.';\n\t    j++;\n\t    if( j%width == 0)break;\n\t  }\n\t}\n\tl++;\n\tm += width;\n\tif(l==cnum){\n\t  for(k=0;k<plen;k++){\n\t    output[o+k][m] = '\\0';\n\t  }\n\t  break;\n\t}else{\n\t  for(k=0;k<plen;k++){\n\t    for(n=0;n<cspace;n++){\n\t      output[o+k][m+n] = '.';\n\t    }\n\t  }\n\t}\n\tm += cspace;\n      }\n\n      o += plen;\n      if(i >= linenum)break;\n    }\n\n    for(j=0;j<o;j++){\n    printf(\"%s\\n\",output[j]);\n    if( (j+1)%plen == 0)printf(\"#\\n\");\n    }\n    printf(\"?\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n\npublic class Main {\n\n\tstatic int plen,cnum,width,cspace;\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true){\n\t\t\tplen=Integer.parseInt(br.readLine());\n\t\t\tif(plen==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcnum=Integer.parseInt(br.readLine());\n\t\t\twidth=Integer.parseInt(br.readLine());\n\t\t\tcspace=Integer.parseInt(br.readLine());\n\t\t\tString space=\"\";\n\t\t\tString empty=\"\";\n\t\t\tfor(int i = 0;i<width;i++){\n\t\t\t\tempty=empty+\".\";\n\t\t\t}\n\t\t\tfor(int i = 0;i<cspace;i++){\n\t\t\t\tspace=space+\".\";\n\t\t\t\t\n\t\t\t}\n\t\t\tArrayList<MyString> list = new ArrayList<MyString>();\n\t\t\twhile(true){\n\t\t\t\tString s = br.readLine();\n\t\t\t\tif(s==null){\n\t\t\t\t\ts=\"\";\n\t\t\t\t}\n\t\t\t\tif(s.equals(\"?\")){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlist.add(new MyString(width,s));\n\t\t\t}\n\t\t\tint cnt=0;\n\t\t\tArrayList<String> strs=new ArrayList<String>();\n\t\t\tfor(int i = 0;i<list.size();i++){\n\t\t\t\tfor(int j = 0;j<list.get(i).list.size();j++){\n\t\t\t\t\tstrs.add(list.get(i).list.get(j));\n\t\t\t\t}\n\t\t\t\tcnt+=list.get(i).list.size();\n\t\t\t}\n\t\t\tint memoNum=((cnt-1)/(cnum*plen))+1;\n\t\t\tcnt=0;\n\t\t\tString[][] ans = new String[memoNum][plen];\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int j = 0;j<plen;j++){\n\t\t\t\t\tans[i][j]=\"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int j = 0;j<cnum;j++){\n\t\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\t\tif(cnt<strs.size()){\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+strs.get(cnt++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+empty;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(j!=cnum-1){\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+space;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\tSystem.out.println(ans[i][k]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"#\");\n\t\t\t}\n\t\t\tSystem.out.println(\"?\");\n\t\t}\n\t}\n}\nclass MyString{\n\tint width;\n\tArrayList<String> list = new ArrayList<String>();\n\tMyString(int w,String s){\n\t\twidth=w;\n\t\tif(s.length()==0){\n\t\t\tfor(int i = 0;i<width;i++){\n\t\t\t\ts=s+\".\";\n\t\t\t}\n\t\t\tlist.add(s);\n\t\t}\n\t\telse{\n\t\t\tint n=s.length();\n\t\t\tfor(int i = 0;i<n;i+=w){\n\t\t\t\tif(i+w>n){\n\t\t\t\t\tString a=s.substring(i,n);\n\t\t\t\t\tfor(int j = a.length();j<w;j++){\n\t\t\t\t\t\ta=a+\".\";\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(a);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlist.add(s.substring(i,i+w));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i<list.size();i++){\n\t\t\t//System.out.println(list.get(i));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint n = sc.nextInt();\n\t\t\tif(n == 0) break;\n\t\t\tint col = sc.nextInt();\n\t\t\tint width = sc.nextInt();\n\t\t\tint space = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\twhile(true){\n\t\t\t\tString str = sc.nextLine();\n\t\t\t\tif(str.equals(\"?\")) break;\n\t\t\t\tif(str.equals(\"\")){\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tfor(int i = 0; i < width; i++){\n\t\t\t\t\t\tsb.append(\".\");\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(sb.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(int i = 0; i < str.length(); i+= width){\n\t\t\t\t\tString data = str.substring(i, Math.min(i + width, str.length()));\n\t\t\t\t\tStringBuilder sb = new StringBuilder(data);\n\t\t\t\t\tfor(int j = data.length(); j < width; j++){\n\t\t\t\t\t\tsb.append(\".\");\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(sb.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tStringBuilder emptystr = new StringBuilder();\n\t\t\tfor(int i = 0; i < width; i++){\n\t\t\t\temptystr.append(\".\");\n\t\t\t}\n\t\t\tStringBuilder spacestr = new StringBuilder();\n\t\t\tfor(int i = 0; i < space; i++){\n\t\t\t\tspacestr.append(\".\");\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0; i < list.size(); i+= n * col){\n\t\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\t\tfor(int k = 0; k < col; k++){\n\t\t\t\t\t\tint ind = i + j + k * n;\n\t\t\t\t\t\tif(ind >= list.size()){\n\t\t\t\t\t\t\tSystem.out.print(emptystr.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tString print = list.get(ind);\n\t\t\t\t\t\t\tSystem.out.print(print);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(k != col - 1){\n\t\t\t\t\t\t\tSystem.out.print(spacestr);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"#\");\n\t\t\t}\n\t\t\tSystem.out.println(\"?\");\n\t\t}\n\t}\n\n\tprivate void debug(Object... o) {\n\t\tSystem.out.println(\"debug = \" + Arrays.deepToString(o));\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n\npublic class Main {\n\n\tstatic int plen,cnum,width,cspace;\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true){\n\t\t\tplen=Integer.parseInt(br.readLine());\n\t\t\tif(plen==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcnum=Integer.parseInt(br.readLine());\n\t\t\twidth=Integer.parseInt(br.readLine());\n\t\t\tcspace=Integer.parseInt(br.readLine());\n\t\t\tString space=\"\";\n\t\t\tString empty=\"\";\n\t\t\tfor(int i = 0;i<width;i++){\n\t\t\t\tempty=empty+\".\";\n\t\t\t}\n\t\t\tfor(int i = 0;i<cspace;i++){\n\t\t\t\tspace=space+\".\";\n\t\t\t\t\n\t\t\t}\n\t\t\tArrayList<MyString> list = new ArrayList<MyString>();\n\t\t\twhile(true){\n\t\t\t\tString s = br.readLine();\n\t\t\t\tif(s==null){\n\t\t\t\t\ts=\"\";\n\t\t\t\t}\n\t\t\t\tif(s.equals(\"?\")){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlist.add(new MyString(width,s));\n\t\t\t}\n\t\t\tint cnt=0;\n\t\t\tArrayList<String> strs=new ArrayList<String>();\n\t\t\tfor(int i = 0;i<list.size();i++){\n\t\t\t\tfor(int j = 0;j<list.get(i).list.size();j++){\n\t\t\t\t\tstrs.add(list.get(i).list.get(j));\n\t\t\t\t}\n\t\t\t\tcnt+=list.get(i).list.size();\n\t\t\t}\n\t\t\tint memoNum=(cnt/(cnum*plen))+1;\n\t\t\tcnt=0;\n\t\t\tString[][] ans = new String[memoNum][plen];\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int j = 0;j<plen;j++){\n\t\t\t\t\tans[i][j]=\"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int j = 0;j<cnum;j++){\n\t\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\t\tif(cnt<strs.size()){\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+strs.get(cnt++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+empty;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(j!=cnum-1){\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+space;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\tSystem.out.println(ans[i][k]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"#\");\n\t\t\t}\n\t\t\tSystem.out.println(\"?\");\n\t\t}\n\t}\n}\nclass MyString{\n\tint width;\n\tArrayList<String> list = new ArrayList<String>();\n\tMyString(int w,String s){\n\t\twidth=w;\n\t\tif(s.length()==0){\n\t\t\tfor(int i = 0;i<width;i++){\n\t\t\t\ts=s+\".\";\n\t\t\t}\n\t\t\tlist.add(s);\n\t\t}\n\t\telse{\n\t\t\tint n=s.length();\n\t\t\tfor(int i = 0;i<n;i+=w){\n\t\t\t\tif(i+w>n){\n\t\t\t\t\tString a=s.substring(i,n);\n\t\t\t\t\tfor(int j = a.length();j<w;j++){\n\t\t\t\t\t\ta=a+\".\";\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(a);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlist.add(s.substring(i,i+w));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i<list.size();i++){\n\t\t\t//System.out.println(list.get(i));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\n\npublic class Main{\n\n\tScanner sc=new Scanner(System.in);\n\n\tint plen, cnum, width, cspace;\n\tArrayList<String> lines;\n\n\tvoid run(){\n\t\tfor(;;){\n\t\t\tplen=sc.nextInt();\n\t\t\tif(plen==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcnum=sc.nextInt();\n\t\t\twidth=sc.nextInt();\n\t\t\tcspace=sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tlines=new ArrayList<String>();\n\t\t\tfor(;;){\n\t\t\t\tString line=sc.nextLine();\n\t\t\t\tif(line.equals(\"?\")){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlines.add(line);\n\t\t\t}\n\t\t\tsolve();\n\t\t}\n\t}\n\n\tvoid solve(){\n\t\tArrayList<String> list=new ArrayList<String>();\n\t\tfor(String s : lines){\n\t\t\tfor(;;){\n\t\t\t\tif(s.length()<=width){\n\t\t\t\t\tfor(; s.length()<width;){\n\t\t\t\t\t\ts+=\".\";\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(s);\n\t\t\t\t\tbreak;\n\t\t\t\t}else{\n\t\t\t\t\tlist.add(s.substring(0, width));\n\t\t\t\t\ts=s.substring(width, s.length());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// debug(list);\n\t\tString dot=\"\";\n\t\tfor(; dot.length()<width;){\n\t\t\tdot+=\".\";\n\t\t}\n\t\tfor(; list.size()%(plen*cnum)!=0;){\n\t\t\tlist.add(dot);\n\t\t}\n\t\tString space=\"\";\n\t\tfor(; space.length()<cspace;){\n\t\t\tspace+=\".\";\n\t\t}\n\t\t// debug(list);\n\t\t// debug(list.size());\n\t\tfor(int k=0; k<list.size()/(plen*cnum); k++){\n\t\t\tfor(int i=0; i<plen; i++){\n\t\t\t\tfor(int j=0; j<cnum; j++){\n\t\t\t\t\tString s=list.get(i+j*plen+k*plen*cnum);\n\t\t\t\t\tprint(s);\n\t\t\t\t\tif(j<cnum-1){\n\t\t\t\t\t\tprint(space);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprintln(\"\");\n\t\t\t}\n\t\t\tprintln(\"#\");\n\t\t}\n\t\tprintln(\"?\");\n\t}\n\n\tvoid debug(Object... os){\n\t\tSystem.err.println(deepToString(os));\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n\npublic class Main {\n\n\tstatic int plen,cnum,width,cspace;\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true){\n\t\t\tplen=Integer.parseInt(br.readLine());\n\t\t\tif(plen==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcnum=Integer.parseInt(br.readLine());\n\t\t\twidth=Integer.parseInt(br.readLine());\n\t\t\tcspace=Integer.parseInt(br.readLine());\n\t\t\tString space=\"\";\n\t\t\tString empty=\"\";\n\t\t\tfor(int i = 0;i<width;i++){\n\t\t\t\tempty=empty+\".\";\n\t\t\t}\n\t\t\tfor(int i = 0;i<cspace;i++){\n\t\t\t\tspace=space+\".\";\n\t\t\t\t\n\t\t\t}\n\t\t\tArrayList<MyString> list = new ArrayList<MyString>();\n\t\t\twhile(true){\n\t\t\t\tString s = br.readLine();\n\t\t\t\tif(s==null){\n\t\t\t\t\ts=\"\";\n\t\t\t\t}\n\t\t\t\tif(s.equals(\"?\")){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlist.add(new MyString(width,s));\n\t\t\t}\n\t\t\tint cnt=0;\n\t\t\tArrayList<String> strs=new ArrayList<String>();\n\t\t\tfor(int i = 0;i<list.size();i++){\n\t\t\t\tfor(int j = 0;j<list.get(i).list.size();j++){\n\t\t\t\t\tstrs.add(list.get(i).list.get(j));\n\t\t\t\t}\n\t\t\t\tcnt+=list.get(i).list.size();\n\t\t\t}\n\t\t\tint memoNum=((cnt-1)/(cnum*plen))+1;\n\t\t\tcnt=0;\n\t\t\tString[][] ans = new String[memoNum][plen];\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int j = 0;j<plen;j++){\n\t\t\t\t\tans[i][j]=\"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tfor(int j = 0;j<cnum;j++){\n\t\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\t\tif(cnt<strs.size()){\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+strs.get(cnt++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+empty;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(j!=cnum-1){\n\t\t\t\t\t\t\tans[i][k]=ans[i][k]+space;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString spacespace=\"\";\n\t\t\tfor(int i = 0;i<cnum;i++){\n\t\t\t\tspacespace=spacespace+empty;\n\t\t\t}\n\t\t\tfor(int i = 0;i<cnum-1;i++){\n\t\t\t\tspacespace=spacespace+space;\n\t\t\t}\n\t\t\tfor(int i  =0;i<memoNum;i++){\n\t\t\t\tboolean f=false;\n\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\tif(!ans[i][k].equals(spacespace)){\n\t\t\t\t\t\tf=true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(f){\n\t\t\t\t\tfor(int k = 0;k<plen;k++){\n\t\t\t\t\t\tSystem.out.println(ans[i][k]);\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"#\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"?\");\n\t\t}\n\t}\n}\nclass MyString{\n\tint width;\n\tArrayList<String> list = new ArrayList<String>();\n\tMyString(int w,String s){\n\t\twidth=w;\n\t\tif(s.length()==0){\n\t\t\tfor(int i = 0;i<width;i++){\n\t\t\t\ts=s+\".\";\n\t\t\t}\n\t\t\tlist.add(s);\n\t\t}\n\t\telse{\n\t\t\tint n=s.length();\n\t\t\tfor(int i = 0;i<n;i+=w){\n\t\t\t\tif(i+w>n){\n\t\t\t\t\tString a=s.substring(i,n);\n\t\t\t\t\tfor(int j = a.length();j<w;j++){\n\t\t\t\t\t\ta=a+\".\";\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(a);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlist.add(s.substring(i,i+w));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i<list.size();i++){\n\t\t\t//System.out.println(list.get(i));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n//Multi-column List\npublic class Main{\n\n\tvoid run(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(;;){\n\t\t\tint line = sc.nextInt();\n\t\t\tif(line==0)break;\n\t\t\tint col = sc.nextInt();\n\t\t\tint w = sc.nextInt();\n\t\t\tint space = sc.nextInt();\n\t\t\tString sp = \"\";\n\t\t\twhile(sp.length()<space)sp+=\".\";\n\t\t\tsc.nextLine();\n\t\t\tboolean con = true;\n\t\t\tString s = \"\";\n\t\t\twhile(con){\n\t\t\t\tif(\"\".equals(s)){\n\t\t\t\t\ts = sc.nextLine();\n\t\t\t\t\tif(\"?\".equals(s))break;\n\t\t\t\t}\n\t\t\t\tString[][] res = new String[col][line];\n\t\t\t\tfor(int c=0;c<col;c++){\n\t\t\t\t\tfor(int l=0;l<line;l++){\n\t\t\t\t\t\tres[c][l] = \"\";\n\t\t\t\t\t\tif(!con){\n\t\t\t\t\t\t\twhile(res[c][l].length()<w)res[c][l]=res[c][l]+\".\";\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(\"\".equals(s)){\n\t\t\t\t\t\t\ts = sc.nextLine();\n\t\t\t\t\t\t\tif(\"?\".equals(s)){\n\t\t\t\t\t\t\t\tcon = false;\n\t\t\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint t = Math.min(s.length(), w);\n\t\t\t\t\t\tres[c][l] = s.substring(0, t);\n\t\t\t\t\t\twhile(res[c][l].length()<w)res[c][l]=res[c][l]+\".\";\n\t\t\t\t\t\ts = s.substring(t, s.length());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int l=0;l<line;l++){\n\t\t\t\t\tfor(int c=0;c<col;c++){\n\t\t\t\t\t\tSystem.out.print(res[c][l]+(c==col-1?\"\\n\":sp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"#\");\n\t\t\t}\t\t\t\n\t\t\tSystem.out.println(\"?\");\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System.Linq;\nusing System.Collections.Generic;\nusing System;\n\npublic class hello\n{\n    public static string[] dot;\n    public static int plen, cnum, width, cspace;\n    public static void Main()\n    {\n        while (true)\n        {\n            plen = int.Parse(Console.ReadLine().Trim());\n            if (plen == 0) break;\n            cnum = int.Parse(Console.ReadLine().Trim());\n            width = int.Parse(Console.ReadLine().Trim());\n            cspace = int.Parse(Console.ReadLine().Trim());\n            dot = new string[width + 1];\n            for (int i = 0; i <= width; i++) dot[i] = new string('.', i);\n            var text = new List<string>();\n            while (true)\n            {\n                var s = Console.ReadLine().Trim();\n                if (s == \"?\") break;\n                addText(text, s);\n            }\n            addDot(text);\n            print(text);\n        }\n    }\n    static void print(List<string> t)\n    {\n        var pc = plen * cnum;\n        var imax = t.Count() / (pc);\n        var line = new string[cnum];\n        for (int i = 0; i < imax; i++)\n        {\n            for (int j = 0; j < plen; j++)\n            {\n                for (int k = 0; k < cnum; k++)\n                {\n                    var p = i * pc + j + k * plen;\n                    line[k] = t[p];\n                }\n                Console.WriteLine(string.Join(\".\", line));\n            }\n            Console.WriteLine(\"#\\n?\");\n        }\n    }\n    static void addDot(List<string> t)\n    {\n        var pg = (t.Count() + plen * cnum - 1) / (plen * cnum);\n        var adddot = pg * plen * cnum - t.Count();\n        for (int i = 0; i < adddot; i++) t.Add(dot[width]);\n    }\n    static void addText(List<string> t, string s)\n    {\n        if (s == \"\") { t.Add(dot[width]); return; }\n        var imax = (s.Length + width - 1) / width;\n        var p = 0;\n        for (int i = 0; i < imax; i++)\n        {\n            if (i == imax - 1)\n            {\n                var ss = s.Substring(p);\n                t.Add(ss + dot[width - ss.Length]);\n            }\n            else\n            {\n                var ss = s.Substring(p, width);\n                t.Add(ss);\n                p += width;\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System.Linq;\nusing System.Collections.Generic;\nusing System;\n\npublic class hello\n{\n    public static string[] dot;\n    public static int plen, cnum, width, cspace;\n    public static void Main()\n    {\n        while (true)\n        {\n            plen = int.Parse(Console.ReadLine().Trim());\n            if (plen == 0) break;\n            cnum = int.Parse(Console.ReadLine().Trim());\n            width = int.Parse(Console.ReadLine().Trim());\n            cspace = int.Parse(Console.ReadLine().Trim());\n            dot = new string[width + 1];\n            for (int i = 0; i <= width; i++) dot[i] = new string('.', i);\n            var text = new List<string>();\n            while (true)\n            {\n                var s = Console.ReadLine().Trim();\n                if (s == \"?\") break;\n                addText(text, s);\n            }\n            addDot(text);\n            print(text);\n        }\n    }\n    static void print(List<string> t)\n    {\n        var pc = plen * cnum;\n        var imax = t.Count() / (pc);\n        var line = new string[cnum];\n        for (int i = 0; i < imax; i++)\n        {\n            for (int j = 0; j < plen; j++)\n            {\n                for (int k = 0; k < cnum; k++)\n                {\n                    var p = i * pc + j + k * plen;\n                    line[k] = t[p];\n                }\n                Console.WriteLine(string.Join(\".\", line));\n            }\n            Console.WriteLine(\"#\");\n        }\n        Console.WriteLine(\"?\");\n    }\n    static void addDot(List<string> t)\n    {\n        var pg = (t.Count() + plen * cnum - 1) / (plen * cnum);\n        var adddot = pg * plen * cnum - t.Count();\n        for (int i = 0; i < adddot; i++) t.Add(dot[width]);\n    }\n    static void addText(List<string> t, string s)\n    {\n        if (s == \"\") { t.Add(dot[width]); return; }\n        var imax = (s.Length + width - 1) / width;\n        var p = 0;\n        for (int i = 0; i < imax; i++)\n        {\n            if (i == imax - 1)\n            {\n                var ss = s.Substring(p);\n                t.Add(ss + dot[width - ss.Length]);\n            }\n            else\n            {\n                var ss = s.Substring(p, width);\n                t.Add(ss);\n                p += width;\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System.Linq;\nusing System.Collections.Generic;\nusing System;\n\npublic class hello\n{\n    public static string[] dot;\n    public static int plen, cnum, width, cspace;\n    public static void Main()\n    {\n        while (true)\n        {\n            plen = int.Parse(Console.ReadLine().Trim());\n            if (plen == 0) break;\n            cnum = int.Parse(Console.ReadLine().Trim());\n            width = int.Parse(Console.ReadLine().Trim());\n            cspace = int.Parse(Console.ReadLine().Trim());\n            dot = new string[width + 1];\n            for (int i = 0; i <= width; i++) dot[i] = new string('.', i);\n            var text = new List<string>();\n            while (true)\n            {\n                var s = Console.ReadLine().Trim();\n                if (s == \"?\") break;\n                addText(text, s);\n            }\n            addDot(text);\n            print(text);\n        }\n    }\n    static void print(List<string> t)\n    {\n        var pc = plen * cnum;\n        var imax = t.Count() / (pc);\n        var line = new string[cnum];\n        for (int i = 0; i < imax; i++)\n        {\n            for (int j = 0; j < plen; j++)\n            {\n                for (int k = 0; k < cnum; k++)\n                {\n                    var p = i * pc + j + k * plen;\n                    line[k] = t[p];\n                }\n                Console.WriteLine(string.Join(\".\", line));\n            }\n            Console.WriteLine(\"#\\n?\");\n        }\n    }\n    static void addDot(List<string> t)\n    {\n        var adddot = plen * cnum - (t.Count() % (plen * cnum));\n        for (int i = 0; i < adddot; i++) t.Add(dot[width]);\n    }\n    static void addText(List<string> t, string s)\n    {\n        if (s == \"\") { t.Add(dot[width]); return; }\n        var imax = (s.Length + width - 1) / width;\n        var p = 0;\n        for (int i = 0; i < imax; i++)\n        {\n            if (i == imax - 1)\n            {\n                var ss = s.Substring(p);\n                t.Add(ss + dot[width - ss.Length]);\n            }\n            else\n            {\n                var ss = s.Substring(p, width);\n                t.Add(ss);\n                p += width;\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System.Linq;\nusing System.Collections.Generic;\nusing System;\n\npublic class hello\n{\n    public static string[] dot;\n    public static int plen, cnum, width, cspace;\n    public static void Main()\n    {\n        while (true)\n        {\n            plen = int.Parse(Console.ReadLine().Trim());\n            if (plen == 0) break;\n            cnum = int.Parse(Console.ReadLine().Trim());\n            width = int.Parse(Console.ReadLine().Trim());\n            cspace = int.Parse(Console.ReadLine().Trim());\n            dot = new string[width + 1];\n            for (int i = 0; i <= width; i++) dot[i] = new string('.', i);\n            var text = new List<string>();\n            while (true)\n            {\n                var s = Console.ReadLine().Trim();\n                if (s == \"?\") break;\n                addText(text, s);\n            }\n            addDot(text);\n            print(text);\n        }\n    }\n    static void print(List<string> t)\n    {\n        var spL = new string('.', cspace);\n        var pc = plen * cnum;\n        var imax = t.Count() / (pc);\n        var line = new string[cnum];\n        for (int i = 0; i < imax; i++)\n        {\n            for (int j = 0; j < plen; j++)\n            {\n                for (int k = 0; k < cnum; k++)\n                {\n                    var p = i * pc + j + k * plen;\n                    line[k] = t[p];\n                }\n                Console.WriteLine(string.Join(spL, line));\n\n            }\n            Console.WriteLine(\"#\");\n        }\n        Console.WriteLine(\"?\");\n    }\n    static void addDot(List<string> t)\n    {\n        var pg = (t.Count() + plen * cnum - 1) / (plen * cnum);\n        var adddot = pg * plen * cnum - t.Count();\n        for (int i = 0; i < adddot; i++) t.Add(dot[width]);\n    }\n    static void addText(List<string> t, string s)\n    {\n        if (s == \"\") { t.Add(dot[width]); return; }\n        var imax = (s.Length + width - 1) / width;\n        var p = 0;\n        for (int i = 0; i < imax; i++)\n        {\n            if (i == imax - 1)\n            {\n                var ss = s.Substring(p);\n                t.Add(ss + dot[width - ss.Length]);\n            }\n            else\n            {\n                var ss = s.Substring(p, width);\n                t.Add(ss);\n                p += width;\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System.Linq;\nusing System.Collections.Generic;\nusing System;\n\npublic class hello\n{\n    public static string[] dot;\n    public static int plen, cnum, width, cspace;\n    public static void Main()\n    {\n        while (true)\n        {\n            plen = int.Parse(Console.ReadLine().Trim());\n            if (plen == 0) break;\n            cnum = int.Parse(Console.ReadLine().Trim());\n            width = int.Parse(Console.ReadLine().Trim());\n            cspace = int.Parse(Console.ReadLine().Trim());\n            dot = new string[width + 1];\n            for (int i = 0; i <= width; i++) dot[i] = new string('.', i);\n            var text = new List<string>();\n            while (true)\n            {\n                var s = Console.ReadLine().Trim();\n                if (s == \"?\") break;\n                addText(text, s);\n            }\n            addDot(text);\n            print(text);\n        }\n    }\n    static void print(List<string> t)\n    {\n        var pc = plen * cnum;\n        var imax = t.Count() / (pc);\n        var line = new string[cnum];\n        for (int i = 0; i < imax; i++)\n        {\n            for (int j = 0; j < plen; j++)\n            {\n                for (int k = 0; k < cnum; k++)\n                {\n                    var p = i * pc + j + k * plen;\n                    line[k] = t[p];\n                }\n                var spL = new string('.', cspace);\n                Console.WriteLine(string.Join(spL, line));\n\n            }\n            Console.WriteLine(\"#\");\n        }\n        Console.WriteLine(\"?\");\n    }\n    static void addDot(List<string> t)\n    {\n        var pg = (t.Count() + plen * cnum - 1) / (plen * cnum);\n        var adddot = pg * plen * cnum - t.Count();\n        for (int i = 0; i < adddot; i++) t.Add(dot[width]);\n    }\n    static void addText(List<string> t, string s)\n    {\n        if (s == \"\") { t.Add(dot[width]); return; }\n        var imax = (s.Length + width - 1) / width;\n        var p = 0;\n        for (int i = 0; i < imax; i++)\n        {\n            if (i == imax - 1)\n            {\n                var ss = s.Substring(p);\n                t.Add(ss + dot[width - ss.Length]);\n            }\n            else\n            {\n                var ss = s.Substring(p, width);\n                t.Add(ss);\n                p += width;\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "JavaScript",
    "code": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var plen=arr.shift()-0;\n   if(plen==0)break;\n   var cnum=arr.shift()-0;\n   var width=arr.shift()-0;\n   var cspace=arr.shift()-0;\n   var line=[];\n   while(true){\n      var str=arr.shift();\n      if(str==\"?\")break;\n      else line.push(str);\n   }\n   var ary=[];\n   line.forEach(function(str,i){\n      while(true){\n         var s=str.slice(0,width);\n         while(s.length!=width)s+=\".\";\n         ary.push(s);\n         str=str.slice(width);\n         if(str==\"\")break;\n      }\n   });\n   var und=\"\";\n   for(var i=0;i<width;i++)und+=\".\";\n   var spa=\"\";\n   for(var i=0;i<cspace;i++)spa+=\".\";\n   while(true){\n      if(ary.length==0)break;\n      var ARR=[];\n      for(var i=0;i<plen;i++)ARR[i]=\"\";\n      for(var i=0;i<cnum;i++){\n         for(var j=0;j<plen;j++){\n            var s=ary.shift();\n            if(s==undefined)s=und;\n            if(i!=0)ARR[j]+=spa;\n         ARR[j]+=s;\n         }\n      } \n      ARR.forEach(function(v){\n         console.log(v);\n      });\n      console.log(\"#\");\n   }\n   console.log(\"?\");\n}"
  },
  {
    "language": "Ruby",
    "code": "### main\n\nloop do\n  plen = gets.to_i\n  break if plen == 0\n\n  cnum = gets.to_i\n  wdth = gets.to_i\n  cspc = gets.to_i\n\n  lines = []\n\n  loop do\n    line = gets.strip\n    break if line == '?'\n\n    while line.length > wdth\n      lines << line[0, wdth]\n      line[0, wdth] = ''\n    end\n\n    lines << line + '.' * (wdth - line.length)\n  end\n  #p lines\n\n  cplen = plen * cnum\n  rlen = lines.length % cplen\n  if rlen > 0\n    lines += ['.' * wdth] * (cplen - rlen)\n  end\n  #p lines.length\n\n  while ! lines.empty?\n    plines = plen.times.map{''}\n\n    for col in (0...cnum)\n      for i in (0...plen)\n        plines[i] += '.' * cspc if col > 0\n        plines[i] += lines.shift\n      end\n    end\n\n    plines.each{|pl| puts pl}\n    puts '#'\n  end\n\n  puts '?'\nend"
  },
  {
    "language": "Python",
    "code": "while True:\n    plen = input()\n    if plen == 0:\n        break\n    cnum = input()\n    width = input()\n    cspace = input()\n    def formated_print(note):\n        for i in xrange(plen):\n            print (\".\"*cspace).join(note[j*plen+i].ljust(width, \".\") for j in xrange(cnum))\n        print \"#\"\n    note = []\n    line = raw_input()\n    while line != \"?\":\n        if len(note) >= plen * cnum:\n            formated_print(note)\n            note = []\n        if len(line) > width:\n            note.append(line[:width])            \n            line = line[width:]\n        else:\n            note.append(line)\n            line = \"\"\n        if line == \"\":\n            line = raw_input()\n    if note:\n        while len(note) < plen * cnum:\n            note.append(\"\")    \n        formated_print(note)\n    print \"?\""
  },
  {
    "language": "Python",
    "code": "while True:\n    plen = input()\n    if plen == 0:\n        break\n    cnum = input()\n    width = input()\n    space = \".\" * input()\n    def formated_print(note):\n        for i in xrange(plen):\n            print space.join(note[j*plen+i].ljust(width, \".\") for j in xrange(cnum))\n        print \"#\"\n    note = []\n    line = raw_input()\n    while line != \"?\":\n        if len(note) >= plen * cnum:\n            formated_print(note)\n            note = []\n        if len(line) > width:\n            note.append(line[:width])\n            line = line[width:]\n        else:\n            note.append(line)\n            line = \"\"\n        if line == \"\":\n            line = raw_input()\n    if note:\n        while len(note) < plen * cnum:\n            note.append(\"\")\n        formated_print(note)\n    print \"?\""
  },
  {
    "language": "Python",
    "code": "while True:\n    plen = input()\n    if plen == 0:\n        break\n    cnum = input()\n    width = input()\n    cspace = input()\n    def formated_print(note):\n        for i in xrange(plen):\n            print (\".\"*cspace).join(note[j*plen+i].ljust(width, \".\") for j in xrange(cnum))\n        print \"#\"\n    note = []\n    line = raw_input()\n    while line != \"?\":\n        if len(note) >= plen * cnum:\n            formated_print(note)\n            note = []\n        if len(line) > width:\n            note.append(line[:width])            \n            line = line[width:]\n        else:\n            note.append(line)\n            line = \"\"\n        if line == \"\":\n            line = raw_input()\n    if not all(s == \"\" for s in note):  # !?!!!?!???\n        while len(note) < plen * cnum:\n            note.append(\"\")    \n        formated_print(note)\n    print \"?\""
  },
  {
    "language": "Python",
    "code": "while True:\n    plen=input()\n    if plen==0:break\n    cnum=input()\n    width=input()\n    cspace=input()\n    L=[[\".\"]*(cnum*width+(cnum-1)*cspace)for i in range(plen)]\n    line=0\n    pos=0\n    extra=\"\"\n    while True:\n        s=raw_input()\n        if s==\"?\":\n            for i in range(plen):\n                print \"\".join(L[i])\n            print \"#\\n?\"\n            break\n        lens=len(s)\n        if lens>width:\n            extra=s[width:]\n            s=s[:width]\n        L[line%plen][pos:pos+lens]=list(s)\n        line+=1\n        if line>=plen:\n            pos=(width+cspace)*(line/plen)\n        while extra!=\"\":\n            if line>=plen*cnum:\n                for i in range(plen):\n                    print \"\".join(L[i])\n                print \"#\"\n                L=[[\".\"]*(cnum*width+(cnum-1)*cspace)for i in range(plen)]\n                pos=line=0\n            lene=len(extra)\n            if lene>width:\n                temp=extra[width:]\n                extra=extra[:width]\n                L[line%plen][pos:pos+len(extra)]=list(extra)\n                extra=temp\n            else:\n                L[line%plen][pos:pos+len(extra)]=list(extra)\n                extra=\"\"\n            line+=1\n            if line>=plen:\n                pos=(width+cspace)*(line/plen)"
  },
  {
    "language": "Python",
    "code": "while True:\n    plen=input()\n    if plen==0:break\n    cnum=input()\n    width=input()\n    cspace=input()\n    L=[[\".\"]*(cnum*width+(cnum-1)*cspace)for i in range(plen)]\n    line=0\n    pos=0\n    extra=\"\"\n    while True:\n        s=raw_input()\n        if s==\"?\":\n            for i in range(plen):\n                print \"\".join(L[i])\n            print \"#\\n?\"\n            break\n        lens=len(s)\n        if lens>width:\n            extra=s[width:]\n            s=s[:width]\n        L[line%plen][pos:pos+lens]=list(s)\n        line+=1\n        if line>=plen:\n            pos=(width+cspace)*(line/plen)\n        if line<plen*cnum and extra!=\"\":\n            L[line%plen][pos:pos+len(extra)]=list(extra)\n            line+=1\n            extra=\"\"\n        if line>=plen*cnum:\n            for i in range(plen):\n                print \"\".join(L[i])\n            print \"#\"\n            L=[[\".\"]*(cnum*width+(cnum-1)*cspace)for i in range(plen)]\n            pos=line=0\n            if extra!=\"\":\n                L[line%plen][pos:pos+len(extra)]=list(extra)\n                line+=1\n                extra=\"\""
  },
  {
    "language": "Python",
    "code": "while True:\n    plen = input()\n    if plen == 0:\n        break\n    cnum = input()\n    width = input()\n    cspace = input()\n    def formated_print(note):\n        for i in xrange(plen):\n            print \".\".join(note[j*plen+i].ljust(width, \".\") for j in xrange(cnum))\n        print \"#\"\n    note = [\"\"]\n    line = raw_input()\n    while line != \"?\":\n        if note[-1] == \"\" and len(line) <= width:\n            note[-1] = line\n            line = raw_input()\n        else:\n            note.append(line[:width])\n            line = line[width:]\n        if len(note) >= plen * cnum:\n            formated_print(note)\n            note = [\"\"]\n    while len(note) < plen * cnum:\n        note.append(\".\" * width)    \n    formated_print(note)\n    print \"?\""
  },
  {
    "language": "Python",
    "code": "while True:\n    plen = input()\n    if plen == 0:\n        break\n    cnum = input()\n    width = input()\n    space = \"*\" * input()\n    def formated_print(note):\n        for i in xrange(plen):\n            print space.join(note[j*plen+i].ljust(width, \".\") for j in xrange(cnum))\n        print \"#\"\n    note = []\n    line = raw_input()\n    while line != \"?\":\n        if len(note) >= plen * cnum:\n            formated_print(note)\n            note = []\n        if len(line) > width:\n            note.append(line[:width])\n            line = line[width:]\n        else:\n            note.append(line)\n            line = \"\"\n        if line == \"\":\n            line = raw_input()\n    if note:\n        while len(note) < plen * cnum:\n            note.append(\"\")\n        formated_print(note)\n    print \"?\""
  },
  {
    "language": "Rust",
    "code": "use std::ops::DivAssign;\nuse std::ops::MulAssign;\nuse std::ops::SubAssign;\nuse std::collections::BinaryHeap;\nuse std::str::FromStr;\nuse std::collections::HashSet;\nuse std::collections::BTreeMap;\nuse std::fmt::Display;\nuse std::ops::Neg;\nuse std::ops::Div;\nuse std::ops::Mul;\nuse std::ops::Add;\nuse std::ops::{AddAssign, Sub};\nuse std::cmp::max;\nuse std::collections::VecDeque;\nuse std::cmp::min;\nuse std::collections::{HashMap, BTreeSet};\nuse std::cmp::Ordering;\nuse std::fmt::Debug;\n\nfn read_line() -> String {\n    let mut buffer = String::new();\n    std::io::stdin().read_line(&mut buffer).expect(\"No Line\");\n    buffer.trim().to_owned()\n}\nfn read_lines<T: std::str::FromStr>(count: usize) -> Vec<T> {\n    let mut buffer = String::new();\n    let mut vec = Vec::with_capacity(count);\n    for _ in 0 .. count {\n        std::io::stdin().read_line(&mut buffer).expect(\"No Line\");\n        vec.push(buffer.trim().parse().ok().expect(\"Can't Parse\"));\n        buffer.clear();\n    }\n    vec\n}\nfn read_tabulate<R, T: Fn(&str)->R> (count: usize, transformer: T) -> Vec<R> {\n    let mut buffer = String::new();\n    let mut vec = Vec::with_capacity(count);\n    for _ in 0 .. count {\n        std::io::stdin().read_line(&mut buffer).expect(\"No Line\");\n        vec.push(transformer(buffer.trim()));\n        buffer.clear();\n    }\n    vec\n}\nfn read_value<T: std::str::FromStr>() -> T {\n    read_line().trim().parse().ok().unwrap()\n}\nfn read_values<T: std::str::FromStr>() -> Vec<T> {\n    read_line().trim().split_whitespace().map(|x| x.parse().ok().expect(\"Can't Parse\")).collect::<Vec<T>>()\n}\nmacro_rules! freeze {\n    ($($id:ident), *) => {\n        $(let $id = $id;)*\n    };\n}\nmacro_rules! read_map {\n    ($ident: ident: [$block: block; $size: expr]) => {\n        let $ident = (0 .. $size).into_iter().map(|_| $block).collect::<Vec<_>>();\n    };\n    (mut $ident: ident: [$block: block; $size: expr]) => {\n        let mut $ident = (0 .. $size).into_iter().map(|_| $block).collect::<Vec<_>>();\n    };\n}\nmacro_rules! read {\n    (mut $ident: ident: String) => {\n        let mut $ident = read_value::<String>();\n    };\n    ($ident: ident: String) => {\n        let $ident = read_value::<String>();\n    };\n    (mut $ident: ident: [$ty:ty]) => {\n        let mut $ident = read_values::<$ty>();\n    };\n    ($ident: ident: [$ty:ty]) => {\n        let $ident = read_values::<$ty>();\n    };\n    (mut $ident: ident: [[$ty:ty]; $size: expr]) => {\n        let mut $ident = (0 .. $size).into_iter().map(|_| read_values::<$ty>()).collect::<Vec<_>>();\n    };\n    ($ident: ident: [[$ty:ty]; $size: expr]) => {\n        let $ident = (0 .. $size).into_iter().map(|_| read_values::<$ty>()).collect::<Vec<_>>();\n    };\n    (mut $ident: ident: [$ty:ty; $size:expr]) => {\n        let mut $ident = read_lines::<$ty>($size);\n    };\n    ($ident: ident: [$ty:ty; $size:expr]) => {\n        let $ident = read_lines::<$ty>($size);\n    };\n    ($ident: ident: [$block: block; $size: expr]) => {\n        let $ident = (0 .. $size).into_iter().map(|_| $block).collect::<Vec<_>>();\n    };\n    (mut $ident: ident: [$block: block; $size: expr]) => {\n        let mut $ident = (0 .. $size).into_iter().map(|_| $block).collect::<Vec<_>>();\n    };\n    ($($token: tt)*) => {\n        let mut iter = read_values::<String>().into_iter();\n        read_from_iter!(iter; $($token)*);\n    };\n}\nmacro_rules! read_from_iter {\n    ($iter:expr; mut $ident:ident:$ty:ty, $($rest:tt)*) => {\n        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(\"Can't Parse\");\n        read_from_iter!($iter; $($rest)*);\n    };\n    ($iter:expr; $ident:ident:$ty:ty, $($rest:tt)*) => {\n        let $ident = $iter.next().unwrap().parse::<$ty>().expect(\"Can't Parse\");\n        read_from_iter!($iter; $($rest)*);\n    };\n    ($iter:expr; mut $ident:ident:$ty:ty) => {\n        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(\"Can't Parse\");\n    };\n    ($iter:expr; $ident:ident:$ty:ty) => {\n        let $ident = $iter.next().unwrap().parse::<$ty>().expect(\"Can't Parse\");\n    };\n    ($iter: expr; ) => {};\n}\nstruct KeyValue<K, V> {\n    key: K,\n    value: V\n}\nimpl <K: PartialOrd, V> PartialEq for KeyValue<K, V> {\n    fn eq(&self, other: &Self) -> bool {\n        self.key.eq(&other.key)\n    }\n}\nimpl <K: PartialOrd, V> Eq for KeyValue<K, V> {}\nimpl <K: PartialOrd, V> PartialOrd for KeyValue<K, V> {\n    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\n        self.key.partial_cmp(&other.key)\n    }\n}\nimpl <K: PartialOrd, V> Ord for KeyValue<K, V> {\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\n        self.key.partial_cmp(&other.key).ok_or(\"Can't Compare\").unwrap()\n    }\n}\n#[derive(Copy, Clone, Debug)]\nstruct PageConfig {\n    plen: usize, cnum: usize, width: usize, cspace: usize\n}\n#[derive(Copy, Clone, Debug, Default)]\nstruct Cursor {\n    current_page: usize, current_column: usize, current_row: usize, pos: usize\n}\nimpl Cursor {\n    fn succ(&mut self, config: PageConfig) {\n        self.pos += 1;\n        self.normalize(config);\n    }\n    fn succ_newline(&mut self, config: PageConfig) {\n        self.current_row += 1;\n        self.pos = 0;\n        self.normalize(config);\n    }\n    fn normalize(&mut self, config: PageConfig) {\n        if self.pos >= config.width {\n            self.current_row += self.pos / config.width;\n            self.pos %= config.width;\n        }\n        if self.current_row >= config.plen {\n            self.current_column += self.current_row / config.plen;\n            self.current_row %= config.plen;\n        }\n        if self.current_column >= config.cnum {\n            self.current_page += self.current_column / config.cnum;\n            self.current_column %= config.cnum;\n        }\n    }\n}\n#[derive(Clone, Debug)]\nstruct Page {\n    config: PageConfig,\n    lines: Vec<Vec<char>>,\n    cursor: Cursor\n}\nimpl Display for Page {\n    fn fmt<'a>(&self, fmt: &mut std::fmt::Formatter<'a>) -> std::result::Result<(), std::fmt::Error> { \n        self.lines.iter().fold(Ok(()), |fr, line| {\n            match fr {\n                Ok(_) => {\n                    match line.iter().fold(fr, |f, c| {\n                        match f {\n                            Ok(_) => write!(fmt, \"{}\", c),\n                            _ => f\n                        }\n                    }) {\n                        Ok(_) => write!(fmt, \"\\n\"),\n                        n => n\n                    }\n                }\n                _ => fr\n            }\n        })\n     }\n}\nimpl Page {\n    fn new(config: PageConfig) -> Page {\n        Page{config: config, lines: vec![vec!['.'; config.width * config.cnum + (config.cnum - 1) * config.cspace]; config.plen], cursor: Cursor::default()}\n    }\n    fn write<'a>(&mut self, word: &'a str) -> Result<(), &'a str> {\n        if self.cursor.current_page > 0 {return Err(&word); }\n        let mut i = 0;\n        for c in word.chars() {\n            let row = self.cursor.current_row;\n            let column = self.cursor.current_column * (self.config.width + self.config.cspace) + self.cursor.pos;\n            self.lines[row][column] = c;\n            self.cursor.succ(self.config);\n            i += 1;\n            if self.cursor.current_page > 0 && word.len() != i {\n                return Err(&word[i..]);\n            }\n        }\n        if word.len() == 0 || self.cursor.pos > 0 {\n            self.cursor.succ_newline(self.config);\n        }\n        Ok(())\n    }\n}\n#[derive(Clone, Debug)]\nstruct Note {\n    config: PageConfig,\n    pages: Vec<Page>,\n    written_len: usize\n}\nimpl Note {\n    fn new(config: PageConfig) -> Note {\n        Note{config: config, pages: vec![Page::new(config)], written_len: 0}\n    }\n    fn write(&mut self, word: String) {\n        let mut input = &word[..];\n        while let Err(rest) = self.pages.last_mut().unwrap().write(input) {\n            input = rest;\n            self.pages.push(Page::new(self.config));\n        }\n        self.written_len += word.len();\n    }\n}\nimpl Display for Note {\n    fn fmt<'a>(&self, fmt: &mut std::fmt::Formatter<'a>) -> std::result::Result<(), std::fmt::Error> { \n        if self.written_len == 0 {\n            write!(fmt, \"\")\n        }else {\n            write!(fmt, \"{}#\", self.pages.iter().map(|page| page.to_string()).collect::<Vec<_>>().join(\"#\\n\"))\n        }\n     }\n}\n\nfn main() {\n    loop {\n        read!(plen: usize);\n        if plen == 0 {break; }\n        read!(cnum: usize);\n        read!(width: usize);\n        read!(cspace: usize);\n        let mut note = Note::new(PageConfig{plen: plen, cnum: cnum, width: width, cspace: cspace});\n        loop {\n            read!(word: String);\n            if word == \"?\" {break; }\n            note.write(word);\n        }\n        if note.written_len > 0 {\n            println!(\"{}\\n?\", note);\n        }else {\n            println!(\"?\");\n        }\n    }\n}\n"
  }
]