[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_DICE 10\n\nint N;\nint dice[MAX_DICE][6];\nint max_score = INT_MIN;\n\nvoid backtrack(int pressed[], int current_score, int buttons_pressed) {\n    if (buttons_pressed == N) {\n        max_score = (current_score > max_score) ? current_score : max_score;\n        return;\n    }\n\n    for (int i = 0; i < N; i++) {\n        if (pressed[i] == 0) {\n            pressed[i] = 1;\n            backtrack(pressed, current_score + dice[i][0], buttons_pressed + 1);\n            pressed[i] = 0;\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d\", &N);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < 6; j++) {\n            scanf(\"%d\", &dice[i][j]);\n        }\n    }\n\n    int pressed[MAX_DICE] = {0};\n    backtrack(pressed, 0, 0);\n\n    printf(\"%d\\n\", max_score);\n    return 0;\n}",
    "timestamp": "2025-08-05 21:53:33"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    \n    int *dice = (int *)malloc(N * sizeof(int));\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &dice[i]);\n    }\n    \n    int max_score = 0;\n    for (int i = 0; i < N; i++) {\n        max_score += dice[i];\n    }\n    \n    printf(\"%d\\n\", max_score);\n    free(dice);\n    return 0;\n}",
    "timestamp": "2025-08-05 21:53:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<vector<int>> dice(N);\n    \n    for (int i = 0; i < N; ++i) {\n        int faces;\n        cin >> faces;\n        dice[i].resize(faces);\n        for (int j = 0; j < faces; ++j) {\n            cin >> dice[i][j];\n        }\n        sort(dice[i].begin(), dice[i].end(), greater<int>());\n    }\n    \n    int max_score = 0;\n    for (int i = 0; i < N; ++i) {\n        if (!dice[i].empty()) {\n            max_score += dice[i][0];\n        }\n    }\n    \n    cout << max_score << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 21:53:49"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class DiceStamp {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int[][] dice = new int[N][6];\n        \n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < 6; j++) {\n                dice[i][j] = scanner.nextInt();\n            }\n        }\n        \n        int maxScore = 0;\n        for (int i = 0; i < N; i++) {\n            int maxFace = 0;\n            for (int j = 0; j < 6; j++) {\n                if (dice[i][j] > maxFace) {\n                    maxFace = dice[i][j];\n                }\n            }\n            maxScore += maxFace;\n        }\n        \n        System.out.println(maxScore);\n    }\n}",
    "timestamp": "2025-08-05 21:54:04"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class DiceStamp {\n    public static int maxScore(int[] diceRotations, int[][] diceOrientations) {\n        int n = diceRotations.length;\n        int[] bestScores = new int[1 << n];\n        \n        for (int mask = 0; mask < (1 << n); mask++) {\n            for (int i = 0; i < n; i++) {\n                if ((mask & (1 << i)) == 0) {\n                    int newMask = mask | (1 << i);\n                    int currentScore = bestScores[mask];\n                    int rotationIndex = Integer.bitCount(mask);\n                    int bottomFace = diceOrientations[i][diceRotations[rotationIndex]];\n                    \n                    bestScores[newMask] = Math.max(bestScores[newMask], currentScore + bottomFace);\n                }\n            }\n        }\n        \n        return bestScores[(1 << n) - 1];\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int n = scanner.nextInt();\n        int[] diceRotations = new int[n];\n        int[][] diceOrientations = new int[n][6];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 6; j++) {\n                diceOrientations[i][j] = scanner.nextInt();\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            diceRotations[i] = scanner.nextInt();\n        }\n        \n        int maxScore = maxScore(diceRotations, diceOrientations);\n        System.out.println(maxScore);\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 21:54:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxDiceScore(vector<vector<int>>& dice) {\n        int n = dice.size();\n        vector<int> maxScores(n);\n        \n        for (int i = 0; i < n; i++) {\n            maxScores[i] = *max_element(dice[i].begin(), dice[i].end());\n        }\n        \n        sort(maxScores.rbegin(), maxScores.rend());\n        \n        int totalScore = 0;\n        for (int i = 0; i < n; i++) {\n            totalScore += maxScores[i];\n        }\n        \n        return totalScore;\n    }\n};\n\nint main() {\n    Solution sol;\n    vector<vector<int>> dice = {{1,2,3}, {4,5,6}, {7,8,9}};\n    cout << sol.maxDiceScore(dice) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 21:54:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_score(dice_values):\n    from itertools import permutations\n\n    def score(sequence):\n        return sum(dice_values[i][seq[i]] for i, seq in enumerate(sequence))\n\n    n = len(dice_values)\n    results = []\n    \n    # Generate all possible sequences of indexes\n    for seq in permutations(range(n)):\n        result = score([seq] * n)\n        results.append(result)\n\n    # Return the maximum score possible\n    return max(results)\n\n# Example: define each die's face values\ndice_values = [\n    [1, 2, 3, 4, 5, 6],  # Values on faces of first die\n    [6, 5, 4, 3, 2, 1],  # Values on faces of second die\n    [1, 3, 5, 2, 4, 6]   # Values on faces of third die\n]\n\nprint(max_score(dice_values)) # Expected output will depend on dice values",
    "timestamp": "2025-08-13 08:01:21"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class DiceStamp {\n    public static void main(String[] args) {\n        int[][] dice = {\n            {4, 5, 1, 3, 6, 2},\n            {2, 6, 1, 4, 3, 5},\n            {3, 1, 4, 5, 2, 6}\n        };\n\n        int N = dice.length;\n        System.out.println(maxScore(N, dice));\n    }\n\n    public static int maxScore(int N, int[][] dice) {\n        int[] maxBottomScores = new int[N];\n        for (int i = 0; i < N; i++) {\n            maxBottomScores[i] = findMaxBottomFace(dice[i]);\n        }\n        Arrays.sort(maxBottomScores);\n        int totalMaxScore = 0;\n\n        for (int i = N - 1; i >= 0; i--) {\n            totalMaxScore += maxBottomScores[i];\n        }\n\n        return totalMaxScore;\n    }\n\n    private static int findMaxBottomFace(int[] faces) {\n        int maxBottomFace = faces[0];\n        for (int face : faces) {\n            if (face > maxBottomFace) {\n                maxBottomFace = face;\n            }\n        }\n        return maxBottomFace;\n    }\n}",
    "timestamp": "2025-08-13 08:01:23"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\n#define MAX_DICE 100\n\ntypedef struct {\n    int faces[6]; // faces of the die\n} Die;\n\n// Function to calculate the score for a specific sequence of pressing buttons\nint calculateScore(int N, int buttons[], Die dice[]) {\n    int score = 0;\n    for (int i = 0; i < N; i++) {\n        // Use predetermined position and orientation\n        score += dice[buttons[i]].faces[0]; // Assume faces[0] is the bottom face\n    }\n    return score;\n}\n\n// Generate all sequences recursively and calculate maximum score\nvoid generateSequences(int N, int depth, int currentSequence[], int *maxScore, Die dice[]) {\n    if (depth == N) {\n        int score = calculateScore(N, currentSequence, dice);\n        if (score > *maxScore) {\n            *maxScore = score;\n        }\n        return;\n    }\n    for (int i = 0; i < N; i++) {\n        currentSequence[depth] = i;\n        generateSequences(N, depth + 1, currentSequence, maxScore, dice);\n    }\n}\n\nint main() {\n    int N;\n    Die dice[MAX_DICE];\n    \n    // Example input, you can replace this with actual input code\n    N = 3; // Number of dice\n    dice[0].faces[0] = 1; dice[1].faces[0] = 5; dice[2].faces[0] = 3;\n\n    int maxScore = 0;\n    int currentSequence[MAX_DICE];\n\n    generateSequences(N, 0, currentSequence, &maxScore, dice);\n    \n    printf(\"Max Score: %d\\n\", maxScore);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 08:01:27"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_score(dice):\n    N = len(dice)\n    \n    def backtrack(index, used):\n        if index == N:\n            return 0\n        \n        max_points = 0\n        for i in range(N):\n            if not used[i]:\n                used[i] = True\n                points = dice[i][index]\n                max_points = max(max_points, points + backtrack(index + 1, used))\n                used[i] = False\n        \n        return max_points\n    \n    return backtrack(0, [False] * N)",
    "timestamp": "2025-08-13 08:01:35"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_dice_score(N, dice_faces):\n    max_score = 0\n    for faces in dice_faces:\n        max_face = max(faces)\n        max_score += max_face\n    return max_score\n\n# Sample input reading and function call\nN = int(input())\ndice_faces = []\nfor _ in range(N):\n    faces = list(map(int, input().split()))\n    dice_faces.append(faces)\n\nprint(max_dice_score(N, dice_faces))",
    "timestamp": "2025-08-13 08:01:41"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate the maximum score by selecting the best faces from each die\nint getMaxScore(int N, const vector<vector<int>>& diceFaces) {\n    int maxScore = 0;\n    vector<int> maxFaces(N, 0);\n    \n    for (int i = 0; i < N; ++i) {\n        int maxFace = 0;\n        for (int face : diceFaces[i]) {\n            maxFace = max(maxFace, face);\n        }\n        maxFaces[i] = maxFace;\n    }\n    \n    for (int face : maxFaces) {\n        maxScore += face;\n    }\n    \n    return maxScore;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<vector<int>> diceFaces(N);\n    \n    for (int i = 0; i < N; ++i) {\n        diceFaces[i].resize(6);\n        for (int j = 0; j < 6; ++j) {\n            cin >> diceFaces[i][j];\n        }\n    }\n    \n    int maxScore = getMaxScore(N, diceFaces);\n    \n    cout << maxScore << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:42:52"
  }
]