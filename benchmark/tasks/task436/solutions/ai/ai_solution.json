[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_STACK 100\n\nunsigned char stack[MAX_STACK];\nint top = -1;\n\nbool is_empty() {\n    return top == -1;\n}\n\nvoid push(unsigned char val) {\n    stack[++top] = val;\n}\n\nunsigned char pop() {\n    if (is_empty()) {\n        exit(1);\n    }\n    return stack[top--];\n}\n\nbool is_operator(const char* token) {\n    return strcmp(token, \"+\") == 0 || strcmp(token, \"-\") == 0 ||\n           strcmp(token, \"*\") == 0 || strcmp(token, \"/\") == 0;\n}\n\nbool check_division_by_zero(const char* tokens[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char* token = tokens[i];\n        if (is_operator(token)) {\n            if (strcmp(token, \"/\") == 0) {\n                if (is_empty()) return true;\n                unsigned char b = pop();\n                if (b == 0) return true;\n                if (is_empty()) return true;\n                pop();\n                push(1); // dummy value\n            } else {\n                if (is_empty()) return true;\n                pop();\n                if (is_empty()) return true;\n                pop();\n                push(1); // dummy value\n            }\n        } else {\n            unsigned char num = (unsigned char)atoi(token);\n            push(num);\n        }\n    }\n    return false;\n}\n\nint main() {\n    char input[1000];\n    fgets(input, sizeof(input), stdin);\n    input[strcspn(input, \"\\n\")] = '\\0';\n\n    const char* tokens[100];\n    int n = 0;\n    char* token = strtok(input, \" \");\n    while (token != NULL) {\n        tokens[n++] = token;\n        token = strtok(NULL, \" \");\n    }\n\n    if (check_division_by_zero(tokens, n)) {\n        printf(\"division by zero\\n\");\n    } else {\n        printf(\"correct\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:32:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cctype>\n\nusing namespace std;\n\nbool isOperator(const string &token) {\n    return token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\";\n}\n\nbool checkDivisionByZero(const vector<string> &tokens) {\n    stack<unsigned char> st;\n\n    for (const string &token : tokens) {\n        if (isOperator(token)) {\n            if (st.size() < 2) return true; // Invalid expression\n            unsigned char b = st.top(); st.pop();\n            unsigned char a = st.top(); st.pop();\n\n            if (token == \"/\" && b == 0) {\n                return true;\n            }\n\n            unsigned char result;\n            if (token == \"+\") result = a + b;\n            else if (token == \"-\") result = a - b;\n            else if (token == \"*\") result = a * b;\n            else if (token == \"/\") result = a / b;\n\n            st.push(result);\n        } else {\n            int num;\n            istringstream iss(token);\n            iss >> num;\n            st.push(static_cast<unsigned char>(num));\n        }\n    }\n\n    return false;\n}\n\nint main() {\n    string line;\n    getline(cin, line);\n    istringstream iss(line);\n    vector<string> tokens;\n    string token;\n\n    while (iss >> token) {\n        tokens.push_back(token);\n    }\n\n    if (checkDivisionByZero(tokens)) {\n        cout << \"division by zero\" << endl;\n    } else {\n        cout << \"correct\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:32:25"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Stack;\nimport java.util.Scanner;\n\npublic class ZeroDivisionChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] tokens = scanner.nextLine().split(\" \");\n        Stack<Integer> stack = new Stack<>();\n\n        for (String token : tokens) {\n            if (isOperator(token)) {\n                if (stack.size() < 2) {\n                    System.out.println(\"Error\");\n                    return;\n                }\n                int b = stack.pop();\n                int a = stack.pop();\n                if (token.equals(\"/\") && b == 0) {\n                    System.out.println(\"Error\");\n                    return;\n                }\n                int result = calculate(a, b, token);\n                stack.push(result);\n            } else {\n                try {\n                    int num = Integer.parseInt(token);\n                    stack.push(num & 0xFF);\n                } catch (NumberFormatException e) {\n                    System.out.println(\"Error\");\n                    return;\n                }\n            }\n        }\n\n        if (stack.size() != 1) {\n            System.out.println(\"Error\");\n        } else {\n            System.out.println(\"Correct\");\n        }\n    }\n\n    private static boolean isOperator(String token) {\n        return token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\");\n    }\n\n    private static int calculate(int a, int b, String op) {\n        switch (op) {\n            case \"+\": return (a + b) & 0xFF;\n            case \"-\": return (a - b) & 0xFF;\n            case \"*\": return (a * b) & 0xFF;\n            case \"/\": return (a / b) & 0xFF;\n            default: return 0;\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:32:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ZeroDivisionChecker {\n    public static boolean checkExpression(String[] tokens) {\n        Stack<Integer> stack = new Stack<>();\n        \n        for (String token : tokens) {\n            if (isOperator(token)) {\n                if (stack.size() < 2) return false;\n                \n                int b = stack.pop();\n                int a = stack.pop();\n                \n                switch (token) {\n                    case \"+\":\n                        stack.push((a + b) & 0xFF);\n                        break;\n                    case \"-\":\n                        stack.push((a - b) & 0xFF);\n                        break;\n                    case \"*\":\n                        stack.push((a * b) & 0xFF);\n                        break;\n                    case \"/\":\n                        if (b == 0) return true;\n                        stack.push((a / b) & 0xFF);\n                        break;\n                }\n            } else {\n                stack.push(Integer.parseInt(token));\n            }\n        }\n        \n        return false;\n    }\n    \n    private static boolean isOperator(String token) {\n        return token.equals(\"+\") || token.equals(\"-\") || \n               token.equals(\"*\") || token.equals(\"/\");\n    }\n}",
    "timestamp": "2025-08-05 21:32:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define MAX_STACK_SIZE 100\n\ntypedef struct {\n    int items[MAX_STACK_SIZE];\n    int top;\n} Stack;\n\nvoid initStack(Stack *s) {\n    s->top = -1;\n}\n\nvoid push(Stack *s, int value) {\n    s->items[++(s->top)] = value;\n}\n\nint pop(Stack *s) {\n    return s->items[(s->top)--];\n}\n\nbool checkExpression(char *expr) {\n    Stack stack;\n    initStack(&stack);\n\n    for (int i = 0; expr[i] != '\\0'; i++) {\n        if (expr[i] >= '0' && expr[i] <= '9') {\n            push(&stack, expr[i] - '0');\n        } else {\n            if (stack.top < 1) return false;\n\n            int b = pop(&stack);\n            int a = pop(&stack);\n\n            switch (expr[i]) {\n                case '+':\n                    push(&stack, (a + b) % 256);\n                    break;\n                case '-':\n                    push(&stack, (a - b + 256) % 256);\n                    break;\n                case '*':\n                    push(&stack, (a * b) % 256);\n                    break;\n                case '/':\n                    if (b == 0) return false;\n                    push(&stack, a / b);\n                    break;\n            }\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    char expr[MAX_STACK_SIZE];\n    scanf(\"%s\", expr);\n    \n    printf(\"%s\\n\", checkExpression(expr) ? \"OK\" : \"NG\");\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:32:52"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <vector>\n#include <string>\n#include <sstream>\n\nbool checkZeroDivision(const std::string& expression) {\n    std::stack<int> st;\n    std::istringstream iss(expression);\n    std::string token;\n\n    while (iss >> token) {\n        if (token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\") {\n            if (st.size() < 2) return false;\n            \n            int b = st.top(); st.pop();\n            int a = st.top(); st.pop();\n            \n            if (token == \"/\" && b == 0) return true;\n            \n            int result;\n            if (token == \"+\") result = (a + b) % 256;\n            else if (token == \"-\") result = (a - b + 256) % 256;\n            else if (token == \"*\") result = (a * b) % 256;\n            else result = (a / b) % 256;\n            \n            st.push(result);\n        } else {\n            st.push(std::stoi(token));\n        }\n    }\n    \n    return false;\n}\n\nint main() {\n    std::string expression;\n    std::getline(std::cin, expression);\n    \n    std::cout << (checkZeroDivision(expression) ? \"Yes\" : \"No\") << std::endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:32:57"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_zero_division_possible(expr: str) -> bool:\n    tokens = expr.split()\n    stack = []\n    \n    for token in tokens:\n        if token.isdigit():\n            stack.append(int(token))\n        else:\n            if len(stack) < 2:\n                return True\n            \n            b = stack.pop()\n            a = stack.pop()\n            \n            if token == '/':\n                if b == 0:\n                    return True\n                stack.append(a // b)\n            elif token == '+':\n                stack.append((a + b) % 256)\n            elif token == '-':\n                stack.append((a - b) % 256)\n            elif token == '*':\n                stack.append((a * b) % 256)\n    \n    return False",
    "timestamp": "2025-08-13 07:00:09"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class ZeroDivisionChecker {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String expression = scanner.nextLine();\n        scanner.close();\n\n        if (isExpressionInvalid(expression)) {\n            System.out.println(\"ERROR\");\n        } else {\n            System.out.println(\"OK\");\n        }\n    }\n\n    private static boolean isExpressionInvalid(String expression) {\n        Stack<Integer> stack = new Stack<>();\n        String[] tokens = expression.split(\"\\\\s+\");\n\n        for (String token : tokens) {\n            if (isNumber(token)) {\n                int number = Integer.parseInt(token);\n                stack.push(number & 0xFF); // Mask to 8-bit unsigned\n            } else if (isOperator(token)) {\n                if (stack.size() < 2) {\n                    return true; // Not enough operands\n                }\n                int b = stack.pop();\n                int a = stack.pop();\n\n                if (token.equals(\"/\") && b == 0) {\n                    return true; // Division by zero\n                }\n\n                int result = operate(a, b, token);\n                stack.push(result & 0xFF); // Mask to 8-bit unsigned\n            } else {\n                return true; // Invalid token\n            }\n        }\n\n        return stack.size() != 1; // Expression should result in a single value\n    }\n\n    private static boolean isNumber(String token) {\n        try {\n            Integer.parseInt(token);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private static boolean isOperator(String token) {\n        return token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\");\n    }\n\n    private static int operate(int a, int b, String operator) {\n        switch (operator) {\n            case \"+\":\n                return a + b;\n            case \"-\":\n                return a - b;\n            case \"*\":\n                return a * b;\n            case \"/\":\n                return b == 0 ? 0 : a / b; // Avoid division by zero (handled earlier)\n            default:\n                throw new IllegalArgumentException(\"Unknown operator: \" + operator);\n        }\n    }\n}",
    "timestamp": "2025-08-13 07:00:13"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define STACK_SIZE 100\n\nint check_division_by_zero(const char *expression) {\n    int stack[STACK_SIZE];\n    int top = -1;\n\n    char *token = strtok((char *)expression, \" \");\n    while (token != NULL) {\n        if (isdigit(token[0])) {\n            stack[++top] = atoi(token);\n        } else {\n            if (top < 1) {\n                return 1; // Invalid if there are not enough operands\n            }\n            int b = stack[top--];\n            int a = stack[top--];\n\n            if (token[0] == '/') {\n                if (b == 0) {\n                    return 1; // Division by zero detected\n                }\n                stack[++top] = a / b;\n            } else if (token[0] == '+') {\n                stack[++top] = (a + b) & 0xFF;\n            } else if (token[0] == '-') {\n                stack[++top] = (a - b) & 0xFF;\n            } else if (token[0] == '*') {\n                stack[++top] = (a * b) & 0xFF;\n            } else {\n                return 1; // Invalid operation\n            }\n        }\n        token = strtok(NULL, \" \");\n    }\n    return 0;\n}\n\nint main() {\n    char expression[256];\n    printf(\"Enter expression in RPN: \");\n    fgets(expression, sizeof(expression), stdin);\n    expression[strcspn(expression, \"\\n\")] = '\\0';\n\n    if (check_division_by_zero(expression)) {\n        printf(\"Incorrect expression: Division by zero detected.\\n\");\n    } else {\n        printf(\"Expression is correct.\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 07:00:17"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_safe_expression(expression):\n    stack = []\n    \n    for token in expression:\n        if isinstance(token, int):\n            stack.append(token)\n        else:\n            if len(stack) < 2:\n                return False\n            \n            b = stack.pop()\n            a = stack.pop()\n            \n            if token == '/':\n                if b == 0:\n                    return False\n                result = a // b\n            elif token == '+':\n                result = a + b\n            elif token == '-':\n                result = a - b\n            elif token == '*':\n                result = a * b\n            \n            result %= 256\n            stack.append(result)\n    \n    return True\n\n# Example usage\nprint(is_safe_expression([3, 2, '/']))  # True\nprint(is_safe_expression([3, 0, '/']))  # False",
    "timestamp": "2025-08-13 07:00:34"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_division_by_zero_possible(expression):\n    stack = []\n    for token in expression.split():\n        if token in '+-*/':\n            if len(stack) < 2:\n                return True  # Invalid expression, but problem says to check division by zero\n            b = stack.pop()\n            a = stack.pop()\n            if token == '/' and b == 0:\n                return True\n            # Simulate the operation (though exact result isn't needed except for division by zero)\n            if token == '+':\n                res = (a + b) % 256\n            elif token == '-':\n                res = (a - b) % 256\n            elif token == '*':\n                res = (a * b) % 256\n            elif token == '/':\n                res = (a // b) % 256 if b != 0 else 0\n            stack.append(res)\n        else:\n            stack.append(int(token) % 256)\n    return False",
    "timestamp": "2025-08-13 07:00:43"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <stack>\n#include <sstream>\n#include <vector>\n#include <string>\n\nbool checkDivisionByZero(const std::string &exp) {\n    std::stack<int> stack;\n    std::istringstream ss(exp);\n    std::string token;\n    int a, b;\n\n    while (ss >> token) {\n        if (token == \"+\") {\n            if (stack.size() < 2) return false;\n            b = stack.top(); stack.pop();\n            a = stack.top(); stack.pop();\n            stack.push((a + b) & 0xFF);\n        } else if (token == \"-\") {\n            if (stack.size() < 2) return false;\n            b = stack.top(); stack.pop();\n            a = stack.top(); stack.pop();\n            stack.push((a - b) & 0xFF);\n        } else if (token == \"*\") {\n            if (stack.size() < 2) return false;\n            b = stack.top(); stack.pop();\n            a = stack.top(); stack.pop();\n            stack.push((a * b) & 0xFF);\n        } else if (token == \"/\") {\n            if (stack.size() < 2) return false;\n            b = stack.top(); stack.pop();\n            a = stack.top(); stack.pop();\n            if (b == 0) return true;\n            stack.push((a / b) & 0xFF);\n        } else {\n            stack.push(std::stoi(token));\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<std::string> expressions = {\n        \"8 0 /\",\n        \"16 4 / 2 +\",\n        \"10 20 + 5 /\",\n        \"6 3 * 6 0 / +\",\n        \"5 5 + 10 * 255 + 1 +\"\n    };\n\n    for (const auto& exp : expressions) {\n        if (checkDivisionByZero(exp)) {\n            std::cout << \"Expression \\\"\" << exp << \"\\\" may result in division by zero.\\n\";\n        } else {\n            std::cout << \"Expression \\\"\" << exp << \"\\\" is safe.\\n\";\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:35:17"
  }
]