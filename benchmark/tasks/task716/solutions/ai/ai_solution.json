[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nbool ask_red_more(int* balls, int start, int count) {\n    int red_count = 0;\n    for (int i = start; i < start + count; i++) {\n        if (balls[i] == 1) red_count++;\n    }\n    return red_count > count / 2;\n}\n\nvoid solve(int N) {\n    int* balls = calloc(2*N, sizeof(int));\n    \n    // First guess the global red/blue ratio\n    bool global_red_more = ask_red_more(balls, 0, 2*N);\n    \n    // Divide and conquer with binary search\n    int left = 0, right = 2*N - 1;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        bool left_red_more = ask_red_more(balls, left, mid - left + 1);\n        bool right_red_more = ask_red_more(balls, mid + 1, right - mid);\n        \n        if (left_red_more != right_red_more) {\n            // One side has more red, find the boundary\n            if (left_red_more) {\n                // More red on left\n                balls[mid] = 1;\n                right = mid - 1;\n            } else {\n                // More red on right\n                balls[mid] = 2;\n                left = mid + 1;\n            }\n        } else {\n            // Both sides have same color distribution\n            if (global_red_more) {\n                balls[mid] = 1;\n                right = mid - 1;\n            } else {\n                balls[mid] = 2;\n                left = mid + 1;\n            }\n        }\n    }\n    \n    // Print the results\n    for (int i = 0; i < 2*N; i++) {\n        printf(\"%d\", balls[i]);\n    }\n    printf(\"\\n\");\n    \n    free(balls);\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    solve(N);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:41:02"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    \n    char *colors = (char *)malloc((2 * N + 1) * sizeof(char));\n    for (int i = 1; i <= 2 * N; i++) {\n        colors[i] = '?';\n    }\n    \n    for (int i = 1; i <= N; i++) {\n        printf(\"? %d\", i);\n        for (int j = 1; j < N; j++) {\n            printf(\" %d\", (i + j - 1) % (2 * N) + 1);\n        }\n        printf(\"\\n\");\n        fflush(stdout);\n        \n        char response[10];\n        scanf(\"%s\", response);\n        if (response[0] == 'R') {\n            colors[i] = 'R';\n        } else {\n            colors[i] = 'B';\n        }\n    }\n    \n    for (int i = N + 1; i <= 2 * N; i++) {\n        int red = 0, blue = 0;\n        for (int j = 1; j < N; j++) {\n            int pos = (i - j + 2 * N - 1) % (2 * N) + 1;\n            if (colors[pos] == 'R') red++;\n            else if (colors[pos] == 'B') blue++;\n        }\n        if (red > blue) colors[i] = 'B';\n        else colors[i] = 'R';\n    }\n    \n    printf(\"! \");\n    for (int i = 1; i <= 2 * N; i++) {\n        printf(\"%c\", colors[i]);\n    }\n    printf(\"\\n\");\n    fflush(stdout);\n    \n    free(colors);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:41:21"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint ask(int l, int r) {\n    cout << \"? \" << l << \" \" << r << endl;\n    int res;\n    cin >> res;\n    return res;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<char> color(2 * N + 1);\n    \n    // Determine the color of the first and last ball\n    int first = ask(1, N);\n    int last = ask(N + 1, 2 * N);\n    \n    if (first == 1) {\n        color[1] = 'R';\n        color[N] = 'B';\n    } else {\n        color[1] = 'B';\n        color[N] = 'R';\n    }\n    \n    if (last == 1) {\n        color[N + 1] = 'R';\n        color[2 * N] = 'B';\n    } else {\n        color[N + 1] = 'B';\n        color[2 * N] = 'R';\n    }\n    \n    // Determine the colors of the remaining balls\n    for (int i = 2; i < N; ++i) {\n        int res = ask(i, i + N - 1);\n        if (res == 1) {\n            color[i] = 'R';\n            color[i + N - 1] = 'B';\n        } else {\n            color[i] = 'B';\n            color[i + N - 1] = 'R';\n        }\n    }\n    \n    for (int i = N + 2; i < 2 * N; ++i) {\n        int res = ask(i - N + 1, i);\n        if (res == 1) {\n            color[i - N + 1] = 'R';\n            color[i] = 'B';\n        } else {\n            color[i - N + 1] = 'B';\n            color[i] = 'R';\n        }\n    }\n    \n    cout << \"! \";\n    for (int i = 1; i <= 2 * N; ++i) {\n        cout << color[i];\n    }\n    cout << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:41:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class BallColorGuessing {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int[] color = new int[2 * N + 1]; // 1-based indexing\n\n        for (int i = 1; i <= N; i++) {\n            System.out.println(\"? \" + i + \" \" + (i + N - 1));\n            System.out.flush();\n            int response = scanner.nextInt();\n            color[i] = response;\n        }\n\n        int[] result = new int[2 * N + 1];\n        for (int i = 1; i <= N; i++) {\n            int next = i + 1;\n            if (next > N) next = 1;\n            if (color[i] == color[next]) {\n                result[i] = color[i];\n                result[i + N] = 1 - color[i];\n            } else {\n                System.out.println(\"? \" + i + \" \" + (i + N));\n                System.out.flush();\n                int response = scanner.nextInt();\n                result[i] = response;\n                result[i + N] = 1 - response;\n                for (int j = 1; j <= 2 * N; j++) {\n                    if (j != i && j != i + N) {\n                        if (j >= i && j < i + N) {\n                            result[j] = color[i];\n                        } else {\n                            result[j] = 1 - color[i];\n                        }\n                    }\n                }\n                break;\n            }\n        }\n\n        System.out.print(\"! \");\n        for (int i = 1; i <= 2 * N; i++) {\n            System.out.print(result[i] == 1 ? \"R\" : \"B\");\n        }\n        System.out.println();\n        System.out.flush();\n    }\n}",
    "timestamp": "2025-08-05 22:42:00"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class BallColorGuessing {\n    private static int N;\n    private static int[] ballColors;\n    private static Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        N = scanner.nextInt();\n        ballColors = new int[2 * N];\n        solve();\n        printResult();\n    }\n\n    private static void solve() {\n        List<Integer> unknownBalls = new ArrayList<>();\n        for (int i = 0; i < 2 * N; i++) {\n            unknownBalls.add(i);\n        }\n\n        while (!unknownBalls.isEmpty()) {\n            int groupSize = Math.min(N, unknownBalls.size());\n            List<Integer> currentGroup = unknownBalls.subList(0, groupSize);\n\n            boolean moreRed = askQuestion(currentGroup);\n\n            if (moreRed) {\n                assignColors(currentGroup, true);\n            } else {\n                assignColors(currentGroup, false);\n            }\n\n            unknownBalls = unknownBalls.subList(groupSize, unknownBalls.size());\n        }\n    }\n\n    private static boolean askQuestion(List<Integer> group) {\n        System.out.print(\"? \");\n        for (int ball : group) {\n            System.out.print((ball + 1) + \" \");\n        }\n        System.out.println();\n        return scanner.nextInt() == 1;\n    }\n\n    private static void assignColors(List<Integer> group, boolean moreRed) {\n        int redCount = moreRed ? (group.size() + 1) / 2 : group.size() / 2;\n        int blueCount = group.size() - redCount;\n\n        for (int i = 0; i < group.size(); i++) {\n            int ball = group.get(i);\n            if (i < redCount) {\n                ballColors[ball] = 1;  // Red\n            } else {\n                ballColors[ball] = 2;  // Blue\n            }\n        }\n    }\n\n    private static void printResult() {\n        System.out.print(\"! \");\n        for (int color : ballColors) {\n            System.out.print(color + \" \");\n        }\n        System.out.println();\n    }\n}",
    "timestamp": "2025-08-05 22:42:08"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<int> colors(2*N);\n    vector<bool> asked(2*N, false);\n    int red_count = N, blue_count = N;\n    \n    for (int round = 0; round < N; round++) {\n        vector<int> uncolored;\n        for (int i = 0; i < 2*N; i++) {\n            if (!asked[i]) {\n                uncolored.push_back(i);\n            }\n        }\n        \n        vector<int> group1, group2;\n        for (int i = 0; i < uncolored.size(); i++) {\n            if (i < uncolored.size()/2) {\n                group1.push_back(uncolored[i]);\n            } else {\n                group2.push_back(uncolored[i]);\n            }\n        }\n        \n        cout << \"Are there more red balls than blue balls among these \" \n             << group1.size() << \" chosen balls?\" << endl;\n        \n        string response;\n        cin >> response;\n        \n        bool more_red = (response == \"YES\");\n        \n        for (int ball : group1) {\n            asked[ball] = true;\n            if (more_red) {\n                colors[ball] = (red_count > 0) ? 1 : 2;\n                if (colors[ball] == 1) red_count--;\n                else blue_count--;\n            } else {\n                colors[ball] = (blue_count > 0) ? 2 : 1;\n                if (colors[ball] == 2) blue_count--;\n                else red_count--;\n            }\n        }\n        \n        for (int ball : group2) {\n            asked[ball] = true;\n            if (more_red) {\n                colors[ball] = (blue_count > 0) ? 2 : 1;\n                if (colors[ball] == 2) blue_count--;\n                else red_count--;\n            } else {\n                colors[ball] = (red_count > 0) ? 1 : 2;\n                if (colors[ball] == 1) red_count--;\n                else blue_count--;\n            }\n        }\n    }\n    \n    for (int i = 0; i < 2*N; i++) {\n        cout << colors[i];\n    }\n    cout << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:42:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    def query(chosen_indices):\n        print(\"?\", len(chosen_indices), *chosen_indices)\n        sys.stdout.flush()\n        return input().strip() == \"RED\"\n\n    def print_answer(answers):\n        print(\"!\", *answers)\n        sys.stdout.flush()\n\n    N = int(input().strip())\n\n    colors = [None] * (2 * N)\n    \n    # Guess colors\n    for i in range(2 * N):\n        if colors[i] is None:\n            # Try to determine color of ball i\n            chosen_indices = [j + 1 for j in range(2 * N) if colors[j] is None and j != i]\n            is_red = query(chosen_indices[:N])\n            colors[i] = \"RED\" if is_red else \"BLUE\"\n\n    # Output the result\n    print_answer(colors)\n\nsolve()",
    "timestamp": "2025-08-13 12:08:51"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\nimport java.util.Random;\n\npublic class BallGuesser {\n\n    private static Scanner scanner = new Scanner(System.in);\n    private static Random random = new Random();\n\n    public static void main(String[] args) {\n        int N = scanner.nextInt();\n        int[] colors = new int[2 * N]; // 0 for unknown, 1 for red, -1 for blue\n        int redCount = 0;\n        int blueCount = 0;\n\n        // Filling initial random guess\n        for (int i = 0; i < 2 * N; i++) {\n            colors[i] = (random.nextBoolean() ? 1 : -1);\n            if (colors[i] == 1) redCount++;\n            else blueCount++;\n        }\n\n        for (int question = 0; question < 210; question++) {\n            if (checkCompletion(colors, N)) break;\n\n            int[] pick = makeQuestion(colors, N);\n            int redsInPick = 0;\n            \n            for (int value : pick) {\n                if (colors[value] == 1) redsInPick++;\n            }\n\n            System.out.println(\"? \" + formatPick(pick));\n            System.out.flush();\n            \n            String answer = scanner.next().trim();\n            boolean moreReds = answer.equals(\"YES\");\n            finalizeQuestion(colors, pick, redsInPick, moreReds);\n        }\n\n        printResult(colors);\n    }\n\n    private static boolean checkCompletion(int[] colors, int N) {\n        int redCount = 0, blueCount = 0;\n        for (int color : colors) {\n            if (color == 1) redCount++;\n            else if (color == -1) blueCount++;\n        }\n        return redCount == N && blueCount == N;\n    }\n\n    private static int[] makeQuestion(int[] colors, int N) {\n        int[] pick = new int[N];\n        int index = 0;\n        \n        for (int i = 0; i < colors.length && index < N; i++) {\n            if (colors[i] == 0 || random.nextBoolean()) {\n                pick[index++] = i;\n            }\n        }\n        \n        return pick;\n    }\n\n    private static String formatPick(int[] pick) {\n        StringBuilder sb = new StringBuilder();\n        for (int idx : pick) {\n            sb.append(idx + 1).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    private static void finalizeQuestion(int[] colors, int[] pick, int redsInPick, boolean moreReds) {\n        int bluesInPick = pick.length - redsInPick;\n\n        if (moreReds) { // More reds than blues\n            for (int i : pick) {\n                if (colors[i] == 0) {\n                    colors[i] = 1;\n                    redsInPick++;\n                    bluesInPick--;\n                }\n            }\n        } else { // More blues than reds or equal\n            for (int i : pick) {\n                if (colors[i] == 0) {\n                    colors[i] = -1;\n                    bluesInPick++;\n                    redsInPick--;\n                }\n            }\n        }\n    }\n\n    private static void printResult(int[] colors) {\n        StringBuilder sb = new StringBuilder(\"!\");\n        for (int color : colors) {\n            if (color == 1) sb.append(\" R\");\n            else sb.append(\" B\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n}",
    "timestamp": "2025-08-13 12:09:13"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n\n    int colors[2 * N];  // 0 for unknown, 1 for red, 2 for blue\n    int guessed_reds = 0, guessed_blues = 0;\n\n    for (int i = 0; i < 2 * N; ++i) {\n        colors[i] = 0;\n    }\n\n    int question_remain = 210;\n\n    while (guessed_reds < N || guessed_blues < N) {\n        int chosen_indices[N];\n        int unknown_count = 0, known_red_count = 0, known_blue_count = 0;\n\n        for (int i = 0, j = 0; i < 2 * N && j < N; ++i) {\n            if (colors[i] == 0) {\n                chosen_indices[j++] = i;\n                unknown_count++;\n            } else if (colors[i] == 1) {\n                known_red_count++;\n            } else {\n                known_blue_count++;\n            }\n        }\n\n        // Query: Are there more red balls than blue balls among these N chosen balls?\n        int response;\n        printf(\"? \");\n        for (int i = 0; i < N; ++i) {\n            printf(\"%d \", chosen_indices[i] + 1);\n        }\n        printf(\"\\n\");\n        fflush(stdout);\n\n        scanf(\"%d\", &response);\n\n        if (response == 1) {\n            guessed_reds++;\n            colors[chosen_indices[0]] = 1;  // Assume the first is red\n        } else {\n            guessed_blues++;\n            colors[chosen_indices[0]] = 2;  // Assume the first is blue\n        }\n\n        question_remain--;\n        if (question_remain <= 0) break;\n    }\n\n    // Output the final guess\n    printf(\"! \");\n    for (int i = 0; i < 2 * N; ++i) {\n        if (colors[i] == 1)\n            printf(\"R \");\n        else\n            printf(\"B \");\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "timestamp": "2025-08-13 12:09:19"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function solve(N) {\n    const colors = Array(2 * N).fill(null);\n    let redCount = 0;\n    let blueCount = 0;\n\n    function ask(indices) {\n        // Simulate the interactive problem for demonstration purposes.\n        let redBallsInChosen = indices.filter(i => colors[i] === 'R').length;\n        let blueBallsInChosen = indices.filter(i => colors[i] === 'B').length;\n        return redBallsInChosen > blueBallsInChosen;\n    }\n\n    function binarySearch(start, end, redLimit, blueLimit) {\n        if (start > end) return;\n\n        // Ask about the first N balls in this segment\n        const half = Math.floor((start + end) / 2);\n        let chosenIndices = [];\n        for (let i = start; i <= start + N - 1; i++) {\n            chosenIndices.push(i % (2 * N));\n        }\n        const moreRed = ask(chosenIndices);\n\n        // Based on the result, update the color information\n        if (moreRed) {\n            for (let i = half + 1; i <= end; i++) {\n                colors[i] = 'B';\n                blueCount++;\n            }\n            for (let i = start; i <= half; i++) {\n                colors[i] = 'R';\n                redCount++;\n            }\n        } else {\n            for (let i = half + 1; i <= end; i++) {\n                colors[i] = 'R';\n                redCount++;\n            }\n            for (let i = start; i <= half; i++) {\n                colors[i] = 'B';\n                blueCount++;\n            }\n        }\n\n        if (redCount < N) {\n            binarySearch(half + 1, end, redLimit, blueLimit);\n        }\n        if (blueCount < N && start <= half) {\n            binarySearch(start, half, redLimit, blueLimit);\n        }\n    }\n\n    binarySearch(0, 2 * N - 1, N, N);\n\n    // Final guess based on colors array\n    for (let i = 0; i < 2 * N; i++) {\n        console.log(`Ball ${i + 1}: ${colors[i]}`);\n    }\n}\n\n// Example input: N = 3\nsolve(3);",
    "timestamp": "2025-08-13 12:09:24"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve(N):\n    def query(balls):\n        print(f\"? {' '.join(map(str, balls))}\")\n        return input().strip() == \"Yes\"\n\n    # Initialize ball colors\n    colors = [None] * (2*N)\n    \n    # Divide balls into N groups of 2\n    for i in range(N):\n        group = [2*i+1, 2*i+2]\n        \n        # If query returns true, first ball is red, second is blue\n        if query(group):\n            colors[2*i] = 'R'\n            colors[2*i+1] = 'B'\n        else:\n            colors[2*i] = 'B'\n            colors[2*i+1] = 'R'\n    \n    # Output results\n    print(\"!\", end=\" \")\n    for color in colors:\n        print(color, end=\"\")\n    print()\n\n# Read input N\nN = int(input())\nsolve(N)",
    "timestamp": "2025-08-13 12:09:29"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function solve(N) {\n    const allBalls = Array(2*N).fill(0);\n    const questions = [];\n    const subset = Array(N).fill(0).map((_, i) => i);\n\n    function askQuestion(subset) {\n        const redCount = subset.filter(idx => allBalls[idx] === 1).length;\n        const blueCount = subset.filter(idx => allBalls[idx] === -1).length;\n        questions.push(subset);\n        return redCount > blueCount;\n    }\n\n    function colorBalls() {\n        for (let round = 0; round < N; round++) {\n            const remainingSet = Array(2*N).fill(0).map((_, i) => i)\n                .filter(idx => allBalls[idx] === 0);\n\n            if (remainingSet.length <= N) {\n                remainingSet.forEach((idx, index) => {\n                    allBalls[idx] = (index < N/2) ? 1 : -1;\n                });\n                break;\n            }\n\n            const chosenSubset = remainingSet.slice(0, N);\n            const hasMoreRed = askQuestion(chosenSubset);\n\n            if (hasMoreRed) {\n                chosenSubset.forEach(idx => {\n                    if (allBalls[idx] === 0) allBalls[idx] = 1;\n                });\n            } else {\n                chosenSubset.forEach(idx => {\n                    if (allBalls[idx] === 0) allBalls[idx] = -1;\n                });\n            }\n        }\n    }\n\n    colorBalls();\n    const result = allBalls.map(ball => ball === 1 ? 'R' : 'B').join('');\n    console.log(result);\n    return result;\n}",
    "timestamp": "2025-08-13 12:09:37"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    N = int(input())\n    color = [None] * (2 * N + 1)  # 1-based indexing\n    \n    # We'll use the first N balls to determine their majority color\n    # Since N is odd, majority is well-defined\n    \n    # Ask about the first N balls\n    print(f\"? {' '.join(map(str, range(1, N+1)))}\", flush=True)\n    response = input().strip()\n    majority_first_N = 1 if response == 'Red' else 0  # 1 for Red, 0 for Blue\n    \n    # Assign the first N balls based on majority\n    for i in range(1, N+1):\n        color[i] = majority_first_N\n    \n    # Now, for each ball in N+1 to 2N, we can compare it with the first N-1 balls\n    # by forming a group of N balls: the new ball + first N-1 balls\n    first_N_minus_1 = list(range(1, N))\n    \n    for i in range(N+1, 2*N+1):\n        group = first_N_minus_1 + [i]\n        print(f\"? {' '.join(map(str, group))}\", flush=True)\n        response = input().strip()\n        current_majority = 1 if response == 'Red' else 0\n        # The new ball's color is same as current_majority if first N-1 had majority_first_N\n        # Because (N-1 is even, so adding the new ball changes majority only if it's different)\n        # So, if current_majority == majority_first_N, then the new ball is majority_first_N\n        # Else, it's the opposite\n        if current_majority == majority_first_N:\n            color[i] = majority_first_N\n        else:\n            color[i] = 1 - majority_first_N\n    \n    # Now, determine the color of the Nth ball\n    # We can form a group with balls N+1 to 2N (total N balls)\n    group = list(range(N+1, 2*N+1))\n    print(f\"? {' '.join(map(str, group))}\", flush=True)\n    response = input().strip()\n    majority_last_N = 1 if response == 'Red' else 0\n    \n    # The majority of last N should match the majority of the balls N+1 to 2N\n    # But we already assigned those based on first N-1, so the Nth ball must adjust to make the entire set have N red and N blue\n    # Count the number of red and blue in N+1 to 2N\n    red_count = sum(color[N+1:2*N+1])\n    blue_count = N - red_count\n    # The total red must be N, so red in first N-1 is (majority_first_N * (N-1))\n    red_first_N_minus_1 = majority_first_N * (N - 1)\n    # So, color[N] must be (N - red_first_N_minus_1 - red_count)\n    required_red = N\n    color[N] = 1 if (red_first_N_minus_1 + red_count) < required_red else 0\n    \n    # Prepare the answer\n    answer = []\n    for i in range(1, 2*N+1):\n        answer.append('R' if color[i] == 1 else 'B')\n    print(\"! \" + ''.join(answer), flush=True)\n\nsolve()",
    "timestamp": "2025-08-13 12:09:56"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "const readline = require('readline');\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nasync function solve() {\n    const N = parseInt(await question('Enter N: '));\n    const totalBalls = 2 * N;\n    const colors = new Array(totalBalls + 1).fill(null); // 1-based indexing\n\n    // Function to ask a question and get the answer\n    async function askQuestion(balls) {\n        console.log(`? ${balls.join(' ')}`);\n        const answer = await question('');\n        return answer.trim() === 'YES';\n    }\n\n    // Function to determine the color of a ball based on majority\n    async function determineColor(ball) {\n        // We'll use a set of N balls including 'ball' and N-1 known balls\n        let knownBalls = [];\n        let unknownBalls = [];\n        for (let i = 1; i <= totalBalls; i++) {\n            if (i !== ball) {\n                if (colors[i] !== null) {\n                    knownBalls.push(i);\n                } else {\n                    unknownBalls.push(i);\n                }\n            }\n        }\n\n        // We need N-1 known balls to form a query of N balls (including 'ball')\n        while (knownBalls.length < N - 1 && unknownBalls.length > 0) {\n            const nextUnknown = unknownBalls.pop();\n            await determineColor(nextUnknown);\n            if (colors[nextUnknown] !== null) {\n                knownBalls.push(nextUnknown);\n            }\n        }\n\n        if (knownBalls.length < N - 1) {\n            // Not enough known balls, make an educated guess\n            // This is a fallback and may not be perfect\n            colors[ball] = 'R';\n            return;\n        }\n\n        const queryBalls = [ball, ...knownBalls.slice(0, N - 1)];\n        const hasMoreRed = await askQuestion(queryBalls);\n\n        // Count known reds in the query (excluding 'ball')\n        let redCount = 0;\n        for (const b of queryBalls.slice(1)) {\n            if (colors[b] === 'R') redCount++;\n        }\n\n        if (hasMoreRed) {\n            // redCount + (ball is R ? 1 : 0) > N/2\n            colors[ball] = (redCount > (N - 1) / 2) ? 'B' : 'R';\n        } else {\n            // redCount + (ball is R ? 1 : 0) <= N/2\n            colors[ball] = (redCount <= (N - 1) / 2) ? 'R' : 'B';\n        }\n    }\n\n    // Determine colors for all balls\n    for (let ball = 1; ball <= totalBalls; ball++) {\n        if (colors[ball] === null) {\n            await determineColor(ball);\n        }\n    }\n\n    // Verify and balance colors if needed (since N is odd, total counts must match)\n    let redCount = colors.filter(c => c === 'R').length;\n    let blueCount = colors.filter(c => c === 'B').length;\n\n    if (redCount !== N) {\n        // Need to adjust\n        const diff = redCount - N;\n        if (diff > 0) {\n            // Too many reds, change some to blue\n            let changed = 0;\n            for (let i = 1; i <= totalBalls && changed < diff; i++) {\n                if (colors[i] === 'R') {\n                    colors[i] = 'B';\n                    changed++;\n                }\n            }\n        } else {\n            // Too few reds, change some blues to red\n            let changed = 0;\n            for (let i = 1; i <= totalBalls && changed < -diff; i++) {\n                if (colors[i] === 'B') {\n                    colors[i] = 'R';\n                    changed++;\n                }\n            }\n        }\n    }\n\n    // Prepare the output\n    const result = colors.slice(1).join('');\n    console.log(`! ${result}`);\n    rl.close();\n}\n\nfunction question(query) {\n    return new Promise(resolve => {\n        rl.question(query, resolve);\n    });\n}\n\nsolve().catch(err => {\n    console.error(err);\n    rl.close();\n});",
    "timestamp": "2025-08-13 12:10:18"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n\n// Function to interactively ask a question\nbool askQuestion(const std::vector<int>& chosenBalls) {\n    std::cout << \"?\";\n    for (int ball : chosenBalls) {\n        std::cout << \" \" << ball;\n    }\n    std::cout << std::endl;\n    \n    std::string response;\n    std::cin >> response;\n    return response == \"yes\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<char> ballColors(2 * N, '?');\n    \n    int redCount = 0, blueCount = 0;\n    \n    for (int i = 1; i <= 2 * N; ++i) {\n        std::vector<int> chosenBalls;\n        \n        if (i + N <= 2 * N) {\n            for (int j = i; j < i + N; ++j) {\n                chosenBalls.push_back(j);\n            }\n        } else {\n            int overflow = i + N - 2 * N;\n            for (int j = i; j <= 2 * N; ++j) {\n                chosenBalls.push_back(j);\n            }\n            for (int j = 1; j < overflow; ++j) {\n                chosenBalls.push_back(j);\n            }\n        }\n\n        bool moreRed = askQuestion(chosenBalls);\n\n        if (moreRed) {\n            ++redCount;\n        } else {\n            ++blueCount;\n        }\n\n        if (redCount > blueCount) {\n            ballColors[i - 1] = 'R';\n        } else {\n            ballColors[i - 1] = 'B';\n        }\n    }\n    \n    std::cout << \"!\";\n    for (char color : ballColors) {\n        std::cout << \" \" << color;\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 14:33:33"
  }
]