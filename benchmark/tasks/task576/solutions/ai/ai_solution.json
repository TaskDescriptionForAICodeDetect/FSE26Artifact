[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct Node {\n    int key;\n    struct Node* prev;\n    struct Node* next;\n} Node;\n\nNode* head = NULL;\nNode* tail = NULL;\n\nvoid insert(int x) {\n    Node* newNode = malloc(sizeof(Node));\n    newNode->key = x;\n    newNode->prev = NULL;\n    newNode->next = head;\n    \n    if (head == NULL) {\n        head = tail = newNode;\n    } else {\n        head->prev = newNode;\n        head = newNode;\n    }\n}\n\nvoid deleteFirst() {\n    if (head == NULL) return;\n    \n    Node* temp = head;\n    head = head->next;\n    \n    if (head == NULL) {\n        tail = NULL;\n    } else {\n        head->prev = NULL;\n    }\n    \n    free(temp);\n}\n\nvoid deleteLast() {\n    if (tail == NULL) return;\n    \n    Node* temp = tail;\n    tail = tail->prev;\n    \n    if (tail == NULL) {\n        head = NULL;\n    } else {\n        tail->next = NULL;\n    }\n    \n    free(temp);\n}\n\nvoid deleteKey(int x) {\n    Node* current = head;\n    \n    while (current != NULL) {\n        if (current->key == x) {\n            if (current == head) {\n                deleteFirst();\n            } else if (current == tail) {\n                deleteLast();\n            } else {\n                current->prev->next = current->next;\n                current->next->prev = current->prev;\n                free(current);\n            }\n            return;\n        }\n        current = current->next;\n    }\n}\n\nvoid printList() {\n    Node* current = head;\n    int first = 1;\n    \n    while (current != NULL) {\n        if (!first) printf(\" \");\n        printf(\"%d\", current->key);\n        first = 0;\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    \n    char command[20];\n    int x;\n    \n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", command);\n        \n        if (strcmp(command, \"insert\") == 0) {\n            scanf(\"%d\", &x);\n            insert(x);\n        } else if (strcmp(command, \"delete\") == 0) {\n            scanf(\"%d\", &x);\n            deleteKey(x);\n        } else if (strcmp(command, \"deleteFirst\") == 0) {\n            deleteFirst();\n        } else if (strcmp(command, \"deleteLast\") == 0) {\n            deleteLast();\n        }\n    }\n    \n    printList();\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:11:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct Node {\n    int key;\n    struct Node *prev;\n    struct Node *next;\n} Node;\n\nNode *head = NULL;\nNode *tail = NULL;\n\nvoid insert(int x) {\n    Node *new_node = (Node *)malloc(sizeof(Node));\n    new_node->key = x;\n    new_node->prev = NULL;\n    new_node->next = head;\n\n    if (head != NULL) {\n        head->prev = new_node;\n    } else {\n        tail = new_node;\n    }\n    head = new_node;\n}\n\nvoid delete(int x) {\n    Node *current = head;\n    while (current != NULL) {\n        if (current->key == x) {\n            if (current->prev != NULL) {\n                current->prev->next = current->next;\n            } else {\n                head = current->next;\n            }\n            if (current->next != NULL) {\n                current->next->prev = current->prev;\n            } else {\n                tail = current->prev;\n            }\n            free(current);\n            break;\n        }\n        current = current->next;\n    }\n}\n\nvoid deleteFirst() {\n    if (head == NULL) return;\n    Node *temp = head;\n    head = head->next;\n    if (head != NULL) {\n        head->prev = NULL;\n    } else {\n        tail = NULL;\n    }\n    free(temp);\n}\n\nvoid deleteLast() {\n    if (tail == NULL) return;\n    Node *temp = tail;\n    tail = tail->prev;\n    if (tail != NULL) {\n        tail->next = NULL;\n    } else {\n        head = NULL;\n    }\n    free(temp);\n}\n\nvoid printList() {\n    Node *current = head;\n    int first = 1;\n    while (current != NULL) {\n        if (!first) {\n            printf(\" \");\n        }\n        printf(\"%d\", current->key);\n        current = current->next;\n        first = 0;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n, x;\n    char command[20];\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", command);\n        if (strcmp(command, \"insert\") == 0) {\n            scanf(\"%d\", &x);\n            insert(x);\n        } else if (strcmp(command, \"delete\") == 0) {\n            scanf(\"%d\", &x);\n            delete(x);\n        } else if (strcmp(command, \"deleteFirst\") == 0) {\n            deleteFirst();\n        } else if (strcmp(command, \"deleteLast\") == 0) {\n            deleteLast();\n        }\n    }\n\n    printList();\n    return 0;\n}",
    "timestamp": "2025-08-05 22:11:49"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nstruct Node {\n    int key;\n    Node *prev, *next;\n};\n\nNode *nil;\n\nvoid init() {\n    nil = new Node;\n    nil->prev = nil;\n    nil->next = nil;\n}\n\nvoid insert(int key) {\n    Node *x = new Node;\n    x->key = key;\n    x->next = nil->next;\n    nil->next->prev = x;\n    nil->next = x;\n    x->prev = nil;\n}\n\nNode* listSearch(int key) {\n    Node *cur = nil->next;\n    while (cur != nil && cur->key != key) {\n        cur = cur->next;\n    }\n    return cur;\n}\n\nvoid deleteNode(Node *t) {\n    if (t == nil) return;\n    t->prev->next = t->next;\n    t->next->prev = t->prev;\n    delete t;\n}\n\nvoid deleteFirst() {\n    deleteNode(nil->next);\n}\n\nvoid deleteLast() {\n    deleteNode(nil->prev);\n}\n\nvoid printList() {\n    Node *cur = nil->next;\n    bool isFirst = true;\n    while (cur != nil) {\n        if (!isFirst) cout << \" \";\n        cout << cur->key;\n        isFirst = false;\n        cur = cur->next;\n    }\n    cout << endl;\n}\n\nint main() {\n    init();\n    int n;\n    cin >> n;\n    string command;\n    int key;\n    unordered_multimap<int, Node*> keyToNode;\n\n    for (int i = 0; i < n; ++i) {\n        cin >> command;\n        if (command == \"insert\") {\n            cin >> key;\n            insert(key);\n        } else if (command == \"delete\") {\n            cin >> key;\n            Node *t = nil->next;\n            while (t != nil) {\n                if (t->key == key) {\n                    deleteNode(t);\n                    break;\n                }\n                t = t->next;\n            }\n        } else if (command == \"deleteFirst\") {\n            deleteFirst();\n        } else if (command == \"deleteLast\") {\n            deleteLast();\n        }\n    }\n    printList();\n    return 0;\n}",
    "timestamp": "2025-08-05 22:12:12"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Node {\n    int key;\n    Node prev;\n    Node next;\n\n    Node(int key) {\n        this.key = key;\n    }\n}\n\nclass DoublyLinkedList {\n    Node head;\n    Node tail;\n\n    void insert(int x) {\n        Node newNode = new Node(x);\n        if (head == null) {\n            head = newNode;\n            tail = newNode;\n        } else {\n            newNode.next = head;\n            head.prev = newNode;\n            head = newNode;\n        }\n    }\n\n    void delete(int x) {\n        Node current = head;\n        while (current != null) {\n            if (current.key == x) {\n                if (current == head) {\n                    deleteFirst();\n                } else if (current == tail) {\n                    deleteLast();\n                } else {\n                    current.prev.next = current.next;\n                    current.next.prev = current.prev;\n                }\n                break;\n            }\n            current = current.next;\n        }\n    }\n\n    void deleteFirst() {\n        if (head != null) {\n            if (head == tail) {\n                head = null;\n                tail = null;\n            } else {\n                head = head.next;\n                head.prev = null;\n            }\n        }\n    }\n\n    void deleteLast() {\n        if (tail != null) {\n            if (head == tail) {\n                head = null;\n                tail = null;\n            } else {\n                tail = tail.prev;\n                tail.next = null;\n            }\n        }\n    }\n\n    void printList() {\n        Node current = head;\n        StringBuilder sb = new StringBuilder();\n        while (current != null) {\n            sb.append(current.key);\n            if (current.next != null) {\n                sb.append(\" \");\n            }\n            current = current.next;\n        }\n        System.out.println(sb.toString());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine();\n        DoublyLinkedList list = new DoublyLinkedList();\n\n        for (int i = 0; i < n; i++) {\n            String command = scanner.nextLine();\n            if (command.startsWith(\"insert\")) {\n                int x = Integer.parseInt(command.split(\" \")[1]);\n                list.insert(x);\n            } else if (command.startsWith(\"delete \")) {\n                int x = Integer.parseInt(command.split(\" \")[1]);\n                list.delete(x);\n            } else if (command.equals(\"deleteFirst\")) {\n                list.deleteFirst();\n            } else if (command.equals(\"deleteLast\")) {\n                list.deleteLast();\n            }\n        }\n\n        list.printList();\n    }\n}",
    "timestamp": "2025-08-05 22:13:09"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class DoublyLinkedList {\n    static class Node {\n        int key;\n        Node prev, next;\n        \n        Node(int key) {\n            this.key = key;\n            this.prev = null;\n            this.next = null;\n        }\n    }\n    \n    static class LinkedList {\n        Node head, tail;\n        \n        LinkedList() {\n            head = null;\n            tail = null;\n        }\n        \n        void insert(int x) {\n            Node newNode = new Node(x);\n            if (head == null) {\n                head = tail = newNode;\n            } else {\n                newNode.next = head;\n                head.prev = newNode;\n                head = newNode;\n            }\n        }\n        \n        void delete(int x) {\n            Node current = head;\n            while (current != null) {\n                if (current.key == x) {\n                    if (current.prev == null) {\n                        head = current.next;\n                    } else {\n                        current.prev.next = current.next;\n                    }\n                    \n                    if (current.next == null) {\n                        tail = current.prev;\n                    } else {\n                        current.next.prev = current.prev;\n                    }\n                    return;\n                }\n                current = current.next;\n            }\n        }\n        \n        void deleteFirst() {\n            if (head != null) {\n                head = head.next;\n                if (head == null) {\n                    tail = null;\n                } else {\n                    head.prev = null;\n                }\n            }\n        }\n        \n        void deleteLast() {\n            if (tail != null) {\n                tail = tail.prev;\n                if (tail == null) {\n                    head = null;\n                } else {\n                    tail.next = null;\n                }\n            }\n        }\n        \n        void printList() {\n            Node current = head;\n            while (current != null) {\n                System.out.print(current.key + \" \");\n                current = current.next;\n            }\n            System.out.println();\n        }\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        \n        LinkedList list = new LinkedList();\n        \n        for (int i = 0; i < n; i++) {\n            String command = scanner.next();\n            \n            if (command.equals(\"insert\")) {\n                int x = scanner.nextInt();\n                list.insert(x);\n            } else if (command.equals(\"delete\")) {\n                int x = scanner.nextInt();\n                list.delete(x);\n            } else if (command.equals(\"deleteFirst\")) {\n                list.deleteFirst();\n            } else if (command.equals(\"deleteLast\")) {\n                list.deleteLast();\n            }\n        }\n        \n        list.printList();\n    }\n}",
    "timestamp": "2025-08-05 22:13:18"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nstruct Node {\n    int key;\n    Node* prev;\n    Node* next;\n};\n\nclass DoublyLinkedList {\nprivate:\n    Node* head;\n    Node* tail;\n\npublic:\n    DoublyLinkedList() {\n        head = nullptr;\n        tail = nullptr;\n    }\n\n    void insert(int x) {\n        Node* newNode = new Node();\n        newNode->key = x;\n        newNode->prev = nullptr;\n        newNode->next = head;\n\n        if (head == nullptr) {\n            head = tail = newNode;\n        } else {\n            head->prev = newNode;\n            head = newNode;\n        }\n    }\n\n    void deleteFirst() {\n        if (head == nullptr) return;\n\n        Node* temp = head;\n        head = head->next;\n\n        if (head == nullptr) {\n            tail = nullptr;\n        } else {\n            head->prev = nullptr;\n        }\n\n        delete temp;\n    }\n\n    void deleteLast() {\n        if (tail == nullptr) return;\n\n        Node* temp = tail;\n        tail = tail->prev;\n\n        if (tail == nullptr) {\n            head = nullptr;\n        } else {\n            tail->next = nullptr;\n        }\n\n        delete temp;\n    }\n\n    void deleteKey(int x) {\n        Node* current = head;\n        while (current != nullptr) {\n            if (current->key == x) {\n                if (current == head) {\n                    deleteFirst();\n                } else if (current == tail) {\n                    deleteLast();\n                } else {\n                    current->prev->next = current->next;\n                    current->next->prev = current->prev;\n                    delete current;\n                }\n                return;\n            }\n            current = current->next;\n        }\n    }\n\n    void printList() {\n        Node* current = head;\n        while (current != nullptr) {\n            cout << current->key;\n            if (current->next != nullptr) cout << \" \";\n            current = current->next;\n        }\n        cout << endl;\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n\n    DoublyLinkedList list;\n    string command;\n    int x;\n\n    for (int i = 0; i < n; i++) {\n        cin >> command;\n        if (command == \"insert\") {\n            cin >> x;\n            list.insert(x);\n        } else if (command == \"delete\") {\n            cin >> x;\n            list.deleteKey(x);\n        } else if (command == \"deleteFirst\") {\n            list.deleteFirst();\n        } else if (command == \"deleteLast\") {\n            list.deleteLast();\n        }\n    }\n\n    list.printList();\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:13:27"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class Node:\n    def __init__(self, key):\n        self.key = key\n        self.prev = None\n        self.next = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert(self, key):\n        new_node = Node(key)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def delete(self, key):\n        current = self.head\n        while current:\n            if current.key == key:\n                if current.prev:\n                    current.prev.next = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                if current == self.head:\n                    self.head = current.next\n                if current == self.tail:\n                    self.tail = current.prev\n                return\n            current = current.next\n\n    def deleteFirst(self):\n        if self.head:\n            self.head = self.head.next\n            if self.head:\n                self.head.prev = None\n            else:\n                self.tail = None\n\n    def deleteLast(self):\n        if self.tail:\n            self.tail = self.tail.prev\n            if self.tail:\n                self.tail.next = None\n            else:\n                self.head = None\n\n    def __str__(self):\n        result = []\n        current = self.head\n        while current:\n            result.append(str(current.key))\n            current = current.next\n        return ' '.join(result)\n\ndef process_commands(commands):\n    dll = DoublyLinkedList()\n    for command in commands:\n        if command.startswith('insert'):\n            _, x = command.split()\n            dll.insert(int(x))\n        elif command.startswith('delete '):\n            _, x = command.split()\n            dll.delete(int(x))\n        elif command == 'deleteFirst':\n            dll.deleteFirst()\n        elif command == 'deleteLast':\n            dll.deleteLast()\n    print(dll)\n\nif __name__ == '__main__':\n    import sys\n    input_data = sys.stdin.read().strip().split('\\n')\n    n = int(input_data[0])\n    commands = input_data[1:n+1]\n    process_commands(commands)",
    "timestamp": "2025-08-13 09:25:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\nimport java.util.LinkedList;\n\npublic class DoublyLinkedList {\n    static class Node {\n        int key;\n        Node prev, next;\n        Node(int key) {\n            this.key = key;\n        }\n    }\n    \n    private Node head, tail;\n\n    public void insert(int x) {\n        Node newNode = new Node(x);\n        if (head == null) {\n            head = tail = newNode;\n        } else {\n            newNode.next = head;\n            head.prev = newNode;\n            head = newNode;\n        }\n    }\n\n    public void delete(int x) {\n        Node current = head;\n        while (current != null) {\n            if (current.key == x) {\n                if (current.prev != null) current.prev.next = current.next;\n                else head = current.next;\n                \n                if (current.next != null) current.next.prev = current.prev;\n                else tail = current.prev;\n                \n                break;\n            }\n            current = current.next;\n        }\n    }\n\n    public void deleteFirst() {\n        if (head != null) {\n            if (head.next != null) {\n                head = head.next;\n                head.prev = null;\n            } else {\n                head = tail = null;\n            }\n        }\n    }\n\n    public void deleteLast() {\n        if (tail != null) {\n            if (tail.prev != null) {\n                tail = tail.prev;\n                tail.next = null;\n            } else {\n                head = tail = null;\n            }\n        }\n    }\n\n    public void printList() {\n        Node current = head;\n        boolean first = true;\n        while (current != null) {\n            if (first) {\n                System.out.print(current.key);\n                first = false;\n            } else {\n                System.out.print(\" \" + current.key);\n            }\n            current = current.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine();  // consume the remaining newline\n\n        DoublyLinkedList list = new DoublyLinkedList();\n\n        for (int i = 0; i < n; i++) {\n            String command = scanner.nextLine();\n            if (command.startsWith(\"insert\")) {\n                int x = Integer.parseInt(command.split(\" \")[1]);\n                list.insert(x);\n            } else if (command.startsWith(\"delete \")) {\n                int x = Integer.parseInt(command.split(\" \")[1]);\n                list.delete(x);\n            } else if (command.equals(\"deleteFirst\")) {\n                list.deleteFirst();\n            } else if (command.equals(\"deleteLast\")) {\n                list.deleteLast();\n            }\n        }\n\n        list.printList();\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 09:25:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct Node {\n    int key;\n    struct Node *prev;\n    struct Node *next;\n} Node;\n\nNode *head = NULL;\nNode *tail = NULL;\n\nvoid insert(int x) {\n    Node *new_node = (Node*)malloc(sizeof(Node));\n    new_node->key = x;\n    new_node->next = head;\n    new_node->prev = NULL;\n\n    if (head != NULL) {\n        head->prev = new_node;\n    } else {\n        tail = new_node;\n    }\n\n    head = new_node;\n}\n\nvoid delete(int x) {\n    Node *current = head;\n    while (current != NULL) {\n        if (current->key == x) {\n            if (current->prev != NULL) {\n                current->prev->next = current->next;\n            } else {\n                head = current->next;\n            }\n\n            if (current->next != NULL) {\n                current->next->prev = current->prev;\n            } else {\n                tail = current->prev;\n            }\n\n            free(current);\n            return;\n        }\n        current = current->next;\n    }\n}\n\nvoid deleteFirst() {\n    if (head != NULL) {\n        Node *temp = head;\n        head = head->next;\n        if (head != NULL) {\n            head->prev = NULL;\n        } else {\n            tail = NULL;\n        }\n        free(temp);\n    }\n}\n\nvoid deleteLast() {\n    if (tail != NULL) {\n        Node *temp = tail;\n        tail = tail->prev;\n        if (tail != NULL) {\n            tail->next = NULL;\n        } else {\n            head = NULL;\n        }\n        free(temp);\n    }\n}\n\nvoid printList() {\n    Node *current = head;\n    while (current != NULL) {\n        if (current->next != NULL) {\n            printf(\"%d \", current->key);\n        } else {\n            printf(\"%d\", current->key);\n        }\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    \n    char command[20];\n    int x;\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", command);\n        if (strcmp(command, \"insert\") == 0) {\n            scanf(\"%d\", &x);\n            insert(x);\n        } else if (strcmp(command, \"delete\") == 0) {\n            scanf(\"%d\", &x);\n            delete(x);\n        } else if (strcmp(command, \"deleteFirst\") == 0) {\n            deleteFirst();\n        } else if (strcmp(command, \"deleteLast\") == 0) {\n            deleteLast();\n        }\n    }\n\n    printList();\n    return 0;\n}",
    "timestamp": "2025-08-13 09:25:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class Node:\n    def __init__(self, key):\n        self.key = key\n        self.prev = None\n        self.next = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert(self, x):\n        new_node = Node(x)\n        if not self.head:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def delete(self, x):\n        current = self.head\n        while current:\n            if current.key == x:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                return\n            current = current.next\n\n    def deleteFirst(self):\n        if self.head:\n            self.head = self.head.next\n            if self.head:\n                self.head.prev = None\n            else:\n                self.tail = None\n\n    def deleteLast(self):\n        if self.tail:\n            self.tail = self.tail.prev\n            if self.tail:\n                self.tail.next = None\n            else:\n                self.head = None\n\ndef main():\n    dll = DoublyLinkedList()\n    n = int(input())\n\n    for _ in range(n):\n        command = input().split()\n        if command[0] == 'insert':\n            dll.insert(int(command[1]))\n        elif command[0] == 'delete':\n            dll.delete(int(command[1]))\n        elif command[0] == 'deleteFirst':\n            dll.deleteFirst()\n        elif command[0] == 'deleteLast':\n            dll.deleteLast()\n\n    current = dll.head\n    output = []\n    while current:\n        output.append(str(current.key))\n        current = current.next\n\n    print(' '.join(output))\n\nif __name__ == '__main__':\n    main()",
    "timestamp": "2025-08-13 09:25:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\nclass Node:\n    def __init__(self, key):\n        self.key = key\n        self.prev = None\n        self.next = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert(self, key):\n        new_node = Node(key)\n        if self.head is None:\n            self.head = self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def delete(self, key):\n        current = self.head\n        while current is not None:\n            if current.key == key:\n                if current.prev is not None:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next is not None:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                break\n            current = current.next\n\n    def deleteFirst(self):\n        if self.head is not None:\n            if self.head.next is not None:\n                self.head.next.prev = None\n                self.head = self.head.next\n            else:\n                self.head = self.tail = None\n\n    def deleteLast(self):\n        if self.tail is not None:\n            if self.tail.prev is not None:\n                self.tail.prev.next = None\n                self.tail = self.tail.prev\n            else:\n                self.head = self.tail = None\n\n    def printList(self):\n        current = self.head\n        keys = []\n        while current is not None:\n            keys.append(str(current.key))\n            current = current.next\n        print(' '.join(keys))\n\ndef main():\n    dll = DoublyLinkedList()\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        command = sys.stdin.readline().split()\n        if command[0] == 'insert':\n            dll.insert(int(command[1]))\n        elif command[0] == 'delete':\n            dll.delete(int(command[1]))\n        elif command[0] == 'deleteFirst':\n            dll.deleteFirst()\n        elif command[0] == 'deleteLast':\n            dll.deleteLast()\n    dll.printList()\n\nif __name__ == '__main__':\n    main()",
    "timestamp": "2025-08-13 09:26:13"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <list>\n\nint main() {\n    std::list<int> dll; // doubly linked list\n    int n;\n    std::cin >> n;\n    std::cin.ignore(); // to consume the newline after n\n\n    for (int i = 0; i < n; ++i) {\n        std::string command;\n        std::getline(std::cin, command);\n        std::istringstream ss(command);\n        std::string action;\n        ss >> action;\n        \n        if (action == \"insert\") {\n            int x;\n            ss >> x;\n            dll.push_front(x);\n        } else if (action == \"delete\") {\n            int x;\n            ss >> x;\n            for (auto it = dll.begin(); it != dll.end(); ++it) {\n                if (*it == x) {\n                    dll.erase(it);\n                    break;\n                }\n            }\n        } else if (action == \"deleteFirst\") {\n            if (!dll.empty()) {\n                dll.pop_front();\n            }\n        } else if (action == \"deleteLast\") {\n            if (!dll.empty()) {\n                dll.pop_back();\n            }\n        }\n    }\n\n    if (!dll.empty()) {\n        auto it = dll.begin();\n        std::cout << *it;\n        ++it;\n        for (; it != dll.end(); ++it) {\n            std::cout << \" \" << *it;\n        }\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:51:21"
  }
]