[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_HANDS 50\n#define CARDS_IN_HAND 5\n\ntypedef struct {\n    int cards[CARDS_IN_HAND];\n    char best_hand[20];\n} Hand;\n\nvoid count_ranks(const int *cards, int *rank_counts) {\n    for (int i = 0; i < 14; i++) {\n        rank_counts[i] = 0;\n    }\n    for (int i = 0; i < CARDS_IN_HAND; i++) {\n        rank_counts[cards[i]]++;\n    }\n}\n\nint is_straight(const int *cards) {\n    int temp[CARDS_IN_HAND];\n    for (int i = 0; i < CARDS_IN_HAND; i++) {\n        temp[i] = cards[i];\n    }\n    for (int i = 0; i < CARDS_IN_HAND - 1; i++) {\n        for (int j = 0; j < CARDS_IN_HAND - i - 1; j++) {\n            if (temp[j] > temp[j + 1]) {\n                int t = temp[j];\n                temp[j] = temp[j + 1];\n                temp[j + 1] = t;\n            }\n        }\n    }\n    if (temp[0] == 1 && temp[1] == 10 && temp[2] == 11 && temp[3] == 12 && temp[4] == 13) {\n        return 1;\n    }\n    for (int i = 0; i < CARDS_IN_HAND - 1; i++) {\n        if (temp[i + 1] != temp[i] + 1) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid determine_best_hand(Hand *hand) {\n    int rank_counts[14] = {0};\n    count_ranks(hand->cards, rank_counts);\n\n    int pairs = 0, three = 0, four = 0;\n    for (int i = 1; i < 14; i++) {\n        if (rank_counts[i] == 2) pairs++;\n        else if (rank_counts[i] == 3) three++;\n        else if (rank_counts[i] == 4) four++;\n    }\n\n    if (four) {\n        strcpy(hand->best_hand, \"four card\");\n    } else if (three && pairs) {\n        strcpy(hand->best_hand, \"full house\");\n    } else if (is_straight(hand->cards)) {\n        strcpy(hand->best_hand, \"straight\");\n    } else if (three) {\n        strcpy(hand->best_hand, \"three card\");\n    } else if (pairs == 2) {\n        strcpy(hand->best_hand, \"two pair\");\n    } else if (pairs == 1) {\n        strcpy(hand->best_hand, \"one pair\");\n    } else {\n        strcpy(hand->best_hand, \"null\");\n    }\n}\n\nint main() {\n    Hand hands[MAX_HANDS];\n    int dataset_count = 0;\n\n    while (scanf(\"%d,%d,%d,%d,%d\", \n          &hands[dataset_count].cards[0],\n          &hands[dataset_count].cards[1],\n          &hands[dataset_count].cards[2],\n          &hands[dataset_count].cards[3],\n          &hands[dataset_count].cards[4]) == CARDS_IN_HAND) {\n        determine_best_hand(&hands[dataset_count]);\n        dataset_count++;\n        if (dataset_count >= MAX_HANDS) break;\n    }\n\n    for (int i = 0; i < dataset_count; i++) {\n        printf(\"%s\\n\", hands[i].best_hand);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:26:07"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class PokerHands {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (scanner.hasNextLine()) {\n            String[] input = scanner.nextLine().split(\",\");\n            int[] hand = new int[5];\n            \n            for (int i = 0; i < 5; i++) {\n                hand[i] = Integer.parseInt(input[i].trim());\n            }\n            \n            System.out.println(evaluateHand(hand));\n        }\n        \n        scanner.close();\n    }\n    \n    private static String evaluateHand(int[] hand) {\n        Arrays.sort(hand);\n        \n        if (isFourCard(hand)) return \"four card\";\n        if (isFullHouse(hand)) return \"full house\";\n        if (isStraight(hand)) return \"straight\";\n        if (isThreeCard(hand)) return \"three card\";\n        if (isTwoPair(hand)) return \"two pair\";\n        if (isOnePair(hand)) return \"one pair\";\n        \n        return \"null\";\n    }\n    \n    private static boolean isFourCard(int[] hand) {\n        return hand[0] == hand[3] || hand[1] == hand[4];\n    }\n    \n    private static boolean isFullHouse(int[] hand) {\n        return (hand[0] == hand[2] && hand[3] == hand[4]) || \n               (hand[0] == hand[1] && hand[2] == hand[4]);\n    }\n    \n    private static boolean isStraight(int[] hand) {\n        for (int i = 0; i < 4; i++) {\n            if (hand[i+1] - hand[i] != 1) {\n                if (!(hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    private static boolean isThreeCard(int[] hand) {\n        return hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4];\n    }\n    \n    private static boolean isTwoPair(int[] hand) {\n        return (hand[0] == hand[1] && hand[2] == hand[3]) ||\n               (hand[0] == hand[1] && hand[3] == hand[4]) ||\n               (hand[1] == hand[2] && hand[3] == hand[4]);\n    }\n    \n    private static boolean isOnePair(int[] hand) {\n        return hand[0] == hand[1] || hand[1] == hand[2] || \n               hand[2] == hand[3] || hand[3] == hand[4];\n    }\n}",
    "timestamp": "2025-08-05 18:26:17"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\nvector<int> parseHand(const string &handStr) {\n    vector<int> hand;\n    stringstream ss(handStr);\n    string card;\n    while (getline(ss, card, ',')) {\n        hand.push_back(stoi(card));\n    }\n    return hand;\n}\n\nstring evaluateHand(const vector<int> &hand) {\n    map<int, int> counts;\n    for (int card : hand) {\n        counts[card]++;\n    }\n\n    bool hasFour = false, hasThree = false;\n    int pairs = 0;\n    for (auto &p : counts) {\n        if (p.second == 4) hasFour = true;\n        else if (p.second == 3) hasThree = true;\n        else if (p.second == 2) pairs++;\n    }\n\n    if (hasFour) return \"four card\";\n    if (hasThree && pairs == 1) return \"full house\";\n    if (hasThree) return \"three card\";\n    if (pairs == 2) return \"two pair\";\n    if (pairs == 1) return \"one pair\";\n\n    vector<int> sorted = hand;\n    sort(sorted.begin(), sorted.end());\n    bool isStraight = true;\n    for (int i = 1; i < 5; ++i) {\n        if (sorted[i] != sorted[i-1] + 1) {\n            isStraight = false;\n            break;\n        }\n    }\n    if (isStraight) return \"straight\";\n\n    // Check for Ace-low straight (A-2-3-4-5)\n    if (sorted[0] == 1 && sorted[1] == 2 && sorted[2] == 3 && sorted[3] == 4 && sorted[4] == 5) {\n        return \"straight\";\n    }\n\n    return \"null\";\n}\n\nint getRank(const string &handType) {\n    if (handType == \"four card\") return 6;\n    if (handType == \"full house\") return 5;\n    if (handType == \"straight\") return 4;\n    if (handType == \"three card\") return 3;\n    if (handType == \"two pair\") return 2;\n    if (handType == \"one pair\") return 1;\n    return 0;\n}\n\nint main() {\n    string line;\n    while (getline(cin, line)) {\n        vector<string> hands;\n        stringstream ss(line);\n        string handStr;\n        while (getline(ss, handStr, ' ')) {\n            if (!handStr.empty()) {\n                hands.push_back(handStr);\n            }\n        }\n\n        vector<pair<string, int>> evaluated;\n        for (size_t i = 0; i < hands.size(); ++i) {\n            vector<int> hand = parseHand(hands[i]);\n            string handType = evaluateHand(hand);\n            evaluated.emplace_back(handType, i);\n        }\n\n        int maxRank = -1;\n        vector<int> bestIndices;\n        for (auto &p : evaluated) {\n            int rank = getRank(p.first);\n            if (rank > maxRank) {\n                maxRank = rank;\n                bestIndices.clear();\n                bestIndices.push_back(p.second);\n            } else if (rank == maxRank) {\n                bestIndices.push_back(p.second);\n            }\n        }\n\n        for (size_t i = 0; i < bestIndices.size(); ++i) {\n            if (i > 0) cout << \" \";\n            cout << evaluated[bestIndices[i]].first;\n        }\n        cout << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:26:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_DATASETS 50\n\ntypedef enum {\n    NULL_HAND,\n    ONE_PAIR,\n    TWO_PAIR,\n    THREE_CARD,\n    STRAIGHT,\n    FULL_HOUSE,\n    FOUR_CARD\n} HandRank;\n\nint compareInts(const void *a, const void *b) {\n    return (*(int*)a - *(int*)b);\n}\n\nHandRank evaluateHand(int *hand) {\n    int counts[14] = {0};\n    int i, pairs = 0, threes = 0, fours = 0;\n    \n    for (i = 0; i < 5; i++) {\n        counts[hand[i]]++;\n    }\n    \n    for (i = 1; i <= 13; i++) {\n        if (counts[i] == 4) fours++;\n        if (counts[i] == 3) threes++;\n        if (counts[i] == 2) pairs++;\n    }\n    \n    if (fours) return FOUR_CARD;\n    if (threes && pairs) return FULL_HOUSE;\n    if (threes) return THREE_CARD;\n    if (pairs == 2) return TWO_PAIR;\n    if (pairs == 1) return ONE_PAIR;\n    \n    qsort(hand, 5, sizeof(int), compareInts);\n    \n    int isStraight = 1;\n    for (i = 1; i < 5; i++) {\n        if (hand[i] != hand[i-1] + 1) {\n            isStraight = 0;\n            break;\n        }\n    }\n    \n    if (!isStraight) {\n        if ((hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) ||\n            (hand[0] == 1 && hand[1] == 2 && hand[2] == 3 && hand[3] == 4 && hand[4] == 5)) {\n            isStraight = 1;\n        }\n    }\n    \n    return isStraight ? STRAIGHT : NULL_HAND;\n}\n\nint main() {\n    int numDatasets, i, j;\n    scanf(\"%d\", &numDatasets);\n    \n    for (i = 0; i < numDatasets; i++) {\n        int hand[5];\n        for (j = 0; j < 5; j++) {\n            scanf(\"%d\", &hand[j]);\n        }\n        \n        HandRank rank = evaluateHand(hand);\n        \n        switch (rank) {\n            case NULL_HAND:\n                printf(\"null\\n\");\n                break;\n            case ONE_PAIR:\n                printf(\"one pair\\n\");\n                break;\n            case TWO_PAIR:\n                printf(\"two pair\\n\");\n                break;\n            case THREE_CARD:\n                printf(\"three card\\n\");\n                break;\n            case STRAIGHT:\n                printf(\"straight\\n\");\n                break;\n            case FULL_HOUSE:\n                printf(\"full house\\n\");\n                break;\n            case FOUR_CARD:\n                printf(\"four card\\n\");\n                break;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:27:00"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nbool is_straight(vector<int>& hand) {\n    sort(hand.begin(), hand.end());\n    bool standard_straight = true;\n    bool ace_low_straight = true;\n    \n    for (int i = 1; i < 5; ++i) {\n        if (hand[i] != hand[i-1] + 1) standard_straight = false;\n    }\n    \n    if (hand[0] != 1 || hand[4] != 13) ace_low_straight = false;\n    if (ace_low_straight) {\n        vector<int> temp = {1, 2, 3, 4, 5};\n        if (hand == temp) return true;\n    }\n    \n    return standard_straight;\n}\n\nstring evaluate_hand(vector<int>& hand) {\n    map<int, int> count;\n    for (int card : hand) count[card]++;\n    \n    vector<int> frequencies;\n    for (auto& p : count) frequencies.push_back(p.second);\n    sort(frequencies.rbegin(), frequencies.rend());\n    \n    if (is_straight(hand)) return \"straight\";\n    if (frequencies[0] == 4) return \"four card\";\n    if (frequencies[0] == 3 && frequencies[1] == 2) return \"full house\";\n    if (frequencies[0] == 3) return \"three card\";\n    if (frequencies[0] == 2 && frequencies[1] == 2) return \"two pair\";\n    if (frequencies[0] == 2) return \"one pair\";\n    \n    return \"null\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    for (int i = 0; i < n; ++i) {\n        vector<int> hand(5);\n        for (int j = 0; j < 5; ++j) {\n            cin >> hand[j];\n        }\n        \n        cout << evaluate_hand(hand) << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:27:08"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\nimport java.util.stream.*;\n\npublic class PokerHands {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine().trim();\n            if (line.isEmpty()) continue;\n            String[] cardsStr = line.split(\",\\\\s*\");\n            int[] cards = new int[5];\n            for (int i = 0; i < 5; i++) {\n                cards[i] = Integer.parseInt(cardsStr[i]);\n            }\n            String bestHand = evaluateBestHand(cards);\n            System.out.println(bestHand);\n        }\n        scanner.close();\n    }\n\n    private static String evaluateBestHand(int[] cards) {\n        if (isFourCard(cards)) return \"four card\";\n        if (isFullHouse(cards)) return \"full house\";\n        if (isStraight(cards)) return \"straight\";\n        if (isThreeCard(cards)) return \"three card\";\n        if (isTwoPair(cards)) return \"two pair\";\n        if (isOnePair(cards)) return \"one pair\";\n        return \"null\";\n    }\n\n    private static boolean isOnePair(int[] cards) {\n        Map<Integer, Integer> freq = getFrequencyMap(cards);\n        return Collections.frequency(freq.values(), 2) == 1 && Collections.frequency(freq.values(), 1) == 3;\n    }\n\n    private static boolean isTwoPair(int[] cards) {\n        Map<Integer, Integer> freq = getFrequencyMap(cards);\n        return Collections.frequency(freq.values(), 2) == 2 && Collections.frequency(freq.values(), 1) == 1;\n    }\n\n    private static boolean isThreeCard(int[] cards) {\n        Map<Integer, Integer> freq = getFrequencyMap(cards);\n        return freq.containsValue(3) && !freq.containsValue(2);\n    }\n\n    private static boolean isStraight(int[] cards) {\n        int[] sorted = Arrays.copyOf(cards, cards.length);\n        Arrays.sort(sorted);\n        boolean normalStraight = true;\n        for (int i = 1; i < 5; i++) {\n            if (sorted[i] != sorted[i - 1] + 1) {\n                normalStraight = false;\n                break;\n            }\n        }\n        if (normalStraight) return true;\n        if (Arrays.equals(sorted, new int[]{1, 10, 11, 12, 13})) return true;\n        return false;\n    }\n\n    private static boolean isFullHouse(int[] cards) {\n        Map<Integer, Integer> freq = getFrequencyMap(cards);\n        return freq.containsValue(3) && freq.containsValue(2);\n    }\n\n    private static boolean isFourCard(int[] cards) {\n        Map<Integer, Integer> freq = getFrequencyMap(cards);\n        return freq.containsValue(4);\n    }\n\n    private static Map<Integer, Integer> getFrequencyMap(int[] cards) {\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int card : cards) {\n            freq.put(card, freq.getOrDefault(card, 0) + 1);\n        }\n        return freq;\n    }\n}",
    "timestamp": "2025-08-05 18:28:04"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def rank_hand(hand):\n    from collections import Counter\n    \n    # Rank of hands based on the problem description\n    RANKS = {\n        \"null\": 0,\n        \"one pair\": 1,\n        \"two pair\": 2,\n        \"three card\": 3,\n        \"straight\": 4,\n        \"full house\": 5,\n        \"four card\": 6\n    }\n    \n    hand.sort()\n    # Count occurrences of each number\n    counts = Counter(hand)\n    values = list(counts.values())\n    \n    # Check for four card\n    if 4 in values:\n        return \"four card\"\n        \n    # Check for full house\n    if 3 in values and 2 in values:\n        return \"full house\"\n    \n    # Check for straight, considering ace as 1 and 14\n    straight_low = list(range(min(hand), min(hand) + 5))\n    straight_high = [10, 11, 12, 13, 1]  # Adjust for straight with Ace high\n    \n    if hand == straight_low or hand == straight_high:\n        return \"straight\"\n    \n    # Check for three card\n    if 3 in values:\n        return \"three card\"\n        \n    # Check for two pair and one pair\n    if values.count(2) == 2:\n        return \"two pair\"\n    if 2 in values:\n        return \"one pair\"\n    \n    # Null if no other hand is matched\n    return \"null\"\n\ndef parse_input(input_string):\n    return [list(map(int, line.split(', '))) for line in input_string.strip().split('\\n')]\n\ndef process_poker_hands(input_data):\n    hands = parse_input(input_data)\n    results = []\n    for hand in hands:\n        best_rank = rank_hand(hand)\n        results.append(best_rank)\n    return results\n\n# Example usage\ninput_data = \"\"\"8, 9, 10, 11, 12\n2, 2, 3, 3, 4\n5, 5, 5, 6, 6\n9, 9, 9, 9, 1\n1, 10, 11, 12, 13\"\"\"\n\noutput = process_poker_hands(input_data)\nfor result in output:\n    print(result)",
    "timestamp": "2025-08-12 23:11:23"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\nimport java.util.stream.Collectors;\n\npublic class PokerHandEvaluator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<String> results = new ArrayList<>();\n\n        while (scanner.hasNextLine()) {\n            String inputLine = scanner.nextLine();\n            String[] cardStrings = inputLine.split(\",\");\n            List<Integer> cards = Arrays.stream(cardStrings)\n                                        .map(Integer::parseInt)\n                                        .collect(Collectors.toList());\n\n            results.add(evaluateHand(cards));\n        }\n\n        for (String result : results) {\n            System.out.println(result);\n        }\n    }\n\n    private static String evaluateHand(List<Integer> cards) {\n        Map<Integer, Integer> cardCounts = new HashMap<>();\n        for (int card : cards) {\n            cardCounts.put(card, cardCounts.getOrDefault(card, 0) + 1);\n        }\n\n        boolean isStraight = checkStraight(cards);\n        int pairs = 0, three = 0, four = 0;\n\n        for (int count : cardCounts.values()) {\n            if (count == 4) four++;\n            if (count == 3) three++;\n            if (count == 2) pairs++;\n        }\n        \n        if (four == 1) return \"four card\";\n        if (three == 1 && pairs == 1) return \"full house\";\n        if (isStraight) return \"straight\";\n        if (three == 1) return \"three card\";\n        if (pairs == 2) return \"two pair\";\n        if (pairs == 1) return \"one pair\";\n\n        return \"null\";\n    }\n\n    private static boolean checkStraight(List<Integer> cards) {\n        Collections.sort(cards);\n        Set<Integer> uniqueCards = new HashSet<>(cards);\n        \n        if (uniqueCards.size() != 5) return false;\n\n        // Check for high Ace straight\n        List<Integer> highAce = Arrays.asList(10, 11, 12, 13, 1);\n        if (cards.equals(highAce)) return true;\n\n        // Check regular straight\n        int start = cards.get(0);\n        for (int i = 1; i < 5; i++) {\n            if (cards.get(i) != start + i) return false;\n        }\n\n        return true;\n    }\n}",
    "timestamp": "2025-08-12 23:11:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void* a, const void* b) {\n    return (*(int*)a - *(int*)b);\n}\n\nchar* determine_hand(int* cards) {\n    int count[15] = {0};\n    for (int i = 0; i < 5; ++i) {\n        count[cards[i]]++;\n    }\n\n    int pairs = 0, three_card = 0, four_card = 0;\n    for (int i = 1; i <= 13; ++i) {\n        if (count[i] == 2) pairs++;\n        if (count[i] == 3) three_card++;\n        if (count[i] == 4) four_card++;\n    }\n\n    if (four_card) return \"four card\";\n    if (three_card && pairs) return \"full house\";\n    if (three_card) return \"three card\";\n    if (pairs == 2) return \"two pair\";\n    if (pairs == 1) return \"one pair\";\n\n    qsort(cards, 5, sizeof(int), compare);\n    int is_straight = 1;\n    for (int i = 0; i < 4; ++i) {\n        if (cards[i] != cards[i+1] - 1) {\n            is_straight = 0;\n            break;\n        }\n    }\n\n    // Special case for Ace-low straight\n    if (!is_straight && cards[0] == 1 && cards[1] == 10 && cards[2] == 11 &&\n        cards[3] == 12 && cards[4] == 13) {\n        is_straight = 1;\n    }\n\n    if (is_straight) return \"straight\";\n\n    return \"null\";\n}\n\nint main() {\n    int cards[5];\n    for (int i = 0; i < 50; ++i) {\n        int ret = scanf(\"%d%*[,]%d%*[,]%d%*[,]%d%*[,]%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]);\n        if (ret != 5) break;\n        printf(\"%s\\n\", determine_hand(cards));\n    }\n    return 0;\n}",
    "timestamp": "2025-08-12 23:11:37"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_one_pair(hand):\n    nums = [card % 13 or 13 for card in hand]\n    return len(set(nums)) == 4\n\ndef is_two_pair(hand):\n    nums = [card % 13 or 13 for card in hand]\n    return len(set(nums)) == 3 and max(nums.count(num) for num in set(nums)) == 2\n\ndef is_three_card(hand):\n    nums = [card % 13 or 13 for card in hand]\n    return 3 in [nums.count(num) for num in set(nums)]\n\ndef is_straight(hand):\n    nums = sorted([card % 13 or 13 for card in hand])\n    if len(set(nums)) != 5:\n        return False\n    return nums[-1] - nums[0] == 4 or (nums == [1,10,11,12,13])\n\ndef is_full_house(hand):\n    nums = [card % 13 or 13 for card in hand]\n    return len(set(nums)) == 2 and (3 in [nums.count(num) for num in set(nums)])\n\ndef is_four_card(hand):\n    nums = [card % 13 or 13 for card in hand]\n    return 4 in [nums.count(num) for num in set(nums)]\n\ndef rank_hand(hand):\n    if is_four_card(hand):\n        return 6\n    if is_full_house(hand):\n        return 5\n    if is_straight(hand):\n        return 4\n    if is_three_card(hand):\n        return 3\n    if is_two_pair(hand):\n        return 2\n    if is_one_pair(hand):\n        return 1\n    return 0\n\ndef main():\n    datasets = int(input())\n    for _ in range(datasets):\n        hand = list(map(int, input().split()))\n        print(rank_hand(hand))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-12 23:11:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def evaluate_hand(hand):\n    counts = {}\n    for num in hand:\n        counts[num] = counts.get(num, 0) + 1\n    values = sorted(counts.values())\n    keys = sorted(counts.keys())\n    pairs = values.count(2)\n    three = 3 in values\n    four = 4 in values\n    is_straight = False\n    \n    # Check for straight\n    if len(keys) == 5:\n        if keys[-1] - keys[0] == 4:\n            is_straight = True\n        # Check for Ace-low straight (A-2-3-4-5)\n        elif set(keys) == {1, 2, 3, 4, 5}:\n            is_straight = True\n    \n    if four:\n        return \"four card\"\n    elif three and pairs == 1:\n        return \"full house\"\n    elif is_straight:\n        return \"straight\"\n    elif three:\n        return \"three card\"\n    elif pairs == 2:\n        return \"two pair\"\n    elif pairs == 1:\n        return \"one pair\"\n    else:\n        return \"null\"\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        hands = line.strip().split(',')\n        datasets = []\n        for hand_str in hands:\n            hand = list(map(int, hand_str.split()))\n            datasets.append(hand)\n        \n        best_rank = \"null\"\n        rank_order = [\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"]\n        for hand in datasets:\n            current_rank = evaluate_hand(hand)\n            if rank_order.index(current_rank) > rank_order.index(best_rank):\n                best_rank = current_rank\n        print(best_rank)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-12 23:12:10"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\n\nenum HandRank {\n    NULL_HAND,\n    ONE_PAIR,\n    TWO_PAIR,\n    THREE_CARD,\n    STRAIGHT,\n    FULL_HOUSE,\n    FOUR_CARD\n};\n\nHandRank evaluateHand(vector<int> hand) {\n    sort(hand.begin(), hand.end());\n    // Count the frequency of each card\n    map<int, int> frequency;\n    for (int card : hand) {\n        frequency[card]++;\n    }\n\n    // Store counts of occurrences\n    vector<int> counts;\n    for (const auto &entry : frequency) {\n        counts.push_back(entry.second);\n    }\n    sort(counts.rbegin(), counts.rend()); // Sort counts in descending order\n\n    // Check for specific hands\n    bool isStraight = false;\n    if (hand.size() == 5) {\n        if (hand[4] - hand[0] == 4 && counts.size() == 5) {\n            isStraight = true;\n        }\n        // Special case: Ace can be low\n        if (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) {\n            isStraight = true;\n        }\n    }\n\n    if (counts[0] == 4) return FOUR_CARD;\n    if (counts[0] == 3 && counts[1] == 2) return FULL_HOUSE;\n    if (isStraight) return STRAIGHT;\n    if (counts[0] == 3) return THREE_CARD;\n    if (counts[0] == 2 && counts[1] == 2) return TWO_PAIR;\n    if (counts[0] == 2) return ONE_PAIR;\n    return NULL_HAND;\n}\n\nstring handToString(HandRank hand) {\n    switch (hand) {\n        case FOUR_CARD: return \"four card\";\n        case FULL_HOUSE: return \"full house\";\n        case STRAIGHT: return \"straight\";\n        case THREE_CARD: return \"three card\";\n        case TWO_PAIR: return \"two pair\";\n        case ONE_PAIR: return \"one pair\";\n        default: return \"null\";\n    }\n}\n\nint main() {\n    vector<vector<int>> datasets;\n    int card;\n    while (cin >> card) {\n        vector<int> hand(5);\n        hand[0] = card;\n        for (int i = 1; i < 5; ++i) {\n            cin >> hand[i];\n        }\n        datasets.push_back(hand);\n    }\n\n    for (const auto &hand : datasets) {\n        HandRank bestHand = evaluateHand(hand);\n        cout << handToString(bestHand) << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:49:03"
  }
]