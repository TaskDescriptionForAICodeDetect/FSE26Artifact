[
  {
    "language": "Scala",
    "code": "import scala.io.Source.stdin\n\nobject Main {\n  def hand(i:Int,j:Int,k:Int,l:Int,m:Int):String = {\n    if( (j,k,l) == (i,i,i) || (k,l,m) == (j,j,j) ) \"four card\"\n    else if( (j,l,m) == (i,k,k) || (j,k,m) == (i,i,l) ) \"full house\"\n    else if( (j,k) == (i,i) || (k,l) == (j,j) || (l,m) == (k,k) ) \"three card\"\n    else if( (j,l) == (i,k) || (j,m) == (i,l) || (k,m) == (j,l) ) \"two pair\"\n    else if( i== j || j == k || k == l || l == m ) \"one pair\"\n    else if( (i,j,k,l,m) == (i,i+1,i+2,i+3,i+4) || (i,j,k,l,m) == (1,10,11,12,13) ) \"straight\"\n    else \"null\"\n  }\n\n  def main(args:Array[String]) = {\n    stdin.getLines.foreach { s=>\n      val l = s.split(\",\").map(_.toInt).sorted\n      println(hand(l(0),l(1),l(2),l(3),l(4)))\n    }\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.Source.stdin\n\nobject Main {\n  def hand(i:Int,j:Int,k:Int,l:Int,m:Int):String = {\n    if( (j,k,l) == (i,i,i) || (k,l,m) == (j,j,j) ) \"four card\"\n    else if( (j,l,m) == (i,k,k) || (j,k,m) == (i,i,l) ) \"full house\"\n    else if( (j,k) == (i,i) || (k,l) == (j,j) || (l,m) == (k,k) ) \"three card\"\n    else if( (j,l) == (i,k) || (j,m) == (i,l) || (k,m) == (j,l) ) \"two pair\"\n    else if( i== j || j == k || k == l || l == m ) \"one pair\"\n    else if( (i,j,k,l,m) == (i,i+1,i+2,i+3,i+4) || (i,j,k,l,m) == (1,10,11,12,13) ) \"straight\"\n    else \"null\"\n  }\n\n  def main(args:Array[String]) = {\n    stdin.getLines.foreach { s=>\n      val l = s.split(\",\").map(_.toInt).sorted\n      println(hand(l(0),l(1),l(2),l(3),l(4)))\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint a[5];\n\nbool isStraight(){\n\tvector<int> n;\n\tfor(int i=0 ; i<5 ; i++){\n\t\tn.push_back(a[i]);\n\t}\n\tsort( n.begin(), n.end() );\n\tif( n[0]+1 == n[1] && n[1]+1 == n[2] && n[2]+1 == n[3] && n[3]+1 == n[4]){\n\t\treturn true;\n\t}\n\tif( n[0]==1 && n[1]==10 && n[2]==11 && n[3]==12 && n[4]==13){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstring checkCard(){\n\tint n, count, c[5];\n\tint c2=0, c3=0, c4=0;\n\n\tfor(int j=0 ; j<5 ; j++){\n\t\tcount = 0;\n\t\tn = a[j];\n\t\tfor(int i=0 ; i<5 ; i++){\n\t\t\tif(a[i]==n)count++;\n\t\t}\n\t\tc[j] = count;\n\t}\n\tfor(int i=0 ; i<5 ; i++){\n\t\tif(c[i]==2)c2++;\n\t\tif(c[i]==3)c3++;\n\t\tif(c[i]==4)c4++;\n\t}\n\tif(c4==4) return \"four card\";\n\telse if(c3==3 && c2==2) return \"full house\";\n\telse if( isStraight() ) return \"straight\";\n\telse if(c3==3) return \"three card\";\n\telse if(c2==4) return \"two pair\";\n\telse if(c2==2) return \"one pair\";\n\telse return \"null\";\n}\n\nint main(){\n\tstring str;\n\tchar s[80];\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4] ) != EOF ){\n\t\tstr = checkCard();\n\t\tprintf(\"%s\\n\",str.c_str());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nconst string ans[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\n\nint main(void){\n\t\tint a[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tint cnt[13]={},ans_num=0,tmp=0;\n\t\tfor(int i=0;i<5;++i) ++cnt[a[i]-1];\n\t\tfor(int i=-1,count=0;i<13+1;++i){\n\t\t\tif(cnt[(i+13)%13]>1)break;\n\t\t\tif(cnt[(i+13)%13]==1)++count;\n\t\t\tif(cnt[(i+13)%13]==0)count=0;\n\t\t\tif(count==5) ans_num=4;\n\t\t}\n\t\tif(!ans_num){\n\t\t\tfor(int i=0;i<13;++i){\n\t\t\t\tif(cnt[i]==4){ans_num=6;break;}\n\t\t\t\tif(cnt[i]==3)tmp+=3;\n\t\t\t\tif(cnt[i]==2)tmp+=2;\n\t\t\t}\n\t\t\tif(tmp==5)ans_num=5;\n\t\t\tif(tmp==4)ans_num=2;\n\t\t\tif(tmp==3)ans_num=3;\n\t\t\tif(tmp==2)ans_num=1;\n\t\t}\n\t\tcout<<ans[ans_num]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\t\tif(it->second>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(it->second==4){\n\t\t\treturn \"four card\";\n\t\t}else if(it->second==3){\n\t\t\tis3 = true;\n\t\t}else if(it->second==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <math.h>\nusing namespace std;\n\nint main(){\n\t\n\twhile(1){\n\tint a=0,b,c,d,e,x;\n\tscanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e);\n\tfor(int i=0;i<5;i++){\n\t\tif(a>b){x=a;a=b;b=x;}\n\t\tif(b>c){x=b;b=c;c=x;}\n\t\tif(c>d){x=c;c=d;d=x;}\n\t\tif(d>e){x=d;d=e;e=x;}\n\t}\n\tif(a==0)return 0;\n\tif(b==c&&c==d&&(a==b||d==e))cout<<\"four card\"<<endl;\n\telse if(a==b&&d==e&&(b==c||c==d))cout<<\"full house\"<<endl;\n\telse if(a==b&&b==c||b==c&&c==d||c==d&&d==e)cout<<\"three card\"<<endl;\n\telse if(a==b&&(c==d||d==e)||b==c&&d==e)cout<<\"two pair\"<<endl;\n\telse if(a==b||b==c||c==d||d==e)cout<<\"one pair\"<<endl;\n\telse if((b==a+1||b==a+9)&&c==b+1&&d==c+1&&e==d+1)cout<<\"straight\"<<endl;\n\telse cout<<\"null\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nbool isFourCard(int cards[5]){\n\tbool res = true;\n\n\tfor (int i = 1; i < 4; i++){\n\t\tif (cards[i] != cards[i + 1])res = false;\n\t}\n\n\tif (res)return true;\n\n\tres = true;\n\n\tfor (int i = 0; i < 3; i++){\n\t\tif (cards[i] != cards[i + 1])res = false;\n\t}\n\n\treturn res;\n}\n\nbool isFullHouse(int cards[5]){\n\tif (cards[0] == cards[1] && cards[2] == cards[3] && cards[3] == cards[4])return true;\n\tif (cards[0] == cards[1] && cards[1] == cards[2] && cards[3] == cards[4])return true;\n\n\treturn false;\n}\n\nbool isStraight(int cards[5]){\n\tbool res = true;\n\n\tfor (int i = 0; i < 4; i++){\n\t\tif (cards[i] + 1 != cards[i + 1])res = false;\n\t}\n\n\tif (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)res = true;\n\n\treturn res;\n}\n\n\nbool isThreeCard(int cards[5]){\n\tfor (int i = 0; i < 3; i++){\n\t\tif (cards[i] == cards[i + 1] && cards[i + 1] == cards[i + 2])return true;\n\t}\n\n\treturn false;\n}\n\nint Pair(int cards[5]){\n\tint cnt = 0;\n\n\tfor (int i = 0; i < 4; i++){\n\t\tif (cards[i] == cards[i + 1])cnt++;\n\t}\n\n\treturn cnt;\n}\n\nint main(){\n\n\twhile (1){\n\t\tint cards[5];\n\n\t\tstd::cin >> cards[0];\n\t\tfor (int i = 1; i < 5; i++){\n\t\t\tchar a;\n\t\t\tstd::cin >> a >> cards[i];\n\t\t}\n\n\t\tstd::sort(cards, cards + 5);\n\n\t\tif (isFourCard(cards)){\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isFullHouse(cards)){\n\t\t\tstd::cout << \"full house\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isStraight(cards)){\n\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isThreeCard(cards)){\n\t\t\tstd::cout << \"three card\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Pair(cards) == 2){\n\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Pair(cards) == 1){\n\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Pair(cards) == 0){\n\t\t\tstd::cout << \"null\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n \nusing namespace std;\n \nint main(){\n    int hand[5];\n \n    while(~scanf(\"%d\", &hand[0])){\n        for(int i = 1; i < 5; i++){\n            scanf(\",%d\", &hand[i]);\n        }\n        int num[15] = {0};\n \n        for(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1) num[14]++;\n\t\t\tnum[hand[i]]++;\n\t\t} \n        int h[7] = {0};\n        string s[] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n        int seq = 0;\n        h[0] = 1;\n        for(int i = 1; i < 15; i++){\n            if(num[i-1] && num[i]) seq++;\n            if(num[i] == 2) h[1]++;\n            if(num[i] == 3) h[3]++;\n            if(num[i] == 4) h[6]++;\n        }\n        if(h[1] > 1) h[2]++;\n        if(h[1] && h[3]) h[5]++;\n        if(seq == 4)\n\t\t\tif(!(num[2] && num[13])) h[4]++;\n \n        for(int i = 6; i >= 0; i--){\n            if(h[i]){\n                cout << s[i] << endl;\n                break;\n            }\n        }\n    }\n \n \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\n\n\nint main(){\n  int c[6];\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    map<int,int> card;\n    int mex = 0;\n    for(int i=0;i<5;i++){\n      card[c[i]]++;\n      mex = max(mex,card[c[i]]);\n    }\n    sort(c,c+4);\n    bool full = true;\n    bool A,B;\n    A = B = false;\n    for(int i=0;i<5;i++){\n      if(c[i] == 13)A = true;\n      if(c[i] == 1)B = true;\n    }\n    if(A && B){\n      for(int i=0;i<5;i++){\n\tif(c[i] == 1){\n\t  c[i] = 14;\n\t  break;\n\t}\n      }\n      sort(c,c+5);\n   \n    }\n    for(int i=0;i<4;i++){\n      if(c[i]+1 != c[i+1]){\n\tfull = false;\n\tbreak;\n      }\n    }\n\n\n    if(mex == 4){\n      cout << \"four card\" << endl;\n    }\n    else if(mex == 3 && card.size() == 2){\n      cout << \"full house\" << endl;\n    }\n    else if(full){\n      cout << \"straight\" << endl;\n    }\n    else if(mex == 3){\n      cout << \"three card\" << endl;\n    }\n    else if(card.size() == 3){\n      cout << \"two pair\" << endl;\n    }\n    else if(mex == 2){\n      cout << \"one pair\" << endl;\n    }\n    else cout << \"null\" << endl;\n\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst char *solve(){\n\tint c[20] = {};\n\tint a;\n\tfor(int i = 0; i < 5; ++i){\n\t\tif(scanf(\"%d,\", &a) == EOF){ return 0; }\n\t\t++c[a];\n\t}\n\tc[14] = c[1];\n\n\tint mc = 0, ms = 0, p = 0;\n\tfor(int i = 1; i < 14; ++i){\n\t\tmc = max(mc, c[i]);\n\t\tif(c[i] > 1){ ++p; }\n\t\tint s = 0;\n\t\tfor(int j = 0; j < 5 && c[i + j]; ++j){\n\t\t\t++s;\n\t\t}\n\t\tms = max(ms, s);\n\t}\n\t\n\tif(mc == 4){ return \"four card\"; }\n\tif(p > 1 && mc > 2){ return \"full house\"; }\n\tif(ms > 4){ return \"straight\"; }\n\tif(mc > 2){ return \"three card\"; }\n\tif(p > 1){ return \"two pair\"; }\n\tif(p){ return \"one pair\"; }\n\treturn \"null\";\n}\n\nint main(){\n\tconst char *ans;\n\twhile(ans = solve()){\n\t\tputs(ans);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n\nusing namespace std;\n\nint main(void){\n  int x[5],card[14],fg[5],i;\n  vector<int>y;\n  while(~scanf(\"%d,%d,%d,%d,%d\"\n\t       ,&x[0],&x[1],&x[2],&x[3],&x[4])){\n    \n    memset(card,0,sizeof(card));\n    memset(fg,0,sizeof(fg));\n\n\n    for(i=0;i<5;i++)card[x[i]]++;\n\n    for(i=1;i<14;i++){\n      if(card[i]==2 && fg[0]==0)fg[0]=1;\n      else if(card[i]==2 && fg[0]==1){\n\tfg[0]=0;\n\tcout <<\"two pair\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n      else if(card[i]==3 && fg[0]!=1)fg[3]=1;\n      else if(card[i]==3 && fg[0]==1){\n\tfg[0]=0;\n\tcout << \"full house\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n      else if(card[i]==4){\n\tcout << \"four card\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n    }\n    if(fg[0]==1){\n      cout << \"one pair\" << endl;\n      fg[2]=1;\n    }\n    else if(fg[3]==1){\n      cout << \"three card\" << endl;\n      fg[2]=1;\n    }\n    \n    for(i=0;i<5;i++)y.push_back(x[i]);\n    sort(y.begin(),y.end());\n \n    for(i=1;i<4;i++)if(y[i]+1!=y[i+1])fg[4]=1;\n\n    if(!fg[4] && !fg[2]){\n      cout << \"straight\" <<endl;\n      fg[2]=1;\n    }\n    if(fg[2]==0)cout <<\"null\"<<endl;\n    y.clear();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,a) FOR(i,0,a)\n\nint card[5];\n\nint c[13];\n\nvoid solve(){\n\tmemset(c,0,sizeof(c));\n\tREP(i,5){\n\t\tc[card[i]-1]++;\n\t}\n\tbool f1=false,f2=false;\n\tREP(i,13){\n\t\tif (c[i]>=4){\n\t\t\tf1=true;\n\t\t}\n\t}\n\tif (f1){\n\t\tcout<<\"four card\"<<endl;\n\t\treturn;\n\t}\n\tREP(i,13){\n\t\tif (c[i]==3){\n\t\t\tf1=true;\n\t\t}else if (c[i]==2){\n\t\t\tf2=true;\n\t\t}\n\t}\n\tif (f1 && f2){\n\t\tcout<<\"full house\"<<endl;\n\t\treturn;\n\t}\n\tf1=f2=false;\n\tREP(i,10){\n\t\tbool f=true;\n\t\tREP(j,5){\n\t\t\tif (c[(i+j)%13]!=1){\n\t\t\t\tf=false;\n\t\t\t}\n\t\t}\n\t\tif (f){\n\t\t\tf1=true;\n\t\t}\n\t}\n\tif (f1){\n\t\tcout<<\"straight\"<<endl;\n\t\treturn;\n\t}\n\tREP(i,13){\n\t\tif (c[i]==3){\n\t\t\tf1=true;\n\t\t}\n\t}\n\tif (f1){\n\t\tcout<<\"three card\"<<endl;\n\t\treturn;\n\t}\n\tint k=0;\n\tREP(i,13){\n\t\tif (c[i]==2){\n\t\t\tk++;\n\t\t}\n\t}\n\tif (k==2){\n\t\tcout<<\"two pair\"<<endl;\n\t}else if (k==1){\n\t\tcout<<\"one pair\"<<endl;\n\t}else{\n\t\tcout<<\"null\"<<endl;\n\t}\n}\n\nint main(){\n\twhile (scanf(\"%d,%d,%d,%d,%d\",card,card+1,card+2,card+3,card+4)){\n\t\tsolve();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint ar[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &ar[0], &ar[1], &ar[2], &ar[3], &ar[4])+1) {\n\t\tsort(ar, ar + 5);\n\t\tint a = ar[0];\n\t\tint b = ar[1];\n\t\tint c = ar[2];\n\t\tint d = ar[3];\n\t\tint e = ar[4];\n\n\t\tif (a == d || b == e) { cout << \"four card\" << endl; }\n\t\telse if (a == c && d == e) { cout << \"full house\" << endl; }\n\t\telse if (a == b && c == e) { cout << \"full house\" << endl; }\n\t\telse if (b - a == 1 && c - b == 1 && d - c == 1 && e - d == 1&&a!=1 ) { cout << \"straight\" << endl; }\n\t\telse if (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) { cout << \"straight\" << endl; }\n\t\telse if (a == c || b == d || c == e) { cout << \"three card\" << endl; }\n\t\telse if (a==b&&c==d) { cout << \"two pair\" << endl; }\n\t\telse if (a == b&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (b == c&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (a == b || b == c || c == d || d == e) { cout << \"one pair\" << endl; }\n\t\telse { cout << \"null\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint ans, h[5];\n\n\twhile(1) {\n\t\tans=0;\n\t\tfor(int i=0; i<5; i++) {\n\t\t\tcin >> h[i];\n\t\t}\n\t\tsort(h, h+5);\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tif(h[4]==h[3]+1&&h[3]==h[2]+1&&h[2]==h[1]+1&&h[1]==h[0]+1) {\n\t\t\tans=5;\n\t\t}\n\t\tif(h[0]==1&&h[4]==13&&h[3]==12&&h[2]==11&&h[1]==10) {\n\t\t\tans=5;\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 0:\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  string trump;\n  while(getline(cin,trump)){  \n    int two = 0; int three = 0; int four = 0;\n    int a = 0;\n    int b = 0;\n    vector<int> poker;\n    int check[15] = {0};\n    int ans = 0;\n\n    for(char e : trump){\n      if(e == 49){\n        if(b == 0){\n          b = 1;\n        }\n        else{\n          a = (e - 48) + 10;\n          poker.push_back(a);\n          b = 0;\n        }\n      }\n      else if(48 <= e && 57 >= e && e != 49){\n        if(b == 1){\n          a = (e - 48) + 10;\n          b = 0;\n        }\n        else{\n          a = e - 48;\n        }\n        poker.push_back(a);\n      }\n      else{\n        if(b == 1){\n          poker.push_back(b);\n          b = 0;\n        }\n      }\n    }\n\n    for(int e : poker){\n      cout<<e<<endl;\n    }\n  \n    if(b == 1){\n      poker.push_back(b);\n    }\n\n    for(int e : poker){\n      ++check[e];\n    }\n\n    check[14] = check[1];\n\n    for(int i = 1;i < 14;++i){\n      if(check[i] == 4){\n        ++four;\n      }\n      else if(check[i] == 3){\n        ++three;\n      }\n      else if(check[i] == 2){\n        ++two;\n      }\n    }\n\n    if(four == 1){\n      cout<<\"four card\"<<endl;\n      ans = 1;\n    }\n    else if(three == 1){\n      ans = 1;\n      if(two == 1){\n        cout<<\"full house\"<<endl;\n      }\n      else{\n        cout<<\"three card\"<<endl;\n      }\n    }\n    else if(two == 2){\n      ans = 1;\n      cout<<\"two pair\"<<endl;\n    }\n    else if(two == 1){\n      ans = 1;\n      cout<<\"one pair\"<<endl;\n    }\n    else{\n      for(int i = 1;i < 11;++i){\n        if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n          cout<<\"straight\"<<endl;\n          ans = 1;\n          break;\n        }\n      }\n    }\n\n    if(ans == 0){\n      cout<<\"null\"<<endl;\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,a) FOR(i,0,a)\n\nint card[5];\n\nint c[13];\n\nvoid solve(){\n\tmemset(c,0,sizeof(c));\n\tREP(i,5){\n\t\tc[card[i]-1]++;\n\t}\n\tbool f1=false,f2=false;\n\tREP(i,13){\n\t\tif (c[i]>=4){\n\t\t\tf1=true;\n\t\t}\n\t}\n\tif (f1){\n\t\tcout<<\"four card\"<<endl;\n\t\treturn;\n\t}\n\tREP(i,13){\n\t\tif (c[i]==3){\n\t\t\tf1=true;\n\t\t}else if (c[i]==2){\n\t\t\tf2=true;\n\t\t}\n\t}\n\tif (f1 && f2){\n\t\tcout<<\"full house\"<<endl;\n\t\treturn;\n\t}\n\tf1=f2=false;\n\tREP(i,10){\n\t\tbool f=true;\n\t\tREP(j,5){\n\t\t\tif (c[(i+j)%13]!=1){\n\t\t\t\tf=false;\n\t\t\t}\n\t\t}\n\t\tif (f){\n\t\t\tf1=true;\n\t\t}\n\t}\n\tif (f1){\n\t\tcout<<\"straight\"<<endl;\n\t\treturn;\n\t}\n\tREP(i,13){\n\t\tif (c[i]==3){\n\t\t\tf1=true;\n\t\t}\n\t}\n\tif (f1){\n\t\tcout<<\"three card\"<<endl;\n\t\treturn;\n\t}\n\tint k=0;\n\tREP(i,13){\n\t\tif (c[i]==2){\n\t\t\tk++;\n\t\t}\n\t}\n\tif (k==2){\n\t\tcout<<\"two pair\"<<endl;\n\t}else if (k==1){\n\t\tcout<<\"one pair\"<<endl;\n\t}else{\n\t\tcout<<\"null\"<<endl;\n\t}\n}\n\nint main(){\n\twhile (scanf(\"%d,%d,%d,%d,%d\",card,card+1,card+2,card+3,card+4)!=EOF){\n\t\tsolve();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\nint main(void)\n{\n\tint i;\n\tint t[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&t[0],&t[1],&t[2],&t[3],&t[4]) != EOF)\n\t{\n\t\tint j=0;\n\t\tint card[14]={0};\n\t\tint num[5]={0};\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tcard[t[i]]++;\n\t\t}\n\t\tfor(i=1;i<14;i++)\n\t\t{\n\t\t\tnum[card[i]]++;\n\t\t}\n\t\tif(num[4])\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(num[3])\n\t\t{\n\t\t\tif(num[2])\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif(num[2]==2)\n\t\t{\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(num[2])\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tfor(i=1;i<11;i++)\n\t\t{\n\t\t\tif(card[i]&&card[i+1]&&card[i+2]&&card[i+3]&&card[(i+4)%13])\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tj++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(j==1)continue;\n\t\tcout << \"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n\nusing namespace std;\n\nvoid solve()\n{\n\tint a[5];\n\twhile(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4], &a[5]))\n\t{\n\t\tmap<int, int> Map;\n\t\tfor(int i = 0; i < 5; ++i)\n\t\t{\n\t\t\t++Map[a[i]];\n\t\t}\n\t\tif(Map.size() == 2)\n\t\t{\n\t\t\tint Max = 0;\n\t\t\tfor(map<int, int>::iterator Ite = Map.begin(); Ite != Map.end(); ++Ite)\n\t\t\t{\n\t\t\t\tif(Max < Ite->second)\n\t\t\t\t{\n\t\t\t\t\tMax = Ite->second;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Max == 3)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(Map.size() == 3)\n\t\t{\n\t\t\tint Max = 0;\n\t\t\tfor(map<int, int>::iterator Ite = Map.begin(); Ite != Map.end(); ++Ite)\n\t\t\t{\n\t\t\t\tif(Max < Ite->second)\n\t\t\t\t{\n\t\t\t\t\tMax = Ite->second;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Max == 3)\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(Map.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmap<int, int>::iterator Ite = Map.begin();\n\t\t\tmap<int, int>::iterator IteNext = Map.begin();\n\t\t\t++IteNext;\n\t\t\tmap<int, int>::iterator IteEnd = Map.end();\n\t\t\tIteEnd--;\n\t\t\tif(IteEnd->first - Ite->first == 4 || IteNext->first - Ite->first == 9)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n#define ??????????????£?????? 114514\n\nstring pairs[2][3] = { {\"null\",\"one pair\",\"two pair\"},\n\t\t\t\t\t  {\"three card\",\"full house\",\"\"} };\n\nint main() {\n\tint n, c, three, two;\n\tchar t;\n\tstring res;\n\twhile (!cin.eof()) {\n\t\tint card[13] = { 0 }, c = 0, three = 0, two = 0;\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tcin >> n >> t;\n\t\t\tcard[n - 1]++;\n\t\t}\n\t\tcin >> n;\n\t\tcard[n - 1]++;\n\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (card[i] == 4) {\n\t\t\t\tc = ??????????????£??????;\n\t\t\t\tbreak;\n\t\t\t} else if(card[i] == 3) {\n\t\t\t\tthree++;\n\t\t\t} else if(card[i] == 2) {\n\t\t\t\ttwo++;\n\t\t\t}\n\n\t\t\tif (card[i] == 1) {\n\t\t\t\tc++;\n\n\t\t\t\tif (c == 4 && i == 12 && card[0] == 1) {\n\t\t\t\t\tc = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if(card[i] == 0 && c != 5 && c > 0) {\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\t\tif (c == 5) {\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (c == ??????????????£??????) {\n\t\t\tcout << \"four card\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tcout << pairs[three][two] << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n  vector<int> c(5);\n  int ans;\n  while(~scanf(\"%d,%d,%d,%d,%d\", &c[0],&c[1],&c[2],&c[3],&c[4])) {\n    sort(c.begin(), c.begin()+5);\n    if(c[0] == c[3] || c[1] == c[4]) ans = 7;\n    else if((c[0] == c[2] && c[3] == c[4])|| (c[0] == c[1] && c[2] == c[4])) ans = 6;\n    else if(c[0] + 1 == c[1] && c[1] + 1 == c[2] && c[2] + 1 == c[3] && c[3] +1 == c[4])\n      ans = 5;\n    else if(c[0] == 1 && c[1] == 10 && c[2] == 11 && c[3] == 12 && c[4] == 13)\n      ans = 5;\n    else if(c[0] == c[2] || c[1] == c[3] || c[2] == c[4])\n      ans = 4;\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[1] == c[2] && c[3] == c[4]))\n      ans = 3;\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4])\n      ans = 2;\n    else ans= 1;\n    switch(ans) {\n    case 1: cout << \"null\" << endl; break;\n    case 2: cout << \"one pair\" << endl; break;\n    case 3: cout << \"two pair\" << endl; break;\n    case 4: cout << \"three card\" << endl; break;\n    case 5: cout << \"straight\" << endl; break;\n    case 6: cout << \"full house\" << endl; break;\n    case 7: cout << \"four card\" << endl; break;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint card[5];\n\t\n\twhile((scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])) != EOF){\n\t\tsort(card, card + 5);\n\t\t\n\t\t//four card\n\t\tif(card[2] == card[1] && card[2] == card[3] && (card[2] == card[0] || card[2] == card[4])){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\t//full house\n\t\telse if(card[0] == card[1] && card[3] == card[4] && (card[2] == card[1] || card[2] == card[3])){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t//straight\n\t\telse if(((card[0] == 1)? 14 - card[1] : card[4] - card[0]) == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\t//three card\n\t\telse if((card[0] == card[1] && card[1] == card[2]) || (card[1] == card[2] && card[2] == card[3]) || (card[2] == card[3] && card[3] == card[4])){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\t//two pair\n\t\telse if((card[0] == card[1] && (card[2] == card[3] || card[3] == card[4])) || (card[1] == card[2] && card[3] == card[4])){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\t//one pair\n\t\telse if(card[0] == card[1] || card[1] == card[2] || card[2] == card[3] || card[3] == card[4]){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\t//null\n\t\telse{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n\n#define loop(i,a,b) for(int i=a; i<b; i++)\n#define rep(i,a) loop(i,0,a)\nusing namespace std;\n\nint main(){\n    int a[5];\n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n        sort(a,a+5);\n        int n=0;\n        rep(i,4)loop(j,i+1,5){\n            if(a[i]==a[j])n++;\n        }\n        bool st=true;\n        rep(i,4)if(a[i]+1!=a[i+1])st=false;\n        if(a[0]==1&&\n           a[1]==10&&\n           a[2]==11&&\n           a[3]==12&&\n           a[4]==13) st=true;\n\n        string ans;\n        if(n==6)\n            ans=\"four card\";\n        else if(n==4)\n            ans=\"full house\";\n        else if(st)\n            ans=\"straight\";\n        else if(n==3)\n            ans=\"three card\";\n        else if(n==2)\n            ans=\"two pair\";\n        else if(n==1)\n            ans=\"one pair\";\n        else\n            ans=\"null\";\n        cout<<ans<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "\n#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <algorithm>\n#include <complex>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <stack>\n#include <vector>\n\nusing namespace std;\n\n#ifdef _MSC_VER\n#define __typeof__ decltype\n#endif\n\n#define ITER(c)         __typeof__((c).begin())\n#define FOREACH(it, c)  for (ITER(c) it=(c).begin(); it != (c).end(); ++it)\n#define RITER(c)        __typeof__((c).rbegin())\n#define RFOREACH(it, c) for (RITER(c) it=(c).rbegin(); it != (c).rend(); ++it)\n#define REP(i, n)       REPEAT(i, 0, n)\n#define REPEAT(i, k, n) for (int i = (k); i < (n); ++i)\n#define REVREP(i, n)    for (int i = ((n)-1); i >= 0; --i)\n#define FIND(c, n)      std::find((c).begin(), (c).end(), (n));\n#define BSEARCH(c, n)   std::binary_search((c).begin(), (c).end(), (n))\n#define LLPOW(p1,p2)    ((ll)pow((double)(p1), (int)p2))\n#define ESIZEOF(A)      (sizeof(A)/sizeof((A)[0]))\n#define MIN(p1,p2)      (((p1)<(p2))?(p1):(p2))\n#define MAX(p1,p2)      (((p1)>(p2))?(p1):(p2))\n#define CIN_NO_SYNC     do { cin.tie(0); ios_base::sync_with_stdio(false); } while(0)\n#define GETSTR(p)       fgets((p), sizeof(p), stdin)\n#define CHOMP(p)        do{ char *_q = (p) + strlen(p)-1; if(*_q == '\\n') *_q = 0; } while(0)\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n#ifdef _DEBUG\n#define pf printf\n#define pr(n) do { cout << #n \" = \" << (n) << endl; } while(0)\n#else\n#define pf(...) /* */\n#define pr(...) /* */\n#endif\n\nconst char *str[] = {\n    \"null\",\n    \"one pair\",\n    \"two pair\",\n    \"three card\",\n    \"straight\",\n    \"full house\",\n    \"four card\",\n};\n\nbool is_fcd(int n[5],int m[12]){ return (m[0] == 4); }\nbool is_flh(int n[5],int m[12]){ return (m[0] == 3 && m[1] == 2); }\nbool is_str(int n[5],int m[12]){\n    if(n[0] == n[1]-1 && n[1] == n[2]-1 && n[2] == n[3]-1 && n[3] == n[4]-1) return true;\n    if(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13) return true;\n    return false;\n}\nbool is_thr(int n[5],int m[12]){ return (m[0] == 3); }\nbool is_two(int n[5],int m[12]){ return (m[0] == 2 && m[1] == 2); }\nbool is_one(int n[5],int m[12]){ return (m[0] == 2); }\n\nint poker(int n[5]){\n    int m[13];\n    memset(m, 0, sizeof(m));\n    REP(i,5) m[n[i]-1]++;\n    sort(n, n+5, less<int>());\n    sort(m, m+13, greater<int>());\n\n    if(is_fcd(n,m)) return 6;\n    if(is_flh(n,m)) return 5;\n    if(is_str(n,m)) return 4;\n    if(is_thr(n,m)) return 3;\n    if(is_two(n,m)) return 2;\n    if(is_one(n,m)) return 1;\n    return 0;\n}\n\nint main(){\n    string s;\n    while(getline(cin, s)){\n        int n[5];\n        sscanf(s.c_str(), \"%d,%d,%d,%d,%d\", &n[0], &n[1], &n[2], &n[3], &n[4]);\n        cout << str[poker(n)] << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n \n \nint main()\n{\n    const int N = 5;\n    while(1)\n    {\n        int hand[N];\n        char x;\n        int j;\n        for(int i = 0; i < N; i++)\n        {\n            if(i)\n                cin >> x;\n            cin >> hand[i];\n        }\n        if(!cin)\n            break;\n \n        sort(hand, hand+N);\n \n        if(hand[0] == hand[3] ||\n            hand[1] == hand[4])\n            cout << \"four card\" << endl;\n        else if( (hand[0] == hand[1] && hand[2] == hand[4]) ||\n                (hand[0] == hand[2] && hand[3] == hand[4]) )\n            cout << \"full house\" << endl;\n        else if( (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) ||\n            (hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4]) )\n            cout << \"straight\" << endl;\n        else if( (hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4]) )\n            cout << \"three card\" << endl;\n        else if( (hand[0]==hand[1] && hand[2]==hand[3]) ||\n                (hand[0]==hand[1] && hand[3]==hand[4]) ||\n                (hand[1]==hand[2] && hand[3]==hand[4]) )\n            cout << \"two pair\" << endl;\n        else if( hand[0]==hand[1] || hand[1]==hand[2] || hand[2]==hand[3] || hand[3]==hand[4] )\n            cout << \"one pair\" << endl;\n         else\n         cout<<\"null\"<<endl;\n       \n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define PI 3.14159265359\nusing namespace std;\n\nint main() {\n\tchar ch;\n\tvector<int> v(5);\n\tint& a = v.at(0),\n\t\t& b = v.at(1),\n\t\t& c = v.at(2),\n\t\t& d = v.at(3),\n\t\t& e = v.at(4);\n\n\twhile (cin >> a) {\n\t\tcin >> ch >> b >> ch >> c >> ch >> d >> ch >> e;\n\n\t\t/*\n\t\tone pair  （2 枚の同じ数字のカードが1 組ある）\n\t\ttwo pair  （2 枚の同じ数字のカードが2 組ある）\n\t\tthree card（3 枚の同じ数字のカードが1 組ある）\n\t\tfull house（3 枚の同じ数字のカードが1 組と、残りの2 枚が同じ数字のカード）\n\t\tfour card （4 枚の同じ数字のカードが1 組ある）\n\t\tstraight  （5 枚のカードの数字が連続している）\n\t\tnull\n\t\t*/\n\n\t\tsort(v.begin(), v.end());\n\t\t//cout << a << ' ' << b << ' ' << c << ' ' << d << ' ' << e << endl;\n\n\t\tstring t = \"null\";\n\t\tvector<int> v2(4);\n\t\tv2.at(0) = b - a;\n\t\tv2.at(1) = c - b;\n\t\tv2.at(2) = d - c;\n\t\tv2.at(3) = e - d;\n\n\t\tint cnt = count(v2.begin(), v2.end(), 0);\n\t\tif (cnt == 1) {\n\t\t\tt = \"one pair\";\n\t\t}\n\t\telse if (cnt == 2) {\n\t\t\tif (v2.at(0) == 0 && v2.at(1) == 0) {\n\t\t\t\tt = \"three card\";\n\t\t\t}\n\t\t\telse if (v2.at(1) == 0 && v2.at(2) == 0) {\n\t\t\t\tt = \"three card\";\n\t\t\t}\n\t\t\telse if (v2.at(2) == 0 && v2.at(3) == 0) {\n\t\t\t\tt = \"three card\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tt = \"two pair\";\n\t\t\t}\n\t\t}\n\t\telse if (cnt == 3) {\n\t\t\tif (v2.at(1)!=0||v2.at(2)!=0){\n\t\t\t\tt = \"full house\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tt = \"four card\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (v.at(1) == v.at(0) + 1\n\t\t\t\t&& v.at(2) == v.at(1) + 1\n\t\t\t\t&& v.at(3) == v.at(2) + 1) {\n\t\t\t\tt = \"straight\";\n\t\t\t}\n\t\t}\n\n\t\tif (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) t = \"straight\";\n\n\t\tcout << t << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    int tmp[5];\n    char com;\n    while(cin >>tmp[0]>>com>>tmp[1]>>com>>tmp[2]>>com>>tmp[3]>>com>>tmp[4]){\n    int hand[14]={};\n\n    for(int i=0; i<5; ++i){\n      if(tmp[i]==1)++hand[13];\n      ++hand[tmp[i]-1];\n    }\n   \n    int pair=0,three=0,str=0,four=0;\n    for(int i=1; i<14; ++i){\n      if(hand[i]==4){++four;}\n      if(hand[i]==1)++str;\n      if(hand[i]==2)++pair;\n      if(hand[i]==3)++three;\n      if(str!=5 && hand[i]==0)str=0;\n    }\n    \n    if(four)cout << \"four card\" << endl;\n    else if(three && pair)cout << \"full house\" << endl;\n    else if(str == 5)cout << \"straight\" << endl;\n    else if(three)cout << \"three card\" << endl;\n    else if(pair == 2)cout << \"two pair\" << endl;\n    else if(pair == 1)cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n    \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint bigger(int a, int b){\n\tif(a>=b){return a;}\n\treturn b;\n}\n\nint one_pair(int a[]){\n\tint i, j;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(j!=i){\n\t\t\t\tif(a[i]==a[j]){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint two_pair(int a[]){\n\tint i, j, count=0;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(a[i] == a[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(count == 4){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint three_card(int a[]){\n\tint i, j, k;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tfor(k=0; k<5; k++){\n\t\t\t\tif(i!=j && i!=k && j!=k){\n\t\t\t\t\tif(a[i]==a[j] && a[i]==a[k]){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint four_card(int a[]){\n\tint i, j, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){count++;}\n\t\t}\n\t\tif(count==4){return 1;}\n\t}\n\treturn 0;\n}\n\nint straight(int a[]){\n\tint i, j, m, flag=0, count;\n\t\n\tfor(i=0; i<5; i++){\n\t\tfor(j=i; j<5; j++){\n\t\t\tif(a[i]>a[j]){\n\t\t\t\tm=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=m;\n\t\t\t}\n\t\t}\n\t}\n\tcount=0;\n\tfor(i=0; i<5; i++){\n\t\tif(a[i]!=a[0]+i){\n\t\t\tflag=0;\n\t\t}else{\n\t\t\tflag++;\n\t\t}\n\t}\n\t\n\tif(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13){\n\t\tflag++;\n\t}\n\t\n\tif(a[0]==1 && a[1]==2){\n\t\tflag=0;\n\t}\n\t\n\tif(flag){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint full_house(int a[]){\n\tint i, j, k, m, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){\n\t\t\t\tcount++;\n\t\t\t\tm=i;\n\t\t\t}\n\t\t}\n\t\tif(count==3){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(count!=3){;return 0;}\n\t\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1 && m!=i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count==2){\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint output(int n){\n\tswitch(n){\n\t\tcase 1:\n\t\t\tprintf(\"null\\n\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tprintf(\"three card\\n\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tprintf(\"straight\\n\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tprintf(\"full house\\n\");\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tprintf(\"four card\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint main (void){\n\tint cards[5], result;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4])!=EOF){\n\t\tresult=1;\n\t\tif(one_pair(cards)){\n\t\t\tresult=bigger(result, 2);\n\t\t}\n\t\tif(two_pair(cards)){\n\t\t\tresult=bigger(result, 3);\n\t\t}\n\t\tif(three_card(cards)){\n\t\t\tresult=bigger(result, 4);\n\t\t}\n\t\tif(straight(cards)){\n\t\t\tresult=bigger(result, 5);\n\t\t}\n\t\tif(full_house(cards)){\n\t\t\tresult=bigger(result, 6);\n\t\t}\n\t\tif(four_card(cards)){\n\t\t\tresult=bigger(result, 7);\n\t\t}\n\t\toutput(result);\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\nconst int INF = 1e9+7;\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define tr(c, i) for(auto i = (c).begin(); i != (c).end(); i++)\n#define rtr(c, i) for(auto i = (c).rbegin(); i != (c).rend(); i++)\n#define repab(i,a,b) for(auto i=a;i<(b);i++)\n#define rep(i,b) for(auto i=0;i<(b);i++)\n#define pb push_back\n#define sz(c) int((c).size())\n\nenum {\n  FOUR_CARD,\n  FULL_HOURSE,\n  STRAIGHT,\n  THREE_CARD,\n  TWO_PAIR,\n  ONE_PAIR,\n  NULL_HAND,\n} hands;\n\nint check(map<int, int> m)\n{\n  int maxnr = 0;\n  int minnr = INF;\n  int maxv = 0;\n  int minv = INF;\n  int maxnr_count = 0;\n  tr (m, i) {\n    if (maxnr < i->second) {\n      maxnr_count=1;\n      maxnr = i->second;\n    } else if (maxnr == i->second) {\n      maxnr_count++;\n    }\n    minnr = min(minnr, i->second);\n    maxv = max(maxv, i->first);\n    minv = min(minv, i->first);\n  }\n  if (maxnr == 4)\n    return FOUR_CARD;\n  if (maxnr == 3 && minnr == 2)\n    return FULL_HOURSE;\n  if (minnr == 1 && maxnr == 1) {\n    if ((maxv - minv == 4) || (m[10] && m[11] && m[12] && m[13] && m[1]))\n      return STRAIGHT;\n  }\n  if (maxnr == 3)\n    return THREE_CARD;\n  if (maxnr == 2) {\n    if (maxnr_count == 2)\n      return TWO_PAIR;\n    else\n      return ONE_PAIR;\n  }\n\n  return NULL_HAND;\n}\nvoid phand(map<int, int> m)\n{\n  vector<string> hand_name = {\n    \"four card\",\n    \"full house\",\n    \"straight\",\n    \"three card\",\n    \"two pair\",\n    \"one pair\",\n    \"null\",\n  };\n  cout << hand_name[check(m)] << endl;\n}\n\nint main(int argc, char **argv)\n{\n  vi v;\n  map<int, int> m;\n  char c;\n  int x, minval;\n\n  for (;;) {\n    v.clear();\n    m.clear();\n    rep (i, 4) {\n      cin >> x;\n      cin >> c;\n      v.pb(x);\n    }\n    cin >> x;\n    v.pb(x);\n    if (cin.eof())\n      break;\n\n    rep (i, 5) {\n      m[v[i]]++;\n    }\n    phand(m);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <string>\n#include <cmath>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<int(n);++i)\n\nstatic const double PI=6*asin(0.5);\ntypedef complex<double> P;\ntypedef long long ll;\n\n\nint a[5]={0};\nint c[14]={0};\nint node;\nchar t;\nint tmp;\n\nint main(){\n\twhile(cin>>tmp){\n\t\tc[tmp]++;\n\t\trep(i,4){\n\t\t\tcin>>t>>tmp;\n\t\t\tc[tmp]++;\n\t\t}\n\t\trep(i,14){\n\t\t\ta[c[i]]++;\n\t\t}\n\t\tbool str=false;\n\t\trep(i,10){\n\t\t\tif(c[i]==1){\n\t\t\t\trep(j,4){\n\t\t\t\t\tif(c[i+j+1]!=1){\n\t\t\t\t\t\tstr=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(j==3) str=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(str) break;\n\t\t}\n\t\tif(c[1]==1&&c[10]==1&&c[11]==1&&c[12]==1&&c[13]==1) str=true;\n\t\tif(a[4]==1) cout<<\"four card\\n\";\n\t\telse if(a[3]==1&&a[2]==1) cout<<\"full hause\\n\";\n\t\telse if(str) cout<<\"straight\\n\";\n\t\telse if(a[3]==1) cout<<\"three card\\n\";\n\t\telse if(a[2]==2) cout<<\"two pair\\n\";\n\t\telse if(a[2]==1) cout<<\"one pair\\n\";\n\t\telse cout<<\"null\\n\";\n\t\t\n\t\trep(i,14) c[i]=0;\n\t\trep(i,5) a[i]=0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n\nint main (){\n\t\n\tint card[6];\n\tint temp=0;\n\tint index;\n\tint i, j;\n\t\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])!=EOF){\n\t\tdo{\n\t\t\tfor(j=0;j<5;j++){\n\t\t\t\tfor(i=0;i<5-1;i++){\n\t\t\t\t\tif(card[i]>card[i+1]){\n\t\t\t\t\t\tindex=card[i+1];\n\t\t\t\t\t\tcard[i+1]=card[i];\n\t\t\t\t\t\tcard[i]=index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (card[j]>card[j+1]);\n\tif((card[0]==card[1] && card[1]==card[2] && card[3]==card[4]) || (card[0]==card[1] && card[2]==card[3] && card[3]==card[4])){\n\t\tprintf(\"full house\\n\");}\n\telse if((card[0]==card[1] && card[1]==card[2] && card[2]==card[3]) || (card[1]==card[2] && card[2]==card[3] && card[3]==card[4])){\n\t\tprintf(\"four card\\n\");}\n\telse if((card[0]==card[1] && card[1]==card[2]) || (card[1]==card[2] && card[2]==card[3]) || (card[2]==card[3] && card[3]==card[4])){\n\t\tprintf(\"three card\\n\");}\n\telse if((card[0]==card[1] && card[2]==card[3]) || (card[0]==card[1] && card[3]==card[4]) || (card[1]==card[2] && card[2]==card[3])){\n\t\tprintf(\"two pair\\n\");}\n\telse if(card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4]){\n\t\tprintf(\"\\none pair\\n\");}\n\telse if((card[0]==card[1]-1 && card[1]==card[2]-1 && card[2]==card[3]-1 && card[3]==card[4]-1) || \n\t\t\t(card[0]==1 && card[1]==card[2]-1 && card[2]==card[3]-1 && card[3]==card[4]-1)){\n\t\tprintf(\"stright\\n\");}\n\telse printf(\"null\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef pair<int,P> pip;\ntypedef long long ll;\nconst int inf=(1<<31)-1;\nconst double pi=acos(-1);\n\nint a;\nvi n(5);\nchar t;\n\nint main(){\n\twhile(cin>>a){\n\t\tvi vec,tmp;\n\t\tn[0]=a;\n\t\tvec.push_back(a);\n\t\tfor(int i=1;i<5;i++){\n\t\t\tcin>>t>>n[i];\n\t\t\tbool used=1;\n\t\t\tfor(int j=0;j<vec.size();j++){\n\t\t\t\tif(n[i]==vec[j]) used=0;\n\t\t\t}\n\t\t\tif(used) vec.push_back(n[i]);\n\t\t\telse tmp.push_back(n[i]);\n\t\t}\n\t\tif(vec.size()==4){\n\t\t\tcout<<\"one pair\"<<endl;;\n\t\t\tcontinue;\n\t\t}\n\t\tif(vec.size()==3){\n\t\t\tif(tmp[0]==tmp[1]) cout<<\"three card\"<<endl;\n\t\t\telse cout<<\"two card\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(vec.size()==2){\n\t\t\tif(tmp[0]==tmp[1]&&tmp[1]==tmp[2]) cout<<\"four card\"<<endl;\n\t\t\telse cout<<\"full house\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tsort(n.begin(),n.end());\n\t\tint tmpn=0;\n\t\tfor(int i=1;i<4;i++){\n\t\t\tif(n[i]+1==n[i+1]) tmpn++;\n\t\t}\n\t\tif((n[0]==1&&n[1]==10)||n[0]+1==n[1]) tmpn++;\n\t\tcout<<tmpn<<endl;\n\t\tif(tmpn==4){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout<<\"null\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nint main(){\n  int card[5],ans,cou=0,tmp,i,j;\n  char yaku[7][15] = {\"four card\",\"full house\",\"straight\",\"three card\",\"two pair\",\"one pair\",\"null\"};\n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n    for(i=0;i<5;i++){\n      if(card[i] == 1){\n\tcard[i] = 14;\n      }\n    }\n    for(i=0;i<5;i++){\n      for(j=i+1;j<5;j++){\n\tif(card[i] > card[j]){\n\t  tmp = card[i];\n\t  card[i] = card[j];\n\t  card[j] = tmp;\n\t}\n      }\n    }\n    i=0;\n    if(card[0] == card[1] && card[1] == card[2] && card[2] == card[3] || card[1] == card[2] && card[2] == card[3] && card[3] == card[4]) ans = 0;\n    else if(card[0] == card[1] && card[1] == card[2] && card[3] == card[4] || card[0] == card[1] && card[2] == card[3] && card[3] == card[4]) ans = 1;\n    else if(card[1] == card[0] + 1 && card[2] == card[0] + 2 && card[3] == card[0] + 3 && card[4] == card[0] + 4) ans = 2;\n    else if(card[i] == card[i+1] && card[i+1] == card[i+2] || card[i+1] == card[i+2] && card[i+2] == card[i+3] || card[i+2] == card[i+3] && card[i+3] == card[i+4]) ans = 3;\n    else{\n      for(i=0;i<4;i++){\n\tif(card[i] == card[i+1]){\n\t  cou++;\n\t}\n      }\n      if(cou == 2){\n\tans = 4;\n      }\n      else if(cou == 1){\n\tans = 5;\n      }\n      else{\n\tans = 6;\n      }\n    }\n    printf(\"%s\\n\",yaku[ans]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <set>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nint main() {\n  int a,b,c,d,e;\n   while(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)==5) {\n     vector<int> v;\n     \n     v.push_back(a);\n     v.push_back(b);\n     v.push_back(c);\n     v.push_back(d);\n     v.push_back(e);\n     sort(ALL(v));\n\n     int aa = count(ALL(v),v[0]);\n     int bb = count(ALL(v),v[1]);\n     int cc = count(ALL(v),v[2]);\n     int dd = count(ALL(v),v[3]);\n     \n     if (aa == 4 || bb == 4) {\n       cout << \"four card\" << endl;\n     } else if (aa==3&&dd==2||aa==2&&cc==3){\n       cout << \"full house\" << endl;\n     } else if (v[0]+1==v[1]&&v[1]+1==v[2]&&v[2]+1==v[3]&&v[3]+1==v[4]) {\n       cout << \"straight\" << endl;\n     } else if (v[0]==1&&v[1]==10&&v[2]==11&&v[3]==12&&v[4]==13) {\n       cout << \"straight\" << endl;\n     } else if (aa==3||bb==3||cc==3) {\n       cout << \"three card\" << endl;\n     } else if (aa==2&&cc==2||aa==2&&dd==2||bb==2&&dd==2) {\n       cout << \"two pair\" << endl;\n     } else if (aa==2||bb==2||cc==2||dd==2) {\n       cout << \"one pair\" << endl;\n     } else\n       cout << \"null\" << endl;\n   }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int a,b,c,d,e,k[14],max,max2,str,straight;\n  char s;\n  while(cin>>a>>s>>b>>s>>c>>s>>d>>s>>e){\n    for(int i=1;i<=13;i++)k[i]=0;\n    k[a]++;\n    k[b]++;\n    k[c]++;\n    k[d]++;\n    k[e]++;\n    max=0;\n    max2=0;\n    str=0;\n    straight=0;\n    for(int i=1;i<=13;i++){\n      if(max<=k[i]){//??°???\n\tmax2=max;\n\tmax=k[i];\n      }else if(max2<=k[i])max2=k[i];\n\n      if(k[i]==1){\n\tstr++;\n\tif(str==5)straight=1;\n      }else str=0;\n      \n    }\n    \n    if(max==4&&max2==1)cout<<\"four card\"<<endl;\n    else if(max==3&&max2==2)cout<<\"full house\"<<endl;\n    else if(straight==1)cout<<\"straight\"<<endl;\n    else if(k[10]==1&&k[11]==1&&k[12]==1&&k[13]==1&&k[1]==1)cout<<\"straight\"<<endl;\n    else if(max==3&&max2==1)cout<<\"three card\"<<endl;\n    else if(max==2&&max2==2)cout<<\"two pair\"<<endl;\n    else if(max==2&&max2==1)cout<<\"one pair\"<<endl;\n    else cout<<\"null\"<<endl;\n    \n\t\t\t\t\t\t\t\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\n\twhile(~scanf(\"%d\", &hand[0])){\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\t\tint num[17] = {0};\n\n\t\tfor(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1){\n\t\t\t\thand[i] += 13;\n\t\t\t}\n\t\t\tnum[hand[i]]++;\n\t\t}\n\n\t\tint h = 0;\n\t\tstring s[] = {\n\t\t\t\"null\",\n\t\t\t\"one pair\",\n\t\t\t\"two pair\",\n\t\t\t\"three card\",\n\t\t\t\"straight\",\n\t\t\t\"full house\",\n\t\t\t\"four card\",\n\t\t};\n\t\tint seq = 0;\n\n\t\tfor(int i = 2; i < 17; i++){\n\t\t\tif(num[i] == 2){\n\t\t\t\tif(h == 3){\n\t\t\t\t\th = 5;\n\t\t\t\t}else{\n\t\t\t\t\th++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(num[i] == 3){\n\t\t\t\tif(h == 1){\n\t\t\t\t\th = 5;\n\t\t\t\t}else{\n\t\t\t\t\th = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(num[i] == 4){\n\t\t\t\th = 6;\n\t\t\t}\n\t\t\telse if(num[i-2]&num[i-1]&num[i]&num[i+1]&num[i+2]){\n\t\t\t\th = 4;\n\t\t\t}\n\t\t}\n\n\t\tcout << s[h] << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstdio>\nusing namespace std;\n\nint main(){\n    vector<int> a(5);\n    while(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])){\n\tsort(a.begin(), a.end());\n\tif(count(a.begin(), a.end(), a[3]) == 4){\n\t    cout << \"four card\" << endl;\n\t}\n\telse if(count(a.begin(), a.end(), a[0]) + count(a.begin(), a.end(), a[4]) == 5){\n\t    cout << \"full house\" << endl;\n\t}\n\telse if(count(a.begin(), a.end(), a[3]) == 3){\n\t    cout << \"three card\" << endl;\n\t}\n\telse if(count(a.begin(), a.end(), a[1]) + count(a.begin(), a.end(), a[3]) == 4){\n\t    cout << \"two pair\" << endl;\n\t}\n\telse{\n\t    \n\t    for(int i = 0;i < 5;i++){\n\t\tif(count(a.begin(), a.end(), a[i]) == 2){\n\t\t    cout << \"one pair\" << endl;\n\t\t    goto done;\n\t\t}\n\t    }\n\t    if(a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13){\n\t\tcout << \"straight\" << endl;\n\t\tgoto done;\n\t    }\n\t    for(int i = 0;i < 5;i++){\n\t\tif(a[i] != a[0] + i)break;\n\t\tif(i == 4){\n\t\t    cout << \"straight\" << endl;\n\t\t    goto done;\n\t\t}\n\t    }\n\t    cout << \"null\" << endl;\n\t}\n    done :;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <stack>\n#include <set>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tvector<int> c(5);\n\tchar a;\n\twhile(cin >> c[0] >> a >> c[1] >> a >> c[2] >> a >> c[3] >> a >> c[4]){\n\t\tbool yaku=false;\n\t\tint cnt[5]={0};\n\t\tsort(c.begin(),c.end());\n\t\tif((c[0]==(c[1]-1) && c[0]==(c[2]-2) && c[0]==(c[3]-3) && c[0]==(c[4]-4)) || (c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13)) {cout << \"straight\" << endl ; continue;} \n\t\tfor(int i=0;i<5;++i){\n\t\t\tfor(int j=i+1;j<5;++j){\n\t\t\t\tif(c[i]==c[j] && c[i]!=-1) cnt[i]++, c[j]=-1; \n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<5;++i){\n\t\t\tif(cnt[i]==3) {cout << \"four card\" << endl;yaku=true; break;}\n\t\t\telse if(cnt[i]==2) {\n\t\t\t\tif(cnt[3]==1) {cout << \"full house\" << endl; yaku=true;  break;}\n\t\t\t\telse {cout << \"three card\" << endl; yaku=true; break;}\n\t\t\t}\n\t\t\telse if(cnt[i]==1) {\n\t\t\t\tif(cnt[2]==2) {cout << \"full house\" << endl;yaku=true; break;}\n\t\t\t\telse if (cnt[i+2]==1|| cnt[i+3]==1) {cout << \"two pair\" << endl; yaku=true; break;}\n\t\t\t\telse {cout << \"one pair\" << endl; yaku=true; break;} \n\t\t\t}\n\t\t}\n\t\tif (!yaku) cout << \"null\" << endl;\n\t}\n\treturn 0; \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst string yaku[] = {\"null\",\n\t\t       \"one pair\",\n\t\t       \"two pair\",\n\t\t       \"three card\",\n\t\t       \"four card\",\n\t\t       \"straight\",\n\t\t       \"full house\"};\nint one(int T[]){\n  int cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 1)return 1;\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  return -1;\n}\n\nint two(int T[]){\n  int cnt = 0,f = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 2)return 2;\n  }\n  return -1;\n}\n\nint three(int T[]){\n  int cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 2)return 3;\n    if(T[i]!=T[i+1])cnt = 0;\n  }\n  return -1;\n}\n\nint four(int T[]){\n  int cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 3)return 4;\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  return -1;\n}\nint straigt(int T[]){\n  int f = 1;\n  if(T[0] == 1&&T[4] == 13){\n    if(T[1] == 10 && T[2] == 11 && T[3] == 12 )f = 1;\n    else f = 0;\n  }else{\n    for(int i = 0 ; i < 5 ; i++ ){\n      if(T[i] != i + T[0])f = 0;\n    }\n  }\n  if(f)return 5;\n  else return -1;\n}\n\nint fullhouse(int T[]){\n  int cmp1=-1,cmp2=-1;\n  int cnt = 0;\n  //3\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 2){\n      cmp1 = T[i];\n      break;\n    }\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  //2\n  cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 1 && T[i+1] != T[i+2]){\n      cmp2 = T[i];\n      break;\n    }\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  if(cmp1 != cmp2 && cmp1 > 0 && cmp2 > 0)return 6;\n  else return -1;\n}\n\nint main(){\n  int toranpu[5];\n  char c;\n  while(cin >> toranpu[0]){\n    int f = 0;\n    for(int i = 1; i < 5 ; i++){\n      cin >> c >>toranpu[i];\n    }\n    sort(toranpu,toranpu+5);\n\n    if(one(toranpu) != -1)f = one(toranpu);\n\n    if(two(toranpu) != -1)f = two(toranpu);\n\n    if(three(toranpu) != -1)f = three(toranpu);\n\n    if(four(toranpu) != -1)f = four(toranpu);\n\n    if(straigt(toranpu) != -1)f = straigt(toranpu);\n\n    if(fullhouse(toranpu) != -1)f = fullhouse(toranpu);\n\n    cout << yaku[f] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\n\nvoid Solution()\n{\n    // this problem can be solved by the way which can list up all situations case by case\n    // all can be done like this way\n    const string poker[] =\n    { \"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n    \n    int a[5];\n    char comma;\n    \n    while(cin>>a[0]>>comma>>a[1]>>comma>>a[2]>>comma>>a[3]>>comma>>a[4])\n    {\n        sort(a, a + 5);\n        \n        // Algorithm\n        int pair[5] = {0};\n        int count = 0;\n        \n        for (int i = 0; i < 5; i++)\n        {\n            if (a[i] == a[i + 1])\n            {\n                count++;\n            }\n            else\n            {\n                pair[count]++;\n                count = 0;\n            }\n        }\n        \n        if (pair[3] == 1)\n        {\n            cout << poker[6] << endl;\n        }\n        else if (pair[1] == 1 && pair[2] == 1)\n        {\n            cout << poker[5] << endl;\n        }\n        else if (pair[2] == 1)\n        {\n            cout << poker[3] << endl;\n        }\n        else if (pair[1] == 2)\n        {\n            cout << poker[2] << endl;\n        }\n        else if (pair[1] == 1)\n        {\n            cout << poker[1] << endl;\n        }\n        else if (pair[0] == 5)\n        {\n//            int i;\n//            for (i = 1; i < 4; i++)\n//                if (input[i + 1] != input[1] + i)\n//                    break;\n//            if (i == 4 && ((input[0] == input[1] - 1) || (input[0] == 1)))\n//                cout << poker[4] << endl;\n//            else\n//                cout << poker[0] << endl;\n            if((a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) ||\n               (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13))\n            {\n                cout<<poker[4]<<endl;\n            }\n            else\n            {\n                cout<<poker[0]<<endl;\n            }\n        }\n        \n    }\n}\n\nint main()\n{\n    Solution();\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tint l[5];\n\tchar c;\n\twhile (cin >> l[0] >> c >> l[1] >> c >> l[2] >> c >> l[3] >> c >> l[4]) {\n\t\tsort(l, l + 5);\n\t\tif (l[0] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[4] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[0] == l[1] && l[1] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[0] == l[1] && l[3] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[4] == l[3] + 1 && l[3] == l[2] + 1 && l[2] == l[1] + 1 && l[1] == l[0] + 1)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == 1 && l[1] == 10 && l[2] == 11 && l[3] == 12 && l[4] == 13)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[4] && l[3] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[0] == l[1] && l[2] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[2] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] || l[1] == l[2] || l[2] == l[3] || l[3] == l[4])\n\t\t\tcout << \"one pair\";\n\t\telse cout << \"null\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nstring paircard(int card[]){\n\t\tint num[13] = {0};\n\t\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\t\tsort(num,num+13,greater<int>());\n\t\t\tif(num[0] == 4 && num[1] ==1) return \"four card\";\n\t\t\tif(num[0] == 3 && num[1] ==2) return \"full house\";\n\t\t\tif(num[0] == 3 && num[1] ==1) return \"three card\";\n\t\t\tif(num[0] == 2 && num[1] ==2) return \"two pair\";\n\t\t\tif(num[0] == 2 && num[1] ==1) return \"one pair\";\n\t\treturn \"null\";\n}\n\nbool straight(int card[]){\n\tif(card[0] == 1 && card[1]==10 && card[2] == 11 && card[3] == 12 && card[4] == 13)\n\treturn true;\n\tint ans = 1;\n\tfor(int i=0;i+1<5;i++) if(card[0]+i+1 == card[i+1]) ans++;\n\tif(ans==5) return true;\n\n\treturn false;\n}\n\nstring poker(int card[]){\n\tif(straight(card)){return \"straight\";}\n \treturn paircard(card);\n}\n\nint main(){\n\tchar k; int card[5];\n\twhile(1){\n\t\tcin>>card[0]>>k>>card[1]>>k>>card[2]>>k>>card[3]>>k>>card[4];\n\t\t\t\tif(cin.eof())break;\n\t\tsort(card,card+5);\n\t\tcout << poker(card) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <vector>\n#include <map>\n#include <utility>\n#include <complex>\n#include <stack>\n#include <climits>\n#include <set>\n#include <numeric>\n\nusing namespace std;\n\nint t[5];\n\nbool straight()\n{\n\tif(t[0] == 1 && t[1] == 10 && t[2] == 11 && t[3] == 12 && t[4] == 13) return true;\n\tfor (int i = 0; i < 4; i++){\n\t\tif(t[i+1]-t[i] != 1) return false;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",t,t+1,t+2,t+3,t+4)){\n\t\tsort(t,t+5);\n\t\tif(t[0] == t[3] || t[1] == t[4])\n\t\t\tputs(\"four card\");\n\t\telse if( (t[0] == t[1] && t[2] == t[4]) || (t[0] == t[2] && t[3] == t[4]))\n\t\t\tputs(\"full house\");\n\t\telse if(straight())\n\t\t\tputs(\"straight\");\n\t\telse if(t[0] == t[2] || t[1] == t[3] || t[2] == t[4])\n\t\t\tputs(\"three card\");\n\t\telse if( (t[0] == t[1] && (t[2] == t[3] || t[3] == t[4])) || (t[1] == t[2] && t[3] == t[4]) )\n\t\t\tputs(\"two pair\");\n\t\telse if( t[0] == t[1] || t[1] == t[2] || t[2] == t[3] || t[3] == t[4])\n\t\t\tputs(\"one pair\");\n\t\telse \n\t\t\tputs(\"null\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint bigger(int a, int b){\n\tif(a>=b){return a;}\n\treturn b;\n}\n\nint one_pair(int a[]){\n\tint i, j;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(j!=i){\n\t\t\t\tif(a[i]==a[j]){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint two_pair(int a[]){\n\tint i, j, count=0;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(a[i] == a[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(count == 4){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint three_card(int a[]){\n\tint i, j, k;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tfor(k=0; k<5; k++){\n\t\t\t\tif(i!=j && i!=k && j!=k){\n\t\t\t\t\tif(a[i]==a[j] && a[i]==a[k]){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint four_card(int a[]){\n\tint i, j, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){count++;}\n\t\t}\n\t\tif(count==4){return 1;}\n\t}\n\treturn 0;\n}\n\nint straight(int a[]){\n\tint i, j, m, flag=0;\n\t\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[i]<a[j]){\n\t\t\t\tm=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=m;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0; i<5; i++){\n\t\tif(i<4){\n\t\t\tif(a[i+1]-a[i]==1){\n\t\t\t\tflag++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13){\n\t\tflag++;\n\t}\n\tif(a[0]==1 && a[1]==2){\n\t\tflag*=0;\n\t}\n\tif(flag){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint full_house(int a[]){\n\tint i, j, k, m, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){\n\t\t\t\tcount++;\n\t\t\t\ta[j]=-1;\n\t\t\t}\n\t\t}\n\t\tif(count==3){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(count!=3){return 0;}\n\t\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]=i+1){\n\t\t\t\tcount++;\n\t\t\t\ta[j]=-1;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint output(int n){\n\tswitch(n){\n\t\tcase 1:\n\t\t\tprintf(\"null\\n\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tprintf(\"three card\\n\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tprintf(\"straight\\n\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tprintf(\"full house\\n\");\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tprintf(\"four card\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint main (void){\n\tint cards[5], result;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4])!=EOF){\n\t\tresult=1;\n\t\tif(one_pair(cards)){\n\t\t\tresult=bigger(result, 2);\n\t\t}\n\t\tif(two_pair(cards)){\n\t\t\tresult=bigger(result, 3);\n\t\t}\n\t\tif(three_card(cards)){\n\t\t\tresult=bigger(result, 4);\n\t\t}\n\t\tif(straight(cards)){\n\t\t\tresult=bigger(result, 5);\n\t\t}\n\t\tif(full_house(cards)){\n\t\t\tresult=bigger(result, 6);\n\t\t}\n\t\tif(four_card(cards)){\n\t\t\tresult=bigger(result, 7);\n\t\t}\n\t\tprintf(\"%d\\n\", result);\n\t\toutput(result);\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<math.h>\n#include<string>\n#include<string.h>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<utility>\n#include<set>\n#include<map>\n#include<stdlib.h>\n#include<iomanip>\n\nusing namespace std;\n\n#define ll long long\n#define ld long double\n#define EPS 0.0000000001\n#define INF 1e9\n#define MOD 1000000007\n#define rep(i,n) for(i=0;i<n;i++)\n#define loop(i,a,n) for(i=a;i<n;i++)\n#define all(in) in.begin(),in.end()\n#define shosu(x) fixed<<setprecision(x)\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n\nint main(void) {\n  int i,j;\n  int a,b,c,d,e;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)!=EOF){\n    vi v(14,0);\n    v[a]++;\n    v[b]++;\n    v[c]++;\n    v[d]++;\n    v[e]++;\n\n    bool ans=false;\n    if(v[1]&&v[10]&&v[11]&&v[12]&&v[13]){\n      cout<<\"straight\"<<endl;\n      ans=true;\n    }\n    rep(i,10)\n      if(v[i]&&v[i+1]&&v[i+2]&&v[i+3]&&v[i+4]){\n\tcout<<\"straight\"<<endl;\n\tans=true;\n      }\n    if(ans)continue;\n\n    int na=0,nb=0,nc=0;\n    rep(i,14)\n      if(v[i]==2)na++;\n      else if(v[i]==3)nb++;\n      else if(v[i]==4)nc++;\n\n    if(nc)cout<<\"four card\"<<endl;\n    else if(na&&nb)cout<<\"full house\"<<endl;\n    else if(nb)cout<<\"three pair\"<<endl;\n    else if(na==2)cout<<\"two pair\"<<endl;\n    else if(na)cout<<\"one pair\"<<endl;\n    else cout<<\"null\"<<endl;\n  END:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#include<vector>\n#include<list>\n#include<stack>\n#include<queue>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<complex>\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define X real()\n#define Y imag()\n\n\nint main(){\n    int mod=1000000007;\n    int ax, ay;\n    char f[12][12];\n    int c[5];\n    while (scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF) {\n        vector<int> card(5);\n        for (int i=0;i<5;++i) {\n            card[i]=c[i];\n        }\n        sort(card.begin(),card.end());\n        if ((card[1]==card[2] && card[2]==card[3]) && (card[0]==card[1] || card[4]==card[3])) printf(\"four card\\n\");\n        else if ((card[0]==card[1] && card[3]==card[4]) && (card[2]==card[1] || card[2]==card[3])) printf(\"full house\\n\");\n        else if (card[0]==card[1]-1 && card[1]==card[2]-1 && card[2]==card[3]-1 && card[3]==card[4]-1) printf(\"straight\\n\");\n        else if (card[0]==1 && card[1]==10 && card[2]==11 && card[3]==12 && card[4]==13) printf(\"straight\\n\");\n        else if ((card[0]==card[1] && card[1]==card[2]) || (card[1]==card[2] && card[2]==card[3]) || (card[2]==card[3] && card[3]==card[4])) printf(\"three card\\n\");\n        else if ((card[0]==card[1] && (card[2]==card[3] || card[3]==card[4])) || (card[1]==card[2] && card[3]==card[4])) printf(\"two pair\\n\");\n        else if (card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4]) printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[1] == p[2] and p[3] == p[4]) or (p[0] == [1] and p[2] == p[3] == p[4]):\n\t\tprint('full house')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif p[0] == p[1] or p[1] == p[2] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif p[0] == p[1]-1 and p[1] == p[2]-1 and p[2] == p[3]-1 and p[3] == p[4]-1 and p[4] == p[3]+1:\n\t\tprint('straight')\n\telif p[0] == 1 and p[1] == 10 and p[2] == 11 and p[3] == 12 and p[4] == 13:\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int card[5];\n  while(scanf(\"%d,%d,%d,%d,%d\", \n\t      &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n    sort(&card[0], &card[4] + 1);\n\n    int data1[5];\n    int kumi = 0;\n    int before = 0;\n    int count = 1;\n    for(int i = 0; i < 5; i++) {\n      if(card[i] != before) {\n\tdata1[kumi++] = count;\n\tcount = 1;\n      } else {\n\tcount++;\n      }\n      before = card[i];\n    }\n\n    if(kumi == 2) {\n      if(data1[0] == 4 || data1[1] == 4) {\n\tcout << \"four card\" << endl;\n      }\n      if(data1[0] == 3 || data1[1] == 3) {\n\tcout << \"full house\" << endl;\n      }\n    }\n    if(kumi == 3) {\n      if(data1[0] == 3 || data1[1] == 3 || data1[2] == 3) {\n\tcout << \"three card\" << endl;\n      }\n      if(data1[0] == 1 || data1[1] == 1 || data1[2] == 1) {\n\tcout << \"two pair\" << endl;\n      }\n    }\n    if(kumi == 4) {\n      cout << \"one pair\" << endl;\n    }\n    if(kumi == 5) {\n      bool flag = false;\n      for(int i = 0; i+1 < 5; i++) {\n\tif(card[i+1] - card[i] != 1) {\n\t  break;\n\t}\n\tif((i+1)+1 == 5) flag = true;\n      }\n      if(card[0] == 1 && card[1] == 10 &&\n\t card[2] == 11 && card[3] == 12 && card[4] == 13) flag = true;\n\n      if(flag) {\n\tcout << \"straight\" << endl;\n      } else {\n\tcout << \"null\" << endl;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n\n      }\n    }\n    mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    /*for (int i = 0; i < mx_v.size(); i++) {\n      printf(\"mx[%d] = %d\\n\", i, mx_v[i]);\n    }\n    printf(\"mx = %d\\n\", mx);*/\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c >= 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      //printf(\"size = %d\\n\",mx_v.size());\n      for (int i = 0;  i < mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n      }\n      printf(\"three card\\n\");\n      goto end;\n    } else if (mx == 4 || mx == 5) {\n      printf(\"four card\\n\");\n      goto end;\n    } else {\n      printf(\"null\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef pair<int,P> pip;\ntypedef long long ll;\nconst int inf=(1<<31)-1;\nconst double pi=acos(-1);\n\nint a;\nvi n(5);\nchar t;\n\nint main(){\n\twhile(cin>>a){\n\t\tvi vec,tmp;\n\t\tn[0]=a;\n\t\tvec.push_back(a);\n\t\tfor(int i=1;i<5;i++){\n\t\t\tcin>>t>>n[i];\n\t\t\tbool used=1;\n\t\t\tfor(int j=0;j<vec.size();j++){\n\t\t\t\tif(n[i]==vec[j]) used=0;\n\t\t\t}\n\t\t\tif(used) vec.push_back(n[i]);\n\t\t\telse tmp.push_back(n[i]);\n\t\t}\n\t\tif(vec.size()==4){\n\t\t\tcout<<\"one pair\"<<endl;;\n\t\t\tcontinue;\n\t\t}\n\t\tif(vec.size()==3){\n\t\t\tif(tmp[0]==tmp[1]) cout<<\"three card\"<<endl;\n\t\t\telse cout<<\"two pair\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(vec.size()==2){\n\t\t\tif(tmp[0]==tmp[1]&&tmp[1]==tmp[2]) cout<<\"four card\"<<endl;\n\t\t\telse cout<<\"full house\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tsort(n.begin(),n.end());\n\t\tint tmpn=0;\n\t\tfor(int i=1;i<4;i++){\n\t\t\tif(n[i]+1==n[i+1]) tmpn++;\n\t\t}\n\t\tif((n[0]==1&&n[1]==10)||n[0]+1==n[1]) tmpn++;\n\t\tif(tmpn==4){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout<<\"null\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\n\twhile(~scanf(\"%d\", &hand[0])){\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\t\tint num[15] = {0};\n\n\t\tfor(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1){\n\t\t\t\thand[i] += 13;\n\t\t\t}\n\t\t\tnum[hand[i]]++;\n\t\t}\n\n\t\tint h[7] = {0};\n\t\tstring s[] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\t\tint seq = 0;\n\n\t\th[0] = 1;\n\t\tfor(int i = 2; i < 15; i++){\n\t\t\tif(num[i-1] && num[i]){\n\t\t\t\tseq++;\n\t\t\t}\n\t\t\tif(num[i] == 2){\n\t\t\t\th[1] ++;\n\t\t\t}\n\t\t\tif(num[i] == 3){\n\t\t\t\th[3]++;\n\t\t\t}\n\t\t\tif(num[i] == 4){\n\t\t\t\th[6]++;\n\t\t\t}\n\t\t}\n\t\tif(h[1] > 1){\n\t\t\th[2]++;\n\t\t}\n\t\tif(h[1] && h[3]){\n\t\t\th[5]++;\n\t\t}\n\t\tif(seq == 4){\n\t\t\th[4]++;\n\t\t}\n\n\t\tfor(int i = 6; i >= 0; i--){\n\t\t\tif(h[i]){\n\t\t\t\tcout << s[i] << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\tif A[0]==A[3] or A[1]==A[4]:\n\t\tprint(\"four card\")\n\telif (A[0]==A[1] and A[2]==A[4]) or (A[0]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\telif A[0]==A[2] or A[1]==A[3] or A[2]==A[4]:\n\t\tprint(\"three card\")\n\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[0]==A[1] and A[3]==A[4]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\telif A==[1,10,11,12,13]:\n\t\tprint(\"straight\")\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(int,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\n#define REP(i,num) for(int i=0;i<(num);++i)\n#define LOOP(i) while(i--)\n#define ALL(c) c.begin(),c.end()\n#define PRINTALL(c) for(auto& x:c){cout<<x<<' ';}cout<<endl;\n#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}\n\nusing namespace std;\nusing ll = long long;\n\nconstexpr ll atcoder_mod = 1e9+7;\n\ntemplate<typename T=int>\nT in(){T x; cin >> x; return (x);}\ntemplate<typename T=int,typename C=vector<T>>\nC vecin(int N){C x(N);REP(i,N){x[i]=in<T>();}return move(x);}\n\nvoid vout(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid vout(Head&& h,Tail&&... t){cout << ' ' << h;vout(forward<Tail>(t)...);}\nvoid out(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid out(Head&& h,Tail&&... t){cout << h;vout(forward<Tail>(t)...);}\n\nvector<string> split_naive(const string &s, char delim) {\n\tvector<string> elems;\n\tstring item;\n\tfor(char ch:s){\n\t\tif(ch==delim){\n\t\t\tif(!item.empty()) elems.push_back(item);\n\t\t\titem.clear();\n\t\t}\n\t\telse{\n\t\t\titem += ch;\n\t\t}\n\t}\n\tif(!item.empty()) elems.push_back(item);\n\treturn elems;\n}\n\nint main(){\n\t//cin.tie(0);\n\t//ios::sync_with_stdio(false);\n\t\n\tstring S;\n\twhile(cin>>S){\n\t\tauto SS=split_naive(S,',');\n\t\tvector<int> C(5);\n\t\tmap<int,int> M;\n\t\tREP(i,5){\n\t\t\tsscanf(SS[i].c_str(),\"%d\",&C[i]);\n\t\t\tM[C[i]]++;\n\t\t}\n\t\tsort(ALL(C));\n\t\t\n\t\tint two=0,three=0,four=0;\n\t\tfor(auto& x:M){\n\t\t\tif(x.second==2) two++;\n\t\t\telse if(x.second==3) three++;\n\t\t\telse if(x.second==4) four++;\n\t\t}\n\t\tif(four){\n\t\t\tout(\"four card\");\n\t\t}\n\t\telse if(three){\n\t\t\tif(two){\n\t\t\t\tout(\"full house\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tout(\"three card\");\n\t\t\t}\n\t\t}\n\t\telse if(two){\n\t\t\tif(two==2){\n\t\t\t\tout(\"two pair\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tout(\"one pair\");\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tbool straight = true;\n\t\t\tif(C[0]==1){\n\t\t\t\tif(C[1]==2 || C[1]==10){\n\t\t\t\t\tfor(int i=1;i<4;i++){\n\t\t\t\t\t\tif(C[i+1]!=C[i]+1){\n\t\t\t\t\t\t\tstraight = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstraight = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tREP(i,4){\n\t\t\t\t\tif(C[i+1]!=C[i]+1){\n\t\t\t\t\t\tstraight = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(straight){\n\t\t\t\tout(\"straight\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tout(\"null\");\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// AOJ q0038\n// YAMADA Terushige\n// 2013.5.6\n\n#include<iostream>\n#include<set>\n#include<vector>\n \nusing namespace std;\n \nint main(){\n  int card;\n  char c;\n  while(cin >> card){\n    string ans = \"null\";\n    vector<int> num(15,0);\n    set<int> spc;\n    num[card]++;\n    spc.insert(card);\n    for(int i=0;i<4;i++){\n      cin >> c >> card;\n      num[card]++;\n      spc.insert(card);\n    }\n    num[14]=num[1];\n\n    int max = 0;\n    for(int i=1;i<=13;i++)\n      if(num[i]>max) max= num[i];\n\n    switch(max){\n\n    case 4:\n      ans = \"four card\";\n      break;\n\n    case 3:\n      if(spc.size()==3) ans = \"three card\";\n      else if(spc.size()==2) ans = \"full house\";\n      break;\n\n    case 2:\n      if(spc.size()==4) ans = \"one pair\";\n      else if(spc.size()==3) ans = \"two pair\";\n      break;\n      \n    case 1:\t\n      for(int i=1;i<=10;i++){\n\tint j;\n\tfor(j=0;j<5;j++)\n\t  if(num[i+j]!=1) break;\n\tif(j==5){\n\t  ans = \"straight\";\n\t  break;\n\t}\n      }\n\n    }\n    cout << ans << endl;\t\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n\tint hand[6] = {};\n\twhile (~scanf(\"%d\", &hand[0])){\n\t\tfor (int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\n\t\tint cnt = 0, flag = true, card[13] = {}, max = 4;\n\t\tsort(hand, hand + 5);\n\t\t/*for (int i = 0; i < 5; i++){\n\t\t\tprintf(\"%d \", hand[i]);\n\t\t}\n\t\tputs(\"\");*/\n\t\tfor (int i = 0; i < 4; i++){\n\t\t\tfor (int j = i + 1; j < 5; j++){\n\t\t\t\tif (hand[i] == hand[j]){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"%d\\n\", cnt);\n\t\tint i = 0;\n\t\tif (hand[i] == 1 && hand[i + 1] == 10){\n\t\t\t//printf(\"!!!!!!!\\n\");\n\t\t\ti = 1;\n\t\t\tmax = 5;\n\t\t\thand[5] = 14;\n\t\t}\n\t\tfor (; i < max; i++){\n\t\t\tif (hand[i] + 1 != hand[i + 1]){\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\t\tif (cnt == 6){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if (cnt == 4){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\telse if (flag){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (cnt == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (cnt == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (cnt == 1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    int tmp[5];\n    char com;\n    while(cin >>tmp[0]>>com>>tmp[1]>>com>>tmp[2]>>com>>tmp[3]>>com>>tmp[4]){\n    int hand[15]={};\n\n    for(int i=0; i<5; ++i){\n      if(tmp[i]==1)++hand[13];\n      ++hand[tmp[i]-1];\n    }\n   \n    int pair=0,three=0,str=0,four=0;\n    for(int i=1; i<15; ++i){\n      if(hand[i]==4){++four;}\n      if(hand[i]==1)++str;\n      if(hand[i]==2)++pair;\n      if(hand[i]==3)++three;\n      if(str!=5 && hand[i]==0)str=0;\n    }\n    \n    if(four)cout << \"four card\" << endl;\n    else if(three && pair)cout << \"full house\" << endl;\n    else if(str == 5)cout << \"straight\" << endl;\n    else if(three)cout << \"three card\" << endl;\n    else if(pair == 2)cout << \"two pair\" << endl;\n    else if(pair == 1)cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n    \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    string line;\n    while(cin >> line) {\n        for(int i = 0; i < line.size(); ++i)\n            if(line[i] == ',') line[i] = ' ';\n        istringstream is(line);\n        int v[5];\n        for(int i = 0; i < 5; ++i) is >> v[i];\n\n        sort(v, v+5);\n        string ans;\n        if(v[1]==v[2] && v[2]==v[3] && (v[0]==v[1]||v[3]==v[4])) ans = \"four card\";\n        else if((v[0]==v[1] && (v[2]==v[3] && v[3]==v[4])) || ((v[0]==v[1] && v[1]==v[2]) && v[3]==v[4])) ans = \"full house\";\n        else if(v[0]+1==v[1] && v[1]+1==v[2] && v[2]+1==v[3] && v[3]+1==v[4]) ans = \"straight\";\n        else if(v[0]==1 && v[1]==10 && v[2]==11 && v[3]==12 && v[4]==13) ans = \"straight\";\n        else if((v[0]==v[1] && v[1]==v[2]) || (v[1]==v[2] && v[2]==v[3]) || (v[2]==v[3] && v[3]==v[4])) ans = \"three card\";\n        else if(unique(v, v+5) - v == 3) ans = \"two pair\";\n        else if(unique(v, v+5) - v == 4) ans = \"one pair\";\n        else ans = \"null\";\n\n        cout << ans << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tint card[5]; char ch;\n\twhile(cin>>card[0]>>ch>>card[1]>>ch>>card[2]>>ch>>card[3]>>ch>>card[4]){\n\tint num[13]={0};\n\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\tstring ans=\"null\";\n\tint pair=0;\n\tfor(int i=0;i<13;i++){\n\t\tif(num[i]==2 && pair==0 && ans!=\"three card\") ans=\"one pair\",pair++;\n\t\telse if(num[i]==2 && pair==1 && ans!=\"three card\") ans=\"two pair\",pair++;\n\t\telse if(num[i]==3) ans=\"three card\";\n\t\telse if(num[i]==4) ans=\"four card\";\n\t};\n\tif(ans==\"three card\" && pair==1) ans=\"full house\";\n\tif(ans==\"null\") do{\n\t\tint flag=0;\n\t\tfor(int i=0;i<=9;i++){\n\t\t\tif(flag==0 && num[i]==1) flag=1;\n\t\t\tif(flag==1 && num[i+1]==1&& num[i+2]==1 && num[i+3]==1 && num[i+4]==1) ans=\"straight\";\n\t\t};\n\t\tif(num[9]==1&&num[10]==1&&num[11]==1&&num[12]==1&&num[0]==1) ans=\"straight\";\n\t}while(0);\n\tcout << ans << '\\n' ;\n\t};\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nint main()\n{\n    for(;;){\n        vector<int> card(5);\n        if(!(cin >> card[0]))\n            return 0;\n\n        for(int i=1; i<5; ++i){\n            char c;\n            cin >> c >> card[i];\n        }\n        sort(card.begin(), card.end());\n\n        vector<int> num(5, 0);\n        for(int i=0; i<5; ++i){\n            int j = i+1;\n            while(j < 5 && card[j] == card[i])\n                ++ j;\n            ++ num[j-i];\n            i = j-1;\n        }\n\n        if(num[4] == 1)\n            cout << \"four card\" << endl;\n        else if(num[3] == 1 && num[2] == 1)\n            cout << \"full house\" << endl;\n        else if(num[3] == 1)\n            cout << \"three card\" << endl;\n        else if(num[2] == 2)\n            cout << \"two pair\" << endl;\n        else if(num[2] == 1)\n            cout << \"one pair\" << endl;\n        else if(card[0] == 1 && card[1] + 3 == card[4])\n            cout << \"straight\" << endl;\n        else if(card[0] + 4 == card[4])\n            cout << \"straight\" << endl;\n        else\n            cout << \"null\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint a[5];\n\tint kari;\n\tchar d;\n\t\n\twhile (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n\t\tfor (int i = 4; i > 0; i--) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (a[j] > a[j+1]) {\n\t\t\t\t\tkari = a[j];\n\t\t\t\t\ta[j] = a[j+1];\n\t\t\t\t\ta[j+1] = kari;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n\t\t\tif ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\tif (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t} else if ((a[0] == a[1] && a[1] == a[2] && a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t}else {\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t}\n\t\t\t} else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n\t\t\t\tif ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t} else {\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t} else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n\t\t\tcout << \"straight\" << endl;\n\t\t} else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n#define REP(i,n) for(int (i)=0; (i)<(n); (i)++)\n#define For(i,a,b) for(int (i)=(a); (i)<(b); (i)++)\n\nint main() {\n    vector<int> v(5);\n    char ch;\n    while(cin>>v[0]>>ch>>v[1]>>ch>>v[2]>>ch>>v[3]>>ch>>v[4]) {\n        sort(v.begin(), v.end());\n        int n = 0;\n        REP(i,4) {\n            For(j,i+1,5) {\n                if (v[i] == v[j]) n++;\n            }\n        }\n        \n        switch(n) {\n            case 1:\n                cout << \"one pair\" << endl;\n                break;\n            case 2:\n                cout << \"two pair\" << endl;\n                break;\n            case 3:\n                cout << \"three card\" << endl;\n                break;\n            case 4:\n                cout << \"full house\" << endl;\n                break;\n            case 6:\n                cout << \"four card\" << endl;\n                break;\n            default:\n                if (v[0] == v[4]-4 || (v[0] == 1 && v[1] == 10)) {\n                    cout << \"straight\" << endl;\n                }else {\n                    cout << \"null\" << endl;\n                }\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\t\tif(*it>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(*it==4){\n\t\t\treturn \"four card\";\n\t\t}else if(*it==3){\n\t\t\tis3 = true;\n\t\t}else if(*it==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <functional>\nusing namespace std;\n\nint main()\n{\n  vector<int> cards(5);\n  while (~scanf(\"%d,%d,%d,%d,%d\",\n\t\t&cards[0], &cards[1], &cards[2], &cards[3], &cards[4])) {\n    sort(cards.begin(), cards.end());\n\n    vector<int> cnt(15, 0);\n    for (unsigned int i = 0; i < cards.size(); ++i)\n      ++cnt[cards[i]];\n\n    sort(cnt.begin(), cnt.end(), greater<int>());\n    if (cnt[0] == 4) {\n      cout << \"four card\" << endl;\n    } else if (cnt[0] == 3 && cnt[1] == 2) {\n      cout << \"full house\" << endl;\n    } else {\n      bool straight = true;\n      for (unsigned int i = 1; i < cards.size(); ++i) {\n\tif (cards[i-1]+1 != cards[i])\n\t  straight = false;\n      }\n\n      if (straight ||\n\t  (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)) {\n\tcout << \"straight\" << endl;\n      } else if (cnt[0] == 3) {\n\tcout << \"three card\" << endl;\n      } else if (cnt[0] == 2 && cnt[1] == 2) {\n\tcout << \"two pair\" << endl;\n      } else if (cnt[0] == 2) {\n\tcout << \"one pair\" << endl;\n      } else {\n\tcout << \"null\" << endl;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\ntypedef vector <int> vi;\ntypedef vector <string> vs;\n#define N1 5\n#define N2 13\nint main(void){\n\tvi card(N2);\n\tstring prize[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\n\twhile (true){\n\t\tfor (int i=0; i<N2; i++)\n\t\t\tcard[i]=0;\n\t\tint a=0, b=0, d=N2, p=0,tmp;\n\t\tfor (int i=0;i<N1;i++){\n\t\t\tchar c;\n\t\t\tif (i!=0) cin>>c;\n\t\t\tcin>>tmp;\n\t\t\tif (cin.eof()) break;\n\t\t\ttmp--;\n\t\t\tif (tmp<d) d=tmp;\n\t\t\tif (card[tmp]==0) b++;\n\t\t\tcard[tmp]++;\n\t\t\tif (card[tmp]>a) a=card[tmp];\n\t\t}\n\t\tif (b==0) break;\n\t\tswitch (b){\n\t\tcase 2: \n\t\t\tif (a==4) p=6;\n\t\t\telse p=5;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif (a==3) p=3;\n\t\t\telse p=2;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tp=1;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tbool f=true;\n\t\t\tfor (int i=d; i<d+N1; i++)\n\t\t\t\tif (card[i]!=1){\n\t\t\t\t\tf=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (!f && card[0]==1){\n\t\t\t\tf=true;\n\t\t\t\tfor (int i=9; i<N2; i++)\n\t\t\t\t\tif (card[i]!=1){\n\t\t\t\t\t\tf=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tif (f) p=4;\n\t\t\telse p=0;\n\t\t}\n\t\tcout<<prize[p]<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void){\n  vector<int> hands;\n  int tmp;\n\n  while(cin >> tmp){\n\thands.push_back(tmp);\n\tcin.ignore();\n\tcin >> tmp;\n\thands.push_back(tmp);\n\tcin.ignore();\n\tcin >> tmp;\n\thands.push_back(tmp);\n\tcin.ignore();\n\tcin >> tmp;\n\thands.push_back(tmp);\n\tcin.ignore();\n\tcin >> tmp;\n\thands.push_back(tmp);\n\n\tsort(hands.begin(), hands.end());\n\tif(hands[0] == hands[3] || hands[1] == hands[4]){ //four card\n\t  cout << \"four card\" << endl;\n\t}else if((hands[0] == hands[1] && hands[2] == hands[4]) ||\n\t\t\t (hands[0] == hands[2] && hands[3] == hands[4])){ //full house\n\t  cout << \"full house\" << endl;\n\t}else if((hands[0]+1 == hands[1] && hands[1]+1 == hands[2] && hands[2]+1 == hands[3] && hands[3]+1 == hands[4]) ||\n\t\t\t (hands[0] == 1 && hands[1] == 10 && hands[2] == 11 && hands[3] == 12 && hands[4] == 13)){\n\t  cout << \"straight\" << endl;\n\t}else if(hands[0] == hands[2] || hands[1] == hands[3] || hands[2] == hands[4]){//three cards\n\t  cout << \"three card\" << endl;\n\t}else if((hands[0] == hands[1] && (hands[2] == hands[3] || hands[3] == hands[4])) || (hands[1] == hands[2] && hands[3] == hands[4])){//two pairs\n\t  cout << \"two pair\" << endl;\n\t}else if(hands[0] == hands[1] || hands[1] == hands[2] || hands[2] == hands[3] || hands[3] == hands[4]){\n\t  cout << \"one pair\" << endl;\n\t}else{\n\t  cout << \"null\" << endl;\n\t}\n\n\thands.clear();\n  }\n\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define gsort(st,en) sort((st),(en),greater<int>())\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing vi = vector<int>;\nusing vl = vector<ll>;\nusing dict = map<string,int>;\nusing pii = pair<int,int> ;\n\nconstexpr int imax = ((1<<30)-1)*2+1 ;\nconstexpr int inf = 100000000;\nconstexpr double PI = acos(-1.0) ;\ndouble eps = 1e-10 ;\nconst int dy[] = {-1,0,1,0};\nconst int dx[] = {0,-1,0,1};\n\ninline bool value(int x,int y,int w,int h){\n  return (x >= 0 && x < w && y >= 0 && y < h);\n}\n\ntemplate<typename T>\nvoid Unique(vector<T> &v){\n  sort(all(v));\n  v.erase(unique(all(v)),v.end());\n}\n\ntemplate<typename T>\nT ston(string& str, T n){\n  istringstream sin(str) ;\n  T num ;\n  sin >> num ;\n  return num ;\n}\n\nvoid Ans(bool f){\n  if(f) cout << \"YES\"<<endl;\n  else cout << \"NO\"<<endl;\n}\n\nstring Solve(vector<int> v){\n  set<int> s;\n  int st = 0;\n  REP(i,1,14){\n    if(v[i] > 0){\n      s.insert(i);\n    }\n    if(v[i] == v[i-1] && v[i] != 0){\n      ++st;\n    }\n  }\n  int m = *max_element(all(v));\n  if(m == 4){\n    return \"four card\";\n  }\n  else if(m == 3 && s.size() == 2){\n    return \"full house\";\n  }\n  else if(m == 1){\n    if((v[1] != 0 && v[1] == v[10] && v[11] == v[12] && v[13] == v[1] && v[1] == v[11])||(st == 4)){\n      return \"straight\";\n    }\n    else\n      return \"null\";\n  }\n  else if(m == 3 && s.size() == 3){\n    return \"three card\";\n  }\n  else if(m == 2 && s.size() == 3){\n    return \"two pair\";\n  }\n  else if(m == 2){\n    return \"one pair\";\n  }\n  return \"null\";\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  char c;\n  int a,b,d,e,f;\n  while(cin >> a >> c >> b >> c >> d >> c >> e >> c >> f){\n    vary(int,v,14,0);\n    v[a]++;\n    v[b]++;\n    v[d]++;\n    v[e]++;\n    v[f]++;\n    cout << Solve(v) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\n\twhile(~scanf(\"%d\", &hand[0])){\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\t\tint num[17] = {0};\n\n\t\tfor(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1){\n\t\t\t\thand[i] += 13;\n\t\t\t}\n\t\t\tnum[hand[i]]++;\n\t\t}\n\n\t\tint h = 0;\n\t\tstring s[] = {\n\t\t\t\"four card\",\n\t\t\t\"full house\",\n\t\t\t\"straight\",\n\t\t\t\"three card\",\n\t\t\t\"two pair\",\n\t\t\t\"one pair\",\n\t\t\t\"null\",\n\t\t};\n\t\tint seq = 0;\n\n\t\tfor(int i = 2; i < 17; i++){\n\t\t\tif(num[i] == 2){\n\t\t\t\tif(h == 3){\n\t\t\t\t\th = 5;\n\t\t\t\t}else{\n\t\t\t\t\th++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(num[i] == 3){\n\t\t\t\tif(h == 1){\n\t\t\t\t\th = 5;\n\t\t\t\t}else{\n\t\t\t\t\th = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(num[i] == 4){\n\t\t\t\th = 6;\n\t\t\t}\n\t\t\telse if(num[i-2]&num[i-1]&num[i]&num[i+1]&num[i+2]){\n\t\t\t\th = 4;\n\t\t\t}\n\t\t}\n\n\t\tcout << s[h] << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\nint main(){\n\tint a[5],n;\n\tchar com;\n\twhile(cin>>a[0]>>com>>a[1]>>com>>a[2]>>com>>a[3]>>com>>a[4]){\n\t\tsort(a,a+5);\n\t\tint n=0;\n\t\tfor(int i=0;i<5;i++)\n\t\t\tfor(int j=i+1;j<5;j++)\n\t\t\t\tif(a[i]==a[j])n++;\n\t\tswitch(n){\n\t\t\tcase 1:cout<<\"one pair\"<<endl;break;\n\t\t\tcase 2:cout<<\"two pair\"<<endl;break;\n\t\t\tcase 3:cout<<\"three card\"<<endl;break;\n\t\t\tcase 4:cout<<\"full house\"<<endl;break;\n\t\t\tcase 6:cout<<\"four card\"<<endl;break;\n\t\t\tdefault:\n\t\t\t\tbool f=true;\n\t\t\t\tif(a[0]==1&&a[4]==13)a[0]=14;\n\t\t\t\tsort(a,a+5);\n\t\t\t\tfor(int i=1;i<5;i++)if(a[0]+i!=a[i])f=false;\n\t\t\t\tif(f)cout<<\"straight\"<<endl;\n\t\t\t\telse cout<<\"null\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing db = double;\nusing ll = long long;\nusing vi = vector <int>;\n#define op operator\n#define pb push_back\n\nint a[5];\nint c[14];\n\nint main() {\n\tios :: sync_with_stdio(0);\n\n\twhile(cin >> a[0]) {\n\t\tchar t;\n\t\tfor(int i = 1; i < 5; i ++)\n\t\t\tcin >> t >> a[i];\n\t\tfill(c, c + 14, 0);\n\t\tfor(int i = 0; i < 5; i ++)\n\t\t\tc[a[i]] ++;\n\n\t\tauto f = [&](int i) {\n\t\t\treturn count(c, c + 14, i);\n\t\t};\n\t\tauto straight = [&]() {\n\t\t\tbool r = 0;\n\t\t\tfor(int i = 1; i <= 10; i ++) {\n\t\t\t\tbool t = 1;\n\t\t\t\tfor(int j = i; j < i + 5; j ++)\n\t\t\t\t\tif(!c[j])\n\t\t\t\t\t\tt = 0;\n\t\t\t\tr |= t;\n\t\t\t}\n\t\t\treturn r;\n\t\t};\n\n\t\tif(f(4))\n\t\t\tcout << \"four card\\n\";\n\t\telse if(f(3) && f(2))\n\t\t\tcout << \"full house\\n\";\n\t\telse if(straight())\n\t\t\tcout << \"straight\\n\";\n\t\telse if(f(3))\n\t\t\tcout << \"three card\\n\";\n\t\telse if(f(2) == 2)\n\t\t\tcout << \"two pair\\n\";\n\t\telse if(f(2))\n\t\t\tcout << \"one pair\\n\";\n\t\telse\n\t\t\tcout << \"null\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int c[5];\n    while(true){\n        if(!(cin>>c[0])) break;\n        for(int i=1; i<5; i++){\n            cin.ignore();\n            cin>>c[i];\n        }\n        sort(c, c+5);\n        int pair[5]={1};\n        int *p=pair;\n        for(int i=1; i<5; i++){\n            if(c[i-1]==c[i]) ++*p;\n            else *(++p)=1;\n        }\n        sort(pair, pair+5, greater<int>());\n        if(pair[0]==4) cout<<\"four card\\n\";\n        else if(pair[0]==3&&pair[1]==2) cout<<\"full house\\n\";\n        else if(c[1]-c[0]==1&&c[2]-c[1]==1&&c[3]-c[2]==1&&c[4]-c[3]==1) cout<<\"straight\\n\";\n        else if(c[0]==1&&c[1]==10&&c[2]==11&&c[3]==12&&c[4]==13) cout<<\"straight\\n\";\n        else if(pair[0]==3) cout<<\"three card\\n\";\n        else if(pair[0]==2&&pair[1]==2) cout<<\"two pair\\n\";\n        else if(pair[0]==2) cout<<\"one pair\\n\";\n        else cout<<\"null\\n\";\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main(){\n\n\tint card[14];\n\tint hand[5];\n\tchar cm;\n\twhile(1){\n\t\tfill(card,card+14,0);\n\t\tcin>>hand[0];\n\t\tcard[hand[0]]++;\n\t\tif(cin.eof())\n\t\t\tbreak;\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tcin>>cm>>hand[i];\n\t\t\tcard[hand[i]]++;\n\t\t}\n\n\t\tint onepair=0;\n\t\tint threecard=0;\n\t\tint straight=0;\n\n\t\tint cont=0;\n\t\tbool f=false;\n\n\t\tif(card[1]==1&&card[10]==1&&card[11]==1&&card[12]==1&&card[13]==1){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor(int i = 1; i < 14; i++){\n\t\t\tif(card[i]==4){\n\t\t\t\tcout<<\"four card\"<<endl;\n\t\t\t\tf=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(card[i]==2){\n\t\t\t\tonepair++;\n\t\t\t}\n\t\t\telse if(card[i]==3){\n\t\t\t\tthreecard++;\n\t\t\t}\n\t\t\telse if(card[i]==1){\n\t\t\t\tcont++;\n\t\t\t\tif(cont==5){\n\t\t\t\t\tstraight++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tcont=0;\n\t\t}\n\t\tif(!f){\n\t\t\tif(onepair==2)\n\t\t\t\tcout<<\"two pair\"<<endl;\n\t\t\telse if(threecard==1){\n\t\t\t\tif(onepair==1)\n\t\t\t\t\tcout<<\"full house\"<<endl;\n\t\t\t\telse\n\t\t\t\t\tcout<<\"three card\"<<endl;\n\t\t\t}\n\t\t\telse if(straight){\n\t\t\t\tcout<<\"straight\"<<endl;\n\t\t\t}\n\t\t\telse if(onepair==1){\n\t\t\t\tcout<<\"one pair\"<<endl;\n\t\t\t}\n\t\t\telse\n\t\t\t\tcout<<\"null\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "int main(){\n    int tmp[5];\n    char com;\n    while(cin >>tmp[0]>>com>>tmp[1]>>com>>tmp[2]>>com>>tmp[3]>>com>>tmp[4]){\n    int hand[15]={};\n\n    for(int i=0; i<5; ++i){\n      if(tmp[i]==1)++hand[13];\n      ++hand[tmp[i]-1];\n    }\n   \n    int pair=0,three=0,str=0,four=0;\n    for(int i=1; i<15; ++i){\n      if(hand[i]==4){++four;}\n      if(hand[i]==1)++str;\n      if(hand[i]==2)++pair;\n      if(hand[i]==3)++three;\n      if(str!=5 && hand[i]==0)str=0;\n    }\n    \n    if(four)cout << \"four card\" << endl;\n    else if(three && pair)cout << \"full house\" << endl;\n    else if(str == 5)cout << \"straight\" << endl;\n    else if(three)cout << \"three card\" << endl;\n    else if(pair == 2)cout << \"two pair\" << endl;\n    else if(pair == 1)cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n    \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"null\"};\n\nint str(int n){\n\tcout << s[n] << endl;\n\treturn 0;\n}\n\nint main(){\n\tint a[5], t[13], ans, m;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1, m = 0;\n\t\tsort(a, a+5);\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tt[i] = count(a, a+5,i+1);\n\t\t\tif(m < t[i])m = t[i];\n\t\t}\n\t\t\n\t\tint flag = 0;\n\t\tif(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){str(3);continue;}\n\t\tfor(int i = 1;i < 5 && a[i-1]+1 == a[i];i++)flag = i;\n\t\tif(flag == 4){str(3);continue;}\n\t\t\n\t\tif(m == 4){cout << \"four card\" << endl;continue;}\n\t\tif(m == 3){\n\t\t\tint f = 1;\n\t\t\tfor(int i = 0;i < 13;i++){\n\t\t\t\tif(t[i] == 2)f = 0;\n\t\t\t}\n\t\t\tif(!f){cout << \"full house\" << endl;continue;}\n\t\t\tans = 2;\n\t\t}\n\t\t\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(!ans && t[i] == 2)ans = 1;\n\t\t\tif(ans != 1 && t[i] == 2)ans = 0;\n\t\t}\n\t\tif(ans == -1)ans = 4;\n\t\tstr(ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\nint main(){\n\tint c[5];\n\twhile( scanf(\" %d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF ){\n\t\tsort(c, c+5);\n\t\t\n\t\t//four card\n\t\tbool flag=true;\n\t\tfor(int i=0; i<=2; ++i){\n\t\t\tif(c[i] != c[i+1]) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tflag=true;\n\t\tfor(int i=1; i<=3; ++i){\n\t\t\tif(c[i] != c[i+1]) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//full house\n\t\tflag=false;\n\t\tif(c[0]==c[1] && c[2]==c[3] && c[3]==c[4]) flag=true;\n\t\tif(c[0]==c[1] && c[2]==c[3] && c[3]==c[4]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\n\t\t//straight\n\t\tfor(int i=1; i<=9; ++i){\n\t\t\tflag=true;\t\n\t\t\tfor(int j=0; j<=4; ++j){\n\t\t\t\tif(c[j]!=i+j) flag=false;\n\t\t\t}\n\t\t\tif(flag) break;\n\t\t}\n\t\tif(c[0]==1){\n\t\t\tflag=true;\n\t\t\tfor(int i=1; i<=4; ++i){\n\t\t\t\tif(c[i]!=9+i) flag=false;\t\n\t\t\t}\t\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//three card\n\t\tflag=false;\n\t\tfor(int i=0; i<=2; ++i)\n\t\t\tif(c[i]==c[i+1] && c[i+1]==c[i+2]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\t\t\n\t\t//two pair\n\t\tflag=false;\n\t\tif(c[0]==c[1] && c[2]==c[3]) flag=true;\n\t\tif(c[0]==c[1] && c[3]==c[4]) flag=true;\n\t\tif(c[1]==c[2] && c[3]==c[4]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\n\t\t//one pair\n\t\tflag=false;\n\t\tfor(int i=0; i<=3; ++i)\n\t\t\tif(c[i]==c[i+1]) flag=true;\t\t\n\t\n\t\tif(flag){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\n\t\t//null\n\t\tprintf(\"null\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<stdio.h>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\t\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5||(num_card[0]&&num_card[12]&&num_card[11]&&num_card[10]&&num_card[9]))\n\t\treturn 5;\n\treturn 1;\n}\n\nint main(){\n\n\tstring res;\n\tint c[5];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])+1){\n\t\t\n\t\t\n\t\tswitch( Result(c) ){\n\t\t\tcase 1:res=\"null\";break;\n\t\t\tcase 2:res=\"one pair\";break;\n\t\t\tcase 3:res=\"two pair\";break;\n\t\t\tcase 4:res=\"three card\";break;\n\t\t\tcase 5:res=\"straight\";break;\n\t\t\tcase 6:res=\"full house\";break;\n\t\t\tcase 7:res=\"four card\";break;\n\t\t}\n\n\t\tcout << res << endl;\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)(n); i++)\n\nvector<int> a(5);\n\nstring solve(){\n    sort(a.begin(), a.end());\n    int pair = 0;\n    rep(i,5)rep(j,i) if(a[i] == a[j]) pair++;\n    bool straight = true;\n    rep(i,4) if(a[i] + 1 != a[i+1]) straight = false;\n    if(a[0]==1 &&\n       a[1]==10 &&\n       a[2]==11 &&\n       a[3]==12 &&\n       a[4]==13) return \"straight\";\n    if(straight) return \"straight\";\n\n    if(pair == 6) return \"four card\";\n    else if(pair == 4) return \"full house\";\n    else if(pair == 3) return \"three card\";\n    else if(pair == 2) return \"two pair\";\n    else if(pair == 1) return \"one pair\";\n    else return \"null\";\n}\n\nint main(){\n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n        cout << solve() << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6];\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;cc=0;}\n}\n\nfor(int i=0;i<3;i++){\nif(n[i+1]!=(n[i]+1)f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc=1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\n\nc=0,cc=0;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstdio>\nusing namespace std;\n\nint main(){\n    vector<int> a(5);\n    while(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])){\n\tsort(a.begin(), a.end());\n\tif(count(a.begin(), a.end(), a[3]) == 4){\n\t    cout << \"four card\" << endl;\n\t}\n\telse if(count(a.begin(), a.end(), a[0]) + count(a.begin(), a.end(), a[4]) == 5){\n\t    cout << \"full house\" << endl;\n\t}\n\telse if(count(a.begin(), a.end(), a[2]) == 3){\n\t    cout << \"three card\" << endl;\n\t}\n\telse if(count(a.begin(), a.end(), a[1]) + count(a.begin(), a.end(), a[3]) == 4){\n\t    cout << \"two pair\" << endl;\n\t}\n\telse{\n\t    \n\t    for(int i = 0;i < 5;i++){\n\t\tif(count(a.begin(), a.end(), a[i]) == 2){\n\t\t    cout << \"one pair\" << endl;\n\t\t    goto done;\n\t\t}\n\t    }\n\t    if(a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13){\n\t\tcout << \"straight\" << endl;\n\t\tgoto done;\n\t    }\n\t    for(int i = 0;i < 5;i++){\n\t\tif(a[i] != a[0] + i)break;\n\t\tif(i == 4){\n\t\t    cout << \"straight\" << endl;\n\t\t    goto done;\n\t\t}\n\t    }\n\t    cout << \"null\" << endl;\n\t}\n    done :;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main(void){\n  int i,j,k,l;\n  int card[5];\n  int poker_hand;\n  bool flag;\n\n  while(true){\n    poker_hand=0;\n    for(i=0;i<5;i++){\n      if(scanf(\"%d,\",&card[i])==EOF)return(0);\n    }\n    sort(card,card+5);\n    for(i=0;i<4;i++){\n      if(card[i]==card[i+1])poker_hand=1;\n    }\n    if(card[0]==card[1]&&card[2]==card[3])poker_hand=2;\n    if(card[0]==card[1]&&card[3]==card[4])poker_hand=2;\n    if(card[1]==card[2]&&card[3]==card[4])poker_hand=2;\n    for(i=0;i<3;i++){\n      if(card[i]==card[i+1]&&card[i]==card[i+2])poker_hand=3;\n    }\n    flag=true;\n    for(i=1;i<5;i++){\n      if(card[i]!=card[0]+i)flag=false;\n    }\n    if(flag)poker_hand=4;\n    flag=true;\n    if(card[0]==1&&card[1]==10){\n      for(i=1;i<4;i++){\n\tif(card[i+1]!=card[1]+i)flag=false;\n      }\n    }else{\n      flag=false;\n    }\n    if(flag)poker_hand=4;\n    if(card[0]==card[1]&&card[0]==card[2]&&card[3]==card[4])poker_hand=5;\n    if(card[0]==card[1]&&card[2]==card[3]&&card[2]==card[4])poker_hand=5;\n    if(card[0]==card[3])poker_hand=6;\n    if(card[1]==card[4])poker_hand=6;\n\n    \n    switch (poker_hand) {\n      case 0:\n\tprintf(\"null\\n\");\n\tbreak;\n      case 1:\n\tprintf(\"one pair\\n\");\n\tbreak;\n      case 2:\n\tprintf(\"two pair\\n\");\n\tbreak;\n      case 3:\n\tprintf(\"three card\\n\");\n\tbreak;\n      case 4:\n\tprintf(\"straight\\n\");\n\tbreak;\n      case 5:\n\tprintf(\"full house\\n\");\n\tbreak;\n      case 6:\n\tprintf(\"four card\\n\");\n\tbreak;\n    }\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void){\n\n  int card[5];\n  char ten;\n\n  while( cin >> card[0] ){\n    cin >> ten >> card[1] >> ten >> card[2] >> ten >> card[3] >> ten >> card[4];\n\n    sort( card , card + 5 );\n\n    if( card[4] == card[1] || card[3] == card[0] ){// four card\n      cout << \"four card\" << endl;\n      goto end;\n    }\n\n    if( (card[0] == card[2] && card[3] == card[4]) || (card[0] == card[1] && card[2] == card[4] ) ){\n      cout << \"hull house\" << endl;\n      goto end;\n    }\n\n    int cnt;\n    int r;\n    cnt = 0;\n    r = card[0];\n    for( int i = 1 ; i < 5 ; i++ ){// straight\n      if( r + 1 == card[i] ){\n\tcnt++;\n\tr = card[i];\n      }\n      else r = card[i];\n    }\n    if( cnt == 4 ){\n      cout << \"straight\" << endl;\n      goto end;\n    }\n    else if( card[0] == 1  && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13 ){\n      cout << \"straight\" << endl;\n      goto end;\n    }\n\n    if( card[0] == card[2] || card[1] == card[3] || card[2] == card[4] ){// three card\n      cout << \"three card\" << endl;\n      goto end;\n    }\n\n    if( card[0] == card[1] && card[2] == card[3] ){// two pair\n      cout << \"two pair\" << endl;\n      goto end;\n    }\n    else if( card[0] == card[1] && card[3] == card[4] ){\n      cout << \"two pair\" << endl;\n      goto end;\n    }\n    else if( card[1] == card[2] && card[3] == card[4] ){\n      cout << \"two pair\" << endl;\n      goto end;\n    }\n\n    for( int i = 0 ; i < 4 ; i++ ){// two card\n      if( card[i] == card[i+1] ){\n\tcout << \"one pair\" << endl;\n\tgoto end;\n      }\n     }\n\n      cout << \"null\" << endl;\n\n  end:;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint h[13], cnt[5];\nbool one = false, two = false, three = false, full = false, four = false, straight = false;\n\nvoid init(){\n  for(int i = 0; i < 13; i++){\n    h[i] = 0;\n  }\n  one = false;\n  two = false;\n  three = false;\n  full = false;\n  four = false;\n  straight = false;\n}\n\nvoid judge(){\n  for(int i = 0; i < 13; i++){\n    if(h[i] == 2) one = true;\n  }\n  \n  for(int i = 0; i < 13; i++){\n    if(h[i] == 3) three = true;\n  }\n\n  for(int i = 0; i < 13; i++){\n    for(int j = 0; j < 13; j++){\n      if(h[i] == 2 && h[j] == 2 && i != j)  two = true;\n      if(h[i] == 3 && h[j] == 2 && i != j)  full = true;\n    }\n  }\n    \n  for(int i = 0; i < 13; i++){\n    if(h[i] == 4) four = true;\n  }\n  \n  for(int i = 0; i < 9; i++){\n    if(h[i] != 0 && h[i+1] != 0 && h[i+2] != 0 && h[i+3] != 0 && h[i+4] != 0) straight = true;\n  }\n  \n  if(h[0] != 0 && h[12] != 0 && h[11] != 0 && h[10] != 0 && h[9] != 0)  straight = true;\n}\n\nint main(void){\n  while(scanf(\"%d,%d,%d,%d,%d\", cnt, cnt+1, cnt+2, cnt+3, cnt+4) != EOF){\n    init();\n    for(int i = 0; i < 5; i++){\n      h[cnt[i]-1]++;\n    }\n    \n    for(int i = 0; i < 5; i++){\n      cnt[i] = 0;\n    }\n\n    judge();\n \n    if(straight){\n      cout << \"straight\" << endl;\n    }else if(four){\n      cout << \"four card\" << endl;\n    }else if(full){\n      cout << \"full house\" << endl;\n    }else if(three){\n      cout << \"three card\" << endl;\n    }else if(two){\n      cout << \"two pair\" << endl;\n    }else if(one){\n      cout << \"one pair\" << endl;\n    }else{\n      cout << \"null\" << endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <stack>\n#include <set>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tvector<int> c(5);\n\tchar a;\n\twhile(cin >> c[0] >> a >> c[1] >> a >> c[2] >> a >> c[3] >> a >> c[4]){\n\t\tbool yaku=false;\n\t\tint cnt[5]={0};\n\t\tsort(c.begin(),c.end());\n\t\tif((c[0]==(c[1]-1) && c[0]==(c[2]-2) && c[0]==(c[3]-3) && c[0]==(c[4]-4)) || (c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13)) {cout << \"straight\" << endl ; continue;} \n\t\tfor(int i=0;i<5;++i){\n\t\t\tfor(int j=i+1;j<5;++j){\n\t\t\t\tif(c[i]==c[j] && c[i]!=-1) cnt[i]++, c[j]=-1; \n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<5;++i){\n\t\t\t\n\t\t\tif(cnt[i]==3) {cout << \"four card\" << endl;yaku=true; break;}\n\t\t\tif(cnt[i]==2) {\n\t\t\t\tif(cnt[3]==1) {cout << \"full house\" << endl; yaku=true; break;}\n\t\t\t\telse {cout << \"three card\" << endl ; yaku=true; break;}\n\t\t\t}\n\t\t\tif(cnt[i]==1) {\n\t\t\t\tif(cnt[2]==2) {cout << \"full house\" << endl;  yaku=true; break;}\n\t\t\t\telse if (cnt[i+2]==1) {cout << \"two pair\" << endl; yaku=true; break;}\n\t\t\t\telse {cout << \"one pair\" << endl;yaku=true;  break;} \n\t\t\t}\n\t\t}\n\t\tif(!yaku){\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t\t\n\t}\n\treturn 0; \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int[] nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\t\tif(*it>0){\n\t\t\tc++; mc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(*it==4){\n\t\t\treturn \"four card\";\n\t\t}else if(*it==3){\n\t\t\tis3 = true;\n\t\t}else if(*it==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n    bool flag = false;\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n\tflag = false;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n\tflag = true;\n      }\n    }\n    if (!flag) mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    //printf(\"mx = %d\\n\", mx);\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c == 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      for (int i = 0;  i< mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n\tprintf(\"three card\\n\");\n\tgoto end;\n      }\n    } else if (mx == 4 || mx == 5) {\n      printf(\"four card\\n\");\n      goto end;\n    } else {\n      printf(\"null\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main(){\nchar a[][11]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\nlong i,h,f,hh[14];\nchar c;\nwhile(cin>>h){\nfor(i=0;i<13;i++)hh[i]=0;\nhh[h-1]++;\nfor(i=1;i<5;i++){cin>>c>>h;hh[h-1]++;}\nf=0;\nfor(i=0;i<13;i++){\nif(hh[i]==4){\nf=6;\n}else if(hh[i]==3){\nif(f==1)f=5;else f=3;\n}else if(hh[i]==2){\nif(f==3)f=5;\nelse if(f==1)f=2;\nelse f=1;\n}\n}\nif(f==0){\n  for(i=0;i<13;i++)if(hh[i]==1)break;\n  if(i<9){\n  if(hh[i+1]==1)\n  if(hh[i+2]==1)\n  if(hh[i+3]==1)\n  if(hh[i+4]==1)f=4;\n  }\n  if(i==0){\n  if(hh[i+9]==1)\n  if(hh[i+10]==1)\n  if(hh[i+11]==1)\n  if(hh[i+12]==1)f=4;\n  }\n}\ncout<<a[f]<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nvoid func(int a[]){\n  sort(a,a+5);\n  int cnt = 1;\n  for(int i = 1 ; i < 5 ; i++){\n    if(a[1] == 10 && i == 4){\n      if(a[0] == 1 && a[4] == 13)cnt++;\n    }\n    if(a[i-1]+1 == a[i])cnt++;\n  }\n  if(cnt == 5){\n    cout << \"straight\" << endl;\n    return;\n  }\n  \n  int c[14];\n  int two,three,four;\n  two = three = four = 0;\n  for(int i = 0 ; i < 14 ; i++)c[i] = 0;\n  for(int i = 0 ; i < 5 ; i++)c[a[i]]++;\n  for(int i = 0 ; i < 14 ; i++){\n    if(c[i] == 4)four++;\n    else if(c[i] == 3)three++;\n    else if(c[i] == 2)two++;\n  }\n  \n  if(four == 1){\n    cout << \"four card\" << endl;\n    return;\n  }\n  else if(two == 1 && three == 1){\n    cout << \"full house\" << endl;\n    return;\n  }\n  else if(two == 2){\n    cout << \"two pair\" << endl;\n    return;\n  }\n  else if(two == 1){\n    cout << \"one pair\" << endl;\n    return;\n  }\n  else if(three == 1){\n    cout << \"three card\" << endl;\n    return;\n  }\n  cout << \"null\" << endl;\n}\n    \n\nint main(){\n  int a[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n    func(a);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main(){\nint c[6],s[6],ans=0;\nstring a[7];\na[0]=\"null\";\na[1]=\"one pair\";\na[2]=\"two pair\";\na[3]=\"three card\";\na[4]=\"straight\";\na[5]=\"full house\";\na[6]=\"four card\";\nwhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\nans=0;\nfor(int i=0;i<5;i++)s[i]=100;\ns[0]=c[0];\nfor(int i=1;i<5;i++){\nfor(int j=i-1;j>-1;j--){\nif(s[j]<=c[i]){\nfor(int k=i;k>j+1;k--)s[k]=s[k-1];\ns[j+1]=c[i];\nbreak;}}\nif(s[0]>c[i]){\nfor(int k=i;k>0;k--)s[k]=s[k-1];\ns[0]=c[i];}}\nif(s[0]==s[1]||s[1]==s[2]||s[3]==s[4]||s[2]==s[3])ans=1;\nif((s[0]==s[1]||s[1]==s[2])&&(s[2]==s[3]||s[3]==s[4]))ans=2;\nif(s[0]==s[2]||s[1]==s[3]||s[2]==s[4])ans=3;\nif(s[2]+1==s[3]&&s[1]+1==s[2]&&s[3]+1==s[4]&&(s[0]+1==s[1]||(s[0]==1&&s\n\n[4]==13)))ans=4;\nif((s[0]==s[2]&&s[3]==s[4])||(s[0]==s[1]&&s[2]==s[4]))ans=5;\nif(s[0]==s[3]||s[1]==s[4])ans=6;\n\nfor(int i=0;i<7;i++){if(ans==i)cout<<a[i]<<endl;}\n\n}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\nusing namespace std;\nint main() {\n  int c[5];\n  char cm;\n  while (cin >> c[0] >> cm >> c[1] >> cm >> c[2] >> cm >> c[3] >> cm >> c[4]) {\n    sort(c, c + 5);\n    int same = 0, two = 0, t = 1, i;\n    for (i = 0; i < 4; i++)\n      if (c[i] == c[i + 1]) {\n        t++;\n        if (t == 2) two++;\n        same = max(same, t);\n      }\n      else t = 1;\n    bool full = false;\n    if (c[0] == c[1] && c[3] == c[4] && (c[1] == c[2] || c[2] == c[3])) full =\n      true;\n    bool st = true;\n    if (c[0] == 1 && c[1] == 10) {\n      for (i = 1; i < 4; i++)\n        if (c[i] + 1 != c[i + 1]) st = false;\n    }\n    else {\n      for (i = 0; i < 4; i++)\n        if (c[i] + 1 != c[i + 1]) st = false;\n    }\n    cout\n      << ((same == 4) ? \"four card\" : (full) ? \"full house\" :\n          (st) ? \"straight\" : (same == 3) ? \"three card\" :\n          (same == 2) ? ((two == 2) ? \"two pair\" : \"one pair\") : \"null\")\n      << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\nusing namespace std;\n\nbool is_straight(int* cards) {\n\tbool array[13] = { false };\n\tfor(int i=0;i<5;i++){\n\t\tarray[cards[i] - 1] = true;\n\t}\n\tif (array[0] && array[1] && array[12])return false;\n\tint tmp = 0;\n\tfor (int i = 0; i < 20; i++) {\n\t\tif (i>12) {\n\t\t\tif (array[i - 13] == true)tmp++;\n\t\t\telse tmp = 0;\n\t\t}\n\t\telse {\n\t\t\tif (array[i] == true)tmp++;\n\t\t\telse tmp = 0;\n\t\t}\n\t\tif (tmp == 5)return true;\n\t}\n\treturn false;\n}\nint main() {\n\tint cards[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF) {\n\t\tint same_cards1 = 0, same_cards2 = 4; int tmp;\n\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\ttmp = 0;\n\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\tif (cards[i] == cards[j])tmp++;\n\t\t\t}\n\t\t\tif (tmp > same_cards1)same_cards1 = tmp;\n\t\t\tif (tmp < same_cards2)same_cards2 = tmp;\n\t\t}\n\t\tif (same_cards1 == 4)cout << \"four cards\" << endl;//clear\n\t\telse if (same_cards1 == 3 && same_cards2 == 2)cout << \"full house\" << endl;//clear\n\t\telse if (is_straight(cards))cout << \"straight\" << endl;\n\t\telse if (same_cards1==3)cout << \"three cards\" << endl;//clear\n\t\telse if (5-same_cards1-same_cards2==2)cout << \"two pair\" << endl;//clear\n\t\telse if (same_cards1 == 2)cout << \"one pair\" << endl;//clear\n\t\telse cout << \"null\" << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint card[13];\nint solve(){\n    int m;\n    vector<int> n;\n    for(int i=0;i<13;i++){\n        if(card[i]) n.push_back(card[i]);\n    }\n    for(int i=0;i<n.size();i++){\n        for(int j=1;j<n.size()-i;j++){\n            if(n[j-1] < n[j]) swap(n[j-1], n[j]);\n        }\n    }\n    if(n[0] == 4){\n        cout << \"four card\" << endl;\n    }else if(n[0] == 3){\n        if(n[1] == 2){\n            cout << \"full house\" << endl;\n        }else{\n            cout << \"three card\" << endl;\n        }\n    }else if(n[0] == 2){\n        if(n[1] == 2){\n            cout << \"two pair\" << endl;\n        }else{\n            cout << \"one pair\" << endl;\n        }\n    }else{\n        bool straight=false;\n        for(int i=0;i<13-3;i++){\n            if(card[i]&&card[i+1]&&card[i+2]&&card[i+3]&&card[(i+4)%13]){\n                cout << \"straight\" << endl;\n                straight=true;\n                break;\n            }\n        }\n        if(!straight){\n            cout << \"null\" << endl;\n        }\n    }\n}\n\nint main(){\n    char comma;\n    int m;\n    while(cin >> m){\n        for(int i=0;i<13;i++){\n            card[i] = 0;\n        }\n        m--;\n        card[m]++;\n        for(int i=0;i<4;i++){\n            cin >> comma >> m;\n            m--;\n            card[m]++;\n        }\n        solve();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tint hand[5];\n\tint i, j;\n\t\n\twhile (scanf(\"%d\", hand) != EOF){\n\t\tint straight = 1;\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\t\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%*c%d\", hand + i);\n\t\t}\n\t\tsort(hand, hand + 5);\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (hand[i] == hand[i + 1]){\n\t\t\t\tpair++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 3; i++){\n\t\t\tif (hand[i] == hand[i + 1] && hand[i] == hand[i + 2]){\n\t\t\t\tthree = 1;\n\t\t\t\tpair -= 2;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 2; i++){\n\t\t\tif (hand[i] == hand[i + 1] && hand[i] == hand[i + 2] && hand[i] == hand[i + 3]){\n\t\t\t\tfour = 1;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (hand[i] != hand[i + 1] - 1){\n\t\t\t\tstraight = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13 && hand[0] == 1){\n\t\t\tstraight = 1;\n\t\t}\n\t\tif (straight == 1){\n\t\t\tputs(\"straight\");\n\t\t}\n\t\telse if (four == 1){\n\t\t\tputs(\"four card\");\n\t\t}\n\t\telse if (pair == 1 && three == 1){\n\t\t\tputs(\"full house\");\n\t\t}\n\t\telse if (three == 1){\n\t\t\tputs(\"three card\");\n\t\t}\n\t\telse if (pair == 2){\n\t\t\tputs(\"two pair\");\n\t\t}\n\t\telse if (pair == 1){\n\t\t\tputs(\"one pair\");\n\t\t}\n\t\telse {\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint c1;\n\tint c2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\t\n\t\tc1 = 0;\n\t\tc2 = 0;\n\t\tstraight = 0;\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tc1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tc2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((c1 == 1 && c2 == 0) || (c1 == 0 && c2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (c1 == 1 && c1 == c2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (c1 + c2 == 3 && c1 != 0 && c2 != 0){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\t\n\t\telse if (c1 == 2 || c2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (c1 == 3 || c2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nenum Form{null,oneP,twoP,threeC,straight,fullHouse,fourC};\n\nint main()\n{\n    int card[5];\n    bool cardFlag[5];\n    while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n        int cnt=0;\n        Form f=null;\n        for(int i=0;i<5;i++){\n            cardFlag[i]=false;\n        }\n        sort(card,card+5);\n        for(int i=0;i<5;i++){\n            if(i!=0){\n                if(card[i-1]==card[i]){\n                    cardFlag[i-1]=true;\n                    cardFlag[i]=true;\n                }\n            }\n            if(i==4){\n                for(int j=0;j<5;j++){\n                    if(cardFlag[j]){\n                        cnt++;\n                    }\n                }\n            }\n        }\n        if(cnt>0){\n            switch(cnt){\n                case  2:\n                    f=oneP;\n                    break;\n                case  3:\n                    f=threeC;\n                    break;\n                case  4:\n                    if(card[1]!=card[3]){\n                        f=twoP;\n                    }\n                    else{\n                        f=fourC;\n                    }\n                    break;\n                case  5:\n                    f=fullHouse;\n                    break;\n            }\n        }\n        else{\n            if(card[1]+1==card[2] && card[2]+1==card[3] &&card[3]+1==card[4]){\n                if(card[0]+1==card[1]) f=straight;\n                else if(card[0]==1 && card[4]==13) f=straight;\n            }\n        }\n        switch(f){\n            case null :\n                cout<<\"null\"<<endl;\n                break;\n            case oneP :\n                cout<<\"one pair\"<<endl;\n                break;\n            case twoP :\n                cout<<\"two pair\"<<endl;\n                break;\n            case threeC :\n                cout<<\"three card\"<<endl;\n                break;\n            case straight :\n                cout<<\"straight\"<<endl;\n                break;\n            case fullHouse :\n                cout<<\"full house\"<<endl;\n                break;\n            case fourC :\n                cout<<\"four card\"<<endl;\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    int cs[5];\n    while( scanf( \"%d,%d,%d,%d,%d\", &cs[0], &cs[1], &cs[2], &cs[3], &cs[4] ) != -1 ) {\n        sort( cs, cs + 5 );\n\n        vector<int> uc( 5 );\n        unique_copy( cs, cs+5, uc.begin() );\n\n        int p[5] = {};\n        for( auto const& c : uc ) {\n            ++p[count( cs, cs + 5, c )];\n        }\n        \n        bool const is_straight = [&]{\n            bool const b = [&](){\n                for( int i=1; i<5; ++i ) {\n                    if ( cs[i-1] + 1 != cs[i] )\n                        return false;\n                }\n                return true;\n            }();\n\n            return b\n                   || ( cs[0] == 10 && cs[1] == 11 && cs[2] == 12 && cs[3] == 13 && cs[4] == 1 )\n                   || ( cs[0] == 1 && cs[1] == 10 && cs[2] == 11 && cs[3] == 12 && cs[4] == 13 );\n        }();\n\n        \n        cout <<\n            ( ( p[4] == 1 )\n              ? \"four card\"\n              : ( p[3] == 1 && p[2] == 1 )\n              ? \"full house\"\n              : ( is_straight )\n              ? \"straight\"\n              : ( p[3] == 1 )\n              ? \"three card\"\n              : ( p[2] == 2 )\n              ? \"two pair\"\n              : ( p[2] == 1 )\n              ? \"one pair\"\n              : \"null\" )\n            << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\n#define ACE 14\nint is4card(int cnt[]);\nint isFullHouse(int cnt[]);\nint isStraight(int cnt[]);\nint is3card(int cnt[]);\nint is2pair(int cnt[]);\nint is1pair(int cnt[]);\n\nint main(void){\n    int c[5];\n    int count[ACE+1];\n    \n    while (scanf(\"%d,%d,%d,%d,%d\", c+0, c+1, c+2, c+3, c+4) != EOF){\n        for (int i=2; i<=ACE; i++) count[i]=0;\n        for (int i=0; i<5; i++){\n            if (c[i]==1) c[i]=ACE;\n            count[c[i]]++;\n        }\n//        for (int i=2; i<=ACE; i++) printf(\"%d \",count[i]);\n//        printf(\"\\n\");\n        \n        if (is4card(count)) printf(\"four card\\n\");\n        else if (isFullHouse(count)) printf(\"full house\\n\");\n        else if (isStraight(count)) printf(\"straight\\n\");\n        else if (is3card(count)) printf(\"three card\\n\");\n        else if (is2pair(count)) printf(\"two pair\\n\");\n        else if (is1pair(count)) printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}\n\nint is4card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 4) return 1;\n    }\n    return 0;\n}\n\nint isFullHouse(int cnt[]){\n    return is3card(cnt) && is1pair(cnt);\n}\n\nint isStraight(int cnt[]){\n    int len=0;\n    \n    for (int i=2; i<=ACE; i++){\n        if (cnt[i]==0) len=0;\n        else {\n            len++;\n            if (len==5) return 1;\n        }\n    }\n    return 0;\n}\n\nint is3card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 3) return 1;\n    }\n    return 0;\n}\n\nint is2pair(int cnt[]){\n    int i,j;\n    // find the first pair\n    for (i=2; i<=ACE; i++){\n        if (cnt[i] == 2) break;\n    }\n    if (i>ACE) return 0;\n    // find second pair\n    for (j=2; j<=ACE; j++){\n        if (i==j) continue;\n        if (cnt[j] == 2) return 1;\n    }\n    return 0;\n}\n\nint is1pair(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 2) return 1;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint n[5];\n\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\n\t\tsort(n,n+5);\n\t\tif((n[0]==n[1]&&n[1]==n[2]&&n[2]==n[3])||(n[1]==n[2]&&n[2]==n[3]&&n[3]==n[4])) printf(\"four card\\n\");\n\t\telse if((n[0]==n[1]&&n[1]==n[2]&&n[3]==n[4])||(n[0]==n[1]&&n[2]==n[3]&&n[3]==n[4])) printf(\"full house\\n\");\n\t\telse if((n[4]==n[3]+1&&n[3]==n[2]+1&&n[2]==n[1]+1&&n[1]==n[0]+1)||(n[0]==10&&n[1]==11&&n[2]==12&&n[3]==13&&n[4]==1)) printf(\"straight\\n\");\n\t\telse if((n[0]==n[1]&&n[1]==n[2])||(n[1]==n[2]&&n[2]==n[3])||(n[2]==n[3]&&n[3]==n[4])) printf(\"three card\\n\");\n\t\telse if((n[0]==n[1]&&n[2]==n[3])||(n[0]==n[1]&&n[3]==n[4])||(n[1]==n[2]&&n[3]==n[4])) printf(\"two pair\\n\");\n\t\telse if(n[0]==n[1]||n[1]==n[2]||n[2]==n[3]||n[3]==n[4]) printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\n\nint main(void){\n\t\n\tstring yaku[]={\"one pair\",\"two pair\",\"three card\",\"full house\",\"four card\",\"straight\",\"null\"};\n\tint tefuda[5],count[14];\n\tbool flag,straight;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&tefuda[0],&tefuda[1],&tefuda[2],&tefuda[3],&tefuda[4])!=EOF){\n\t\t\n\t\tflag=true;\n\t\tstraight=true;\n\t\t\n\t\tmemset(count,0,sizeof(count));\n\t\t//sort\n\t\tsort(tefuda,tefuda+5);\n\t\t//1-4 pair or fullhouse \n\t\tfor(int i=0;i<4;i++){\n\t\t\tfor(int j=i+1;j<5;j++){\n\t\t\t\tif(tefuda[i]==tefuda[j]){\n\t\t\t\t\tcount[tefuda[i]]++;\n\t\t\t\t\tflag=false;\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\t\n\n\t\t//straight\n\t\tif(flag){\n\t\t\tif(tefuda[0]==1 && tefuda[1]==2){\n\t\t\t\tfor(int i=2;i<5;i++){\n\t\t\t\t\tif(tefuda[i]!=i+1){\n\t\t\t\t\t\tstraight=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(tefuda[0]==1 && tefuda[4]==13){\n\t\t\t\tfor(int i=1;i<4;i++){\n\t\t\t\t\tif(tefuda[i]!=i+9){\n\t\t\t\t\t\tstraight=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int i=tefuda[0];i<5+tefuda[0];i++){\n\t\t\t\t\tif(tefuda[i-tefuda[0]]!=i){\n\t\t\t\t\t\tstraight=false;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(straight){\n\t\t\t\tcout<<yaku[5]<<endl;\t//straight\n\t\t\t\t//break;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcout<<yaku[6]<<endl;\t//null\n\t\t\t\t//break;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tsort(count,count+14);\n\t\t\tif(count[13]==6){\n\t\t\t\tcout<<yaku[4]<<endl;\n\t\t\t}else if(count[12]==1 && count[13]==3){\n\t\t\t\tcout<<yaku[3]<<endl;\n\t\t\t}else if(count[12]==0 && count[13]==3){\n\t\t\t\tcout<<yaku[2]<<endl;\n\t\t\t}else if(count[12]==count[13]){\n\t\t\t\tcout<<yaku[1]<<endl;\n\t\t\t}else if(count[12]<2 && count[13]==1){\n\t\t\t\tcout<<yaku[0]<<endl;\n\t\t\t}\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n\ntypedef long long ll;\nusing namespace std;\n\nbool is_1pair(int* cards){\n\tsort(cards,cards+5);\n\tmap<int,int> freq;\n\tfor(int i=0;i<5;i++){\n\t\tfreq[cards[i]]++;\n\t}\n\t\n\tint count = 0;\n\tfor(map<int,int>::iterator it = freq.begin(); it != freq.end(); it++){\n\t\tif(it->second == 2){\n\t\t\tcount++;\n\t\t}\n\t\tif(it->second == 3){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn count == 1;\n}\n\nbool is_2pair(int* cards){\n\tsort(cards,cards+5);\n\tmap<int,int> freq;\n\tfor(int i=0;i<5;i++){\n\t\tfreq[cards[i]]++;\n\t}\n\t\n\tint count = 0;\n\tfor(map<int,int>::iterator it = freq.begin(); it != freq.end(); it++){\n\t\tif(it->second == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count == 2;\n}\n\nbool is_3card(int* cards){\n\tsort(cards,cards+5);\n\tmap<int,int> freq;\n\tfor(int i=0;i<5;i++){\n\t\tfreq[cards[i]]++;\n\t}\n\t\n\tint count = 0;\n\tfor(map<int,int>::iterator it = freq.begin(); it != freq.end(); it++){\n\t\tif(it->second == 3){\n\t\t\tcount++;\n\t\t}\n\t\tif(it->second == 2){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn count == 1;\n}\n\nbool is_straight(int* cards){\n\tsort(cards,cards+5);\n\tmap<int,int> freq;\n\tfor(int i=0;i<5;i++){\n\t\tfreq[cards[i]]++;\n\t}\n\t\n\tint count = 0;\n\tfor(map<int,int>::iterator it = freq.begin(); it != freq.end(); it++){\n\t\tif(it->second > 1){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(freq[1]==1){\n\t\tint ans[][5] = {{1,2,3,4,5},{1,10,11,12,13}};\n\n\t\tbool isok1 = true;\n\t\tfor(int i=0;i<5;i++){\n\t\t\tif(cards[i] != ans[0][i]) isok1 = false;\n\t\t}\n\n\t\tbool isok2 = true;\n\t\tfor(int i=0;i<5;i++){\n\t\t\tif(cards[i] != ans[1][i]) isok2 = false;\n\t\t}\n\n\t\treturn (isok1 || isok2);\n\t}\n\n\telse{\n\t\tfor(int i=0;i+1<5;i++){\n\t\t\tif(cards[i+1] - cards[i] != 1) return false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nbool is_fullhouse(int* cards){\n\tsort(cards,cards+5);\n\tmap<int,int> freq;\n\tfor(int i=0;i<5;i++){\n\t\tfreq[cards[i]]++;\n\t}\n\t\n\tint count = 0;\n\tbool isok1=false,isok2=false;\n\tfor(map<int,int>::iterator it = freq.begin(); it != freq.end(); it++){\n\t\tif(it->second == 3){\n\t\t\tisok1 = true;\n\t\t}\n\t\telse if(it->second == 2){\n\t\t\tisok2 = true;\n\t\t}\n\t}\n\n\treturn isok1 && isok2;\n}\n\nbool is_4card(int* cards){\n\tsort(cards,cards+5);\n\tmap<int,int> freq;\n\tfor(int i=0;i<5;i++){\n\t\tfreq[cards[i]]++;\n\t}\n\tint count = 0;\n\tfor(map<int,int>::iterator it = freq.begin(); it != freq.end(); it++){\n\t\tif(it->second == 4){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\nint main()\n{\n\tint cards[5];\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",cards,cards+1,cards+2,cards+3,cards+4)){\n\t\tif(is_1pair(cards)) cout << \"one pair\" << endl;\n\t\telse if(is_2pair(cards)) cout << \"two pair\" << endl;\n\t\telse if(is_3card(cards)) cout << \"three card\" << endl;\n\t\telse if(is_straight(cards)) cout << \"straight\" << endl;\n\t\telse if(is_fullhouse(cards)) cout << \"full house\" << endl;\n\t\telse if(is_4card(cards)) cout << \"four card\" << endl;\n\t\telse cout << \"null\" << endl;\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nint main()\n{\n\tvector<int> H(5);\n\t\twhile(~scanf(\"%d,%d,%d,%d,%d\", &H[0] ,&H[1] ,&H[2] ,&H[3] ,&H[4]))\n\t\t{\n\t\t\tvector<int> L(32, 0);\n\t\t\tint kind = 0;\n\t\t\tfor(int i = 0; i < 5; i++)\n\t\t\t{\n\t\t\t\tif(L[H[i]-1] == 0)\n\t\t\t\t{\n\t\t\t\t\tkind++;\n\t\t\t\t}\n\t\t\t\tL[H[i]-1]++;\n\t\t\t}\n\n\t\t\tif(kind == 2)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 4)\n\t\t\t\t{\n\t\t\t\t\tcout << \"four pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcout << \"error 1\" << endl;\n\t\t\t}\n\t\t\telse if(kind == 5)\n\t\t\t{\n\t\t\t\tbool straight = false;\n\t\t\t\tfor(int i = 0; i < 9; i++)\n\t\t\t\t{\n\t\t\t\t\tL[13] = L[0];\n\t\t\t\t\tL[14] = L[1];\n\t\t\t\t\tL[15] = L[2];\n\t\t\t\t\tL[16] = L[3];\n\t\t\t\t\tif(L[i] && L[i+1] && L[i+2] && L[i+3] && L[i+4])\n\t\t\t\t\t{\n\t\t\t\t\t\tstraight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(straight)\n\t\t\t\t{\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t\telse if(kind == 3)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 2)\n\t\t\t\t{\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 4)\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main(void)\n{\n    int card[5];\n    while(scanf(\"%d\",&card[0])!=EOF)\n    {\n        for(int i=1;i<5;i++)scanf(\",%d\",&card[i]);\n        sort(card,card+5);\n        if(card[0]+1==card[1]&&card[1]+1==card[2]&&card[2]+1==card[3]&&card[3]+1==card[4])printf(\"straight\\n\");\n        else if(card[0]+12==card[4]&&card[1]+1==card[2]&&card[2]+1==card[3]&&card[3]+1==card[4])printf(\"straight\\n\");\n        else if(card[0]==card[1])\n        {\n            if(card[1]==card[2])\n            {\n                if(card[2]==card[3])printf(\"four card\\n\");\n                else if(card[3]==card[4])printf(\"full house\\n\");\n                else printf(\"three card\\n\");\n            }\n            else if(card[2]==card[3])\n            {\n                if(card[3]==card[4])printf(\"full house\\n\");\n                else printf(\"two pair\\n\");\n            }\n            else if(card[3]==card[4])printf(\"two pair\\n\");\n            else printf(\"one pair\\n\");\n        }\n        else if(card[1]==card[2])\n        {\n            if(card[2]==card[3])\n            {\n                if(card[3]==card[4])printf(\"four card\\n\");\n                else printf(\"three card\\n\");\n            }\n            else if(card[3]==card[4])printf(\"two card\\n\");\n            else printf(\"one pair\\n\");\n        }\n        else if(card[2]==card[3])\n        {\n            if(card[3]==card[4])printf(\"three card\\n\");\n            else printf(\"one pair\\n\");\n        }\n        else if(card[3]==card[4])printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\n#define N 5\n\nint main()\n{\n\tvector<int> card(N);\n\tstring handName[7] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\tint hand;\n\tint i;\n\tint same, series;\n\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n\t\tsort(card.begin(), card.end());\n\n\t\thand = 0;\n\n\t\tfor (i = 1; i < N; i++) {\n\t\t\tif (card[i-1] == card[i]) hand = 1;\n\t\t}\n\n\t\tsame = 0;\n\t\tseries = 0;\n\t\tfor (i = 1; i < N; i++) {\n\t\t\tif (card[i-1] == card[i]) {\n\t\t\t\tsame++;\n\t\t\t\tif (same==2) {\n\t\t\t\t\thand = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (same==1 && series==1) {\n\t\t\t\t\thand = 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (same) series++;\n\t\t\t\tsame = 0;\n\t\t\t}\n\t\t}\n\n\t\tseries = 0;\n\t\tfor (i = 1; i < N; i++)\n\t\t\tif (card[i] == card[i-1]+1) series++;\n\t\tif (series == 4) hand = 4;\n\t\tif (card[0]==1 && card[1]==10 && card[2]==11 && card[3]==12 && card[4]==13)\n\t\t\thand = 4;\n\n\t\tsame = 0;\n\t\tseries = 0;\n\t\tfor (i = 1; i < N; i++) {\n\t\t\tif (card[i-1] == card[i]) {\n\t\t\t\tsame++;\n\t\t\t\tif (same==2 && series==1) {\n\t\t\t\t\thand = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (same) series++;\n\t\t\t\tsame = 0;\n\t\t\t}\n\t\t}\n\n\t\tsame = 0;\n\t\tfor (i = 1; i < N; i++) {\n\t\t\tif (card[i-1] == card[i]) {\n\t\t\t\tsame++;\n\t\t\t\tif (same==3) {\n\t\t\t\t\thand = 6;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsame = 0;\n\t\t\t}\n\t\t}\n\n\t\tcout<<handName[hand]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n      }\n    }\n    mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    //printf(\"mx = %d\\n\", mx);\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c == 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      for (int i = 0;  i< mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n\tprintf(\"three card\\n\");\n\tgoto end;\n      }\n    } else if (mx == 4 || mx == 5) {\n      printf(\"four card\\n\");\n      goto end;\n    } else {\n      printf(\"null\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n  vector<int> a(5);\n  string s[7] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\n  while (~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])) {\n    sort(a.begin(), a.end());\n    int ans = 0;\n    for (int i = 0; i < 4; ++i) {\n      if (a[i] == a[i + 1]) {\n        ans = 1;\n        for (int j = i + 2; j < 5; ++j) {\n          if (a[j] == a[j + 1]) ans = 2;\n        }\n        break;\n      }\n    }\n\n    for (int i = 0; i < 3; ++i) {\n      if (a[i] == a[i + 2]) ans = 3;\n    }\n\n    bool f = true;\n    for (int i = 1; i < 5; ++i) {\n      if (a[i] - 1 == a[i - 1]) continue;\n      if (a[i - 1] == 1 && a[i] == 10) continue;\n      f = false;\n    }\n    if (f) ans = 4;\n\n    if (a[0] == a[1] && a[3] == a[4] && (a[1] == a[2] || a[2] == a[3])) ans = 5;\n\n    if (a[0] == a[3] || a[1] == a[4]) ans = 6;\n\n    cout << s[ans] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<sstream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool st(vector<int> v){\n  if(\n     v[1]+1==v[2]&&\n     v[2]+1==v[3]&&\n     v[3]+1==v[4]){\n    if(v[0]+1==v[1]) return true;\n    if(v[0]==1&&v[4]==13) return true;\n  }\n  return false;\n}\nint main(){\n  string buf;\n  int i,j,k;\n  while(cin >> buf){\n    vector<int> v,p;\n    for(i=0;i<buf.size();i++) if(buf[i]==',') buf[i]=' ';\n    stringstream ss(buf);\n    for(i=0;i<5;i++){\n      ss >> k;\n      v.push_back(k);\n    }\n    sort(v.begin(),v.end());\n    k=1;\n    for(i=1;i<5;i++){\n      //cout << v[i] << endl;\n      if(v[i-1]==v[i]) k++;\n      else {\n    p.push_back(k);\n    k=1;\n      }\n    }\n    if(k!=1) p.push_back(k);\n    sort(p.begin(),p.end(),greater<int>());\n    //for(i=0;i<p.size();i++) cout << p[i] << endl;\n    if(p[0]==4) cout << \"four card\" << endl;\n    else if(p[0]==3&&p[1]==2) cout << \"full house\" << endl;\n    else if(p[0]==3) cout << \"three card\" << endl;\n    else if(p[0]==2&&p[1]==2) cout << \"two pair\" << endl;\n    else if(p[0]==2) cout << \"one pair\" << endl;\n    else if(st(v)) cout << \"straight\" << endl;\n    else cout << \"null\" << endl;\n  }\n \n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint main(){\n  vector<int> c(5);\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4]) != EOF){\n    int ans = 0;\n    sort(c.begin(),c.end());\n    for(int i=0; i<5; i++){\n      if(i<2){\n\tif(c[i] == c[i+1] && c[i+1] == c[i+2] && c[i+2] == c[i+3]){\n\t  ans+=6;\n\t  i+=3;\n\t}\n      }\n      if(i<3){\n\tif(c[i] == c[i+1] && c[i+1] == c[i+2]){\n\t  ans+=3;\n\t  i+=2;\n\t}\n      }\n      if(i<4){\n\tif(c[i] == c[i+1]){\n\t  ans+=2;\n\t  i++;\n\t}\n      }\n    }\n    if(ans == 6) cout <<\"four card\"<<endl;\n    else if(ans == 5) cout <<\"full house\"<<endl;\n    else if(ans == 4) cout <<\"two pair\"<<endl;\n    else if(ans == 3) cout <<\"three card\"<<endl;\n    else if(ans == 2) cout <<\"one pair\"<<endl;\n    else if(c[0]+1 == c[1] && c[1]+1 == c[2] && c[2]+1 == c[3] && c[3]+1 == c[4]) cout <<\"straight\"<<endl;\n    else if(c[0] == 1 && c[1] == 10 && c[2] == 11 && c[3] == 12 && c[4] == 13) cout <<\"straight\"<<endl;\n    else cout <<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nvoid hoge(int* a){\n  int cards[13]{0};\n  REP(i,5) cards[a[i]-1]++;\n  REP(i,13){\n    if(cards[i]==4){\n      puts(\"four card\");\n      return;\n    }\n  }\n  REP(i,13){\n    if(cards[i]==3){\n      REP(j,13){\n\tif(cards[j]==2){\n\t  puts(\"full house\");\n\t  return;\n\t}\n      }\n      puts(\"three card\");\n      return;\n    }\n  }\n  REP(i,13){\n    if(cards[i]==2){\n      for(int j=i+1;j<=13;j++){\n\tif(cards[j]==2){\n\t  puts(\"two pair\");\n\t  return;\n\t}\n      }\n      puts(\"one pair\");\n      return;\n    }\n  }\n  REP(i,13){\n    if(cards[i]==1){\n      if(cards[i+1]==1&&\n\t cards[i+2]==1&&\n\t cards[i+3]==1&&\n\t cards[i+4]==1){\n\tputs(\"straight\");\n\treturn;\n      }\n    }\n  }\n  if(cards[0]==1&&\n     cards[9]==1&&\n     cards[10]==1&&\n     cards[11]==1&&\n     cards[12]==1){\n    puts(\"straight\");\n    return;\n  }\n  puts(\"null\");\n  return;\n}\n\nint main(){\n  int a[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])>0){\n    hoge(a);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nclass poker{\nprivate:\n\tint cardCnt[13];\n\tstring audit;\n\tbool onePair(){\n\t\tint pairCnt = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 2){\n\t\t\t\tpairCnt++;\n\t\t\t}\n\t\t}\n\t\treturn pairCnt == 1;\n\t}\n\tbool twoPair(){\n\t\tint pairCnt = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 2){\n\t\t\t\tpairCnt++;\n\t\t\t}\n\t\t}\n\t\treturn pairCnt == 2;\n\t}\n\tbool threeCard(){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tbool straight(){\n\t\tconst int exception[] = {1,0,0,0,0,0,0,0,0,1,1,1,1};\n\t\tfor(int i = 0;i < 10;i++){\n\t\t\tif(cardCnt[i] == 1 && cardCnt[i + 1] == 1 && cardCnt[i + 2] == 1 && cardCnt[i + 3] == 1 && cardCnt[i + 4] == 1){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(exception[i] != cardCnt[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tbool fullHouse(){\n\t\tbool b1 = false, b2 = false;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 3){\n\t\t\t\tb1 = true;\n\t\t\t}else if(cardCnt[i] == 2){\n\t\t\t\tb2 = true;\n\t\t\t}\n\t\t}\n\t\treturn b1 && b2;\n\t}\n\tbool fourCard(){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 4){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\npublic:\n\tstring getAudit(){\n\t\treturn audit;\n\t}\n\tpoker(int c[5]){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tcardCnt[i] = 0;\n\t\t}\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tcardCnt[c[i] - 1]++;\n\t\t}\n\t\tif(fourCard()){\n\t\t\taudit = \"four card\";\n\t\t}else if(fullHouse()){\n\t\t\taudit = \"full house\";\n\t\t}else if(straight()){\n\t\t\taudit = \"straight\";\n\t\t}else if(threeCard()){\n\t\t\taudit = \"three card\";\n\t\t}else if(twoPair()){\n\t\t\taudit = \"two pair\";\n\t\t}else if(onePair()){\n\t\t\taudit = \"one pair\";\n\t\t}else{\n\t\t\taudit = \"null\";\n\t\t}\n\t}\n};\n\nint main(void){\n\tint crd[5];\n\twhile(1){\n\t\tif(cin.eof()){\n\t\t\tbreak;\n\t\t}\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tcin >> crd[i];\n\t\t\tcin.get();\n\t\t}\n\t\tpoker p(crd);\n\t\tcout << p.getAudit() << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nusing namespace std;\nint main(void)\n{\n\tint c[5],cnt[15],i,j,yaku,flg,flg2,n;\n\tchar yak[8][11]={\"\",\"null\",\"one pair\",\"two pair\",\"three card\",\n\t\t\t\t\t\t\"straight\",\"full house\",\"four card\"};\n\t\t\t\t\t\t\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF)\t{\n\t\tfor(i=1;i<=14;i++)\tcnt[i]=0;\n\t\tfor(i=0;i<5;i++)\t{\n\t\t\tif(c[i]==1)\tcnt[14]++;\n\t\t\tcnt[c[i]]++;\n\t\t}\n//\t\tfor(i=2;i<=14;i++)\t{\n//\t\t\tprintf(\" kazu=%d\\n\",cnt[i]);\n//\t\t}\n\t\tyaku=1;\n\t\tfor(i=2;i<=14;i++)\t{\n\t\t\tif(cnt[i]==4)\t{\n\t\t\t\tyaku=7;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(yaku==1)\t{\n\t\t\tflg=0;\tflg2=0;\n\t\t\tfor(i=2;i<=14;i++)\t{\n\t\t\t\tif(cnt[i]==3)\t{\n\t\t\t\t\tflg=1;\n\t\t\t\t}\n\t\t\t\tif(cnt[i]==2)\t{\n\t\t\t\t\tflg2=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flg==1 && flg2==1)\t{\n\t\t\t\tyaku=6;\n\t\t\t}\n\t\t}\n\t\tif(yaku==1)\t{\n\t\t\tfor(i=1;i<=10;i++)\t{\n\t\t\t\tflg=1;\n\t\t\t\tfor(j=0;j<5;j++)\t{\n\t\t\t\t\tif(cnt[i+j]!=1)\t{\n\t\t\t\t\t\tflg=0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(flg==1)\t{\n\t\t\t\t\tyaku=5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(yaku==1)\t{\n\t\t\tfor(i=2;i<=14;i++)\t{\n\t\t\t\tif(cnt[i]==3)\t{\n\t\t\t\t\tyaku=4;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(yaku==1)\t{\n\t\t\tn=0;\n\t\t\tfor(i=2;i<=14;i++)\t{\n\t\t\t\tif(cnt[i]==2)\t{\n\t\t\t\t\tn++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n==2)\t{\n\t\t\t\tyaku=3;\n\t\t\t}\n\t\t\telse if(n==1)\t{\n\t\t\t\tyaku=2;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",yak[yaku]);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<(n);++i)\n#define loop for(;;)\n#define trace(var) cerr<<\">>> \"<<#var<<\" = \"<<var<<endl;\n#define inf (1e9)\n#define eps (1e-9)\n\ntemplate<class S, class T> inline\nostream& operator<<(ostream&os, pair<S,T> p) {\n  return os << '(' << p.first << \", \" << p.second << ')';\n}\n\ntemplate<class S, class T, class U> inline\nostream& operator<<(ostream&os, tuple<S,T,U> t) {\n  return os << '('\n    << get<0>(t) << \", \"\n    << get<1>(t) << \", \"\n    << get<2>(t) << ')';\n}\n\ntemplate<class T> inline\nostream& operator<<(ostream&os, vector<T> v) {\n  if (v.size() == 0) { return os << \"(empty)\"; }\n  os << v[0];\n  for (int i=1, len=v.size(); i<len; ++i) os << ' ' << v[i];\n  return os;\n}\n\ntemplate<class T> inline\nistream& operator>>(istream&is, vector<T>&v) {\n  rep (i, v.size()) is >> v[i];\n  return is;\n}\n\n//           ^   >  v   <\nint dx[] = { -1, 0, 1,  0 };\nint dy[] = {  0, 1, 0, -1 };\n\ntypedef vector<int> vi;\nint memo[20];\n\nbool fourcard(vi&xs) {\n  rep (i, 20) memo[i] = 0;\n  for (int x: xs) memo[x]++;\n  bool res = false;\n  rep (i, 20) if (memo[i] == 4) res = true;\n  return res;\n}\n\nbool straight(vi&xs) {\n  {\n    bool res = true;\n    rep (i, xs.size()) {\n      if (xs[i] != xs[0] + i) res = false;\n    }\n    if (res) return true;\n  }\n  if (xs[0] == 1) {\n    bool res = true;\n    for (int i = 1; i < xs.size(); ++i) {\n      if (xs[i] != 9 + i) res = false;\n    }\n    if (res) return true;\n  }\n  return false;\n}\n\nbool fullhouse(vi&xs) {\n  if ( xs[0] == xs[1] and xs[2] == xs[3] and xs[3] == xs[4]) return true;\n  if ( xs[0] == xs[1] and xs[1] == xs[2] and xs[3] == xs[4]) return true;\n  return false;\n}\n\nbool three(vi&xs) {\n  int n = 0;\n  rep (i, xs.size()) {\n    int m = 0;\n    for (int j = i; j < xs.size(); ++j) {\n      if (xs[i] == xs[j]) ++m;\n      else break;\n    }\n    n = max(n, m);\n  }\n  return n >= 3;\n}\n\nbool two(vi&xs) {\n  rep (i,20) memo[i] = 0;\n  for (int x: xs) memo[x]++;\n\n  int m = 0;\n  rep (i,20) if (memo[i] == 2) ++m;\n  return m == 2;\n}\n\nbool one(vi&xs) {\n  rep (i,20) memo[i] = 0;\n  for (int x: xs) memo[x]++;\n\n  int m = 0;\n  rep (i,20) if (memo[i] == 2) ++m;\n  return m == 1;\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(0);\n  cout.setf(ios::fixed);\n  cout.precision(10);\n  random_device dev;\n  mt19937 rand(dev());\n\n  int a,b,c,d,e;\n  char comma;\n  while (cin>>a>>comma>>b>>comma>>c>>comma>>d>>comma>>e) {\n    vi xs = {a,b,c,d,e};\n    sort(begin(xs), end(xs));\n    if (fourcard(xs)) {\n      cout << \"four card\" << endl;\n    } else if (fullhouse(xs)) {\n      cout << \"full house\" << endl;\n    } else if (straight(xs)) {\n      cout << \"straight\" << endl;\n    } else if (three(xs)) {\n      cout << \"three card\" << endl;\n    } else if (two(xs)) {\n      cout << \"two pair\" << endl;\n    } else if (one(xs)) {\n      cout << \"one pair\" << endl;\n    } else {\n      cout << \"null\" << endl;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nconst int N = 5;\nint c[N];\n\nbool isStraight() {\n  if(c[0] == 1 && c[1] == 10 &&\n     c[2] == 11 && c[3] == 12 && c[4] == 13) return true;\n  for(int i = 1; i < N; ++i) {\n    if(c[i-1]+1 !=  c[i]) return false;\n  }\n  return true;\n}\n\nbool isTwoPair() {\n  int num = 0;\n  for(int i = i; i < N; ++i) {\n    if(c[i-1] == c[i]) {\n      ++num;\n      while(c[i-1] == c[i]) ++i;\n    }\n  }\n  return num == 2;\n}\n\nint main() {\n  string s;\n  while(cin >> s) {\n    replace(s.begin(), s.end(), ',', ' ');\n    stringstream ss(s);\n    for(int i = 0; i < N; ++i) ss >> c[i];\n    sort(c,c+N);\n    if(c[0] == c[3] || c[1] == c[4]) {\n      cout << \"four card\" << endl;\n    } else if(c[0] == c[2] && c[3] == c[4] ||\n\t      c[0] == c[1] && c[2] == c[4]) {\n      cout << \"full house\" << endl;\n    } else if(isStraight()) {\n      cout << \"straight\" << endl;\n    } else if(c[0] == c[2] || c[1] == c[3] || c[2] == c[4]) {\n      cout << \"three card\" << endl;\n    } else if(isTwoPair()) {\n      cout << \"two pair\" << endl;\n    } else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]) {\n      cout << \"one pair\" << endl;\n    } else {\n      cout << \"null\" << endl;\n    }\n  }\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n    int card[5];\n    \n    while(scanf(\"%d\" ,&card[0])!=EOF){\n        for(int i = 1 ; i < 5 ; i++){\n            scanf(\",%d\" ,&card[i]);\n        }\n        \n        int cnt = 0;\n        for(int i = 0 ; i < 5 ; i++){\n            for(int j = 0 ; j < 5 ; j++){\n                if(card[i] == card[j] && i != j) cnt++;\n                \n            }\n        }\n        \n        int flg = 0;\n        switch(cnt){\n            case 2:\n                printf(\"one pair\\n\");\n                flg = 2;\n                break;\n            case 4:\n                printf(\"two pair\\n\");\n                flg = 2;\n                break;\n            case 6:\n                printf(\"three card\\n\");\n                flg = 2;\n                break;\n            case 8:\n                printf(\"full house\\n\");\n                flg = 2;\n            case 12:\n                printf(\"four card\\n\");\n                flg = 2;\n                break;\n            default:\n                flg = 1;\n        }\n        \n        if(flg == 2) continue;\n        \n        int ct=0;\n        if(flg){\n            sort(card,card+5);\n            for(int i = 1 ; i < 5 ; i++){\n                if(card[i]-card[i-1]==1) ct++;\n            }\n        }\n        \n        if(ct==4) printf(\"straight\\n\");\n        else if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13) printf(\"straight\\n\");\n        else printf(\"null\\n\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\nusing namespace std;\n\nstring pairs[2][3] = { {\"null\",\"one pair\",\"two pair\"},\n\t\t\t\t\t  {\"three card\",\"full house\",\"\"} };\n\nint main() {\n\tint n[5], c, three, two;\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4]) != EOF) {\n\t\tint card[13] = { 0 }, c = 0, three = 0, two = 0;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tcard[n[i] - 1]++;\n\t\t}\n\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (card[i] == 4) {\n\t\t\t\tc = 114514;\n\t\t\t\tbreak;\n\t\t\t} else if (card[i] == 3) {\n\t\t\t\tthree++;\n\t\t\t} else if (card[i] == 2) {\n\t\t\t\ttwo++;\n\t\t\t} else if (card[i] == 1) {\n\t\t\t\tc++;\n\t\t\t\tif (c == 5) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (c == 4 && i == 12 && card[0] == 1) {\n\t\t\t\t\tc = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if(card[i] == 0 && c != 0) {\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (c == 5) {\n\t\t\tcout << \"straight\" << endl;\n\t\t} else if (c == 114514) {\n\t\t\tcout << \"four card\" << endl;\n\t\t} else {\n\t\t\tcout << pairs[three][two] << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\ntypedef long long LL;\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nusing namespace std;\nint main(void)\n{\n  for(;;){\n    int n[5];\n    char c;\n    REP(i,5){\n      if(i) cin >> c;\n      if((scanf(\"%d\",&n[i])) == 0) return 0;\n    }\n    int num[16];\n    REP(i,16) num[i]=0;\n    REP(i,5) ++num[n[i]];\n    num[14]=num[1];\n    string s=\"null\";\n    REP(i,11){\n      int st=0;\n      REP(j,5) if(num[i+j]) ++st;\n      if(st==5) s=\"straight\";\n    }\n    int pa=0;\n    REP(i,5) REP(j,i) if(n[i]==n[j]) ++pa;\n    if(pa==1) s=\"one pair\";\n    if(pa==2) s=\"two pair\";\n    if(pa==3) s=\"three card\";\n    if(pa==4) s=\"full house\";\n    if(pa==6) s=\"four card\";\n    cout << s << endl;\n\n\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <map>\n#include <algorithm>\n\nvoid check_multiplicity(const int* sorted_cards, std::map<int,int>& multiplicities)\n{\n\tmultiplicities.clear();\n\n\tconst int* current = sorted_cards;\n\tconst int* end = sorted_cards + 5;\n\twhile (current != end) {\n\t\tconst int* next = std::upper_bound(current, end, *current);\n\t\t++multiplicities[next - current];\n\t\tcurrent = next;\n\t}\n}\n\nint count(const std::map<int,int> multiplicities, int multiplicity)\n{\n\tstd::map<int,int>::const_iterator i = multiplicities.find(multiplicity);\n\treturn (i != multiplicities.end()) ? i->second : 0;\n}\n\nbool check_straight(const int* sorted_cards, std::map<int,int> multiplicities)\n{\n\tif (count(multiplicities, 1) != 5) {\n\t\treturn false;\n\t}\n\treturn (sorted_cards[4] == sorted_cards[0] + 4)\n\t\t|| (sorted_cards[0] == 1 && sorted_cards[1] == 10);\n}\n\nint main()\n{\n\tint cards[5] = {};\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) == 5) {\n\t\tstd::sort(cards, cards + 5);\n\t\tstd::map<int,int> multiplicities;\n\t\tcheck_multiplicity(cards, multiplicities);\n\n\t\tif (count(multiplicities, 4) > 0) {\n\t\t\tstd::cout << \"four card\\n\";\n\t\t} else if (count(multiplicities, 3) > 0 && count(multiplicities, 2) > 0) {\n\t\t\tstd::cout << \"full house\\n\";\n\t\t} else if (check_straight(cards, multiplicities)) {\n\t\t\tstd::cout << \"straight\\n\";\n\t\t} else if (count(multiplicities, 3) > 0) {\n\t\t\tstd::cout << \"three card\\n\";\n\t\t} else if (count(multiplicities, 2) == 2) {\n\t\t\tstd::cout << \"two pair\\n\";\n\t\t} else if (count(multiplicities, 2) == 1) {\n\t\t\tstd::cout << \"one pair\\n\";\n\t\t} else {\n\t\t\tstd::cout << \"null\\n\";\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint compare_int (const void* a,const void* b) {\n\n  return (*(int*)a-*(int*)b);\n\n}\n\nint main(void) {\n\n  int hand[5];\n  \n  int overlap[5];\n  int used[5];\n\n  int count;\n  int full_or_three=-1;\n  int two_or_one=-1;\n  int temp;\n  int i,j,k,l,m=0;\n\n  char c;\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4])!=EOF) {\n\n    //sort current hand\n    qsort(hand,sizeof(hand)/sizeof(hand[0]),sizeof(int),compare_int);\n\n    //for(i=0;i<5;i++) printf(\"%d \",hand[i]);\n  \n    //count overlapped cards\n    count=0;\n\n    for(i=0;i<5;i++) {\n\n      overlap[i]=0;\n      used[i]=0;\n    }\n\n    for(i=0;i<4;i++) {\n\n      if(used[i]==1) continue;\n    \n      for(j=i+1;j<5;j++) {\n\n\tif(used[j]==0 && hand[i]==hand[j]) {\n\n\t  overlap[count]++;\n\n\t  used[i]=used[j]=1;\n\n\t}\n\n      }\n\n      used[i]=1;\n\n      count++;\n\n    }\n\n    //for(i=0;i<5;i++) printf(\"%d \",overlap[i]);\n\n    //check overlapped cards\n  \n    //four card?\n    for(i=0;i<5;i++) {\n\n      if(overlap[i]==3) {\n\n\tprintf(\"four card\\n\");\n\n\tgoto Terminate;\n      \n      }\n\n    }\n\n    //full house or three card?\n    for(i=0;i<5;i++) {\n    \n      if(overlap[i]==2) {\n\n\tfor(j=0;j<5;j++) {\n\n\t  if(overlap[j]==1) {\n\n\t    printf(\"full house\\n\");\n\n\t    goto Terminate;\n\n\t  }\n\n\t}\n\n\tprintf(\"three card\\n\");\n\n\tgoto Terminate;\n\n      }\n\n    }\n\n    if(full_or_three==1) {\n\n      for(i=0;i<5;i++) {\n\n\tif(overlap[i]==1) {\n\n\t  printf(\"full house\\n\");\n\n\t  goto Terminate;\n\n\t}\n\n\telse {\n\n\t  printf(\"three card\\n\");\n\n\t  goto Terminate;\n\n\t}\n\n      }\n\n    }\n\n    //straight?\n    if(hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4] || (hand[0]==1 && hand[1]==10 && hand[2]==11 && hand[3]==12 && hand[4]==13)) {\n\n      printf(\"straight\\n\");\n\n      goto Terminate;\n\n    }\n\n    //two pair or one pair?\n    for(i=0;i<4;i++) {\n\n      if(overlap[i]==1) {\n\n\tfor(j=i+1;j<5;j++) {\n\n\t  if(overlap[j]==1) {\n\n\t    printf(\"two pair\\n\");\n\n\t    goto Terminate;\n\n\t  }\n\n\t}\n\n\tprintf(\"one pair\\n\");\n\n\tgoto Terminate;\n\n      }\n\n    }\n\n    //null\n    printf(\"null\\n\");\n\n  Terminate:\n    continue;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<vector>\n#include<queue>\n#include<list>\n#include<stack>\n#include<algorithm>\n#include<cmath>\n#include<memory>\n#include<array>\n\nusing namespace std;\n\n\nbool isStraight( const array<int,5>& cs )\n{\n  if ( cs[0] == 1 && cs[1] == 10 && cs[2] == 11 && cs[3] == 12 && cs[4] == 13 )\n    return true;\n  \n  for ( auto i = 0; i < 4; ++i )\n    {\n      if ( cs[i] + 1 != cs[i+1] )\n        return false;\n    }\n\n  return true;\n}\n\nbool isOnePair( const array<int,5>& cs )\n{\n  for ( auto i = 0; i < 4; ++i )\n    {\n      if ( cs[i] == cs[i+1] )\n        return true;\n    }\n\n  return false;\n}\n\nbool isTwoPair( const array<int,5>& cs )\n{\n  for ( auto i = 0; i < 2; ++i )\n    {\n      for ( auto j = i + 2; j < 4; ++j )\n        {\n          if ( cs[i] == cs[i+1] && cs[j] == cs[j+1] )\n            return true;\n        }\n    }\n\n  return false;\n}\n\nbool isThreeCard( const array<int,5>& cs )\n{\n  for ( auto i = 0; i < 3; ++i )\n    {\n      if ( cs[i] == cs[i+1] && cs[i+1] == cs[i+2] )\n        return true;\n    }\n\n  return false;\n}\n\nint main()\n{\n  array<int,5> card;\n  char c;\n\n  while ( cin >> card[0] >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4] )\n    {\n      sort( card.begin(), card.end() );\n      \n      if ( card[0] == card[1] && card[1] == card[2] && card[2] == card[3] )\n        cout << \"four card\" << endl;\n      else if ( card[1] == card[2] && card[2] == card[3] && card[3] == card[4] )\n        cout << \"four card\" << endl;\n      else if ( card[0] == card[1] && card[1] == card[2] && card[3] == card[4] )\n        cout << \"full house\" << endl;\n      else if ( card[0] == card[1] && card[2] == card[3] && card[3] == card[4] )\n        cout << \"full house\" << endl;\n      else if ( isStraight( card ) )\n        cout << \"straight\" << endl;\n      else if ( isThreeCard( card ) )\n        cout << \"three card\" << endl;\n      else if ( isTwoPair( card ) )\n        cout << \"two pair\" << endl;\n      else if ( isOnePair( card ) )\n        cout << \"one pair\" << endl;\n      else\n        cout << \"null\" << endl;\n    }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nint main(){\n  while(1){\n    int card[13]={0};\n    int tehai[5]={0};\n    char ch;\n    int pair=0;\n    int p_flag=0,t_flag=0,f_flag=0,s_flag=0;\n    \n    cin>>tehai[0]>>ch>>tehai[1]>>ch>>tehai[2]>>ch>>tehai[3]>>ch>>tehai[4];\n    \n    for(int i=0;i<5;i++){\n      for(int j=0;j<13;j++){\n        if(tehai[i]==j+1)\n          card[j]++;\n      }\n    }\n\n    for(int i=0;i<9;i++){\n      if(card[i]==1 && card[i+1]==1 && card[i+2]==1 && card[i+3]==1 && card[i+4]==1)\n        s_flag=1;\n    }\n\n    if(card[0]==1 && card[9]==1 && card[10]==1 && card[11]==1 && card[12]==1)\n      s_flag=1;\n    \n    for(int i=0;i<13;i++){\n      if(card[i]==2){\n        pair++;\n        p_flag=1;\n      }\n      if(card[i]==3)\n        t_flag=1;\n      if(card[i]==4)\n        f_flag=1;\n    }\n\n    if(pair==1 && p_flag==1 && t_flag==0 && f_flag==0)\n      cout<<\"one pair\"<<endl;\n    else if(pair==2 && p_flag==1 && t_flag==0 && f_flag==0)\n      cout<<\"two pair\"<<endl;\n    else if (p_flag==0 && t_flag==1 && f_flag==0)\n      cout<<\"three card\"<<endl;\n    else if (p_flag==0 && t_flag==0 && f_flag==1)\n      cout<<\"four card\"<<endl;\n    else if (p_flag==1 && t_flag==1 && f_flag==0)\n      cout<<\"full house\"<<endl;\n    else if (s_flag==1)\n      cout<<\"straight\"<<endl;\n    else\n      cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint nPair(int *card);\nbool isThreeCard(int *card);\nbool isStraight(int *card);\nbool isFullHouse(int *card);\nbool isFourCard(int *card);\n\nint main()\n{\n\tint card[5] = {0};\n\tchar c;\n\n\twhile (cin >> card[0])\n\t{\n\t\tif (cin.eof()) break;\n\t\tcin >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4];\n\n\t\tif (isFourCard(card))\n\t\t\tcout << \"four card\" << endl;\n\t\telse if (isFullHouse(card))\n\t\t\tcout << \"full house\" << endl;\n\t\telse if (isStraight(card))\n\t\t\tcout << \"straight\" << endl;\n\t\telse if (isThreeCard(card))\n\t\t\tcout << \"three card\" << endl;\n\t\telse if (nPair(card) == 2)\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if (nPair(card) == 1)\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n\treturn 0;\n}\n\nint nPair(int *card)\n{\n\tint c[13] = {0}, i, n = 0;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\n\tfor (i = 0; i < 5; i++)\n\t\tif (c[i] == 2)\n\t\t\tn++;\n\treturn n;\n}\n\nbool isThreeCard(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\n\tfor (i = 0; i < 5; i++)\n\t{\n\t\tif (c[i] == 3)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool isFourCard(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\n\tfor (i = 0; i < 5; i++)\n\t{\n\t\tif (c[i] == 4)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool isStraight(int *card)\n{\n\tint c[13] = {0}, i, j;\n\tbool b;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tif (c[1] == 1 && c[12] == 1)\n\t\treturn false;\n\n\tsort(c, c+13, greater<int>());\n\t\n\tfor (i = 0; i < 5; i++)\n\t{\n\t\tif (c[i] == 1)\n\t\t\tb = true;\n\t\telse\n\t\t\tb = false;\n\t}\n\tif (b == true)\n\t\treturn true;\n\treturn false;\n}\n\nbool isFullHouse(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\t\n\tif (c[0] == 3 && c[1] == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<sstream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool st(vector<int> v){\n  if(\n     v[1]+1==v[2]&&\n     v[2]+1==v[3]&&\n     v[3]+1==v[4]){\n    if(v[0]+1==v[1]) return true;\n    if(v[0]==1&&v[4]==13) return true;\n  }\n  return false;\n}\nint main(){\n  string buf;\n  int i,j,k;\n  while(cin >> buf){\n    vector<int> v,p;\n    for(i=0;i<buf.size();i++) if(buf[i]==',') buf[i]=' ';\n    stringstream ss(buf);\n    for(i=0;i<5;i++){\n      ss >> k;\n      v.push_back(k);\n    }\n    sort(v.begin(),v.end());\n    k=1;\n    for(i=1;i<5;i++){\n      //cout << v[i] << endl;\n      if(v[i-1]==v[i]) k++;\n      else {\n\tp.push_back(k);\n\tk=1;\n      }\n    }\n    if(k!=1) p.push_back(k);\n    sort(p.begin(),p.end(),greater<int>());\n    //for(i=0;i<p.size();i++) cout << p[i] << endl;\n    if(p[0]==4) cout << \"four card\" << endl;\n    else if(p[0]==3&&p[1]==2) cout << \"full house\" << endl;\n    else if(p[0]==3) cout << \"three card\" << endl;\n    else if(p[0]==2&&p[1]==2) cout << \"two pair\" << endl;\n    else if(p[0]==2) cout << \"one pair\" << endl;\n    else if(st(v)) cout << \"straight\" << endl;\n    else cout << \"null\" << endl;\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two,three,four = 0;\n  int ans = 0;\n\n  for(int i = 0;i < 5;++i){\n    int trump;\n    cin>>trump;\n\n    poker.push_back(trump);\n  }\n  sort(poker.begin(),poker.end());\n\n  for(int e : poker){\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] == check[i+2] == check[i+3] == check[i+4]){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define rep(i,a) for(int i = 0 ; i < a;  i ++)\nint main(void){\n  vector<int> array(5);\n  vector<int> original;\n  vector<int> card(15);\n  string s;  \n  while(cin>>s){\n    rep(i,5)array[i]=0;\n    rep(i,15)card[i]=0;\n    for(int i = 0, j = 0 ; i < s.size() ; i ++){\n      if(s[i] == ','){\n\tj++;continue;\n      }\n      array[j] = array[j] * 10 +s[i]-'0';\n    }\n    rep(i,5){\n      card[array[i]]++;\n      if(array[i] == 1)card[14]++;\n    }\n\n    original = card;\n    sort(card.begin(),card.end(),greater<int>());\n    \n    //rep(i,5)cout<<card[i]<<endl;\n    if(\n       (card[0 ] == 1 && card[1 ] == 1 && card[2 ] == 1 && card[3 ] == 1 && card[4] == 1 ) \n       ){\n      int cnt = 0;\n      rep(i,15){\n\t//cout<<original[i]<<\" \"<<cnt<<endl;;\n\tif(cnt == 4) break;\n\tif(original[i] == original[i+1] && original[i] != 0 )cnt ++;\n\telse cnt = 0;\n      }\n      if(cnt == 4)cout<<\"straight\"<<endl;\n      else cout<<\"null\"<<endl;\n     \n      continue;\n    }\n    sort(array.begin(),array.end());\n    switch(card[0]){\n    case 4:\n      cout<<\"four card\"<<endl;break;\n    case 3:\n      if(card[1]==2){\n\tcout<<\"full house\"<<endl;\n      }else{\n\tcout<<\"three card\"<<endl;\n      }\n      break;\n    case 2:\n      // rep(i,card.size())cout<<original[i]<<endl;\n      if(card[1]==2 && card[2] == 2){\n\tcout<<\"two pair\"<<endl;\n      }else{\n\tcout<<\"one pair\"<<endl;\n      }\n      break;\n    default:\n      cout<<\"null\"<<endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n\n  int in0, in1, in2, in3, in4;\n  char in;\n\n  while( cin >> in0 >> in >> in1 >> in >> in2 >> in >> in3 >> in >> in4 ) {\n\n    vector< int > hand;\n\n    hand.push_back( in0 );\n    hand.push_back( in1 );\n    hand.push_back( in2 );\n    hand.push_back( in3 );\n    hand.push_back( in4 );\n    sort( hand.begin(), hand.end() );\n\n    bool flag = false;\n    if ( ( hand[1] == hand[2] && hand[2] == hand[3] ) && ( hand[2] == hand[0] || hand[2] == hand[4] ) ) {\n      cout << \"four card\" << endl;\n      continue;\n    }\n    if ( ( hand[0] == hand[1] && hand[3] == hand[4] ) && ( hand[2] == hand[0] || hand[2] == hand[4] ) ) {\n      cout << \"full house\" << endl;\n      continue;\n    }\n    for ( int i = 0; i < 4; i++ ) {\n      if ( hand[3-i] != hand[4] - i - 1 ) break;\n      if ( i == 3 ) {\n\tcout << \"straight\" << endl;\n\tflag = true;\n\tbreak;\n      }\n    }\n    if ( flag ) continue;\n    if ( hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13 ) {\n      cout << \"straight\" << endl;\n      continue;\n    }\n    for ( int i = 0; i < 3; i++ ) {\n      if ( hand[i] == hand[i+1] && hand[i] == hand[i+2] ) {\n\tcout << \"three card\" << endl;\n\tflag = true;\n\tbreak;\n      }\n    }\n    if ( flag ) continue;\n    int c = 0;\n    for ( int i = 0; i < 4; i++ ) {\n      if ( hand[i] == hand[i+1] ) c++;\n    }\n    if ( c == 1 ) {\n      cout << \"one pair\" << endl;\n      continue;\n    }else if ( c == 2 ) {\n      cout << \"two pair\" << endl;\n      continue;\n    }else if ( c == 0 ) {\n      cout << \"null\" << endl;\n      continue;\n    }\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n  int i, j, k, c[5], t;\n  while(scanf(\"%d\", &c[0]) != EOF) {\n    for(i = 1; i < 5; ++i) scanf(\",%d\", &c[i]);\n    for(i = 0; i < 5; ++i) if(c[i] == 1) c[i] = 14;\n    for(i = 0; i < 5; ++i) for(j = i + 1; j < 5; ++j) if(c[i] > c[j]) t = c[i], c[i] = c[j], c[j] = t;\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) || (c[3] == c[4] && c[1] == c[2] && c[2] == c[3])) printf(\"four card\\n\");\n    else if((c[0] == c[1] && c[1] == c[2] && c[3] == c[4]) || (c[0] == c[1] && c[2] == c[3] && c[3] == c[4])) printf(\"full house\\n\");\n    else if(c[4] == c[3] + 1 && c[3] == c[2] + 1 && c[2] == c[1] + 1 && c[1] == c[0] + 1) printf(\"straight\\n\");\n    else if((c[0] == c[1] && c[1] == c[2]) || (c[2] == c[3] && c[1] == c[2]) || (c[2] == c[3] && c[3] == c[4])) printf(\"three card\\n\");\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[0] == c[1] && c[3] == c[4]) || (c[1] == c[2] && c[3] == c[4])) printf(\"two pair\\n\");\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<string.h>\nusing namespace std;\n\nint main(){\n    int a[5];\n    char c;\n    while(cin>>a[0]>>c>>a[1]>>c>>a[2]>>c>>a[3]>>c>>a[4]){\n        sort(a,a+5);\n        int c[5],j=0;\n        memset(c,0,sizeof(c));\n        for(int i=0;i<4;i++){\n            if(a[i+1]!=a[i])\n                j++;\n            if(a[i+1]==a[i]){\n                c[j]++;\n            }\n        }\n        int p=0,t=0,f=0;\n        for(int i=0;i<5;i++){\n            if(c[i]==1)p++;\n            if(c[i]==2)t++;\n            if(c[i]==3)f++;\n        }\n        if(p==2){\n            cout<<\"two pair\"<<endl;\n        }\n        else if(p==1&&t==1)\n            cout<<\"full house\"<<endl;\n        else if(t==1)\n            cout<<\"three card\"<<endl;\n        else if(f==1)\n            cout<<\"four card\"<<endl;\n        else if(p==1){\n            cout<<\"one pair\"<<endl;\n        }\n        else if((a[3]==a[4]-1)&&(a[1]==a[2]-1)&&(a[2]==a[3]-1)&&((a[0]==a[1]-1)||(a[4]==13&&a[0]==1)))\n            cout<<\"straight\"<<endl;\n        else cout<<\"null\"<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\n\twhile(~scanf(\"%d\", &hand[0])){\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\t\tint num[15] = {0};\n\n\t\tfor(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1){\n\t\t\t\thand[i] += 13;\n\t\t\t}\n\t\t\tnum[hand[i]]++;\n\t\t}\n\n\t\tint h[7] = {0};\n\t\tstring s[] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\t\tint seq = 0;\n\n\t\th[0] = 1;\n\t\tfor(int i = 2; i < 15; i++){\n\t\t\tif(num[i-1] && num[i]){\n\t\t\t\tseq++;\n\t\t\t}\n\t\t\tif(num[i] == 2){\n\t\t\t\th[1] ++;\n\t\t\t}\n\t\t\tif(num[i] == 3){\n\t\t\t\th[3]++;\n\t\t\t}\n\t\t\tif(num[i] == 4){\n\t\t\t\th[6]++;\n\t\t\t}\n\t\t}\n\t\tif(h[1] > 1){\n\t\t\th[2]++;\n\t\t}\n\t\tif(h[1] && h[3]){\n\t\t\th[5]++;\n\t\t}\n\t\tif(seq == 4){\n\t\t\th[4]++;\n\t\t}\n\n\t\tfor(int i = 6; i >= 0; i--){\n\t\t\tif(h[i]){\n\t\t\t\tcout << s[i] << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\n\nvoid toint(string s, int cards[5]){\n\n\tint m=0;\n\n\n\tfor(int i=0;i<5;++i){\n\t\tint n=0;\n\n\t\tif(s[m]==',' || s[m]=='\\0'){\n\t\t\tcards[i] = n;\n\t\t\t++m;\n\t\t\tcontinue;\n\t\t}\n\n\t\tn += n*10 + s[m]-'0';\n\t\t++m;\n\t\t--n;\n\t}\n}\n\nint main(){\n\n\tstring s, res;\n\tint card[5] = {1,2,3,4,5};\n\t\n\n\tcin >> s;\n\n\ttoint(s,card);\n\n\tswitch( Result(card) ){\n\t\tcase 1:res=\"null\";break;\n\t\tcase 2:res=\"one pair\";break;\n\t\tcase 3:res=\"two pair\";break;\n\t\tcase 4:res=\"three card\";break;\n\t\tcase 5:res=\"straight\";break;\n\t\tcase 6:res=\"full house\";break;\n\t\tcase 7:res=\"four card\";break;\n\t}\n\n\t\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <bits/stdc++.h> // only for GCC\n\nusing namespace std;\n\n//typedef\n//------------------------------------------\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n//container util\n//------------------------------------------\n#define all(a)  (a).begin(),(a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n#define pb push_back\n#define mp make_pair\n\n//repetition\n//------------------------------------------\n#define loop(i,a,b) for(ull i=(a);i<ull(b);++i)\n#define rep(i,n) loop(i,0,n)\n#define iter(i,c) for(auto i=(c).begin(); i!=(c).end(); ++i)\n#define riter(i,c) for(auto i=(c).rbegin(); i!=(c).rend(); ++i)\n\n//constant\n//--------------------------------------------\nconst double eps = 1e-10;\nconst double pi  = acos(-1.0);\nconst double inf = (int)1e8;\n\n// output vector\n// ------------------------------------------\nnamespace std {\n    template<typename T>ostream&operator<<(ostream&os, vector<T>const&v){\n        iter(it,v) os<<*it<<(it+1==v.end()?\"\":\",\");\n        return os;\n    }\n    template<typename T, typename U>ostream&operator<<(ostream&os,const pair<T,U>&p){\n        return os << \"[\" << p.dirst << \",\" << p.second << \"]\";\n    }\n}\n\n//clear memory\n// ------------------------------------------\n#define clr(a,i) memset((a), (i) ,sizeof(a))\n\nint main(){\n   int n;\n    char c;\n    while(cin>>n){\n      map<int,int> t;\n      int two=0,three=0,four=0,strate=0;\n      t[n]++;\n      rep(i,4){\n         cin >> c >> n;\n         t[n]++;\n      }\n      rep(i,14){\n         if(t[i]==2) two++;\n         if(t[i]==3) three++;\n         if(t[i]==4) four++;\n         if(t[i]==1&&t[i+1]==1&&t[i+2]==1&&t[i+3]==1&&t[i+4]==1) strate++;\n      }\n      if(t[1]==1&&t[10]==1&&t[11]==1&&t[12]==1&&t[13]==1) strate++;\n      if(two==1){\n         if(three==1) cout << \"full house\" << endl;\n         else cout << \"one pair\" << endl;\n      }else if(two==2) cout << \"two pair\" << endl;\n      else if(three==1) cout << \"three card\" << endl;\n      else if(strate==1) cout << \"straight\" << endl;\n      else if(four==1) cout << \"four card\" << endl;\n      else cout << \"null\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <stack>\n#include <set>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tvector<int> c(5);\n\tchar a;\n\twhile(cin >> c[0] >> a >> c[1] >> a >> c[2] >> a >> c[3] >> a >> c[4]){\n\t\tbool yaku=false;\n\t\tint cnt[5]={0};\n\t\tsort(c.begin(),c.end());\n\t\tif((c[0]==(c[1]-1) && c[0]==(c[2]-2) && c[0]==(c[3]-3) && c[0]==(c[4]-4)) || (c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13)) {cout << \"straight\" << endl ; continue;} \n\t\tfor(int i=0;i<5;++i){\n\t\t\tfor(int j=i+1;j<5;++j){\n\t\t\t\tif(c[i]==c[j] && c[i]!=-1) cnt[i]++, c[j]=-1; \n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<5;++i){\n\t\t\t\n\t\t\tif(cnt[i]==3) {cout << \"four card\" << endl;yaku=true; break;}\n\t\t\tif(cnt[i]==2) {\n\t\t\t\tif(cnt[3]==1) {cout << \"full house\" << endl; yaku=true; break;}\n\t\t\t\telse {cout << \"three card\" << endl ; yaku=true; break;}\n\t\t\t}\n\t\t\tif(cnt[i]==1) {\n\t\t\t\tif(cnt[2]==2) {cout << \"full house\" << endl;  yaku=true; break;}\n\t\t\t\telse if (cnt[2]==1) {cout << \"two pair\" << endl; yaku=true; break;}\n\t\t\t\telse {cout << \"one pair\" << endl;yaku=true;  break;} \n\t\t\t}\n\t\t}\n\t\tif(!yaku){\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t\t\n\t}\n\treturn 0; \n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n \n    int a[5];\n    int kari;\n    char d;\n     \n    while (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n        for (int i = 4; i > 0; i--) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] > a[j+1]) {\n                    kari = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = kari;\n                }\n            }\n        }\n        if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n            if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n                if (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n                    cout << \"full house\" << endl;\n                } else if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n                    cout << \"four card\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n            } else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n                    cout << \"four card\" << endl;\n                } else {\n                    cout << \"two pair\" << endl;\n                }\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n            cout << \"straight\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint ar[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &ar[0], &ar[1], &ar[2], &ar[3], &ar[4])+1) {\n\t\tsort(ar, ar + 5);\n\t\tint a = ar[0];\n\t\tint b = ar[1];\n\t\tint c = ar[2];\n\t\tint d = ar[3];\n\t\tint e = ar[4];\n\n\t\tif (a == d || b == e) { cout << \"four card\" << endl; }\n\t\telse if (a == c && d == e) { cout << \"full house\" << endl; }\n\t\telse if (a == b && c == e) { cout << \"full house\" << endl; }\n\t\telse if (b - a == 1 && c - b == 1 && d - c == 1 && e - d == 1&&a!=1 ) { cout << \"straight\" << endl; }\n\t\telse if (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) { cout << \"straight\" << endl; }\n\t\telse if (a == c || b == d || c == e) { cout << \"three card\" << endl; }\n\t\telse if (a==b&&c==d) { cout << \"two pair\" << endl; }\n\t\telse if (a == b&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (b == c&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (a == b || b == c || c == d || d == e) { cout << \"one pair\" << endl; }\n\t\telse { cout << \"null\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int lld;\n\nint main(){\n  int num[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",&num[0],&num[1],&num[2],&num[3],&num[4])!=EOF){\n    sort(num,num+5);\n    bool three = false;\n    int pair = 0;\n    for(int i=0;i<4;i++){\n      if(num[i] == num[i+1]){\n\tpair++;\n      }\n      if(i < 3 && num[i] == num[i+1] && num[i] == num[i+2]){\n\tthree = true;\n      }\n    }\n    if((num[0] == num[1] && num[1] == num[2] && num[2] == num[3]) ||\n       (num[1] == num[2] && num[2] == num[3] && num[3] == num[4])){\n      cout << \"four card\" << endl;\n    }\n    else if(three && pair == 3){\n      cout << \"full house\" << endl;\n    }\n    else if(num[0] == num[1]-1 && num[0] == num[2]-2 &&\n\t    num[0] == num[3]-3 && num[0] == num[4]-4){\n      cout << \"straight\" << endl;\n    }\n    else if(num[0] == 1 && num[1] == 10 && num[2] == 11 &&\n\t    num[3] == 12 && num[4] == 13){\n      cout << \"straight\" << endl;\n    }\n    else {\n      if(three) cout << \"three card\" << endl;\n      else if(pair == 2) cout << \"two pair\" << endl;\n      else if(pair == 1) cout << \"one pair\" << endl;\n      else cout << \"null\" << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <stdlib.h>\nusing namespace std;\nint yaku(int*);\nvoid input(string,int*);\nint cmp(const void *a, const void *b);\nint main() {\n\tint a[5],ans;\n\tstring in;\n\twhile (cin >> in) {\n\t\tinput(in, a);\n\t\tans = yaku(a);\n\t\tif (ans == 7) {\n\t\t\tcout << \"four card\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tif (ans == 6) {\n\t\t\tcout << \"full house\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tif (ans == 5) {\n\t\t\tcout << \"straight\\n\";\n\t\t\tcontinue;\n\n\t\t}\n\t\tif (ans == 4) {\n\t\t\tcout << \"three card\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tif (ans == 3) {\n\t\t\tcout << \"two pair\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tif (ans == 2) {\n\t\t\tcout << \"one pair\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tcout << \"null\\n\";\n\t}\n}\n\nvoid input(string in,int *a) {\n\tint n = 0, m = 0;\n\tfor (int i = 0; i < in.size(); i++) {\n\t\tif (in[i] == ',') {\n\t\t\ta[m++] = n;\n\t\t\tn = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tn = n * 10 + in[i] - '0';\n\t}\n\ta[4] = n;\n\tqsort(a, 5, sizeof(int), cmp);\n\treturn;\n}\n\nint cmp(const void *a, const void *b) {\n\treturn *(int*)a - *(int*)b;\n}\n\nint yaku(int *a) {\n\tbool x = true, y = false;\n\tfor (int i = 1; i < 5; i++) {\n\t\tif (a[i - 1] + 1 != a[i]) {\n\t\t\tif (i == 1) {\n\t\t\t\tif (a[0] == 1) {\n\t\t\t\t\tif (a[1] == 10) {\n\t\t\t\t\t\tif (a[2] == 11) {\n\t\t\t\t\t\t\tif (a[3] == 12) {\n\t\t\t\t\t\t\t\tif (a[4] == 13)\n\t\t\t\t\t\t\t\t\treturn 5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tx = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (x)\n\t\treturn 5;\n\tint n[13] = {}, two = 0, three = 0;\n\tfor (int i = 0; i < 5; i++) {\n\t\tif (++n[a[i] - 1] == 4)\n\t\t\treturn 7;\n\t\tif (n[a[i] - 1] == 3) {\n\t\t\ttwo--;\n\t\t\tthree++;\n\t\t}\n\t\tif (n[a[i] - 1] == 2)\n\t\t\ttwo++;\n\t}\n\tif (three == 1) {\n\t\tif (two == 1)\n\t\t\treturn 6;\n\t\treturn 4;\n\t}\n\tif (two == 2)\n\t\treturn 3;\n\tif (two == 1)\n\t\treturn 2;\n\treturn 1;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nint main()\n{\n\tint c[5];\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\tmap<int, int> card;\n\t\tint mex = 0;\n\t\tfor(int i=0;i<5;i++){\n\t\t\tcard[ c[i] ]++;\n\t\t\tmex = max( mex, card[ c[i] ] );\n\t\t}\n\t\tbool full = true;\n\t\tbool A = false, B = false;\n\t\tfor(int i=0;i<5;i++){\n\t\t\tif(c[i]==1) A = true;\n\t\t\tif(c[i]==13) B = true;\n\t\t}\n\t\tif( A && B ){\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tif(c[i]==1) c[i]=14;\n\t\t\t}\n\t\t}\n\t\tsort(c, c+5);\n\t\tfor(int i=0;i<4;i++){\n\t\t\tif(c[i]+1 != c[i+1]) full = false;\n\t\t}\n\t\t\n\t\t// 判定\n\t\tif( mex == 4){\n\t\t\tcout<<\"four card\"<<endl;\n\t\t}else if( mex==3 && card.size()==2 ){\n\t\t\tcout<<\"full house\"<<endl;\n\t\t}else if( full ){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t}else if( mex==3){\n\t\t\tcout<<\"three card\"<<endl;\n\t\t}else if( card.size()==3 ){\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t}else if( mex==2 ){\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t}else{\n\t\t\tcout<<\"null\"<<endl;\n\t\t}\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n\nusing namespace std;\n\nint main(){\n  vector<int> c(5);\n  while(~scanf(\"%d\", &c[0])){\n    int p = 0; int tc = 0;\n    for(int i = 1; i < 5; i++) scanf(\",%d\", &c[i]);\n    sort(c.begin(), c.end());\n    for(int i = 0; i < 5; i++){\n      if(i != 0 && c[i] == c[i-1])p++;\n      if(i != 1 && c[i] == c[i-2])tc++;\n    }\n    if(p == 1) puts(\"one pair\");\n    else if(tc == 1 && p == 3)puts(\"full house\");\n    else if(tc && p == 2) puts(\"three card\");\n    else if(p == 2)  puts(\"two pair\"); \n    else if(p == 3) puts(\"four card\");\n    else if(c[4] - c[0] == 4 || (c[0] == 1 && c[1] == 10 && c[4] == 13)) puts(\"straight\");\n    else puts(\"null\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nint a[5];\nint main() {\n\twhile(~scanf(\"%d,%d,%d,%d,%d\", a[0], a[1], a[2], a[3], a[4])) {\n\t\tsort(a, a + 5);\n\t\tif((a[0] == a[1] || a[3] == a[4]) && a[1] == a[2] && a[2] == a[3]) printf(\"four card\\n\");\n\t\tif((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n\t\tif(a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && (a[3] + 1) % 13 == a[4] % 13) printf(\"straight\\n\");\n\t\tif(((a[0] == a[1] || a[2] == a[3]) && a[1] == a[2]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n\t\telse {\n\t\t\tint p = 0; for(int i = 1; i < 5; i++) if(a[i - 1] == a[i]) p++;\n\t\t\tif(p == 2) printf(\"two pair\\n\");\n\t\t\tif(p == 1) printf(\"one pair\\n\");\n\t\t\tif(p == 0) printf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint compare_int (const void* a,const void* b) {\n\n  return (*(int*)a-*(int*)b);\n\n}\n\nint main(void) {\n\n  int hand[5];\n  \n  int overlap[5];\n  int used[5];\n\n  int count;\n  int full_or_three=-1;\n  int two_or_one=-1;\n  int temp;\n  int i,j,k,l,m=0;\n\n  char c;\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4])!=EOF) {\n\n    //sort current hand\n    qsort(hand,sizeof(hand)/sizeof(hand[0]),sizeof(int),compare_int);\n\n    //for(i=0;i<5;i++) printf(\"%d \",hand[i]);\n  \n    //count overlapped cards\n    count=0;\n\n    for(i=0;i<5;i++) {\n\n      overlap[i]=0;\n      used[i]=0;\n    }\n\n    for(i=0;i<4;i++) {\n\n      if(used[i]==1) continue;\n    \n      for(j=i+1;j<5;j++) {\n\n\tif(used[j]==0 && hand[i]==hand[j]) {\n\n\t  overlap[count]++;\n\n\t  used[i]=used[j]=1;\n\n\t}\n\n      }\n\n      used[i]=1;\n\n      count++;\n\n    }\n\n    //for(i=0;i<5;i++) printf(\"%d \",overlap[i]);\n\n    //check overlapped cards\n  \n    //four card?\n    for(i=0;i<5;i++) {\n\n      if(overlap[i]==3) {\n\n\tprintf(\"four card\\n\");\n\n\tgoto Terminate;\n      \n      }\n\n    }\n\n    //full house or three card?\n    for(i=0;i<5;i++) {\n    \n      if(overlap[i]==2) {\n\n\tfor(j=0;j<5;j++) {\n\n\t  if(overlap[j]==1) {\n\n\t    printf(\"full house\\n\");\n\n\t    goto Terminate;\n\n\t  }\n\n\t}\n\n\tprintf(\"three card\\n\");\n\n\tgoto Terminate;\n\n      }\n\n    }\n\n    if(full_or_three==1) {\n\n      for(i=0;i<5;i++) {\n\n\tif(overlap[i]==1) {\n\n\t  printf(\"full house\\n\");\n\n\t  goto Terminate;\n\n\t}\n\n\telse {\n\n\t  printf(\"three card\\n\");\n\n\t  goto Terminate;\n\n\t}\n\n      }\n\n    }\n\n    //straight?\n    if(hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4] || (hand[0]==1 && hand[1]==10 && hand[2]==11 && hand[3]==12 && hand[4]==13)) {\n\n      printf(\"straight\\n\");\n\n      goto Terminate;\n\n    }\n\n    //two pair or one pair?\n    for(i=0;i<4;i++) {\n\n      if(overlap[i]==1) {\n\n\tfor(j=i+1;j<5;j++) {\n\n\t  if(overlap[j]==1) {\n\n\t    printf(\"two pair\\n\");\n\n\t    goto Terminate;\n\n\t  }\n\n\t}\n\n\tprintf(\"one pair\\n\");\n\n\tgoto Terminate;\n\n      }\n\n    }\n\n    //null\n    printf(\"null\\n\");\n\n  Terminate:\n    continue;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "# -*- coding: utf-8 -*-\n\n\ndef is_four_card(d):\n    return 4 in d.values()\n\n\ndef is_full_house(d):\n    return 3 in d.values() and 2 in d.values()\n\n\ndef is_straight(d):\n    flag = [False, 0]\n    for i in d.values():\n        if flag[0] == True and flag[1] == 5:\n            return True\n\n        if i == 1:\n            flag[0] = True\n            flag[1] += 1\n    return False\n\n\ndef is_three_card(d):\n    return 3 in d.values()\n\n\ndef is_two_pair(d):\n    return list(d.values()).count(2) == 2\n\n\ndef is_one_pair(d):\n    return list(d.values()).count(2) == 1\n\n\ndef judge(d):\n    if is_four_card(d):\n        print('four card')\n    elif is_full_house(d):\n        print('full house')\n    elif is_straight(d):\n        print('straight')\n    elif is_three_card(d):\n        print('three card')\n    elif is_two_pair(d):\n        print('two pair')\n    elif is_one_pair(d):\n        print('one pair')\n    else:\n        print('null')\n\n\ndef solve(cards):\n    d = {k: 0 for k in range(1, 14)}\n    for card in cards:\n        d[card] += 1\n    judge(d)\n\n_input = input().split(\",\")\nsolve(_input)"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <sstream>\n\n#define INPUT_FROM_FILE (0) \n#if INPUT_FROM_FILE\n#include <fstream>\n#endif\n\nint main(int argc, char **argv){\n\tstd::vector<int> cards(5);\n\n#if INPUT_FROM_FILE\n\t//std::ifstream ifs(\"test.txt\");\n\tFILE *fp = fopen(\"test.txt\", \"r\");\n#endif\n\n\n#if INPUT_FROM_FILE\n\twhile(fscanf(fp,\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF){\n#else\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF){\n#endif\n\t\tstd::sort(cards.begin(), cards.end());\n\n\t\t//4cards\n\t\tif((cards[0] == cards[1] && cards[1] == cards[2] && cards[2] == cards[3]) ||\n\t\t\t(cards[1] == cards[2] && cards[2] == cards[3] && cards[3] == cards[4])){\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\t}\n\t\t//full house\n\t\telse if((cards[0] == cards[1] && cards[2] == cards[3] && cards[3] == cards[4]) ||\n\t\t\t(cards[0] == cards[1] && cards[1] == cards[2] && cards[3] == cards[4])){\n\t\t\tstd::cout << \"full house\" << std::endl;\n\t\t}\n\t\telse if((cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13) ||\n\t\t\t(cards[0] == (cards[1] - 1) && cards[1] == (cards[2] - 1) && cards[2] == (cards[3] - 1) && cards[3] == (cards[4] - 1))){\n\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t}\n\t\telse if((cards[0] == cards[1] && cards[1] == cards[2]) ||\n\t\t\t(cards[1] == cards[2] && cards[2] == cards[3]) ||\n\t\t\t(cards[2] == cards[3] && cards[3] == cards[4])){\n\t\t\tstd::cout << \"three card\" << std::endl;\n\t\t}\n\t\telse{\n\t\t\tcards.erase(std::unique(cards.begin(), cards.end()), cards.end());\n\t\t\tif(cards.size() == 3){\n\t\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\t\t}\n\t\t\telse if(cards.size() == 4){\n\t\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstd::cout << \"null\" << std::endl;\n\t\t\t}\n\t\t\tcards.resize(5);\n\t\t}\n\t\t\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int a,b,c,d,e,k[14],max,max2,str,straight;\n  char s;\n  while(cin>>a>>s>>b>>s>>c>>s>>d>>s>>e){\n    for(int i=1;i<=13;i++)k[i]=0;\n    k[a]++;\n    k[b]++;\n    k[c]++;\n    k[d]++;\n    k[e]++;\n    max=0;\n    max2=0;\n    str=0;\n    straight=0;\n    for(int i=1;i<=13;i++){\n      if(max<=k[i]){//??°???\n\tmax2=max;\n\tmax=k[i];\n      }else if(max2<=k[i])max2=k[i];\n\n      if(k[i]==1){\n\tstr++;\n\tif(str==5)straight=1;\n      }else str=0;\n      \n    }\n    \n    if(max==4&&max2==1)cout<<\"four card\"<<endl;\n    else if(max==3&&max2==2)cout<<\"full house\"<<endl;\n    else if(straight==1)cout<<\"straight\"<<endl;\n    else if(k[10]==1&&k[11]==1&&k[12]==1&&k[13]==1&&k[1]==1)cout<<\"straght\"<<endl;\n    else if(max==3&&max2==1)cout<<\"three card\"<<endl;\n    else if(max==2&&max2==2)cout<<\"two pair\"<<endl;\n    else if(max==2&&max2==1)cout<<\"one pair\"<<endl;\n    else cout<<\"null\"<<endl;\n    \n\t\t\t\t\t\t\t\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6];\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;}\n}\n\nfor(int i=0;i<3;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint main(){\n  vector<int> c(5);\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4]) != EOF){\n    int ans = 0;\n    sort(c.begin(),c.end());\n    for(int i=0; i<5; i++){\n      if(i<2){\n\tif(c[i] == c[i+1] && c[i+1] == c[i+2] && c[i+2] == c[i+3]){\n\t  ans+=6;\n\t  i+=3;\n\t}\n      }\n      if(i<3){\n\tif(c[i] == c[i+1] && c[i+1] == c[i+2]){\n\t  ans+=3;\n\t  i+=2;\n\t}\n      }\n      if(i<4){\n\tif(c[i] == c[i+1]){\n\t  ans+=2;\n\t  i++;\n\t}\n      }\n    }\n    if(ans == 6) cout <<\"four card\"<<endl;\n    else if(ans == 5) cout <<\"full house\"<<endl;\n    else if(ans == 4) cout <<\"two pair\"<<endl;\n    else if(ans == 3) cout <<\"three card\"<<endl;\n    else if(ans == 2) cout <<\"one pair\"<<endl;\n    else if(c[0]+1 == c[1] && c[1]+1 == c[2] && c[2]+1 == c[3] && c[3]+1 == c[4]) cout <<\"straight\"<<endl;\n    else if(c[0] == 1 && c[1] == 2 && c[2] == 11 && c[3] == 12 && c[4] == 13) cout <<\"straight\"<<endl;\n    else cout <<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main(){\nint c[6],s[6],ans=0;\nstring a[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full \n\nhouse\",\"four card\"};\nwhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\nans=0;\nfor(int i=0;i<5;i++)s[i]=100;\ns[0]=c[0];\nfor(int i=1;i<5;i++){\nfor(int j=i-1;j>-1;j--){\nif(s[j]<=c[i]){\nfor(int k=i;k>j+1;k--)s[k]=s[k-1];\ns[j+1]=c[i];\nbreak;}}\nif(s[0]>c[i]){\nfor(int k=i;k>0;k--)s[k]=s[k-1];\ns[0]=c[i];}}\nif(s[0]==s[1]||s[1]==s[2]||s[3]==s[4]||s[2]==s[3])ans=1;\nif((s[0]==s[1]||s[1]==s[2])&&(s[2]==s[3]||s[3]==s[4]))ans=2;\nif(s[0]==s[2]||s[1]==s[3]||s[2]==s[4])ans=3;\nif(s[2]+1==s[3]&&s[1]+1==s[2]&&s[3]+1==s[4]&&(s[0]+1==s[1]||(s[0]==1&&s\n\n[4]==13)))ans=4;\nif((s[0]==s[2]&&s[3]==s[4])||(s[0]==s[1]&&s[2]==s[4]))ans=5;\nif(s[0]==s[3]||s[1]==s[4])ans=6;\n\nfor(int i=0;i<7;i++){if(ans==i)cout<<a[i]<<endl;}\n\n}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i = 0; i < n; i++)\n\nbool is_onepair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == 1){\n\t\treturn true;\n\t}\n\t\n}\n\nbool is_twopair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 2){\n\t\t\treturn true;\n\t\t}\n}\n\nbool is_threecard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 3) return true;\n\t}\n}\n\nbool is_straight(int numbers[], map<int,int> freq, int count){\n\n\tif(numbers[0] == 11 || numbers[0] == 12 || numbers[0] == 13) return false;\n\n\tif(((numbers[0]+1 == numbers[1]) || (numbers[0]+9 == numbers[1])) && numbers[1] + 1 == numbers[2] && numbers[2] + 1 == numbers[3] && numbers[3] + 1 == numbers[4] ) return true;\n\treturn false;\n}\n\nbool is_fullhouse(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\tint cnt1 = 0, cnt2 = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcnt1++;\n\t\t}\n\t\tif(freq[i] == 3){\n\t\t\tcnt2++;\n\t\t}\n\t}\n\t\tif(cnt1 == 1 && cnt2 == 1){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n}\n\nbool is_fourcard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 4){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 1){\n\t\t\treturn true;\n\t\t}\n\t\t return false;\n}\n\nint main(){\n\tint numbers[5];\n\tmap<int,int> freq;\n\tint count = 0;\n\n\t\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&numbers[0],&numbers[1],&numbers[2],&numbers[3],&numbers[4])){\n\n\t\tsort(numbers,numbers+5);\n\n\t\tif(is_fullhouse(numbers, freq, count)) cout << \"full house\" << endl;\n\t\telse if(is_onepair(numbers, freq, count)) cout << \"one pair\" << endl;\n\t\telse if(is_twopair(numbers, freq, count)) cout << \"two pair\" << endl;\t\t\n\t\telse if(is_threecard(numbers, freq, count)) cout << \"three card\" << endl;\n\t\telse if(is_straight(numbers, freq, count)) cout << \"straight\" << endl;\n\n\t\telse if(is_fourcard(numbers, freq, count)) cout << \"four card\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cctype>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define INF (2 << 28)\n#define fr first\n#define sc second\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> iP;\n\nbool isStraight(int a[]) {\n  \n  bool t[14];\n  memset(t, false, sizeof(t));\n  for(int i = 0; i < 5; i++) \n    t[a[i] - 1] = true;\n\n  for(int i = 0; i <= 9; i++) {\n    bool judge = true;\n    for(int j = 0; j < 5; j++) {\n      if(!t[(i + j) % 13]) judge = false;\n    }\n    if(judge) return true;\n  }\n  return false;\n}\n\nint main(){\n  \n  int a[5];\n  while(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])) {\n    vector< int > S, sum(14, 0);\n    for(int i = 0; i < 5; i++)\n      sum[a[i]]++;\n          \n    int maxi = 0, mini = INF;\n    for(int i = 1; i <= 13; i++) {\n      if(sum[i]) {\n        S.push_back(sum[i]);\n        mini = min(mini, sum[i]);\n        maxi = max(maxi, sum[i]);\n      }\n    }\n\n    if(maxi >= 4) cout << \"four card\" << endl;\n    else if(maxi == 3 && mini == 2) cout << \"full house\" << endl;\n    else if(isStraight(a)) cout << \"straight\" << endl;\n    else if(maxi == 3) cout << \"three card\" << endl;\n    else if(maxi == 2 && mini == 1 && S.size() == 3) cout << \"two pair\" << endl;\n    else if(maxi == 2) cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<string.h>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\nint strtoint(char *s){\n\tint n=0;\n\twhile(*s!='\\0'){\n\t\tn += n*10 + *s - '0';\n\t\ts++;\n\t}\n\treturn n;\n}\n\nvoid toint(char *s, int cards[5]){\n\n\tchar *tp;\n\n\ttp = strtok(s,\",\");\n\tcards[0] = strtoint(tp);\n\n\tfor(int i=1;i<5;++i){\n\t\ttp = strtok(NULL,\",\");\n\t\tcards[i] = strtoint(tp);\n\n\t}\n\n\n\n\n\n}\n\nint main(){\n\n\tchar s[32];\n\tstring res;\n\tint card[5];\t\n\n\tcin >> s;\n\n\ttoint(s,card);\n\n\tswitch( Result(card) ){\n\t\tcase 1:res=\"null\";break;\n\t\tcase 2:res=\"one pair\";break;\n\t\tcase 3:res=\"two pair\";break;\n\t\tcase 4:res=\"three card\";break;\n\t\tcase 5:res=\"straight\";break;\n\t\tcase 6:res=\"full house\";break;\n\t\tcase 7:res=\"four card\";break;\n\t}\n\n\tcout << res;\n\n\t\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string>\n\nusing namespace std;\n\nint main() {\n        const int N = 5;\n        const string yaku[] = {\n                \"null\",\n                \"one pair\",\n                \"two pair\",\n                \"three card\",\n                \"straight\",\n                \"full house\",\n                \"four card\"\n        };\n\n        while (true) {\n                int tehuda[N];\n                int ans;\n                int input = scanf(\"%d,%d,%d,%d,%d\",\n                        &tehuda[0], &tehuda[1], &tehuda[2], &tehuda[3], &tehuda[                                                      4]);\n                if (input == EOF) {\n                        break;\n                }\n                for (int i = 0; i < N; i++) {\n                        for (int j = N - 1; j > i; j--) {\n                                if (tehuda[j - 1] > tehuda[j]) {\n                                        int tmp = tehuda[j - 1];\n                                        tehuda[j - 1] = tehuda[j];\n                                        tehuda[j] = tmp;\n                                }\n                        }\n                }\n\n                if ((tehuda[0] == tehuda[1] && tehuda[1] == tehuda[2] &&\n                                        tehuda[2] == tehuda[3]) ||\n                                (tehuda[1] == tehuda[2] && tehuda[2] == tehuda[3                                                      ] &&\n                                 tehuda[3] == tehuda[4])) {\n                        ans = 6;\n                } else if ((tehuda[0] == tehuda[1] && tehuda[1] == tehuda[2] &&\n                                        tehuda[3] == tehuda[4]) ||\n                                (tehuda[0] == tehuda[1] && tehuda[2] == tehuda[3                                                      ] &&\n                                 tehuda[3] == tehuda[4])) {\n                        ans = 5;\n                } else if ((tehuda[0] == tehuda[1] && tehuda[1] == tehuda[2]) ||\n                                (tehuda[1] == tehuda[2] && tehuda[2] == tehuda[3                                                      ]) ||\n                                (tehuda[2] == tehuda[3] && tehuda[3] == tehuda[4                                                      ])) {\n                        ans = 3;\n                } else if ((tehuda[0] == tehuda[1] && (tehuda[2] == tehuda[3] ||\n                                                tehuda[3] == tehuda[4])) ||\n                                (tehuda[1] == tehuda[2] && tehuda[3] == tehuda[4                                                      ])) {\n                        ans = 2;\n                } else if ((tehuda[0] == tehuda[1]) || (tehuda[1] == tehuda[2])                                                       ||\n                                (tehuda[2] == tehuda[3]) || (tehuda[3] == tehuda                                                      [4])) {\n                        ans = 1;\n                } else if ((tehuda[0] + tehuda[4] == tehuda[2] * 2 &&\n                                        tehuda[2] * 2 == tehuda[1] + tehuda[3])                                                       ||\n                                (tehuda[0] == 1 && tehuda[1] == 10 && tehuda[2]                                                       == 11 &&\n                                 tehuda[3] == 12 && tehuda[4] == 13)) {\n                        ans = 4;\n                } else {\n                        ans = 0;\n                }\n                printf(\"%s\\n\", yaku[ans].c_str());\n        }\n\n        return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n \n    int a[5];\n    int kari;\n    char d;\n     \n    while (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n        for (int i = 4; i > 0; i--) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] > a[j+1]) {\n                    kari = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = kari;\n                }\n            }\n        }\n        if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n            if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n                if (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n                    cout << \"full house\" << endl;\n                } else if ((a[0] == a[1] && a[1] == a[2] && a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n                    cout << \"four card\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n            } else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n                    cout << \"four card\" << endl;\n                } else {\n                    cout << \"two pair\" << endl;\n                }\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n            cout << \"straight\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\n#define same2(a,b) (c[a]==c[b])\n#define same3(a,b,c) (same2(a,b)&&same2(b,c))\n#define same4(a,b,c,d) (same3(a,b,c)&&same2(c,d))\nint c[5];\nbool four_card(){\nif(same4(0,1,2,3)||same4(1,2,3,4)){\nreturn 1;\n}\nreturn 0;\n}\nbool full_house(){\nif((same3(0,1,2)&&same2(3,4)) || (same2(0,1)&&same3(2,3,4))){\nreturn 1;\n}else{\nreturn 0;\n}\n}\nbool straight(){\nbool res=1;\nfor(int i=0;i<4;i++){\nif((c[i]+1)!=c[i+1])res=0;\n}\nif((res==0) && (c[0]==1) && (c[1]==10)){\nres=1;\nfor(int i=1;i<4;i++){\nif((c[i]+1)!=c[i+1])res=0;\n}\n}\nreturn res;\n}\nbool three_card(){\nif(same3(0,1,2)||same3(1,2,3)||same3(2,3,4)){\nreturn 1;\n}else{\nreturn 0;\n}\n}\nbool two_pair(){\nint p=0;\nfor(int i=0;i<4;i++){\nif(same2(i,i+1)){\np++;\n}\n}\nif(p==2){\nreturn 1;\n}else{\nreturn 0;\n}\n}\nbool one_pair(){\nif(same2(0,1)||same2(1,2)||same2(2,3)||same2(3,4)){\nreturn 1;\n}else{\nreturn 0;\n}\n}\nint main(){\nwhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\nsort(c,c+5);\nif(four_card()){\ncout<<\"four card\"<<endl;\n}else if(full_house()){\ncout<<\"full house\"<<endl;\n}else if(straight()){\ncout<<\"straight\"<<endl;\n}else if(three_card()){\ncout<<\"three card\"<<endl;\n}else if(two_pair()){\ncout<<\"two pair\"<<endl;\n}else if(one_pair()){\ncout<<\"one pair\"<<endl;\n}else{\ncout<<\"null\"<<endl;\n}\n}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\n#include <vector>\n#include <cstdlib>\n#include <algorithm>\n\nusing namespace std;\n\n\nvector<string> split(const string &str, char delim){\n  vector<string> res;\n  size_t current = 0, found;\n  while((found = str.find_first_of(delim, current)) != string::npos){\n    res.push_back(string(str, current, found - current));\n    current = found + 1;\n  }\n  res.push_back(string(str, current, str.size() - current));\n  return res;\n}\n\nint main()\n{\n\tstring s;\n\twhile(cin >> s)\n\t{\n\t\tvector<string> _s = split(s,',');\n\t\tvector<int> a,b;\n\t\tmap<int,int> counter;\n\t\tfor(int i=0;i<_s.size();i++)\n\t\t{\n\t\t\ta.push_back(atoi(_s[i].c_str()));\n\t\t}\n\t\tsort(a.begin(),a.end());\n\n\t\tfor(int i=0;i<a.size();i++)\n\t\t{\n\t\t\tcounter[a[i]]++;\n\n\t\t\tif(b.empty())\n\t\t\t{\n\t\t\t\tb.push_back(a[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool flag = true;\n\t\t\t\tfor(int j=0;j<b.size();j++)\n\t\t\t\t{\n\t\t\t\t\tif(b[j] == a[i])\tflag = false;\n\t\t\t\t}\n\t\t\t\tif(flag) b.push_back(a[i]);\n\t\t\t}\n\t\t}\n\n\t\t//cout << b.size() << endl\n\t\tbool ans_f = true;\n\t\tfor(int i=0; i<counter.size();i++)\n\t\t{\n\t\t\tif(counter[b[i]] == 4) cout << \"four card\" << endl;\n\t\t}\n\n\t\tfor(int i=0;i<counter.size();i++)\n\t\t{\n\t\t\tif(counter[b[i]] == 3)\n\t\t\t{\n\t\t\t\tfor(int j=0; j<counter.size();j++)\n\t\t\t\t{\n\t\t\t\t\tif(counter[b[j]] == 2) \n\t\t\t\t\t{\n\t\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\t\tans_f = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t\t\tans_f = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(int i=0;i<counter.size();i++)\n\t\t{\n\t\t\tif(counter[b[i]] == 2 && ans_f)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<counter.size();j++)\n\t\t\t\t{\n\t\t\t\t\tif(i != j && counter[b[j]] == 2 && ans_f)\n\t\t\t\t\t{\n\t\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\t\tans_f = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(ans_f) \n\t\t\t\t{\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(counter.size() == 5)\n\t\t{\n\t\t\tint temp = b[0];\n\t\t\tif(b[1] == temp+1 && b[2] == temp+2 && b[3] == temp+3 && b[4] == temp+4)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse if(temp == 1 && b[1] == 10 && b[2] == 11 && b[3] == 12 && b[4] == 13)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint a[5],i,pair;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n\t\tpair = 0;\n\t\tsort(a,a + 5);\n\t\tif(a[1] == a[2] && a[2] == a[3] && (a[0] == a[1] || a[3] == a[4])) printf(\"four card\\n\");\n\t\telse if((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n\t\telse if((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n\t\telse if((a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)) printf(\"straight\\n\");\n\t\telse {\n\t\t\tfor(i = 0;i < 3;i++){\n\t\t\t\tif(a[i] == a[i + 1]) pair++;\n\t\t\t}\n\t\t\tif(pair == 2) printf(\"two pair\\n\");\n\t\t\telse if(pair == 1) printf(\"one pair\\n\");\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint str(int a[5], int n){\n\tint tmp = a[n], i;\n\tfor(i = 0;i < 4 && ++tmp == a[++n];i++){if(tmp == 13 && i == 2)tmp = 0;}\n\t//cout << endl;\n\tif(i == 4)return 1;\n\telse return 0;\n}\n\nint main(){\n\tstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\",\"null\"};\n\tint a[5], t[13], ans;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1;\n\t\tsort(a, a+5);\n\t\tfor(int i = 0;i < 13;i++)t[i] = count(a, a+5,i+1);\n\t\t\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 3)ans = 2;\n\t\t\tif(ans == 0 && t[i] == 2)ans = 1;\n\t\t\tif(ans == -1 && t[i] == 2)ans = 0;\n\t\t}\n\t\t//for(int i = 0;i < 5;i++)cout << a[i] << \" \";\n\t\tif(str(a, 0) || str(a, 1))ans = 3;\n\t\tint th = 0, tw = 0, fo = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 2)tw = 1;\n\t\t\tif(t[i] == 3)th = 1;\n\t\t\tif(t[i] == 4)fo = 1;\n\t\t}\n\t\tif(tw && th)ans = 4;\n\t\tif(fo)ans = 5;\n\t\tif(ans == -1)ans = 6;\n\t\t//for(int i = 0;i < 5;i++)printf(\"%d \", a[i]);\n\t\t//for(int i = 0;i < 13;i++)cout << t[i] << \" \";\n\t\t//cout << \"fo\" << fo;\n\t\t//cout << endl;\n\t\t//cout << ans;\n\t\tcout << s[ans] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <functional>\n#include <algorithm>\n\nusing namespace std;\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int d[ 5 ];\n  int i;\n\n  while ( scanf ( \" %d,%d,%d,%d,%d\"\n                , d, d + 1, d + 2, d + 3, d + 4 ) == 5 )\n  {\n    int c[ 13 ] = { 0 };\n\n    sort ( d, d + 5 );\n    for ( i = 0; i < 5; ++i )\n    {\n      ++c[ d[ i ] - 1 ];\n    }\n    sort ( c, c + 13, greater< int > ( ) );\n\n    if ( c[ 0 ] == 4 )\n    {\n      puts ( \"four card\" );\n    }\n    else if ( c[ 0 ] == 3 && c[ 1 ] == 2 )\n    {\n      puts ( \"full house\" );\n    }\n    else if ( ( d[ 0 ] == d[ 1 ] - 1\n             && d[ 0 ] == d[ 2 ] - 2\n             && d[ 0 ] == d[ 3 ] - 3\n             && d[ 0 ] == d[ 4 ] - 4 )\n           || ( d[ 0 ] == 1\n             && d[ 1 ] == 10\n             && d[ 2 ] == 11\n             && d[ 3 ] == 12\n             && d[ 4 ] == 13 ) )\n    {\n      puts ( \"straight\" );\n    }\n    else if ( c[ 0 ] == 3 )\n    {\n      puts ( \"three card\" );\n    }\n    else if ( c[ 0 ] == 2 && c[ 1 ] == 2 )\n    {\n      puts ( \"two pair\" );\n    }\n    else if ( c[ 0 ] == 2 )\n    {\n      puts ( \"one pair\" );\n    }\n    else\n    {\n      puts ( \"null\" );\n    }\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cstring>\n#include <map>\n#include <queue>\n#include <stack>\n#include <set>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <climits>\nusing namespace std;\n\n#define REP(i,a,n) for(int i=(a);i<(int)(n);i++)\n#define rep(i,n) REP(i,0,n)\n#define pb push_back\n#define mp make_pair\n#define all(x) x.begin(),x.end()\n#define EPS 1e-8\n\n/*\none : 18\ntwo : 21\nthree : 33\nfull house : 36\nfour card : 84\n\n*/\nint d[5];\nint card[15];\n\nbool isstraight(){\n\tfor(int i=1; i<=10; i++){\n\t\tif( card[i]==3 && card[i+1]==3 && card[i+2]==3 &&\n\t\t\t\tcard[i+3]==3 && card[i+4]==3 ) return true;\n\t}\n\treturn false;\n}\nint main(){\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",d,d+1,d+2,d+3,d+4)){\n\t\trep(i,15)card[i]=1;\n\t\trep(i,5){\n\t\t\tif( d[i]==1 ) card[14]*=3;\n\t\t\tcard[d[i]]*=3;\n\t\t}\n\t\tint sum = 0;\n\t\trep(i,14)if( card[i]>1 )sum+=card[i];\n\t\t\n\t\tif( isstraight() ){\n\t\t\tputs(\"straight\");\n\t\t}else if( sum==18 ){ //one\n\t\t\tputs(\"one pair\");\n\t\t}else if( sum==21 ){ //two\n\t\t\tputs(\"two pair\");\n\t\t}else if( sum==33 ){ \n\t\t\tputs(\"three card\");\n\t\t}else if( sum==36 ){\n\t\t\tputs(\"full house\");\n\t\t}else if( sum==84 ){\n\t\t\tputs(\"four card\");\n\t\t}else{\n\t\t\tputs(\"null\");\n\t\t}\n\t\t\n\t\t//rep(i,14)printf(\"%d \",card[i]); printf(\"sum:%d\\n\",sum);\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<stdio.h>\n\nint main()\n{\n\tint card[5];\n\t\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF ){\n\t \t\n\t\tint a[20];\n\t\tstd::fill( a, a + 20, 0 );\n\t\tint c = 0;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ) a[card[i]]++;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t c = std::max( c, std::count( card, card + 5, card[i] ) );\n\t\t}\n\t\t\n\t\tbool f = false;\n\t\tint m;\n\t\t\n\t\tswitch( c ){\n\t\t\tcase 4:\n\t\t \t\tputs( \"four card\" );\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t \t\tif( std::count( card, card + 5, card[i] ) == 2 ){\n\t\t\t\t\t\tf = true; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"full house\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t \tputs( \"three card\" );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t\t\tif( std::count( card, card + 5, card[i] ) == 2 && !f ){\n\t\t\t\t\t \tm = card[i];\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] != m && std::count( card, card + 5, card[i] ) == 2 && f ){\n\t\t\t\t\t\tputs( \"two pair\" );\n\t\t\t\t\t\tgoto end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tputs( \"one pair\" );\n\t\t\t\tbreak;\n\t\t\tcase 1:\t\n\t\t\t\tfor( int i = 1; i <= 10; i++ ){\n\t\t\t\t\tif( a[i] == 1 && a[i+1] == 1 && a[i+2] == 1 && a[i+3] == 1 && a[(i+4)%13] == 1 ) f = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"straight\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tputs( \"null\" );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\tend:\n\t}\n\n \treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n#include <queue>\n#include <cstring>\n#include <functional>\n\nusing namespace std;\n\n#define REP(i,a,b) for((i)=(a);(i)<(int)(b);(i)++)\n#define rep(i,n) REP(i,0,n)\n// BEGIN CUT HERE\n#define foreach(itr,c) for(typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\ntemplate<class T> inline string toString(T x){ostringstream sout;sout<<x;return sout.str();}\n// END CUT HERE\n\nint main(){\n  int i,j,k,n;\n  int res[7],tmp,maxi,f;\n  vector<int> in(5);\n  set<int> s;\n  string data[7] = {\"four card\",\"full house\",\"straight\",\"three card\",\"two pair\",\"one pair\",\"null\"};\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&in[0],&in[1],&in[2],&in[3],&in[4],&in[5]) != EOF){\n    rep(i,7) res[i] = 0;\n    s.clear();\n    rep(i,5) s.insert(in[i]);\n    f = 1;\n    sort(in.begin(),in.end());\n\n    maxi = 0;\n    rep(i,5){\n      tmp = 0;\n      rep(j,5) if(in[i] == in[j]) tmp++;\n      if(maxi < tmp) maxi = tmp;\n    }\n\n    if((int)s.size() == 2){\n      if(maxi == 4) res[0] = 1;\n      if(maxi == 3) res[1] = 1;\n    }\n    if((int)s.size() == 3){\n      if(maxi == 3) res[3] = 1;\n      if(maxi == 2) res[4] = 1;\n    }\n    if((int)s.size() == 4) res[5] = 1;\n\n    REP(i,1,5) if(in[i-1] + 1 != in[i]) f = 0;\n    if(f && (int)s.size() == 5) res[2] = 1;\n    f = 1;\n    if(in[0] = 1 && in[1] == 10 && in[2] == 11 && in[3] == 12 && in[4] == 13) res[2] = 1;\n\n    res[6] = 1;\n\n    rep(i,7) if(res[i]){\n      cout << data[i] << endl;\n      break;\n    }\n  }\n\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "afga \n"
  },
  {
    "language": "C++",
    "code": "// 2011/07/12 Tazoe\n\n#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main()\n{\n\twhile(true){\n\t\tstring str;\n\t\tcin >> str;\n\t\tif(cin.eof())\n\t\t\tbreak;\n\n\t\tfor(int i=0; i<str.size(); i++)\n\t\t\tif(str[i]==',')\n\t\t\t\tstr[i] = ' ';\n\n\t\tistringstream ist(str);\n\t\tint num[5];\n\t\tfor(int i=0; i<5; i++)\n\t\t\tist >> num[i];\n\n\t\tfor(int i=0; i<4; i++)\n\t\t\tfor(int j=i+1; j<5; j++)\n\t\t\t\tif(num[i]>num[j]){\n\t\t\t\t\tint tmp = num[i];\n\t\t\t\t\tnum[i] = num[j];\n\t\t\t\t\tnum[j] = tmp;\n\t\t\t\t}\n\n\t\tif(num[0]==num[1]&&num[1]==num[2]&&num[2]==num[3])\n\t\t\tcout << \"four card\" << endl;\n\t\telse if(num[1]==num[2]&&num[2]==num[3]&&num[3]==num[4])\n\t\t\tcout << \"four card\" << endl;\n\t\telse if(num[0]==num[1]&&num[1]==num[2]&&num[3]==num[4])\n\t\t\tcout << \"full house\" << endl;\n\t\telse if(num[0]==num[1]&&num[2]==num[3]&&num[3]==num[4])\n\t\t\tcout << \"full house\" << endl;\n\t\telse if(num[0]+1==num[1]&&num[1]+1==num[2]&&num[2]+1==num[3]&&num[3]+1==num[4])\n\t\t\tcout << \"straight\" << endl;\n\t\telse if(num[0]==1&&num[1]==10&&num[2]==11&&num[3]==12&&num[4]==13)\n\t\t\tcout << \"straight\" << endl;\n\t\telse if(num[0]==num[1]&&num[1]==num[2])\n\t\t\tcout << \"three card\" << endl;\n\t\telse if(num[1]==num[2]&&num[2]==num[3])\n\t\t\tcout << \"three card\" << endl;\n\t\telse if(num[2]==num[3]&&num[3]==num[4])\n\t\t\tcout << \"three card\" << endl;\n\t\telse if(num[0]==num[1]&&num[2]==num[3])\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if(num[0]==num[1]&&num[3]==num[4])\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if(num[1]==num[2]&&num[3]==num[4])\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if(num[0]==num[1])\n\t\t\tcout << \"one pair\" << endl;\n\t\telse if(num[1]==num[2])\n\t\t\tcout << \"one pair\" << endl;\n\t\telse if(num[2]==num[3])\n\t\t\tcout << \"one pair\" << endl;\n\t\telse if(num[3]==num[4])\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tint hand[5];\n\tint i, j;\n\t\n\twhile (scanf(\"%d\", hand) != EOF){\n\t\tint straight = 1;\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\t\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%*c%d\", hand + i);\n\t\t}\n\t\tsort(hand, hand + 5);\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (hand[i] == hand[i + 1]){\n\t\t\t\tpair++;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 3; i++){\n\t\t\tif (hand[i] == hand[i + 1] && hand[i] == hand[i + 2]){\n\t\t\t\tthree = 1;\n\t\t\t\tpair -= 2;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 2; i++){\n\t\t\tif (hand[i] == hand[i + 1] && hand[i] == hand[i + 2] && hand[i] == hand[i + 3]){\n\t\t\t\tfour = 1;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (hand[i] != hand[i + 1] - 1){\n\t\t\t\tstraight = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13 && hand[0] == 1){\n\t\t\tstraight = 1;\n\t\t}\n\t\tif (straight == 1){\n\t\t\tputs(\"straight\");\n\t\t}\n\t\telse if (four == 1){\n\t\t\tputs(\"four card\");\n\t\t}\n\t\telse if (pair > 0 && three == 1){\n\t\t\tputs(\"full house\");\n\t\t}\n\t\telse if (three == 1){\n\t\t\tputs(\"three card\");\n\t\t}\n\t\telse if (pair == 2){\n\t\t\tputs(\"two pair\");\n\t\t}\n\t\telse if (pair == 1){\n\t\t\tputs(\"one pair\");\n\t\t}\n\t\telse {\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n//#define int long long\n#define DBG 1\n#define dump(o) if(DBG){cerr<<#o<<\" \"<<o<<endl;}\n#define dumpc(o) if(DBG){cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define each(it,c) for(auto it=(c).begin();it!=(c).end();it++)\n#define all(c) c.begin(),c.end()\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9 + 7);\n\nsigned main() {\n\tchar c; vector<int>v(5);\n\twhile (cin >> v[0] >> c >> v[1] >> c >> v[2] >> c >> v[3] >> c >> v[4]) {\n\t\tvector<int>trump(15, 0); int m(0); int p = 1;\n\t\trep(i, 0, 5) {\n\t\t\ttrump[v[i]]++;\n\t\t\tif (v[i] == 1)trump[14]++;\n\t\t\tm = max(m, trump[v[i]]);\n\t\t}\n\t\tif (m == 4)p = max(p, 7);\n\t\tif (m == 3) {\n\t\t\trep(i, 1, 14) {\n\t\t\t\tif (trump[i] == 2) {\n\t\t\t\t\tp = max(p, 6);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tp = max(p, 4);\n\t\t}\n\t\trep(i, 1, 11) {\n\t\t\tbool f(true);\n\t\t\trep(j, i, i + 5) {\n\t\t\t\tif (trump[j] != 1)f = false;\n\t\t\t}\n\t\t\tif (f)p = max(p, 5);\n\t\t}\n\t\tif (m == 2) {\n\t\t\tint cnt(0);\n\t\t\trep(i, 1, 14) {\n\t\t\t\tif (trump[i] == 2) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cnt == 2)p = max(p, 3);\n\t\t\telse p = max(p, 2);\n\t\t}\n\n\t\tswitch (p) {\n\t\tcase 1:cout << \"null\" << endl; break;\n\t\tcase 2:cout << \"one pair\" << endl; break;\n\t\tcase 3:cout << \"two pair\" << endl; break;\n\t\tcase 4:cout << \"three card\" << endl; break;\n\t\tcase 5:cout << \"straight\" << endl; break;\n\t\tcase 6:cout << \"full house\" << endl; break;\n\t\tcase 7:cout << \"four card\" << endl; break;\n\t\t}\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\ntypedef long long LL;\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nusing namespace std;\nint main(void)\n{\n  for(;;){\n    int n[5];\n    char c;\n    REP(i,5){\n      if(i) cin >> c;\n      n[i]=0;\n      cin >> n[i];\n      if(n[i] == 0) return 0;\n    }\n    int num[16];\n    REP(i,16) num[i]=0;\n    REP(i,5) ++num[n[i]];\n    num[14]=num[1];\n    string s=\"null\";\n    REP(i,11){\n      int st=0;\n      REP(j,5) if(num[i+j]) ++st;\n      if(st==5) s=\"straight\";\n    }\n    int pa=0;\n    REP(i,5) REP(j,i) if(n[i]==n[j]) ++pa;\n    if(pa==1) s=\"one pair\";\n    if(pa==2) s=\"two pair\";\n    if(pa==3) s=\"three card\";\n    if(pa==4) s=\"full house\";\n    if(pa==6) s=\"four card\";\n    cout << s << endl;\n\n\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main(void) {\n    int a[5];\n    char c;\n    while (cin >> a[0] >> c >> a[1] >> c >> a[2] >> c >> a[3] >> c >> a[4]) {\n        int b[14] = {};\n        for (int i = 0; i < 5; ++i) ++b[a[i]];\n        sort(a, a+5);\n        sort(b, b+14, greater<int>());\n\n\n        if (b[0] == 4 || b[0] == 5)\n            cout << \"four card\" << endl;\n        else if (b[0] == 3 && b[1] == 2)\n            cout << \"full house\" << endl;\n        else if (((a[0]+1 == a[1]) && (a[1]+1==a[2]) && (a[2]+1==a[3]) && (a[3]+1==a[4])) ||\n                 (a[0] == 1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13))\n            cout << \"straight\" << endl;\n        else if (b[0] == 3)\n            cout << \"three card\" << endl;\n        else if (b[0] == 2 && b[1] == 2)\n            cout << \"two pair\" << endl;\n        else if (b[0] == 2 )\n            cout << \"one pair\" << endl;\n        else\n            cout << \"null\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint main(){\n\tint n[5], num[14], pair[3],i;\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4]) != EOF){\n\t\ti = 0;\n\t\tfor (int i = 0; i < 14; i++) num[i] = 0;\n\t\tfor (int i = 0; i < 3; i++) pair[i] = 0;\n\t\tfor (int i = 0; i < 5; i++) num[n[i] - 1]++;\n\t\tfor (int i = 0; i < 13; i++){\n\t\t\tif (num[i] > 1) pair[num[i] - 2]++;\n\t\t}\n\t\tif (pair[2]) cout << \"four card\" << endl;\n\t\telse if (pair[0] && pair[1]) cout << \"full house\" << endl;\n\t\telse if (pair[1]) cout << \"three card\" << endl;\n\t\telse if (pair[0] == 2) cout << \"two pair\" << endl;\n\t\telse if (pair[0]) cout << \"one pair\" << endl;\n\t\telse{\n\t\t\tnum[13] = num[0];\n\t\t\tfor (i = 0; i < 10; i++){\n\t\t\t\tif (num[i] == 1 && num[i] == num[i + 1] && num[i + 1] == num[i + 2] && num[i + 2] == num[i + 3] && num[i + 3] == num[i + 4]) {\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (i == 10)  cout << \"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main(){\nchar a[][11]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\nlong i,h,f,hh[14];\nchar c;\nwhile(cin>>h){\nfor(i=0;i<13;i++)hh[i]=0;\nhh[h-1]++;\nfor(i=1;i<5;i++){cin>>c>>h;hh[h-1]++;}\nf=0;\nfor(i=0;i<13;i++)cout<<hh[i];\ncout<<endl;\nfor(i=0;i<13;i++){\nif(hh[i]==4){\nf=6;\n}else if(hh[i]==3){\nif(f==1)f=5;else f=3;\n}else if(hh[i]==2){\nif(f==3)f=5;\nelse if(f==1)f=2;\nelse f=1;\n}\n}\nif(f==0){\n  for(i=0;i<13;i++)if(hh[i]==1)break;\n  if(i<9){\n  if(hh[i+1]==1)\n  if(hh[i+2]==1)\n  if(hh[i+3]==1)\n  if(hh[i+4]==1)f=4;\n  }\n  if(i==0){\n  if(hh[i+9]==1)\n  if(hh[i+10]==1)\n  if(hh[i+11]==1)\n  if(hh[i+12]==1)f=4;\n  }\n}\ncout<<a[f]<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[5];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tscanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\telse if(check[i] == 3) three++;\n\t\t\t\telse if(check[i] >= 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(three == 1) printf(\"full house\\n\");\n\t\t\telse if(pair == 2) printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three >= 1)\n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse if(three == 2) printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four >= 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n    int a[5];\n    char c;\n    while(cin>>a[0]>>c>>a[1]>>c>>a[2]>>c>>a[3]>>c>>a[4]){\n        sort(a,a+5);\n        int c[5],j=0;\n        memset(c,0,sizeof(c));\n        for(int i=0;i<4;i++){\n            if(a[i+1]!=a[i])\n                j++;\n            if(a[i+1]==a[i]){\n                c[j]++;\n            }\n        }\n        int p=0,t=0,f=0;\n        for(int i=0;i<5;i++){\n            if(c[i]==1)p++;\n            if(c[i]==2)t++;\n            if(c[i]==3)f++;\n        }\n        if(p==2){\n            cout<<\"two pair\"<<endl;\n        }\n        else if(p==1&&t==1)\n            cout<<\"full house\"<<endl;\n        else if(t==1)\n            cout<<\"three card\"<<endl;\n        else if(f==1)\n            cout<<\"four card\"<<endl;\n        else if(p==1){\n            cout<<\"one pair\"<<endl;\n        }\n        else if((a[3]==a[4]-1)&&(a[1]==a[2]-1)&&(a[2]==a[3]-1)&&((a[0]==a[1]-1)||(a[4]==13&&a[0]==1)))\n            cout<<\"straight\"<<endl;\n        else cout<<\"null\"<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int c[5] = {0},same[5] = {0};\n\n  while(scanf(\"%d,%d,%d,%d,%d\\n\",&c[0],&c[1],&c[2],&c[3],&c[4]) == 5) {\n    int same[5] = {0};\n    bool straight;\n    for(int i=0;i<5;i++) {\n      for(int j=0;j<5;j++) {\n\tif(c[i] == c[j]) {\n\t  same[i]++;\n\t}\n      }\n    }\n    sort(c,c+5);\n    sort(same,same+5);\n    /*    for(int i=0;i<5;i++) {\n    cout << same[i] << \" \" << endl;\n    }\n    */\n    if(same[4] == 4) {\n      cout << \"four card\" << endl;\n    }\n    else if(same[4] == 3) {\n      if(same[3] == 2) {\n\tcout << \"full house\" << endl;\n      }\n      else {\n\tcout << \"three card\" << endl;\n      }\n    }\n    else if(same[4] == 2) {\n      if((same[3] == 2) &&(same[2] == 2)) {\n\tcout << \"two pair\" << endl;\n      }\n      else {\n\tcout << \"one pair\" << endl;\n      }\n    }\n    else if(same[4] == 1) {\n      for(int i=0;i<4;i++) {\n\tif(c[i] == c[i+1]-1) {\n\t  straight = true;\n\t}\n\telse {\n\t  straight == false;\n\t  break;\n\t}\n      }\n      if(straight) {\n\tcout << \"straight\" << endl;\n      }\n      else {\n\tcout << \"null\" << endl;\n      }\n    }\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint c1;\n\tint c2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\t\n\t\tc1 = 0;\n\t\tc2 = 0;\n\t\tstraight = 0;\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tc1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tc2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((c1 == 1 && c2 == 0) || (c1 == 0 && c2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (c1 == 1 && c1 == c2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (c1 + c2 == 3 && c1 != 0 && c2 != 0){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\t\n\t\telse if (c1 == 2 || c2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (c1 == 3 || c2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void){\n  int i,j,k,l;\n  int card[5];\n  int poker_hand;\n  bool flag;\n\n  while(true){\n    poker_hand=0;\n    for(i=0;i<5;i++){\n      if(scanf(\"%d,\",&card[i])==EOF)return(0);\n    }\n    sort(card,card+5);\n    for(i=0;i<4;i++){\n      if(card[i]==card[i+1])poker_hand=1;\n    }\n    if(card[0]==card[1]&&card[2]==card[3])poker_hand=2;\n    if(card[0]==card[1]&&card[3]==card[4])poker_hand=2;\n    if(card[1]==card[2]&&card[3]==card[4])poker_hand=2;\n    for(i=0;i<3;i++){\n      if(card[i]==card[i+1]&&card[i]==card[i+2])poker_hand=3;\n    }\n    flag=true;\n    for(i=1;i<5;i++){\n      if(card[i]!=card[0]+i)flag=false;\n    }\n    if(flag)poker_hand=4;\n    flag=true;\n    if(card[0]==1&&card[1]==10){\n      for(i=1;i<4;i++){\n\tif(card[i+1]!=card[1]+i)flag=false;\n      }\n    }else{\n      flag=false;\n    }\n    if(flag)poker_hand=4;\n    if(card[0]==card[1]&&card[0]==card[2]&&card[3]==card[4])poker_hand=5;\n    if(card[0]==card[1]&&card[2]==card[3]&&card[2]==card[4])poker_hand=5;\n    if(card[0]==card[3])poker_hand=6;\n    if(card[1]==card[4])poker_hand=6;\n\n    \n    switch (poker_hand) {\n      case 0:\n\tprintf(\"null\\n\");\n\tbreak;\n      case 1:\n\tprintf(\"one pair\\n\");\n\tbreak;\n      case 2:\n\tprintf(\"two pair\\n\");\n\tbreak;\n      case 3:\n\tprintf(\"three card\\n\");\n\tbreak;\n      case 4:\n\tprintf(\"straight\\n\");\n\tbreak;\n      case 5:\n\tprintf(\"full house\\n\");\n\tbreak;\n      case 6:\n\tprintf(\"four card\\n\");\n\tbreak;\n    }\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tint card[5]; char ch;\n\twhile(cin>>card[0]>>ch>>card[1]>>ch>>card[2]>>ch>>card[3]>>ch>>card[4]){\n\tint num[13]={0};\n\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\tstring ans=\"null\";\n\tint pair=0;\n\tfor(int i=0;i<13;i++){\n\t\tif(num[i]==2 && pair==0 && ans!=\"three card\") ans=\"one pair\",pair++;\n\t\telse if(num[i]==2 && pair==1 && ans!=\"three card\") ans=\"two pair\",pair++;\n\t\telse if(num[i]==3) ans=\"three card\";\n\t\telse if(num[i]==4) ans=\"four card\";\n\t};\n\tif(ans==\"three card\" && pair==1) ans=\"full house\";\n\tif(ans==\"null\") do{\n\t\tint flag=0;\n\t\tfor(int i=0;i<=9;i++){\n\t\t\tif(flag==0 && num[i]==1) flag=1;\n\t\t\tif(flag==1 && num[i+1]==1&& num[i+2] && num[i+3] && num[i+4]==1) ans=\"straight\";\n\t\t};\n\t}while(0);\n\tcout << ans << '\\n' ;\n\t};\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main(){\n\n  vector<int> card(5);\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n\tbool judge_1p = false;\n\tbool judge_2p = false;\n\tbool judge_3 = false;\n\tbool judge_4 = false;\n\tbool judge_s = false;\n\n\tsort(card.begin(),card.end());\n\t\n\tfor(int i=0;i<4;++i){\n\t  int count = 1;\n\t  for(int j=i+1;j<5;++j){\n\t\tif(card[i]==card[j])\n\t\t  count++;\n\t\telse{\n\t\t  i = j - 1;\n\t\t  break;\n\t\t}\n\t  }\n\t  if(count == 2){\n\t\tif(judge_1p == false)\n\t\t  judge_1p = true;\n\t\telse if(judge_1p == true)\n\t\t  judge_2p = true;\n\t  }\n\t  else if(count == 3)\n\t\tjudge_3 = true;\n\t  else if(count == 4)\n\t\tjudge_4 = true;\n\t  \n\t}\n\n\tif(card[0] == 1 && card[1] == 10 &&\n\t   card[2] == 11 && card[3] == 12 &&\n\t   card[4] == 13){\n\t  cout<<\"straight\"<<endl;\n\t  continue;\n\t} \n\t\n\tfor(int i=0;i<4;++i){\n\t  if(card[i] == card[i+1] - 1 && i == 3)\n\t\tjudge_s = true;\n\t\t\n\t  else if(card[i] != card[i+1] - 1)\n\t\tbreak;\n\t}\n\n\tif(judge_4 == true)\n\t  cout<<\"four card\"<<endl;\n\telse if(judge_3 == true && judge_1p == true )\n\t  cout<<\"full house\"<<endl;\n\telse if(judge_3 == true)\n\t  cout<<\"three card\"<<endl;\n\telse if(judge_2p == true)\n\t  cout<<\"two pair\"<<endl;\n\telse if(judge_1p == true)\n\t  cout<<\"one pair\"<<endl;\n\telse if(judge_s == true)\n\t  cout<<\"straight\"<<endl;\n\telse\n\t  cout<<\"null\"<<endl;\n  }\n  \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0;\n  int three = 0;\n  int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump);\n\n  int a = 0;\n  int b = 0;\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    cout<<e<<endl;\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  for(int i = 1;i < 14;++i){\n    cout<<check[i]<<endl;\n  }\n\n  cout<<two<<\" \"<<three<<\" \"<<four<<endl;\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    int tmp[5];\n    while(scanf(\"%d,%d,%d,%d,%d,\",&tmp[0],&tmp[1],&tmp[2],&tmp[3],&tmp[4])!= EOF){\n    int hand[14]={};\n\n    for(int i=0; i<5; ++i){\n      if(tmp[i]==1)++hand[13];\n      ++hand[tmp[i]-1];\n    }\n   \n    int pair=0,three=0,str=0,four=0;\n    for(int i=1; i<14; ++i){\n      if(hand[i]==4){++four;}\n      if(hand[i]==1)++str;\n      if(hand[i]==2)++pair;\n      if(hand[i]==3)++three;\n      if(str!=5 && hand[i]==0)str=0;\n    }\n    \n    if(four)cout << \"four card\" << endl;\n    else if(three && pair)cout << \"full house\" << endl;\n    else if(str == 5)cout << \"straight\" << endl;\n    else if(three)cout << \"three card\" << endl;\n    else if(pair == 2)cout << \"two pair\" << endl;\n    else if(pair == 1)cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint one_pair(int hand[])\n{\n\tint i, j;\n\t\n\tfor (i = 0; i < 5 - 1; i++){\n\t\tfor (j = i + 1; j < 5; j++){\n\t\t\tif (hand[i] == hand[j]){\n\t\t\t\treturn (1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nint two_pair(int hand[])\n{\n\tint i, j, k, pair[2];\n\t\n\tfor (k = 0; k < 2; k++){\n\t\tfor (i = 0; i < 5 - 1; i++){\n\t\t\tfor (j = i + 1; j < 5; j++){\n\t\t\t\tif (hand[i] == hand[j] && i != pair[0] && i != pair[1] && j != pair[0] && j != pair[1]){\n\t\t\t\t\tpair[0] = i;\n\t\t\t\t\tpair[1] = j;\n\t\t\t\t\t\n\t\t\t\t\tif (k == 1){\n\t\t\t\t\t\treturn (1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nint three_card(int hand[]){\n\tint i, j, k;\n\t\n\tfor (i = 0; i < 5 - 2; i++){\n\t\tfor (j = i + 1; j < 5 - 1; j++){\n\t\t\tfor (k = j + 1; k < 5; k++){\n\t\t\t\tif (hand[i] == hand[j] && hand[j] == hand[k]){\n\t\t\t\t\treturn (1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nint straight(int hand[]){\n\tint i, j, hand1[5], hand2[5];\n\t\n\tfor (i = 0; i < 5; i++){\n\t\thand1[i] = hand[i];\n\t}\n\t\n\tfor (i = 0; i < 5; i++){\n\t\thand2[i] = hand[i];\n\t\tif (hand2[i] == 1){\n\t\t\thand2[i] = 14;\n\t\t}\n\t}\n\t\n\tsort(hand1, hand1 + 5);\n\tsort(hand2, hand2 + 5);\n\t\n\tfor (i = 0; i < 5 - 1; i++){\n\t\tif (hand1[i] != hand1[i + 1] - 1){\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == 5 - 1){\n\t\treturn (1);\n\t}\n\t\n\tfor (i = 0; i < 5 - 1; i++){\n\t\tif (hand2[i] != hand2[i + 1] - 1){\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == 5 - 1){\n\t\treturn (1);\n\t}\n\t\n\treturn (0);\n}\n\nint full_house(int hand[])\n{\n\tint i, j, k, l, m, hand1[5];\n\t\n\tfor (i = 0; i < 5; i++){\n\t\thand1[i] = hand[i];\n\t}\n\t\n\tfor (i = 0; i < 5 - 2; i++){\n\t\tfor (j = i + 1; j < 5 - 1; j++){\n\t\t\tfor (k = j + 1; k < 5; k++){\n\t\t\t\tif (hand1[i] == hand1[j] && hand1[j] == hand1[k]){\n\t\t\t\t\thand1[i] = -1;\n\t\t\t\t\thand1[j] = -2;\n\t\t\t\t\thand1[k] = -3;\n\t\t\t\t\tfor (l = 0; l < 5 - 1; l++){\n\t\t\t\t\t\tfor (m = l + 1; m < 5; m++){\n\t\t\t\t\t\t\tif (hand1[l] == hand1[m]){\n\t\t\t\t\t\t\t\treturn (1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nint four_card(int hand[]){\n\tint i, j, k, l;\n\t\n\tfor (i = 0; i < 5 - 3; i++){\n\t\tfor (j = i + 1; j < 5 - 2; j++){\n\t\t\tfor (k = j + 1; k < 5 - 1; k++){\n\t\t\t\tfor (l = k + 1; l < 5; l++){\n\t\t\t\t\tif (hand[i] == hand[j] && hand[j] == hand[k] && hand[k] == hand[l]){\n\t\t\t\t\t\treturn (1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nvoid poker_hand(int hand[]){\n\tif (four_card(hand)) puts(\"four card\");\n\telse if (full_house(hand)) puts(\"full house\");\n\telse if (straight(hand)) puts(\"straight\");\n\telse if (three_card(hand)) puts(\"three card\");\n\telse if (two_pair(hand)) puts(\"two pair\");\n\telse if (one_pair(hand)) puts(\"one pair\");\n\telse puts(\"null\");\n}\n\nint main()\n{\n\tint hand[5];\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &hand[0], &hand[1], &hand[2], &hand[3], &hand[4]) != EOF){\n\t\tpoker_hand(hand);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main(void) {\n    int a[5];\n    char c;\n    while (cin >> a[0] >> c >> a[1] >> c >> a[2] >> c >> a[3] >> c >> a[4]) {\n        int b[13] = {};\n        for (int i = 0; i < 5; ++i) ++b[a[i]];\n        sort(a, a+5);\n        sort(b, b+13, greater<int>());\n\n\n        if (b[0] == 4 || b[0] == 5)\n            cout << \"four card\" << endl;\n        else if (b[0] == 3 && b[1] == 2)\n            cout << \"full house\" << endl;\n        else if (((a[0]+1 == a[1]) && (a[1]+1==a[2]) && (a[2]+1==a[3]) && (a[3]+1==a[4])) ||\n                 (a[0] == 1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13))\n            cout << \"straight\" << endl;\n        else if (b[0] == 3)\n            cout << \"three card\" << endl;\n        else if (b[0] == 2 && b[1] == 2)\n            cout << \"two pair\" << endl;\n        else if (b[0] == 2 )\n            cout << \"one pair\" << endl;\n        else\n            cout << \"null\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\n\n#define same2(a,b) (c[a]==c[b])\n#define same3(a,b,c) (same2(a,b)&&same2(b,c))\n#define same4(a,b,c,d) (same3(a,b,c)&&same2(c,d))\nint c[5];\n\nbool four_card(){\n\tif(same4(0,1,2,3)||same4(1,2,3,4)){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nbool full_house(){\n\tif((same3(0,1,2)&&same2(3,4)) || (same2(0,1)&&same3(2,3,4))){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nbool straight(){\n\tbool res=1;\n\tfor(int i=0;i<4;i++){\n\t\tif((c[i]+1)!=c[i+1])res=0;\n\t}\n\tif((res==0) && (c[0]==1) && (c[1]==10)){\n\t\tres=1;\n\t\tfor(int i=1;i<4;i++){\n\t\t\tif((c[i]+1)!=c[i+1])res=0;\n\t\t}\n\t}\n\treturn res;\n}\n\nbool three_card(){\n\tif(same3(0,1,2)||same3(1,2,3)||same3(2,3,4)){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nbool two_pair(){\n\tint p=0;\n\tfor(int i=0;i<4;i++){\n\t\tif(same2(i,i+1)){\n\t\t\tp++;\n\t\t}\n\t}\n\tif(p==2){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nbool one_pair(){\n\tif(same2(0,1)||same2(1,2)||same2(2,3)||same2(3,4)){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n\t\tsort(c,c+5);\n\t\tif(four_card()){\n\t\t\tcout<<\"four card\"<<endl;\n\t\t}else if(full_house()){\n\t\t\tcout<<\"full house\"<<endl;\n\t\t}else if(straight()){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t}else if(three_card()){\n\t\t\tcout<<\"three card\"<<endl;\n\t\t}else if(two_pair()){\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t}else if(one_pair()){\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t}else{\n\t\t\tcout<<\"null\"<<endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint main(){\n\tint a[5];\n\tchar c;\n\twhile(cin>>a[0]>>c>>a[1]>>c>>a[2]>>c>>a[3]>>c>>a[4]){\n\t\tint b[14];\n\t\tfor(int i=0;i<14;i++) b[i] = 0;\n\t\tfor(int i=0;i<5;i++) b[a[i]]++;\n\t\tint d[5];\n\t\tfor(int i=0;i<5;i++) d[i] = 0;\n\t\tfor(int i=0;i<14;i++) d[b[i]]++;\n\t\tbool st = false;\n\t\tfor(int i=1;i<11;i++){\n\t\t\tint z = 1;\n\t\t\tfor(int j=i;j<i+5;j++) z *= b[(j-1)%13+1];\n\t\t\tif(z==1) st = true;\n\t\t}\n\t\tif(d[4]==1) cout << \"four card\";\n\t\telse if(d[3]*d[2]==1) cout << \"full house\";\n\t\telse if(st) cout << \"straight\";\n\t\telse if(d[3]==1) cout << \"three card\";\n\t\telse if(d[2]==2) cout << \"two pair\";\n\t\telse if(d[2]==1) cout << \"one pair\";\n\t\telse cout << \"null\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <numeric>\n#include <iomanip>\n#include <utility>\n#include <cstdlib>\n#include <sstream>\n#include <bitset>\n#include <vector>\n#include <cstdio>\n#include <ctime>\n#include <queue>\n#include <deque>\n#include <cmath>\n#include <stack>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n\nbool isLeep(int n){\n    if((n%4==0 && n%100!=0) || n%400==0){\n        return true;\n    }\n    else return false;\n}\n\n\nint main() {\n    int a[5]={};\n    char ch;\n    while(cin>>a[0]>>ch>>a[1]>>ch>>a[2]>>ch>>a[3]>>ch>>a[4]){\n        sort(a,a+5);\n        if( (a[0]==a[1] && a[1]==a[2] && a[2]==a[3]) || (a[1]==a[2] && a[2]==a[3] && a[3]==a[4]) )cout<<\"four card\"<<endl;\n        else if( (a[0]==a[1] && a[1]==a[2] && a[3]==a[4]) || (a[0]==a[1] && a[2]==a[3] && a[3]==a[4]) )cout<<\"full house\"<<endl;\n        else if( (a[0]+1==a[1] && a[1]+1==a[2] && a[2]+1==a[3] && a[3]+1==a[4]) || (a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13) )cout<<\"straight\"<<endl;\n        else if( (a[0]==a[1] && a[1]==a[2]) || (a[1]==a[2] && a[2]==a[3]) || (a[2]==a[3] && a[3]==a[4]) )cout<<\"three card\"<<endl;\n        else if( (a[0]==a[1] && (a[2]==a[3] || a[3]==a[4] )) || (a[1]==a[2] && a[3]==a[4]) )cout<<\"two pair\"<<endl;\n        else if( a[0]==a[1] || a[1]==a[2] || a[2]==a[3] || a[3]==a[4] )cout<<\"one pair\"<<endl;\n        else cout<<\"null\"<<endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <set>\n#include <queue>\n#include <stack>\n#include <string>\n#include <sstream>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n\n#define rep(i, n) for(int i = 0; i < n; i ++)\n#define COUNT(i, n) for(int i = 1; i <= n; i ++)\n#define ITER(c) __typeof((c).begin())\n#define each(c, it) for(ITER(c) it =(c).begin(); it!=(c).end(); it++)\n#define ALL(c) c.begin(), c.end()\n#define mp make_pair\n#define pb push_back\n#define MEMSET(v, h) memset((v), h, sizeof(v))\n \nusing namespace std; \n\ntypedef pair<int, int> pii;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\nconst int INF = 1 << 24;\nconst int N = 5;\nconst string perm = \"12345678910111213110111213\";\n\nint main(void){\n    string res;\n    for(vi in(N); cin >> in[0]; cout << res << endl){\n        COUNT(i, N - 1){ char c; cin >> c >> in[i]; }\n        set<int> u; rep(i, N) u.insert(in[i]);\n\n        vi cnt;\n        each(u, it) cnt.pb(count(ALL(in), *it));\n        sort(ALL(cnt), greater<int>());\n\n        switch(*cnt.begin()){\n            case 4: \n                res = \"four card\";\n                break;\n            case 3:\n                if(*(cnt.begin() + 1) == 2) res = \"full house\";\n                else res = \"three card\";\n                break;\n            case 2:\n                if(*(cnt.begin() + 1) == 2) res = \"two pair\";\n                else res = \"one pair\";\n                break;\n            default:\n                stringstream ss;\n                sort(ALL(in));\n                rep(i, N) ss << in[i];\n                if(~perm.find(ss.str())) res = \"straight\";\n                else res = \"null\";\n                break;\n        }\n    }\n \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nstruct cards{\n\tint num, card;\n};\n\nbool straight( vector<int> card )\n{\n\tsort(card.begin(), card.end());\n\tint st = card[0];\n\tbool straight1 = true, straight2 = true;\n\tfor(int i = 1; i < 5; i++)\n\t{\n\t\tst++;\n\t\tif(st != card[i])\n\t\t{\n\t\t\tstraight1 = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor(int i = 0; i < 5; i++)\n\t{\n\t\tif(card[i] == 1) card[i] = 14;\n\t}\n\n\tsort(card.begin(), card.end());\n\tst = card[0];\n\tfor(int i = 1; i < 5; i++)\n\t{\n\t\tst++;\n\t\tif(st != card[i])\n\t\t{\n\t\t\tstraight2 = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn (straight1 || straight2);\n}\n\nint main()\n{\n\tvector<int> card(5);\n\tvector<int> num;\n\t// num, card\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF)\n\t{\n\t\tnum.clear();\n\n\t\tif(straight(card))\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tint cnt = 1;\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == card[i+1])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnum.push_back(cnt);\n\n\t\t\t\tcnt = 1;\n\t\t\t}\n\t\t}\n\n\t\tif(num.size() == 2)\n\t\t{\n\t\t\tif( num[0] == 4 || num[1] == 4)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\tif( num[0] == 3 && num[1] == 2 || num[0] == 2 && num[1] == 3)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 3)\n\t\t{\n\t\t\tif( num[0] == 3 || num[1] == 3 || num[2] == 3)\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\n\t\t\telse if( num[0] == 2 && num[1] == 2 || num[0] == 2 && num[2] == 2 || num[1] == 2 && num[2] == 2)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse if(num.size() == 5)\n\t\t{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <vector>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nint s[14];\nint main(){\n\tint a,b,c,d,e;\n\tfor(;~scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e);){\n\t\tmap<int,int>m;\n\t\tmemset(s,0,sizeof(s));\n\t\tm[a]++,m[b]++,m[c]++,m[d]++,m[e]++;\n\t\ts[a]=1,s[b]=1,s[c]=1,s[d]=1,s[e]=1;\n\t\tvector<int>v;\n\t\tfor(a=1;a<=9;a++)if(s[a]&&s[a+1]&&s[a+2]&&s[a+3]&&s[a+4]){puts(\"straight\");goto n;}\n\t\tif(s[a]&&s[a+1]&&s[a+2]&&s[a+3]&&s[1]){puts(\"straight\");goto n;}\n\t\tfor(a=1;a<=13;a++)v.push_back(m[a]);\n\t\tsort(v.begin(),v.end());\n\t\treverse(v.begin(),v.end());\n\t\tif(v[0]==4)puts(\"four card\");\n\t\telse if(v[0]==3)puts(v[1]==2?\"full house\":\"three card\");\n\t\telse if(v[0]==2)puts(v[1]==2?\"two pair\":\"one pair\");\n\t\telse puts(\"null\");\n\t\tn:;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n/* null\n * one pair\n * two pair\n * three card\n * straight\n * full house\n * four card\n * */\nint main() {\n\tvector<int> cards(5);\n\twhile (scanf(\"%d%*c%d%*c%d%*c%d%*c%d\",&cards[0],&cards[1],&cards[2],\n\t\t\t\t&cards[3],&cards[4])) {\n\t\tvector<int> cnt(13, 0);\n\t\tfor (int i=0; i<5; i++) cnt[cards[i]-1]++;\n\t\tint two = 0, three = 0, four = 0;\n\t\tfor (int i=0; i<13; i++) {\n\t\t\tif (cnt[i] == 2) two++;\n\t\t\tif (cnt[i] == 3) three++;\n\t\t\tif (cnt[i] == 4) four++;\n\t\t}\n\t\tif (four == 1) {\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1 && three == 1) {\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t} else if (three == 1) {\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 2) {\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1) {\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tint c = 0;\n\t\tbool flag = false;\n\t\tfor (int i=0; i<10; i++) {\n\t\t\tif (cnt[i] == 1) {\n\t\t\t\tc++;\n\t\t\t\tfor (int j=1; j<5; j++) {\n\t\t\t\t\tint p = j + i;\n\t\t\t\t\tif (p == 13) p = 0;\n//\t\t\t\t\tprintf(\"%d\\n\", p);\n\t\t\t\t\tif (cnt[p] == 1) c++;\n\t\t\t\t}\n\t\t\t\tif (c == 5) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\t\tif (flag) {\n\t\t\tprintf(\"straight\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define rep(i,a) for(int i = 0 ; i < a;  i ++)\nint main(void){\n  vector<int> array(5);\n  vector<int> original;\n  vector<int> card(15);\n  string s;  \n  while(cin>>s){\n    rep(i,5)array[i]=0;\n    rep(i,15)card[i]=0;\n    for(int i = 0, j = 0 ; i < s.size() ; i ++){\n      if(s[i] == ','){\n\tj++;continue;\n      }\n      array[j] = array[j] * 10 +s[i]-'0';\n    }\n    rep(i,5){\n      card[array[i]]++;\n      if(array[i] == 1)card[14]++;\n    }\n\n    original = card;\n    sort(card.begin(),card.end(),greater<int>());\n    \n    //rep(i,5)cout<<card[i]<<endl;\n    if(\n       (card[0 ] == 1 && card[1 ] == 1 && card[2 ] == 1 && card[3 ] == 1 && card[4] == 1 ) \n       ){\n      int cnt = 0;\n      rep(i,15){\n\t//cout<<original[i]<<\" \"<<cnt<<endl;;\n\tif(cnt == 4) break;\n\tif(original[i] == original[i+1] && original[i] != 0 )cnt ++;\n\telse cnt = 0;\n      }\n      if(cnt == 4)cout<<\"straight\"<<endl;\n      else cout<<\"null\"<<endl;\n     \n      continue;\n    }\n    sort(array.begin(),array.end());\n    switch(card[0]){\n    case 4:\n      cout<<\"four card\"<<endl;break;\n    case 3:\n      if(card[1]==2){\n\tcout<<\"full house\"<<endl;\n      }else{\n\tcout<<\"three card\"<<endl;\n      }\n      break;\n    case 2:\n      if(card[1]==2){\n\tcout<<\"two pair\"<<endl;\n      }else{\n\tcout<<\"one pair\"<<endl;\n      }\n      break;\n    default:\n      cout<<\"null\"<<endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main(int argc, char **argv)\n{\n\tint a[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])!=EOF){\n\t\tsort(a, a+5);\n\t\tif(a[0]==a[1]&&a[0]==a[2]&&a[0]==a[3] || a[4]==a[1]&&a[4]==a[2]&&a[4]==a[3]){\n\t\t\tcout << \"four card\" << endl;\n\t\t} else if(a[0]==a[1]&&a[1]==a[2]){\n\t\t\tif(a[3]==a[4]){\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t} else {\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t} else if(a[4]==a[3]&&a[2]==a[4]){\n\t\t\tif(a[0]==a[1]){\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t} else {\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t} else if(a[1]==a[2]&&a[1]==a[3]){\n\t\t\tcout << \"three card\" << endl;\n\t\t} else if(a[0]==a[1]&&(a[2]==a[3]||a[3]==a[4])){\n\t\t\tcout << \"two pair\" << endl;\n\t\t} else if(a[1]==a[2] && a[3]==a[4]){\n\t\t\tcout << \"two pair\" << endl;\n\t\t} else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4]){\n\t\t\tcout << \"one pair\" << endl;\n\t\t} else if(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){\n\t\t\tcout << \"straight\" << endl;\n\t\t} else if(a[0]+1==a[1]&&a[0]+2==a[2]&&a[0]+3==a[3]&&a[0]+4==a[4]){\n\t\t\tcout << \"straight\" << endl;\n\t\t} else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n\nint c[5];// card\n\nbool straight()\n{\n    if(c[4]==13 && c[3]==12 && c[2]==11 && c[1]==10 && c[0]==1)\n        return true;\n    for(int i=0; i<4; i++) {\n        if(c[i+1] - c[i] != 1)\n            return false;\n    }\n    return true;\n}\n\nint main(void)\n{\n    while(~scanf(\"%d %d %d %d %d\", c, c+1, c+2, c+3, c+4)) {\n        sort(c, c+5);\n        if(c[0] == c[3] || c[1] == c[4]) {\n            puts(\"four card\");\n        } else if((c[0] == c[2] && c[3] == c[4]) ||\n                (c[0] == c[1] && c[2] == c[4])) {\n            puts(\"full house\");\n        } else if(straight()) {\n            puts(\"straight\");\n        } else if(c[0]==c[2] || c[1]==c[3] || c[2]==c[4]) {\n            puts(\"three card\");\n        } else if((c[0]==c[1] && (c[2]==c[3] || c[3]==c[4])) ||\n                (c[1]==c[2] && c[3]==c[4])) {\n            puts(\"two pair\");\n        } else if(c[0]==c[1] || c[1]==c[2] || c[2]==c[3] || c[3]==c[4]) {\n            puts(\"one pair\");\n        } else {\n            puts(\"null\");\n        }   \n    }\n\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n \n \nint main(void)\n{\n    const int N = 5;\n    while(1)\n    {\n        int hand[N];\n        char dummy;\n        int i, j;\n        for(i = 0; i < N; i++)\n        {\n            if(i)\n                cin >> dummy;\n            cin >> hand[i];\n        }\n        if(!cin)\n            break;\n \n        sort(hand, hand+N);\n \n        if(hand[0] == hand[3] ||\n            hand[1] == hand[4])\n            cout << \"four card\" << endl;\n        else if( (hand[0] == hand[1] && hand[2] == hand[4]) ||\n                (hand[0] == hand[2] && hand[3] == hand[4]) )\n            cout << \"full house\" << endl;\n        else if( (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) ||\n            (hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4]) )\n            cout << \"straight\" << endl;\n        else if( (hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4]) )\n            cout << \"three card\" << endl;\n        else if( (hand[0]==hand[1] && hand[2]==hand[3]) ||\n                (hand[0]==hand[1] && hand[3]==hand[4]) ||\n                (hand[1]==hand[2] && hand[3]==hand[4]) )\n            cout << \"two pair\" << endl;\n        else if( hand[0]==hand[1] || hand[1]==hand[2] || hand[2]==hand[3] || hand[3]==hand[4] )\n            cout << \"one pair\" << endl;\n        else\n            cout << \"null\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint bigger(int a, int b){\n\tif(a>=b){return a;}\n\treturn b;\n}\n\nint one_pair(int a[]){\n\tint i, j;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(j!=i){\n\t\t\t\tif(a[i]==a[j]){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint two_pair(int a[]){\n\tint i, j, count=0;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(a[i] == a[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(count == 4){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint three_card(int a[]){\n\tint i, j, k;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tfor(k=0; k<5; k++){\n\t\t\t\tif(i!=j && i!=k && j!=k){\n\t\t\t\t\tif(a[i]==a[j] && a[i]==a[k]){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint four_card(int a[]){\n\tint i, j, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){count++;}\n\t\t}\n\t\tif(count==4){return 1;}\n\t}\n\treturn 0;\n}\n\nint straight(int a[]){\n\tint i, j, m, flag=0, count;\n\t\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[i]<a[j]){\n\t\t\t\tm=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=m;\n\t\t\t}\n\t\t}\n\t}\n\tcount=0;\n\tfor(i=a[0], j=0; i<5+a[0], j<5; i++, j++){\n\t\tif(i==a[j]){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count==5){flag++;}\n\t\n\tif(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13){\n\t\tflag++;\n\t}\n\t\n\tif(a[0]==1 && a[1]==2){\n\t\tflag*=0;\n\t}\n\t\n\tif(flag){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint full_house(int a[]){\n\tint i, j, k, m, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){\n\t\t\t\tcount++;\n\t\t\t\ta[j]=-1;\n\t\t\t}\n\t\t}\n\t\tif(count==3){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(count!=3){return 0;}\n\t\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]=i+1){\n\t\t\t\tcount++;\n\t\t\t\ta[j]=-1;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint output(int n){\n\tswitch(n){\n\t\tcase 1:\n\t\t\tprintf(\"null\\n\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tprintf(\"three card\\n\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tprintf(\"straight\\n\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tprintf(\"full house\\n\");\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tprintf(\"four card\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint main (void){\n\tint cards[5], result;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4])!=EOF){\n\t\tresult=1;\n\t\tif(one_pair(cards)){\n\t\t\tresult=bigger(result, 2);\n\t\t}\n\t\tif(two_pair(cards)){\n\t\t\tresult=bigger(result, 3);\n\t\t}\n\t\tif(three_card(cards)){\n\t\t\tresult=bigger(result, 4);\n\t\t}\n\t\tif(straight(cards)){\n\t\t\tresult=bigger(result, 5);\n\t\t}\n\t\tif(full_house(cards)){\n\t\t\tresult=bigger(result, 6);\n\t\t}\n\t\tif(four_card(cards)){\n\t\t\tresult=bigger(result, 7);\n\t\t}\n\t\toutput(result);\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<vector>\n#include<utility>\n#include<queue>\n#include<math.h>\n#include<string>\n#include<stack>\n#include<typeinfo>\nusing namespace std;\ntypedef pair<int, int> P;\nint main() {\n\tchar ch, straight, four, three, twop, onep;\n\tint check[5] = { 1,10,11,12,13 }, st = 0;\n\tint card[5];\twhile (cin >> card[0] >> ch >> card[1] >> ch >> card[2] >> ch >> card[3] >> ch >> card[4]) {\n\t\tint cnt[14] = { 0 };\n\t\tsort(card, card + 5);\n\t\tfour = false;\n\t\tthree = false;\n\t\ttwop = false;\n\t\tonep = false;\n\t\tstraight = true;\n\t\tst = 0;\n\t\tfor (int i = 0; i < 5; ++i) {\n\t\t\tif (i != 0 && card[i - 1] + 1 != card[i])straight = false;\n\t\t\tif (card[i] == check[i])st++;\n\t\t\tcnt[card[i]]++;\n\t\t}\n\t\tif (st == 5)straight = true;\n\t\tfor (int i = 0; i < 5; ++i) {\n\t\t\tif (i != 0 && card[i - 1] == card[i])continue;\n\t\t\tif (cnt[card[i]] == 4) {\n\t\t\t\tfour = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (cnt[card[i]] == 3) three = true;\n\t\t\telse if (cnt[card[i]] == 2 && onep)twop = true;\n\t\t\telse if (cnt[card[i]] == 2)onep = true;\n\t\t}\n\n\t\tif (four)cout << \"four card\" << endl;\n\t\telse if (onep&&three)cout << \"full house\" << endl;\n\t\telse if (straight)cout << \"straight\" << endl;\n\t\telse if (three)cout << \"three card\" << endl;\n\t\telse if (twop)cout << \"two pair\" << endl;\n\t\telse if (onep)cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\n\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <ctime>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\nint const MOD = 1000000007;\n\nint main() {\n    int a[5];\n    int r[13];\n    while(cin >> a[0]) {\n        memset(r, 0, sizeof(r));\n        r[a[0] - 1]++;\n        rep(i,1,5) {\n            scanf(\",%d\", &a[i]);\n            r[a[i] - 1]++;\n        }\n\n        int x = 0, y = 0, z = 0;\n        rep(i,0,13) {\n            if(r[i] == 2) x++;\n            if(r[i] == 3) y++;\n            if(r[i] == 4) z++;\n        }\n\n        bool isnull = true;\n        if(z == 1) {cout << \"four card\" << endl; continue;}\n        else if(x == 1 && y == 1) {cout << \"full house\" << endl; continue;}\n        else {\n            rep(i,0,10) {\n                if(r[i] == 1 && r[i+1] == 1 && r[i+2] == 1 && r[i+3] == 1 && r[(i+4) % 13] == 1) {\n                    cout << \"straight\" << endl;\n                    isnull = false;\n                }\n            }\n        }\n\n        if(y == 1) {cout << \"three card\" << endl; continue;}\n        else if(x == 2) {cout << \"two pair\" << endl; continue;}\n        else if(x == 1) {cout << \"one pair\" << endl; continue;}\n        else if(isnull) cout << \"null\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\nint strtoint(char *s){\n\tint n=0;\n\twhile(*s!='\\0'){\n\t\tn += n*10 + *s - '0';\n\t\ts++;\n\t}\n\treturn n;\n}\n\nvoid toint(char *s, int cards[5]){\n\n\tchar *tp;\n\n\ttp = strtok(s,\",\");\n\tcards[0] = strtoint(tp);\n\n\tfor(int i=1;i<5;++i){\n\t\ttp = strtok(NULL,\",\");\n\t\tcards[i] = strtoint(tp);\n\n\t}\n\n\n\n\n\n}\n\nint main(){\n\n\tchar s[32];\n\tstring res;\n\tint card[5];\t\n\n\tcin >> s;\n\n\ttoint(s,card);\n\n\tswitch( Result(card) ){\n\t\tcase 1:res=\"null\";break;\n\t\tcase 2:res=\"one pair\";break;\n\t\tcase 3:res=\"two pair\";break;\n\t\tcase 4:res=\"three card\";break;\n\t\tcase 5:res=\"straight\";break;\n\t\tcase 6:res=\"full house\";break;\n\t\tcase 7:res=\"four card\";break;\n\t}\n\n\tcout << res;\n\n\t\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n\nint c[5];// card\n\nbool straight()\n{\n    if(c[4]==13 && c[3]==12 && c[2]==11 && c[1]==10 && c[0]==1)\n        return true;\n    for(int i=0; i<4; i++) {\n        if(c[i+1] - c[i] != 1)\n            return false;\n    }\n    return true;\n}\n\nint main(void)\n{\n    while(~scanf(\"%d,%d,%d,%d,%d\", c, c+1, c+2, c+3, c+4)) {\n        sort(c, c+5);\n        if(c[0] == c[3] || c[1] == c[4]) {\n            puts(\"four card\");\n        } else if((c[0] == c[2] && c[3] == c[4]) ||\n                (c[0] == c[1] && c[2] == c[4])) {\n            puts(\"full house\");\n        } else if(straight()) {\n            puts(\"straight\");\n        } else if(c[0]==c[2] || c[1]==c[3] || c[2]==c[4]) {\n            puts(\"three card\");\n        } else if((c[0]==c[1] && (c[2]==c[3] || c[3]==c[4])) ||\n                (c[1]==c[2] && c[3]==c[4])) {\n            puts(\"two pair\");\n        } else if(c[0]==c[1] || c[1]==c[2] || c[2]==c[3] || c[3]==c[4]) {\n            puts(\"one pair\");\n        } else {\n            puts(\"null\");\n        }   \n    }\n\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nmain(){\n  int a[5];\n  while(~scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n    int card[14]={};\n    int p=1;\n    int pan=0;\n    int tpan=0;\n    for(int i=0;i<5;i++){\n      card[a[i]]++;\n      if(card[a[i]]>3) p=7;\n      else if(card[a[i]]>2){\n\ttpan++;\n\tpan--;\n      }\n      else if(card[a[i]]>1){\n\tpan++;\n      }\n    }\n    if(p==7) puts(\"four card\");\n    else if(tpan==1 && pan==1) puts(\"full house\");\n    else if(tpan==1) puts(\"three card\");\n    else if(pan==2) puts(\"two pair\");\n    else if(pan==1) puts(\"one pair\");\n    else{\n      bool f=false;\n      for(int i=0;i<10;i++){\n\tfor(int j=0;j<5;j++){\n\t  int ind = (i+j)%14+1;\n\t  if(!card[ind]) break;\n\t  if(j==4) f=true;\n\t}\n\tif(f) break;\n      }\n      if(f) puts(\"straight\");\n      else\n\tputs(\"null\");\n    }\n    \n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <stack>\n#include <vector>\n#include <map>\n#include <set>\n#include <iostream>\n\n\nusing namespace std;\n\n\nint c[5];\nint counts[14];\nint countscounts[4];\n\nbool IsFourCard()\n{\n\treturn countscounts[4] == 1;\n}\nbool IsFullHouse()\n{\n\treturn countscounts[3] == 1 && countscounts[2] == 1;\n}\nbool IsStraight()\n{\n\tfor (int i = 0; i < 4; ++i)\n\t{\n\t\tif (c[i]+1 != c[i+1])\n\t\t{\n\t\t\tint t[] = { 1, 10, 11, 12, 13 };\n\t\t\tfor (int j = 0; j < 5; ++j)\n\t\t\t{\n\t\t\t\tif (c[j] != t[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}\nbool IsThreeCard()\n{\n\treturn countscounts[3] == 1;\n}\nbool IsTwoPair()\n{\n\treturn countscounts[2] == 2;\n}\nbool IsOnePair()\n{\n\treturn countscounts[2] == 1;\n}\nbool IsNull()\n{\n\treturn true;\n}\n\nint main()\n{\n\twhile (scanf(\"%d,%d,%d,%d,%d\", c, c+1, c+2, c+3, c+4) != EOF)\n\t{\n\t\tsort(c, c+5);\n\t\tmemset(counts, 0, sizeof(counts));\n\t\tmemset(countscounts, 0, sizeof(countscounts));\n\t\tfor (int i = 0; i < 5; ++i)\n\t\t\t++counts[c[i]];\n\t\tfor (int i = 1; i < 14; ++i)\n\t\t\t++countscounts[counts[i]];\n\n\t\tbool (*judge[])() = { IsFourCard, IsFullHouse, IsStraight\n\t\t\t, IsThreeCard, IsTwoPair, IsOnePair, IsNull };\n\t\tchar* names[] = { \"four card\", \"full house\", \"straight\"\n\t\t\t, \"three card\", \"two pair\", \"one pair\", \"null\" };\n\t\tfor (int i = 0; i < sizeof(judge)/sizeof(judge[0]); ++i)\n\t\t{\n\t\t\tif (judge[i]())\n\t\t\t{\n\t\t\t\tputs(names[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint ar[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &ar[0], &ar[1], &ar[2], &ar[3], &ar[4])+1) {\n\t\tsort(ar, ar + 5);\n\t\tint a = ar[0];\n\t\tint b = ar[1];\n\t\tint c = ar[2];\n\t\tint d = ar[3];\n\t\tint e = ar[4];\n\n\t\tif (a == d || b == e) { cout << \"four card\" << endl; }\n\t\telse if (a == c || d == e) { cout << \"full house\" << endl; }\n\t\telse if (a == b || c == e) { cout << \"full house\" << endl; }\n\t\telse if (b - a == 1 && c - b == 1 && d - c == 1 && e - d == 1&&a!=1 ) { cout << \"straight\" << endl; }\n\t\telse if (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) { cout << \"straight\" << endl; }\n\t\telse if (a == c || b == d || c == e) { cout << \"three card\" << endl; }\n\t\telse if (a==b&&c==d) { cout << \"two pair\" << endl; }\n\t\telse if (a == b&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (b == c&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (a == b || b == c || c == d || d == e) { cout << \"one pair\" << endl; }\n\t\telse { cout << \"null\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main(){\nint c[6],s[6],ans=0;\nstring a[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full \n\nhouse\",\"four card\"};\nwhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])){\nans=0;\nfor(int i=0;i<5;i++)s[i]=100;\ns[0]=c[0];\nfor(int i=1;i<5;i++){\nfor(int j=i-1;j>-1;j--){\nif(s[j]<=c[i]){\nfor(int k=i;k>j+1;k--)s[k]=s[k-1];\ns[j+1]=c[i];\nbreak;}}\nif(s[0]>c[i]){\nfor(int k=i;k>0;k--)s[k]=s[k-1];\ns[0]=c[i];}}\nif(s[0]==s[1]||s[1]==s[2]||s[3]==s[4]||s[2]==s[3])ans=1;\nif((s[0]==s[1]||s[1]==s[2])&&(s[2]==s[3]||s[3]==s[4]))ans=2;\nif(s[0]==s[2]||s[1]==s[3]||s[2]==s[4])ans=3;\nif(s[2]+1==s[3]&&s[1]+1==s[2]&&s[3]+1==s[4]&&(s[0]+1==s[1]||(s[0]==1&&s\n\n[4]==13)))ans=4;\nif((s[0]==s[2]&&s[3]==s[4])||(s[0]==s[1]&&s[2]==s[4]))ans=5;\nif(s[0]==s[3]||s[1]==s[4])ans=6;\n\nfor(int i=0;i<7;i++){if(ans==i)cout<<a[i]<<endl;}\n\n}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main()\n{\n\tint cards[5], i, j, t, r, fl, fl2;\n\tchar c, str[8][11] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\twhile (cin >> cards[0] >> c >> cards[1] >> c >> cards[2] >> c >> cards[3] >> c >> cards[4])\n\t{\n\t\tr = 1;\n\t\tsort(cards, cards+5);\n\t\tint n[13] = {0};\n\t\tfor (i = 0; i < 5; i++)\n\t\t\tn[cards[i]-1]++;\n\t\tfor (i = fl = t = 0; i < 13; i++)\n\t\t\tif (n[i] == 2)\tt++;\n\t\tif (t == 1)\tr = 2;\n\t\tif (t == 2)\tr = 3;\n\t\tfor (i = fl = 0; i < 13 && !fl; i++)\n\t\t\tif (n[i] == 3)\tr = 4, fl = 1;\n\t\tfor (i = fl = 0; i < 9 && !fl; i++)\n\t\t{\n\t\t\tfor (j = 0, fl2 = 1; j < 5 && fl2; j++)\n\t\t\t\tif (n[i+j] != 1)\tfl2 = 0;\n\t\t\tif (fl2)\tr = 5, fl2 = 1;\n\t\t}\n\t\tif (!fl)\n\t\t{\n\t\t\tfor (i = 9, fl = 0; i < 13 && !fl; i++)\n\t\t\t\tif (n[i] != 1)\tfl = 1;\n\t\t\tif (!fl && n[0])\tr = 5;\n\t\t}\n\t\tfor (i = fl = fl2 = 0; i < 13; i++)\n\t\t{\n\t\t\tif (n[i] == 2)\tfl = 1;\n\t\t\tif (n[i] == 3)\tfl2 = 1;\n\t\t}\n\t\tif (fl && fl2)\tr = 6;\n\t\tfor (i = fl = 0; i < 13 && !fl; i++)\n\t\t\tif (n[i] == 4)\n\t\t\t\tr = 7, fl = 1;\n\t\tcout << str[r-1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define loop(i,x,n) for(int i=(x);i<(n);i++)\n#define all(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fir first\n#define sec second\n#define ub upper_bound\n#define lb lower_bound\n//#define int long long\nusing namespace std;\nconst int MOD=1000000007;\nconst int INF=1000000009;\n\nint main(){\n  int a,b,c,d,e;\n  char x;\n  while(cin>>a>>x>>b>>x>>c>>x>>d>>x>>e){\n    int num[14]={};\n    num[a]++;num[b]++;num[c]++;num[d]++;num[e]++;\n    int M_NUM=*max_element(num,num+14);\n    bool key=false;\n    loop(i,1,10)if(num[i]==1&&num[i+1]==1&&num[i+2]==1&&num[i+3]==1&&num[i+4]==1)key=true;\n    if(num[1]==1&&num[13]==1&&num[12]==1&&num[11]==1&&num[10]==1)key=true;\n    if(key){\n      cout<<\"straight\"<<endl;\n      goto at;\n    }\n    if(M_NUM==4){\n      cout<<\"four card\"<<endl;\n      goto at;\n    }else if(M_NUM==3){\n      bool flag=false;\n      rep(i,14)if(num[i]==2)flag=true;\n      if(flag){\n        cout<<\"full house\"<<endl;\n        goto at;\n      }else{\n        cout<<\"three card\"<<endl;\n        goto at;\n      }\n    }else if(M_NUM==2){\n      int p=0;\n      rep(i,14)if(num[i]==2)p++;\n      if(p==2){\n        cout<<\"two pair\"<<endl;\n        goto at;\n      }else{\n        cout<<\"one pair\"<<endl;\n        goto at;\n      }\n    }else{\n      cout<<\"NULL\"<<endl;\n    }\n    at: ;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint straight(int[]);\n\nint main() {\n\n\tint ans, h[5];\n\n\twhile(1) {\n\t\tans=0;\n\t\tfor(int i=0; i<5; i++) {\n\t\t\tcin >> h[i];\n\t\t}\n\t\tif(cin.eof())\n\t\t\tbreak;\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(h))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n\n}\n\nint straight(int h[5]) {\n\t\n\tsort(h, h+5);\n\tfor(int i=0; i<9; i++) {\n\t\tif(h[4]==i+4&&h[3]==i+3&&h[2]==i+2&&h[1]==i+1&&h[0]==i||h[0]==1&&h[1]==10&&h[2]==11&&h[3]==12&&h[4]==13)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cctype>\n#include <cmath>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\n\n#define all(c) ((c).begin()), ((c).end())\n#define debug(c) cerr << \"> \" << #c << \" = \" << (c) << endl;\n#define iter(c) __typeof((c).begin())\n#define present(c, e) ((c).find((e)) != (c).end())\n#define cpresent(c, e) (find(all(c), (e)) != (c).end())\n#define tr(i, c) for (iter(c) i = (c).begin(); i != (c).end(); i++)\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define REP(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)\n\n#define mp make_pair\n#define fst first\n#define snd second\n#define pb push_back\n\n\nconst double EPS = 1e-10;\n\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef complex<double> P;\n\n\nint main() {\n\tchar c;\n\tfor (int a[5]; cin >> a[0]; ) {\n\t\trep(i, 4) cin >> c >> a[i + 1];\n\t\tsort(a, a + 5);\n\t\tmap<int, int> d;\n\t\trep(i, 5) d[a[i]]++;\n\t\tint b[6];\n\t\tmemset(b, 0, sizeof(b));\n\t\ttr(i, d) b[i->snd]++;\n\t\tif (b[4]) cout << \"four card\" << endl;\n\t\telse if (b[3] && b[2]) cout << \"full house\" << endl;\n\t\telse if (b[1] >= 4) {\n\t\t\tbool flg = true;\n\t\t\trep(i, 4) if (a[i] + 1 != a[i + 1]) flg = false;\n\t\t\tif (flg) cout << \"straight\" << endl;\n\t\t\telse {\n\t\t\t\tflg = true;\n\t\t\t\trep(i, 3) if (a[i + 1] + 1 != a[i + 2]) flg = false;\n\t\t\t\tif (flg && a[4] == 13 && a[0] == 1) cout << \"straight\" << endl;\n\t\t\t\telse cout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if (b[3]) cout << \"three card\" << endl;\n\t\telse if (b[2] == 2) cout << \"two pair\" << endl;\n\t\telse if (b[2] == 1) cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t\t\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\nusing namespace std;\n\nint main() {\n  int n[5],k[15],m[15],i,y=0;\n  char c[7][11]={\"null\",\"one pair\",\"two pair\",\"three card\",\"four card\",\"full house\",\"straight\"};\n  while (scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF) {\n  for (i=0;i<15;i++) { m[i]=0; k[i]=0;}\n  for (i=0;i<5;i++) k[n[i]]++;\n  for (i=1;i<14;i++) if (k[i]>0) m[k[i]]++;\n  y=0; k[14]=k[1];\n  if (m[2]>0) y=m[2];\n  if (m[3]==1) if (m[2]==1) y=5; else y=3;\n  if (m[4]==1) y=4;\n  for (i=1;i<11;i++) if (k[i]==1 && k[i+1]==1 && k[i+2]==1 && k[i+3]==1 && k[i+4]==1) y=6; \n  cout << c[y] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<string.h>\n#include<algorithm>\n\nusing namespace std;\n\nint main(void){\n\t\n\tstring yaku[]={\"one pair\",\"two pair\",\"three card\",\"full house\",\"four card\",\"straight\",\"null\"};\n\tint tefuda[5],count[14];\n\tbool flag,straight;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&tefuda[0],&tefuda[1],&tefuda[2],&tefuda[3],&tefuda[4])!=EOF){\n\t\t\n\t\tflag=true;\n\t\tstraight=true;\n\t\t\n\t\tmemset(count,0,sizeof(count));\n\t\t//sort\n\t\tsort(tefuda,tefuda+5);\n\t\t//1-4 pair or fullhouse \n\t\tfor(int i=0;i<4;i++){\n\t\t\tfor(int j=i+1;j<5;j++){\n\t\t\t\tif(tefuda[i]==tefuda[j]){\n\t\t\t\t\tcount[tefuda[i]]++;\n\t\t\t\t\tflag=false;\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\t\n\n\t\t//straight\n\t\tif(flag){\n\t\t\tif(tefuda[0]==1 && tefuda[1]==2){\n\t\t\t\tfor(int i=2;i<5;i++){\n\t\t\t\t\tif(tefuda[i]!=i+1){\n\t\t\t\t\t\tstraight=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(tefuda[0]==1 && tefuda[4]==13){\n\t\t\t\tfor(int i=1;i<4;i++){\n\t\t\t\t\tif(tefuda[i]!=i+9){\n\t\t\t\t\t\tstraight=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int i=tefuda[0];i<5+tefuda[0];i++){\n\t\t\t\t\tif(tefuda[i-tefuda[0]]!=i){\n\t\t\t\t\t\tstraight=false;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(straight){\n\t\t\t\tcout<<yaku[5]<<endl;\t//straight\n\t\t\t\t//break;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcout<<yaku[6]<<endl;\t//null\n\t\t\t\t//break;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tsort(count,count+14);\n\t\t\tif(count[13]==6){\n\t\t\t\tcout<<yaku[4]<<endl;\n\t\t\t}else if(count[12]==1 && count[13]==3){\n\t\t\t\tcout<<yaku[3]<<endl;\n\t\t\t}else if(count[12]==0 && count[13]==3){\n\t\t\t\tcout<<yaku[2]<<endl;\n\t\t\t}else if(count[12]==count[13]){\n\t\t\t\tcout<<yaku[1]<<endl;\n\t\t\t}else if(count[12]<2 && count[13]==1){\n\t\t\t\tcout<<yaku[0]<<endl;\n\t\t\t}\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": " \n #include<iostream>\n #include<stdio.h>\n #include<string>\n #include<math.h>\n #include<iomanip>\n #include<algorithm>\n #include<string.h>\n #include<cctype>\n #include<map>\n #include<set>\n #include<vector>\n #include<sstream>\n #include<stack>\n #include<queue>\n \n using namespace std;\n \n int arr[6];\n \n int main()\n {\n   while(cin>>arr[0])\n   {\n     for(int i=1;i<5;i++)\n     {\n       char temp;\n       cin>>temp>>arr[i];        \n     }                  \n     sort(arr,arr+5);\n     if((arr[0]==arr[1]&&arr[1]==arr[2]&&arr[2]==arr[3])||(arr[1]==arr[2]&&arr[2]==arr[3]&&arr[3]==arr[4])) cout<<\"four card\"<<endl;\n     else if((arr[0]==arr[1]&&arr[1]==arr[2]&&arr[3]==arr[4])||(arr[0]==arr[1]&&arr[2]==arr[3]&&arr[3]==arr[4])) cout<<\"full house\"<<endl;\n     else if((arr[0]==arr[1]&&arr[1]==arr[2])||(arr[1]==arr[2]&&arr[2]==arr[3])||(arr[2]==arr[3]&&arr[3]==arr[4])) cout<<\"three card\"<<endl;\n     else\n     {\n       int count=0;\n       for(int i=0;i<4;i++)\n       {\n         if(arr[i]==arr[i+1]) count++;        \n       }    \n       if(count==1) cout<<\"one pair\"<<endl;\n       else if(count==2) cout<<\"two pair\"<<endl;\n       else\n       {\n         bool flag=true;\n         for(int i=0;i<4;i++)\n         {\n           int kk=arr[i+1]-arr[i];\n           if(!(kk==1||kk==-12))\n           {\n             flag=false;\n             break;                     \n           }          \n         }    \n         if(flag) cout<<\"straight\"<<endl;\n         else cout<<\"null\"<<endl; \n       }\n     }       \n   }\n   //while(1);\n   return 0;\n }\n\n "
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint main(){\n\tchar a;\n\tint c[5]={0};\n\twhile(cin>>c[4]>>a>>c[3]>>a>>c[2]>>a>>c[1]>>a>>c[0]){\n\t\tsort(c,c+5);\n\t\t//cout<<c[4]<<\" \"<<c[3]<<\" \"<<c[2]<<\" \"<<c[1]<<\" \"<<c[0];\n\t\tif(c[4]==c[1]||c[3]==c[0])cout<<\"four card\"<<endl;\n\t\telse if((c[4]==c[2]&&c[0]==c[1])||(c[0]==c[2]&&c[3]==c[4]))cout<<\"full house\"<<endl;\n\t\telse if((c[4]==(c[3]+1)&&c[3]==(c[2]+1)&&c[2]==(c[1]+1)&&c[1]==(c[0]+1))||(c[0]==1&&c[1]==10&&c[2]==11&&c[3]==12&&c[4]==13))cout<<\"straight\"<<endl;\n\t\telse if((c[4]==c[2]&&c[1]!=c[0])||c[3]==c[1]||(c[2]==c[0]&&c[4]!=c[3]))cout<<\"three card\"<<endl;\n\t\telse if((c[4]==c[3]&&(c[2]==c[1]||c[1]==c[0]))||(c[3]==c[2]&&c[1]==c[0])||(c[1]==c[0]&&(c[4]==c[3]||c[3]==c[2])))cout<<\"two pair\"<<endl;\n\t\telse if(c[4]==c[3]||c[3]==c[2]||c[2]==c[1]||c[1]==c[0])cout<<\"one pair\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n \n    int a[5];\n    int kari;\n    char d;\n     \n    while (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n        for (int i = 4; i > 0; i--) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] > a[j+1]) {\n                    kari = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = kari;\n                }\n            }\n        }\n        if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n            if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n                if (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n                    cout << \"full house\" << endl;\n                } else if ((a[0] == a[1] && a[1] == a[2] && [2]==a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n                    cout << \"four card\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n            } else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n                    cout << \"four card\" << endl;\n                } else {\n                    cout << \"two pair\" << endl;\n                }\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n            cout << \"straight\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ninline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}\n\ntemplate<class T> inline T sqr(T x) {return x*x;}\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nint dx[4] = {-1, 0, 1, 0};\nint dy[4] = {0, -1, 0, 1};\n\nint main() {\n  int c[5];\n\n  while(scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF) {\n    int n[13] = {};\n    REP(i, 5) n[c[i]-1]++;\n\n    int first = 0, second = 0, straight = 0;\n    REP(i, 13) {\n      if(n[i] > 0 && n[(i+1)%13] > 0) \n\tstraight++;\n      if(first < n[i]) {\n\tsecond = first;\n\tfirst = n[i];\n      } else if(second < n[i]) {\n\tsecond = n[i];\n      }\n    }\n\n    if(first == 4) cout << \"four card\" << endl;\n    else if(first == 3) {\n      if(second == 2) cout << \"full house\" << endl;\n      else cout << \"three card\" << endl;\n    }\n    else if(straight == 4 ) {\n      if(n[12] > 0 && n[0] > 0 && n[1] > 0) cout << \"null\" << endl;\n      else cout << \"straight\" << endl;\n    }\n    else if(first == 2 && second == 2) cout << \"two pair\" << endl;\n    else if(first == 2) cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint cmp(const void *a, const void *b){\n\treturn *(int*)a - *(int*)b;\n}\n\nint getpair(const int *cards, int n){\n\tint flag = 0;\n\tif(n>=2 && cards[0] == cards[1]){\n\t\tflag = 0x1;\n\t\tif(n>=3 && cards[1] == cards[2]){\n\t\t\tflag = 0x100;\n\t\t\tif(n>=4 && cards[2] == cards[3]){\n\t\t\t\tflag = 0x1000;\n\t\t\t}else if(n==5 && getpair(cards+3, 2) == 0x1){\n\t\t\t\tflag = 0x101;\n\t\t\t}\n\t\t}else if(n==5 && getpair(cards+2, 3) == 0x100){\n\t\t\tflag = 0x101;\n\t\t}else if((n>=4 && getpair(cards+2, 2)) ||\n\t\t\t(n==5 && getpair(cards+3, 2))){\n\t\t\tflag = 0x10;\n\t\t}\n\t}\n\treturn flag;\n}\n\nint main(void){\n\tint cards[5];\n\tint flag = 0;\n\tfor(int i=0;i<5;++i){\n\t\tcards[i] = 0;\n\t}\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",\n\t\tcards, cards+1, cards+2, cards+3, cards+4) != EOF){\n\t\tqsort(cards, 5, sizeof(int), cmp);\n\t\tif(cards[0] + 1 == cards[1] &&\n\t\t\tcards[1] + 1 == cards[2] &&\n\t\t\tcards[2] + 1 == cards[3] &&\n\t\t\tcards[3] + 1 == cards[4]){\n\t\t\tputs(\"straight\");\n\t\t\tcontinue;\n\t\t}else \n\t\tif(cards[0] == 1 && cards[1] == 10 && cards[2] == 11 &&\n\t\t\tcards[3] == 12 && cards[4] == 13){\n\t\t\tputs(\"straight\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor(int i=0; i<4; ++i){\n\t\t\tflag = getpair(cards+i, 5-i);\n\t\t\tif(flag > 0){ break; }\n\t\t}\n\n\t\tswitch(flag){\n\t\tcase 0x1000:\n\t\t\tputs(\"four card\");\n\t\t\tbreak;\n\t\tcase 0x101:\n\t\t\tputs(\"full house\");\n\t\t\tbreak;\n\t\tcase 0x100:\n\t\t\tputs(\"three card\");\n\t\t\tbreak;\n\t\tcase 0x10:\n\t\t\tputs(\"two pair\");\n\t\t\tbreak;\n\t\tcase 0x1:\n\t\t\tputs(\"one pair\");\n\t\t\tbreak;\n\t\tcase 0x0:\n\t\t\tputs(\"null\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n      }\n    }\n    mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    //printf(\"mx = %d\\n\", mx);\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c == 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      for (int i = 0;  i< mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n\tprintf(\"three card\\n\");\n\tgoto end;\n      }\n    } else if (mx == 4 || mx == 5) {\n      printf(\"four card\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\n#define ACE 14\nint is4card(int cnt[]);\nint isFullHouse(int cnt[]);\nint isStraight(int cnt[]);\nint is3card(int cnt[]);\nint is2pair(int cnt[]);\nint is1pair(int cnt[]);\n\nint main(void){\n    int c[5];\n    int count[ACE+1];\n    \n    while (scanf(\"%d,%d,%d,%d,%d\", c+0, c+1, c+2, c+3, c+4) != EOF){\n        for (int i=2; i<=ACE; i++) count[i]=0;\n        for (int i=0; i<5; i++){\n            if (c[i]==1) c[i]=ACE;\n            count[c[i]]++;\n        }\n        for (int i=2; i<=ACE; i++) printf(\"%d \",count[i]);\n        printf(\"\\n\");\n        \n        if (is4card(count)) printf(\"four card\\n\");\n        else if (isFullHouse(count)) printf(\"full house\\n\");\n        else if (isStraight(count)) printf(\"straight\\n\");\n        else if (is3card(count)) printf(\"three card\\n\");\n        else if (is2pair(count)) printf(\"two pair\\n\");\n        else if (is1pair(count)) printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}\n\nint is4card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 4) return 1;\n    }\n    return 0;\n}\n\nint isFullHouse(int cnt[]){\n    return is3card(cnt) && is1pair(cnt);\n}\n\nint isStraight(int cnt[]){\n    int len=0;\n    \n    for (int i=2; i<=ACE; i++){\n        if (cnt[i]==0) len=0;\n        else {\n            len++;\n            if (len==5) return 1;\n        }\n    }\n    return 0;\n}\n\nint is3card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 3) return 1;\n    }\n    return 0;\n}\n\nint is2pair(int cnt[]){\n    int i,j;\n    // find the first pair\n    for (i=2; i<=ACE; i++){\n        if (cnt[i] == 2) break;\n    }\n    if (i>ACE) return 0;\n    // find second pair\n    for (j=2; j<=ACE; j++){\n        if (i==j) continue;\n        if (cnt[j] == 2) return 1;\n    }\n    return 0;\n}\n\nint is1pair(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 2) return 1;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring yaku(vector<int> v) {\n    int num[13] = {};\n    for (int x : v) num[x-1] ++;\n\n    int c2 = 0, c3 = 0, c4 = 0;\n    bool straight = false;\n    for (int i=0; i<13; ++i) {\n        c4 += (num[i] == 4);\n        c3 += (num[i] == 3);\n        c2 += (num[i] == 2);\n        if (i+4 < 13) {\n            straight |= (num[i] && num[i+1] && num[i+2] && num[i+3] && num[i+4]);\n        }\n    }\n    straight |= (num[0] && num[9] && num[10] && num[11] && num[12]);\n\n    if (straight) return \"straight\";\n    if (c3 & c2) return \"full house\";\n    if (c4) return \"four card\";\n    if (c3) return \"three card\";\n    if (c2 == 2) return \"two pair\";\n    if (c2) return \"one pair\";\n    return \"null\";\n}\n\nint main() {\n    vector<int> v(5);\n    char c;\n    while (cin>>v[0]>>c>>v[1]>>c>>v[2]>>c>>v[3]>>c>>v[4]) {\n        cout << yaku(v) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint h[5];\n\nbool four_card() {\n    if ( (h[0] == h[1] && h[1] == h[2] && h[2] == h[3]) ||\n         (h[1] == h[2] && h[2] == h[3] && h[3] == h[4]) )\n        return true;\n    else \n        return false;\n}\n\nbool full_house() {\n    if ( ((h[0] == h[1] && h[1] == h[2]) && (h[3] == h[4])) || ((h[0] == h[1]) && (h[2] == h[3] && h[3] == h[4])) ) \n        return true;\n     else\n        return false;\n}\n\nbool three_card() {\n    if ( (h[0] == h[1] && h[1] == h[2]) ||\n         (h[1] == h[2] && h[2] == h[3]) ||\n         (h[2] == h[3] && h[3] == h[4]) ) \n        return true;\n    else \n        return false;\n}\n\nbool straight() {\n    if ( (h[0] + 1 == h[1]) &&\n         (h[1] + 1 == h[2]) &&\n         (h[2] + 1 == h[3]) &&\n         (h[3] + 1 == h[4]) )\n        return true;\n    else {\n        if (h[0] == 1 && h[1] == 10 \n                      && h[2] == 11\n                      && h[3] == 12\n                      && h[4] == 13)\n            return true;\n        return false;\n    }\n}\n\nbool two_pair() {\n    if ( (h[0] == h[1] && h[2] == h[3]) ||\n         (h[0] == h[1] && h[3] == h[4]) ||\n         (h[1] == h[2] && h[3] == h[4]) )\n        return true;\n    else \n        return false;\n}\n        \nbool one_pair() {\n    if (h[0] == h[1] || h[1] == h[2] || h[2] == h[3] || h[3] == h[4]) \n        return true;\n    else \n        return false;\n}\n\nvoid find_hand() {\n    sort(h, h+5);\n    if (four_card()) {\n        cout << \"four card\" << endl;\n    } else if (full_house()) {\n        cout << \"full house\" << endl;\n    } else if (straight()) {\n        cout << \"straight\" << endl;\n    } else if (three_card()) {\n        cout << \"three card\" << endl;\n    } else if (two_pair()) {\n        cout << \"two pair\" << endl;\n    } else if (one_pair()) {\n        cout << \"one pair\" << endl;\n    } else {\n        cout << \"null\" << endl;\n    }\n}\n\nint main() {\n    char dm;\n    while (cin >> h[0] >> dm \n               >> h[1] >> dm\n               >> h[2] >> dm\n               >> h[3] >> dm\n               >> h[4] ) {\n        find_hand();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[6];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tif(i!= 4) scanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\tif(check[i] == 3) three++;\n\t\t\t\tif(check[i] == 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(three == 1) printf(\"full house\\n\");\n\t\t\telse if(pair == 2) printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three == 1) \n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four == 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nint main()\n{\n\tint a[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tmap<int,int> count;\n\t\tsort(a,a+5);\n\t\tfor(int i=0;i<5;i++){\n\t\t\tcount[a[i]]++;\n\t\t}\n\t\tint times[13],times2[13];\n\t\tfor(int i=1;i<=13;i++)\n\t\t\ttimes2[i-1]=count[i];\n\t\tsort(times2,times2+13);\n\t\tfor(int i=0;i<13;i++)\n\t\t\ttimes[i]=times2[12-i];\n\t\tif(times[0]==4) cout << \"four card\" << endl;\n\t\telse if(times[0]==3 && times[1]==2) cout << \"full house\" << endl;\n\t\telse if( (a[1]==a[0]+1 &&a[2]==a[1]+1 &&a[3]==a[2]+1 &&a[4]==a[3]+1) || \n\t\t\t(a[0]==1 && a[1]==10 && a[2]==a[1]+1 &&a[3]==a[2]+1 &&a[4]==a[3]+1) ) cout << \"straight\" <<endl;\n\t\telse if(times[0]==3 ) cout << \"three card\" << endl;\n\t\telse if(times[0]==2 && times[1]==2) cout << \"two pair\" << endl;\n\t\telse if(times[0]==2) cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <utility>\n#include <sstream>\n#include <complex>\n\nusing namespace std;\n\n#define FOR(i,a,b) for(long long i=(a);i<(b);i++)\n#define REP(i,N) for(long long i=0;i<(N);i++)\n#define ALL(s) (s).begin(),(s).end()\n#define fi first\n#define se second\n\n#define PI acos(-1.0)\n#define INF 1000000007\n#define MAX_N 5001\n#define EPS 1e-10\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\ntypedef pair<string, ll> PS;\ntypedef vector<ll> V;\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <utility>\n#include <sstream>\n#include <complex>\n\nusing namespace std;\n\n#define FOR(i,a,b) for(long long i=(a);i<(b);i++)\n#define REP(i,N) for(long long i=0;i<(N);i++)\n#define ALL(s) (s).begin(),(s).end()\n#define fi first\n#define se second\n\n#define PI acos(-1.0)\n#define INF 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\ntypedef pair<double, double> PD;\ntypedef pair<string, ll> PS;\ntypedef vector<ll> V;\n\nint co[110];\nchar k;\nint a;\n\nint main(){\n\twhile (cin >> a){\n\t\tREP(i, 100){\n\t\t\tco[i] = -1;\n\t\t}\n\t\tco[a] = 1;\n\t\tREP(i, 4){\n\t\t\tcin >> k >> a;\n\t\t\tif (co[a] == -1){\n\t\t\t\tco[a] = 1;\n\t\t\t}\n\t\t\telse co[a]++;\n\t\t}\n\n\t\tbool f = 0;\n\t\tfor (int i = 1; i <= 9; i++){\n\t\t\tif (co[i]==1 && co[i + 1]==1 && co[i + 2]==1 && co[i + 3]==1 && co[i + 4]==1){\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tf = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (f)continue;\n\t\tif (co[1]==1 && co[10]==1 && co[11]==1 && co[12]==1 && co[13]==1){\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tint p2 = 0, p3 = 0, p4 = 0;\n\t\tREP(i, 14){\n\t\t\tif (co[i] == 4)p4++;\n\t\t\tif (co[i] == 3)p3++;\n\t\t\tif (co[i] == 2)p2++;\n\t\t}\n\t\tif (p4)\tcout << \"four card\" << endl;\n\t\telse if (p3&&p2)cout << \"full house\" << endl;\n\t\telse if (p3)cout << \"three card\" << endl;\n\t\telse if (p2 == 2)cout << \"two pair\" << endl;\n\t\telse if (p2)cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\nusing namespace std;\n\nbool is_straight(int* cards) {\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor(int j=0;j<4;j++){\n\t\t\tif (cards[j] > cards[j + 1]) {\n\t\t\t\tint tmp = cards[j];\n\t\t\t\tcards[j] = cards[j + 1];\n\t\t\t\tcards[j + 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tif (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)return true;\n\tint tmp = cards[0];\n\tif (tmp + 1 == cards[1] && tmp + 2 == cards[2] && tmp + 3 == cards[3] && tmp + 4 == cards[4])return true;\n\treturn false;\n}\nint main() {\n\tint cards[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF) {\n\t\tint same_cards1 = 0, same_cards2 = 4; int tmp;\n\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\ttmp = 0;\n\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\tif (cards[i] == cards[j])tmp++;\n\t\t\t}\n\t\t\tif (tmp > same_cards1)same_cards1 = tmp;\n\t\t\tif (tmp < same_cards2)same_cards2 = tmp;\n\t\t}\n\t\tif (same_cards1 == 4)cout << \"four cards\" << endl;\n\t\telse if (same_cards1 == 3 && same_cards2 == 2)cout << \"full house\" << endl;\n\t\telse if (is_straight(cards))cout << \"straight\" << endl;\n\t\telse if (same_cards1==3)cout << \"three cards\" << endl;\n\t\telse if (5-same_cards1-same_cards2==2)cout << \"two pair\" << endl;\n\t\telse if (same_cards1 == 2)cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF INT_MAX / 3\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define FORALL(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define FOREACH(i,c) for(auto (i) : (c))\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef valarray<int> Array;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cout<<a[i];if(i==a.size()-1)cout<<endl;else cout<<\" \";}}\nint gcd(int a,int b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nint lcm(int a,int b){return a==0||b==0?0:a*b/gcd(a,b);}\n\nvoid solve(int a1, int a2, int a3, int a4, int a5)\n{\n  int a[13]; fill_n(a,13,0);\n  a[--a1]++;a[--a2]++;a[--a3]++;a[--a4]++;a[--a5]++;\n  int m = 0; bool f = false;\n  vector<int> s;\n  string ans;\n  REP(i,13)\n  {\n    m = max(a[i],m);\n    if(a[i]>0)\n    {\n      bool flag = true;\n      s.push_back(a[i]);\n      REP(j,5) if(a[(i+j)%13] == 0)\n      {\n        flag = false;\n        break;\n      }\n      f = f || flag;\n    }\n  }\n  if(m >= 4) ans = \"four card\";\n  else if(s.size()==2) ans = \"full house\";\n  else if(f) ans = \"straight\";\n  else\n  {\n    int b[3]; fill_n(b,3,0);\n    REP(i,s.size()) b[s[i]-1]++;\n    if(b[2] > 0) ans = \"three card\";\n    else if(b[1] > 1) ans = \"two card\";\n    else if(b[1] > 0) ans = \"one pair\";\n    else ans = \"null\";\n  }\n  printf(\"%s\\n\",ans.c_str());\n}\n\nint main()\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  int a,b,c,d,e;\n  while(~scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e))\n    solve(a,b,c,d,e);\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nbool isFourCards(int* cards) {\n    return cards[0] == cards[3] || cards[1] == cards[4];\n}\n\nbool isFullHouse(int* cards) {\n    return cards[0] == cards[1] && cards[3] == cards[4] && (cards[2] == cards[1] || cards[2] == cards[3]);\n}\n\nbool isStraight(int* cards) {\n    return cards[1] + 1 == cards[2] && cards[2] + 1 == cards[3] && cards[3] + 1 == cards[4]\n        && (cards[0] + 1 == cards[1] || (cards[0] == 1 && cards[4] == 13));\n}\n\nbool isThreeCards(int* cards) {\n    return (cards[0] == cards[1] && cards[1] == cards[2])\n        || (cards[1] == cards[2] && cards[2] == cards[3])\n        || (cards[2] == cards[3] && cards[3] == cards[4]);\n}\n\nbool isTwoPairs(int* cards) {\n    return (cards[0] == cards[1] && cards[2] == cards[3])\n        || (cards[0] == cards[1] && cards[3] == cards[4])\n        || (cards[1] == cards[2] && cards[3] == cards[4]);\n}\n\nbool isOnePair(int* cards) {\n    return cards[0] == cards[1] || cards[1] == cards[2] || cards[2] == cards[3] || cards[3] == cards[4];\n}\n\nint main() {\n    const char* hands[] = {\n        \"four card\", \"full house\", \"straight\", \"three card\", \"two pair\", \"one pair\", \"null\",\n    };\n    int cards[5];\n    while (scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF) {\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4 - i; j++) {\n                if (cards[j] > cards[j + 1]) {\n                    int temp = cards[j];\n                    cards[j] = cards[j + 1];\n                    cards[j + 1] = temp;\n                }\n            }\n        }\n        int ret = 6;\n        if (isFourCards(cards)) {\n            ret = 0;\n        } else if (isFullHouse(cards)) {\n            ret = 1;\n        } else if (isStraight(cards)) {\n            ret = 2;\n        } else if (isThreeCards(cards)) {\n            ret = 3;\n        } else if (isTwoPairs(cards)) {\n            ret = 4;\n        } else if (isOnePair(cards)) {\n            ret = 5;\n        }\n        cout << hands[ret] << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\n\nusing namespace std;\n\nint solve(vector<int> _p, string *result){\n\n\tvector <int> cnt(5, 0);\n\tint max = 0;\n\tint cnt_pair = 0;\n\n\tfor (int i = 0; i < 5; i++){\n\t\tfor (int j = 0; j < 5; j++){\n\t\t\tif (_p[i] == _p[j]){\n\t\t\t\tcnt[i]++;\n\t\t\t\tif (cnt[i]>max) max = cnt[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (max == 4){\n\t\t*result = \"four card\";\n\t}\n\telse if (max == 3){\n\t\t*result = \"three card\";\n\t\tfor (int i = 0; i < 5; i++){\n\t\t\tif (cnt[i] == 2){\n\t\t\t\t*result = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (max == 2){\n\t\t*result = \"one pair\";\n\t\tfor (int i = 0; i < 5; i++){\n\t\t\tif (cnt[i] == 2){\n\t\t\t\tcnt_pair++;\n\t\t\t}\n\t\t}\n\t\tif (cnt_pair == 4){\n\t\t\t*result = \"two pair\";\n\t\t}\n\t}\n\telse{\n\t\t*result = \"straight\";\n\t\tsort(_p.begin(), _p.end());\n\n\t\tif ((_p[0] + 1 == _p[1]) || (_p[0] == 1 && _p[1] == 10))\n\t\t\t;\n\t\telse\n\t\t\t*result = \"null\";\n\n\t\tfor (int i = 1; i < 4; i++){\n\t\t\tif (_p[i]+1 != _p[i+1]){\n\t\t\t\t*result = \"null\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t//*result = \"one pair\";\n\treturn 1;\n}\n\nint main(){\n\n\tint buf;\n\tchar dummy;\n\tvector<int> p;\n\tstring result;\n\n\twhile (1){\n\t\tfor (int i = 0; i < 4; i++){\n\t\t\tif (cin >> buf >> dummy);else return 0;\n\t\t\tp.push_back(buf);\n\t\t}\n\t\tcin >> buf;\n\t\tp.push_back(buf);\n\n\n\t\tsolve(p, &result);\n\t\t\n\t\tcout << result << endl;\n\n\t\tp.clear();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <complex>\n#include <functional>\n#include <utility>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cctype>\n\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define debug(n) cout<<__FILE__<<\",\"<<__LINE__<<\": #\"<<#n<<\"=\"<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define rep(i,n) repi(i,0,n)\n#define iter(c) __typeof((c).begin())\n#define tr(c,i) for(iter(c) i=(c).begin();i!=(c).end();i++)\n#define allof(c) (c).begin(),(c).end()\n#define mp make_pair\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nint main()\n{\n\tfor(int a[5];cin>>a[0];){\n\t\trepi(i,1,5)\n\t\t\tscanf(\",%d\",a+i);\n\t\tsort(a,a+5);\n\t\t\n\t\tint hist[13]={0};\n\t\trep(i,5)\n\t\t\thist[a[i]-1]++;\n\t\tsort(hist,hist+13,greater<int>());\n\t\t\n\t\tstring res;\n\t\tif(hist[0]==4)\n\t\t\tres=\"four card\";\n\t\telse if(hist[0]==3 && hist[1]==2)\n\t\t\tres=\"full house\";\n\t\telse if(a[0]+1==a[1] && a[1]+1==a[2] && a[2]+1==a[3]&& a[3]+1==a[4] ||\n\t\t\t\ta[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)\n\t\t\tres=\"straight\";\n\t\telse if(hist[0]==3)\n\t\t\tres=\"three card\";\n\t\telse if(hist[0]==2 && hist[1]==2)\n\t\t\tres=\"two pair\";\n\t\telse if(hist[0]==2)\n\t\t\tres=\"one pair\";\n\t\telse\n\t\t\tres=\"null\";\n\t\t\n\t\tcout<<res<<endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring pairs[2][3] = { {\"null\",\"one pair\",\"two pair\"},\n\t\t\t\t\t  {\"three card\",\"full house\",\"\"} };\n\nint main() {\n\tint n, c, three, two;\n\tchar t;\n\tstring res;\n\twhile (true) {\n\t\tint card[13] = { 0 }, c = 0, three = 0, two = 0;\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tcin >> n >> t;\n\t\t\tcard[n - 1]++;\n\t\t}\n\t\tcin >> n;\n\t\tcard[n - 1]++;\n\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (card[i] == 4) {\n\t\t\t\tc = 114514;\n\t\t\t\tbreak;\n\t\t\t} else if(card[i] == 3) {\n\t\t\t\tthree++;\n\t\t\t} else if(card[i] == 2) {\n\t\t\t\ttwo++;\n\t\t\t}\n\n\t\t\tif (card[i] == 1) {\n\t\t\t\tc++;\n\n\t\t\t\tif (c == 4 && i == 12 && card[0] == 1) {\n\t\t\t\t\tc = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if(card[i] == 0 && c != 5 && c > 0) {\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\t\tif (c == 5) {\n\t\t\tcout << \"straight\" << endl;\n\t\t} else if (c == 114514) {\n\t\t\tcout << \"four card\" << endl;\n\t\t} else {\n\t\t\tcout << pairs[three][two] << endl;\n\t\t}\n\t\t\n\t\tif (!cin) break;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* AOJ 0038*/\n\n#include<iostream>\n\nusing namespace std;\n\nvoid Swap(int *a,int *b){\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid BabbleSort(int *data,int n){\n\n\tint i,j;\n\tfor(i=0;i<n-1;i++){\n\t\tfor(j=n-1;j>i;j--){\n\t\t\tif(data[j] <= data[j-1]){\n\t\t\t\tSwap(&data[j],&data[j-1]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n//onePair or threeCards or fourCards\nint isSameCard(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tBabbleSort(tmp,13);\n\n\tif(tmp[12]==3 && tmp[11] == 2){\n\t\treturn 6;//フルハウス\n\t}\n\telse if(tmp[12] == 4){\n\t\treturn 7;//フォーカード\n\t}\n\telse if(tmp[12] == 3){\n\t\treturn 4;\n\t}\n\telse if(tmp[12] == 2 && tmp[11] == 2){\n\t\treturn 3;\n\t}\n\telse if(tmp[12] == 2){\n\t\treturn 2;\n\t}\n\telse{\n\t\treturn 1;\n\t}\n}\n\nint isStraight(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tif(tmp[9] == 1 && tmp[10] == 1 && tmp[11] == 1 && tmp[12]==1 && tmp[0]==1){\n\t\treturn 5;\n\t}\n\telse{\n\t\tfor(int i=0;i<13-5;i++){\n\t\t\tif(tmp[i]==1&&tmp[i+1]==1&&tmp[i+2]==1&&tmp[i+3]==1&&tmp[i+4]==1){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\nint main(){\n\n\tint data[5];\n\tchar tmp;\n\n\twhile(cin>>data[0]){\n\t\tcin>>tmp;\n\t\tcin>>data[1];\n\t\tcin>>tmp;\n\t\tcin>>data[2];\n\t\tcin>>tmp;\n\t\tcin>>data[3];\n\t\tcin>>tmp;\n\t\tcin>>data[4];\n\n\t\tBabbleSort(data,5);\n\n\t\tswitch(isSameCard(data)){\n\n\t\tcase 7:\n\t\t\tcout<<\"four cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tcout<<\"full house\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"three cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\t\n\t\t\tif(isStraight(data) == 5){\n\t\t\t\tcout<<\"straight\"<<endl;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcout<<\"null\"<<endl;\n\t\t\t}\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0; int three = 0; int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump);\n\n  int a = 0;\n  int b = 0;\n\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e && e != 49){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    ++check[e];\n  }\n\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main(){\n    int a[5];\n    while(scanf(\"%d\",&a[0])!=EOF){\n        for(int i=1;i<5;i++)scanf(\",%d\",&a[i]);\n        sort(a,a+5);\n        if(a[0]==a[3]||a[1]==a[4])cout<<\"four card\"<<endl;\n        else if((a[0]==a[1]&&a[3]==a[4])&&(a[1]==a[2]||a[2]==a[3]))cout<<\"full house\"<<endl;\n        else if(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)cout<<\"straight\"<<endl;\n        else if(a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4])cout<<\"straight\"<<endl;\n        else if(a[0]==a[2]||a[1]==a[3]||a[2]==a[4])cout<<\"three card\"<<endl;\n        else{\n            int cou=0;\n            for(int i=0;i<4;i++){\n                if(a[i]==a[i+1])cou++;\n            }\n            if(cou==2)cout<<\"two pair\"<<endl;\n            else if(cou)cout<<\"one pair\"<<endl;\n            else cout<<\"null\"<<endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\n\nvoid toint(string s, int cards[5]){\n\n\tint m=0;\n\n\n\tfor(int i=0;i<5;++i){\n\t\tint n=0;\n\n\t\tif(s[m]==',' || s[m]=='\\0'){\n\t\t\tcards[i] = n;\n\t\t\t++m;\n\t\t\tcontinue;\n\t\t}\n\n\t\tn += n*10 + s[m]-'0';\n\t\t++m;\n\t\t--n;\n\t}\n}\n\nint main(){\n\n\tstring s, res;\n\tint card[5] = {1,2,3,4,5};\n\t\n\n\tcin >> s;\n\n\ttoint(s,card);\n\n\tswitch Result(card){\n\t\tcase 1:res=\"null\";break;\n\t\tcase 2:res=\"one pair\";break;\n\t\tcase 3:res=\"two pair\";break;\n\t\tcase 4:res=\"three card\";break;\n\t\tcase 5:res=\"straight\";break;\n\t\tcase 6:res=\"full house\";break;\n\t\tcase 7:res=\"four card\";break;\n\t}\n\n\t\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<string>\nusing namespace std;\n\nint a[5];\n\nstring S;\n\nstring poker(int p, int q, int r, int s, int t)\n{\n\tif (p == q && q == r && r == s)\n\t{\n\t\treturn \"four card\";\n\t}\n\tif (s == t && q == r && r == s)\n\t{\n\t\treturn \"four card\";\n\t}\n\tif (p == q && q == r && s == t)\n\t{\n\t\treturn \"full house\";\n\t}\n\tif (p == q && r == s && s == t)\n\t{\n\t\treturn \"full house\";\n\t}\n\tif (p == q - 1 && q == r - 1 && r == s - 1 && s == t - 1)\n\t{\n\t\treturn \"straight\";\n\t}\n\tif (p == 1 && q == 10 && r == 11 && s == 12 && t == 13)\n\t{\n\t\treturn \"straight\";\n\t}\n\tif (p == q && q == r)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (r == s && q == r)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (r == s && s == t)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (p == q && r == s)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (p == q && s == t)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (q == r && s == t)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (p == q)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (q == r)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (r == s)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (s == t)\n\t{\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main() {\n\twhile (cin >> S)\n\t{\n\t\tint cnt = 0;\n\t\tstring U = \"\";\n\t\tS += ',';\n\t\tfor (int i = 0; i < S.size(); i++)\n\t\t{\n\t\t\tif (S[i] == ',')\n\t\t\t{\n\t\t\t\ta[cnt] = stoi(U);\n\t\t\t\tU = \"\";\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tU += S[i];\n\t\t\t}\n\t\t}\n\t\tsort(a, a + 5);\n\t\tcout << poker(a[0], a[1], a[2], a[3], a[4]) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n\nint main(){\n\tint t;\n\twhile(scanf(\"%d\", &t) + 1){\n\t\tint a[14] = {};\n\t\tint b[5] = {};\n\t\ta[t]++;\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tscanf(\",%d\", &t);\n\t\t\ta[t]++;\n\t\t}\n\t\tt = 0;\n\t\tfor(int i = 1; i < 14; i++){\n\t\t\tif(a[i]){\n\t\t\t\tt++;\n\t\t\t}else{\n\t\t\t\tt = 0;\n\t\t\t}\n\n\t\t\tb[a[i]]++;\n\t\t\tif(t == 5){\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(t == 4 && a[1]){\n\t\t\tprintf(\"straight\\n\");\n\t\t}else{\n\t\t\tif(b[4]){\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t}else if(b[3]){\n\t\t\t\tif(b[2]){\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t}else{\n\t\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\t}\n\t\t\t}else if(b[2]){\n\t\t\t\tif(b[2] -1){\n\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t}else{\n\t\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(t != 5){\n\t\t\t\t\tprintf(\"null\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n\nint main(){\n\tint c;\n\tint cards[14], pairs[5];\n\twhile( scanf(\"%d\", &c )!=-1 ){\n\t\tmemset( cards, 0, sizeof(cards) );\n\t\tmemset( pairs, 0, sizeof(pairs) );\n\t\tcards[c]++;\n\t\tfor( int i=0; i<4; i++ ){\n\t\t\tscanf(\",%d\",&c);\n\t\t\tcards[c]++;\n\t\t}\n\t\tfor( int i=1; i<=13; i++ ){\n\t\t\tpairs[cards[i]]++;\n\t\t}\n\t\tif( pairs[4] ){\n\t\t\tcout << \"four card\" << endl;\n\t\t}else if( pairs[3] && pairs[2] ){\n\t\t\tcout << \"full house\" << endl;\n\t\t}else if( pairs[1] == 5 ){\n\t\t\tint i=1;\n\t\t\tfor( ; i<=10; i++ ){\n\t\t\t\tif( cards[i] && cards[i+1] && cards[i+2] && cards[i+3] && cards[((i+3)%13)+1] ){\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( i>10 )\n\t\t\t\tcout << \"null\" << endl;\n\t\t}else if( pairs[3] ){\n\t\t\tcout << \"three card\" << endl;\n\t\t}else if( pairs[2] == 2 ){\n\t\t\tcout << \"two pair\" << endl;\n\t\t}else if( pairs[2] ){\n\t\t\tcout << \"one pair\" << endl;\n\t\t}else{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"null\"};\n\nint str(int n){\n\tcout << s[n] << endl;\n\treturn 0;\n}\n\nint main(){\n\tint a[5], t[14], ans, m;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1, m = 0;\n\t\tsort(a, a+5);\n\t\tfill(t, t+14, 0);\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tt[a[i]]++;\n\t\t\tif(m < t[a[i]])m = t[a[i]];\n\t\t}\n\t\t\n\t\tint flag = 0;\n\t\tif(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){str(3);continue;}\n\t\tfor(int i = 1;i < 5 && a[i-1]+1 == a[i];i++)flag = i;\n\t\tif(flag == 4){str(3);continue;}\n\t\t\n\t\tif(m == 4){cout << \"four card\" << endl;continue;}\n\t\tif(m == 3){\n\t\t\tint f = 1;\n\t\t\tfor(int i = 1;i <= 13;i++){\n\t\t\t\tif(t[i] == 2)f = 0;\n\t\t\t}\n\t\t\tif(!f){cout << \"full house\" << endl;continue;}\n\t\t\tans = 2;\n\t\t}\n\t\t\n\t\tfor(int i = 1;i <= 13;i++){\n\t\t\tif(!ans && t[i] == 2)ans = 1;\n\t\t\tif(ans != 1 && t[i] == 2)ans = 0;\n\t\t}\n\t\tif(ans == -1)ans = 4;\n\t\tstr(ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint straight(int[]);\n\nint main() {\n\n\tint ans, h[5];\n\tchar s;\n\n\twhile(1) {\n\t\tans=0;\n\t\tcin >> h[0] >> s >> h[1 ]>> s >> h[2] >> s >> h[3] >> s >> h[4];\n\t\tsort(h, h+5);\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(h))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n\n}\n\nint straight(int h[5]) {\n\n\tfor(int i=0; i<9; i++) {\n\t\tif(h[4]=i+4&&h[3]==i+3&&h[2]==i+2&&h[1]==i+1&&h[0]==i||h[0]==1&&h[1]==10&&h[2]==11&&h[3]==12&&h[4]==13)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <string>\n#include <stack>\n#include <iomanip>\n#include <numeric>\n#include <queue>\n#include <climits>\n#include <complex>\n#include <cmath>\n#include <map>\nusing namespace std;\nusing ll = long long;\n#define MOD 1000000007\n#define INF 1LL << 59\n\nvector<string> v;\n\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n    //cout << fixed << setprecision(3);\n\n    int a, b, c, d, e;\n    while (scanf(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e) != EOF)\n    {\n        int arr[14];\n        for (int i = 0; i < 14; ++i)\n            arr[i] = 0;\n\n        arr[a]++;\n        arr[b]++;\n        arr[c]++;\n        arr[d]++;\n        arr[e]++;\n\n        bool checked = false;\n        for (int i = 1; i <= 13; ++i)\n        {\n            if (arr[i] == 4)\n            {\n                cout << \"four card\" << endl;\n                checked = true;\n            }\n        }\n        if (checked)\n            continue;\n\n        bool two = false, two2 = false, three = false;\n        for (int i = 1; i <= 13; ++i)\n        {\n            if (two == true && arr[i] == 2)\n                two2 = true;\n            if (arr[i] == 2)\n                two = true;\n\n            if (arr[i] == 3)\n                three = true;\n        }\n        if (two && three)\n        {\n            cout << \"full house\" << endl;\n            checked = true;\n        }\n        if (checked)\n            continue;\n\n        bool str = false;\n\n        for (int i = 1; i <= 13 - 4; ++i)\n        {\n            if (arr[i] == 1 && arr[i + 1] == 1 && arr[i + 2] == 1 && arr[i + 3] == 1 && arr[i + 4] == 1)\n                str = true;\n        }\n\n        if (str == true || (arr[1] == 1 && arr[1] == arr[2] && arr[2] == arr[3] && arr[3] == arr[4] && arr[4] == arr[5]) || (arr[1] == 1 && arr[1] == arr[10] && arr[10] == arr[11] && arr[11] == arr[12] && arr[12] == arr[13]))\n        {\n            cout << \"straight\" << endl;\n            checked = true;\n        }\n\n        if (checked)\n            continue;\n\n        if (three)\n        {\n            cout << \"three card\" << endl;\n            checked = true;\n        }\n        if (checked)\n            continue;\n\n        if (two && two2)\n        {\n            cout << \"two pair\" << endl;\n            checked = true;\n        }\n        if (checked)\n            continue;\n\n        if (two)\n        {\n            cout << \"one pair\" << endl;\n            checked = true;\n        }\n        if (checked)\n            continue;\n\n        cout << \"null\" << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n\nint main()\n{\n\twhile(1)\n\t{\n\t\tint card[14]={0};\n\t\tbool two=0,two2=0,three=0,four=0,strate=0;\n\t\tfor(int i=0;i<5;i++)\n\t\t{\n\t\t\tint temp;\n\t\t\tif(scanf(\"%d,\",&temp)==EOF)\n\t\t\t\treturn 0;\n\t\t\tcard[temp]++;\n\t\t}\n\t\tfor(int i=1;i<14;i++)\n\t\t{\n\t\t\tif(card[i]==2)\n\t\t\t{\n\t\t\t\tif(two)\n\t\t\t\t\ttwo2=true;\n\t\t\t\telse\n\t\t\t\t\ttwo=true;\n\t\t\t}\n\t\t\telse if(card[i]==3)\n\t\t\t\tthree=true;\n\t\t\telse if(card[i]==4)\n\t\t\t\tfour=true;\n\t\t\telse if(i+5<14)\n\t\t\t{\n\t\t\t\tbool flag=false;\n\t\t\t\tfor(int j=0;j<5;j++)\n\t\t\t\t{\n\t\t\t\t\tif(card[i+j]!=1)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!flag)\n\t\t\t\t\tstrate=true;\n\t\t\t}\n\t\t}\n\t\tif(four)\n\t\t\tprintf(\"four card\\n\");\n\t\telse if(two && three)\n\t\t\tprintf(\"full house\\n\");\n\t\telse if(card[1]==1&&card[10]==1&&card[11]==1&&card[12]==1&&card[13]==1 || strate)\n\t\t\tprintf(\"straight\\n\");\n\t\telse if(three)\n\t\t\tprintf(\"three card\\n\");\n\t\telse if(two && two2)\n\t\t\tprintf(\"two pair\\n\");\n\t\telse if(two)\n\t\t\tprintf(\"one pair\\n\");\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool isstraight(int c[]);\n\nint main(){\n    int card[5];\n\n    while(~scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])){\n        sort(card, card+5);\n        int n = 0;\n        for(int i=0; i<4; i++){\n            for(int j=i+1; j<5; j++){\n                if(card[i] == card[j]){\n                    n++;\n                }\n            }\n        }\n\n        switch(n){\n            case 1:\n                cout << \"one pair\" << endl;\n                break;\n            case 2:\n                cout << \"two pair\" << endl;\n                break;\n            case 3:\n                cout << \"three card\" << endl;\n                break;\n            case 4:\n                cout << \"full house\" << endl;\n                break;\n            case 6:\n                cout << \"four card\" << endl;\n                break;\n            case 10:\n                cout << \"four card\" << endl;\n                break;\n            default:\n                if(isstraight(card)){\n                    cout << \"straight\" << endl;\n                }else{\n                    cout << \"null\" << endl;\n                }\n                break;\n        }\n    }\n\n    return 0;\n}\n\nbool isstraight(int c[]){\n    for(int i=1; i<9; i++){\n        if(c[0]==i && c[1]==i+1 && c[2]==i+2 && c[3]==i+3 && c[4]==i+4){\n            return true;\n        }\n        if(c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13){\n            return true;\n        }\n    }\n    return false;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\twhile(1){\n\t\tint card[13] = {}; // A ~ 13\n\t\tint data[5] = {};\n\n\t\tchar c0;\n\t\tfor(int i = 0; i < 5; ++i){\n\t\t\tif(i != 0) cin >> c0;\n\t\t\tcin >> data[i];\n\t\t\t++card[data[i] - 1];\n\t\t}\n\n\t\tif(cin.eof()) break;\n\n\t\tsort(card, card + 13, greater<int>());\n\t\t/*\n\t\tfor(int i = 0; i < 13; ++i){\n\t\t\tcout << card[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t\t*/\n\t\tswitch(card[0]){\n\t\t\tcase 4 :\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tsort(data, data + 5);\n\t\t\t\tbool check = true;\n\t\t\t\tif(data[4] == 13) data[0] = 9;\n\t\t\t\tfor(int i = 0; i < 5; ++i){\n\t\t\t\t\tif(data[0] + i != data[i]){\n\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(check)\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<sstream>\nusing namespace std;\n\nvector<string> split(const string &str, char delim){\n  istringstream iss(str); string tmp; vector<string> res;\n  while(getline(iss, tmp, delim)) res.push_back(tmp);\n  return res;\n}\n\nbool forcard(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans >= 4) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\n\nbool fullhouse(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(x == card[j]) ansx++;\n\t\t\t\t}\n\t\t\t\tif(k!=j){\n\t\t\t\t\tif(y == card[j]) ansy++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ansx == 3 && ansy ==2) return true;\n\t\t\tif(ansx == 2 && ansy ==3) return true;\n\t\t}\n\t\treturn false;\n}\n\nbool straight(vector<int> card){\n\tint ans = 1;\n\tif(card[0] != 1){\n\t\tfor(int i=0;i+1<5;i++){\n\t\t\tif(card[0]+i+1 == card[i+1]) ans++;\n\t\t}\n\t\tif(ans==5) return true;\n\t} else {\n\t\tfor(int i=0;i+1<4;i++){\n\t\t\tif(card[1]+i+1 == card[i+2]) ans++;\n\t\t}\n\t\tif(card[4] == 13 && ans == 4) return true;\n\t}\n\treturn false;\n}\n\nbool threecard(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans == 3) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\n\nbool twopair(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(x == card[j]) ansx++;\n\t\t\t\t}\n\t\t\t\tif(k!=j){\n\t\t\t\t\tif(y == card[j]) ansy++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ansx == 2 && ansy ==2) return true;\n\t\t}\n\t\treturn false;\n}\n\nbool onepair(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans == 2) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\nstring poker(vector<int> card){\n\tif(forcard(card)) {return \"four card\"; } else\n\tif(fullhouse(card)){ return \"full house\"; } else\n \tif(straight(card)){return \"straight\";} else\n\tif(threecard(card)){ return \"three card\";} else\n\tif(twopair(card)){ return \"two pair\";} else\n\tif(onepair(card)){ return \"one pair\";}\n\treturn \"null\";\n}\n\n\nint main(){\n\tstring str; vector<string> st; vector<int> card;\n\twhile(cin >> str){\n\t\tst = split(str,',');\n\t\tfor(int i=0;i<5;i++){\n\t\t\tstringstream ss; int a;\n\t\t\tss << st[i];\n\t\t\tss >> a;\n\t\t\tcard.push_back(a);\n\t\t}\n\t\tsort(card.begin(),card.end());\n\t\tcout << poker(card) << endl;\n\n\t\tcard.clear();\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tstring ret=\"\";\n\tforeach(it,count){\n\t\tif(it->second>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(it->second==4){\n\t\t\tret = \"four card\";\n\t\t\tbreak;\n\t\t}else if(it->second==3){\n\t\t\tif(is2){\n\t\t\t\tret = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tis3 = true;\n\t\t\t}\n\t\t}else if(it->second==2){\n\t\t\tif(is3){\n\t\t\t\tret = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}else if(is2){\n\t\t\t\tret = \"two pair\";\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(count[1]==1&&count[13]==1&&count[12]==1&&count[11]==1&&count[10]==1){\n\t\treturn \"straight\";\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}else if(ret!=\"\"){\n\t\treturn ret;\n\t}else if(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define ll long long\n#define EPS 1.0e-8\n#define MAX_N 100\ntypedef pair<int,int> Pii;\ntypedef pair<int,int> Pis;\nconst double PI=acos(-1);\n\nbool is_onepair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == 1){\n\t\treturn true;\n\t}\n\t\n}\n\nbool is_twopair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 2){\n\t\t\treturn true;\n\t\t}\n}\n\nbool is_threecard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 3) return true;\n\t}\n}\n\nbool is_straight(int numbers[], map<int,int> freq, int count){\n\n\tif(numbers[0] == 11 || numbers[0] == 12 || numbers[0] == 13) return false;\n\n\tif(((numbers[0]+1 == numbers[1]) || (numbers[0]+9 == numbers[1])) && numbers[1] + 1 == numbers[2] && numbers[2] + 1 == numbers[3] && numbers[3] + 1 == numbers[4] ) return true;\n\treturn false;\n}\n\nbool is_fullhouse(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\tint cnt1 = 0, cnt2 = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcnt1++;\n\t\t}\n\t\tif(freq[i] == 3){\n\t\t\tcnt2++;\n\t\t}\n\t}\n\t\tif(cnt1 == 1 && cnt2 == 1){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n}\n\nbool is_fourcard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 4){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 1){\n\t\t\treturn true;\n\t\t}\n\t\t return false;\n}\n\nint main(){\n\tint numbers[5];\n\tmap<int,int> freq;\n\tint count = 0;\n\n\t\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&numbers[0],&numbers[1],&numbers[2],&numbers[3],&numbers[4])){\n\n\t\tsort(numbers,numbers+5);\n\n\t\tif(is_fullhouse(numbers, freq, count)) cout << \"full house\" << endl;\n\t\telse if(is_onepair(numbers, freq, count)) cout << \"one pair\" << endl;\n\t\telse if(is_twopair(numbers, freq, count)) cout << \"two pair\" << endl;\t\t\n\t\telse if(is_threecard(numbers, freq, count)) cout << \"three card\" << endl;\n\t\telse if(is_straight(numbers, freq, count)) cout << \"straight\" << endl;\n\n\t\telse if(is_fourcard(numbers, freq, count)) cout << \"four card\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\nusing namespace std;\nint a[5], p, s; char T; string S[7] = { \"four card\",\"full house\",\"straight\",\"three card\",\"two pair\",\"one pair\",\"null\" };\nint main() {\n\twhile (cin >> a[0] >> T >> a[1] >> T >> a[2] >> T >> a[3] >> T >> a[4]) {\n\t\tsort(a, a + 5);\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tif (a[i] == a[i + 1] && a[i + 1] == a[i + 2] && a[i + 2] == a[i + 3]) {\n\t\t\t\tp = 0; goto E;\n\t\t\t}\n\t\t}\n\t\tif (a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) {\n\t\t\tp = 1; goto E;\n\t\t}\n\t\tif (a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) {\n\t\t\tp = 1; goto E;\n\t\t}\n\t\tif ((a[0] != a[1] && a[1] != a[2] && a[2] != a[3]) && (a[3] != a[4] && a[0] == a[4] - 4)) {\n\t\t\tp = 2; goto E;\n\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tif (a[i] == a[i + 1] && a[i + 1] == a[i + 2]) {\n\t\t\t\tp = 3; goto E;\n\t\t\t}\n\t\t}\n\t\ts = 0;\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tif (a[i] == a[i + 1]) {\n\t\t\t\ts++; goto E;\n\t\t\t}\n\t\t}\n\t\tif (s >= 2) { p = 4; goto E; }\n\t\tif (s == 1) { p = 5; goto E; }\n\t\tp = 6;\n\tE:;\n\t\tcout << S[p] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nint main()\n{\n\tstring card;\n\n\twhile(cin >> card)\n\t{\n\t\tstring Ncard;\n\n\t\tfor(int i = 0; i < card.size(); i++)\n\t\t{\n\t\t\tif(card[i] != ',')\n\t\t\t{\n\t\t\t\tNcard += card[i];\n\t\t\t}\n\t\t}\n\t\tcard = Ncard;\n\n\t\tsort(card.begin(), card.end());\n\n\t\tbool straight = true;\n\n\t\t\n\t\tchar st = card[0] + 1;\n\t\tfor(int i = 1; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == st)\n\t\t\t{\n\t\t\t\tst++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstraight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(straight)\n\t\t{\t\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tNcard.clear();\n\t\tint cnt = 1;\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\t\n\t\t\tif(card[i] == card[i+1])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tNcard += cnt + '0';\n\t\t\t\tNcard += card[i];\n\t\t\t\tcnt = 1;\n\t\t\t}\n\t\t}\n\n\t\tcard = Ncard;\n\n\t\tif(card.size() == 4)\n\t\t{\n\t\t\tif(card[0] == '4' || card[2] == '4')\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if(card[0] == '3' && card[3] == '2' || card[0] == '2' && card[3] == '2')\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(card.size() == 6)\n\t\t{\n\t\t\tif(card[0] == '3' || card[2] == '3' || card[4] == '3')\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t\telse if(card[0] == '2' && card[2] =='2' || card[2] == '2' && card[4] =='2' || card[2] == '2' && card[6] == '2')\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\n\t\telse if(card.size() == 8)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n    int a[5];\n    char c;\n    while(cin>>a[0]>>c>>a[1]>>c>>a[2]>>c>>a[3]>>c>>a[4]){\n        sort(a,a+5);\n        int c[5],j=0;\n        memset(c,0,sizeof(c));\n        for(int i=0;i<4;i++){\n            if(a[i+1]!=a[i])\n                j++;\n            if(a[i+1]==a[i]){\n                c[j]++;\n            }\n        }\n        int p=0,t=0,f=0;\n        for(int i=0;i<5;i++){\n            if(c[i]==1)p++;\n            if(c[i]==2)t++;\n            if(c[i]==3)f++;\n        }\n        if(p==2){\n            cout<<\"two pair\"<<endl;\n        }\n        else if(p==1&&t==1)\n            cout<<\"full house\"<<endl;\n        else if(t==1)\n            cout<<\"three card\"<<endl;\n        else if(f==1)\n            cout<<\"four card\"<<endl;\n        else if(p==1){\n            cout<<\"one pair\"<<endl;\n        }\n        else if((a[3]==a[4]-1)&&(a[1]==a[2]-1)&&(a[2]==a[3]-1)&&((a[0]==a[1]-1)||(a[4]==13&&a[0]==1)))\n            cout<<\"straight\"<<endl;\n        else cout<<\"null\"<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <stack>\n#include <set>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tvector<int> c(5);\n\tchar a;\n\twhile(cin >> c[0] >> a >> c[1] >> a >> c[2] >> a >> c[3] >> a >> c[4]){\n\t\tbool yaku=false;\n\t\tint cnt[5]={0};\n\t\tsort(c.begin(),c.end());\n\t\tif((c[0]==(c[1]-1) && c[0]==(c[2]-2) && c[0]==(c[3]-3) && c[0]==(c[4]-4)) || (c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13)) {cout << \"straight\" << endl ; continue;} \n\t\tfor(int i=0;i<5;++i){\n\t\t\tfor(int j=i+1;j<5;++j){\n\t\t\t\tif(c[i]==c[j] && c[i]!=-1) cnt[i]++, c[j]=-1; \n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<5;++i){\n\t\t\tif(cnt[i]==3) {cout << \"four card\" << endl;yaku=true; break;}\n\t\t\telse if(cnt[i]==2) {\n\t\t\t\tif(cnt[3]==1) {cout << \"full house\" << endl; yaku=true;  break;}\n\t\t\t\telse {cout << \"three card\" << endl; yaku=true; break;}\n\t\t\t}\n\t\t\telse if(cnt[i]==1) {\n\t\t\t\tif(cnt[2]==2) {cout << \"full house\" << endl;yaku=true; break;}\n\t\t\t\telse if (cnt[i+2]==1) {cout << \"two pair\" << endl; yaku=true; break;}\n\t\t\t\telse {cout << \"one pair\" << endl; yaku=true; break;} \n\t\t\t}\n\t\t}\n\t\tif (!yaku) cout << \"null\" << endl;\n\t}\n\treturn 0; \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <set>\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nint main(){\n\tint card[5]={0};\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n\t\tset<int> poker;\n\t\tvector<int> p;\n\t\tfor(int i=0;i<5;i++){\n\t\t\tpoker.insert(card[i]);\n\t\t\tp.push_back(card[i]);\n\t\t}\n\t\tsort(p.begin(),p.end());\n\t\tint d=poker.size();\n\t\tswitch(d){\n\t\tcase 2:\n\t\t\tif(p[2]!=p[3] || p[1]!=p[2]) cout<<\"full house\"<<endl;\n\t\t\telse cout<<\"four card\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif((p[0]==p[1] && p[1]==p[2])||(p[1]==p[2] && p[2]==p[3])||(p[2]==p[3] && p[3]==p[4])) cout<<\"three card\"<<endl;\n\t\t\telse cout<<\"two pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tif(p[1]==p[0]+1 && p[2]==p[1]+1 && p[3]==p[2]+1 && p[4]==p[3]+1) cout<<\"straight\"<<endl;\n\t\t\telse if(p[0]==1 && p[1]==10 && p[2]==11 && p[3]==12 && p[4]==13) cout<<\"straight\"<<endl;\n\t\t\telse cout<<\"null\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint a[5];\n\nbool isStraight(){\n\tvector<int> n;\n\tfor(int i=0 ; i<5 ; i++){\n\t\tn.push_back(a[i]);\n\t}\n\tsort( n.begin(), n.end() );\n\tif( n[0]+1 == n[1] && n[1]+1 == n[2] && n[2]+1 == n[3] && n[3]+1 == n[4]){\n\t\treturn true;\n\t}\n\tif( n[0]==1 && n[1]==10 && n[2]==11 && n[3]==12 && n[4]==13){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstring checkCard(){\n\tint n, count, c[5];\n\tint c2=0, c3=0, c4=0;\n\n\tfor(int j=0 ; j<5 ; j++){\n\t\tcount = 0;\n\t\tn = a[j];\n\t\tfor(int i=0 ; i<5 ; i++){\n\t\t\tif(a[i]==n)count++;\n\t\t}\n\t\tc[j] = count;\n\t}\n\tfor(int i=0 ; i<5 ; i++){\n\t\tif(c[i]==2)c2++;\n\t\tif(c[i]==3)c3++;\n\t\tif(c[i]==4)c4++;\n\t}\n\tif(c4==4) return \"four card\";\n\telse if(c3==3 && c2==2) return \"full house\";\n\telse if( isStraight() ) return \"straight\";\n\telse if(c3==3) return \"three card\";\n\telse if(c2==4) return \"two pair\";\n\telse if(c2==2) return \"one pair\";\n\telse return \"null\";\n}\n\nint main(){\n\t\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4] ) != EOF ){\n\t\tcout << checkCard() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<deque>\nusing namespace std;\n\nint main() {\n\n    vector<int> cards(5);\n    char comma;\n\n    while(cin >> cards[0] >> comma >> cards[1] >> comma >> cards[2] >> comma >> cards[3] >> comma >> cards[4]) {\n        sort(cards.begin(), cards.end());\n\n        if(cards[0] == cards[3] || cards[1] == cards[4]) {\n            cout << \"four card\" << endl;\n        } else if ( (cards[0] == cards[2] && cards[3] == cards[4]) || (cards[0] == cards[1] && cards[2] == cards[4]) ) {\n            cout << \"full house\" << endl;\n        } else if ( cards[1] == cards[2] - 1 && cards[2] == cards[3] - 1 && cards[3] == cards[4] - 1) {\n            if (cards[0] == cards[1] - 1 || ( cards[0] == 1 && cards[4] == 13 )) {\n                cout << \"straight\" << endl;\n            } else if (cards[0] == cards[1]) {\n                cout << \"one pair\" << endl;\n            } else {\n                cout << \"null\" << endl;\n            }\n        } else if ( cards[0] == cards[2] || cards[1] == cards[3] || cards[2] == cards[4] ) {\n            cout << \"three card\" << endl;\n        } else if ( cards[0] == cards[1] ) {\n            if (cards[2] == cards[3] || cards[3] == cards[4]) {\n                cout << \"two pair\" << endl;\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ( cards[1] == cards[2] ) {\n            if (cards[3] == cards[4]) {\n                cout << \"two pair\" << endl;\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ( cards[2] == cards[3] || cards[3] == cards[4] ) {\n            cout << \"one pair\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n\n    }\n\n\n     \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\n#define RANKS 13\n#define CARDS 5\n\nint scanCards(int a[]){\n\treturn scanf(\"%d,%d,%d,%d,%d\",a, a+1, a+2, a+3, a+4);\n}\n\nint isStraight(int a[]){\n\tfor (int i=0; i<=10; i++){\n\t\tint flg = 1;\n\t\tfor (int j=0; j<5; j++){\n\t\t\tif (a[i+j] != 1){\n\t\t\t\tflg=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flg) return 1;\n\t}\n\treturn 0;\n}\n\n\nint main(void){\n\tint rank[CARDS];\n\tint count[RANKS+1]; // count[13] = count[0]\n\tint pair, trio, quod;\n\t\n\twhile (scanCards(rank) != EOF){\n\t\tpair = trio = quod = 0;\n\t\tfor (int i=0; i<RANKS; i++) count[i] = 0;\n\t\tfor (int i=0; i<CARDS; i++) count[rank[i]-1]++;\n\t\tcount[RANKS] = count[0];\n\t\tfor (int i=0; i<RANKS; i++){\n\t\t\tif (count[i]==2) pair++;\n\t\t\tif (count[i]==3) trio++;\n\t\t\tif (count[i]==4) quod++;\n\t\t}\n\t\t\n\t\tif (quod==1) puts(\"four card\");\n\t\telse if (pair==1 && trio==1) puts(\"full house\");\n\t\telse if (isStraight(count)) puts(\"straight\");\n\t\telse if (trio==1) puts(\"three card\");\n\t\telse if (pair==2) puts(\"two pair\");\n\t\telse if (pair==1) puts(\"one pair\");\n\t\telse puts(\"null\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint a[5];\n\tint kari;\n\tchar d;\n\t\n\twhile (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n\t\tfor (int i = 4; i > 0; i--) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (a[j] > a[j+1]) {\n\t\t\t\t\tkari = a[j];\n\t\t\t\t\ta[j] = a[j+1];\n\t\t\t\t\ta[j+1] = kari;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n\t\t\tif ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\tif (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t} else if ((a[0] == a[1] && a[1] == a[2] && a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t}else {\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t}\n\t\t\t} else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n\t\t\t\tif ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t} else {\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t} else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n\t\t\tcout << \"straight\" << endl;\n\t\t} else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//0038\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tint l[5];\n\tchar c;\n\twhile (cin) {\n\t\tcin >> l[0] >> c;\n\t\tcin >> l[1] >> c;\n\t\tcin >> l[2] >> c;\n\t\tcin >> l[3] >> c;\n\t\tcin >> l[4];\n\t\tsort(l, l + 5);\n\t\tif (l[0] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[4] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[0] == l[1] && l[1] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[0] == l[1] && l[3] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[4] == l[3] + 1 && l[3] == l[2] + 1 && l[2] == l[1] + 1 && l[1] == l[0] + 1)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == 1 && l[1] == 10 && l[2] == 11 && l[3] == 12 && l[4] == 13)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[4] && l[3] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[0] == l[1] && l[2] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[2] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] || l[1] == l[2] || l[2] == l[3] || l[3] == l[4])\n\t\t\tcout << \"one pair\";\n\t\telse cout << \"null\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string>\n\nusing namespace std;\n\nint main() {\n        const int N = 5;\n        const string yaku[] = {\n                \"null\",\n                \"one pair\",\n                \"two pair\",\n                \"three card\",\n                \"straight\",\n                \"full house\",\n                \"four card\"\n        };\n\n        while (true) {\n                int tehuda[N];\n                int ans;\n                int input = scanf(\"%d,%d,%d,%d,%d\",\n                        &tehuda[0], &tehuda[1], &tehuda[2], &tehuda[3], &tehuda[                                                      4]);\n                if (input == EOF) {\n                        break;\n                }\n                for (int i = 0; i < N; i++) {\n                        for (int j = N - 1; j > i; j--) {\n                                if (tehuda[j - 1] > tehuda[j]) {\n                                        int tmp = tehuda[j - 1];\n                                        tehuda[j - 1] = tehuda[j];\n                                        tehuda[j] = tmp;\n                                }\n                        }\n                }\n\n                if ((tehuda[0] == tehuda[1] && tehuda[1] == tehuda[2] &&\n                                        tehuda[2] == tehuda[3]) ||\n                                (tehuda[1] == tehuda[2] && tehuda[2] == tehuda[3                                                      ] &&\n                                 tehuda[3] == tehuda[4])) {\n                        ans = 6;\n                } else if ((tehuda[0] == tehuda[1] && tehuda[1] == tehuda[2] &&\n                                        tehuda[3] == tehuda[4]) ||\n                                (tehuda[0] == tehuda[1] && tehuda[2] == tehuda[3                                                      ] &&\n                                 tehuda[3] == tehuda[4])) {\n                        ans = 5;\n                } else if ((tehuda[0] == tehuda[1] && tehuda[1] == tehuda[2]) ||\n                                (tehuda[1] == tehuda[2] && tehuda[2] == tehuda[3                                                      ]) ||\n                                (tehuda[2] == tehuda[3] && tehuda[3] == tehuda[4                                                      ])) {\n                        ans = 3;\n                } else if ((tehuda[0] == tehuda[1] && (tehuda[2] == tehuda[3] ||\n                                                tehuda[3] == tehuda[4])) ||\n                                (tehuda[1] == tehuda[2] && tehuda[3] == tehuda[4                                                      ])) {\n                        ans = 2;\n                } else if ((tehuda[0] == tehuda[1]) || (tehuda[1] == tehuda[2])                                                       ||\n                                (tehuda[2] == tehuda[3]) || (tehuda[3] == tehuda                                                      [4])) {\n                        ans = 1;\n                } else if ((tehuda[0] + tehuda[4] == tehuda[2] * 2 &&\n                                        tehuda[2] * 2 == tehuda[1] + tehuda[3])                                                       ||\n                                (tehuda[0] == 1 && tehuda[1] == 10 && tehuda[2]                                                       == 11 &&\n                                 tehuda[3] == 12 && tehuda[4] == 13)) {\n                        ans = 4;\n                } else {\n                        ans = 0;\n                }\n                printf(\"%s\\n\", yaku[ans].c_str());\n        }\n\n        return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\t\nint length(int a[]){\n\tint res=0,len=0;\n\tfor(int i=0;i<14;i++){\n\t\tif(a[i])len++;\n\t\telse len=0;\n\t\tres=max(res,len);\n\t}\n\treturn res;\n}\nint main(){\n\tint a[14];\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tfill(a,a+14,0);\n\t\ta[n-1]++;\n\t\tif(n==1)a[13]++;\n\t\tfor(int i=1;i<5;i++){\n\t\t\tscanf(\",%d\",&n);\n\t\t\ta[n-1]++;\n\t\t\tif(n==1)a[13]++;\n\t\t}\n\t\tchar *ans=\"null\";\n\t\tif(count(a,a+13,4)==1) ans=\"four card\";\n\t\telse if(count(a,a+13,3)==1 && count(a,a+13,2)==1)ans=\"full house\";\n\t\telse if(length(a)==5) ans=\"straight\";\n\t\telse if(count(a,a+13,3)==1) ans=\"three card\";\n\t\telse if(count(a,a+13,2)==2) ans=\"two pair\";\n\t\telse if(count(a,a+13,2)==1) ans=\"one pair\";\n\t\tputs(ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": " \n #include<iostream>\n #include<stdio.h>\n #include<string>\n #include<math.h>\n #include<iomanip>\n #include<algorithm>\n #include<string.h>\n #include<cctype>\n #include<map>\n #include<set>\n #include<vector>\n #include<sstream>\n #include<stack>\n #include<queue>\n \n using namespace std;\n \n int arr[6];\n \n int main()\n {\n   while(cin>>arr[0])\n   {\n     for(int i=1;i<5;i++)\n     {\n       char temp;\n       cin>>temp>>arr[i];        \n     }                  \n     sort(arr,arr+5);\n     if((arr[0]==arr[1]&&arr[1]==arr[2]&&arr[2]==arr[3])||(arr[1]==arr[2]&&arr[2]==arr[3]&&arr[3]==arr[4])) cout<<\"four card\"<<endl;\n     else if((arr[0]==arr[1]&&arr[1]==arr[2]&&arr[3]==arr[4])||(arr[0]==arr[1]&&arr[2]==arr[3]&&arr[3]==arr[4])) cout<<\"full house\"<<endl;\n     else if((arr[0]==arr[1]&&arr[1]==arr[2])||(arr[1]==arr[2]&&arr[2]==arr[3])||(arr[2]==arr[3]&&arr[3]==arr[4])) cout<<\"three card\"<<endl;\n     else\n     {\n       int count=0;\n       for(int i=0;i<4;i++)\n       {\n         if(arr[i]==arr[i+1]) count++;        \n       }    \n       if(count==1) cout<<\"one pair\"<<endl;\n       else if(count==2) cout<<\"two pair\"<<endl;\n       else\n       {\n         bool flag=true;\n         for(int i=0;i<4;i++)\n         {\n           int kk=arr[i+1]-arr[i];\n           if(!(kk==1||kk==9))\n           {\n             flag=false;\n             break;                     \n           }          \n         }    \n         if(flag) cout<<\"straight\"<<endl;\n         else cout<<\"null\"<<endl; \n       }\n     }       \n   }\n   //while(1);\n   return 0;\n }\n\n "
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nbool IsEqual(int* begin, int size)\n{\n\tfor (int i = 1; i < size; i++)\n\t{\n\t\tif (begin[i] != begin[i - 1]) return false;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tint card[5];\n\n\twhile (true)\n\t{\n\t\tfor (int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif (scanf(\"%d,\", &card[i]) == -1) return 0;\n\t\t}\n\t\tsort(card, card + 5);\n\n\t\tif\t(IsEqual(card, 4)) printf(\"four card\\n\");\n\n\t\telse if (IsEqual(card + 1, 4)) printf(\"four card\\n\");\n\n\t\telse if (IsEqual(card, 3) && IsEqual(card + 3, 2)) printf(\"full house\\n\");\n\n\t\telse if (IsEqual(card, 2) && IsEqual(card + 2, 3)) printf(\"full house\\n\");\n\n\t\telse if (card[0] + 1 == card[1] && card[1] + 1 == card[2]\n\t\t\t  && card[2] + 1 == card[3] && card[3] + 1 == card[4]) printf(\"straight\\n\");\n\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11\n\t\t\t  && card[3] == 12 && card[4] == 13) printf(\"straight\\n\");\n\n\t\telse if (IsEqual(card, 3) || IsEqual(card + 1, 3) || IsEqual(card + 2, 3)) printf(\"three card\\n\");\n\n\t\telse if (IsEqual(card, 2) && IsEqual(card + 2, 2)) printf(\"two pair\\n\");\n\n\t\telse if (IsEqual(card + 1, 2) && IsEqual(card + 3, 2)) printf(\"two pair\\n\");\n\n\t\telse if (IsEqual(card, 2) && IsEqual(card + 3, 2)) printf(\"two pair\\n\");\n\n\t\telse\n\t\t{\n\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t{\n\t\t\t\tif (IsEqual(card + i, 2))\n\t\t\t\t{\n\t\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == 3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"null\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VL;\ntypedef vector<VL> VVL;\ntypedef pair<int, int> PII;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define MP make_pair\n#define PB push_back\n#define MOD 1000000007\n#define INF (1LL<<30)\n#define LLINF (1LL<<60)\n#define PI 3.14159265359\n#define EPS 1e-12\n//#define int ll\n\nsigned main(void)\n{\n  int a[5];\n  while(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])) {\n    bool s = true;\n    sort(a, a+5);\n    FOR(i, 1, 5) {\n      //cout << a[i-1] << \" \" << a[i] << endl;\n      if(a[i] != a[i-1] + 1) s = false;\n    }\n    if(a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)\n      s = true;\n\n    int cnt[14] = {0};\n    REP(i, 5) cnt[a[i]]++;\n    int four = 0, three = 0, pair = 0;\n    FOR(i, 1, 14) {\n      if(cnt[i] == 4) four = 1;\n      else if(cnt[i] == 3) three = 1;\n      else if(cnt[i] == 2) pair++;\n    }\n    if(four) {\n      cout << \"four card\" << endl;\n    } else if(three && pair) {\n      cout << \"full house\" << endl;\n    } else if(s) {\n      cout << \"straight\" << endl;\n    } else if(three) {\n      cout << \"three card\" << endl;\n    } else if(pair == 2) {\n      cout << \"two pair\" << endl;\n    } else if(pair == 1) {\n      cout << \"one pair\" << endl;\n    } else {\n      cout << \"null\" << endl;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>   \nusing namespace std; int main(void)\n{     \n\tint card[5];\n\tchar kari;     \n\twhile(1)     \n\t{         \n\t\tfor(int i = 0;i < 5;i++)         \n\t\t{             \n\t\t\tif(scanf(\"%d\",&card[i])== EOF) \n\t\t\t\tgoto kitune;             \n\t\t\t\tscanf(\"%c\",&kari);         \n\t\t}\t\t\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);         \n\t\tfor(int i = 0;i<5;i++)         \n\t\t{             \n\t\t\tcheck[card[i]]++;             \n\t\t\tif(card[i] == 1) check[14] += 1;         \n\t\t}         \n\t\tfor(int i = 0;i<=14;i++) \n\t\t{             \n\t\t\tif(check[i] == 1)\n\t\t\t{                 \n\t\t\t\tif(check[i+1] == 1)                  \n\t\t\t\t{                     \n\t\t\t\t\tcnt++;                     \n\t\t\t\t\tif(cnt == 4) break;              \n\t\t\t\t}                 \n\t\t\t\telse cnt = 0;             \n\t\t\t}         \n\t\t}           \n\t\tint pair = 0;         \n\t\tint three = 0;         \n\t\tint four = 0;         \n\t\tint st = 0;         \n\t\tif(cnt == 4)         \n\t\t{             \n\t\t\tprintf(\"straight\\n\");             \n\t\t\tst = 1;\n\t\t}         \n\t\telse       \n\t\t{             \n\t\t\tfor(int i = 0;i < 13;i++)     \n\t\t\t{              \n\t\t\t\tif(check[i] == 2) pair++;  \n\t\t\t\telse if(check[i] == 3) three++;    \n\t\t\t\telse if(check[i] >= 4) four++;    \n\t\t\t}     \n\t\t}\n\t\tif(pair >= 1)     \n\t\t{  \n\t\t\tif(three == 1) printf(\"full house\\n\");     \n\t\t\telse if(pair == 2) printf(\"two pair\\n\");    \n\t\t\telse printf(\"one pair\\n\");   \n\t\t}       \n\t\telse if(three >= 1)    \n\t\t{        \n\t\t\tif(pair == 1) printf(\"full house\\n\"); \n\t\t\telse if(three == 2) printf(\"full house\\n\");   \n\t\t\telse printf(\"three card\\n\");     \n\t\t}         \n\t\telse if(four >= 1) printf(\"four card\\n\");  \n\t\telse if(st != 1) printf(\"null\\n\");   \n\t}    \n\tkitune: \n\treturn 0; \n}"
  },
  {
    "language": "C++",
    "code": "#include <set>\n#include <map>\n#include <list>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <ctype.h>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n\nusing namespace std;\n\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define rep(i, n) REP(i, 0, n)\n#define lengthof(x) (sizeof(x) / sizeof(*(x)))\n#define FILL(ptr, value) FILL_((ptr), sizeof(ptr)/sizeof(value), (value))\ntemplate <typename T>\nvoid FILL_(void * ptr, size_t size, T value){\n  std::fill((T*)ptr, (T*)ptr+size, value);\n}\n//4方向ベクトル→↑←↓\nint dx[] ={1,0,-1,0};\nint dy[] ={0,-1,0,1};\nint card[5];\nint main()\n{\n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) !=EOF){\n    sort(card,card+5);\n    bool four,one,two,three,full,straight,flag;\n    flag = false;\n    one = two = three =four= full =straight = false;\n    if(!flag){\n      if(card[0]==card[1]&&card[0]==card[2]&&card[0]==card[3]||card[1]==card[2]&&card[1]==card[3]&&card[1]==card[4]){\n\tfour = true;\n\tflag = true;\n      }else if(card[0]==card[1]&&card[0]==card[2]&&(card[3]==card[4])||card[0]==card[1]&&card[2]==card[3]&&card[2]==card[4]){\n\tfull = true;\n\tflag = true;\n      }else if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13||card[1]==card[0]+1&&card[2]==card[0]+2&&card[3]==card[0]+3&&card[4]==card[0]+4){\n\tstraight = true;\n\tflag = true;\n      }else if(card[0]==card[1]&&card[0]==card[2]||card[1]==card[2]&&card[1]==card[3]||card[2]==card[3]&&card[2]==card[4]){\n\tthree = true;\n\tflag = true;\n      }else if(card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4])||card[1]==card[2]&&card[3]==card[4]){\n\ttwo = true;\n\tflag = true;\n      }else if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\tone = true;\n\tflag = true;\n      }\n    }\n    if(!flag)\n      cout <<\"null\"<<endl;\n    else if(four)\n      cout <<\"four card\"<<endl;\n    else if(full)\n      cout <<\"full house\"<<endl;\n    else if(straight)\n      cout <<\"straight\"<<endl;\n    else if(three)\n      cout <<\"three card\"<<endl;\n    else if(two)\n      cout <<\"two pair\"<<endl;\n    else if(one)\n      cout <<\"one pair\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[5];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tscanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\telse if(check[i] == 3) three++;\n\t\t\t\telse if(check[i] >= 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(three == 1) printf(\"full house\\n\");\n\t\t\telse if(pair == 2) printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three >= 1)\n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse if(three == 2) printf(\"hull house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four >= 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n  int a[6],c[5]={0};\n  int i,count=0;\n  char x;\n  while(cin>>a[0]){\n    if(a[0]==1)a[5]+=14;\n    for(i=1;i<5;i++){\n      cin>>x>>a[i];\n      if(a[i]==1)a[5]=14;\n    }\n    \n    c[0]=c[1]=c[2]=c[3]=c[4]=0;\n    sort(&a[0],&a[5]);\n\t\t\t\n    for(i=0;i<5;i++)\n      if(a[i]==a[i+1])c[0]++; else break;\n    for(i=i+1;i<5;i++)\n      if(a[i]==a[i+1])c[1]++; else break;\n    for(i=i+1;i<5;i++)\n      if(a[i]==a[i+1])c[2]++; else break;\n    for(i=i+1;i<5;i++)\n      if(a[i]==a[i+1])c[3]++; else break;\n    \n    if(c[0]==0&&c[1]==0&&c[2]==0&&c[3]==0){\n      for(i=0;i<4;i++)\n\tif(a[i]+1==a[i+1]){\n\t  count++;\n\t}else {\n\t  break;\n\t}\n      if(count==4)c[4]=1;\n      count=0;\n      \n      if(c[4]!=1){\n\tfor(i=1;i<6;i++)\n\t  if(a[i]+1==a[i+1]){\n\t    count++;\n\t  }else {\n\t    break;\n\t  }\n\tif(count==4)c[4]=1;\n\tcount=0;\n      }\n    }\n    sort(c,c+4,greater<int>());\n    if(c[0]==2&&c[1]==1)cout<<\"full house\";\n    else if(c[0]==1&&c[1]==1)cout<<\"two pair\";\n    else if(c[0]==1)cout<<\"one pair\";\n    else if(c[0]==2)cout<<\"three card\";\n    else if(c[0]==3)cout<<\"four card\";\n    else if(c[0]==4)cout<<\"five card\";\n    else if(c[4]==1)cout<<\"straight\";\n    else cout<<\"null\";\n    cout<<endl;\n    a[5]=0;\n  }  \n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(void){\n\n    int a[5]={0};\n    string str=\"null\";\n    while(scanf(\"%d,%d,%d,%d,%d\",a[0],a[1],a[2],a[3],a[4])!=EOF){\n        sort(a,a+5);\n        if(((a[0]==a[1])&&(a[2]==a[3])&&(a[2]==a[1]))||((a[1]==a[2])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"four card\";\n        else if(((a[0]==a[1])&&(a[1]==a[2])&&(a[3]==a[4]))||((a[0]==a[1])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"full house\";\n        else if(((a[0]==1)&&(a[1]==10)&&(a[2]==11)&&(a[3]==12)&&(a[4]==13))||((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4])))str=\"straight\";\n        else if(((a[0]==a[1])&&(a[1]==a[2]))||((a[1]==a[2])&&(a[2]==a[3]))||((a[2]==a[3])&&(a[3]==a[4])))str=\"three card\";\n        else if(((a[0]==a[1])&&((a[2]==a[3])||(a[3]==a[4])))||((a[1]==a[2])&&(a[3]==a[4])))str=\"two pair\";\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))str=\"one pair\";\n\n        cout<<str<<endl;\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n \n    int a[5];\n    int kari;\n    char d;\n     \n    while (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n        for (int i = 4; i > 0; i--) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] > a[j+1]) {\n                    kari = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = kari;\n                }\n            }\n        }\n        if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) { //one pair\n            if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) { //two pair\n                if (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) { //full house\n                    cout << \"full house\" << endl; \n                } else if ((a[0] == a[1] && a[1] == a[2] && a[3]==a[4]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){ //four card\n                    cout << \"four card\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n            } else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n                    cout << \"four card\" << endl;\n                } else {\n                    cout << \"two pair\" << endl;\n                }\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n            cout << \"straight\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF INT_MAX / 3\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define FORALL(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define FOREACH(i,c) for(auto (i) : (c))\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef valarray<int> Array;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cout<<a[i];if(i==a.size()-1)cout<<endl;else cout<<\" \";}}\nint gcd(int a,int b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nint lcm(int a,int b){return a==0||b==0?0:a*b/gcd(a,b);}\n\nvoid solve(int a1, int a2, int a3, int a4, int a5)\n{\n  int a[13]; fill_n(a,13,0);\n  a[--a1]++;a[--a2]++;a[--a3]++;a[--a4]++;a[--a5]++;\n  int m = 0; bool f = false;\n  vector<int> s;\n  string ans;\n  REP(i,13)\n  {\n    m = max(a[i],m);\n    if(a[i]>0)\n    {\n      s.push_back(a[i]);\n      if(i < 10)\n      {\n        bool flag = true;\n        REP(j,5) if(a[(i+j)%13] == 0)\n        {\n          flag = false;\n          break;\n        }\n        f = f || flag;\n      }\n    }\n  }\n  if(m >= 4) ans = \"four card\";\n  else if(s.size()==2) ans = \"full house\";\n  else if(f) ans = \"straight\";\n  else\n  {\n    int b[3]; fill_n(b,3,0);\n    REP(i,s.size()) b[s[i]-1]++;\n    if(b[2] > 0) ans = \"three card\";\n    else if(b[1] > 1) ans = \"two pair\";\n    else if(b[1] > 0) ans = \"one pair\";\n    else ans = \"null\";\n  }\n  printf(\"%s\\n\",ans.c_str());\n}\n\nint main()\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  int a,b,c,d,e;\n  while(~scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e))\n    solve(a,b,c,d,e);\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> P;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\nvector<string> split( string s, string c )\n{\n\tvector<string> ret;\n\tfor( int i=0, n; i <= s.length(); i=n+1 ){\n\n\t\tn = s.find_first_of( c, i );\n\t\tif( n == string::npos ) n = s.length();\n\t\tstring tmp = s.substr( i, n-i );\n\t\tret.push_back(tmp);\n\t}\n\treturn ret;\n}\nstring num[13] = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"};\nint main(void){\n  string tmp;\n  while(cin>>tmp){\n    vector<string> cardstr = split(tmp,\",\");\n    vector<int> card;\n    REP(i,cardstr.size()){\n      REP(j,13){\n        if(cardstr[i]==num[j]){\n          card.push_back(j+1);\n        }\n      }\n    } \n    sort(card.begin(),card.end());\n    int c[3]={0};\n    bool st1 = false;\n    bool st2 = true;\n    //ツカツウツδ督ト\n    for(int i=1; i<=13; i++){\n      if(count(card.begin(),card.end(),i)>=2){\n        c[count(card.begin(),card.end(),i)-2]++;\n      }\n    }\n    //ツスツトツδ個ーツト\n    if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13)\n      st1 = true;\n    for(int i=1; i<5; i++){\n      if(card[i]-card[i-1]!=1){\n        st2 = false;\n        break;\n      }\n    }\n    if(c[2]){\n      cout<<\"four card\"<<endl;\n    }else if(c[1]&&c[0]){\n      cout<<\"full house\"<<endl;\n    }else if(st1||st2){\n      cout<<\"straight\"<<endl;\n    }else if(c[1]){\n      cout<<\"three card\"<<endl;\n    }else if(c[0]==2){\n      cout<<\"two pair\"<<endl;\n    }else if(c[0]==1){\n      cout<<\"one pair\"<<endl;\n    }else{\n      cout<<\"null\"<<endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define ll long long\n#define EPS 1.0e-8\n#define MAX_N 100\ntypedef pair<int,int> Pii;\ntypedef pair<int,int> Pis;\nconst double PI=acos(-1);\n\nbool is_onepair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == 1){\n\t\treturn true;\n\t}\n\t\n}\n\nbool is_twopair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 2){\n\t\t\treturn true;\n\t\t}\n}\n\nbool is_threecard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 3) return true;\n\t}\n}\n\nbool is_straight(int numbers[], map<int,int> freq, int count){\n\n\tif(numbers[0] == 11 || numbers[0] == 12 || numbers[0] == 13) return false;\n\n\tif(((numbers[0]+1 == numbers[1]) || (numbers[0]+9 == numbers[1])) && numbers[1] + 1 == numbers[2] && numbers[2] + 1 == numbers[3] && numbers[3] + 1 == numbers[4] ) return true;\n\treturn false;\n}\n\nbool is_fullhouse(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\tint cnt1 = 0, cnt2 = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcnt1++;\n\t\t}\n\t\tif(freq[i] == 3){\n\t\t\tcnt2++;\n\t\t}\n\t}\n\t\tif(cnt1 == 1 && cnt2 == 1){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n}\n\nbool is_fourcard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 4){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 1){\n\t\t\treturn true;\n\t\t}\n\t\t return false;\n}\n\nint main(){\n\tint numbers[5];\n\tmap<int,int> freq;\n\tint count = 0;\n\n\t\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&numbers[0],&numbers[1],&numbers[2],&numbers[3],&numbers[4])){\n\n\t\tsort(numbers,numbers+5);\n\n\t\tif(is_fullhouse(numbers, freq, count)) cout << \"full house\" << endl;\n\t\telse if(is_onepair(numbers, freq, count)) cout << \"one pair\" << endl;\n\t\telse if(is_fourcard(numbers, freq, count)) cout << \"four card\" << endl;\n\t\telse if(is_twopair(numbers, freq, count)) cout << \"two pair\" << endl;\t\t\n\t\telse if(is_threecard(numbers, freq, count)) cout << \"three card\" << endl;\n\t\telse if(is_straight(numbers, freq, count)) cout << \"straight\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nbool IsEqual(int* begin, int size)\n{\n\tfor (int i = 1; i < size; i++)\n\t{\n\t\tif (begin[i] != begin[i - 1]) return false;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tint card[5];\n\n\twhile (true)\n\t{\n\t\tfor (int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif (scanf(\"%d,\", &card[i]) == -1) return 0;\n\t\t}\n\t\tsort(card, card + 5);\n\n\t\tif\t(IsEqual(card, 4)) printf(\"four card\\n\");\n\n\t\telse if (IsEqual(card + 1, 4)) printf(\"four card\\n\");\n\n\t\telse if (IsEqual(card, 3) && IsEqual(card + 3, 2)) printf(\"full house\\n\");\n\n\t\telse if (IsEqual(card, 2) && IsEqual(card + 2, 3)) printf(\"full house\\n\");\n\n\t\telse if (card[0] + 1 == card[1] && card[1] + 1 == card[2]\n\t\t\t  && card[2] + 1 == card[3] && card[3] + 1 == card[4]) printf(\"straight\\n\");\n\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11\n\t\t\t  && card[3] == 12 && card[4] == 13) printf(\"straight\\n\");\n\n\t\telse if (IsEqual(card, 3) || IsEqual(card + 1, 3) || IsEqual(card + 2, 3)) printf(\"three card\\n\");\n\n\t\telse if (IsEqual(card, 2) && IsEqual(card + 2, 2)) printf(\"two pair\\n\");\n\n\t\telse if (IsEqual(card + 1, 2) && IsEqual(card + 3, 2)) printf(\"two pair\\n\");\n\n\t\telse\n\t\t{\n\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t{\n\t\t\t\tif (IsEqual(card + i, 2))\n\t\t\t\t{\n\t\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == 3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"null\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    int tmp[5];\n    while(scanf(\"%d,%d,%d,%d,%d,\",&tmp[0],&tmp[1],&tmp[2],&tmp[3],&tmp[4])!= EOF){\n    int hand[14]={};\n\n    for(int i=0; i<5; ++i){\n      if(tmp[i]==1)++hand[13];\n      ++hand[tmp[i]-1];\n    }\n   \n    int pair=0,three=0,str=0,four=0;\n    for(int i=1; i<14; ++i){\n      if(hand[i]==4){++four;}\n      if(hand[i]==1)++str;\n      if(hand[i]==2)++pair;\n      if(hand[i]==3)++three;\n      if(str!=5 && hand[i]==0)str=0;\n    }\n    \n    if(four)cout << \"four card\" << endl;\n    else if(three && pair)cout << \"full house\" << endl;\n    else if(str == 5)cout << \"straight\" << endl;\n    else if(three)cout << \"three card\" << endl;\n    else if(pair == 2)cout << \"two pair\" << endl;\n    else if(pair == 1)cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint check(vector<int> v) {\n\tsort(v.begin(), v.end());\n\t//for (int i = 0; i < v.size(); i++)cout << v[i] << \"  \";\n\tif ((v[0] == v[1] && v[1] == v[2] && v[2]== v[3]) || (v[1] == v[2] && v[2]== v[3] && v[3] == v[4])) {//four cards\n\t\treturn 1;\n\t}\n\telse if (((v[0] == v[1] && v[1] == v[2]) && (v[3] == v[4])) || ((v[0] == v[1]) && (v[2] == v[3] && v[3] == v[4]))) {//full house\n\t\treturn 2;\n\t}\n\telse if (v[0] == v[1] - 1 && v[0] == v[2] - 2 && v[0] == v[3] - 3 && v[0] == v[4] - 4) {//straight\n\t\treturn 3;\n\t}\n\telse if (v[0]==1 && v[1]==10 && v[2]==11 && v[3] == 12 && v[4] == 13) {//straight\n\t\treturn 3;\n\t}\n\telse if (((v[0] == v[1] && v[1] == v[2]) || (v[1] == v[2] && v[2] == v[3])) || ((v[2] == v[3] && v[3] == v[4]))) {//three cards\n\t\treturn 4;\n\t}\n\telse if ((v[0] == v[1] && v[2] == v[3]) || (v[0] == v[1] && v[3] == v[4]) || (v[1] == v[2] && v[3] == v[4])) {//two pair\n\t\treturn 5;\n\t}\n\telse if ((v[0] == v[1]) || (v[1] == v[2]) || (v[2] == v[3]) || (v[3] == v[4])) {//one pair\n\t\treturn 6;\n\t}\n\telse {\n\t\treturn 7;\n\t}\n}\n\n\nint main()\n{\n\tvector<int> v;\n\tint a, b, c, d, e;\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e) != EOF) {\n\t\tv.clear();\n\t\tv.push_back(a);\n\t\tv.push_back(b);\n\t\tv.push_back(c);\n\t\tv.push_back(d);\n\t\tv.push_back(e);\n\t\tswitch (check(v)) {\n\t\t\tcase 1:cout << \"four cards\" << endl; break;\n\t\t\tcase 2:cout << \"full house\" << endl; break;\n\t\t\tcase 3:cout << \"straight\" << endl; break;\n\t\t\tcase 4:cout << \"three card\" << endl; break;\n\t\t\tcase 5:cout << \"two pair\" << endl; break;\n\t\t\tcase 6:cout << \"one pair\" << endl; break;\n\t\t\tcase 7:cout << \"null\" << endl; break;\n\t\t\tdefault:cout << \"Error\" << endl; break;\n\t\t}\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n\tvector<string> r;\n\tint n[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4]) != EOF)\n\t{\n\t\tint two=0,three=0,four=0,straight=0;\n\t\tint hand[13]={0};\n\t\tfor (int i=0; i<5; i++)\n\t\t\thand[n[i]-1]++;\n\t\tfor (int i=0; i<13; i++)\n\t\t{\n\t\t\tswitch(hand[i])\n\t\t\t{\n\t\t\tcase 4:\n\t\t\t\tfour++;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tthree++;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\ttwo++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor (int i=0; i<14; i++)\n\t\t{\n\t\t\tif (count>0)\n\t\t\t{\n\t\t\t\tif (hand[i%13] == 1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t} else {\n\t\t\t\t\tcount=0;\n\t\t\t\t}\n\t\t\t\tif (count == 5)\n\t\t\t\t{\n\t\t\t\t\tstraight=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (hand[i%13] == 1)\n\t\t\t\t{\n\t\t\t\t\tcount=1;\n\t\t\t\t} else if(hand[i%13]!=0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstring handname;\n\t\tif (four == 1) {\n\t\t\thandname = \"four card\";\n\t\t} else if (three == 1 && two == 1) {\n\t\t\thandname = \"full house\";\n\t\t} else if (straight == 1) {\n\t\t\thandname = \"straight\";\n\t\t} else if (three == 1) {\n\t\t\thandname = \"three card\";\n\t\t} else if (two == 2) {\n\t\t\thandname = \"two pair\";\n\t\t} else if (two == 1) {\n\t\t\thandname = \"one pair\";\n\t\t} else {\n\t\t\thandname = \"null\";\n\t\t}\n\t\tr.push_back(handname);\n\t}\n\tfor (int i=0; i<r.size(); i++)\n\t{\n\t\tcout << r[i] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nconst string ans[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\n\nint main(void){\n\tint a[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tint cnt[13]={},ans_num=0,tmp=0;\n\t\tfor(int i=0;i<5;++i) ++cnt[a[i]-1];\n\t\tfor(int i=0,count=0;i<13+1;++i){\n\t\t\tif(cnt[(i+13)%13]>1)break;\n\t\t\tif(cnt[(i+13)%13]==1)++count;\n\t\t\tif(cnt[(i+13)%13]==0)count=0;\n\t\t\tif(count==5) ans_num=4;\n\t\t}\n\t\tif(!ans_num){\n\t\t\tfor(int i=0;i<13;++i){\n\t\t\t\tif(cnt[i]==4){ans_num=6;break;}\n\t\t\t\tif(cnt[i]==3)tmp+=3;\n\t\t\t\tif(cnt[i]==2)tmp+=2;\n\t\t\t}\n\t\t\tif(tmp==5)ans_num=5;\n\t\t\tif(tmp==4)ans_num=2;\n\t\t\tif(tmp==3)ans_num=3;\n\t\t\tif(tmp==2)ans_num=1;\n\t\t}\n\t\tcout<<ans[ans_num]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n#define REP(i,n) for(int (i)=0; (i)<(n); (i)++)\n#define For(i,a,b) for(int (i)=(a); (i)<(b); (i)++)\n\nbool twopair(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    v.erase(unique(v.begin(), v.end()), v.end());\n    if (v.size() == 3) return true;\n    else return false;\n}\n\nbool straight(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    if (v[4]-v[3] == 1 && v[3]-v[2] == 1 && v[2]-v[1] == 1) {\n        if (v[1]-v[0] == 1 || (v[0] == 1 && v[4] == 13)) return true;\n        else return false;\n    }else return false;\n}\n\nbool fullhouse(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    if (v[3] == v[4]) return true;\n    else return false;\n}\n    \nint getMaxPair(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    vector<int> cnt;\n    int crt = 0;\n    int min = v[0];\n    REP(i,4) {\n        if (v[i+1] == min) {\n            crt++;\n        }else {\n            cnt.push_back(crt);\n            min = v[i+1];\n            crt = 0;\n        }\n    }\n    cnt.push_back(crt);\n    sort(cnt.begin(), cnt.end());\n    return cnt.back() + 1;\n}\n\nint main() {\n    int a,b,c,d,e;\n    char ch;\n    while(cin>>a>>ch>>b>>ch>>c>>ch>>d>>ch>>e) {\n        switch(getMaxPair(a,b,c,d,e)) {\n            case 1:\n                if (straight(a,b,c,d,e)) {\n                    cout << \"straight\" << endl;\n                }else {\n                    cout << \"null\" << endl;\n                }\n                break;\n            case 2:\n                \n                if (twopair(a,b,c,d,e)) {\n                    cout << \"two pair\" << endl;\n                }else {\n                    cout << \"one pair\" << endl;\n                }\n                break;\n            case 3:\n                if (fullhouse(a,b,c,d,e)) {\n                    cout << \"full house\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n                break;\n            case 4:\n                cout << \"four card\" << endl;\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\nusing namespace std;\nstring m[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\nint c[5],ans;\nbool s1(){\n\tbool ok=false;\n\tfor(int i=0;i<4;i++){\n\t\tif(c[i]==c[i+1])ok=true;\n\t}\n\treturn ok;\n}\nbool s2(){\n\tbool ok=false;\n\tif(c[1]==c[2]&&c[3]==c[4])ok=true;\n\tif(c[0]==c[1]&&c[3]==c[4])ok=true;\n\tif(c[0]==c[1]&&c[2]==c[3])ok=true;\n\treturn ok;\n}\nbool s3(){\n\tbool ok=false;\n\tfor(int i=0;i<3;i++){\n\t\tif(c[i]==c[i+1]&&c[i]==c[i+2])ok=true;\n\t}\n\treturn ok;\n}\nbool s4(){\n\tbool ok=true;\n\tfor(int i=0;i<4;i++){\n\t\tif(c[i]+1!=c[i+1])ok=false;\n\t}\n\tint d[5]={1,10,11,12,13};\n\tbool A=true;\n\tfor(int i=0;i<5;i++){\n\t\tif(c[i]!=d[i])A=false;\n\t}\n\tif(A)ok=true;\n\treturn ok;\n}\nbool s5(){\n\tbool ok=true;\n\tif(c[0]!=c[1]||c[3]!=c[4])ok=false;\n\tif(c[1]!=c[2]&&c[3]!=c[2])ok=false;\n\treturn ok;\n}\nbool s6(){\n\tbool ok=false;\n\tif(c[0]==c[1]&&c[0]==c[2]&&c[0]==c[3])ok=true;\n\tif(c[4]==c[1]&&c[4]==c[2]&&c[4]==c[3])ok=true;\n\treturn ok;\n}\nint main(){\n\tchar z;\n\twhile(cin>>c[0]){\n\t\tfor(int i=1;i<5;i++)cin>>z>>c[i];\n\t\tans=0;\n\t\tsort(c,c+5);\n\t\tif(s1())ans=1;\n\t\tif(s2())ans=2;\n\t\tif(s3())ans=3;\n\t\tif(s4())ans=4;\n\t\tif(s5())ans=5;\n\t\tif(s6())ans=6;\n\t\tcout<<m[ans]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nstring paircard(int card[]){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j) if(x == card[j]) ansx++;\n\t\t\t\tif(k!=j) if(y == card[j]) ansy++;\n\t\t\t}\n\t\t\tif(ansx < ansy) swap(ansx,ansy);\n\t\t\tif(ansx == 4 && ansy ==1) return \"four card\";\n\t\t\tif(ansx == 3 && ansy ==2) return \"full house\";\n\t\t\tif(ansx == 3 && ansy ==1) return \"three card\";\n\t\t\tif(ansx == 2 && ansy ==2) return \"two pair\";\n\t\t\tif(ansx == 2 && ansy ==1) return \"one pair\";\n\t\t}\n\t\treturn \"null\";\n}\n\nbool straight(int card[]){\n\tint ans = 1;\n\tif(card[0] == 1){\n\t\t\tfor(int i=0;i+1<4;i++){\n\t\t\t\tif(card[1]+i+1 == card[i+2]) ans++;\n\t\t\t}\n\t\t\tif(card[4] == 13 && ans == 4) return true;\n\t\t}\n\tans = 1;\n\tfor(int i=0;i+1<5;i++){\n\t\tif(card[0]+i+1 == card[i+1]) ans++;\n\t}\n\tif(ans==5) return true;\n\n\treturn false;\n}\n\n\nstring poker(int card[]){\n\n \tif(straight(card)){return \"straight\";}\n\n\treturn paircard(card);\n}\n\n\nint main(){\n\tchar k; int card[5];\n\twhile(1){\n\t\tcin>>card[0]>>k>>card[1]>>k>>card[2]>>k>>card[3]>>k>>card[4];\n\t\t\t\tif(cin.eof())break;\n\t\tsort(card,card+5);\n\t\tcout << poker(card) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tfor(auto it=count.begin();it!=count.end();it++){\n\t\tif(*it>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(*it==4){\n\t\t\treturn \"four card\";\n\t\t}else if(*it==3){\n\t\t\tis3 = true;\n\t\t}else if(*it==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <string>\n#include <cmath>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<int(n);++i)\n\nstatic const double PI=6*asin(0.5);\ntypedef complex<double> P;\ntypedef long long ll;\n\n\nint a[5]={0};\nint c[14]={0};\nint node;\nchar t;\nint tmp;\n\nint main(){\n\twhile(cin>>tmp){\n\t\tc[tmp]++;\n\t\trep(i,4){\n\t\t\tcin>>t>>tmp;\n\t\t\tc[tmp]++;\n\t\t}\n\t\trep(i,14){\n\t\t\ta[c[i]]++;\n\t\t}\n\t\tbool str=false;\n\t\trep(i,10){\n\t\t\tif(c[i]==1){\n\t\t\t\trep(j,4){\n\t\t\t\t\tif(c[i+j+1]!=1){\n\t\t\t\t\t\tstr=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(j==3) str=true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//rep(i,13) cout<<c[i+1]<<\" \";\n\t\t//cout<<endl;\n\t\tif(c[1]==1&&c[10]==1&&c[11]==1&&c[12]==1&&c[13]==1) str=true;\n\t\tif(a[4]==1) cout<<\"four card\\n\";\n\t\telse if(a[3]==1&&a[2]==1) cout<<\"full house\\n\";\n\t\telse if(str) cout<<\"straight\\n\";\n\t\telse if(a[3]==1) cout<<\"three card\\n\";\n\t\telse if(a[2]==2) cout<<\"two pair\\n\";\n\t\telse if(a[2]==1) cout<<\"one pair\\n\";\n\t\telse cout<<\"null\\n\";\n\t\t\n\t\trep(i,14) c[i]=0;\n\t\trep(i,5) a[i]=0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = unsigned;\nusing u64 = unsigned long long;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max()/32*15+208;\n\n\n\nint main() {\n    int a, b, c, d, e;\n    while(scanf(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e) != EOF){\n        vector<int> v{a, b, c, d, e};\n        [&](){\n            vector<int> cnt(14);\n            for (int i = 0; i < 5; ++i) {\n                cnt[v[i]]++;\n            }\n            int two = 0, three = 0;\n            for (int i = 0; i < 14; ++i) {\n                if(cnt[i] == 4) {\n                    puts(\"four card\");\n                    return;\n                }else if(cnt[i] == 3) three++;\n                else if(cnt[i] == 2) two++;\n            }\n            if(three && two){\n                puts(\"full house\");\n                return;\n            }\n            sort(v.begin(),v.end());\n            if(v == vector<int>{1, 10, 11, 12, 13}){\n                puts(\"straight\");\n                return;\n            }\n            int ok = 1;\n            for (int i = 0; i < 4; ++i) {\n                if(v[i]+1 != v[i+1]) ok = 0;\n            }\n            if(ok){\n                puts(\"straight\");\n                return;\n            }\n            if(three) puts(\"three card\");\n            else if(two == 2) puts(\"two pair\");\n            else if(two) puts(\"one pair\");\n            else puts(\"null\");\n        }();\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst string yaku[] = {\"null\",\n\t\t       \"one pair\",\n\t\t       \"two pair\",\n\t\t       \"three card\",\n\t\t       \"four card\",\n\t\t       \"straight\",\n\t\t       \"full house\"\n};\nint one(int T[]){\n  int cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 1)return 1;\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  return -1;\n}\n\nint two(int T[]){\n  int cnt = 0,f = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 1 && f ==1)return 2;\n    if(T[i]!=T[i+1]){\n      cnt = 0;\n      f = 1;\n    }\n  }\n  return -1;\n}\n\nint three(int T[]){\n  int cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 2)return 3;\n    if(T[i]!=T[i+1])cnt = 0;\n  }\n  return -1;\n}\nint four(int T[]){\n  int cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 3)return 4;\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  return -1;\n}\nint straigt(int T[]){\n  int f = 1;\n  int cnt = 0;\n  if(T[0] == 1&&T[4] == 13){\n    if(T[1] == 10 && T[2] == 11 && T[3] == 12 )f = 1;\n    else f = 0;\n    //    cout << f << endl;\n  }else{\n    for(int i = 0 ; i < 5 ; i++ ){\n      //cout << T[i] <<' '<< T[0] + i << endl;\n      if(T[i] != i + T[0])f = 0;\n    }\n  }\n  if(f)return 5;\n  else return -1;\n}\n\nint fullhouse(int T[]){\n  int cmp1=-1,cmp2=-1;\n  int cnt = 0;\n  //3\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 2){\n      cmp1 = T[i];\n      break;\n    }\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  //2\n  cnt = 0;\n  for(int i = 0 ; i < 4 ; i++){\n    if(T[i] == T[i+1])cnt++;\n    if(cnt == 1 && T[i+1] != T[i+2]){\n      cmp2 = T[i];\n      break;\n    }\n    if(T[i] != T[i+1])cnt = 0;\n  }\n  if(cmp1 != cmp2 && cmp1 > 0 && cmp2 > 0)return 6;\n  else return -1;\n}\n\nint main(){\n  int toranpu[5];\n  char c;\n  while(cin >> toranpu[0]){\n    int f = 0;\n    for(int i = 1; i < 5 ; i++){\n      cin >> c >>toranpu[i];\n    }\n    sort(toranpu,toranpu+5);\n    //   for(int i = 0 ; i < 5 ; i++)cout << toranpu[i] << ' ';\n    //    cout << endl;\n    if(one(toranpu) != -1)f = one(toranpu);\n    //    cout <<\"f1 \" <<  f << endl;\n    if(two(toranpu) != -1)f = two(toranpu);\n    //    cout <<\"f2 \" <<  f << endl;\n    if(three(toranpu) != -1)f = three(toranpu);\n    //   cout <<\"f3 \" <<  f << endl;\n    if(four(toranpu) != -1)f = four(toranpu);\n    //    cout <<\"f4 \" <<  f << endl;\n    if(straigt(toranpu) != -1)f = straigt(toranpu);\n    //    cout <<\"f5 \" <<  f << endl;\n    if(fullhouse(toranpu) != -1)f = fullhouse(toranpu);\n    //    cout <<\"f6 \" <<  f << endl;\n    cout << yaku[f] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint card[5], ccount[13] = {0};\n\nint checkHand();\nint checkOnePair();\nint checkTwoPair();\nint checkThreeCard();\nint checkStraight();\nint checkFullHouse();\nint checkFourCard();\n\nint main() {\n\tchar c;\n\n\twhile (1) {\n\t\tcin >> card[0];\n\t\tif (cin.eof())\tbreak;\n\t\tcin >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4];\n\n\t\tswitch (checkHand()) {\n\t\tcase 0:\n\t\t\tcout << \"null\" << endl;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tcout << \"four card\" << endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout << \"full house\" << endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout << \"straight\" << endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout << \"three card\" << endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tccount[i] = 0;\n\t\t}\n\t}\n\n\treturn 0;\n} \n\nint checkHand() {\n\tint result = 0;\n\n\tstable_sort(card, card+4);\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tccount[card[i] - 1]++;\n\t}\n\n\tif (checkOnePair() == 1)\tresult = 6;\n\tif (checkTwoPair() == 1)\tresult = 5;\n\tif (checkThreeCard() == 1)\tresult = 4;\n\tif (checkStraight() == 1)\tresult = 3;\n\tif (checkFullHouse() == 1)\tresult = 2;\n\tif (checkFourCard() == 1)\tresult = 1;\n\n\treturn result;\n}\n\nint checkOnePair() {\n\tfor (int i = 0; i < 13; i++){\n\t\tif (ccount[i] == 2)\treturn 1;\n\t}\n\n\treturn 0;\n}\nint checkTwoPair() {\n\tint cont = 0;\n\tfor (int i = 0; i < 13; i++){\n\t\tif (ccount[i] == 2)\tcont++;\n\t\tif (cont == 2)\t\treturn 1;\n\t}\n\n\treturn 0;\n}\nint checkThreeCard() {\n\tfor (int i = 0; i < 13; i++){\n\t\tif (ccount[i] == 3)\treturn 1;\n\t}\n\n\treturn 0;\n}\nint checkStraight() {\n\tint result = 1;\n\n\tif (card[0] >= 11)\treturn 0;\n\n\tif (card[0] == 1) {\n\t\tfor (int i = 1, j = 10; i < 5; i++, j++) {\n\t\t\tif (card[i] != j) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 1, j = card[0] + 1; i < 5; i++, j++) {\n\t\t\tif (card[i] != j) {\n\t\t\t\tresult = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == 13){\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\nint checkFullHouse() {\n\tif (checkOnePair() == 1 && checkThreeCard() == 1)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\nint checkFourCard() {\n\tfor (int i = 0; i < 13; i++) {\n\t\tif (ccount[i] == 4) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint num[5];\n\tchar c;\n\twhile (cin >> num[0]) {\n\t\tfor (int i = 1; i < 5; i++) {\n\t\t\tcin >> c >> num[i];\n\t\t}\n\t\tsort(num, num + 5);\n\t\tint pair[2] = {}, cont = 0;\n\t\tfor (int i = 1, j = 0; i < 5; i++) {\n\t\t\tif (num[i] == num[i - 1]) pair[j]++;\n\t\t\telse if (pair[j]) j++;\n\t\t\tif (num[i] == num[i - 1] + 1) cont++;\n\t\t}\n\t\tif (cont == 4) cout << \"straight\" << endl;\n\t\telse if (cont == 3 && num[0] == 1 && num[1] == 10) cout << \"straight\" << endl;\n\t\telse {\n\t\t\tsort(pair, pair + 2);\n\t\t\tif (pair[1] == 3) {\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if (pair[1] == 2) {\n\t\t\t\tif (pair[0] == 1) {\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pair[1] == 1) {\n\t\t\t\tif (pair[0] == 1) {\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cctype>\n#include <sstream>\n#include <cmath>\n#include <climits>\n#include <map>\n\nusing namespace std;\n\n#define reep(i,f,n) for(int i=f; i<int(n); ++i)\n#define rep(i,n) reep(i,0,n)\n\ntypedef vector<int> vi;\n\nint main()\n{\n\tint card[5];\n\twhile(1){\n\t\trep(i, 5){\n\t\t\tif(scanf(\"%d,\", &card[i]) == EOF)\n\t\t\t\treturn 0;\n\t\t}\n\t\t\n\t\tsort(card, card+5);\n\n\t\tint cnt[4] = {0};\n\t\trep(i, 5){\n\t\t\tcnt[0]++;\n\t\t\tint j=1;\n\t\t\tfor(j=1; i+j<5 && card[i+j]==card[i]; ++j){\n\t\t\t\tcnt[j-1]--;\n\t\t\t\tcnt[j]++;\n\t\t\t}\n\t\t\ti += j-1;\n\t\t}\n\t\tif(cnt[3])\n\t\t\tputs(\"four card\");\n\t\telse if(cnt[2] && cnt[1])\n\t\t\tputs(\"full house\");\n\t\telse if(cnt[0]==5 && (card[4]-card[0]==4 || (card[0]==1 && card[1]==10)))\n\t\t\tputs(\"straight\");\n\t\telse if(cnt[2])\n\t\t\tputs(\"three card\");\n\t\telse if(cnt[1] == 2)\n\t\t\tputs(\"two pair\");\n\t\telse if(cnt[1])\n\t\t\tputs(\"one pair\");\n\t\telse\n\t\t\tputs(\"null\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n  int i, j, k, c[5], t;\n  while(scanf(\"%d\", &c[0]) != EOF) {\n    for(i = 1; i < 5; ++i) scanf(\",%d\", &c[i]);\n    for(i = 0; i < 5; ++i) if(c[i] == 1) c[i] = 14;\n    for(i = 0; i < 5; ++i) for(j = i + 1; j < 5; ++j) if(c[i] > c[j]) t = c[i], c[i] = c[j], c[j] = t;\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) || (c[3] == c[4] && c[1] == c[2] && c[2] == c[3])) printf(\"four card\\n\");\n    else if((c[0] == c[1] && c[1] == c[2] && c[3] == c[4]) || (c[0] == c[1] && c[2] == c[3] && c[3] == c[4])) printf(\"full house\\n\");\n    else if((c[4] == c[3] + 1 || (c[4] == 14 && c[3] == 2)) && c[3] == c[2] + 1 && c[2] == c[1] + 1 && c[1] == c[0] + 1) printf(\"straight\\n\");\n    else if((c[0] == c[1] && c[1] == c[2]) || (c[2] == c[3] && c[1] == c[2]) || (c[2] == c[3] && c[3] == c[4])) printf(\"three card\\n\");\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[0] == c[1] && c[3] == c[4]) || (c[1] == c[2] && c[3] == c[4])) printf(\"two pair\\n\");\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\nbool isStraight(int* a)\n{\n    if(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13) return true;\n    for(int i=1;i<5;i++) if(a[i]!=a[i-1]+1) return false;\n    return true;\n}\nint main()\n{\n    int a[5]; char ch;\n    while(cin >> a[0] >> ch >> a[1] >> ch >> a[2] >> ch >> a[3] >> ch >> a[4])\n    {\n        int sum=1; int pair=0;\n        sort(a,a+5);\n        for(int i=1;i<5;i++)\n        {\n            int tmp=1;\n            while(i<5 && a[i-1]==a[i]) {tmp++; i++;}\n            sum=max(tmp,sum);\n        }\n        bool flag=true;\n        for(int i=1;i<5;i++)\n        {\n            if(flag && a[i-1]==a[i]) {pair++; flag=false;}\n            else flag=true;\n        }\n        if(sum==4) cout << \"four card\" << endl;\n        else if(sum==3 && pair==2) cout << \"full house\" << endl;\n        else if(isStraight(a)) cout << \"straight\" << endl;\n        else if(sum==3) cout << \"three card\" << endl;\n        else if(pair==2) cout<< \"two pair\" << endl;\n        else if(pair==1) cout << \"one pair\" << endl;\n        else cout << \"null\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main(){\n\n  vector<int> card(5);\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n\tbool judge_1p = false;\n\tbool judge_2p = false;\n\tbool judge_3 = false;\n\tbool judge_4 = false;\n\tbool judge_s = false;\n\n\tsort(card.begin(),card.end());\n\t\n\tfor(int i=0;i<4;++i){\n\t  int count = 1;\n\t  for(int j=i+1;j<5;++j){\n\t\tif(card[i] == card[j]){\n\t\t  count++;\n\t\t  if(j == 4)\n\t\t\ti = j - 1;\n\t\t}\n\t\telse{\n\t\t  i = j - 1;\n\t\t  break;\n\t\t}\n\t  }\n\t  \n\t  if(count == 2){\n\t\tif(judge_1p == false)\n\t\t  judge_1p = true;\n\t\telse if(judge_1p == true)\n\t\t  judge_2p = true;\n\t  }\n\t  else if(count == 3)\n\t\tjudge_3 = true;\n\t  else if(count == 4)\n\t\tjudge_4 = true;\n\t  \n\t}\n\n\tif(card[0] == 1 && card[1] == 10 &&\n\t   card[2] == 11 && card[3] == 12 &&\n\t   card[4] == 13){\n\t  cout<<\"straight\"<<endl;\n\t  continue;\n\t} \n\t\n\tfor(int i=0;i<4;++i){\n\t  if(card[i] == card[i+1] - 1 && i == 3)\n\t\tjudge_s = true;\n\t\t\n\t  else if(card[i] != card[i+1] - 1)\n\t\tbreak;\n\t}\n\n\tif(judge_4 == true)\n\t  cout<<\"four card\"<<endl;\n\telse if(judge_3 == true && judge_1p == true)\n\t  cout<<\"full house\"<<endl;\n\telse if(judge_3 == true)\n\t  cout<<\"three card\"<<endl;\n\telse if(judge_2p == true)\n\t  cout<<\"two pair\"<<endl;\n\telse if(judge_1p == true)\n\t  cout<<\"one pair\"<<endl;\n\telse if(judge_s == true)\n\t  cout<<\"straight\"<<endl;\n\telse\n\t  cout<<\"null\"<<endl;\n  }\n  \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n\nint main(){\n\tint c;\n\tint cards[14], pairs[5];\n\twhile( scanf(\"%d\", &c ), c ){\n\t\tmemset( cards, 0, sizeof(cards) );\n\t\tmemset( pairs, 0, sizeof(pairs) );\n\t\tcards[c]++;\n\t\tfor( int i=0; i<4; i++ ){\n\t\t\tscanf(\",%d\",&c);\n\t\t\tcards[c]++;\n\t\t}\n\t\tfor( int i=1; i<=13; i++ ){\n\t\t\tpairs[cards[i]]++;\n\t\t}\n\t\tif( pairs[4] ){\n\t\t\tcout << \"four card\" << endl;\n\t\t}else if( pairs[3] && pairs[2] ){\n\t\t\tcout << \"full house\" << endl;\n\t\t}else if( pairs[1] == 5 ){\n\t\t\tint i=1;\n\t\t\tfor( ; i<=10; i++ ){\n\t\t\t\tif( cards[i] && cards[i+1] && cards[i+2] && cards[i+3] && cards[((i+3)%13)+1] ){\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( i>10 )\n\t\t\t\tcout << \"null\" << endl;\n\t\t}else if( pairs[3] ){\n\t\t\tcout << \"three card\" << endl;\n\t\t}else if( pairs[2] == 2 ){\n\t\t\tcout << \"two pair\" << endl;\n\t\t}else if( pairs[2] ){\n\t\t\tcout << \"one pair\" << endl;\n\t\t}else{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <math.h>\n#include <stdio.h>\n#include <ctype.h>\n#include <algorithm>\n\nusing namespace std;\n\nint x[5];\n\n\n\nint main () {\n    while(scanf(\"%d,%d,%d,%d,%d\",&x[0],&x[1],&x[2],&x[3],&x[4])!=EOF){\n        int bucket[15]={0};\n        for(int i=0; i<5; i++){\n            if(x[i]==1){\n                bucket[14]++;\n            }\n            bucket[x[i]]++;\n        }\n        \n        int max1=0;\n        int max2=0;\n        for(int i=0; i<14; i++){\n            if(max1<bucket[i]){\n                max2=max1;\n                max1=bucket[i];\n            }else if(max2<bucket[i]){\n                max2=bucket[i];\n            }\n        }\n        \n        int first=-1;\n        for(int i=0; i<15; i++){\n            if(bucket[i]==1){\n                first=i;\n                break;\n            }\n        }\n        \n\n        \n        int straight=1;\n        for(int i=first; i<first+4; i++){\n            if(bucket[i]!=1){\n                straight=0;\n                break;\n            }\n        }\n        \n        if(straight!=1){\n            straight=1;\n            for(int i=10; i<15; i++){\n                if(bucket[i]!=1){\n                    straight=0;\n                    break;\n                }\n            }\n        }\n        \n        \n        if(max1==4){\n            cout<<\"four card\"<<endl;\n        }else if(max1==3&&max2==2){\n            cout<<\"full house\"<<endl;\n        }else if(straight==1){\n            cout<<\"straight\"<<endl;\n        }else if(max1==3){\n            cout<<\"three card\"<<endl;\n        }else if(max1==2&&max2==2){\n            cout<<\"two pair\"<<endl;\n        }else if(max1==2){\n            cout<<\"one pair\"<<endl;\n        }else{\n            cout<<\"null\"<<endl;\n        }\n\n\n\n\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<set>\n#include<string>\n#define foreach(r,p) for(r::iterator it=p.begin();it!=p.end();++it)\nusing namespace std;\n\nstring check(vector<int> s)\n{\n    if( (s[0]==s[1]&&s[0]==s[2]&&s[0]==s[3])|| (s[1]==s[2]&&s[1]==s[3]&&s[1]==s[4]))\n        return \"four card\";\n\n    if((s[0]==s[1]&&s[0]==s[2]&&s[3]==s[4])||(s[0]==s[1]&&s[2]==s[3]&&s[2]==s[4]))\n        return \"full house\";\n    \n    if((s[0]==(s[1]-1) &&s[0]==(s[2]-2) && s[0] ==(s[3]-3) && s[0]==(s[4]-4))\n            ||(s[0]==1 && s[1]==10 &&s[2]==11&&s[3]==12&&s[4]==13))\n        return \"straight\";\n    if((s[0]==s[1]&&s[0]==s[2])||(s[1]==s[2]&&s[1]==s[3]) || (s[2]==s[3]&&s[2]==s[4]))\n        return \"three card\";\n    \n    if((s[0]==s[1]&&s[2]==s[3])||(s[0]==s[1]&&s[3]==s[4])||(s[1]==s[2]&&s[3]==s[4]))\n        return \"two pair\";\n    \n    if(s[0]==s[1]||s[1]==s[2]||s[2]==s[3]||s[3]==s[4])\n        return \"one pair\";\n\n    return \"null\";\n}\n\n\nint main()\n{\n    int n[5];\n    char t;\n    while( cin >>n[0]>>t>>n[1]>>t>>n[2]>>t>>n[3]>>t>>n[4])\n    {\n        vector<int> card;\n        if(cin.eof()) break;\n        for(int i=0;i<5;i++)\n        {\n            card.push_back(n[i]);\n        }\n        sort(card.begin(),card.end());\n        cout << check(card) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\nusing namespace std;\n\nint main() {\n\tint card[5];\n\tint yaku[15] = {0};\n\t\n\twhile ( ~scanf (\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) ){\n\t\tfor ( int i = 1; i < 15; i++ ) {\n\t\t\tyaku[i] = 0;\n\t\t}\n\t\t\n\t\tfor ( int i = 0; i < 5; i++ ) {\n\t\t\tif ( card[i] == 1 ) yaku[14]++;\n\t\t\tyaku[card[i]]++;\n\t\t}\n\t\t\n\t\t/*for ( int i = 1; i < 15; i++ ) {\n\t\t\tif ( yaku[i] > 0 ) {\n\t\t\t\tcout << i << \" \" << yaku[i] << endl;\n\t\t\t}\n\t\t}*/\n\t\t\n\t\tfor ( int i = 1; i < 15; i++ ) {\n\t\t\tif ( yaku[i] == 4 ){\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tgoto END;\n\t\t\t} else if ( yaku[i] == 3 ) {\n\t\t\t\tfor ( int j = 1; j < 14; j++ ) {\n\t\t\t\t\tif ( yaku[j] == 2 ) {\n\t\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\t\tgoto END;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( yaku[i] == 1 ) {\n\t\t\t\tfor ( int j = 1; j < 5; j++ ) {\n\t\t\t\t\tif ( yaku[i + j] != 1 )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if ( j == 4 ) {\n\t\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\t\tgoto END;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor ( int i = 1; i < 15; i++ ) {\n\t\t\tif ( yaku[i] == 3 ) {\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tgoto END;\n\t\t\t} else if ( yaku[i] == 2 ) {\n\t\t\t\tfor ( int j = i + 1; j < 14; j++ ) {\n\t\t\t\t\tif ( yaku[j] == 2 ) {\n\t\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\t\tgoto END;\n\t\t\t\t\t}else if ( j == 13 ){\n\t\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\t\t\tgoto END;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << \"null\" << endl;\n\t\tEND:;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, s, n) for(int i = s; i < (int)n; i++)\n#define per(i, n) for(int i = n; i >= 0; i--)\n#define ROF(i, s, n) for(int i = s; i >= (int)n; i--)\n#define FORIT(i, A) for (auto i : A)\n#define PRINT(x) cout << (x) << \"\\n\"\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define MP make_pair\n#define EACH(i, n) for (__typeof((n).begin()) i = (n).begin(); i != (n).end(); ++i)\n#define SZ(a) int((a).size())\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n#define NCLR(a) memset((a), -1 ,sizeof(a))\n#define dump(x) cout << #x << \" = \" << (x) << \"\\n\";\n#define debug(x) cout << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << \"\\n\";\n#define sq(n) (n) * (n)\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\ntypedef vector<LL> VLL;\ntypedef vector<VLL> VVLL;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\ntypedef priority_queue<int> maxpq;\ntypedef priority_queue< int, vector<int>, greater<int> > minpq;\nstatic const double EPS = 1e-10;\nstatic const double PI = acos( -1.0 );\nstatic const int mod = 1000000007;\nstatic const int INF = 1 << 25;\nstatic const LL LL_INF = 1152921504606846976;\nstatic const int dx[] = { -1, 0, 1, 0, 1, -1, 1, -1 };\nstatic const int dy[] = { 0, -1, 0, 1, 1, 1, -1, -1 };\n\n\nstring _str[ 7 ] = { \"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\" };\nint ans = 0;\nint _hand[ 5 ];\n\nint main() {\n\twhile ( ~scanf( \"%d,%d,%d,%d,%d\", &_hand[ 0 ], &_hand[ 1 ], &_hand[ 2 ], &_hand[ 3 ], &_hand[ 4 ] ) ) {\n\t\tfor ( int i = 0; i < 5; i++ ) {\n\t\t\tif ( _hand[ i ] == 1 ) {\n\t\t\t\t_hand[ i ] += 13;\n\t\t\t}\n\t\t}\n\t\tsort( _hand, _hand + 5 );\n\t\tans = 0;\n\t\tbool is_straight = true;\n\t\tfor ( int i = 0; i < 4; i++ ) {\n\t\t\tif ( _hand[ i + 1 ] - _hand[ i ] != 1 ) {\n\t\t\t\tis_straight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( is_straight ) {\n\t\t\tans = 4;\n\t\t}\n\t\tbool is_three_card = false;\n\t\tbool is_one_pair = false;\n\t\tfor ( int i = 2; i <= 14; i++ ) {\n\t\t\tint many = upper_bound( _hand, _hand + 5, i ) - lower_bound( _hand, _hand + 5, i );\n\t\t\tif ( many == 4 ) {\n\t\t\t\tans = 6;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( many == 3 ) {\n\t\t\t\tis_three_card = true;\n\t\t\t\tans = 3;\n\t\t\t\tif ( is_one_pair ) {\n\t\t\t\t\tans = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( many == 2 ) {\n\t\t\t\tif ( is_one_pair ) {\n\t\t\t\t\tans = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( is_three_card ) {\n\t\t\t\t\tans = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tis_one_pair = true;\n\t\t\t\tans = 1;\n\t\t\t}\n\t\t}\n\t\tprintf( \"%s\\n\", _str[ ans ].c_str() );\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, s, n) for(int i = s; i < (int)n; i++)\n#define per(i, n) for(int i = n; i >= 0; i--)\n#define ROF(i, s, n) for(int i = s; i >= (int)n; i--)\n#define FORIT(i, A) for (auto i : A)\n#define PRINT(x) cout << (x) << \"\\n\"\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define MP make_pair\n#define EACH(i, n) for (__typeof((n).begin()) i = (n).begin(); i != (n).end(); ++i)\n#define SZ(a) int((a).size())\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n#define NCLR(a) memset((a), -1 ,sizeof(a))\n#define dump(x) cout << #x << \" = \" << (x) << \"\\n\";\n#define debug(x) cout << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << \"\\n\";\n#define sq(n) (n) * (n)\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\ntypedef vector<LL> VLL;\ntypedef vector<VLL> VVLL;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\ntypedef priority_queue<int> maxpq;\ntypedef priority_queue< int, vector<int>, greater<int> > minpq;\nstatic const double EPS = 1e-10;\nstatic const double PI = acos( -1.0 );\nstatic const int mod = 1000000007;\nstatic const int INF = 1 << 25;\nstatic const LL LL_INF = 1152921504606846976;\nstatic const int dx[] = { -1, 0, 1, 0, 1, -1, 1, -1 };\nstatic const int dy[] = { 0, -1, 0, 1, 1, 1, -1, -1 };\n\n\nstring _str[ 7 ] = { \"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\" };\nint ans = 0;\nint _hand[ 5 ];\n\nint main() {\n\twhile ( ~scanf( \"%d,%d,%d,%d,%d\", &_hand[ 0 ], &_hand[ 1 ], &_hand[ 2 ], &_hand[ 3 ], &_hand[ 4 ] ) ) {\n\t\tans = 0;\n\t\tsort( _hand, _hand + 5 );\n\t\tbool is_straight = true;\n\t\tfor ( int i = 0; i < 4; i++ ) {\n\t\t\tif ( _hand[ i + 1 ] - _hand[ i ] != 1 ) {\n\t\t\t\tis_straight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( is_straight ) {\n\t\t\tans = 4;\n\t\t}\n\t\tfor ( int i = 0; i < 5; i++ ) {\n\t\t\tif ( _hand[ i ] == 1 ) {\n\t\t\t\t_hand[ i ] += 13;\n\t\t\t}\n\t\t}\n\t\tsort( _hand, _hand + 5 );\n\t\tis_straight = true;\n\t\tfor ( int i = 0; i < 4; i++ ) {\n\t\t\tif ( _hand[ i + 1 ] - _hand[ i ] != 1 ) {\n\t\t\t\tis_straight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( is_straight ) {\n\t\t\tans = 4;\n\t\t}\n\n\t\tbool is_three_card = false;\n\t\tbool is_one_pair = false;\n\t\tfor ( int i = 1; i <= 20; i++ ) {\n\t\t\tint many = upper_bound( _hand, _hand + 5, i ) - lower_bound( _hand, _hand + 5, i );\n\t\t\tif ( many == 4 ) {\n\t\t\t\tans = 6;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( many == 3 ) {\n\t\t\t\tis_three_card = true;\n\t\t\t\tans = 3;\n\t\t\t\tif ( is_one_pair ) {\n\t\t\t\t\tans = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( many == 2 ) {\n\t\t\t\tif ( is_one_pair ) {\n\t\t\t\t\tans = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( is_three_card ) {\n\t\t\t\t\tans = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tis_one_pair = true;\n\t\t\t\tans = 1;\n\t\t\t}\n\t\t}\n\t\tprintf( \"%s\\n\", _str[ ans ].c_str() );\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tint l[5];\n\tchar c;\n\twhile (cin >> l[0] >> c >> l[1] >> c >> l[2] >> c >> l[3] >> c >> l[4]) {\n\t\tsort(l, l + 5);\n\t\tif (l[0] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[4] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[0] == l[1] && l[1] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[0] == l[1] && l[3] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[4] == l[3] + 1 && l[3] == l[2] + 1 && l[2] == l[1] + 1 && l[1] == l[0] + 1)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == 1 && l[1] == 10 && l[2] == 11 && l[3] == 12 && l[4] == 13)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[4] && l[3] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[0] == l[1] && l[2] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[2] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] || l[1] == l[2] || l[2] == l[3] || l[3] == l[4])\n\t\t\tcout << \"one pair\";\n\t\telse cout << \"null\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string>\n#include<stdlib.h>\n#include<math.h>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<string.h>\n#include<map>\n#include<queue>\n\nusing namespace std;\n\ntypedef pair<int,int> pii;\n\n#define rep(i,j) for(int i=0;i<(j);i++)\n#define reps(i,j,k) for(int i=j;i<=k;i++)\n#define in(i,j,k) ((i)>=(j)&&(i)<=(k))\n\nbool st(int h[5]){\n\tbool f=true;\n\trep(i,4)if(h[i+1]-h[i]!=1)f=false;\n\treturn f;\n}\n\nint main(){\n\tint h[5],c[5],a,*e;\n\tchar *s[]={\n\t\t\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\",\n\t};\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",h,h+1,h+2,h+3,h+4)){\n\t\tsort(h,h+5);\n\t\tif(h[0]==0)break;\n\t\ta=0;\n\t\trep(i,5)c[i]=count(h,h+5,h[i]);\n\t\tint d=count(c,c+5,2);\n\t\tif(d==4)a=2;\n\t\te=unique(c,c+5);\n\t\tsort(c,e);\n\t\tif(*(e-1)==4)a=6;\n\t\telse if(*c==2 && c[1]==3)a=5;\n\t\telse if(*(e-1)==3)a=3;\n\t\telse if(*(e-1)==2 && d==2)a=1;\n\t\tbool f=st(h);\n\t\tif(!f){\n\t\t\trotate(h,h+1,h+5);\n\t\t\treplace(h,h+5,1,14);\n\t\t\tf=st(h);\n\t\t}\n\t\tif(f)a=4;\n\t\tputs(s[a]);\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool f_card(int *check);\nbool f_house(int *check);\nbool straight(int *check);\nbool t_card(int *check);\nbool t_pair(int *check);\nbool o_pair(int *check);\n\nint main()\n{\n  int c;\n  \n  while (~scanf(\"%d\", &c)){\n    int check[18] = {0};\n    check[c]++;\n    for (int i = 0; i < 4; i++){\n      scanf(\",%d\", &c);\n      check[c]++;\n    }\n\n    if (f_card(check)){\n      printf(\"four card\\n\");\n    }\n    else if (f_house(check)){\n      printf(\"full house\\n\");\n    }\n    else if (straight(check)){\n      printf(\"straight\\n\");\n    }\n    else if (t_card(check)){\n      printf(\"three card\\n\");\n    }\n    else if (t_pair(check)){\n      printf(\"two pair\\n\");\n    }\n    else if (o_pair(check)){\n      printf(\"one pair\\n\");\n    }\n    else {\n      printf(\"null\\n\");\n    }\n  }\n\n  return (0);\n}\n\nbool f_card(int *check)\n{\n  for (int i = 1; i <= 13; i++){\n    if (check[i] == 4){\n      return (true);\n    }\n  }\n\n  return (false);\n}\n\nbool f_house(int *check)\n{\n  bool three = false, two = false;\n\n  for (int i = 1; i <= 13; i++){\n    if (check[i] == 3){\n      three = true;\n    }\n    if (check[i] == 2){\n      two = true;\n    }\n  }\n\n  if (three && two){\n    return (true);\n  }\n  else {\n    return (false);\n  }\n}\n\nbool straight(int *check)\n{\n  for (int i = 1; i <= 13; i++){\n    if (check[i] == 1){\n      if (check[i + 1] && check[i + 2] && check[i + 3] && check[i + 4]){\n        return (true);\n      }\n      if (i == 10 && check[11] && check[12] && check[13] && check[1]){\n        return (true);\n      }\n    }\n  }\n\n  return (false);\n}\n\nbool t_card(int *check)\n{\n  for (int i = 1; i <= 13; i++){\n    if (check[i] == 3){\n      return (true);\n    }\n  }\n\n  return (false);\n}\n\nbool t_pair(int *check)\n{\n  for (int i = 1; i <= 13; i++){\n    if (check[i] == 2){\n      for (int j = 1; j <= 13; j++){\n        if (j != i && check[j] == 2){\n          return (true);\n        }\n      }\n      break;\n    }\n  }\n\n  return (false);\n}\n\nbool o_pair(int *check)\n{\n  for (int i = 1; i <= 13; i++){\n    if (check[i] == 2){\n      return (true);\n    }\n  }\n\n  return (false);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint main(){\n  int card[5];\n\n  while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n    sort(card, card+5);\n    int f = 0;\n    bool st = 0;\n\n    for(int i = 0 ; i < 4 ; i++){\n      for(int j = i+1 ; j < 5 ; j++){\n\tif(card[i] == card[j]) f++;\n      }\n    }\n    \n    if(card[0]+1 == card[1] && card[0]+2 == card[2] &&\n       card[0]+3 == card[3] && card[0]+4 == card[4] ||\n       card[0] == 1 && card[1] == 10 && card[2] == 11 &&\n       card[3] == 12 && card[4] == 13){\n      st = 1;\n    }\n    \n    if(f == 6) cout << \"four card\" << endl;\n    else if(f == 4) cout << \"full house\" << endl;\n    else if(f == 3 && st == 0) cout << \"three card\" << endl;\n    else if(f == 2 && st == 0) cout << \"two pair\" << endl;\n    else if(f == 1 && st == 0) cout << \"one pair\" << endl;\n    else if(f <= 3 && st == 1) cout << \"straight\" << endl;\n    else cout << \"null\" << endl;\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\nint main(){\n    string s;\n    while(cin >> s){\n        vector<int> in;\n        int t = 0;\n        for(int i = 0; i < s.size(); i++){\n            if(s[i] == ','){\n                in.push_back(t);\n                t = 0;\n                continue;\n            }\n            t *= 10;\n            t += s[i] - '0';\n        }\n        in.push_back(t);\n        sort(in.begin(),in.end());\n\n        if(in[0] == in[3] || in[1] == in[4]){\n            cout << \"four card\" << endl;\n            continue;\n        }\n        int card[15] = {};\n        for(int i = 0; i < 5; i++)card[in[i]]++;\n        sort(card, card+15);\n        if(card[12] == 0){\n            cout << \"full house\" << endl;\n            continue;\n        }\n        if(card[14] == 1 &&(in[4] - in[0] == 4 || (in[0] == 1 && in[1] == 10 && in[4] == 13))){\n            cout << \"straight\" << endl;\n            continue;\n        }\n        if(card[14] == 3){\n            cout << \"three card\" << endl;\n            continue;\n        }\n        if(card[14] == 2 && card[13] == 2){\n            cout << \"two pair\" << endl;\n            continue;\n        }\n        if(card[14] == 2){\n            cout << \"one pair\" << endl;\n            continue;\n        }\n        cout << \"null\" << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nclass poker{\nprivate:\n\tint cardCnt[13];\n\tstring audit;\n\tbool onePair(){\n\t\tint pairCnt = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 2){\n\t\t\t\tpairCnt++;\n\t\t\t}\n\t\t}\n\t\treturn pairCnt == 1;\n\t}\n\tbool twoPair(){\n\t\tint pairCnt = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 2){\n\t\t\t\tpairCnt++;\n\t\t\t}\n\t\t}\n\t\treturn pairCnt == 2;\n\t}\n\tbool threeCard(){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tbool straight(){\n\t\tconst int exception[] = {1,0,0,0,0,0,0,0,0,1,1,1,1};\n\t\tfor(int i = 0;i < 9;i++){\n\t\t\tif(cardCnt[i] == 1 && cardCnt[i + 1] == 1 && cardCnt[i + 2] == 1 && cardCnt[i + 3] == 1 && cardCnt[i + 4] == 1){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(exception[i] != cardCnt[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tbool fullHouse(){\n\t\tbool b1 = false, b2 = false;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 3){\n\t\t\t\tb1 = true;\n\t\t\t}else if(cardCnt[i] == 2){\n\t\t\t\tb2 = true;\n\t\t\t}\n\t\t}\n\t\treturn b1 && b2;\n\t}\n\tbool fourCard(){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 4){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\npublic:\n\tstring getAudit(){\n\t\treturn audit;\n\t}\n\tpoker(int c[5]){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tcardCnt[i] = 0;\n\t\t}\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tcardCnt[c[i] - 1]++;\n\t\t}\n\t\tif(fourCard()){\n\t\t\taudit = \"four card\";\n\t\t}else if(fullHouse()){\n\t\t\taudit = \"full house\";\n\t\t}else if(straight()){\n\t\t\taudit = \"straight\";\n\t\t}else if(threeCard()){\n\t\t\taudit = \"three card\";\n\t\t}else if(twoPair()){\n\t\t\taudit = \"two pair\";\n\t\t}else if(onePair()){\n\t\t\taudit = \"one pair\";\n\t\t}else{\n\t\t\taudit = \"null\";\n\t\t}\n\t}\n};\n\nint main(void){\n\tint crd[5];\n\twhile(1){\n\t\tif(cin.eof()){\n\t\t\tbreak;\n\t\t}\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tcin >> crd[i];\n\t\t\tcin.get();\n\t\t}\n\t\tpoker p(crd);\n\t\tcout << p.getAudit() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,l,n) for(int i=l;i<n;i++)\n#define o(a) cout<<a<<endl\nusing namespace std;\n\nint main(){\n\tint a;\n\twhile(scanf(\"%d\",&a)!=EOF){\n\t\tint d[14]={},p=0,m=0;\n\t\tchar c;\n\t\tvector<int> n(5);\n\t\tn[0]=a;\n\t\td[n[0]]++;\n\t\trep(i,1,5){\n\t\t\tcin>>c>>n[i];\n\t\t\td[n[i]]++;\n\t\t}\n\t\tsort(n.begin(),n.end());\n\t\trep(i,1,14){\n\t\t\tm=max(m,d[i]);\n\t\t\tif(d[i]>=2) p++;\n\t\t}\n\t\tif(m==4){\n\t\t\to(\"four card\");\n\t\t}else if(m==3 && p==2){\n\t\t\to(\"full house\");\n\t\t}else if(m==3){\n\t\t\to(\"three card\");\n\t\t}else if(p==2){\n\t\t\to(\"two pair\");\n\t\t}else if(p==1){\n\t\t\to(\"one pair\");\n\t\t}else{\n\t\t\tbool f=1;\n\t\t\trep(i,0,4){\n\t\t\t\tif(n[i+1]!=n[i]+1 && !(n[0]==1 && n[1]==10 && n[4]==13)){\n\t\t\t\t\tf=0; break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(f) o(\"straight\");\n\t\t\telse o(\"null\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nint main(){\n\tstd::vector<int> cards(5);\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4])!=EOF){\n\t\tint n=0;\n\t\tfor(int i=0;i<4;i++){\n\t\t\tfor(int j=i+1;j<5;j++){\n\t\t\t\tif(cards[i]==cards[j]){\n\t\t\t\t\tn++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswitch(n){\n\t\t\tcase 1:\n\t\t\t\tstd::cout<<\"one pair\"<<std::endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tstd::cout<<\"two pair\"<<std::endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tstd::cout<<\"three card\"<<std::endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tstd::cout<<\"full house\"<<std::endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tstd::cout<<\"four card\"<<std::endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tstd::sort(cards.begin(),cards.end());\n\t\t\t\tif(cards[0]==cards[4]-4)std::cout<<\"straight\"<<std::endl;\n\t\t\t\telse if(cards[0]==1&&cards[1]==10&&cards[4]==13)std::cout<<\"straight\"<<std::endl;\n\t\t\t\telse std::cout<<\"null\"<<std::endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(void){\n\n    int a[5]={0};\n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n        string str=\"null\";\n        sort(a,a+5);\n        if(((a[0]==a[1])&&(a[2]==a[3])&&(a[2]==a[1]))||((a[1]==a[2])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"four card\";\n        else if(((a[0]==a[1])&&(a[1]==a[2])&&(a[3]==a[4]))||((a[0]==a[1])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"full house\";\n        else if(((a[0]==1)&&(a[1]==10)&&(a[2]==11)&&(a[3]==12)&&(a[4]==13))||((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4])))str=\"straight\";\n        else if(((a[0]==a[1])&&(a[1]==a[2]))||((a[1]==a[2])&&(a[2]==a[3]))||((a[2]==a[3])&&(a[3]==a[4])))str=\"three card\";\n        else if(((a[0]==a[1])&&((a[2]==a[3])||(a[3]==a[4])))||((a[1]==a[2])&&(a[3]==a[4])))str=\"two pair\";\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))str=\"one pair\";\n\n        cout<<str<<endl;\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define rep(i,n) for(int i=0; i<n; i++)\ntypedef long long ll;\ntypedef pair<int,int> pii;\n\nint main() {\n\tint c[5];\n\tchar k;\n\twhile(cin >> c[0] >> k >> c[1] >> k >> c[2] >> k >> c[3] >> k >> c[4]) {\n\t\tint cnt[13] = {};\n\t\tint twoes = 0;\n\t\trep(i,5) {\n\t\t\tcnt[c[i]-1]++;\n\t\t}\n\t\trep(i,13) {\n\t\t\tif(cnt[i] == 4) {\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t}\n\t\trep(i,13) {\n\t\t\trep(j,13) {\n\t\t\t\tif(cnt[i]==3 && cnt[j]==2) {\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\tgoto END;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trep(i,10) {\n\t\t\tbool ok = true;\n\t\t\trep(j,5) {\n\t\t\t\tint n = (i+j)%13;\n\t\t\t\tif(cnt[n] != 1) {\n\t\t\t\t\tok = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ok) {\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t}\n\t\trep(i,13) {\n\t\t\tif(cnt[i] == 3) {\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t}\n\t\trep(i,13) {\n\t\t\tif(cnt[i] == 2) twoes++;\n\t\t}\n\t\tif(twoes==2) {\n\t\t\tcout << \"two pair\" << endl;\n\t\t} else if(twoes==1) {\n\t\t\tcout << \"one pair\" << endl;\n\t\t}else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\nEND:;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint n[5];\n\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\n\t\tsort(n,n+5);\n\t\tif((n[0]==n[1]&&n[1]==n[2]&&n[2]==n[3])||(n[1]==n[2]&&n[2]==n[3]&&n[3]==n[4])) printf(\"four card\\n\");\n\t\telse if((n[0]==n[1]&&n[1]==n[2]&&n[3]==n[4])||(n[0]==n[1]&&n[2]==n[3]&&n[3]==n[4])) printf(\"full house\\n\");\n\t\telse if((n[4]==n[3]+1&&n[3]==n[2]+1&&n[2]==n[1]+1&&n[1]==n[0]+1)||(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)) printf(\"straight\\n\");\n\t\telse if((n[0]==n[1]&&n[1]==n[2])||(n[1]==n[2]&&n[2]==n[3])||(n[2]==n[3]&&n[3]==n[4])) printf(\"three card\\n\");\n\t\telse if((n[0]==n[1]&&n[2]==n[3])||(n[0]==n[1]&&n[3]==n[4])||(n[1]==n[2]&&n[3]==n[4])) printf(\"two pair\\n\");\n\t\telse if(n[0]==n[1]||n[1]==n[2]||n[2]==n[3]||n[3]==n[4]) printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[6];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tscanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\tif(check[i] == 3) three++;\n\t\t\t\tif(check[i] == 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(three == 1) printf(\"full house\\n\");\n\t\t\telse if(pair == 2) printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three == 1) \n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four == 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing ll  = long long;\n#define int ll\n#define rep(i,n) for(int i=0;i<n;i++)\n#define loop(i,s,n) for(int i=s;i<n;i++)\n#define erep(e,v) for(auto && e :v)\n#define all(in) in.begin(), in.end()\n#define MP make_pair\n#define INF (sizeof(int) == 4 ? (int)1e9:(int)1e18)\n#define EPS 0.0000000001\nusing namespace std;\ntemplate<class T, class S> void cmin(T &a, const S &b) { if (a > b)a = b; }\ntemplate<class T, class S> void cmax(T &a, const S &b) { if (a < b)a = b; }\ntemplate<typename Head, typename Value> auto vectors(const Head &head, const Value &v) { return vector<Value>(head, v); }\ntemplate<typename Head, typename... Tail> auto vectors(Head x, Tail... tail) { auto inner = vectors(tail...); return vector<decltype(inner)>(x, inner); }\ntemplate<class T> void join(T a){for(auto itr :a){if(itr != *a.begin())cout << \" \"; cout << itr;} }\nusing ld  = long double;\nusing pii = pair<int,int>;\nusing piii = pair<int,pii>;\nint W,H;\nint dx[]={0,0,1,-1}, dy[]={1,-1,0,0};\nbool valid(int x,int y){return (0<=x&&x<W)&&(0<=y&&y<H);}\nauto isValid(vector<int>v){\n    vector<int>st = {1,10,11,12,13};\n    if(v.back() - v.front() == 4 or v == st)return true;\n    else return false;\n}\nsigned main(){\n    vector<int>v(5);\n    char gomi;\n    while(cin >> v[0] >> gomi >> v[1] >> gomi >> v[2] >> gomi >> v[3]  >> gomi >> v[4]){\n        sort(all(v));\n        auto u = v;\n        u.erase(unique(all(u)),u.end());\n        if(u.size() == 2){\n            if(v.front() != v[1] or v.back() != v[3]){\n                cout << \"four card\" << endl;\n            } else {\n                cout << \"full house\" << endl;\n            }\n        } else if(u.size() == 5 and isValid(v)){\n            \n            cout << \"straight\" << endl;\n            \n        }else if(u.size() == 3){\n            \n            bool flag = false;\n            rep(i,v.size())\n                if(i and i+1 != v.size() and v[i-1] == v[i] and v[i] == v[i+1]) flag = true;\n            \n            if(flag)cout << \"three card\" << endl;\n            else cout << \"two pair\" << endl;\n            \n        } else if(u.size() == 4){\n            cout << \"one pair\" << endl;\n        }\n        else cout << \"null\" << endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <list>\n#include <utility>\n#include <numeric>\n\nusing namespace std;\ntypedef long long llong;\ntypedef unsigned long long ullong;\n\nconst ullong MOD = 1000000000 + 7;\n\nint main()\n{\n\tstring s;\n\tfor (; cin >> s;)\n\t{\n\t\tvector<int> a(14);\n\n\t\tstringstream ss;\n\t\tss << s;\n\n\t\tfor (int i = 0; i < 5; i++)\n\t\t{\n\t\t\tint x;\n\t\t\tss >> x;\n\n\t\t\ta.at(x - 1)++;\n\t\t\tif (x == 1)\n\t\t\t{\n\t\t\t\ta.at(13)++;\n\t\t\t}\n\n\t\t\tss.ignore();\n\t\t}\n\n\t\tint maxn = 0;\n\t\tint cnt = 0;\n\t\tint len = 0;\n\t\tbool str = false;\n\t\tfor (int i = 0; i < 14; i++)\n\t\t{\n\t\t\tif (a.at(i) > 0)\n\t\t\t{\n\t\t\t\tmaxn = max(maxn, a.at(i));\n\t\t\t\tif (i < 13)\n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t\tlen++;\n\t\t\t\tif (len >= 5)\n\t\t\t\t{\n\t\t\t\t\tstr = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tif (maxn == 4)\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t}\n\t\telse if (maxn == 3)\n\t\t{\n\t\t\tif (cnt == 2)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if (maxn == 2)\n\t\t{\n\t\t\tif (cnt == 3)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (str)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <string>\n#include <set>\n#include <functional>\n#include <vector>\n#include <algorithm>\n#include <stdio.h>\nstring s;\nstring solve(){\n\tint card[5]={},t=0,num[14]={};\n\tfor(int i=0;i<(int)s.length();i++){\n\t\tif(s[i]==',')t++;\n\t\telse card[t]=card[t]*10+s[i]-'0';\n\t}\n\t//for(int i=0;i<5;i++)cout<<card[i]<<endl;\n\tfor(int i=0;i<5;i++)num[card[i]]++;\n\tsort(num,num+14,greater<int>());\n\tif(num[0]==4)return \"four card\";\n\telse if(num[0]==3&&num[1]==2)return \"full house\";\n\telse if(num[0]==3)return \"three card\";\n\telse if(num[0]==2&&num[1]==2)return \"two pair\";\n\telse if(num[0]==2)return \"one pair\";\n\telse{\n\t\tsort(card,card+5);\n\t\tif(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13)return \"straight\";\n\t\tfor(int i=0;i<4;i++){\n\t\t\tif(card[i+1]-card[i]!=1)return \"null\";\n\t\t}\n\t\treturn \"straight\";\n\t}\n}\nint main()\n{\n\twhile(getline(cin,s)){\n\t\tcout<<solve()<<endl;\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tfor(auto it=count.begin();it!=count.end();it++){\n\t\tif(*it>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(*it==4){\n\t\t\treturn \"four card\";\n\t\t}else if(*it==3){\n\t\t\tis3 = true;\n\t\t}else if(*it==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n\nusing namespace std;\n\n\n\nint main(){\n\tint a,b,c,d,e,table[14],pair,three,four;\n\tbool st_FLG;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e) != EOF){\n\t\tfor(int i=1;i <= 13;i++)table[i] = 0;\n\t\tpair = three = four = 0;\n\t\tst_FLG=false;\n\t\ttable[a]++;\n\t\ttable[b]++;\n\t\ttable[c]++;\n\t\ttable[d]++;\n\t\ttable[e]++;\n\n\t\tfor(int i=1;i<=13;i++){\n\t\t\tif(table[i] == 2)pair++;\n\t\t\telse if(table[i] == 3)three++;\n\t\t\telse if(table[i] == 4)four++;\n\t\t\tif(i >= 5 && table[i] == 1 && table[i-1] == 1 && table[i-2] == 1 && table[i-3] == 1 && table[i-4]== 1)\n\t\t\t\tst_FLG = true;\n\t\t}\n\n\t\tif(four == 1){\n\t\t\tprintf(\"four card\\n\");\n\t\t}else if(pair == 1 && three == 1){\n\t\t\tprintf(\"full house\\n\");\n\t\t}else if(three == 1){\n\t\t\tprintf(\"three card\\n\");\n\t\t}else if(pair == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}else if(pair == 1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}else if((st_FLG == true) || (table[10] == 1 && table[11] == 1 && table[12] == 1 && table[13] == 1 && table[1] == 1)){\n\t\t\tprintf(\"straight\\n\");\n\t\t}else{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef pair<int,P> pip;\ntypedef long long ll;\nconst int inf=(1<<31)-1;\nconst double pi=acos(-1);\n\nint a;\nvi n(5);\nchar t;\n\nint main(){\n\twhile(cin>>a){\n\t\tvi vec,tmp;\n\t\tn[0]=a;\n\t\tvec.push_back(a);\n\t\tfor(int i=1;i<5;i++){\n\t\t\tcin>>t>>n[i];\n\t\t\tbool used=1;\n\t\t\tfor(int j=0;j<vec.size();j++){\n\t\t\t\tif(n[i]==vec[j]) used=0;\n\t\t\t}\n\t\t\tif(used) vec.push_back(n[i]);\n\t\t\telse tmp.push_back(n[i]);\n\t\t}\n\t\tif(vec.size()==4){\n\t\t\tcout<<\"one pair\"<<endl;;\n\t\t\tcontinue;\n\t\t}\n\t\tif(vec.size()==3){\n\t\t\tif(tmp[0]==tmp[1]) cout<<\"three card\"<<endl;\n\t\t\telse cout<<\"two pair\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(vec.size()==2){\n\t\t\tif(tmp[0]==tmp[1]&&tmp[1]==tmp[2]) cout<<\"four card\"<<endl;\n\t\t\telse cout<<\"full house\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tsort(n.begin(),n.end());\n\t\tint tmpn=0;\n\t\tfor(int i=1;i<4;i++){\n\t\t\tif(n[i]+1==n[i+1]) tmpn++;\n\t\t}\n\t\tif((n[0]==1&&n[1]==10)||n[0]+1==n[1]) tmpn++;\n\t\tcout<<tmpn<<endl;\n\t\tif(tmpn==4){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout<<\"null\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n\nusing namespace std;\n\nint main(){\n  vector<int> c(5);\n  while(~scanf(\"%d\", &c[0])){\n    int p = 0; int tc = 0;\n    for(int i = 1; i < 5; i++) scanf(\",%d\", &c[i]);\n    sort(c.begin(), c.end());\n    for(int i = 0; i < 5; i++){\n      if(i != 0 && c[i] == c[i-1])p++;\n      if(i != 1 && c[i] == c[i-2])tc++;\n    }\n    if(p == 1) puts(\"one pair\");\n    else if(tc == 1 && p == 3)puts(\"full house\");\n    else if(tc && p == 2) puts(\"three card\");\n    else if(p == 2)  puts(\"two pair\"); \n    else if(p == 3) puts(\"four card\");\n    else if(c[4] - c[0] == 4 || (c[0] == 1 && c[1] == 10 && c[4] == 13)) puts(\"straght\");\n    else puts(\"null\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\twhile(1){\n\t\tint card[100] = {}; // A ~ 13\n\t\tint data[100] = {};\n\n\t\tchar c0;\n\t\tfor(int i = 0; i < 5; ++i){\n\t\t\tif(i != 0) cin >> c0;\n\t\t\tcin >> data[i];\n\t\t\t++card[data[i] - 1];\n\t\t}\n\n\t\tif(cin.eof()) break;\n\n\t\tsort(card, card + 13, greater<int>());\n\t\t/*\n\t\tfor(int i = 0; i < 13; ++i){\n\t\t\tcout << card[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t\t*/\n\t\tswitch(card[0]){\n\t\t\tcase 4 :\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tsort(data, data + 5);\n\t\t\t\tbool check = true;\n\t\t\t\tif(data[4] == 13) data[0] = 9;\n\t\t\t\tfor(int i = 0; i < 5; ++i){\n\t\t\t\t\tif(data[0] + i != data[i]){\n\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(check)\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<queue>\n#include<cstdio>\nusing namespace std;\n\nint main(){\n\tpriority_queue<int,vector<int>,greater<int> > que;\n\tstring ss;\n\tint c[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n\t\tint dt[14];\n\t\tfor(int i=0;i<14;i++){\n\t\t\tdt[i]=0;\n\t\t}\n\t\tfor(int i=0;i<5;i++){\n\t\t\tque.push(c[i]);\n\t\t}\n\t\twhile(!que.empty()){\n\t\t\tfor(int i=1;i<=13;i++){\n\t\t\t\tif(que.top()==i)dt[i]++;\n\t\t\t}\n\t\t\tque.pop();\n\t\t}\n\t\tint onepair=0,threecard=0,straight=0,fourcard=0;\n\t\tfor(int i=1;i<14;i++){\n\t\t\tif(dt[i]==2)onepair++;\n\t\t\tif(dt[i]==3)threecard++;\n\t\t\tif(dt[i]==4)fourcard++;\n\t\t}\n\t\tfor(int i=5;i<14;i++){\n\t\t\tif(dt[i-4]==1 && dt[i-3]==1 && dt[i-2]==1 && dt[i-1]==1 &&dt[i]==1)straight++;\n\t\t\tif(i==13){\n\t\t\t\tif(dt[10]==1 && dt[11]==1 && dt[12]==1 && dt[13]==1 &&dt[1]==1)straight++;\n\t\t\t}\n\t\t}\n\t\tif(onepair==1){\n\t\t\tif(threecard==1)cout<<\"full house\"<<endl;\n\t\t\telse cout<<\"one pair\"<<endl;\n\t\t}\n\t\telse if(onepair==2)cout<<\"two pair\"<<endl;\n\t\telse if(threecard==1){\n\t\t\tif(onepair==1)cout<<\"full house\"<<endl;\n\t\t\telse cout<<\"three card\"<<endl;\n\t\t}\n\t\telse if(fourcard==1)cout<<\"four card\"<<endl;\n\t\telse if(straight==1)cout<<\"straight\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(void){\n\n    int a[5];\n    string str=\"null\";\n    while(scanf(\"%d,%d,%d,%d,%d\",a[0],a[1],a[2],a[3],a[4])!=EOF){\n        sort(a,a+5);\n        if(((a[0]==a[1])&&(a[2]==a[3])&&(a[2]==a[1]))||((a[1]==a[2])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"four card\";\n        else if(((a[0]==a[1])&&(a[1]==a[2])&&(a[3]==a[4]))||((a[0]==a[1])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"full house\";\n        else if(((a[0]==1)&&(a[1]==10)&&(a[2]==11)&&(a[3]==12)&&(a[4]==13))||((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4])))str=\"straight\";\n        else if(((a[0]==a[1])&&(a[1]==a[2]))||((a[1]==a[2])&&(a[2]==a[3]))||((a[2]==a[3])&&(a[3]==a[4])))str=\"three card\";\n        else if(((a[0]==a[1])&&((a[2]==a[3])||(a[3]==a[4])))||((a[1]==a[2])&&(a[3]==a[4])))str=\"two pair\";\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))str=\"one pair\";\n\n        cout<<str<<endl;\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main(void)\n{\n  int hand[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4])!=EOF){\n    int c[13] = {0};\n    int v[5] = {0};\n    bool f = true;\n    sort(hand,hand+5);\n    for(int i = 0; i < 5; i++){\n      if(hand[0] != hand[i] - i){\n\tf = false;\n      }\n      c[hand[i] - 1]++;\n    }\n    if(c[0] && c[9] && c[10] && c[11] && c[12]){\n      f = true;\n    }\n    for(int i = 0; i < 13; i++){\n      v[c[i]]++;\n    }\n\n    if(v[4]) puts(\"four card\");\n    else if(v[3] && v[2]) puts(\"full house\");\n    else if(f) puts(\"straight\");\n    else if(v[3]) puts(\"three card\");\n    else if(v[2] == 2) puts(\"two pair\");\n    else if(v[2]) puts(\"one pair\");\n    else puts(\"null\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint main(){\n  vector<int> card(5);\n  for(;;){\n    if(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) == EOF) break;\n    sort(card.begin(),card.end());\n    int ans=0,x=card[0],y=1;\n    for(int i=1; i<5; i++){\n      if(x == card[i]) y++;\n      else{\n\tif(y == 2) ans+=2;\n\tif(y == 3) ans+=3;\n\tif(y == 4) ans+=7;\n\tx = card[i];\n\ty = 1;\n      }\n    }\n    if(y == 2) ans+=2;\n    if(y == 3) ans+=3;\n    if(y == 4) ans+=7;\n    if(card[0] == card[1]-1 && card[1] == card[2]-1 && card[2] == card[3]-1 && card[3] == card[4]-1) ans+=10;\n    if(card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) ans+=10;\n    if(ans == 0) cout <<\"null\"<<endl;\n    if(ans == 2) cout <<\"one pair\"<<endl;\n    if(ans == 4) cout <<\"two pair\"<<endl;\n    if(ans == 3) cout <<\"three card\"<<endl;\n    if(ans == 5) cout <<\"full house\"<<endl;\n    if(ans == 7) cout <<\"four card\"<<endl;\n    if(ans == 10) cout <<\"straight\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void){\n    int cards[5];\n    char dummy;\n    while (cin>>cards[0]>>dummy>>cards[1]>>dummy>>cards[2]>>dummy>>cards[3]>>dummy>>cards[4])\n    {\n        int count=0,ans=0;\n        sort(cards,cards+5);\n        for (int i=0; i<4; i++)\n        {\n            if ( cards[i] == cards[i+1] )\n            {\n                count++;\n                ans+=count;\n            }\n            else count=0;\n        }\n        \n        if (ans==0)\n        {\n            int sum=0;\n            for (int i=0; i<5; i++) sum+=cards[i];\n            if(sum-cards[0]*5==10) puts(\"straight\");\n            else if(cards[0]==1 && cards[1]==10 && cards[2]==11 && cards[3]==12 && cards[4]==13) puts(\"straight\");\n            else puts(\"null\");\n        }\n        \n        else if (ans==1) puts(\"one pair\");\n        else if (ans==2) puts(\"two pair\");\n        else if (ans==3) puts(\"three card\");\n        else if (ans==4) puts(\"full house\");\n        else if (ans==6) puts(\"four card\");\n        \n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <map>\n#include <algorithm>\n\nvoid check_multiplicity(const int* sorted_cards, std::map<int,int>& multiplicities)\n{\n\tmultiplicities.clear();\n\n\tconst int* current = sorted_cards;\n\tconst int* end = sorted_cards + 5;\n\twhile (current != end) {\n\t\tconst int* next = std::upper_bound(current, end, *current);\n\t\t++multiplicities[next - current];\n\t\tcurrent = next;\n\t}\n}\n\nint count(const std::map<int,int> multiplicities, int multiplicity)\n{\n\tstd::map<int,int>::const_iterator i = multiplicities.find(multiplicity);\n\treturn (i != multiplicities.end()) ? i->second : 0;\n}\n\nbool check_straight(const int* sorted_cards, std::map<int,int> multiplicities)\n{\n\tif (count(multiplicities, 1) != 5) {\n\t\treturn false;\n\t}\n\treturn (sorted_cards[4] == sorted_cards[0] + 4)\n\t\t|| (sorted_cards[0] == 1 && sorted_cards[1] == 10);\n}\n\nint main()\n{\n\tint cards[5] = {};\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) == 5) {\n\t\tstd::sort(cards, cards + 5);\n\t\tstd::map<int,int> multiplicities;\n\t\tcheck_multiplicity(cards, multiplicities);\n\n\t\tif (count(multiplicities, 4) > 0) {\n\t\t\tstd::cout << \"for card\\n\";\n\t\t} else if (count(multiplicities, 3) > 0 && count(multiplicities, 2) > 0) {\n\t\t\tstd::cout << \"full house\\n\";\n\t\t} else if (check_straight(cards, multiplicities)) {\n\t\t\tstd::cout << \"straight\\n\";\n\t\t} else if (count(multiplicities, 3) > 0) {\n\t\t\tstd::cout << \"three card\\n\";\n\t\t} else if (count(multiplicities, 2) == 2) {\n\t\t\tstd::cout << \"two pair\\n\";\n\t\t} else if (count(multiplicities, 2) == 1) {\n\t\t\tstd::cout << \"one pair\\n\";\n\t\t} else {\n\t\t\tstd::cout << \"null\\n\";\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\n\n\nint main(){\n  int c[6];\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    map<int,int> card;\n    int mex = 0;\n    for(int i=0;i<5;i++){\n      card[c[i]]++;\n      mex = max(mex,card[c[i]]);\n    }\n    sort(c,c+5);\n    bool full = true;\n    bool A,B;\n    A = B = false;\n    for(int i=0;i<5;i++){\n      if(c[i] == 13)A = true;\n      if(c[i] == 1)B = true;\n    }\n    if(A && B){\n      for(int i=0;i<5;i++){\n\tif(c[i] == 1){\n\t  c[i] = 14;\n\t  break;\n\t}\n      }\n      sort(c,c+5);\n   \n    }\n    for(int i=0;i<4;i++){\n      if(c[i]+1 != c[i+1]){\n\tfull = false;\n\tbreak;\n      }\n    }\n\n\n    if(mex == 4){\n      cout << \"four card\" << endl;\n    }\n    else if(mex == 3 && card.size() == 2){\n      cout << \"full house\" << endl;\n    }\n    else if(full){\n      cout << \"straight\" << endl;\n    }\n    else if(mex == 3){\n      cout << \"three card\" << endl;\n    }\n    else if(card.size() == 3){\n      cout << \"two pair\" << endl;\n    }\n    else if(mex == 2){\n      cout << \"one pair\" << endl;\n    }\n    else cout << \"null\" << endl;\n\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    int tmp[5];\n    char com;\n    while(cin >>tmp[0]>>com>>tmp[1]>>com>>tmp[2]>>com>>tmp[3]>>com>>tmp[4]){\n    int hand[14]={};\n\n    for(int i=0; i<5; ++i){\n      if(tmp[i]==1)++hand[13];\n      ++hand[tmp[i]-1];\n    }\n\n    int pair=0,three=0,str=0,four=0;\n    for(int i=0; i<14; ++i){\n      if(hand[i]==4){++four;}\n      if(hand[i]==1)++str;\n      if(hand[i]==2)++pair;\n      if(hand[i]==3)++three;\n      if(str!=5 && hand[i]==0)str=0;\n    }\n    if(hand[0]==hand[13] && hand[0]==2)--pair;\n    if(four)cout << \"four card\" << endl;\n    else if(three && pair)cout << \"full house\" << endl;\n    else if(str >= 5)cout << \"straight\" << endl;\n    else if(three)cout << \"three card\" << endl;\n    else if(pair == 2)cout << \"two pair\" << endl;\n    else if(pair == 1)cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }   \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint a[5],i,pair;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n\t\tpair = 0;\n\t\tsort(a,a + 5);\n\t\tif(a[1] == a[2] && a[2] == a[3] && (a[0] == a[1] || a[3] == a[4])) printf(\"four card\\n\");\n\t\telse if((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n\t\telse if((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n\t\telse if((a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)) printf(\"straight\\n\");\n\t\telse {\n\t\t\tfor(i = 0;i < 3;i++){\n\t\t\t\tif(a[i] == a[i + 1]) pair++;\n\t\t\t}\n\t\t\tif(pair == 2) printf(\"two pair\\n\");\n\t\t\telse if(pair == 1) printf(\"one pair\\n\");\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\nint main(){\nint x[5],i,j;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&x[0],&x[1],&x[2],&x[3],&x[4])!=EOF){\nfor(j=0;j<5;j++){\nfor(i=0;i<4;i++){\nif(x[i]>x[i+1]){\nint g=x[i+1];\nx[i+1]=x[i];\nx[i]=g;\n}}}\nif(x[0]==x[1] && x[1]==x[2] && x[2]==x[3]){\nprintf(\"four card\\n\");\ncontinue;\n}\nif(x[1]==x[2] &&x[2]==x[3]&&x[3]==x[4]){\nprintf(\"four card\\n\");\ncontinue;\n}\nif(x[0]==x[1]&&x[1]==x[2]&&x[3]==x[4]){\nprintf(\"full house\\n\");\ncontinue;\n}\nif(x[0]==x[1]&&x[2]==x[3]&&x[3]==x[4]){\nprintf(\"full house\\n\");\ncontinue;\n}\nif(x[0]<=10 && x[0]+1==x[1]&&x[1]+1==x[2]&&x[2]+1==x[3]&&x[3]+1==x[4]){\nprintf(\"straight\\n\");\ncontinue;\n}\nif(x[0]==1&&x[1]==10&&x[2]==11&&x[3]==12&&x[4]==13){\nprintf(\"straight\\n\");\ncontinue;\n}\nif(x[0]==x[1]&&x[1]==x[2]){\nprintf(\"three card\\n\");\ncontinue;\n}\nif(x[1]==x[2]&&x[3]==x[2]){\nprintf(\"three card\\n\");\ncontinue;\n}\nif(x[2]==x[3]&&x[3]==x[4]){\nprintf(\"three card\\n\");\ncontinue;\n}\nif(x[0]==x[1] && x[2]==x[3]){\nprintf(\"two pair\\n\");\ncontinue;\n}\nif(x[0]==x[1] && x[2]==x[3]){\nprintf(\"two pair\\n\");\ncontinue;\n}\nif(x[0]==x[1]&&x[3]==x[4]){\nprintf(\"two pair\\n\");\ncontinue;\n}\nif(x[1]==x[2]&&x[3]==x[4]){\nprintf(\"two pair\\n\");\ncontinue;\n}\nif(x[0]==x[1]){\nprintf(\"one pair\\n\");\ncontinue;\n}\nif(x[2]==x[1]){\nprintf(\"one pair\\n\");\ncontinue;\n}\nif(x[2]==x[3]){\nprintf(\"one pair\\n\");\ncontinue;\n}\nif(x[3]==x[4]){\nprintf(\"one pair\\n\");\ncontinue;\n}\nprintf(\"null\\n\");\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s;\n            while ((s = Console.ReadLine()) != null)\n            {\n                var list = s.Split(',').Select(int.Parse).ToList();\n                list.Sort();\n                var dict = new Dictionary<int, int>();\n                foreach (var v in list)\n                {\n                    if (dict.ContainsKey(v))\n                    {\n                        var i = dict[v] + 1;\n                        dict.Remove(v); dict.Add(v, i);\n                    }\n                    else\n                    {\n                        dict.Add(v, 1);\n                    }\n                }\n                bool isStraight = true;\n                for (int i = list[0]; i < list[0] + 5; i++)\n                {\n                    if (list[i - list[0]] != i) { isStraight = false; break; }\n                }\n                if (list[0] == 1)\n                {\n                    isStraight = true;\n                    for (int i = 0; i < 4; i++)\n                    {\n                        if (list[i+1] != 10+i) { isStraight = false; break; }\n                    }\n                }\n\n                bool isFour = false;\n                bool isThree = false;\n                int Pairs = 0;\n\n                var lk = dict.Keys;\n                foreach (var v in lk)\n                {\n                    isFour |= dict[v] == 4;\n                    isThree |= dict[v] == 3;\n                    Pairs += dict[v] == 2 ? 1 : 0;\n                }\n\n                string result = \"null\";\n\n                if (isFour) result = \"four card\";\n                else if (isThree && Pairs > 0) result = \"full house\";\n                else if (isStraight) result = \"straight\";\n                else if (isThree) result = \"three card\";\n                else if (Pairs == 2) result = \"two pairs\";\n                else if (Pairs > 0) result = \"one pair\";\n\n                Console.WriteLine(result);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(){\n    int cs[5];\n    while(scanf(\"%d,%d,%d,%d,%d\",&cs[0],&cs[1],&cs[2],&cs[3],&cs[4])!=-1){\n        sort(cs,cs+5);\n        if((cs[0]==cs[1] && cs[1]==cs[2] && cs[2]==cs[3]) || (cs[1]==cs[2] && cs[2]==cs[3] && cs[3]==cs[4])) printf(\"four card\\n\");\n        else if((cs[0]==cs[1] && cs[2]==cs[3] && cs[3]==cs[4]) || (cs[0]==cs[1] && cs[1]==cs[2] && cs[3]==cs[4])) printf(\"full house\\n\");\n        else if(cs[0]==1 && cs[1]==10 && cs[2]==11 && cs[3]==12 && cs[4]==13) printf(\"straight\\n\");\n        else if(cs[0]==cs[1]-1 && cs[1]==cs[2]-1 && cs[2]==cs[3]-1 && cs[3]==cs[4]-1) printf(\"straight\\n\");\n        else if((cs[0]==cs[1] && cs[1]==cs[2]) || (cs[1]==cs[2] && cs[2]==cs[3]) || (cs[2]==cs[3] &&cs[3]==cs[4])) printf(\"three card\\n\");\n        else{\n            int ps=0;\n            if(cs[0]==cs[1]) ps++;\n            if(cs[1]==cs[2]) ps++;\n            if(cs[2]==cs[3]) ps++;\n            if(cs[3]==cs[4]) ps++;\n            if(ps==2) printf(\"two pair\\n\");\n            else if(ps==1) printf(\"one pair\\n\");\n            else printf(\"null\\n\");\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0; int three = 0; int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump));\n\n  int a = 0;\n  int b = 0;\n\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e && e != 49){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    ++check[e];\n  }\n\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint a[5],i,pair;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n\t\tpair = 0;\n\t\tsort(a,a + 5);\n\t\tif(a[1] == a[2] && a[2] == a[3] && (a[0] == a[1] || a[3] == a[4])) printf(\"four card\\n\");\n\t\telse if((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n\t\telse if((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n\t\telse if((a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)) printf(\"straight\\n\");\n\t\telse {\n\t\t\tfor(i = 0;i < 3;i++){\n\t\t\t\tif(a[i] == a[i + 1]) pair++;\n\t\t\t}\n\t\t\tif(pair == 2) printf(\"two pair\\n\");\n\t\t\telse if(pair == 1) printf(\"one pair\\n\");\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nint card[5];\nmap<int, int> table;\n\nint main() {\n  while (1) {\n    table.clear();\n    if (scanf(\"%d\", &card[0]) != 1) break;\n    for (int i=1; i<5; i++) {\n      getchar();\n      scanf(\"%d\", &card[i]);\n    }\n\n    sort(card, card+5);\n    for (int i=0; i<5; i++) {\n      table[card[i]]++;\n    }\n  \n    int num_straight = 0;\n    for (int i=0; i<4; i++) {\n      num_straight += (card[i+1] == card[i] + 1);\n    }\n  \n    if (table[card[0]] == 4 || table[card[4]] == 4) puts(\"four card\");\n    else if (table.size() == 2) puts(\"full house\");\n    else if (num_straight + (card[0] == 1 && card[4] == 13 && card[1] != 2) >= 4) puts(\"straight\");\n    else if (table[card[1]] == 3 || table[card[3]] == 3) puts(\"three card\");\n    else if (table[card[1]] + table[card[3]] == 4) puts(\"two pair\");\n    else if (table.size() < 5) puts(\"one pair\");\n    else puts(\"null\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n \n \nint main()\n{\n    const int N = 5;\n    while(1)\n    {\n        int hand[N];\n        char x;\n        int j;\n        for(int i = 0; i < N; i++)\n        {\n            if(i)\n                cin >> x;\n            cin >> hand[i];\n        }\n        if(!cin)\n            break;\n \n        sort(hand, hand+N);\n \n        if(hand[0] == hand[3] ||\n            hand[1] == hand[4])\n            cout << \"four card\" << endl;\n        else if( (hand[0] == hand[1] && hand[2] == hand[4]) ||\n                (hand[0] == hand[2] && hand[3] == hand[4]) )\n            cout << \"full house\" << endl;\n        else if( (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) ||\n            (hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4]) )\n            cout << \"straight\" << endl;\n        else if( (hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4]) )\n            cout << \"three card\" << endl;\n        else if( (hand[0]==hand[1] && hand[2]==hand[3]) ||\n                (hand[0]==hand[1] && hand[3]==hand[4]) ||\n                (hand[1]==hand[2] && hand[3]==hand[4]) )\n            cout << \"two pair\" << endl;\n        else if( hand[0]==hand[1] || hand[1]==hand[2] || hand[2]==hand[3] || hand[3]==hand[4] )\n            cout << \"one pair\" << endl;\n         else\n         cout<<\"null\"<<endl;\n       \n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <array>\n#include <queue>\n#include <deque>\n#include <set>\n#include <list>\n#include <map>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <cstring>\n#include <climits>\n#include <bitset>\n#include <random>\n#include <functional>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\n#define _CRT_SECURE_NO_WARNINGS\n#define rep(i, n) for(int i=0; i<(n); i++)\n#define FOR(i, m, n) for(int i=(m);i<(n);i++)\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define SORT(x) sort((x).begin(),(x).end())\n#define REVE(x) reverse((x).begin(),(x).end())\n#define mp make_pair\n#define pb push_back\n\ntypedef vector<int> VI;\ntypedef vector<string> VS;\ntypedef vector<vector<int>> VVI;\ntypedef pair<int, int> PII;\ntypedef long long LL;\n\nint main() {\n\tint A, B, C, D, E; char CH;\n\twhile (cin >> A >> CH >> B >> CH >> C >> CH >> D >> CH >> E) {\n\t\tVI a = { A,B,C,D,E };\n\t\tVI cnt(9);\n\t\tSORT(a);\n\t\tint i = 0;\n\t\twhile (i < 5) {\n\t\t\tint elem = a[i], Cnt = 0;\n\t\t\twhile (i < 5 && a[i] == elem) { Cnt++; i++; }\n\t\t\tcnt[Cnt]++;\n\t\t}\n\n\t\t//check\n\t\tint ans = -1;\n\t\tif (cnt[4] == 1)ans = 7;\n\t\telse if (cnt[3] == 1 && cnt[2] == 1)ans = 6;\n\t\telse {\n\t\t\tbool flag = false;\n\t\t\tif (a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4])flag = true;\n\t\t\telse if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)flag = true;\n\t\t\tif (flag)ans = 5;\n\t\t}\n\n\t\tif (ans == -1) {\n\t\t\tif (cnt[3] == 1)ans = 4;\n\t\t\telse if (cnt[2] == 2)ans = 3;\n\t\t\telse if (cnt[2] == 1)ans = 2;\n\t\t\telse ans = 1;\n\t\t}\n\n\t\tstring str;\n\t\tswitch (ans) {\n\t\tcase 1:\n\t\t\tstr = \"null\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tstr = \"one pair\";\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tstr = \"two pair\";\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tstr = \"three card\";\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tstr = \"straight\";\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tstr = \"full house\";\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tstr = \"four card\";\n\t\t\tbreak;\n\t\t}\n\n\t\tcout << str << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0;\n  int three = 0;\n  int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump);\n\n  int a = 0;\n  int b = 0;\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  //cout<<two<<\" \"<<three<<\" \"<<four<<endl;\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tint scard, card[20], full, str, straight;\n\t\n\twhile (scanf(\"%d\", &scard) != EOF){\n\t\tfull = str = straight = 0;\n\t\tfor (int i = 0; i < 15; i++) card[i] = 0;\n\t\tcard[scard - 1]++;\n\t\tfor (int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &scard);\n\t\t\tcard[scard - 1]++;\n\t\t}\n\t\tfor (int i = 0; i < 13; i++){\n\t\t\tstr = 0;\n\t\t\tif (card[i] == 4) full = 100;\n\t\t\tif (card[i] == 3) full += 3;\n\t\t\tif (card[i] == 2) full += 2;\n\t\t\tif (card[i] == 1) {\n\t\t\t\tfor (int j = i; j < i + 5; j++){\n\t\t\t\t\tif (j == 13 && card[0] == 1) str++;\n\t\t\t\t\tif (card[j] == 1) str++;\n\t\t\t\t\tif (str == 5) straight = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (full == 100) cout << \"four card\" << endl;\n\t\telse if (full == 5) cout << \"full house\" << endl;\n\t\telse if (straight == 1) cout << \"straight\" << endl;\n\t\telse if (full == 3) cout << \"three card\" << endl;\n\t\telse if (full == 4) cout << \"two pair\" << endl;\n\t\telse if (full == 2) cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\n\twhile(~scanf(\"%d\", &hand[0])){\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\t\tint num[15] = {0};\n\n\t\tfor(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1){\n\t\t\t\thand[i] += 13;\n\t\t\t}\n\t\t\tnum[hand[i]]++;\n\t\t}\n\n\t\tint h[7] = {0};\n\t\tstring s[] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\t\tint seq = 0;\n\n\t\th[0] = 1;\n\t\tfor(int i = 2; i < 15; i++){\n\t\t\tif(num[i-1] && num[i]){\n\t\t\t\tseq++;\n\t\t\t}\n\t\t\tif(num[i] == 2){\n\t\t\t\th[1]++;\n\t\t\t}\n\t\t\tif(num[i] == 3){\n\t\t\t\th[3]++;\n\t\t\t}\n\t\t\tif(num[i] == 4){\n\t\t\t\th[6]++;\n\t\t\t}\n\t\t}\n\t\tif(h[1] > 1){\n\t\t\th[2]++;\n\t\t}\n\t\tif(h[1] && h[3]){\n\t\t\th[5]++;\n\t\t}\n\t\tif(seq == 4){\n\t\t\th[4]++;\n\t\t}\n\n\t\tfor(int i = 6; i >= 0; i--){\n\t\t\tif(h[i]){\n\t\t\t\tcout << s[i] << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool isStraight(vector<int> v, int s) {\n\tfor (int i = 1; i < v.size(); ++i) {\n\t\tif (v[(s+i)%v.size()] != (v[(s+i-1+v.size())%v.size()]+1)%13) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool isStraight(vector<int> v) {\n\treturn isStraight(v, 0) || (v[0] == 0 && isStraight(v, 1));\n}\nint main() {\n\tvector<int> a(5);\n\twhile ( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) != EOF ) {\n\t\tfor (int i = 0; i < a.size(); ++i) {\n\t\t\t--a[i];\n\t\t}\n\t\tsort(a.begin(), a.end());\n\t\tvector<int> v(1, 1);\n\t\tint prev = a[0];\n\t\tfor (int i = 1; i < a.size(); ++i) {\n\t\t\tif (prev == a[i]) {\n\t\t\t\t++v[v.size()-1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tv.push_back(1);\n\t\t\t\tprev = a[i];\n\t\t\t}\n\t\t}\n\t\tsort(v.begin(), v.end(), greater<int>());\n\t\tif (v[0] >= 4) {\n\t\t\tcout << \"four card\" << endl;\n\t\t}\n\t\telse if (v.size() >= 2 && v[0] >= 3 && v[1] >= 2) {\n\t\t\tcout << \"full house\" << endl;\n\t\t}\n\t\telse if ( isStraight(a) ) {\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse if (v[0] >= 3) {\n\t\t\tcout << \"three card\" << endl;\n\t\t}\n\t\telse if (v.size() >= 2 && v[1] >= 2) {\n\t\t\tcout << \"two pair\" << endl;\n\t\t}\n\t\telse if (v[0] >= 2) {\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t\t\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector> \nusing namespace std;\n#define pb push_back\nint main(void){\n\tchar buf;\n\tint tmp;\n\twhile(cin >> tmp){\n\t\tvector<int> list;\n\t\tif(cin.eof())\n\t\t\tbreak;\n\t\tlist.pb(tmp);\n\t\tfor(int i=0;i<4;i++){\n\t\t\tcin >> buf >> tmp;\n\t\t\tlist.pb(tmp);\n\t\t}\n\t\tsort(list.begin(),list.end());\n\t\tint card[14]={0};\n\t\tfor(int i=0;i<5;i++)\n\t\t\tcard[list[i]]++;\n\t\tint cmax=0,cnmax=0,series=1;\n\t\tfor(int i=1;i<=13;i++){\n\t\t\tif(cmax < card[i]){\n\t\t\t\tcnmax=cmax;\n\t\t\t\tcmax=card[i];\n\t\t\t}else if(cnmax < card[i])\n\t\t\t\tcnmax=card[i];\n\t\t\tif(card[i]&&card[i-1])\n\t\t\t\tseries++;\n\t\t\telse if(series!=5)\n\t\t\t\tseries=1;\n\t\t}\n\t\tif(series==4&&card[1])\n\t\t\tseries++;\n\t\t\n\t\tif(cmax==4)\n\t\t\tcout << \"four card\"<< endl;\n\t\telse if(cmax==3&&cnmax==2)\n\t\t\tcout <<\"full house\" << endl;\n\t\telse if(series == 5)\n\t\t\tcout << \"straight\" << endl;\n\t\telse if(cmax==3)\n\t\t\tcout <<\"three card\" << endl;\n\t\telse if(cmax==2 && cnmax==2)\n\t\t\tcout <<\"two pair\" << endl;\n\t\telse if(cmax==2)\n\t\t\tcout <<\"one pair\" << endl;\n\t\telse\n\t\t\tcout <<\"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\n\nvoid toint(string s, int cards[5]){\n\n\tint m=0;\n\n\n\tfor(int i=0;i<5;++i){\n\t\tint n=0;\n\n\t\tif(s[m]==',' || s[m]=='\\0'){\n\t\t\tcards[i] = n;\n\t\t\t++m;\n\t\t\tcontinue;\n\t\t}\n\n\t\tn += n*10 + s[m]-'0';\n\t\t++m;\n\t\t--n;\n\t}\n}\n\nint main(){\n\n\tstring s, res;\n\tint card[5];\n\t\n\n\tcin >> s;\n\n\ttoint(s,card);\n\n\tswitch( Result(card) ){\n\t\tcase 1:res=\"null\";break;\n\t\tcase 2:res=\"one pair\";break;\n\t\tcase 3:res=\"two pair\";break;\n\t\tcase 4:res=\"three card\";break;\n\t\tcase 5:res=\"straight\";break;\n\t\tcase 6:res=\"full house\";break;\n\t\tcase 7:res=\"four card\";break;\n\t}\n\n\t\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\nvector<string> split(const string &str, char delim) {\n\tvector<string> res;\n\tsize_t current = 0, found;\n\twhile ((found = str.find_first_of(delim, current)) != string::npos) {\n\t\tres.push_back(string(str, current, found - current));\n\t\tcurrent = found + 1;\n\t}\n\tres.push_back(string(str, current, str.size() - current));\n\treturn res;\n}\n\nstruct Card {\n\tint type;\n\tint num;\n\tCard(const int _type, const int _num) :type(_type), num(_num) {\n\t\tassert(type >= 0 && type <= 3);\n\t\tassert(num >= 1 && num <= 13);\n\t}\n\tCard() :type(-1), num(-1) {\n\n\t}\n\tbool operator <(const Card& c) {\n\t\treturn num == c.num ? type < c.type : num < c.num;\n\t}\n};\nlong long int powint(long long int a, long long int b) {\n\tassert(b >= 0);\n\tif (b == 0)return 1;\n\tif (b == 1)return a;\n\tlong long int ans = 1;\n\tlong long int aa = powint(a, b / 2);\n\tans *= aa*aa;\n\tif (b % 2)ans *= a;\n\treturn ans;\n}\nstruct Poker {\n\tvector<Card>cards;\n\tconst long long int rolevalue = 1e16;\n\tlong long getnumpower(\n\t\tconst vector<pair<int, int>>&numcount) {\n\n\t\tlong long int apower = 0;\n\t\tfor (int i = 0; i < numcount.size(); ++i) {\n\t\t\tapower += numcount[i].second*powint(100, numcount.size() - 1 - i);\n\t\t}\n\t\treturn apower;\n\t}\n\tlong long getpower() {\n\t\tsort(cards.begin(), cards.end());\n\t\tbool isflush = false;\n\t\t{\n\t\t\tconst int type0 = cards[0].type;\n\t\t\tisflush =\n\t\t\t\tall_of(cards.begin(), cards.end(), [=](const Card&c) {return c.type == type0; });\n\t\t}\n\t\tbool isstraight = false;\n\t\t{\n\t\t\tconst int amin = cards[0].num;\n\t\t\tint place = -1;\n\t\t\tisstraight =\n\t\t\t\tall_of(cards.begin(), cards.end(), [=, &place](const Card&c) {place++; return c.num == amin + place; });\n\t\t\tbool royalok = true;\n\t\t\tfor (int i = 0; i < 5; ++i) {\n\t\t\t\tif (i != 0) {\n\t\t\t\t\tif (cards[i].num != 9 + i) {\n\t\t\t\t\t\troyalok = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (cards[i].num != 1) {\n\t\t\t\t\t\troyalok = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (royalok) {\n\t\t\t\tisstraight = true;\n\t\t\t}\n\t\t\tif (isstraight) {\n\t\t\t\tint a = 0;\n\t\t\t\ta++;\n\t\t\t}\n\t\t}\n\t\tvector<pair<int, int>>numcount;\n\t\t{\n\t\t\tmap<int, int>powermp =\n\t\t\t{\n\t\t\t\t{ 1,14 },\n\t\t\t\t{ 2,2 },\n\t\t\t\t{ 3,3 },\n\t\t\t\t{ 4,4 },\n\t\t\t\t{ 5,5 },\n\t\t\t\t{ 6,6 },\n\t\t\t\t{ 7,7 },\n\t\t\t\t{ 8,8 },\n\t\t\t\t{ 9,9 },\n\t\t\t\t{ 10,10 },\n\t\t\t\t{ 11,11 },\n\t\t\t\t{ 12,12 },\n\t\t\t\t{ 13,13 },\n\t\t\t};\n\t\t\tvector<int>allnumcount(13);\n\t\t\tfor (int i = 0; i < cards.size(); ++i) {\n\t\t\t\tallnumcount[cards[i].num - 1]++;\n\t\t\t}\n\t\t\tfor (int i = 0; i < 13; ++i) {\n\t\t\t\tif (allnumcount[i]) {\n\t\t\t\t\tnumcount.emplace_back(allnumcount[i], powermp[i + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsort(numcount.begin(), numcount.end(), greater<pair<int, int>>());\n\t\t}\n\n\n\n\t\t//straightflush\n\t\tif (isstraight&&isflush) {\n\t\t\tassert(numcount.size() == 5);\n\t\t\tif (cards[0].num == 1 && cards[1].num == 10)return 10 * rolevalue + 100;\n\t\t\treturn 10 * rolevalue + cards[0].num;\n\t\t}\n\n\t\t//fourcard\n\t\tif (numcount[0].first == 4) {\n\t\t\tassert(numcount.size() == 2);\n\t\t\treturn 9 * rolevalue + getnumpower(numcount);\n\t\t}\n\n\t\t//fullhouse\n\t\tif (numcount[0].first == 3 && numcount[1].first == 2) {\n\t\t\tassert(numcount.size() == 2);\n\t\t\treturn 8 * rolevalue + getnumpower(numcount);\n\t\t}\n\t\t//flush\n\t\tif (isflush) {\n\t\t\tassert(numcount.size() == 5);\n\t\t\treturn 7 * rolevalue + getnumpower(numcount);\n\t\t}\n\t\t//straight\n\t\tif (isstraight) {\n\t\t\tassert(numcount.size() == 5);\n\t\t\tif (cards[0].num == 1 && cards[1].num == 10)return 6 * rolevalue + 100;\n\t\t\treturn 6 * rolevalue + cards[0].num;\n\t\t}\n\t\t//three of a kind\n\t\tif (numcount[0].first == 3) {\n\t\t\tassert(numcount.size() == 3);\n\t\t\treturn 5 * rolevalue + getnumpower(numcount);\n\t\t}\n\t\t// two pair\n\t\tif (numcount[0].first == 2 && numcount[1].first == 2) {\n\t\t\tassert(numcount.size() == 3);\n\t\t\treturn 4 * rolevalue + getnumpower(numcount);\n\t\t}\n\t\t//one pair\n\t\tif (numcount[0].first == 2) {\n\t\t\tassert(numcount.size() == 4);\n\t\t\treturn 3 * rolevalue + getnumpower(numcount);\n\t\t}\n\t\t// no pair\n\t\tassert(numcount.size() == 5);\n\t\treturn 2 * rolevalue + getnumpower(numcount);\n\t}\n\tPoker(vector<Card>_cards) :cards(_cards) {}\n};\nint main() {\n\tstring st;\n\tmap<int, string>mp;\n\t\n\twhile (cin >> st) {\n\t\tvector<string>sts;\n\t\tsts = split(st, ',');\n\t\tvector<Card>cs;\n\t\tfor (int i = 0; i < sts.size(); ++i) {\n\t\t\tint num = stoi(sts[i]);\n\t\t\tcs.push_back(Card(i%4, num));\n\t\t}\n\t\tPoker po(cs);\n\t\tint n = po.getpower() / po.rolevalue;\n\t\tmp[2] = \"null\";\n\t\tmp[3] = \"one pair\";\n\t\tmp[4] = \"two pair\";\n\t\tmp[5] = \"three card\";\n\t\tmp[6] = \"straight\";\n\t\tmp[8] = \"full house\";\n\t\tmp[9] = \"four card\";\n\t\tcout << mp[n] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint nPair(int *card);\nbool isThreeCard(int *card);\nbool isStraight(int *card);\nbool isFullHouse(int *card);\nbool isFourCard(int *card);\n\nint main()\n{\n\tint card[5] = {0};\n\tchar c;\n\n\twhile (cin >> card[0])\n\t{\n\t\tif (cin.eof()) break;\n\t\tcin >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4];\n\n\t\tif (isFourCard(card))\n\t\t\tcout << \"four card\" << endl;\n\t\telse if (isFullHouse(card))\n\t\t\tcout << \"full house\" << endl;\n\t\telse if (isStraight(card))\n\t\t\tcout << \"straight\" << endl;\n\t\telse if (isThreeCard(card))\n\t\t\tcout << \"three card\" << endl;\n\t\telse if (nPair(card) == 2)\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if (nPair(card) == 1)\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n\treturn 0;\n}\n\nint nPair(int *card)\n{\n\tint c[13] = {0}, i, n = 0;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\tfor (i = 0; i < 13; i++)\n\t\tif (c[i] == 2)\n\t\t\tn++;\n\treturn n;\n}\n\nbool isThreeCard(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\tfor (i = 0; i < 13; i++)\n\t{\n\t\tif (c[i] == 3)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool isFourCard(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\tfor (i = 0; i < 13; i++)\n\t{\n\t\tif (c[i] == 4)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool isStraight(int *card)\n{\n\tint c[13] = {0}, i, j;\n\tbool b;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tif (c[1] == 1 && c[12] == 1)\n\t\treturn false;\n\n\tsort(c, c+13, greater<int>());\n\t\n\tfor (i = 0; i < 5; i++)\n\t{\n\t\tif (c[i] == 1)\n\t\t\tb = true;\n\t\telse\n\t\t\tb = false;\n\t}\n\tif (b == true)\n\t\treturn true;\n\treturn false;\n}\n\nbool isFullHouse(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\tif (nPair(card) == 1 && isThreeCard(card))\n\t\treturn true;\n\telse\n\t\treturn false;\n}"
  },
  {
    "language": "C++",
    "code": "#include <set>\n#include <map>\n#include <list>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <ctype.h>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n\nusing namespace std;\n\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define rep(i, n) REP(i, 0, n)\n#define lengthof(x) (sizeof(x) / sizeof(*(x)))\n#define FILL(ptr, value) FILL_((ptr), sizeof(ptr)/sizeof(value), (value))\ntemplate <typename T>\nvoid FILL_(void * ptr, size_t size, T value){\n  std::fill((T*)ptr, (T*)ptr+size, value);\n}\n//4方向ベクトル→↑←↓\nint dx[] ={1,0,-1,0};\nint dy[] ={0,-1,0,1};\nint card[5];\nint main()\n{\n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) !=EOF){\n    sort(card,card+5);\n    bool four,one,two,three,full,straight,flag;\n    flag = false;\n    one = two = three =four= full =straight = false;\n    if(!flag){\n      if(card[0]==card[1]&&card[0]==card[2]&&card[0]==card[3]||card[1]==card[2]&&card[1]==card[3]&&card[1]==card[4]){\n\tfour = true;\n\tflag = true;\n      }else if(card[0]==card[1]&&card[0]==card[2]&&(card[3]==card[4])||card[0]==card[1]&&card[2]==card[3]&&card[2]==card[4]){\n\tfull = true;\n\tflag = true;\n      }else if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13||card[1]==card[0]+1&&card[2]==card[0]+2&&card[3]==card[0]+3&&card[4]==card[0]+4){\n\tstraight = true;\n\tflag = true;\n      }else if(card[0]==card[1]&&card[0]==card[2]||card[1]==card[2]&&card[1]==card[3]||card[2]==card[3]&&card[2]==card[4]){\n\tthree = true;\n\tflag = true;\n      }else if(card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4])||card[1]==card[2]&&card[3]==card[4]){\n\ttwo = true;\n\tflag = true;\n      }else if(card[0]==card[1]||card[1]==card[2]&&card[2]==card[3]||card[3]==card[4]){\n\tone = true;\n\tflag = true;\n      }\n    }\n    if(!flag)\n      cout <<\"null\"<<endl;\n    else if(four)\n      cout <<\"four card\"<<endl;\n    else if(full)\n      cout <<\"full house\"<<endl;\n    else if(straight)\n      cout <<\"straight\"<<endl;\n    else if(three)\n      cout <<\"three card\"<<endl;\n    else if(two)\n      cout <<\"two pair\"<<endl;\n    else if(one)\n      cout <<\"one pair\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\nusing namespace std;\n\nint a[5];\n\nstring poker(int p, int q, int r, int s, int t)\n{\n\tif (p == q && q == r && r == s)\n\t{\n\t\treturn \"four card\";\n\t}\n\tif (s == t && q == r && r == s)\n\t{\n\t\treturn \"four card\";\n\t}\n\tif (p == q && q == r && s == t)\n\t{\n\t\treturn \"full house\";\n\t}\n\tif (p == q && r == s && s == t)\n\t{\n\t\treturn \"full house\";\n\t}\n\tif (p == q - 1 && q == r - 1 && r == s - 1 && s == t - 1)\n\t{\n\t\treturn \"straight\";\n\t}\n\tif (p == 1 && q == 10 && r == 11 && s == 12 && t == 13)\n\t{\n\t\treturn \"straight\";\n\t}\n\tif (p == q && q == r)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (r == s && q == r)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (r == s && s == t)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (p == q && r == s)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (p == q && s == t)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (q == r && s == t)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (p == q)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (q == r)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (r == s)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (s == t)\n\t{\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main() {\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]))\n\t{\n\t\tsort(a, a + 5);\n\t\tcout << poker(a[0], a[1], a[2], a[3], a[4]) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\twhile(1){\n\t\tint card[20] = {}; // A ~ 13\n\t\tint data[10] = {};\n\n\t\tchar c0;\n\t\tfor(int i = 0; i < 5; ++i){\n\t\t\tif(i != 0) cin >> c0;\n\t\t\tcin >> data[i];\n\t\t\t++card[data[i] - 1];\n\t\t}\n\n\t\tif(cin.eof()) break;\n\n\t\tsort(card, card + 13, greater<int>());\n\t\t/*\n\t\tfor(int i = 0; i < 13; ++i){\n\t\t\tcout << card[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t\t*/\n\t\tswitch(card[0]){\n\t\t\tcase 4 :\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tsort(data, data + 5);\n\t\t\t\tbool check = true;\n\t\t\t\tif(data[4] == 13) data[0] = 9;\n\t\t\t\tfor(int i = 0; i < 5; ++i){\n\t\t\t\t\tif(data[0] + i != data[i]){\n\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(check)\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(){\n\tint c[6] = {0};\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4]) != EOF){\n\t\tsort(c,c+5);\n\t\tif((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) || (c[1] == c[2] && c[2] == c[3] && c[3] == c[4]))puts(\"four card\");\n\t\telse if((c[0] == c[1] && c[2] == c[3] && c[3] == c[4])||(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]))puts(\"full house\");\n\t\telse if((c[1] == c[0]+1 && c[2] == c[1]+1 && c[3] == c[2]+1 && c[4] == c[3]+1) || (c[0] == 1 && c[1] == 10 && c[2] == 11 && c[3] == 12 && c[4] == 13))puts(\"straight\");\n\t\telse if((c[0] == c[1] && c[1] == c[2]) || (c[1] == c[2] && c[2] == c[3]) || (c[2] == c[3] && c[3] == c[4]))puts(\"three card\");\n\t\telse if((c[0] == c[1] && (c[2] == c[3])||(c[3] == c[4])) || (c[1] == c[2] && c[3] == c[4]))puts(\"two pair\");\n\t\telse if((c[0] == c[1]) || (c[1] == c[2]) || (c[2] == c[3]) || (c[3] == c[4]))puts(\"one pair\");\n\t\telse puts(\"null\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//32\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n  for(;;){\n    int occ[14]={};\n    for(int i=0;i<5;i++){\n      int h;\n      cin>>h;\n      cin.ignore();\n      if(!cin)return 0;\n      occ[h]++;\n    }\n    int me=*max_element(occ,occ+14);\n    int c2=count(occ,occ+14,2);\n    int *lr=find(occ,occ+14,1);\n    if(me==4){\n      cout<<\"four card\"<<endl;\n    }else if(me==3 && c2){\n      cout<<\"full house\"<<endl;\n    }else if(count(lr,lr+5,1)==5 || count(occ+10,occ+14,1)==4&&occ[1]){\n      cout<<\"straight\"<<endl;\n    }else if(me==3){\n      cout<<\"three card\"<<endl;\n    }else if(c2==2){\n      cout<<\"two pair\"<<endl;\n    }else if(c2==1){\n      cout<<\"one pair\"<<endl;\n    }else{\n      cout<<\"null\"<<endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\nusing namespace std;\n/* null\n * one pair\n * two pair\n * three card\n * straight\n * full house\n * four card\n * */\nint main() {\n\tvector<int> cards(5);\n\twhile (scanf(\"%d%*c%d%*c%d%*c%d%*c%d\",&cards[0],&cards[1],&cards[2],\n\t\t\t\t&cards[3],&cards[4])) {\n\t\tvector<int> cnt(13, 0);\n\t\tfor (int i=0; i<5; i++) cnt[cards[i]-1]++;\n\t\tint two = 0, three = 0, four = 0;\n\t\tfor (int i=0; i<13; i++) {\n\t\t\tif (cnt[i] == 2) two++;\n\t\t\tif (cnt[i] == 3) three++;\n\t\t\tif (cnt[i] == 4) four++;\n\t\t}\n\t\tif (four == 1) {\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1 && three == 1) {\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t} else if (three == 1) {\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 2) {\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1) {\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tint c = 0;\n\t\tbool flag = false;\n\t\tfor (int i=0; i<9; i++) {\n\t\t\tif (cnt[i] == 1) {\n\t\t\t\tif (cnt[i+1]==1&&cnt[i+2]==1&&cnt[i+3]==1&&\n\t\t\t\t\t\tcnt[i+4]==1) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (flag||\n\t\t\t\t(cnt[9]==1&&cnt[10]==1&&cnt[11]==1&&cnt[12]==1&&cnt[0]==1)) {\n\t\t\tprintf(\"straight\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nclass poker{\npublic:\n\tint cardCnt[13] = {0};\n\tstring audit;\n\tpoker(int c[5]){\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tcardCnt[c[i] - 1]++;\n\t\t}\n\t\tif(fourCard()){\n\t\t\taudit = \"four card\";\n\t\t}else if(fullHouse()){\n\t\t\taudit = \"full house\";\n\t\t}else if(straight()){\n\t\t\taudit = \"straight\";\n\t\t}else if(threeCard()){\n\t\t\taudit = \"three card\";\n\t\t}else if(twoPair()){\n\t\t\taudit = \"two pair\";\n\t\t}else if(onePair()){\n\t\t\taudit = \"one pair\";\n\t\t}else{\n\t\t\taudit = \"null\";\n\t\t}\n\t}\nprivate:\n\tbool onePair(){\n\t\tint pairCnt = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 2){\n\t\t\t\tpairCnt++;\n\t\t\t}\n\t\t}\n\t\treturn pairCnt == 1;\n\t}\n\tbool twoPair(){\n\t\tint pairCnt = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 2){\n\t\t\t\tpairCnt++;\n\t\t\t}\n\t\t}\n\t\treturn pairCnt == 2;\n\t}\n\tbool threeCard(){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tbool straight(){\n\t\tconst int exception[] = {1,0,0,0,0,0,0,0,0,1,1,1,1};\n\t\tfor(int i = 0;i < 10;i++){\n\t\t\tif(cardCnt[i] == 1 && cardCnt[i + 1] == 1 && cardCnt[i + 2] == 1 && cardCnt[i + 3] == 1 && cardCnt[i + 4] == 1){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(exception[i] != cardCnt[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tbool fullHouse(){\n\t\tbool b1 = false, b2 = false;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 3){\n\t\t\t\tb1 = true;\n\t\t\t}else if(cardCnt[i] == 2){\n\t\t\t\tb2 = true;\n\t\t\t}\n\t\t}\n\t\treturn b1 && b2;\n\t}\n\tbool fourCard(){\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(cardCnt[i] == 4){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n\nint main(void){\n\tint crd[5];\n\twhile(1){\n\t\tif(cin.eof()){\n\t\t\tbreak;\n\t\t}\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tcin >> crd[i];\n\t\t\tcin.get();\n\t\t}\n\t\tpoker p(crd);\n\t\tcout << p.audit << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\nint cards[5];\nint card[14]={0};\n\n\nint main()\n{\n\tstart:\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4])!=EOF)\n\t{\n\t\tfill(card,card+14,0);\n\t\tfor(int i=0;i<5;i++)\n\t\t{\n\t\t\tcard[cards[i]-1]++;\n\t\t\tif(cards[i]==1)card[13]++;\n\t\t}\n\t\tfor(int i=0;i<13;i++)\n\t\t{\n\t\t\tif(card[i]==4)\n\t\t\t{\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tgoto start;\n\t\t\t}\n\t\t\tif(card[i]==3)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<13;j++)\n\t\t\t\t{\n\t\t\t\t\tif(card[j]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t    goto start;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\t\tgoto start;\n\t\t\t}\n\t\t}\n\t\tint flag=0;\n\t\tfor(int i=0;i<13;i++)\n\t\t{\n\t\t\tif(card[i]==2)flag++;\n\t\t}\n\t\tif(flag==2)\n\t\t{\n\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\tgoto start;\n\t\t}\n\t\tif(flag==1)\n\t\t{\n\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t\tgoto start;\n\t\t}\n\t\tfor(int i=0;i<14;i++)\n\t\t{\n\t\t\tint k=1;\n\t\t\tfor(int j=0;j<5;j++)\n\t\t\t{\n\t\t\t\tk*=card[i+j];\n\t\t\t}\n\t\t\tif(k==1)\n\t\t\t{\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tgoto start;\n\t\t\t}\n\t\t}\n\t\tprintf(\"null\\n\");\n\t\tgoto start;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tstring ret=\"\";\n\tforeach(it,count){\n\t\tif(it->second>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(it->second==4){\n\t\t\tret = \"four card\";\n\t\t}else if(it->second==3){\n\t\t\tis3 = true;\n\t\t}else if(it->second==2){\n\t\t\tif(is3){\n\t\t\t\tret = \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\tret = \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}else if(ret!=\"\"){\n\t\treturn ret;\n\t}else if(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nint straight(int[]);\n\nint main() {\n\n\tint ans, h[5];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &h[0], &h[1], &h[2], &h[3], &h[4])!=EOF) {\n\t\tans=0;\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(h))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n\n}\n\nint straight(int h[5]) {\n\t\n\tsort(h, h+5);\n\tfor(int i=0; i<9; i++) {\n\t\tif(h[0]==i&&h[1]==i+1&&h[2]==i+2&&h[3]==i+3&&h[4]==i+4||h[0]==1&&h[1]==10&&h[2]==11&&h[3]==12&&h[4]==13)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ndouble eps = 1e-10;\n\nint main() {\n\tint s[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &s[0], &s[1], &s[2], &s[3], &s[4]) != EOF){\n\t\tsort(s, s + 5);\n\t\tint cnt[16] = {0};\n\t\tfor(int i = 0; i < 5; ++i)\n\t\t\tcnt[s[i]]++;\n\t\tsort(cnt, cnt + 16, greater<int>());\n\t\tif(cnt[0] == 4){\n\t\t\tcout << \"four card\" << endl;\n\t\t}\n\t\telse if(cnt[0] == 3 && cnt[1] == 2){\n\t\t\tcout << \"full house\" << endl;\n\t\t}\n\t\telse if((s[0] == 1 && s[1] == 2 && s[2] == 3 && s[3] == 4 && s[4] == 5) \n\t\t\t\t|| (s[0] == 1 && s[1] == 10 && s[2] == 11 && s[3] == 12 && s[4] == 13)\n\t\t\t\t|| (s[0] + 1 == s[1] && s[1] + 1 == s[2] && s[2] + 1 == s[3] && s[3] + 1 == s[4])){\n\t\t\tcout << \"straight\" << endl;\t\n\t\t}\n\t\telse if(cnt[0] == 3){\n\t\t\tcout << \"three card\" << endl;\n\t\t}\n\t\telse if(cnt[0] == 2 && cnt[1] == 2){\n\t\t\tcout << \"two pair\" << endl;\n\t\t}\n\t\telse if(cnt[0] == 2){\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <climits>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <fstream>\n#include <iostream>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <functional>\n\nusing namespace std;\n\n#define LOG(...) printf(__VA_ARGS__)\n//#define LOG(...)\n#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);++i)\n#define REP(i,n) for(int i=0;i<(int)(n);++i)\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(),(a).rend()\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<bool> vb;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<vb> vvb;\ntypedef vector<vi> vvi;\ntypedef vector<vll> vvll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nconst int dx[] = { -1, 0, 1, 0 }; const int dy[] = { 0, 1, 0, -1 };\n\nint main() {\n\tvector<int> card(5);\n\tchar c;\n\twhile (cin >> card[0] >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4]){\n\t\tSORT(card);\n\t\tint pair = 0;\n\t\tfor (int i = 0; i < 4;i++){\n\t\t\tfor (int j = i + 1; j < 5; j++){\n\t\t\t\tif (card[i] == card[j])\n\t\t\t\t\tpair++;\n\t\t\t}\n\t\t}\n\t\tbool st = true;\n\t\tREP(i, 4){\n\t\t\tif (card[i] + 1 != card[i + 1])\n\t\t\t\tst = false;\n\t\t}\n\t\tif (card[0] == 1 && card[1] == 10 && pair == 0)\n\t\t\tst = true;\n\t\tif (pair == 6)\n\t\t\tcout << \"four card\" << endl;\n\t\telse if (pair==4)\n\t\t\tcout << \"full house\" << endl;\n\t\telse if (st )\n\t\t\tcout << \"straight\" << endl;\n\t\telse if (pair==3 )\n\t\t\tcout << \"three card\" << endl;\n\t\telse if (pair==2 )\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if (pair==1 )\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint n[5];\n\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\n\t\tsort(n,n+4);\n\t\tif((n[0]==n[1]&&n[1]==n[2]&&n[2]==n[3])||(n[1]==n[2]&&n[2]==n[3]&&n[3]==n[4])) printf(\"four card\\n\");\n\t\telse if((n[0]==n[1]&&n[1]==n[2]&&n[3]==n[4])||(n[0]==n[1]&&n[2]==n[3]&&n[3]==n[4])) printf(\"full house\\n\");\n\t\telse if((n[4]==n[3]+1&&n[3]==n[2]+1&&n[2]==n[1]+1&&n[1]==n[0]+1)||(n[0]==10&&n[1]==11&&n[2]==12&&n[3]==13&&n[4]==1)) printf(\"straight\\n\");\n\t\telse if((n[0]==n[1]&&n[1]==n[2])||(n[1]==n[2]&&n[2]==n[3])||(n[2]==n[3]&&n[3]==n[4])) printf(\"three card\\n\");\n\t\telse if((n[0]==n[1]&&n[2]==n[3])||(n[0]==n[1]&&n[3]==n[4])||(n[1]==n[2]&&n[3]==n[4])) printf(\"two pair\\n\");\n\t\telse if(n[0]==n[1]||n[1]==n[2]||n[2]==n[3]||n[3]==n[4]) printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint h[6];\n\nint sq(int n){\n    return n*n;\n}\n\nint find( int n , int s = 0 ){\n    int count = 0, m = -1, mm = 0;\n    for(int i = s; i < 6; i++){\n        if( m == h[i] ){\n            count++;\n        }else{\n            if( count == n ){\n                mm = m;\n                break;\n            }\n            m = h[i];\n            count = 1;\n        }\n    }\n    return mm;\n}\n\nint main(){\n    while( scanf(\"%d,%d,%d,%d,%d\",\n                 h, h+1, h+2, h+3, h+4) != EOF ){\n        sort(h, h+5);\n        if( find(4) ) puts(\"four card\");\n        else if( find(3)*find(2) && \n                 find(3) != find(2) ) puts(\"full house\");\n        else if( (h[1]-h[0])*(h[2]-h[1])*(h[3]-h[2])*(h[4]-h[3]) == 1 ||\n                 (h[0] == 1 && h[1] == 10 && h[2] == 11 &&\n                  h[3] == 12 && h[4] == 13) ){\n            puts(\"straight\");\n        }else if( find(3) ){\n            puts(\"three card\");\n        }else if( find(2)*find(2,2) && find(2) != find(2,2) ){\n            puts(\"two pair\");\n        }else if( find(2) ){\n            puts(\"one pair\");\n        }else{\n            puts(\"null\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm> \nusing namespace std; int main(void)\n{     \n\tint card[5];\n\tchar kari;     \n\twhile(1)     \n\t{         \n\t\tfor(int i = 0;i < 5;i++)         \n\t\t{             \n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;             \n\t\t\tif(i < 4)scanf(\"%c\",&kari);         \n\t\t}\t\t\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);         \n\t\tfor(int i = 0;i<5;i++)         \n\t\t{             \n\t\t\tcheck[card[i]]++;             \n\t\t\tif(card[i] == 1) check[14] += 1;         \n\t\t}         \n\t\tfor(int i = 0;i<=14;i++) \n\t\t{             \n\t\t\tif(check[i] == 1)\n\t\t\t{                 \n\t\t\t\tif(check[i+1] == 1)                  \n\t\t\t\t{                     \n\t\t\t\t\tcnt++;                     \n\t\t\t\t\tif(cnt == 4) break;              \n\t\t\t\t}                 \n\t\t\t\telse cnt = 0;             \n\t\t\t}         \n\t\t}           \n\t\tint pair = 0;         \n\t\tint three = 0;         \n\t\tint four = 0;         \n\t\tint st = 0;         \n\t\tif(cnt == 4)         \n\t\t{             \n\t\t\tprintf(\"straight\\n\");             \n\t\t\tst = 1;\n\t\t}         \n\t\telse       \n\t\t{             \n\t\t\tfor(int i = 0;i < 14;i++)     \n\t\t\t{              \n\t\t\t\tif(check[i] == 2) pair++;  \n\t\t\t\telse if(check[i] == 3) three++;    \n\t\t\t\telse if(check[i] >= 4) four++;   \n\t\t\t}     \n\t\t}\n\n\t\tif(pair >= 1)     \n\t\t{  \n\t\t\tif(three == 1) printf(\"full house\\n\");     \n\t\t\telse if(pair == 2) printf(\"two pair\\n\");    \n\t\t\telse printf(\"one pair\\n\");   \n\t\t}       \n\t\telse if(three >= 1)    \n\t\t{        \n\t\t\tif(pair == 1) printf(\"full house\\n\"); \n\t\t\telse if(three == 2) printf(\"full house\\n\");   \n\t\t\telse printf(\"three card\\n\");     \n\t\t}         \n\t\telse if(four >= 1) printf(\"four card\\n\");  \n\t\telse if(st != 1) printf(\"null\\n\");   \n\t}    \n\tkitune: \n\treturn 0; \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> P;\n\n#define all(c) (c).begin(),(c).end()\n#define pb push_back\n#define mp make_pair\n#define ERASE(v,i) (v).erase(remove(all(v),i),(v).end())\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define each(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)\n#define debug(x) cerr<<#x<<\" = \"<<(x)<<endl;\n#define LINE cerr<<\"LINE: \"<<__LINE__<<endl;\n\ninline int toInt(string s){int v;istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x){ostringstream sout;sout<<x;return sout.str();}\ntemplate<class T> void preview(T a,T b){for(T it=a;it!=b;++it)cerr<<*it<<\" \";cerr<<endl;}\n\nconst int INF = 100000000;\nconst double PI = acos(-1.0), EPS = 1e-10;\n\nint main() {\n\tfor(string line; cin >> line;) {\n\t\trep(i,line.length()) if(line[i] == ',') line[i] = ' ';\n\t\tistringstream is(line);\n\t\tvector<int> card(5);\n\t\trep(i,5) is >> card[i];\n\t\tsort(all(card));\n\n\t\tmap<int, int> m;\n\t\trep(i,5) m[card[i]]++;\n\n\t\t// four cards\n\t\t{\n\t\t\tbool four_card = false;\n\t\t\tint two_pair = 0;\n\t\t\tbool three_cards = false;\n\t\t\teach(it, m) {\n\t\t\t\tif(it->second == 4) four_card = true;\n\t\t\t\tif(it->second == 3) three_cards = true;\n\t\t\t\tif(it->second == 2) two_pair++;\n\t\t\t}\n\n\t\t\tbool streat = true;\n\t\t\tfor(int i = 1; i < 5; i++) {\n\t\t\t\tif(card[i] != card[i - 1] + 1) streat = false;\n\t\t\t}\n\t\t\tif(card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) streat = true;\n\n\t\t\tstring ans;\n\t\t\tif(four_card) ans = \"four card\";\n\t\t\telse if(three_cards && two_pair) ans = \"full house\";\n\t\t\telse if(streat) ans = \"straight\";\n\t\t\telse if(three_cards) ans = \"three card\";\n\t\t\telse if(two_pair == 2) ans = \"two pair\";\n\t\t\telse if(two_pair == 1) ans = \"one pair\";\n\t\t\telse ans = \"null\";\n\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int card[5];\n  while(scanf(\"%d,%d,%d,%d,%d\", \n\t      &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n    sort(&card[0], &card[4] + 1);\n\n    int data1[5];\n    int kumi = -1;\n    int before = 0;\n    int count = 1;\n\n    for(int i = 0; i < 5; i++) {\n      if(card[i] != before) {\n\tdata1[++kumi] = 1;\n      } else {\n\tdata1[kumi]++;\n      }\n      before = card[i];\n    }\n    kumi++;\n    for(int i = 0; i < 5; i++) {\n      cout << data1[i] << \", \";\n    }\n    cout << kumi << endl;\n    if(kumi == 2) {\n      if(data1[0] == 4 || data1[1] == 4) {\n\tcout << \"four card\" << endl;\n      }\n      if(data1[0] == 3 || data1[1] == 3) {\n\tcout << \"full house\" << endl;\n      }\n    }\n    if(kumi == 3) {\n      if(data1[0] == 3 || data1[1] == 3 || data1[2] == 3) {\n\tcout << \"three card\" << endl;\n      }\n      if(data1[0] == 1 || data1[1] == 1 || data1[2] == 1) {\n\tcout << \"two pair\" << endl;\n      }\n    }\n    if(kumi == 4) {\n      cout << \"one pair\" << endl;\n    }\n    if(kumi == 5) {\n      bool flag = false;\n      for(int i = 0; i+1 < 5; i++) {\n\tif(card[i+1] - card[i] != 1) {\n\t  break;\n\t}\n\tif((i+1)+1 == 5) flag = true;\n      }\n      if(card[0] == 1 && card[1] == 10 &&\n\t card[2] == 11 && card[3] == 12 && card[4] == 13) flag = true;\n\n      if(flag) {\n\tcout << \"straight\" << endl;\n      } else {\n\tcout << \"null\" << endl;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <climits>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <fstream>\n#include <iostream>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <functional>\n\nusing namespace std;\n\n#define LOG(...) printf(__VA_ARGS__)\n//#define LOG(...)\n#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);++i)\n#define REP(i,n) for(int i=0;i<(int)(n);++i)\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(),(a).rend()\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<bool> vb;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<vb> vvb;\ntypedef vector<vi> vvi;\ntypedef vector<vll> vvll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nconst int dx[] = { -1, 0, 1, 0 }; const int dy[] = { 0, 1, 0, -1 };\n\nint main() {\n\twhile (!cin.eof()){\n\t\tvector<int> card(5);\n\t\tchar c;\n\t\tcin >> card[0] >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4];\n\t\tSORT(card);\n\t\tint pair = 0;\n\t\tfor (int i = 0; i < 4;i++){\n\t\t\tfor (int j = i + 1; j < 5; j++){\n\t\t\t\tif (card[i] == card[j])\n\t\t\t\t\tpair++;\n\t\t\t}\n\t\t}\n\t\tbool st = true;\n\t\tREP(i, 4){\n\t\t\tif (card[i] + 1 != card[i + 1])\n\t\t\t\tst = false;\n\t\t}\n\t\tif (card[0] == 1 && card[1] == 10 && pair == 0)\n\t\t\tst = true;\n\t\tif (pair == 6)\n\t\t\tcout << \"four card\" << endl;\n\t\telse if (pair==4)\n\t\t\tcout << \"full house\" << endl;\n\t\telse if (st )\n\t\t\tcout << \"straight\" << endl;\n\t\telse if (pair==3 )\n\t\t\tcout << \"three card\" << endl;\n\t\telse if (pair==2 )\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if (pair==1 )\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nint a[5];\nint main() {\n    while(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])) {\n        sort(a, a + 5);\n        if((a[0] == a[1] || a[3] == a[4]) && a[1] == a[2] && a[2] == a[3]) printf(\"four card\\n\");\n        else if((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n        else if((a[0] + 1 == a[1] || (a[0] == 1 && a[1] == 10)) && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) printf(\"straight\\n\");\n        else if(((a[0] == a[1] || a[2] == a[3]) && a[1] == a[2]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n        else {\n            int p = 0; for(int i = 1; i < 5; i++) if(a[i - 1] == a[i]) p++;\n            if(p == 2) printf(\"two pair\\n\");\n            if(p == 1) printf(\"one pair\\n\");\n            if(p == 0) printf(\"null\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nconst string ans[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\n\nint main(void){\n\tint a[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tint cnt[13]={},ans_num=0,tmp=0;\n\t\tfor(int i=0;i<5;++i) ++cnt[a[i]-1];\n\t\tfor(int i=1,count=0;i<13+1;++i){\n\t\t\tif(cnt[(i+13)%13]>1)break;\n\t\t\tif(cnt[(i+13)%13]==1)++count;\n\t\t\tif(cnt[(i+13)%13]==0)count=0;\n\t\t\tif(count==5) ans_num=4;\n\t\t}\n\t\tif(!ans_num){\n\t\t\tfor(int i=0;i<13;++i){\n\t\t\t\tif(cnt[i]==4){ans_num=6;break;}\n\t\t\t\tif(cnt[i]==3)tmp+=3;\n\t\t\t\tif(cnt[i]==2)tmp+=2;\n\t\t\t}\n\t\t\tif(tmp==5)ans_num=5;\n\t\t\tif(tmp==4)ans_num=2;\n\t\t\tif(tmp==3)ans_num=3;\n\t\t\tif(tmp==2)ans_num=1;\n\t\t}\n\t\tcout<<ans[ans_num]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n\nusing namespace std;\n\nint main(void){\n  int x[5],card[14],fg[5],i;\n  vector<int>y;\n  while(~scanf(\"%d,%d,%d,%d,%d\"\n\t       ,&x[0],&x[1],&x[2],&x[3],&x[4])){\n    \n    memset(card,0,sizeof(card));\n    memset(fg,0,sizeof(fg));\n\n\n    for(i=0;i<5;i++)card[x[i]]++;\n\n    for(i=1;i<14;i++){\n      if(card[i]==2 && fg[0]==0)fg[0]=1;\n      else if(card[i]==2 && fg[0]==1){\n\tfg[0]=0;\n\tcout <<\"two pair\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n      else if(card[i]==3 && fg[0]!=1)fg[3]=1;\n      else if(card[i]==3 && fg[0]==1){\n\tfg[0]=0;\n\tcout << \"full house\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n      else if(card[i]==4){\n\tcout << \"four card\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n    }\n    if(fg[0]==1){\n      cout << \"one pair\" << endl;\n      fg[2]=1;\n    }\n    else if(fg[3]==1){\n      cout << \"three card\" << endl;\n      fg[2]=1;\n    }\n    \n    for(i=0;i<5;i++)y.push_back(x[i]);\n    sort(y.begin(),y.end());\n \n    for(i=1;i<4;i++)if(y[i]+1!=y[i+1])fg[4]=1;\n\n    if(!fg[4] && !fg[2]){\n      cout << \"straight\" <<endl;\n      fg[2]=1;\n    }\n    if(fg[2]==0)cout <<\"null\"<<endl;\n    y.clear();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cassert>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <stack>\n#include <queue>\n#include <map>\n#include <bitset>\n#include <sstream>\n#include <istream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\n#define vci vector<int>\n#define vcs vector<string>\n#define pb push_back\n#define sz size()\n#define mapii map<int, int>\n#define mapci map<char, int>\n#define mapsi map<string, int>\n#define all(x) x.begin(), x.end()\n#define minit(a, i) memset(a, i, sizeof(a));\n\n#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)\n#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)\n#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)\n#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n\ntypedef long long ll;\n\nconst int iINF = 2147483647;\nconst ll lINF = 9223372036854775807;\n\ntemplate <class T> inline void dbg(T t) { cout << t << endl; }\n\n\n\nstring ret[7] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\nint main() {\n\tvci t(5); char c;\n\t\n\twhile (cin>>t[0]>>c>>t[1]>>c>>t[2]>>c>>t[3]>>c>>t[4]) {\n\t\tint ans = 0;\n\t\t\n\t\tvci v(13, 0);\n\t\tfor_(i, 0, (int)t.sz) v[t[i]-1]++;\n\t\t\n\t\tint cnt = 0;\n\t\t\n\t\t// 0, 1, 2\n\t\tfor_(i, 0, 13) if (v[i]==2) cnt++;\n\t\tans = cnt;\n\t\t\n\t\t// 3\n\t\tcnt = 0;\n\t\tfor_(i, 0, 13) if (v[i]==3) cnt++;\n\t\tif (cnt) ans = 3;\n\t\t\n\t\t// 4\n\t\tfor_(i, 0, 10) {\n\t\t\tcnt = 0;\n\t\t\tfor_(j, 0, 5) {\n\t\t\t\tif (v[(i+j)%13]==1) cnt++;\n\t\t\t}\n\t\t\tif (cnt==5) ans = 4;\n\t\t}\n\t\t\n\t\t// 5\n\t\tcnt = 0; int cnt2 = 0;\n\t\tfor_(i, 0, 13) {\n\t\t\tif (v[i]==2) cnt++;\n\t\t\tif (v[i]==3) cnt2++;\n\t\t}\n\t\tif (cnt2==1 && cnt==1) ans = 5;\n\t\t\n\t\tcnt = 0;\n\t\tfor_(i, 0, 13) if (v[i]==4) cnt++;\n\t\tif (cnt) ans = 6;\n\t\t\n\t\tcout << ret[ans] << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  int hand[5], card[13];\n  int yaku[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",\n              hand+0, hand+1, hand+2, hand+3, hand+4) == 5) {\n\n    memset(card, 0, sizeof(int) * 13);\n    memset(yaku, 0, sizeof(int) * 5);\n    for (int i = 0; i < 5; i++)\n      card[hand[i]-1]++;\n    int j = 0;\n    for (int i = 0; i < 13; i++)\n      if (card[i] != 0)\n        yaku[j++] = card[i];\n    sort(yaku+0, yaku+j);\n\n    j--;\n    if (yaku[j] == 4) {\n      cout << \"four card\" << endl;\n    } else if (yaku[j] == 3 && yaku[j-1] == 2) {\n      cout << \"full house\" << endl;\n    } else if (yaku[j] == 3) {\n      cout << \"three card\" << endl;\n    } else if (yaku[j] == 2 && yaku[j-1] == 2) {\n      cout << \"two pair\" << endl;\n    } else if (yaku[j] == 2) {\n      cout << \"one pair\" << endl;\n    } else {\n      sort(hand+0, hand+5);\n      if ((hand[0]+1 == hand[1] &&\n           hand[1]+1 == hand[2] &&\n           hand[2]+1 == hand[3] &&\n           hand[3]+1 == hand[4]) ||\n          (hand[0] == 1 &&\n           hand[1] == 10 &&\n           hand[2] == 11 &&\n           hand[3] == 12 &&\n           hand[4] == 13))\n        cout << \"straight\" << endl;\n      else\n        cout << \"null\" << endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n/* null\n * one pair\n * two pair\n * three card\n * straight\n * full house\n * four card\n * */\nint main() {\n\tvector<int> cards(5);\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],\n\t\t\t\t&cards[3],&cards[4])!=EOF) {\n\t\tvector<int> cnt(13, 0);\n\t\tfor (int i=0; i<5; i++) cnt[cards[i]-1]++;\n\t\tint two = 0, three = 0, four = 0;\n\t\tfor (int i=0; i<13; i++) {\n\t\t\tif (cnt[i] == 2) two++;\n\t\t\tif (cnt[i] == 3) three++;\n\t\t\tif (cnt[i] == 4) four++;\n\t\t}\n\t\tif (four == 1) {\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1 && three == 1) {\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t} else if (three == 1) {\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 2) {\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1) {\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tint c = 0;\n\t\tbool flag = false;\n\t\tfor (int i=0; i<9; i++) {\n\t\t\tif (cnt[i] == 1) {\n\t\t\t\tif (cnt[i+1]==1&&cnt[i+2]==1&&cnt[i+3]==1&&\n\t\t\t\t\t\tcnt[i+4]==1) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (flag||\n\t\t\t\t(cnt[9]==1&&cnt[10]==1&&cnt[11]==1&&cnt[12]==1&&cnt[0]==1)) {\n\t\t\tprintf(\"straight\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <fstream>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nint main()\n{\n\twhile(true)\n\t{\n\t\tint v[5];\n\t\tchar k;\n\n\t\tcin >> v[0];\n\t\trep(i, 4)\n\t\t\tcin >> k >> v[i+1];\n\t\tif(cin.eof()) break;\n\n\n\t\tvint n(13, 0);\n\n\t\trep(i, 5)\n\t\t\tn[v[i]-1]++;\n\n\t\trep(i, 13)\tif(4 <= n[i])\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) rep(j, 13) if(n[i] == 2 && n[j] == 3)\n\t\t{\n\t\t\tcout << \"full house\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 10) if(n[i % 13] == 1 && n[(i+1) % 13] == 1 &&  n[(i+2) % 13] == 1 &&  n[(i+3) % 13] == 1 &&  n[(i+4) % 13] == 1)\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(3 <= n[i])\n\t\t{\n\t\t\tcout << \"three card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) REP(j, 1, 13) if(n[i] == 2 && n[j] == 2)\n\t\t{\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(n[i] == 2)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\tcout << \"null\" << endl;\n\nng:\n\t\t;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\nusing namespace std;\n\nint main()\n{\n\tint hand;\n\t\n\twhile (scanf(\"%d\", &hand) != EOF){\n\t\tint card[15] = {0};\n\t\tcard[hand]++;\n\t\n\t\tfor (int i = 0; i < 4; i++){\n\t\t\tscanf(\",%d\",&hand);\n\t\t\tcard[hand]++;\n\t\t}\n\t\t\n\t\tint cnt = 0;\n\t\tint cast = 1;\n\t\n\t\tif (card[10] == 1 && card[11] == 1 &&card[12] == 1 &&card[13] == 1 &&card[1] == 1){\n\t\t\tcast = 5;\n\t\t}\n\t\telse {\n\t\tfor (int i = 1; i <= 14; i++){\n\t\t\t\n\t\t\tif (cnt == 5) cast = 5;\n\t\t\t\n\t\t\tif (card[i] == 1) cnt++;\n\t\t\telse cnt = 0;\n\t\t\n\t\t\tif (card[i] == 4) cast = 7;\n\t\t\n\t\t\telse if (card[i] == 3){\n\t\t\t\tfor (int j = 1; j < 14; j++){\n\t\t\t\t\tif (card[j] == 2){\n\t\t\t\t\t\tcast = 6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cast == 6);\n\t\t\t\telse cast = 4;\n\t\t\t}\n\t\t\n\t\t\telse if (card[i] == 2){\n\t\t\t\tfor (int j = 1; j < 14; j++){\n\t\t\t\t\tif (card[j] == 3){\n\t\t\t\t\t\tcast = 6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cast == 6);\n\t\t\t\telse if (cast == 2) cast = 3;\n\t\t\t\telse cast = 2;\n\t\t\t}\n\t\t}\n\t\t}\n\t\tif (cast == 7) printf(\"four card\\n\");\n\t\telse if (cast == 6) printf(\"full house\\n\");\n\t\telse if (cast == 5) printf(\"straight\\n\");\n\t\telse if (cast == 4) printf(\"three card\\n\");\n\t\telse if (cast == 3) printf(\"two pair\\n\");\n\t\telse if (cast == 2) printf(\"one pair\\n\");\n\t\telse if (cast == 1) printf(\"null\\n\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nvoid sort(int card[5])\n{\n\tfor(int i=0;i<5;i++)\n\t{\n\t\tint max=i;\n\t\tfor(int j=i+1;j<5;j++)\n\t\t{\n\t\t\tif(card[max]<card[j])\n\t\t\t{\n\t\t\t\tmax=j;\n\t\t\t}\n\t\t}\n\t\tint tmp=card[i];\n\t\tcard[i]=card[max];\n\t\tcard[max]=tmp;\n\t}\n}\n\nbool fourcard(int card[5])\n{\n\tif((card[0]==card[1]&&card[1]==card[2]&&card[2]==card[3])||\n\t\t(card[1]==card[2]&&card[2]==card[3]&&card[3]==card[4]))\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nbool fullhouse(int card[5])\n{\n\tif((card[0]==card[1]&&card[2]==card[3]&&card[3]==card[4])||\n\t\t(card[0]==card[1]&&card[1]==card[2]&&card[3]==card[4]))\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nbool straight(int card[5])\n{\n\tif((card[0]-1==card[1]&&card[1]-1==card[2]&&card[2]-1==card[3]&&card[3]-1==card[4])||\n\t\t(card[0]==13&&card[1]==12&&card[2]==11&&card[3]==10&&card[4]==1))\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nbool threecard(int card[5])\n{\n\tif((card[0]==card[1]&&card[1]==card[2])||\n\t\t(card[1]==card[2]&&card[2]==card[3])||\n\t\t(card[2]==card[3]&&card[3]==card[4]))\n\t{\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\nbool twopair(int card[5])\n{\n\tif((card[0]==card[1]&&card[2]==card[3])||\n\t\t(card[0]==card[1]&&card[3]==card[4])||\n\t\t(card[1]==card[2]&&card[3]==card[4]))\n\t{\n\t\treturn true;\n\t}\n\telse return false;\n}\n\nbool onepair(int card[5])\n{\n\tif(card[0]==card[1]||\n\t\tcard[1]==card[2]||\n\t\tcard[2]==card[3]||\n\t\tcard[3]==card[4])\n\t{\n\t\treturn true;\n\t}\n\telse return false;\n}\n\nchar *solve(int card[5])\n{\n\tsort(card);\n\tif(fourcard(card))\n\t{\n\t\treturn \"four card\";\n\t}\n\telse if(fullhouse(card))\n\t{\n\t\treturn \"full house\";\n\t}\n\telse if(straight(card))\n\t{\n\t\treturn \"straight\";\n\t}\n\telse if(threecard(card))\n\t{\n\t\treturn \"three card\";\n\t}\n\telse if(twopair(card))\n\t{\n\t\treturn \"two pair\";\n\t}\n\telse if(onepair(card))\n\t{\n\t\treturn \"one pair\";\n\t}\n\telse\n\t{\n\t\treturn \"null\";\n\t}\n}\n\nint main(void)\n{\n\tint card[5];\n\tchar c;\n\twhile(cin>>card[0])\n\t{\n\t\tfor(int i=1;i<5;i++)\n\t\t{\n\t\t\tcin>>c>>card[i];\n\t\t}\n\t\tcout<<solve(card)<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<deque>\n#include<list>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<map>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nstring b(int a[]) {\n\tint cnt[14+4] = {};\n\tfor (int i = 0; i < 5; i++)\n\t\tcnt[a[i]]++;\n\n\tstring r = \"null\";\n\tint c[6] = {};\n\tfor (int i = 1; i <= 13; i++) {\n\t\tc[cnt[i]]++;\n\t\tif (cnt[i] && cnt[i + 1] && cnt[i + 2] && cnt[i + 3] && cnt[i + 4])\n\t\t\tr = \"straight\";\n\t}\n\tif (cnt[10] && cnt[11] && cnt[12] && cnt[13] && cnt[1])\n\t\tr = \"straight\";\n\n\tif (c[4])r = \"four card\";\n\telse if (c[3] && c[2])r = \"full house\";\n\telse if (c[3])r = \"three card\";\n\telse if (c[2] == 2)r = \"two pair\";\n\telse if (c[2])r = \"one pair\";\n\n\treturn r;\n}\n\nint main() {\n\tint a[5];\n\tchar c;\n\twhile (cin >> a[0] >> c >> a[1] >> c >> a[2] >> c >> a[3] >> c >> a[4])\n\t\tcout << b(a) << endl;\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n \nint main()\n{\n    int card[5];\n     \n    while (scanf(\"%d\", &card[0]) != EOF) {\n        for (int i = 1; i < 5; i++) {\n            scanf(\",%d\", &card[i]);\n        }\n         \n        int cnt = 0;\n        for (int i = 0; i < 5; i++) {\n            for (int j = 0; j < 5; j++) {\n                if (card[i] == card[j] && i != j) {\n                    cnt++;\n                }\n            }\n        }\n         \n        int flg = 0;\n        switch (cnt) {\n            case 2:\n                printf(\"one pair\\n\");\n                flg = 2;\n                break;\n            case 4:\n                printf(\"two pair\\n\");\n                flg = 2;\n                break;\n            case 6:\n                printf(\"three card\\n\");\n                flg = 2;\n                break;\n            case 8:\n                printf(\"full house\\n\");\n                flg = 2;\n                break;\n            case 12:\n                printf(\"four card\\n\");\n                flg = 2;\n                break;\n            default:\n                flg = 1;\n        }\n         \n        if (flg == 2) continue;\n         \n        int ct = 0;\n        if (flg) {\n            sort(card, card + 5);\n            for (int i = 1; i < 5; i++) {\n                if(card[i] - card[i-1] == 1) ct++;\n            }\n        }\n         \n        if (ct == 4) {\n            printf(\"straight\\n\");\n        } else if (card[0] == 1 &&\n                   card[1] == 10 &&\n                   card[2] == 11 &&\n                   card[3] == 12 &&\n                   card[4] == 13) {\n            printf(\"straight\\n\");\n        } else {\n            printf(\"null\\n\");\n        }\n    } \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nbool cmp(int a,int b){\n\treturn a>b;\n}\nint main(){\n\tint a[5],b[20];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tsort(a,a+5);\n\t\tfor(int i=0;i<14;i++)b[i]=0;\n\t\tfor(int i=0;i<5;i++)b[a[i]]++;\n\t\tsort(b,b+14,cmp);\n\t\tif(b[0]==4)printf(\"four card\\n\");\n\t\telse if(b[0]==3){\n\t\t\tif(b[1]==2)printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(b[0]==2){\n\t\t\tif(b[1]==2)printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(a[1]==a[2]-1&&a[3]==a[2]+1&&a[3]==a[4]-1){\n\t\t\tif(a[0]==a[1]-1)printf(\"straight\\n\");\n\t\t\telse if(a[0]==1&&a[4]==13)printf(\"straight\\n\");\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\t\telse printf(\"null\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\nbool isStraight(int* a)\n{\n\tif(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13) return true;\n\tfor(int i=1;i<5;i++) if(a[i]!=a[i-1]+1) return false;\n\treturn true;\n}\nint main()\n{\n\tint a[5]; char ch;\n\twhile(cin >> a[0] >> ch >> a[1] >> ch >> a[2] >> ch >> a[3] >> ch >> a[4])\n\t{\n\t\tint sum=1; int pair=0;\n\t\tsort(a,a+5);\n\t\tfor(int i=1;i<5;i++)\n\t\t{\n\t\t\tint tmp=1;\n\t\t\twhile(i<5 && a[i-1]==a[i]) {tmp++; i++;}\n\t\t\tsum=max(tmp,sum);\n\t\t}\n\t\tbool flag=true;\n\t\tfor(int i=1;i<5;i++)\n\t\t{\n\t\t\tif(flag && a[i-1]==a[i]) {pair++; flag=false;}\n\t\t\telse flag=true;\n\t\t}\n\t\tif(sum==4) cout << \"four card\" << endl;\n\t\telse if(sum==3 && pair==2) cout << \"full house\" << endl;\n\t\telse if(isStraight(a)) cout << \"straight\" << endl;\n\t\telse if(sum==3) cout << \"three card\" << endl;\n\t\telse if(pair==2) cout<< \"two pair\" << endl;\n\t\telse if(pair==1) cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<cstdio>\n#include<sstream>\n#include<algorithm>\n#include<cmath>\n#include<map>\n#include<functional>\n#include<queue>\n#include<stack>\n#include<set>\nusing namespace std;\nint main(){\n\tint a,b,c,d,e;\n\tchar x;\n\twhile(cin>>a>>x>>b>>x>>c>>x>>d>>x>>e){\n\t\tstring ans=\"null\";\n\tint ta[14]={0};\n\tta[a]++,ta[b]++,ta[c]++,ta[d]++,ta[e]++;\n\tint two=0,three=0,four=0;\n\tfor(int i=1;i<=13;i++){if(ta[i]==2)two++;if(ta[i]==3)three++;if(ta[i]==4)four++;}\n\t\tif(two==1)ans=\"one pair\";\n\t\tif(two==2)ans=\"two pair\";\n\t\tif(three==1)ans=\"three card\";\n\t\tfor(int i=1;i<=13-4;i++)if(ta[i]==1&&ta[i+1]==1&&ta[i+2]==1&&ta[i+3]==1&&ta[i+4]==1)ans=\"straight\";\n\t\t\n\t\tif(ta[10]==1&&ta[11]==1&&ta[12]==1&&ta[13]==1&&ta[1]==1)ans=\"straight\";\n\t\tif(two==1&&three==1)ans=\"full house\";\n\t\tif(four==1)ans=\"four card\";\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int card[5];\n  while(scanf(\"%d,%d,%d,%d,%d\", \n\t      &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n    sort(&card[0], &card[4] + 1);\n\n    int data1[5];\n    int kumi = -1;\n    int before = 0;\n    int count = 1;\n\n    for(int i = 0; i < 5; i++) {\n      if(card[i] != before) {\n\tdata1[++kumi] = 1;\n      } else {\n\tdata1[kumi]++;\n      }\n      before = card[i];\n    }\n    kumi++;\n    if(kumi == 2) {\n      if(data1[0] == 4 || data1[1] == 4) {\n\tcout << \"four card\" << endl;\n      } else if(data1[0] == 3 || data1[1] == 3) {\n\tcout << \"full house\" << endl;\n      }\n    }\n    if(kumi == 3) {\n      if(data1[0] == 3 || data1[1] == 3 || data1[2] == 3) {\n\tcout << \"three card\" << endl;\n      } else if(data1[0] == 1 || data1[1] == 1 || data1[2] == 1) {\n\tcout << \"two pair\" << endl;\n      }\n    }\n    if(kumi == 4) {\n      cout << \"one pair\" << endl;\n    }\n    if(kumi == 5) {\n      bool flag = false;\n      for(int i = 0; i+1 < 5; i++) {\n\tif(card[i+1] - card[i] != 1) {\n\t  break;\n\t}\n\tif((i+1)+1 == 5) flag = true;\n      }\n      if(card[0] == 1 && card[1] == 10 &&\n\t card[2] == 11 && card[3] == 12 && card[4] == 13) flag = true;\n\n      if(flag) {\n\tcout << \"straight\" << endl;\n      } else {\n\tcout << \"null\" << endl;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing db = double;\nusing ll = long long;\nusing vi = vector <int>;\n#define op operator\n#define pb push_back\n\nint a[5];\nint c[14];\n\nint main() {\n\tios :: sync_with_stdio(0);\n\n\twhile(cin >> a[0]) {\n\t\tchar t;\n\t\tfor(int i = 1; i < 5; i ++)\n\t\t\tcin >> t >> a[i];\n\t\tfill(c, c + 14, 0);\n\t\tfor(int i = 0; i < 5; i ++)\n\t\t\tc[a[i]] ++;\n\n\t\tauto f = [&](int i) {\n\t\t\treturn count(c, c + 14, i);\n\t\t};\n\t\tauto straight = [&]() {\n\t\t\tbool r = 0;\n\t\t\tfor(int i = 1; i <= 10; i ++) {\n\t\t\t\tbool t = 1;\n\t\t\t\tfor(int j = i; j < i + 5; j ++)\n\t\t\t\t\tif(!c[(j - 1) % 13 + 1])\n\t\t\t\t\t\tt = 0;\n\t\t\t\tr |= t;\n\t\t\t}\n\t\t\treturn r;\n\t\t};\n\n\t\tif(f(4))\n\t\t\tcout << \"four card\\n\";\n\t\telse if(f(3) && f(2))\n\t\t\tcout << \"full house\\n\";\n\t\telse if(straight())\n\t\t\tcout << \"straight\\n\";\n\t\telse if(f(3))\n\t\t\tcout << \"three card\\n\";\n\t\telse if(f(2) == 2)\n\t\t\tcout << \"two pair\\n\";\n\t\telse if(f(2))\n\t\t\tcout << \"one pair\\n\";\n\t\telse\n\t\t\tcout << \"null\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> P;\n\n#define all(c) (c).begin(),(c).end()\n#define pb push_back\n#define mp make_pair\n#define ERASE(v,i) (v).erase(remove(all(v),i),(v).end())\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define each(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)\n#define debug(x) cerr<<#x<<\" = \"<<(x)<<endl;\n#define LINE cerr<<\"LINE: \"<<__LINE__<<endl;\n\ninline int toInt(string s){int v;istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x){ostringstream sout;sout<<x;return sout.str();}\ntemplate<class T> void preview(T a,T b){for(T it=a;it!=b;++it)cerr<<*it<<\" \";cerr<<endl;}\n\nconst int INF = 100000000;\nconst double PI = acos(-1.0), EPS = 1e-10;\n\nint main() {\n\tfor(string line; cin >> line;) {\n\t\trep(i,line.length()) if(line[i] == ',') line[i] = ' ';\n\t\tistringstream is(line);\n\t\tvector<int> card(5);\n\t\trep(i,5) is >> card[i];\n\t\tsort(all(card));\n\n\t\tmap<int, int> m;\n\t\trep(i,5) m[card[i]]++;\n\n\t\t// four cards\n\t\t{\n\t\t\tbool four_card = false;\n\t\t\tint two_pair = 0;\n\t\t\tbool three_cards = false;\n\t\t\teach(it, m) {\n\t\t\t\tif(it->second == 4) four_card = true;\n\t\t\t\tif(it->second == 3) three_cards = true;\n\t\t\t\tif(it->second == 2) two_pair++;\n\t\t\t}\n\n\t\t\tbool streat = true;\n\t\t\tfor(int i = 1; i < 5; i++) {\n\t\t\t\tif(card[i] != card[i - 1] + 1) streat = false;\n\t\t\t}\n\t\t\tif(card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) streat = true;\n\n\t\t\tstring ans;\n\t\t\tif(four_card) ans = \"four cards\";\n\t\t\telse if(three_cards && two_pair) ans = \"full house\";\n\t\t\telse if(streat) ans = \"straight\";\n\t\t\telse if(three_cards) ans = \"three card\";\n\t\t\telse if(two_pair == 2) ans = \"two pair\";\n\t\t\telse if(two_pair == 1) ans = \"one pair\";\n\t\t\telse ans = \"null\";\n\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nenum Direction {R, L, U, D};\n\nbool input(int b[])\n{\n\tchar dummy;\n\tfor (int i=0; i<5; i++) {\n\t\tif ( !(cin >> b[i]) ) return false;\n\t\tif (b[i]==1) b[i]+=13;\n\t\tif (i<4) cin >> dummy;\n\t}\n\treturn true;\n}\n\nvoid sort5(int a[])\n{\n\tfor (int i=0; i<5; i++) {\n\t\tfor (int j=4; j>i; j--) {\n\t\t\tif (a[j-1] > a[j]) {\n\t\t\t\tint tmp = a[j];\ta[j] = a[j-1]; a[j-1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint hand[5];\n\twhile ( input(hand) ) {\n\t\tsort5(hand);\n\t\tif ( hand[0] == hand[3] || hand[1] == hand[4] ) {\n\t\t\tcout << \"four card\";\n\t\t} else if ( (hand[0] == hand[2] && hand[3] == hand[4]) || (hand[0] == hand[1] && hand[2] == hand[4]) ) {\n\t\t\tcout << \"full house\";\n\t\t} else if ( hand[0] + 1 == hand[1] && hand[1] + 1 == hand[2] && hand[2] + 1 == hand[3] && hand[3] + 1 == hand[4] ) {\n\t\t\tcout << \"straight\";\n\t\t} else if ( hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4] ) {\n\t\t\tcout << \"three card\";\n\t\t} else if ( hand[0] == hand[1] && hand[2] == hand[3] || hand[0] == hand[1] && hand[3] == hand[4] || hand[1] == hand[2] && hand[3] == hand[4] ) {\n\t\t\tcout << \"two pair\";\n\t\t} else if ( hand[0] == hand[1] || hand[1] == hand[2] || hand[2] == hand[3] || hand[3] == hand[4]) {\n\t\t\tcout << \"one pair\";\n\t\t} else cout << \"null\";\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<string>\nusing namespace std;\n\nint a[5];\n\nstring S;\n\nstring poker(int p, int q, int r, int s, int t)\n{\n\tif (p == q && q == r && r == s)\n\t{\n\t\treturn \"four card\";\n\t}\n\tif (s == t && q == r && r == s)\n\t{\n\t\treturn \"four card\";\n\t}\n\tif (p == q && q == r && s == t)\n\t{\n\t\treturn \"full house\";\n\t}\n\tif (p == q && r == s && s == t)\n\t{\n\t\treturn \"full house\";\n\t}\n\tif (p == q - 1 && q == r - 1 && r == s - 1 && s == t - 1)\n\t{\n\t\treturn \"straight\";\n\t}\n\tif (p == 1 && q == 10 && r == 11 && s == 12 && t == 13)\n\t{\n\t\treturn \"straight\";\n\t}\n\tif (p == q && q == r)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (r == s && q == r)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (r == s && s == t)\n\t{\n\t\treturn \"three card\";\n\t}\n\tif (p == q && r == s)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (p == q && s == t)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (q == r && s == t)\n\t{\n\t\treturn \"two pair\";\n\t}\n\tif (p == q)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (q == r)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (r == s)\n\t{\n\t\treturn \"one pair\";\n\t}\n\tif (s == t)\n\t{\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main() {\n\twhile (cin >> S)\n\t{\n\t\tint cnt = 0;\n\t\tstring U = \"\";\n\t\tS += ',';\n\t\tfor (int i = 0; i < S.size(); i++)\n\t\t{\n\t\t\tif (S[i] == ',')\n\t\t\t{\n\t\t\t\ta[cnt] = stoi(U);\n\t\t\t\tU = \"\";\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tU += S[i];\n\t\t\t}\n\t\t}\n\t\tsort(a, a + 5);\n\t\tcout << poker(a[0], a[1], a[2], a[3], a[4]) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main(){\n\tint a[5];\n\tchar c;\n\twhile(cin >> a[0]){\n\t\tint card[13] = {0};\n\t\tfor(int i = 1; i < 5; i++) cin >> c >> a[i];\n\t\tfor(int i = 0; i < 5; i++) card[a[i]-1]++;\n\t\tint pair = 0, cards = 0, straight = 1;\n\t\tfor(int i = 0; i < 13; i++){\n\t\t\tif(card[i] == 2) pair ++;\n\t\t\tcards = max(cards, card[i]);\n\t\t}\n\t\tsort(a, a+5);\n\t\tfor(int i = 1; i < 5; i++) if(a[i]-a[i-1] != 1) straight = 0;\n\t\tif(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13) straight = 1;\n\n\t\tif(cards == 4) cout << \"four card\" << endl;\n\t\telse if(cards == 3 && (a[0]==a[1] || a[3]==a[4])) cout << \"full house\" << endl;\n\t\telse if(straight) cout << \"straight\" << endl;\n\t\telse if(cards == 3) cout << \"three card\" << endl;\n\t\telse if(pair == 2) cout << \"two pair\" << endl;\n\t\telse if(pair) cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(void){\n    int a,b,c,d,e;\n    std::deque<int> deq;\n    char x;\n    while (cin>>a>>x>>b>>x>>c>>x>>d>>x>>e) {\n        deq.emplace_back(a);\n        deq.emplace_back(b);\n        deq.emplace_back(c);\n        deq.emplace_back(d);\n        deq.emplace_back(e);\n        sort(deq.begin(),deq.end());\n        if ( (deq[0]==deq[1]&&deq[1]==deq[2]&&deq[2]==deq[3]) || (deq[1]==deq[2]&&deq[2]==deq[3]&&deq[3]==deq[4]) ) {\n            cout<<\"four card\"<<endl;\n            deq.clear();\n        } else if ( (deq[0]==deq[1]&&deq[1]==deq[2]&&deq[3]==deq[4]) || (deq[0]==deq[1]&&deq[2]==deq[3]&&deq[3]==deq[4]) ) {\n            cout<<\"full house\"<<endl;\n            deq.clear();\n        } else if ( (deq[0]+1==deq[1]&&deq[1]+1==deq[2]&&deq[2]+1==deq[3]&&deq[3]+1==deq[4]) || (deq[0]==1&&deq[1]==10&&deq[2]==11&&deq[3]==12&&deq[4]==13) ) {\n            cout<<\"straight\"<<endl;\n            deq.clear();\n        } else if ( (deq[0]==deq[1]&&deq[1]==deq[2]) || (deq[1]==deq[2]&&deq[2]==deq[3]) || (deq[2]==deq[3]&&deq[3]==deq[4]) ) {\n            cout<<\"three card\"<<endl;\n            deq.clear();\n        } else if ( (deq[1]==deq[2]&&deq[3]==deq[4]) || (deq[0]==deq[1]&&deq[3]==deq[4]) || (deq[0]==deq[1]&&deq[2]==deq[3]) ) {\n            cout<<\"two pair\"<<endl;\n            deq.clear();\n        } else if ( (deq[0]==deq[1]) || (deq[1]==deq[2]) || (deq[2]==deq[3]) || (deq[3]==deq[4]) ) {\n            cout<<\"one pair\"<<endl;\n            deq.clear();\n        } else {\n            cout<<\"null\"<<endl;\n            deq.clear();\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define rep(i,a) for(int i = 0 ; i < a;  i ++)\nint main(void){\n  vector<int> array(5);\n  vector<int> card(14);\n  string s;  \n  while(cin>>s){\n    rep(i,5)array[i]=0;\n    rep(i,14)card[i]=0;\n    for(int i = 0, j = 0 ; i < s.size() ; i ++){\n      if(s[i] == ','){\n\tj++;continue;\n      }\n      array[j] = array[j] * 10 +s[i]-'0';\n    }\n    rep(i,5)card[array[i]]++;\n    sort(card.begin(),card.end(),greater<int>());\n    //rep(i,5)cout<<card[i]<<endl;\n    sort(array.begin(),array.end());\n    if(\n       (card[0 ] == 1 && card[1 ] == 1 && card[2 ] == 1 && card[3 ] == 1 && card[4] == 1 ) \n       //(card[10] == 1 && card[11] == 1 && card[12] == 1 && card[13] == 1 && card[1] == 1 )\n       ){\n      bool check=0;\n      rep(i,4){\n\tif(array[i] != array[i+1] - 1){\n\t  check = 1;\n\t  break;\n\t}\n      }\n      if(!check)cout<<\"straight\"<<endl;\n      else if((array[1] == 1 && array[10] == 1 && array[11] == 1 && array[12] == 1 && array[13] == 1 ) || \n\t (array[1] == 1 && array[2] == 1 && array[11] == 1 && array[12] == 1 && array[13] == 1 )){\n\tcout<<\"straight\"<<endl;\n      }else cout<<\"null\"<<endl;\n      continue;\n    }\n    switch(card[0]){\n    case 4:\n      cout<<\"four card\"<<endl;break;\n    case 3:\n      if(card[1]==2){\n\tcout<<\"full house\"<<endl;\n      }else{\n\tcout<<\"three card\"<<endl;\n      }\n      break;\n    case 2:\n      if(card[1]==2){\n\tcout<<\"two pair\"<<endl;\n      }else{\n\tcout<<\"one pair\"<<endl;\n      }\n      break;\n    default:\n      cout<<\"null\"<<endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib>\n#include <algorithm>\n#include <map>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nusing namespace std;\n\nvector<string> split(const string &str, char delim){\n  vector<string> res;\n  size_t current = 0, found;\n  while((found = str.find_first_of(delim, current)) != string::npos){\n    res.push_back(string(str, current, found - current));\n    current = found + 1;\n  }\n  res.push_back(string(str, current, str.size() - current));\n  return res;\n}\n\n\nint main()\n{\n\tstring s;\n\twhile(cin >> s)\n\t{\n\t\tvector<string> _s = split(s,',');\n\t\tvector<int> n;\n\t\tmap<int,int> m;\n\t\trep(i,_s.size())\n\t\t{\n\t\t\tn.push_back(atoi(_s[i].c_str()));\n\t\t}\n\n\t\tsort(n.begin(),n.end());\n\t\t\n\t\trep(i,n.size())\n\t\t{\n\t\t\tm[n[i]]++;\n\t\t}\n\n\t\tif(m.size() == 2)\n\t\t{\n\t\t\tif(m[n[0]] == 1 || m[n[0]] == 4)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\n\t\telse if(m.size() == 3)\n\t\t{\n\t\t\tbool flag = true;\n\t\t\trep(i,n.size())\n\t\t\t{\n\t\t\t\tif(m[n[i]] == 3)\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t}\n\n\t\telse if(m.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\n\t\telse if(m.size() == 5)\n\t\t{\n\t\t\tif(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse if(n[1] == n[0]+1 && n[2] == n[1]+1 && n[3] == n[2]+1 && n[4] == n[3]+1)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n \nusing namespace std;\n \nint main(){\n    int hand[5];\n \n    while(~scanf(\"%d\", &hand[0])){\n        for(int i = 1; i < 5; i++){\n            scanf(\",%d\", &hand[i]);\n        }\n        int num[15] = {0};\n \n        for(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1) num[14]++;\n\t\t\tnum[hand[i]]++;\n\t\t} \n        int h[7] = {0};\n        string s[] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n        int seq = 0;\n        h[0] = 1;\n        for(int i = 1; i < 15; i++){\n            if(num[i-1] && num[i]) seq++;\n            if(num[i] == 2 && i != 14) h[1]++;\n            if(num[i] == 3) h[3]++;\n            if(num[i] == 4) h[6]++;\n        }\n        if(h[1] > 1) h[2]++;\n        if(h[1] && h[3]) h[5]++;\n        if(seq == 4)\n\t\t\tif(!(num[2] && num[13])) h[4]++;\n \n        for(int i = 6; i >= 0; i--){\n            if(h[i]){\n                cout << s[i] << endl;\n                break;\n            }\n        }\n    }\n \n \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nbool str(int a[])\n{\n\tif((a[0]==a[1]+1&&a[1]==a[2]+1&&a[2]==a[3]+1&&a[3]==a[4]+1)){\n\t\treturn true;\n\t}else if(a[0]==13&&a[1]==12&&a[2]==11&&a[3]==10&&a[4]==1){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\t\t\n\t\t\t\n\nint main()\n{\n\tint a[5];\n\tint count;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n\t\tcount = 0;\n\t\tsort(a,a+5,greater<int>());\n\t\tfor(int i=0;i<4;++i){\n\t\t\tfor(int j=i+1;j<5;++j){\n\t\t\t\tif(a[i]==a[j])count++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tswitch(count){\n\t\t  case 6:\n\t\t\tcout << \"four card\" << endl;\n\t\t\tbreak;\n\t\t  case 4:\n\t\t\tcout << \"full house\" << endl;\n\t\t\tbreak;\n\t\t  case 3:\n\t\t\tcout << \"three card\" << endl;\n\t\t\tbreak;\n\t\t  case 2:\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tbreak;\n\t\t  case 1:\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tbreak;\n\t\t  default:\n\t\t\tif(str(a)){\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}else{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n\t\t"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main(void) {\n    int a[5];\n    char c;\n    while (cin >> a[0] >> c >> a[1] >> c >> a[2] >> c >> a[3] >> c >> a[4]) {\n        int b[13] = {};\n        for (int i = 0; i < 5; ++i) ++b[a[i]];\n        sort(a, a+5);\n        sort(b, b+13, greater<int>());\n\n\n        if (b[0] == 4)\n            cout << \"four card\" << endl;\n        else if (b[0] == 3 && b[1] == 2)\n            cout << \"full house\" << endl;\n        else if (((a[0]+1 == a[1]) && (a[1]+1==a[2]) && (a[2]+1==a[3]) && (a[3]+1==a[4])) ||\n                 (a[0] == 1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13))\n            cout << \"straight\" << endl;\n        else if (b[0] == 3)\n            cout << \"three card\" << endl;\n        else if (b[0] == 2 && b[1] == 2)\n            cout << \"two pair\" << endl;\n        else if (b[0] == 2 )\n            cout << \"one pair\" << endl;\n        else\n            cout << \"null\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int card[15];\n  int tmp;\n  char komma;\n  int i, j;\n  int flag, flag2, flag3;\n\n  while(cin>>tmp){\n    for(i=0; i<15; i++) card[i]=0;\n    card[tmp]++;\n    for(i=0; i<4; i++){\n      cin>>komma>>tmp;\n      card[tmp]++;\n    }\n\n    flag=0;\n    for(i=0; i<15; i++)\n      if(card[i]==4) flag=1;\n    if(flag){\n      printf(\"four card\\n\"); continue;\n    }\n    flag2=0; flag3=0;\n    for(i=0; i<15; i++){\n      if(card[i]==3) flag=1;\n      else if(flag2 && card[i]==2) flag3=1;\n      else if(card[i]==2) flag2=1;\n    }\n    if(flag && flag2){\n      printf(\"full house\\n\"); continue;\n    } else if(flag){\n      printf(\"three card\\n\"); continue;\n    } else if(flag3){\n      printf(\"two pair\\n\"); continue;\n    } else if(flag2){\n      printf(\"one pair\\n\"); continue;\n    }\n    if(card[1]=1) card[14]=1;\n    for(i=10; i>0; i--){\n      tmp=1;\n      for(j=0; j<5; j++){\n        tmp*=card[i+j];\n      }\n      if(tmp==1){\n        printf(\"straight\\n\"); break;\n      }\n    }\n    if(tmp==1) continue;\n    printf(\"null\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm.h>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint c1;\n\tint c2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\t\n\t\tc1 = 0;\n\t\tc2 = 0;\n\t\tstraight = 0;\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tc1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tc2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((c1 == 1 && c2 == 0) || (c1 == 0 && c2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (c1 == 1 && c1 == c2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (c1 + c2 == 3 && c1 != 0 && c2 != 0){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\t\n\t\telse if (c1 == 2 || c2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (c1 == 3 || c2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint ar[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &ar[0], &ar[1], &ar[2], &ar[3], &ar[4])+1) {\n\t\tsort(ar, ar + 5);\n\t\tint a = ar[0];\n\t\tint b = ar[1];\n\t\tint c = ar[2];\n\t\tint d = ar[3];\n\t\tint e = ar[4];\n\n\t\tif (a == d || b == e) { cout << \"four card\" << endl; }\n\t\telse if (a == c && d == e) { cout << \"full house\" << endl; }\n\t\telse if (a == b && c == e) { cout << \"full house\" << endl; }\n\t\telse if (b - a == 1 && c - b == 1 && d - c == 1 && e - d == 1) { cout << \"straight\" << endl; }\n\t\telse if (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) { cout << \"straight\" << endl; }\n\t\telse if (a == c || b == d || c == e) { cout << \"three card\" << endl; }\n\t\telse if (a==b&&c==d) { cout << \"two pair\" << endl; }\n\t\telse if (a == b&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (b == c&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (a == b || b == c || c == d || d == e) { cout << \"one pair\" << endl; }\n\t\telse { cout << \"null\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint h[13], cnt[5];\nbool four = false, full = false, three = false, two = false, one = false, straight = false;\n\nint main(void){\n  scanf(\"%d,%d,%d,%d,%d\", cnt, cnt+1, cnt+2, cnt+3, cnt+4);\n  for(int i = 0; i < 5; i++){\n    h[cnt[i]-1]++;\n  }\n  \n  for(int i = 0; i < 13; i++){\n    if(h[i] == 2) one = true;\n  }\n  \n  for(int i = 0; i < 13; i++){\n    if(h[i] == 3) three = true;\n  }\n\n  for(int i = 0; i < 13; i++){\n    for(int j = 0; j < 13; j++){\n      if(h[i] == 2 && h[j] == 2 && i != j)  two = true;\n      if(h[i] == 3 && h[j] == 2 && i != j)  full = true;\n    }\n  }\n  \n  for(int i = 0; i < 13; i++){\n    if(h[i] == 4) four = true;\n  }\n  \n  for(int i = 0; i < 9; i++){\n    if(h[i] != 0 && h[i+1] != 0 && h[i+2] != 0 && h[i+3] != 0 && h[i+4] != 0) straight = true;\n  }\n  \n  if(h[0] != 0 && h[12] != 0 && h[11] != 0 && h[10] != 0 && h[9] != 0)  straight = true;\n \n  if(straight){\n    cout << \"straight\" << endl;\n  }else if(four){\n    cout << \"four card\" << endl;\n  }else if(full){\n    cout << \"full house\" << endl;\n  }else if(three){\n    cout << \"three card\" << endl;\n  }else if(two){\n    cout << \"two pair\" << endl;\n  }else if(one){\n    cout << \"one pair\" << endl;\n  }else{\n    cout << \"null\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<cassert>\n#include<iostream>\n#include<sstream>\n#include<string>\n#include<vector>\n#include<queue>\n#include<set>\n#include<map>\n#include<utility>\n#include<numeric>\n#include<algorithm>\n#include<bitset>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in() { int x; scanf(\"%d\", &x); return x; }\n\nint main() {\n\tint a[5];\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",a,a+1,a+2,a+3,a+4)){\n\t\tsort(a,a+5);\n\t\tif(a[0]==a[3]||a[1]==a[4]){\n\t\t\tcout<<\"four card\"<<endl;\n\t\t}else if(a[0]==a[2]&&a[3]==a[4]||a[0]==a[1]&&a[2]==a[4]){\n\t\t\tcout<<\"full house\"<<endl;\n\t\t}else if((a[0]+1==a[1]||a[0]==1&&a[4]==13)&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t}else if(a[0]==a[2]||a[1]==a[3]||a[2]==a[4]){\n\t\t\tcout<<\"three card\"<<endl;\n\t\t}else if(a[0]==a[1]&&(a[2]==a[3]||a[3]==a[4])||a[1]==a[2]&&a[3]==a[4]){\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t}else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4]){\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t}else{\n\t\t\tcout<<\"null\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\t\tif(it->second>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(it->second==4){\n\t\t\treturn \"four card\";\n\t\t}else if(it->second==3){\n\t\t\tis3 = true;\n\t\t}else if(it->second==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint a[5];\n\nbool isStraight(){\n\tvector<int> n;\n\tfor(int i=0 ; i<5 ; i++){\n\t\tn.push_back(a[i]);\n\t}\n\tsort( n.begin(), n.end() );\n\tif( n[0]+1 == n[1] && n[1]+1 == n[2] && n[2]+1 == n[3] && n[3]+1 == n[4]){\n\t\treturn true;\n\t}\n\tif( n[0]==1 && n[1]==10 && n[2]==11 && n[3]==12 && n[4]==13){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstring checkCard(){\n\tint n, count, c[5];\n\tint c2=0, c3=0, c4=0;\n\n\tfor(int j=0 ; j<5 ; j++){\n\t\tcount = 0;\n\t\tn = a[j];\n\t\tfor(int i=0 ; i<5 ; i++){\n\t\t\tif(a[i]==n)count++;\n\t\t}\n\t\tc[j] = count;\n\t}\n\tfor(int i=0 ; i<5 ; i++){\n\t\tif(c[i]==2)c2++;\n\t\tif(c[i]==3)c3++;\n\t\tif(c[i]==4)c4++;\n\t}\n\tif(c4==4) return \"four card\";\n\telse if(c3==3 && c2==2) return \"full house\";\n\telse if( isStraight() ) return \"straight\";\n\telse if(c3==3) return \"three card\";\n\telse if(c2==4) return \"two pair\";\n\telse if(c2==2) return \"one pair\";\n\telse return \"null\";\n}\n\nint main(){\n\tstring str;\n\tchar s[80];\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4] ) != EOF ){\n\t\tstr = checkCard();\n\t\tprintf(\"%s\\n\",str.c_str());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double ESP=1e-10;\nusing namespace std;\nint main(){\n  vector<int> a(5);\n  while(cin>>a[0]){\n    char d;\n    string ans;\n    rep(i,4)cin>>d>>a[i+1];\n    sort(all(a));\n    int co=1;\n    rep(i,4)if(a[i]!=a[i+1])co++;\n    if(a[0]==a[3]||a[1]==a[4])ans=\"four card\";\n    else if((a[0]==a[2])&&(a[3]==a[4])||(a[2]==a[4])&&(a[0]==a[1]))ans=\"full house\";\n    else if((a[0]==a[2])||(a[1]==a[3])||(a[2]==a[4]))ans=\"three card\";\n    else if(co==3)ans=\"two pair\";\n    else if(co==4)ans=\"one pair\";\n    else if((a[4]-a[0]==4)||(a[1]-a[0]==9)||(a[4]-a[3]==9))ans=\"straight\";\n    else ans=\"null\";\n    cout<<ans<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define scanf_s scanf\n//#define gets_s gets\n#include <stdio.h>\n#include <string>\n#include <iostream>\n#include <math.h>\nusing namespace std;\n#define MAX 5\n#define MIN -100001\n#define _MAX 8\n#define ONE 1\n#define TWO 2\n#define THREE 3\n#define FOUR 6\n#define FULL 5\n#define STRAIT 4\nint main(void)\n{\n\tchar *a[_MAX] = { \"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\" };\n\tint card[5], cou[5] = { 0 }, ans;\n\tint bo = 1, x;\n\twhile (scanf_s(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4 ]) != EOF) {\n\t\tans = 0;\n\t\tfor (int i = 0; i < MAX; ++i) {\n\t\t\tcou[i] = 0;\n\t\t\tfor (int j = MAX - 1; j > i; --j) {\n\t\t\t\tif (card[j] < card[j - 1]) {\n\t\t\t\t\tx = card[j]; card[j] = card[j - 1]; card[j - 1] = x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < MAX - 1; ++i) \n\t\t\tif (card[i] == card[i + 1]) ++cou[i + 1] += cou[i];\n\n\t\tfor (int i = 0; i < MAX; ++i) {\n\t\t\tif (i + 1 == MAX || cou[i + 1] == 0) {\n\t\t\t\tif (cou[i] > 0) {\n\t\t\t\t\t//1...one, 2...1.1, 3...2 4...3,5...2,1\n\t\t\t\t\tif (ans == 0) {\n\t\t\t\t\t\t//??????????????????1???\n\t\t\t\t\t\tif (cou[i] == 1) ans = ONE;\n\t\t\t\t\t\telse if (cou[i] == 2) ans = THREE;\n\t\t\t\t\t\telse if (cou[i] == 3) { ans = FOUR; break; }\n\t\t\t\t\t}\n\t\t\t\t\telse if (ans == ONE) {\n\t\t\t\t\t\tif (cou[i] == 1) { ans = TWO; break; }\n\t\t\t\t\t\telse if (cou[i] == 2) { ans = FULL; break; }\n\t\t\t\t\t}\n\t\t\t\t\telse if (ans == THREE) {\n\t\t\t\t\t\tif (cou[i] == 1) { ans = FULL; break; }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ans == 0) {\n\t\t\tfor (int i = MAX - 1; i >= 1; --i) {\n\t\t\t\tif (i == 1) {\n\t\t\t\t\tif (card[i] == card[i - 1] + 1) ans = STRAIT;\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (card[4] == 13 && card[0] == 1) ans = STRAIT;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (card[i] != card[i - 1] + 1) break;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",a[ans]);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[6];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tif(i!= 4) scanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\tif(check[i] == 3) three++;\n\t\t\t\tif(check[i] == 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(pair == 2) printf(\"two pair\\n\");\n\t\t\telse if(three == 1) printf(\"full house\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three == 1) \n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four == 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint card[13]; // A ~ 13\n\tint data[5];\n\twhile(cin >> data[0]){\n\t\tfill(card, card + 13, 0);\n\t\t++card[data[0] - 1];\n\t\tchar c0;\n\t\tfor(int i = 1; i < 5; ++i){\n\t\t\tcin >> c0 >> data[i];\n\t\t\t++card[data[i] - 1];\n\t\t}\n\n\t\tsort(card, card + 13, greater<int>());\n\t\t/*\n\t\tfor(int i = 0; i < 13; ++i){\n\t\t\tcout << card[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t\t*/\n\t\tswitch(card[0]){\n\t\t\tcase 4 :\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tsort(data, data + 5);\n\t\t\t\tif((data[0] == 1 && data[1] == 10 && data[4] == 13) || (data[0] + 4 == data[4]))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isChain( int* num, int i, int r ){\n\tif ( i >= 15 ) return false;\n\tif ( num[ i ] == 1 ){\n\t\tr -= 1;\n\t\tif ( !r ){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn isChain( num, i+1, r );\n\t\t}\n\t}\n\treturn false;\n}\n\n\nstring checkHand( int* c ){\n\tint number[ 15 ] = {0};\n\tint max1 = 0, max1num = 0, max2 = 0, max2num = 0;\n\n\tfor ( int i = 0; i < 5; ++i ){\n\t\tint n = c[ i ];\n\t\t++number[ n ];\n\t\tif ( number[ n ] > max1 ){\n\t\t\tif ( n == max1num ){\n\t\t\t\tmax1 = number[ n ];\n\t\t\t\tmax1num = n;\n\t\t\t}else{\n\t\t\t\tmax2 = max1;\n\t\t\t\tmax2num = max1num;\n\t\t\t\tmax1 = number[ n ];\n\t\t\t\tmax1num = n;\n\t\t\t}\n\t\t}else if ( number[ n ] > max2 ){\n\t\t\tmax2 = number[ n ];\n\t\t\tmax2num = n;\n\t\t}\n\t\tif ( n == 1 ) ++number[ 14 ];\n\t}\n\n\tif ( max1 == 4 ){\n\t\treturn \"four card\";\n\t}else if ( max1 == 3 ){\n\t\tif ( max2 == 2 ){\n\t\t\treturn \"full house\";\n\t\t}else{\n\t\t\treturn \"three card\";\n\t\t}\n\t}else if ( max1 == 2 ){\n\t\tif ( max2 == 2 ){\n\t\t\treturn \"two pair\";\n\t\t}else{\n\t\t\treturn \"one pair\";\n\t\t}\n\t}\n\n\tfor ( int i = 1; i <= 10; ++i ){\n\t\tif ( number[ i ] == 1 ){\n\t\t\tif ( isChain( number, i+1, 5-1 ) ){\n\t\t\t\treturn \"straight\";\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn \"null\";\n}\n\nint main(){\n\tint card[ 5 ];\n\tchar c;\n\n\twhile ( cin >> card[ 0 ] >> c >> card[ 1 ] >> c >> card [ 2 ] >> c\n\t\t\t\t>> card[ 3 ] >> c >> card[ 4 ] ){\n\n\t\tcout << checkHand( card ) << endl;\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define rep(i,a) for(int i = 0 ; i < a;  i ++)\nint main(void){\n  vector<int> array(5);\n  vector<int> original;\n  vector<int> card(15);\n  string s;  \n  while(cin>>s){\n    rep(i,5)array[i]=0;\n    rep(i,15)card[i]=0;\n    for(int i = 0, j = 0 ; i < s.size() ; i ++){\n      if(s[i] == ','){\n\tj++;continue;\n      }\n      array[j] = array[j] * 10 +s[i]-'0';\n    }\n    rep(i,5){\n      card[array[i]]++;\n      if(array[i] == 1)card[14]++;\n    }\n\n    original = card;\n    sort(card.begin(),card.end(),greater<int>());\n    \n    //rep(i,5)cout<<card[i]<<endl;\n    if(\n       (card[0 ] == 1 && card[1 ] == 1 && card[2 ] == 1 && card[3 ] == 1 && card[4] == 1 ) \n       ){\n      int cnt = 0;\n      rep(i,15){\n\t//cout<<original[i]<<\" \"<<cnt<<endl;;\n\tif(cnt == 4) break;\n\tif(original[i] == original[i+1] && original[i] != 0 )cnt ++;\n\telse cnt = 0;\n      }\n      if(cnt == 4)cout<<\"straight\"<<endl;\n      else cout<<\"null\"<<endl;\n     \n      continue;\n    }\n    sort(array.begin(),array.end());\n    switch(card[0]){\n    case 4:\n      cout<<\"four card\"<<endl;break;\n    case 3:\n      if(card[1]==2){\n\tcout<<\"full house\"<<endl;\n      }else{\n\tcout<<\"three card\"<<endl;\n      }\n      break;\n    case 2:\n      // rep(i,card.size())cout<<original[i]<<endl;\n      if(card[1]==2 && original[14] != 2){\n\tcout<<\"two pair\"<<endl;\n      }else{\n\tcout<<\"one pair\"<<endl;\n      }\n      break;\n    default:\n      cout<<\"null\"<<endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <stack>\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\tchar s[4];\n\twhile(cin >> hand[0] >> s[0] >> hand[1] >> s[1] >> hand[2] >> s[2] >> hand[3] >> s[3] >> hand[4]){\n\t\tint trump[14] = {};\n\t\tfor(int i = 0; i < 5; i++)trump[hand[i]]++;\n\t\tfor(int i = 1; i <= 10; i++){\n\t\t\tfor(int j = 0; j < 5; j++){\n\t\t\t\tint k = i + j;\n\t\t\t\tif(k == 14)k = 1;\n\t\t\t\tif(trump[k] != 1)goto no;\n\t\t\t}\n\t\t\tcout << \"straight\" << endl;\n\t\t\tgoto fin;\n\t\t\tno:;\n\t\t}\n\t\tsort(trump, trump + 14, greater<int>());\n\t\tif(trump[0] == 4){\n\t\t\tcout << \"four card\" << endl;\n\t\t\tgoto fin;\n\t\t}else if(trump[0] == 3 && trump[1] == 2){\n\t\t\tcout << \"full house\" << endl;\n\t\t\tgoto fin;\n\t\t}else if(trump[0] == 3){\n\t\t\tcout << \"three card\" << endl;\n\t\t\tgoto fin;\n\t\t}else if(trump[0] == 2 && trump[1] == 2){\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tgoto fin;\n\t\t}else if(trump[0] == 2){\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tgoto fin;\n\t\t}\n\t\tcout << \"null\" << endl;\n\t\tfin:;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tint card[5];\n\t\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF ){\n\t \t\n\t\tint a[20];\n\t\tmemset( a, 0, sizeof( a ) );\n\t\tint c = 0;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ) a[card[i]]++;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t c = std::max( c, (int)std::count( card, card + 5, card[i] ) );\n\t\t}\n\t\t\n\t\tbool f = false, f2 = false;\n\t\tint m;\n\t\t\n\t\tswitch( c ){\n\t\t\tcase 4:\n\t\t \t\tputs( \"four card\" );\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t \t\tif( std::count( card, card + 5, card[i] ) == 2 ){\n\t\t\t\t\t\tf = true; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"full house\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t \tputs( \"three card\" );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t\t\tif( std::count( card, card + 5, card[i] ) == 2 && !f ){\n\t\t\t\t\t \tm = card[i];\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] != m && std::count( card, card + 5, card[i] ) == 2 && f ){\n\t\t\t\t\t\tputs( \"two pair\" );\n\t\t\t\t\t\tf2 = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( !f2 ) puts( \"one pair\" );\n\t\t\t\tbreak;\n\t\t\tcase 1:\t\n\t\t\t\tfor( int i = 1; i <= 10; i++ ){\n\t\t\t\t\tif( a[i] == 1 && a[i+1] == 1 && a[i+2] == 1 && a[i+3] == 1 && a[(i+4)%13] == 1 ) f = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"straight\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tputs( \"null\" );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n \treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n    bool flag = false;\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n\tflag = false;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n\tflag = true;\n      }\n    }\n    if (!flag) mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    //printf(\"mx = %d\\n\", mx);\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c >= 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      for (int i = 0;  i< mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n\tprintf(\"three card\\n\");\n\tgoto end;\n      }\n    } else if (mx == 4 || mx == 5) {\n      printf(\"four card\\n\");\n      goto end;\n    } else {\n      printf(\"null\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\nusing namespace std;\n\nstring pairs[2][3] = { {\"null\",\"one pair\",\"two pair\"},\n\t\t\t\t\t  {\"three card\",\"full house\",\"\"} };\n\nint main() {\n\tint n[5], c, three, two;\n\tchar t;\n\tstring res;\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4]) != EOF) {\n\t\tint card[13] = { 0 }, c = 0, three = 0, two = 0;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tcard[n[i]]++;\n\t\t}\n\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (card[i] == 4) {\n\t\t\t\tc = 114514;\n\t\t\t\tbreak;\n\t\t\t} else if(card[i] == 3) {\n\t\t\t\tthree++;\n\t\t\t} else if(card[i] == 2) {\n\t\t\t\ttwo++;\n\t\t\t}\n\n\t\t\tif (card[i] == 1) {\n\t\t\t\tc++;\n\n\t\t\t\tif (c == 4 && i == 12 && card[0] == 1) {\n\t\t\t\t\tc = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if(card[i] == 0 && c != 5 && c > 0) {\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\t\tif (c == 5) {\n\t\t\tcout << \"straight\" << endl;\n\t\t} else if (c == 114514) {\n\t\t\tcout << \"four card\" << endl;\n\t\t} else {\n\t\t\tcout << pairs[three][two] << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint a[5];\n\tint kari;\n\tchar d;\n\t\n\twhile (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n\t\tfor (int i = 4; i > 0; i--) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (a[j] > a[j+1]) {\n\t\t\t\t\tkari = a[j];\n\t\t\t\t\ta[j] = a[j+1];\n\t\t\t\t\ta[j+1] = kari;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n\t\t\tif ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\tif (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t} else if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t}else {\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t}\n\t\t\t} else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n\t\t\t\tif ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t} else {\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t} else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n\t\t\tcout << \"straight\" << endl;\n\t\t} else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<set>\n#include<complex>\n#include<stack>\n#include<cmath>\n\nusing namespace std;\n\n#define reps(i,f,n) for(int i=f;i<int(n);i++)\n#define rep(i,n) reps(i,0,n)\n\n\nint main(){\n\t\n\tint a,b,c,d,e;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)!=EOF){\n\t\ttypedef map<int,int> mii;\n\t\t\n\t\tmii m;\n\t\tm[a]++;\n\t\tm[b]++;\n\t\tm[c]++;\n\t\tm[d]++;\n\t\tm[e]++;\n\t\t\n\t\ttypedef pair<int,int> pii;\n\t\tvector<pii> dat;\n\t\tmii::iterator it = m.begin();\n\t\twhile(it!=m.end()){\n\t\t\tdat.push_back(pii(-it->second,it->first));\n\t\t\tit++;\n\t\t}\n\t\tsort(dat.begin(),dat.end());\n\t\trep(i,dat.size())dat[i].first*=-1;\n\t\t\n\t\t\n\t\tbool flg[8]={false};\n\t\tflg[1]=true;\n\t\tif(dat[0].first==2){\n\t\t\tflg[2]=true;\n\t\t}\n\t\tif(dat[0].first==2 && dat[1].first==2){\n\t\t\tflg[3]=true;\n\t\t}\n\t\tif(dat[0].first==3){\n\t\t\tflg[4]=true;\n\t\t}\n\t\t\n\t\tif(dat.size()==5){\n\t\t\tint st = 0;\n\t\t\tif(dat[0].second==1 && dat[4].second==13)st=1;\n\t\t\tbool ok=true;\n\t\t\treps(i,st,dat.size()-1){\n\t\t\t\tif(dat[i].second+1!=dat[i+1].second)ok=false;\n\t\t\t}\n\t\t\tflg[5]=ok;\n\t\t}\n\t\t\n\t\tif(dat[0].first==3 && dat[1].first==2){\n\t\t\tflg[6]=true;\n\t\t}\n\t\tif(dat[0].first==4){\n\t\t\tflg[7]=true;\n\t\t}\n\t\t\n\t\t//rep(i,dat.size())printf(\"%d-%d \",dat[i].first,dat[i].second);puts(\"\");\n\t\t\n\t\tstring yaku[8]={\n\t\t\t\"null\",\n\t\t\t\"null\",\n\t\t\t\"one pair\",\n\t\t\t\"two pair\",\n\t\t\t\"three card\",\n\t\t\t\"straight\",\n\t\t\t\"full house\",\n\t\t\t\"four card\"\n\t\t};\n\t\t\n\t\tfor(int i=7;i>=1;i--){\n\t\t\tif(flg[i]){\n\t\t\t\tcout<<yaku[i]<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n\nusing namespace std;\n\nbool isStraight(int xcard[5][2])\n{\n\tif(xcard[0][0]==1&&xcard[1][0]==10&&xcard[2][0]==11&&xcard[3][0]==12&&xcard[4][0]==13)\treturn true;\n\tbool b=true;\n\tfor(int i=0;i<4;i++)b&=(xcard[i+1][0]-xcard[i][0]==1);\n\treturn b;\n}\n\nint main()\n{\n\tint card[5];\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",card,card+1,card+2,card+3,card+4)){\n\t\tint xcard[5][2];\t// [0]:cardÌ, [1]:[0]Ì\n\t\tfor(int i=0;i<5;i++)\txcard[i][0]=xcard[i][1]=0;\n\n\t\tint bucket[14]={0};\n\t\tfor(int i=0;i<5;i++)\tbucket[card[i]]++;\n\t\tfor(int i=1,j=0;i<14;i++)\n\t\t\tif(bucket[i]>0)\n\t\t\t\txcard[j][0]=i,xcard[j][1]=bucket[i],j++;\n\n\t\tif(xcard[0][1]==4 || xcard[1][1]==4){\n\t\t\tcout<<\"four card\"<<endl;\n\t\t}\n\t\telse if(xcard[0][1]+xcard[1][1]==5){\n\t\t\tcout<<\"full house\"<<endl;\n\t\t}\n\t\telse if(isStraight(xcard)){\n\t\t\tcout<<\"straight\"<<endl;\n\t\t}\n\t\telse if(xcard[0][1]==3 || xcard[1][1]==3 || xcard[2][1]==3){\n\t\t\tcout<<\"three card\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tint numofpair=0;\n\t\t\tfor(int i=0;i<5;i++)\tnumofpair+=(xcard[i][1]==2);\n\t\t\tswitch(numofpair){\n\t\t\t\tcase 2:\tcout<<\"two pair\"<<endl;\tbreak;\n\t\t\t\tcase 1:\tcout<<\"one pair\"<<endl;\tbreak;\n\t\t\t\tcase 0:\tcout<<\"null\"<<endl;\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <queue>\n#include <map>\nusing namespace std;\ntypedef long long ll;\nconst int INF = 1<<30; \nconst int MOD = 1e9 + 7;\nconst int dy[] = {1, 0, -1, 0};\nconst int dx[] = {0, 1, 0, -1};\nint main()\n{\n    int a[5];\n    char t;\n    while(cin >> a[0] >> t >> a[1] >> t >> a[2] >> t >> a[3] >> t >> a[4])\n    {\n        sort(a,a+5);\n        if(a[0] == a[3] || a[1] == a[4])\n        {\n            cout << \"four card\" << endl;\n        }\n        else if((a[0] == a[1] && a[2] == a[4]) || (a[0] == a[2] && a[3] == a[4]))\n        {\n            cout << \"full house\" << endl;\n        }\n        else if((a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]) || (a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13))\n        {\n            cout << \"straight\" << endl;\n        }\n        else if(a[0] == a[2] || a[1] == a[3] || a[2] == a[4])\n        {\n            cout << \"three card\" << endl;\n        }\n        else if((a[0]==a[1]&&(a[2]==a[3]||a[3]==a[4]))||(a[1]==a[2]&&a[3]==a[4]))\n        {\n            cout << \"two pair\" << endl;\n        }\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))\n        {\n            cout << \"one pair\" << endl;\n        }\n        else\n        {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define rep(i,n)for(int i=0;i<n;i++)\nusing namespace std;\n\nint main() {\n\tint a[5];\n\twhile (~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])) {\n\t\tsort(a, a + 5);\n\t\tif ((a[0] == a[1] && a[0] == a[2] && a[0] == a[3]) || (a[1] == a[2] && a[1] == a[3] && a[1] == a[4]))puts(\"four card\");\n\t\telse if ((a[0] == a[1] && a[0] == a[2] && a[3] == a[4]) || (a[0] == a[1] && a[2] == a[3] && a[2] == a[4]))puts(\"full house\");\n\t\telse if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13))puts(\"straight\");\n\t\telse if ((a[0] == a[1] && a[0] == a[2]) || (a[1] == a[2] && a[1] == a[3]) || (a[2] == a[3] && a[2] == a[4]))puts(\"three card\");\n\t\telse if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4]))puts(\"two pair\");\n\t\telse if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4])puts(\"one pair\");\n\t\telse puts(\"null\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nint a[5];\nint main() {\n    while(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])) {\n        sort(a, a + 5);\n        if((a[0] == a[1] || a[3] == a[4]) && a[1] == a[2] && a[2] == a[3]) printf(\"four card\\n\");\n        if((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n        if(a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && (a[3] + 1) % 13 == a[4] % 13) printf(\"straight\\n\");\n        if(((a[0] == a[1] || a[2] == a[3]) && a[1] == a[2]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n        else {\n            int p = 0; for(int i = 1; i < 5; i++) if(a[i - 1] == a[i]) p++;\n            if(p == 2) printf(\"two pair\\n\");\n            if(p == 1) printf(\"one pair\\n\");\n            if(p == 0) printf(\"null\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint card[13];\nint solve(){\n    int m;\n    vector<int> n;\n    for(int i=0;i<13;i++){\n        if(card[i]) n.push_back(card[i]);\n    }\n    for(int i=0;i<n.size();i++){\n        for(int j=1;j<n.size()-i;i++){\n            if(n[j-1] < n[j]) swap(n[j-1], n[j]);\n        }\n    }\n    if(n.size()==2){\n        if(n[0] == 4){\n            cout << \"four card\" << endl;\n        }else{\n            cout << \"full house\" << endl;\n        }\n    }else if(n.size()==3){\n        if(n[0] == 3){\n            cout << \"three card\" << endl;\n        }else{\n            cout << \"two pair\" << endl;\n        }\n    }else if(n.size()==4){\n        cout << \"one pair\" << endl;\n    }else{\n        for(int i=0;i<13-3;i++){\n            if(card[i]&&card[i+1]&&card[i+2]&&card[i+3]&&card[(i+4)%13]){\n                cout << \"straight\" << endl;\n                return 0;\n            }\n        }\n        cout << \"null\" << endl;\n    }\n}\n\nint main(){\n    char comma;\n    int m;\n    while(cin >> m){\n        for(int i=0;i<13;i++){\n            card[i] = 0;\n        }\n        m--;\n        card[m]++;\n        for(int i=0;i<4;i++){\n            cin >> comma >> m;\n            m--;\n            card[m]++;\n        }\n        solve();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n \n \nint main()\n{\n    const int N = 5;\n    while(1)\n    {\n        int hand[N];\n        char x;\n        int j;\n        for(int i = 0; i < N; i++)\n        {\n            if(i)\n                cin >> x;\n            cin >> hand[i];\n        }\n        if(!cin)\n            break;\n \n        sort(hand, hand+N);\n \n        if(hand[0] == hand[3] ||\n            hand[1] == hand[4])\n            cout << \"four card\" << endl;\n        else if( (hand[0] == hand[1] && hand[2] == hand[4]) ||\n                (hand[0] == hand[2] && hand[3] == hand[4]) )\n            cout << \"full house\" << endl;\n        else if( (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) ||\n            (hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4]) )\n            cout << \"straight\" << endl;\n        else if( (hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4]) )\n            cout << \"three card\" << endl;\n        else if( (hand[0]==hand[1] && hand[2]==hand[3]) ||\n                (hand[0]==hand[1] && hand[3]==hand[4]) ||\n                (hand[1]==hand[2] && hand[3]==hand[4]) )\n            cout << \"two pair\" << endl;\n        else if( hand[0]==hand[1] || hand[1]==hand[2] || hand[2]==hand[3] || hand[3]==hand[4] )\n            cout << \"one pair\" << endl;\n       \n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nint countN( vector<int> hand, int n )\n{\n\tint res = 0;\n\n\tfor ( unsigned int i = 0; i < hand.size(); i++ )\n\t{\n\t\tif ( hand[i] == n )\n\t\t{\n\t\t\tres++;\n\t\t}\n\t}\n\n\treturn res;\n}\n\nbool fourcard( vector<int> hand )\n{\n\tmap<int,int> cards;\n\n\tfor ( unsigned int i = 0; i < hand.size(); i++ )\n\t{\n\t\tcards[ hand[i] ]++;\n\t}\n\n\tfor ( map<int,int>::iterator it = cards.begin(); it != cards.end(); it++ )\n\t{\n\t\tif ( (*it).second == 4 )\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nbool fullhouse( vector<int> hand )\n{\n\tmap<int,int> cards;\n\tbool two, three;\n\ttwo = three = false;\n\n\tfor ( unsigned int i = 0; i < hand.size(); i++ )\n\t{\n\t\tcards[ hand[i] ]++;\n\t}\n\n\tfor ( map<int,int>::iterator it = cards.begin(); it != cards.end(); it++ )\n\t{\n\t\tif ( (*it).second == 2 )\n\t\t{\n\t\t\ttwo = true;\n\t\t}\n\t\tif ( (*it).second == 3 )\n\t\t{\n\t\t\tthree = true;\n\t\t}\n\t}\n\n\treturn two && three;\n}\n\nbool straight( vector<int> hand )\n{\n\tsort( hand.begin(), hand.end() );\n\n\tif ( hand[0] == 1 )\n\t{\n\t\tif ( hand[1] != 10 )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( unsigned int i = 1; i + 1 < hand.size(); i++ )\n\t\t{\n\t\t\tif ( hand[i] + 1 != hand[i+1] )\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor ( unsigned int i = 0; i + 1 < hand.size(); i++ )\n\t\t{\n\t\t\tif ( hand[i] + 1 != hand[i+1] )\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\nbool threecard( vector<int> hand )\n{\n\tmap<int,int> cards;\n\n\tfor ( unsigned int i = 0; i < hand.size(); i++ )\n\t{\n\t\tcards[ hand[i] ]++;\n\t}\n\n\tfor ( map<int,int>::iterator it = cards.begin(); it != cards.end(); it++ )\n\t{\n\t\tif ( (*it).second == 3 )\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nbool twopair( vector<int> hand )\n{\n\tint pairs = 0;\n\tmap<int,int> cards;\n\n\tfor ( unsigned int i = 0; i < hand.size(); i++ )\n\t{\n\t\tcards[ hand[i] ]++;\n\t}\n\n\tfor ( map<int,int>::iterator it = cards.begin(); it != cards.end(); it++ )\n\t{\n\t\tif ( (*it).second == 2 )\n\t\t{\n\t\t\tpairs++;\n\t\t}\n\t}\n\n\treturn pairs == 2;\n}\n\nbool onepair( vector<int> hand )\n{\n\tmap<int,int> cards;\n\n\tfor ( unsigned int i = 0; i < hand.size(); i++ )\n\t{\n\t\tcards[ hand[i] ]++;\n\t}\n\n\tfor ( map<int,int>::iterator it = cards.begin(); it != cards.end(); it++ )\n\t{\n\t\tif ( (*it).second == 2 )\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nint main()\n{\n\tstring buffer;\n\n\twhile ( cin >> buffer )\n\t{\n\t\tfor ( unsigned int i = 0; i < buffer.length(); i++ )\n\t\t{\n\t\t\tif ( buffer[i] == ',' )\n\t\t\t{\n\t\t\t\tbuffer[i] = ' ';\n\t\t\t}\n\t\t}\n\n\t\tistringstream iss( buffer );\n\t\tvector<int> hand;\n\n\t\tfor ( int i = 0; i < 5; i++ )\n\t\t{\n\t\t\tint input;\n\t\t\tiss >> input;\n\t\t\thand.push_back( input );\n\t\t}\n\n\t\tif ( fourcard( hand ) )\n\t\t{\n\t\t\tcout << \"four card\";\n\t\t}\n\t\telse if ( fullhouse( hand ) )\n\t\t{\n\t\t\tcout << \"full house\";\n\t\t}\n\t\telse if ( straight( hand ) )\n\t\t{\n\t\t\tcout << \"straight\";\n\t\t}\n\t\telse if ( threecard( hand ) )\n\t\t{\n\t\t\tcout << \"three card\";\n\t\t}\n\t\telse if ( twopair( hand ) )\n\t\t{\n\t\t\tcout << \"two pair\";\n\t\t}\n\t\telse if ( onepair( hand ) )\n\t\t{\n\t\t\tcout << \"one pair\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"null\";\n\t\t}\n\t\t\n\t\tcout << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nint main()\n{\n\tvector<int> H(5);\n\t\twhile(~scanf(\"%d,%d,%d,%d,%d\", &H[0] ,&H[1] ,&H[2] ,&H[3] ,&H[4]))\n\t\t{\n\t\t\tvector<int> L(32, 0);\n\t\t\tint kind = 0;\n\t\t\tfor(int i = 0; i < 5; i++)\n\t\t\t{\n\t\t\t\tif(L[H[i]-1] == 0)\n\t\t\t\t{\n\t\t\t\t\tkind++;\n\t\t\t\t}\n\t\t\t\tL[H[i]-1]++;\n\t\t\t}\n\n\t\t\tif(kind == 2)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 4)\n\t\t\t\t{\n\t\t\t\t\tcout << \"four pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcout << \"error 1\" << endl;\n\t\t\t}\n\t\t\telse if(kind == 5)\n\t\t\t{\n\t\t\t\tbool straight = false;\n\t\t\t\tfor(int i = 0; i <= 10; i++)\n\t\t\t\t{\n\t\t\t\t\tL[13] = L[0];\n\t\t\t\t\tif(L[i] && L[i+1] && L[i+2] && L[i+3] && L[i+4])\n\t\t\t\t\t{\n\t\t\t\t\t\tstraight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(straight)\n\t\t\t\t{\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 3)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 2)\n\t\t\t\t{\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 4)\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<array>\nint main()\n{\n\twhile (true)\n\t{\n\t\tint a, b, c, d, e;\n\t\tchar foo;\n\t\tstd::cin >> a >> foo >> b >> foo >> c >> foo >> d >> foo >> e;\n\t\tif (std::cin.eof())\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tstd::array<int, 5>num = { a,b,c,d,e };\n\t\tstd::sort(num.begin(), num.end());\n\t\tif (num[0] == num[3] || num[1] == num[4])\n\t\t{\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\t}\n\t\telse if (num[0] == num[1] && num[2] == num[4] || num[0] == num[2] && num[3] == num[4])\n\t\t{\n\t\t\tstd::cout << \"full house\" << std::endl;\n\t\t}\n\t\telse if (num[2] == num[1] + 1 && num[3] == num[1] + 2 && num[4] == num[1] + 3 && (num[0] == num[1] - 1 || num[0] == 1 && num[1] == 10))\n\t\t{\n\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t}\n\t\telse if (num[0]==num[2]||num[1]==num[3]||num[2]==num[4])\n\t\t{\n\t\t\tstd::cout << \"three card\" << std::endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint pair = 0;\n\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t{\n\t\t\t\tif (num[i] == num[i + 1])\n\t\t\t\t{\n\t\t\t\t\tpair++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch (pair)\n\t\t\t{\n\t\t\tcase 2:\n\t\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tstd::cout << \"null\" << std::endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\nint main(){\n\tint c[5];\n\twhile( scanf(\" %d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF ){\n\t\tsort(c, c+5);\n\t\t\n\t\t//four card\n\t\tbool flag=true;\n\t\tfor(int i=0; i<=2; ++i){\n\t\t\tif(c[i] != c[i+1]) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tflag=true;\n\t\tfor(int i=1; i<=3; ++i){\n\t\t\tif(c[i] != c[i+1]) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//full house\n\t\tflag=false;\n\t\tif(c[0]==c[1] && c[2]==c[3] && c[3]==c[4]) flag=true;\n\t\tif(c[0]==c[1] && c[1]==c[2] && c[3]==c[4]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\n\t\t//straight\n\t\tfor(int i=1; i<=9; ++i){\n\t\t\tflag=true;\t\n\t\t\tfor(int j=0; j<=4; ++j){\n\t\t\t\tif(c[j]!=i+j) flag=false;\n\t\t\t}\n\t\t\tif(flag) break;\n\t\t}\n\t\tif(c[0]==1){\n\t\t\tflag=true;\n\t\t\tfor(int i=1; i<=4; ++i){\n\t\t\t\tif(c[i]!=9+i) flag=false;\t\n\t\t\t}\t\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//three card\n\t\tflag=false;\n\t\tfor(int i=0; i<=2; ++i)\n\t\t\tif(c[i]==c[i+1] && c[i+1]==c[i+2]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\t\t\n\t\t//two pair\n\t\tflag=false;\n\t\tif(c[0]==c[1] && c[2]==c[3]) flag=true;\n\t\tif(c[0]==c[1] && c[3]==c[4]) flag=true;\n\t\tif(c[1]==c[2] && c[3]==c[4]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\n\t\t//one pair\n\t\tflag=false;\n\t\tfor(int i=0; i<=3; ++i)\n\t\t\tif(c[i]==c[i+1]) flag=true;\t\t\n\t\n\t\tif(flag){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\n\t\t//null\n\t\tprintf(\"null\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> P;\n\nconst string yaku[] = { \"four card\", \"full house\", \"straight\", \"three card\", \"two pair\", \"one pair\", \"null\" };\n\nint main()\n{\n//\tcut here before submit \n//\tfreopen (\"testcase.PH\", \"r\", stdin );\n\tstring str = \"\";\n\twhile (getline (cin, str ) ){\n\t\tif (str.empty() ){\n\t\t\tbreak;\n\t\t} // end if\n\t\twhile (str.find(',') != string::npos ){\n\t\t\tstr = str.replace(str.find(','), 1, \" \");\n\t\t} // end while\n\t\tstringstream ss (str );\n\t\tvector<int> card (5, 0 );\n\t\tmap<int,int> cnt; cnt.clear();\n\t\trep (i, 5 ){\n\t\t\tint c;\n\t\t\tss >> c;\n\t\t\tcard[i] = c-1;\n\t\t\tcnt[card[i]]++;\t\t\t\n\t\t} // end rep\n\t\tstring res = yaku[6];\n\t\tmap<int,int>::iterator it;\n\t\tvector<int> num (5, 0 );\n\t\tint i = 0;\n\t\tfor (it = cnt.begin(); it != cnt.end(); it++ ){\n\t\t\tnum[i++] = (*it).second;\n\t\t} // end for\n\t\tsort (ALL (num ), greater<int>() );\n\t\tif (cnt.size() == 2 ){\n\t\t\tif (num[0] == 4 ){\n\t\t\t\tres = yaku[0];\t// four card\n\t\t\t}else{\n\t\t\t\tres = yaku[1];\t// full house\n\t\t\t} // end if\n\t\t}else\n\t\tif (cnt.size() == 3 ){\n\t\t\tif (num[0] == 3 ){\n\t\t\t\tres = yaku[3];\t// three card\n\t\t\t}else\n\t\t\tif (num[0] == 2 ){\n\t\t\t\tres = yaku[4];\t// two pair\n\t\t\t} // end if\n\t\t}else\n\t\tif (cnt.size() == 4 ){\n\t\t\tres = yaku[5];\t\t// one pair\n\t\t}else{\n\t\t\tsort (ALL (card ), greater<int>() );\n\t\t\tbool ok = true;\t\t\t\t\n\t\t\tif (card[0]+1 != 13 ){\n\t\t\t\trep (i, 4 ){\n\t\t\t\t\tif (card[i] == card[i+1] + 1 ) continue;\n\t\t\t\t\tok = false; break;\n\t\t\t\t} // end rep\n\t\t\t}else{\n\t\t\t\tif (card[4] + 1 == 1 ) card[4] = 13;\n\t\t\t\tsort (ALL (card ), greater<int>() );\n\t\t\t\trep (i, 4 ){\n\t\t\t\t\tif (card[i] == card[i+1] + 1 ) continue;\n\t\t\t\t\tok = false; break;\n\t\t\t\t} // end rep\n\t\t\t} // end if\n\t\t\tif (ok ){\n\t\t\t\tres = yaku[2]; \t// straight\n\t\t\t} // end if\n\t\t} // end if\n\t\tcout << res << endl; \n\t} // end loop\n\n//\tprintf (\"%d\\n\", res );\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\n\nint main(){\n\tint a[5];\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",a,a+1,a+2,a+3,a+4)){\n\t\tstd::sort(a,a+5);\n\t\tif((a[0]==a[1])&&(a[2]==a[3])&&(a[2]==a[1]))printf(\"four card\\n\");\n\t\telse if((a[1]==a[2])&&(a[3]==a[4])&&(a[3]==a[2]))printf(\"four card\\n\");\n\t\telse if((a[0]==a[1])&&(a[1]==a[2])&&(a[3]==a[4]))printf(\"full house\\n\");\n\t\telse if((a[0]==a[1])&&(a[2]==a[3])&&(a[3]==a[4]))printf(\"full house\\n\");\n\t\telse if((a[0]==1)&&(a[1]==10)&&(a[2]==11)&&(a[3]==12)&&(a[4]==13))printf(\"straight\\n\");\n\t\telse if((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4]))printf(\"straight\\n\");\n\t\telse if(\n\t\t\t((a[0]==a[1])&&(a[1]==a[2]))||\n\t\t\t((a[1]==a[2])&&(a[2]==a[3]))||\n\t\t\t((a[2]==a[3])&&(a[3]==a[4])))printf(\"three card\\n\");\n\t\telse if(\n\t\t\t((a[0]==a[1])&&((a[2]==a[3])||(a[3]==a[4])))||\n\t\t\t((a[1]==a[2])&&(a[3]==a[4])))printf(\"two pair\\n\");\n\t\telse if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#include<string>\n#include<sstream>\n#include<cmath>\n#include<numeric>\n#include<map>\n#include<stack>\n#include<queue>\n#include<list>\nusing namespace std;\nint inf = 1000000000;\n\nint main(void) {\n  vector<int> t(5);\n  vector<string> s = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n  while( scanf(\"%d,%d,%d,%d,%d\", &t[0], &t[1], &t[2], &t[3], &t[4]) != EOF ){\n    sort(t.begin(), t.end());\n    vector<int> c(14, 0);\n    for(int i=0; i<5; i++) c[ t[i] ]++;\n    int two = 0, thr = 0, four = 0;\n    for(int i=0; i<14; i++){\n      if( c[i] == 2 ) two++;\n      if( c[i] == 3 ) thr++;\n      if( c[i] == 4 ) four++;\n    }\n\n    int ans = 0;\n    if( four == 1 ) ans = 6;\n    else if( thr == 1 && two == 1 ) ans = 5;\n    else if( t[0] + 1 == t[1] && t[1] + 1 == t[2] && t[2] + 1 == t[3] && t[3] + 1 == t[4] ) ans = 4;\n    else if( t[0] == 1 && t[1] == 10 && t[2] == 11 && t[3] == 12 && t[4] == 13 ) ans = 4;\n    else if( thr == 1 ) ans = 3;\n    else if( two == 2 ) ans = 2;\n    else if( two == 1 ) ans = 1;\n\n    cout << s[ans] << endl;\n  }\n\n  return 0;\n}\n\n// EOF"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nstruct cards{\n\tint num, card;\n};\n\nint main()\n{\n\tvector<int> card(5);\n\tvector<int> num;\n\t// num, card\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF)\n\t{\n\t\tsort(card.begin(), card.end());\n\t\tnum.clear();\n\n\t\tint cnt = 1;\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == 1) card[i] = 14;\n\t\t}\n\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == card[i+1])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnum.push_back(cnt);\n\n\t\t\t\tcnt = 1;\n\t\t\t}\n\t\t}\n\n\t\tsort(card.begin(), card.end());\n\t\tint st = card[0];\n\t\tbool straight = true;\n\t\tfor(int i = 1; i < 5; i++)\n\t\t{\n\t\t\tif(++st != card[i])\n\t\t\t{\n\n\t\t\t\tstraight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(straight)\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(num.size() == 2)\n\t\t{\n\t\t\tif( num[0] == 4 || num[1] == 4)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\tif( num[0] == 3 && num[1] == 2 || num[0] == 2 && num[1] == 3)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 3)\n\t\t{\n\t\t\tif( num[0] == 3 || num[1] == 3 || num[2] == 3)\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\n\t\t\telse if( num[0] == 2 && num[1] == 2 || num[0] == 2 && num[2] == 2 || num[1] == 2 && num[2] == 2)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse if(num.size() == 5)\n\t\t{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n \n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nint main(){\n\n\tint card[4];\n\tchar c;\n\n\twhile(cin >> card[0] ){\n\t\tfor(int i=1;i<5;i++){\n\t\t\tcin >> c >> card[i];\n\t\t}\n\t\tsort(card, card+5);\n\n\t\tint two = 0;\n\t\tbool three = 0;\n\t\tbool four = 0;\n\n\t\tfor(int i=0;i<5;i++){\n\t\t\tint count = 1;\n\t\t\tfor(int j=i+1;j<5;j++){\n\t\t\t\tif(card[i]==card[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count==2){\n\t\t\t\ttwo+=1;\n\t\t\t\ti+=1;\n\t\t\t}\n\t\t\telse if(count==3){\n\t\t\t\tthree=1;\n\t\t\t\ti+=2;\n\t\t\t}\n\t\t\telse if(count==4){\n\t\t\t\tfour=1;\n\t\t\t\ti+=3;\n\t\t\t}\n\t\t}\n\n\t\tif(two && three){\n\t\t\tcout << \"full house\" << endl;\n\t\t}else if(two==2){\n\t\t\tcout << \"two pair\" <<endl;\n\t\t}else if(two==1){\n\t\t\tcout << \"one pair\" <<endl;\n\t\t}else if(three){\n\t\t\tcout << \"three card\" <<endl;\n\t\t}else if(four){\n\t\t\tcout << \"four card\" <<endl;\n\t\t}else{\n\t\t\tbool straight_flag = 1;\n\t\t\tbool ace_flag = 1;\n\t\t\tbool has_13 = 0;\n\t\t\tif(card[4]==13){\n\t\t\t\thas_13=1;\n\t\t\t}\n\n\t\t\tfor(int i=3;i>=0;i--){\n\t\t\t\tif(ace_flag && card[i+1]-1==card[i]){\n\t\t\t\t\t//cout<<1;\n\t\t\t\t}else if(ace_flag && has_13 && card[i]==i+1){\n\t\t\t\t\t//cout<<0;\n\t\t\t\t\tace_flag=0;\n\t\t\t\t}else{\n\t\t\t\t\tstraight_flag=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(straight_flag){\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}else{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <array>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <sstream>\n\nusing namespace std;\n\nvector< std::string > split( const std::string &str, char delm )\n{\n\tstd::vector< std::string > v;\n\tstd::stringstream ss( str );\n\tstd::string buffer;\n\twhile ( std::getline( ss, buffer, delm ) )\n\t{\n\t\tif ( buffer == \"A\" )\n\t\t\tbuffer = \"1\";\n\t\telse if ( buffer == \"J\" )\n\t\t\tbuffer = \"11\";\n\t\telse if ( buffer == \"Q\" )\n\t\t\tbuffer = \"12\";\n\t\telse if ( buffer == \"K\" )\n\t\t\tbuffer = \"13\";\n\n\t\tv.push_back( buffer );\n\t}\n\n\treturn v;\n}\n\nstd::string maxthree( std::unordered_map< std::string, int > ump )\n{\n\tif ( ump.size() == 2 )\n\t{\n\t\treturn \"full house\";\n\t}\n\telse \n\t{\n\t\treturn \"three card\";\n\t}\n}\n\nstd::string maxone( std::unordered_map< std::string, int > ump )\n{\n\tarray< int, 5 > ar;\n\tint i = 0, tmp = 0;\n\tauto itr = ump.begin();\n\tconst char * ch;\n\n\tfor ( ; itr != ump.end() ; itr++ )\n\t{\n\t\tch = itr->first.c_str();\n\t\tar[i] = atoi( ch );\n\t\ti++;\n\t}\n\n\tfor ( int j = 0 ; j < 5 ; j++ )\n\t{\n\t\tfor ( int k = j+1 ; k < 5 ; k++ )\n\t\t{\n\t\t\tif ( ar[j] > ar[k] )\n\t\t\t{\n\t\t\t\ttmp = ar[j];\n\t\t\t\tar[j] = ar[k];\n\t\t\t\tar[k] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ar[0]+1 == ar[1] && ar[0]+2 == ar[2] && ar[0]+3 == ar[3] && ar[0]+4 == ar[4] )\n\t{\n\t\treturn \"straight\";\n\t}\n\telse \n\t{\n\t\tif ( ar[0] == 1 && ar[1] == 10 && ar[2] == 11 && ar[3] == 12 && ar[4] == 13 )\n\t\t\treturn \"straight\";\n\t\telse \n\t\t\treturn \"null\";\n\t}\n}\n\nstd::string maxtwo( std::unordered_map< std::string, int > ump )\n{\n\tif ( ump.size() == 4 )\n\t{\n\t\treturn \"one pair\";\n\t}\n\telse \n\t{\n\t\treturn \"two pair\";\n\t}\n}\n\nint main()\n{\n\tint max = 0;\n\tvector< std::string > str_v;\n\tunordered_map< std::string, int > ump;\n\tstring str;\n\n\twhile ( cin >> str )\n\t{\n\t\tstr_v = split( str, ',' );\t\n\t\tfor ( int i = 0 ; i < 5 ; i++ )\n\t\t{\n\t\t\tump[str_v[i]]++;\n\t\t}\n\n\t\tauto itr = ump.begin();\n\t\tfor ( ; itr != ump.end() ; itr++ )\n\t\t{\n\t\t\tif ( itr->second > max )\n\t\t\t{\n\t\t\t\tmax = itr->second;\n\t\t\t}\n\t\t}\n\n\t\tif ( max == 1 )\n\t\t\tcout << maxone( ump ) << endl;\n\t\telse if ( max == 2 )\n\t\t\tcout << maxtwo( ump ) << endl;\n\t\telse if ( max == 3 )\n\t\t\tcout << maxthree( ump ) << endl;\n\t\telse if ( max == 4 )\n\t\t\tcout << \"four card\" << endl;\n\n\t\tmax = 0;\n\t\tump.clear();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <fstream>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nint main()\n{\n\twhile(true)\n\t{\n\t\tint v[5];\n\t\tchar k;\n\t\t\n\t\tif(cin.eof()) break;\n\t\tcin >> v[0];\n\t\trep(i, 4)\n\t\t\tcin >> k >> v[i+1];\n\n\n\t\tvint n(13, 0);\n\n\t\trep(i, 5)\n\t\t\tn[v[i]-1]++;\n\n\t\trep(i, 13)\tif(4 <= n[i])\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) rep(j, 13) if(n[i] == 2 && n[j] == 3)\n\t\t{\n\t\t\tcout << \"full house\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 10) if(n[i % 13] == 1 && n[(i+1) % 13] == 1 &&  n[(i+2) % 13] == 1 &&  n[(i+3) % 13] == 1 &&  n[(i+4) % 13] == 1)\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(3 <= n[i])\n\t\t{\n\t\t\tcout << \"three card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) REP(j, 1, 13) if(n[i] == 2 && n[j] == 2)\n\t\t{\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(n[i] == 2)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\tcout << \"null\" << endl;\n\nng:\n\t\t;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n\nusing namespace std;\n\nvoid bubble_ask(int x[]);\n\nint card[5];\nint main(void){\n\tint i,cnt=0,st=0,pair=0;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])!=EOF){\n\t\t//昇順にソート\n\t\tbubble_ask(card);\n\t\t\n\t\tfor(i=0;i<4;i++){\n\t\t\tif(card[i]+1==card[i+1])\tst++;\n\t\t\tif(card[i]==1 && card[4]==13 && card[1]!=2)\tst++;\n\t\t\tif(i!=3){\n\t\t\t\tif(card[i]==card[i+1] && card[i+1]==card[i+2] && cnt!=4)\tcnt=3;\n\t\t\t}\n\t\t\tif(i!=3 && i!=2){\n\t\t\t\tif(card[i]==card[i+1] && card[i+1]==card[i+2] && card[i+2]==card[i+3])\tcnt=4;\n\t\t\t}\n\t\t\tif(card[i]==card[i+1]) pair++;\n\t\t}\n\n\t\t//four card\n\t\tif(cnt==4)\tprintf(\"four card\\n\");\n\t\t//full house\n\t\telse if(cnt==3 && pair==3)\tprintf(\"full house\\n\");\n\t\t//straight\n\t\telse if(st==4)\tprintf(\"straight\\n\");\n\t\t//three card\n\t\telse if(cnt==3)\tprintf(\"three card\\n\");\n\t\t//two pair\n\t\telse if(pair==2)\tprintf(\"two pair\\n\");\n\t\t//one pair\n\t\telse if(pair==1)\tprintf(\"one pair\\n\");\n\t\t//null\n\t\telse\tprintf(\"null\\n\");\n\n\t\tcnt=st=pair=0;\n\t}\n\n\treturn 0;\n}\n\nvoid bubble_ask(int card[]){\n\tint i,j,data;\n\tfor(i=0;i<4;i++){\n\t\tfor(j=i+1;j<5;j++){\n\t\t\tif(card[i] > card[j]){\n\t\t\t\tdata=card[i];\n\t\t\t\tcard[i]=card[j];\n\t\t\t\tcard[j]=data;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void)\n{\n\tchar c[5];\n\tint i, j;\n\tint sum[14];\n\tint max, max2;\n\t\n\twhile (scanf(\"%d, %d, %d, %d, %d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\t\n\t\tfor (i = 0; i < 14; i++){\n\t\t\tsum[i] = 0;\n\t\t}\n\t\t\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tsum[c[i]-1]++;\n\t\t}\n\t\t\n\t\tmax = 0;\n\t\tmax = 0;\n\t\t\n\t\tfor (i = 0; i < 14; i++){\n\t\t\tif (max < sum[i]){\n\t\t\t\tmax = sum[i];\n\t\t\t}\n\t\t\telse if (max2 < sum[i]){\n\t\t\t\tmax2 = sum[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\tint ch;\n\t\t\n\t\tfor (i = 0; i < 10; i++){\n\t\t\t\n\t\t\tch = 0;\n\t\t\t\n\t\t\tfor (j = 0; j < 5; j++){\n\t\t\t\t\n\t\t\t\tif (sum[(i + j) % 13] == 1){\n\t\t\t\t\tch++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ch == 5){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if (max == 3 && max2 == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\n\t\t\n\t\telse if (ch == 5){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\t\n\t\telse if (max == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (max == 2 && max2 == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (max == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void){\n\tint card[14] , buf[5] = {0} , i , flag , check_3 , cnt;\n\twhile(scanf(\"%d,%d,%d,%d,%d\" , &buf[0] , &buf[1] , &buf[2] , &buf[3] , &buf[4])!=EOF){\n\t\tfor(i=1;i<14;i++){\n\t\t\tcard[i] = 0;\n\t\t}\n\t\tfor(i=0;i<5;i++){\n\t\t\tcard[buf[i]]++;\n\t\t}\n\t\tflag = 0;\n\t\tcheck_3 = 0;\n\t\tcnt = 0;\n\n\t\tfor(i=1;i<=13;i++){\n\t\t\tif(card[i] == 4){\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t\tif(card[i] == 3){\n\t\t\t\tcheck_3 = 1;\n\t\t\t}\n\t\t}\n\t\tif(flag) continue;\n\n\t\tif(check_3){\n\t\t\tfor(i=1;i<=13;i++){\n\t\t\t\tif(card[i] == 2){\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\tflag = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag) continue;\n\n\t\tfor(i=1;i<=9;i++){\n\t\t\tif(card[i]==1&&card[i+1]==1&&card[i+2]==1&&card[i+3]==1&&card[i+4]==1){\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\tif(flag) continue;\n\t\tif(card[10]==1&&card[11]==1&&card[12]==1&&card[13]==1&&card[1]==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(check_3){\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor(i=1;i<=13;i++){\n\t\t\tif(card[i] == 2) cnt++;\n\t\t}\n\t\tif(cnt == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(cnt == 1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n \nint main(){\n    int A[5];\n    while( cin >> A[0] >> A[1] >> A[2] >> A[3] >> A[4] ) {\n        sort(A,A+5);\n        if( (A[0] == A[1]) && (A[2] == A[3]) && (A[2] == A[1]) )\n\t\tcout << \"four card\\n\";\n\t\t\n        else if( (A[1] ==A[2]) && (A[3] == A[4]) && (A[3] == A[2]) )\n\t\tcout << \"four card\\n\";\n\t\t\n        else if( (A[0] == A[1]) && (A[1] == A[2]) && (A[3] == A[4]) )\n\t\tcout << \"full house\\n\";\n\t\t\n        else if( (A[0] == A[1]) && (A[2] == A[3]) && (A[3] == A[4]) )\n\t\tcout << \"full house\\n\";\n\t\t\n        else if( (A[0] == 1) && (A[1] == 10) &&(A[2] == 11)\n\t\t\t\t&& (A[3] == 12) && (A[4] == 13) )\n\t\tcout << \"straight\\n\";\n\t\t\n        else if((A[0] + 1 == A[1]) && (A[1] +1 == A[2]) && (A[2] + 1 == A[3])\n\t\t\t\t&& (A[3] + 1 == A[4]) )\n\t\tcout << \"straight\\n\";\n\t\t\n        else if\n           ( ( (A[0] == A[1]) && (A[1] == A[2])) ||\n             ( (A[1] == A[2]) && (A[2] == A[3])) ||\n             ( (A[2] == A[3]) && (A[3] == A[4])) )\n\t\t\tcout << \"three card\\n\";\n\t\t\t\n        else if\n            ( ( (A[0] == A[1]) && ((A[2] == A[3]) || (A[3] == A[4]))) ||\n            ( ( A[1] == A[2]) && (A[3] == A[4])) )\n\t\t\tcout << \"two pair\\n\";\n\t\t\t\n        else if\n\t\t((A[0] == A[1]) || (A[1] == A[2]) || (A[2] == A[3]) || (A[3] == A[4]))\n\t\tcout << \"one pair\\n\";\n\t\t\n        else \n\t\tcout << \"null\\n\";\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void){\n\n  int card[5];\n  char ten;\n\n  while( cin >> card[0] ){\n    cin >> ten >> card[1] >> ten >> card[2] >> ten >> card[3] >> ten >> card[4];\n\n    sort( card , card + 5 );\n\n    if( card[4] == card[1] || card[3] == card[0] ){// four card\n      cout << \"four card\" << endl;\n      goto end;\n    }\n\n    if( (card[0] == card[2] && card[3] == card[4]) || (card[0] == card[1] && card[2] == card[4] ) ){\n      cout << \"full house\" << endl;\n      goto end;\n    }\n\n    int cnt;\n    int r;\n    cnt = 0;\n    r = card[0];\n    for( int i = 1 ; i < 5 ; i++ ){// straight\n      if( r + 1 == card[i] ){\n\tcnt++;\n\tr = card[i];\n      }\n      else r = card[i];\n    }\n    if( cnt == 4 ){\n      cout << \"straight\" << endl;\n      goto end;\n    }\n    else if( card[0] == 1  && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13 ){\n      cout << \"straight\" << endl;\n      goto end;\n    }\n\n    if( card[0] == card[2] || card[1] == card[3] || card[2] == card[4] ){// three card\n      cout << \"three card\" << endl;\n      goto end;\n    }\n\n    if( card[0] == card[1] && card[2] == card[3] ){// two pair\n      cout << \"two pair\" << endl;\n      goto end;\n    }\n    else if( card[0] == card[1] && card[3] == card[4] ){\n      cout << \"two pair\" << endl;\n      goto end;\n    }\n    else if( card[1] == card[2] && card[3] == card[4] ){\n      cout << \"two pair\" << endl;\n      goto end;\n    }\n\n    for( int i = 0 ; i < 4 ; i++ ){// two card\n      if( card[i] == card[i+1] ){\n\tcout << \"one pair\" << endl;\n\tgoto end;\n      }\n     }\n\n      cout << \"null\" << endl;\n\n  end:;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nchar roll[8][11] = {\"null\",\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\n\nint main(){\n\tint ans;\n\tint emp;\n\tint a[5];\n\tint hand[15];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n\t\tfor(int i = 0; i < 15; i++){\n\t\t\thand[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < 5; i++){\n\t\t\thand[a[i]]++;\n\t\t}\n\t\temp = 0;\n\t\tfor(int i = 0; i < 14; i++){\n\t\t\tif(hand[i]){\n\t\t\t\temp++;\n\t\t\t}\n\t\t}\n\t\thand[14] = hand[1];\n\t\tans = 1;\n\t\tif(emp == 4){\n\t\t\tans = 2;\n\t\t}\n\t\tif(emp == 3){\n\t\t\tans = 3;\n\t\t}\n\t\tfor(int i = 1; i < 14; i++){\n\t\t\tif(hand[i] == 3){\n\t\t\t\tans = 4;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1; i < 11; i++){\n\t\t\tif(hand[i] == 1 && hand[i + 1] == 1 && hand[i + 2] == 1 && hand[i + 3] == 1 && hand[i + 4] == 1){\n\t\t\t\tans = 5;\n\t\t\t}\n\t\t}\n\t\tif(emp == 2){\n\t\t\tans = 6;\n\t\t}\n\t\tfor(int i = 1; i < 14; i++){\n\t\t\tif(hand[i] >= 4){\n\t\t\t\tans = 7;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",roll[ans]);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<cstdio>\n#include<sstream>\n#include<algorithm>\n#include<cmath>\n#include<map>\n#include<functional>\n#include<queue>\n#include<stack>\n#include<set>\nusing namespace std;\nint main(){\n\tint a,b,c,d,e;\n\tchar x;\n\twhile(cin>>a>>x>>b>>x>>c>>x>>d>>x>>e){\n\t\tstring ans=\"null\";\n\tint ta[14]={0};\n\tta[a]++,ta[b]++,ta[c]++,ta[d]++,ta[e]++;\n\tint two=0,three=0,four=0;\n\tfor(int i=1;i<=13;i++){if(ta[i]==2)two++;if(ta[i]==3)three++;if(ta[i]==4)four++;}\n\t\tif(two==1)ans=\"one pair\";\n\t\tif(two==2)ans=\"double pair\";\n\t\tif(three==1)ans=\"three card\";\n\t\tfor(int i=1;i<=13-5;i++)if(ta[i]==1&&ta[i+1]==1&&ta[i+2]==1&&ta[i+3]==1&&ta[i+4]==1)ans=\"straight\";\n\t\t\n\t\tif(ta[10]==1&&ta[11]==1&&ta[12]==1&&ta[13]==1&&ta[1]==1)ans=\"straight\";\n\t\tif(two==1&&three==1)ans=\"full house\";\n\t\tif(four==1)ans=\"four card\";\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<sstream>\nusing namespace std;\n\nvector<string> split(const string &str, char delim){\n  istringstream iss(str); string tmp; vector<string> res;\n  while(getline(iss, tmp, delim)) res.push_back(tmp);\n  return res;\n}\n\n\n\nbool forcard(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans >= 4) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\n\nbool fullhouse(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(x == card[j]) ansx++;\n\t\t\t\t}\n\t\t\t\tif(k!=j){\n\t\t\t\t\tif(y == card[j]) ansy++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ansx == 3 && ansy ==2) return true;\n\t\t\tif(ansx == 2 && ansy ==3) return true;\n\t\t}\n\t\treturn false;\n}\n\nbool straight(vector<int> card){\n\tint ans = 1;\n\tif(card[0] != 1){\n\t\tfor(int i=0;i+1<5;i++){\n\t\t\tif(card[0]+i+1 == card[i+1]) ans++;\n\t\t}\n\t\tif(ans==5) return true;\n\t} else {\n\t\tfor(int i=0;i+1<4;i++){\n\t\t\tif(card[1]+i+1 == card[i+2]) ans++;\n\t\t}\n\t\tif(card[4] == 13 && ans == 4) return true;\n\t}\n\treturn false;\n}\n\nbool threecard(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans == 3) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\n\nbool twopair(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(x == card[j]) ansx++;\n\t\t\t\t}\n\t\t\t\tif(k!=j){\n\t\t\t\t\tif(y == card[j]) ansy++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ansx == 2 && ansy ==2) return true;\n\t\t}\n\t\treturn false;\n}\n\nbool onepair(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans == 2) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\nstring poker(vector<int> card){\n\tif(forcard(card)) return \"four card\";\n\tif(fullhouse(card)) return \"full house\";\n\tif(straight(card)) return \"straight\";\n\tif(threecard(card)) return \"three card\";\n\tif(twopair(card)) return \"two pair\";\n\tif(onepair(card)) return \"one pair\";\n\treturn \"null\";\n}\n\n\nint main(){\n\tstring str; vector<string> st; vector<int> card;\n\twhile(cin >> str){\n\t\tst = split(str,',');\n\t\tfor(int i=0;i<5;i++){\n\t\t\tstringstream ss; int a;\n\t\t\tss << st[i];\n\t\t\tss >> a;\n\t\t\tcard.push_back(a);\n\t\t}\n\t\tsort(card.begin(),card.end());\n\t\tcout << poker(card) << endl;\n\n\t\tcard.clear();\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdio>\n#include <string>\n\n#define rep(x,to) for(int x=0;x<to;x++)\n#define rep2(x,from,to) for(int x=from;x<to;x++)\n\nusing namespace std;\n\n\nint main(void){\n\nint cd[5]={0},cnt=0;\n\nchar k;\n\twhile(!cin.eof()){\n\t\tcin >> cd[0] >> k >>cd[1] >>k >>cd[2] >>k >>cd[3] >>k >>cd[4];\n\t\tif(cin.eof()) break;\n\t\t\n\t\tsort(cd,cd+5);\n\t\tint mxp=0,cn1,cn2=0;\n\t\trep(i,5){\n\t\t\tcn1=0;\n\t\t\trep2(j,i+1,5) if(cd[i]==cd[j]) cn1++;\n\t\t\tcn2 += cn1; \n\t\t\tmxp = max(mxp,cn1);\n\t\t}\n//\t\tprintf(\"%d,%d\\n\",mxp,cn2);\n\t\tstring yak = \"straight\";\n\t\trep(i,4) if(cd[i] +1 != cd[i+1]) yak=\"null\";\n\t\tif(cd[0]==1 && cd[1]==10 && cd[2]==11 && cd[3]==12 && cd[4]==13)\n\t\t\t\t\tyak = \"straight\";\n\t\tif(mxp==1 && cn2==1) yak =\"one pair\";\n\t\tif(mxp==1 && cn2==2) yak =\"two pair\";\n\t\tif(mxp==2 && cn2==3) yak =\"three card\";\n\t\tif(mxp==2 && cn2==4) yak =\"full house\";\n\t\tif(mxp==3) yak =\"four card\";\n\t\tcout << yak << endl;\n\t\tcnt++; if(cnt>50) break;\n\t}\t\n\t\n\treturn 0;\n\t\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <fstream>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nint main()\n{\n\twhile(true)\n\t{\n\t\tint v[5];\n\t\tchar k;\n\t\t\n\t\tif(cin.eof()) break;\n\t\tcin >> v[0];\n\t\trep(i, 4)\n\t\t\tcin >> k >> v[i+1];\n\n\n\t\tvint n(13, 0);\n\n\t\trep(i, 5)\n\t\t\tn[v[i]-1]++;\n\n\t\trep(i, 13)\tif(4 == n[i])\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) rep(j, 13) if(n[i] == 2 && n[j] == 3)\n\t\t{\n\t\t\tcout << \"full house\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 10) if(n[i % 13] == 1 && n[(i+1) % 13] == 1 &&  n[(i+2) % 13] == 1 &&  n[(i+3) % 13] == 1 &&  n[(i+4) % 13] == 1)\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(3 <= n[i])\n\t\t{\n\t\t\tcout << \"three card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) REP(j, i+1, 13) if(n[i] == 2 && n[j] == 2)\n\t\t{\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(n[i] == 2)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\tcout << \"null\" << endl;\n\nng:\n\t\t;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <sstream>\n#include <cstdlib>\n#include <cstring>\n#include <functional>\n#include <numeric>\n#include <cmath>\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n\tconst string yaku[] = {\n\t\t\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\",\n\t\t\"full house\",\t\"four card\" };\n//\tcut here before submit \n//\tfreopen(\"testcase.ph\", \"r\", stdin);\n\tstring str = \"\";\n\twhile (getline (cin, str ) ){\n\t\tstring res = \"\";\n\t\tif (str.empty() ){\n\t\t\tbreak;\n\t\t} // end if\n\t\twhile (str.find(',') != string::npos ){\n\t\t\tstr = str.replace(str.find(','), 1, \" \");\n\t\t} // end while\n\t\tstringstream ss(str);\n\t\tvector <int> card (5, 0);\n\t\tint i,j;\n\n\t\tfor (i = 0; i < 5; ++i){\n\t\t\tss >> card[i];\n\t\t} // end for\n\t\tsort (card.begin(), card.end() );\n\n//\t\tfor (i = 0; i < 5; ++i){\n//\t\t\tcout << card[i] << ' ';\n//\t\t} // end for\n//\t\tcout << endl;\n\n\t\tfor (j = 0; j < 4; ++j){\n\t\t\tif (card[j + 1] == card[j] + 1){\n\t\t\t\tcontinue;\n\t\t\t}else{\n\t\t\t\tbreak;\n\t\t\t} // end if\n\t\t} // end for\n\t\tif (j == 4){\n\t\t\tres = yaku[4];\t// \"straight\"\n//\t\t\tgoto result;\n\t\t} // end if\n\t\tif (card[0] == 1 && card[1] == 10){\n\t\t\tfor (j = 1; j < 4; ++j){\n\t\t\t\tif (card[j + 1] == card[j] + 1){\n\t\t\t\t\tcontinue;\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t} // end if\n\t\t\t} // end for\n\t\t\tif (j == 4){\n\t\t\t\tres = yaku[4];\t// \"straight\"\n//\t\t\t\tgoto result;\n\t\t\t} // end if\n\t\t} // end if\n\t\tif (res.empty() ){\n\n\t\t\tset <int> Card;\n\t\t\tfor (i = 0; i < 5; ++i){\n\t\t\t\tCard.insert (card[i]);\n\t\t\t} // end for\n//\t\t\tset <int>::iterator it = Card.begin();\n//\t\t\tfor (; it != Card.end(); ++it){\n//\t\t\t\tcout << *it << ' ';\n//\t\t\t} // end for\n//\t\t\tcout << endl;\n//\t\t\tcout << \"card kind: \" << Card.size() << endl;\n\n\t\t\tif (Card.size() == 5){\n\t\t\t\tres = yaku[0];\t\t// null\n\t\t\t}else if (Card.size() == 4){\n\t\t\t\tres = yaku[1];\t\t// one pair\n\t\t\t}else if (Card.size() == 3){\n//\t\t\t\tres = yaku[2];\n\t\t\t\tmap<int, int> D;\n\t\t\t\tfor (i = 0; i < 5; ++i){\n\t\t\t\t\t++D[card[i]];\n\t\t\t\t} // end for\n\t\t\t\tint maxnum = 0;\n\t\t\t\tmap<int, int>::iterator it = D.begin();\n\t\t\t\tfor (; it != D.end(); ++it){\n\t\t\t\t\tif (maxnum < (*it).second ){\n\t\t\t\t\t\tmaxnum = (*it).second;\n\t\t\t\t\t} // end if\n\t\t\t\t} // end for\n\t\t\t\tif (maxnum == 2){\n\t\t\t\t\tres = yaku[2];\t// two pair\n\t\t\t\t}else if (maxnum == 3){\n\t\t\t\t\tres = yaku[3];\t// three card \n\t\t\t\t} // end if\n\n\t\t\t}else{\t// if (Card.size() == 2)\n\t\t\t\tmap<int, int> D;\n\t\t\t\tfor (i = 0; i < 5; ++i){\n\t\t\t\t\t++D[card[i]];\n\t\t\t\t} // end for\n\t\t\t\tint maxnum = 0;\n\t\t\t\tmap<int, int>::iterator it = D.begin();\n\t\t\t\tfor (; it != D.end(); ++it){\n\t\t\t\t\tif (maxnum < (*it).second ){\n\t\t\t\t\t\tmaxnum = (*it).second;\n\t\t\t\t\t} // end if\n\t\t\t\t} // end for\n\t\t\t\tif (maxnum == 3){\n\t\t\t\t\tres = yaku[5];\t// full house\n\t\t\t\t}else if (maxnum == 4){\n\t\t\t\t\tres = yaku[6];\t// four card\n\t\t\t\t} // end if\n\t\t\t} // end if\n\t\t} // end if\n\n\t\tif (!res.empty() ){\n\t\t\tcout << res << endl;\n\t\t} // end if\n\t} // end while\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n \nint hantei(int[5]);\n \nint main(void) {\n    int cards[5];\n    int i,j,temp;\n    int yaku;\n    char yakuname[7][11]={\"null\",\"one pair\",\"two pair\",\"three card\",\n                        \"straight\",\"full house\",\"four card\"};\n    while(1) {\n        if(scanf(\"%d,%d,%d,%d,%d\",\n            &cards[0],&cards[1],&cards[2],&cards[3],&cards[4])==-1)break;\n        for(i=4;i>0;i--) {\n            for(j=0;j<i;j++) {\n                if(cards[j]>cards[j+1]) {\n                    temp=cards[j];\n                    cards[j]=cards[j+1];\n                    cards[j+1]=temp;\n                }\n            }\n        }\n\n        yaku=0;\n\n\t\tif(cards[1]==cards[2] && cards[2]==cards[3]) {\n            if(cards[0]==cards[1] || cards[3]==cards[4]){\n\t\t\t\t\tyaku=6;\n\t\t\t}\n            else{ \n\t\t\t\tyaku=3;\n\t\t\t}\n        } \n\t\telse if(cards[0]==cards[1] && cards[1]==cards[2]) \n\t\t{\n            if(cards[3]==cards[4]){\n\t\t\t\tyaku=5;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tyaku=3;\n\t\t\t}\n\n        } \n\t\telse if(cards[2]==cards[3] && cards[3]==cards[4]) {\n            if(cards[0]==cards[1]){\n\t\t\t\tyaku=5;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tyaku=3;\n\t\t\t}\n        } \n\t\telse if(hantei(cards)){\n\t\t\tyaku=4;\n\t\t}\n        else {\n            for(i=0;i<4;i++) {\n                if(cards[i]==cards[i+1]){\n\t\t\t\t\tyaku++;\n\t\t\t\t}\n            }\n        }\n        printf(\"%s\\n\",yakuname[yaku]);\n    }\n    return 0;\n}\n \nint hantei(int cards[5]) {\n    int i;\n    for(i=0;i<4;i++) {\n        if(cards[i]+1!=cards[i+1]){\n\t\t\tbreak;\n\t\t}\n    }\n    if(i<4) {\n        if(cards[0]==1 && cards[1]==10 && cards[2]==11 &&\n            cards[3]==12 && cards[4]==13){\n\t\t\t\treturn 1; \n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n    } \n\telse{ \n\t\treturn 1;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tstring ret=\"\";\n\tforeach(it,count){\n\t\tif(it->second>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(it->second==4){\n\t\t\tret = \"four card\";\n\t\t\tbreak;\n\t\t}else if(it->second==3){\n\t\t\tis3 = true;\n\t\t}else if(it->second==2){\n\t\t\tif(is3){\n\t\t\t\tret = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}else if(is2){\n\t\t\t\tret = \"two pair\";\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}else if(ret!=\"\"){\n\t\treturn ret;\n\t}else if(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nint main()\n{\n\tint cs[5], i, j, t, r, fl, fl2;\n\tchar c, *s[8] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\twhile (std::cin >> cs[0] >> c >> cs[1] >> c >> cs[2] >> c >> cs[3] >> c >> cs[4])\n\t{\n\t\tr = 1;\n\t\tstd::sort(cs, cs+5);\n\t\tint n[13] = {0};\n\t\tfor (i = 0; i < 5; i++)\n\t\t\tn[cs[i]-1]++;\n\t\tfor (i = t = 0; i < 13; i++)\n\t\t\tif (n[i] == 2)\tt++;\n\t\tif (t == 1)\tr = 2;\n\t\tif (t == 2)\tr = 3;\n\t\tfor (i = fl = 0; i < 13 && !fl; i++)\n\t\t\tif (n[i] == 3)\t\tr = 4, fl = 1;\n\t\t\telse if (n[i] == 4)\tr = 7, fl = 1;\n\t\tfor (i = fl = 0; i < 9 && !fl; i++)\n\t\t{\n\t\t\tfor (j = 0, fl2 = 1; j < 5 && fl2; j++)\n\t\t\t\tif (n[i+j] != 1)\tfl2 = 0;\n\t\t\tif (fl2)\tr = 5;\n\t\t}\n\t\tif (!fl)\n\t\t{\n\t\t\tfor (i = 9, fl = 0; i < 13 && !fl; i++)\n\t\t\t\tif (n[i] != 1)\tfl = 1;\n\t\t\tif (!fl && n[0])\tr = 5;\n\t\t}\n\t\tfor (i = fl = fl2 = 0; i < 13; i++)\n\t\t{\n\t\t\tif (n[i] == 2)\tfl = 1;\n\t\t\tif (n[i] == 3)\tfl2 = 1;\n\t\t}\n\t\tif (fl && fl2)\tr = 6;\n\t\tstd::cout << s[r-1] << std::endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6];\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;}\n}\n\nfor(int i=0;i<4;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c>=3||cc>=3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(c==1&&cc==2)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nint t[15],in[5],twoC,threeC,fourC,flg;\n\n\nstring solve(){\n\t\n\tfor(int i=0;i<15;i++)t[i]=0;\n\tfor(int i=0;i<5;i++){\n\t\tt[in[i]]++;\n\t\tif(in[i]==1)t[14]++;\n\t}\n\tflg=twoC=threeC=fourC=0;\n\tfor(int i=1;i<=13;i++){\n\t\tif(t[i]==4)fourC++;\n\t\tif(t[i]==3)threeC++;\n\t\tif(t[i]==2)twoC++;\n\t}\n\tif(fourC)return \"four card\";\n\tif(threeC&&twoC) return \"full house\";\n\n\t\n\tfor(int i=1;i<=14;i++){\n\t\tif(t[i]>0)flg++;\n\t\telse flg=0;\n\t\tif(flg==5)return \"straight\";\n\t}\n\t\n\tif(threeC)return \"three card\";\n\tif(twoC==2)return \"two pair\";\n\tif(twoC==1)return \"one pair\";\n\t\n\treturn \"null\";\n}\n\nint main(){\n\tchar ch;\n\twhile(cin>>in[0]>>ch>>in[1]>>ch>>in[2]>>ch>>in[3]>>ch>>in[4]){\n\t\n\t\tstring str=solve();\n\t\tcout<<str<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <math.h>\nusing namespace std;\n\nint main(){\n\t\n\twhile(1){\n\tint a=0,b,c,d,e,x;\n\tscanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e);\n\tfor(int i=0;i<5;i++){\n\t\tif(a>b){x=a;a=b;b=x;}\n\t\tif(b>c){x=b;b=c;c=x;}\n\t\tif(c>d){x=c;c=d;d=x;}\n\t\tif(d>e){x=d;d=e;e=x;}\n\t}\n\tif(a==0)return 0;\n\tif(b==c&&c==d&&(a==b||d==e))cout<<\"four card\"<<endl;\n\telse if(a==b&&d==e&&(b==c||c==d))cout<<\"full house\"<<endl;\n\telse if(a==b&&b==c||b==c&&c==d||c==d&&d==e)cout<<\"three card\"<<endl;\n\telse if(a==b&&(c==d||c==e)||b==c&&d==e)cout<<\"two pair\"<<endl;\n\telse if(a==b||b==c||c==d||d==e)cout<<\"one pair\"<<endl;\n\telse if((b==a+1||b==a+9)&&c==b+1&&d==c+1&&e==d+1)cout<<\"straight\"<<endl;\n\telse cout<<\"null\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "import sys\n\ndef is_onepair(x):\n    for i in range(4):\n        if x.count(x[i]) == 2:\n            return True\n\n    return False\n\ndef is_twopair(x):\n    count = 0\n    for e in x:\n        for e2 in x:\n            if e == e2:\n                count += 1\n            if count == 2:\n                return True\n\n    return False\n\ndef is_threecard(x):\n    for i in range(3):\n        if x.count(x[i]) == 3:\n            return True\n\n    return False\n\ndef is_straight(x):\n    x.sort()\n    if x[0] == 1 and x[1:] = [10, 11, 12, 13]:\n        return True\n    for i in range(4):\n        if x[i]+1 != x[i+1]:\n            return False\n    \n    return True\n\ndef is_fullhouse(x):\n    if is_threecard(x) and is_onepair(x):\n        return True\n\n    return False\n    \ndef is_fourcard(x):\n    for i in range(2):\n        if x.count(x[i]) == 4:\n            return True\n\n    return False\n\nfor line in sys.stdin.readlines():\n    hand = list(map(int, line.split(',')))\n    if is_fourcard(hand):\n        print(\"four card\")\n    elif is_fullhouse(hand):\n        print(\"full house\")\n    elif is_straight(hand):\n        print(\"straight\")\n    elif is_threecard(hand):\n        print(\"three card\")\n    elif is_twopair(hand):\n        print(\"two pair\")\n    elif is_onepair(hand):\n        print(\"one pair\")\n    else:\n        print(\"null\")"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<cstdio>\n#include<sstream>\n#include<algorithm>\n#include<cmath>\n#include<map>\n#include<functional>\n#include<queue>\n#include<stack>\n#include<set>\nusing namespace std;\nint main(){\n\tint a,b,c,d,e;\n\tchar x;\n\twhile(cin>>a>>x>>b>>x>>c>>x>>d>>x>>e){\n\t\tstring ans=\"null\";\n\tint ta[14]={0};\n\tta[a]++,ta[b]++,ta[c]++,ta[d]++,ta[e]++;\n\tint two=0,three=0,four=0;\n\tfor(int i=1;i<=13;i++){if(ta[i]==2)two++;if(ta[i]==3)three++;if(ta[i]==4)four++;}\n\t\tif(two==1)ans=\"one pair\";\n\t\tif(two==2)ans=\"double pair\";\n\t\tif(three==1)ans=\"three card\";\n\t\tfor(int i=1;i<=13-4;i++)if(ta[i]==1&&ta[i+1]==1&&ta[i+2]==1&&ta[i+3]==1&&ta[i+4]==1)ans=\"straight\";\n\t\t\n\t\tif(ta[10]==1&&ta[11]==1&&ta[12]==1&&ta[13]==1&&ta[1]==1)ans=\"straight\";\n\t\tif(two==1&&three==1)ans=\"full house\";\n\t\tif(four==1)ans=\"four card\";\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* AOJ 0038*/\n\n#include<iostream>\n#include<queue>\n\nusing namespace std;\n\nvoid Swap(int *a,int *b){\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid BabbleSort(int *data,int n){\n\n\tint i,j;\n\tfor(i=0;i<n-1;i++){\n\t\tfor(j=n-1;j>i;j--){\n\t\t\tif(data[j] <= data[j-1]){\n\t\t\t\tSwap(&data[j],&data[j-1]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n//onePair or threeCards or fourCards\nint isSameCard(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tBabbleSort(tmp,13);\n\n\tif(tmp[12]==3 && tmp[11] == 2){\n\t\treturn 6;//フルハウス\n\t}\n\telse if(tmp[12] == 4){\n\t\treturn 7;//フォーカード\n\t}\n\telse if(tmp[12] == 3){\n\t\treturn 4;\n\t}\n\telse if(tmp[12] == 2 && tmp[11] == 2){\n\t\treturn 3;\n\t}\n\telse if(tmp[12] == 2){\n\t\treturn 2;\n\t}\n\telse{\n\t\treturn 1;\n\t}\n}\n\nint isStraight(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tif(tmp[9] == 1 && tmp[10] == 1 && tmp[11] == 1 && tmp[12]==1 && tmp[0]==1){\n\t\treturn 5;\n\t}\n\telse{\n\t\tfor(int i=0;i<13-5;i++){\n\t\t\tif(tmp[i]==1&&tmp[i+1]==1&&tmp[i+2]==1&&tmp[i+3]==1&&tmp[i+4]==1){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\nint main(){\n\n\tint data[5];\n\tchar tmp;\n\n\tqueue<int> ans;\n\n\twhile(cin>>data[0]){\n\t\tcin>>tmp;\n\t\tcin>>data[1];\n\t\tcin>>tmp;\n\t\tcin>>data[2];\n\t\tcin>>tmp;\n\t\tcin>>data[3];\n\t\tcin>>tmp;\n\t\tcin>>data[4];\n\n\t\tBabbleSort(data,5);\n\n\t\tif(isSameCard(data)>=2){\n\t\t\tans.push(isSameCard(data));\n\t\t}\n\t\telse{\n\t\t\tans.push(isStraight(data));\n\t\t}\n\n\t}\n\n\tint size=ans.size();\n\n\tfor(int i=0;i<size;i++){\n\t\tswitch(ans.front()){\n\t\tcase 7:\n\t\t\tcout<<\"four cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tcout<<\"full house\"<<endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"three cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tcout<<\"null\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint straight(int card[])\n{\n\tfor(int i=1; i<9; i++){\n\t\tif(((card[0]==i)&&(card[1]==i+1)&&(card[2]==i+2)&&(card[3]==i+3)&&(card[4]==i+4)) || \n\t\t\t(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13))\n\t\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint main(){\n\tint c[5], n;\n\tchar k;\n\n\twhile(1){\n\t\tcin>>c[0]>>k>>c[1]>>k>>c[2]>>k>>c[3]>>k>>c[4];\n\t\tif(cin.eof())break;\n\t\tn=0;\n\t\tsort(c, c+5);\n\n\t\tfor(int i=0; i<4; i++){\n\t\t\tfor(int j=i+1; j<5; j++){\n\t\t\t\tif(c[i]==c[j])\n\t\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\tswitch(n){\n\t\t\tcase 1:\n\t\t\t\tcout<<\"one pair\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout<<\"two pair\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout<<\"three card\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout<<\"full house\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout<<\"four card\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tcout<<\"four card\\n\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(c))\n\t\t\t\t\tcout<<\"straight\\n\";\n\t\t\t\telse\n\t\t\t\t\tcout<<\"null\\n\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint nPair(int *card);\nbool isThreeCard(int *card);\nbool isStraight(int *card);\nbool isFullHouse(int *card);\nbool isFourCard(int *card);\n\nint main()\n{\n\tint card[5] = {0};\n\tchar c;\n\n\twhile (cin >> card[0])\n\t{\n\t\tif (cin.eof()) break;\n\t\tcin >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4];\n\n\t\tif (isFourCard(card))\n\t\t\tcout << \"four card\" << endl;\n\t\telse if (isFullHouse(card))\n\t\t\tcout << \"full house\" << endl;\n\t\telse if (isStraight(card))\n\t\t\tcout << \"straight\" << endl;\n\t\telse if (isThreeCard(card))\n\t\t\tcout << \"three card\" << endl;\n\t\telse if (nPair(card) == 2)\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if (nPair(card) == 1)\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n\treturn 0;\n}\n\nint nPair(int *card)\n{\n\tint c[13] = {0}, i, n = 0;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\n\tfor (i = 0; i < 5; i++)\n\t\tif (c[i] == 2)\n\t\t\tn++;\n\treturn n;\n}\n\nbool isThreeCard(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\n\tfor (i = 0; i < 5; i++)\n\t{\n\t\tif (c[i] == 3)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool isFourCard(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\n\tfor (i = 0; i < 5; i++)\n\t{\n\t\tif (c[i] == 4)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool isStraight(int *card)\n{\n\tint c[13] = {0}, i;\n\tbool b = true, d;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tif (c[1] == 1 && c[12] == 1)\n\t\treturn false;\n\n\tfor (i = 1; i < 13; i++)\n\t\tif (c[i] == 1 && b)\n\t\t\tb = true;\n\t\telse\n\t\t{\n\t\t\tb = false;\n\t\t\tbreak;\n\t\t}\n\n\tsort(c, c+13, greater<int>());\n\t\n\tif (b == true)\n\t{\n\t\tfor (i = 0; i < 5; i++)\n\t\t{\n\t\t\tif (c[i] == 1)\n\t\t\t\td = true;\n\t\t\telse\n\t\t\t\td = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n\tif (b == true)\n\t\treturn true;\n\treturn false;\n}\n\nbool isFullHouse(int *card)\n{\n\tint c[13] = {0}, i;\n\n\tfor (i = 0; i < 5; i++)\n\t\tc[card[i] - 1]++;\n\n\tsort(c, c+13, greater<int>());\n\t\n\tif (c[0] == 3 && c[1] == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool isstraight(int c[]);\n\nint main(){\n    int card[5];\n\n    while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])){\n        sort(card, card+5);\n        int n = 0;\n        for(int i=0; i<4; i++){\n            for(int j=i+1; j<5; j++){\n                if(card[i] == card[j]){\n                    n++;\n                }\n            }\n        }\n\n        switch(n){\n            case 1:\n                cout << \"one pair\" << endl;\n                break;\n            case 2:\n                cout << \"two pair\" << endl;\n                break;\n            case 3:\n                cout << \"three card\" << endl;\n                break;\n            case 4:\n                cout << \"full house\" << endl;\n                break;\n            case 6:\n                cout << \"four card\" << endl;\n                break;\n            case 10:\n                cout << \"four card\" << endl;\n                break;\n            default:\n                if(isstraight(card)){\n                    cout << \"straight\" << endl;\n                }else{\n                    cout << \"null\" << endl;\n                }\n                break;\n        }\n    }\n\n    return 0;\n}\n\nbool isstraight(int c[]){\n    for(int i=1; i<9; i++){\n        if(c[0]==i && c[1]==i+1 && c[2]==i+2 && c[3]==i+3 && c[4]==i+4){\n            return true;\n        }\n        if(c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13){\n            return true;\n        }\n    }\n    return false;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nvoid judge(int *cards){\n    int i,j;\n    int index[4] = {0};\n    \n    for(i = 1; i < 14; i++){\n        if(cards[i] == 0){\n            continue;\n        }\n        \n        if(cards[i] == 4){\n            cout<<\"four card\"<<endl;\n            return;\n        }\n        else if(cards[i] == 1){\n            for(j = i+1; j < 15; j++){\n                if(cards[j] != 1){\n                    break;\n                }\n            }\n            if(j-i == 5){\n                cout<<\"straight\"<<endl;\n                return;\n            }\n        }\n        else if(cards[i] == 2){\n            index[2]++;\n        }\n        else{\n            index[3]++;\n        }\n    }\n    \n    if(index[2] == 2){\n        cout<<\"two pair\"<<endl;\n        return;\n    }\n    \n    if(index[3] == 1){\n        if(index[2] == 1){\n            cout<<\"full house\"<<endl;\n        }else{\n            cout<<\"three card\"<<endl;\n        }\n    }else{\n        if(index[2] == 1){\n            cout<<\"one pair\"<<endl;\n        }else{\n            cout<<\"null\"<<endl;\n        }\n    }\n    return;\n}\n\nint main(void){\n    int cards[15] = {0};\n    int num,i,j;\n    char c;\n    \n   while(cin>>num){\n       if(num == 1){\n           cards[14]++;\n       }\n       cards[num]++;\n       \n       for(i = 0; i < 4;i++){\n            cin>>c>>num;\n            if(num == 1){\n                cards[14]++;\n            }\n            cards[num]++; \n       }\n       \n       judge(cards);\n       \n       for(i = 0; i < 15;i++){\n            cards[i] = 0;\n       }\n\n   }\n   \n   return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#include<vector>\n#include<list>\n#include<stack>\n#include<queue>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<complex>\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define X real()\n#define Y imag()\n\n\nint main(){\n    int mod=1000000007;\n    int ax, ay;\n    char f[12][12];\n    int c[5];\n    while (scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF) {\n        vector<int> card(5);\n        for (int i=0;i<5;++i) {\n            card[i]=c[i];\n        }\n        sort(card.begin(),card.end());\n        if ((card[1]==card[2] && card[2]==card[3]) && (card[0]==card[1] || card[4]==card[3])) printf(\"four card\\n\");\n        else if ((card[0]==card[1] && card[3]==card[4]) && (card[2]==card[1] || card[2]==card[3])) printf(\"full house\\n\");\n        else if (card[0]==card[1]-1 && card[1]==card[2]-1 && card[2]==card[3]-1 && card[3]==card[4]-1) printf(\"straight\\n\");\n        else if (card[0]==1 && card[1]==10 && card[2]==11 && card[3]==12 && card[4]==13) printf(\"straight\\n\");\n        else if ((card[0]==card[1] && card[1]==card[2]) || (card[1]==card[2] && card[2]==card[3]) && (card[2]==card[3] && card[3]==card[4])) printf(\"three card\\n\");\n        else if ((card[0]==card[1] && (card[2]==card[3] || card[3]==card[4])) || (card[1]==card[2] && card[3]==card[4])) printf(\"two pair\\n\");\n        else if (card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4]) printf(\"one pair\\n\");\n        else printf(\"null\\b\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nbool isFourCard(int cards[5]){\n\tbool res = true;\n\n\tfor (int i = 1; i < 4; i++){\n\t\tif (cards[i] != cards[i + 1])res = false;\n\t}\n\n\tif (res)return true;\n\n\tres = true;\n\n\tfor (int i = 0; i < 3; i++){\n\t\tif (cards[i] != cards[i + 1])res = false;\n\t}\n\n\treturn res;\n}\n\nbool isFullHouse(int cards[5]){\n\tif (cards[0] == cards[1] && cards[2] == cards[3] && cards[3] == cards[4])return true;\n\tif (cards[0] == cards[1] && cards[1] == cards[2] && cards[3] == cards[4])return true;\n\n\treturn false;\n}\n\nbool isStraight(int cards[5]){\n\tbool res = true;\n\n\tfor (int i = 0; i < 4; i++){\n\t\tif (cards[i] + 1 != cards[i + 1])res = false;\n\t}\n\n\tif (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)res = true;\n\n\treturn res;\n}\n\n\nbool isThreeCard(int cards[5]){\n\tfor (int i = 0; i < 3; i++){\n\t\tif (cards[i] == cards[i + 1] && cards[i + 1] == cards[i + 2])return true;\n\t}\n\n\treturn false;\n}\n\nint Pair(int cards[5]){\n\tint cnt = 0;\n\n\tfor (int i = 0; i < 4; i++){\n\t\tif (cards[i] == cards[i + 1])cnt++;\n\t}\n\n\treturn cnt;\n}\n\nint main(){\n\n\tint cards[5];\n\n\twhile (std::cin >> cards[0]){\n\t\t\n\t\tfor (int i = 1; i < 5; i++){\n\t\t\tchar a;\n\t\t\tstd::cin >> a >> cards[i];\n\t\t}\n\n\t\tstd::sort(cards, cards + 5);\n\n\t\tif (isFourCard(cards)){\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isFullHouse(cards)){\n\t\t\tstd::cout << \"full house\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isStraight(cards)){\n\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isThreeCard(cards)){\n\t\t\tstd::cout << \"three card\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Pair(cards) == 2){\n\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Pair(cards) == 1){\n\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Pair(cards) == 0){\n\t\t\tstd::cout << \"null\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nint main()\n{\n\tvector<int> H(5);\n\t\twhile(~scanf(\"%d,%d,%d,%d,%d\", &H[0] ,&H[1] ,&H[2] ,&H[3] ,&H[4]))\n\t\t{\n\t\t\tvector<int> L(32, 0);\n\t\t\tint kind = 0;\n\t\t\tfor(int i = 0; i < 5; i++)\n\t\t\t{\n\t\t\t\tif(L[H[i]-1] == 0)\n\t\t\t\t{\n\t\t\t\t\tkind++;\n\t\t\t\t}\n\t\t\t\tL[H[i]-1]++;\n\t\t\t}\n\n\t\t\tif(kind == 2)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 4)\n\t\t\t\t{\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcout << \"error 1\" << endl;\n\t\t\t}\n\t\t\telse if(kind == 5)\n\t\t\t{\n\t\t\t\tbool straight = false;\n\t\t\t\tfor(int i = 0; i <= 10; i++)\n\t\t\t\t{\n\t\t\t\t\tL[13] = L[0];\n\t\t\t\t\tif(L[i] && L[i+1] && L[i+2] && L[i+3] && L[i+4])\n\t\t\t\t\t{\n\t\t\t\t\t\tstraight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(straight)\n\t\t\t\t{\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 3)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 2)\n\t\t\t\t{\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 4)\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n}"
  },
  {
    "language": "C++",
    "code": "// clang-format off\n#include <bits/stdc++.h>\n#define int long long\n#define main signed main()\n#define loop(i, a, n) for (int i = (a); i < (n); i++)\n#define rep(i, n) loop(i, 0, n)\n#define forever for (;;)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define prec(n) fixed << setprecision(n)\ntemplate<typename A> using V = std::vector<A>;\ntemplate<typename A> using F = std::function<A>;\ntemplate<typename A, typename B> using P = std::pair<A, B>;\nusing pii = P<int, int>;\nusing vi = V<int>;\nusing vd = V<double>;\nusing vs = V<std::string>;\nusing vpii = V<pii>;\nusing vvi = V<vi>;\nusing vvpii = V<vpii>;\nconstexpr int INF = sizeof(int) == sizeof(long long) ? 1000000000000000000LL : 1000000000;\nconstexpr int MOD = 1000000007;\nconstexpr double PI = 3.14159265358979;\ntemplate<typename A, typename B> bool cmin(A &a, const B &b) { return a > b ? (a = b, true) : false; }\ntemplate<typename A, typename B> bool cmax(A &a, const B &b) { return a < b ? (a = b, true) : false; }\nconstexpr bool odd(const int n) { return n & 1; }\nconstexpr bool even(const int n) { return ~n & 1; }\ntemplate<typename T> std::istream &operator>>(std::istream &is, std::vector<T> &v) { for (T &x : v) is >> x; return is; }\ntemplate<typename A, typename B> std::istream &operator>>(std::istream &is, std::pair<A, B> &p) { is >> p.first; is >> p.second; return is; }\nusing namespace std;\n// clang-format on\n\nmain {\n  vi v(5);\n  char gomi;\n  while (cin >> v[0] >> gomi >> v[1] >> gomi >> v[2] >> gomi >> v[3] >> gomi >> v[4]) {\n    sort(all(v));\n    if (v[0] == v[3] || v[1] == v[4]) {\n      cout << \"four card\" << endl;\n      continue;\n    }\n    if ((v[0] == v[1] && v[2] == v[4]) || (v[0] == v[2] && v[3] == v[4])) {\n      cout << \"full house\" << endl;\n      continue;\n    }\n    if (v[4] - v[0] == 4 || (v[0] == 1 && v[1] == 10 && v[4] - v[1] == 3)) {\n      cout << \"straight\" << endl;\n      continue;\n    }\n    if (v[0] == v[2] || v[1] == v[3] || v[2] == v[4]) {\n      cout << \"three card\" << endl;\n      continue;\n    }\n    if ((v[0] == v[1] && (v[2] == v[3] || v[3] == v[4])) || (v[1] == v[2] && v[3] == v[4])) {\n      cout << \"two pair\" << endl;\n      continue;\n    }\n    if (v[0] == v[1] || v[1] == v[2] || v[2] == v[3] || v[3] == v[4]) {\n      cout << \"one pair\" << endl;\n      continue;\n    }\n    cout << \"null\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\n#define ACE 14\nint is4card(int cnt[]);\nint isFullHouse(int cnt[]);\nint isStraight(int cnt[]);\nint is3card(int cnt[]);\nint is2pair(int cnt[]);\nint is1pair(int cnt[]);\n\nint main(void){\n    int c[5];\n    int count[ACE+1];\n    \n    while (scanf(\"%d,%d,%d,%d,%d\", c+0, c+1, c+2, c+3, c+4) != EOF){\n        for (int i=2; i<=ACE; i++) count[i]=0;\n        for (int i=0; i<5; i++){\n            if (c[i]==1) c[i]=ACE;\n            count[c[i]]++;\n        }\n//        for (int i=2; i<=ACE; i++) printf(\"%d \",count[i]);\n//        printf(\"\\n\");\n        \n        if (is4card(count)) printf(\"four card\\n\");\n        else if (isFullHouse(count)) printf(\"full house\\n\");\n        else if (isStraight(count)) printf(\"straight\\n\");\n        else if (is3card(count)) printf(\"three card\\n\");\n        else if (is2pair(count)) printf(\"two pair\\n\");\n        else if (is1pair(count)) printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}\n\nint is4card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 4) return 1;\n    }\n    return 0;\n}\n\nint isFullHouse(int cnt[]){\n    return is3card(cnt) && is1pair(cnt);\n}\n\nint isStraight(int cnt[]){\n    int len=0;\n    \n    for (int i=2; i<=ACE; i++){\n        if (cnt[i]==0) len=0;\n        else {\n            len++;\n            if (len==5) return 1;\n        }\n    }\n    return 0;\n}\n\nint is3card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 3) return 1;\n    }\n    return 0;\n}\n\nint is2pair(int cnt[]){\n    int i,j;\n    // find the first pair\n    for (i=2; i<=ACE; i++){\n        if (cnt[i] == 2) break;\n    }\n    if (i>ACE) return 0;\n    // find second pair\n    for (j=2; j<=ACE; j++){\n        if (i==j) continue;\n        if (cnt[j] == 2) return 1;\n    }\n    return 0;\n}\n\nint is1pair(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 2) return 1;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\ntypedef long long LL;\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nusing namespace std;\nint main(void)\n{\n  for(;;){\n    int n[5];\n    char c;\n    REP(i,5){\n      if(i) cin >> c;\n      if((cin >> n[i]) == 0) return 0;\n    }\n    int num[16];\n    REP(i,16) num[i]=0;\n    REP(i,5) ++num[n[i]];\n    num[14]=num[1];\n    string s=\"null\";\n    REP(i,11){\n      int st=0;\n      REP(j,5) if(num[i+j]) ++st;\n      if(st==5) s=\"straight\";\n    }\n    int pa=0;\n    REP(i,5) REP(j,i) if(n[i]==n[j]) ++pa;\n    if(pa==1) s=\"one pair\";\n    if(pa==2) s=\"two pair\";\n    if(pa==3) s=\"three card\";\n    if(pa==4) s=\"full house\";\n    if(pa==6) s=\"four card\";\n    cout << s << endl;\n\n\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<vector>\n#include<list>\n#include<stdio.h>\n#include<math.h>\n#include<iomanip>\n#include<algorithm>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) range(i,0,b)\n#define debug(x) cout << \"debug \" << x << endl;\nusing namespace std;\n\nint straight(int c[]){\n    int sum = 0;\n    rep(i,5){\n        sum += c[i];\n    }\n    if(sum / 5 == c[2]){\n        return 1;\n    }else if(sum == 47){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int c[5];\n    char g;\n    int p,k;\n\n    while(cin >> c[0] >> g >> c[1] >> g >> c[2] >> g >> c[3] >> g >> c[4]){\n        int count[5] = {0};\n        k = 0;\n        sort(c, c+5);\n        p = c[0];\n        for(int i = 0; i < 5; i++){\n            if(p == c[i]){\n                count[k]++;\n            }else{\n                p = c[i];\n                k++;\n                count[k]++;\n            }\n        }\n        sort(count, count+5);\n        if(count[4] == 2){\n            if(count[3] == 2){\n                cout << \"two pair\" << endl;\n            }else{\n                cout << \"one pair\" << endl;\n            }\n        }else if(count[4] == 3){\n            if(count[3] == 2){\n                cout << \"full house\" << endl;\n            }else{\n                cout << \"three card\" << endl;\n            }\n        }else if(count[4] == 4){\n            cout << \"four card\" << endl;\n        }else{\n            if(straight(c) == 1){\n                cout << \"straight\" << endl;\n            }else{\n                cout << \"null\" << endl;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n\tint a[5],c[5]={0};\n\tint i;\n\tchar x;\n\twhile(cin>>a[0]){\n\t\tif(a[0]==1)a[0]+=13;\n\t\tfor(i=1;i<5;i++){\n\t\t\tcin>>x>>a[i];\n\t\t\tif(a[i]==1)a[i]+=13;\n\t\t\t}\n\t\t\n\t\tc[0]=c[1]=c[2]=c[3]=0;\n\t\tsort(a,a+5);\n\t\t\n\t\tfor(i=0;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[0]++; else break;\n\t\tfor(i=i+1;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[1]++; else break;\n\t\tfor(i=i+1;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[2]++; else break;\n\t\tfor(i=i+1;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[3]++; else break;\n\t\tif(c[0]==0&&c[1]==0&&c[2]==0&&c[3]==0)\n\t\t\tfor(i=0;i<4;i++)if(a[i]+1==a[i+1])c[4]=1; else {c[4]=0;break;}\n\t\t\n\t\tsort(c,c+4,greater<int>());\n\t\tif(c[0]==2&&c[1]==1)cout<<\"full house\";\n\t\telse if(c[0]==1&&c[1]==1)cout<<\"two pair\";\n\t\telse if(c[0]==1)cout<<\"one pair\";\n\t\telse if(c[0]==2)cout<<\"three card\";\n\t\telse if(c[0]==3)cout<<\"four card\";\n\t\telse if(c[4]==1)cout<<\"straight\";\n\t\telse cout<<\"null\";\n\t\tcout<<endl;\n\t\t\n\t}\n\n\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main(){\n  int c[5];\n  char cm;\n  while(cin>>c[0]>>cm>>c[1]>>cm>>c[2]>>cm>>c[3]>>cm>>c[4]){\n    int card[14];\n    for(int i=0;i<14;i++)\n      card[i] = 0;\n    bool fourcard = false;\n    bool threecard = false;\n    bool twopair = false;\n    bool onepair = false;\n    bool fullhouse = false;\n    for(int i=0;i<5;i++){\n      card[c[i]]++;\n      switch(card[c[i]]){\n      case 2:\n\tif(threecard)\n\t  fullhouse = true;\n\telse if(onepair)\n\t  twopair = true;\n\telse\n\t  onepair = true;\n\tbreak;\n      case 3:\n\tif(twopair)\n\t  fullhouse = true;\n\telse\n\t  threecard = true;\n\tbreak;\n      case 4:\n\tfourcard = true;\n\tbreak;\n      default:\n\tbreak;\n      }\n    }\n    if(fullhouse){\n      cout<<\"full house\"<<endl;\n      continue;\n    }\n    if(fourcard){\n      cout<<\"four card\"<<endl;\n      continue;\n    }\n    if(threecard){\n      cout<<\"three card\"<<endl;\n      continue;\n    }\n    if(twopair){\n      cout<<\"two pair\"<<endl;\n      continue;\n    }\n    if(onepair){\n      cout<<\"one pair\"<<endl;\n      continue;\n    }\n    bool straight = false;\n    for(int i=1;i<10;i++)\n      if(card[i]&&card[i+1]&&card[i+2]&&card[i+3]&&card[i+4])\n\tstraight = true;\n    if(card[10]&&card[11]&&card[12]&&card[13]&&card[1])\n      straight = true;\n    if(straight)\n      cout<<\"straight\"<<endl;\n    else\n      cout<<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0;\n  int three = 0;\n  int four = 0;\n  int ans = 0;\n\n  string trump;\n\n  while(getline(cin,trump)){\n\n  int a = 0;\n  int b = 0;\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tint card[5];\n\t\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF ){\n\t \t\n\t\tint a[20];\n\t\tmemset( a, 0, sizeof( a ) );\n\t\tint c = 0;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ) a[card[i]]++;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t c = std::max( c, std::count( card, card + 5, card[i] ) );\n\t\t}\n\t\t\n\t\tbool f = false;\n\t\tint m;\n\t\t\n\t\tswitch( c ){\n\t\t\tcase 4:\n\t\t \t\tputs( \"four card\" );\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t \t\tif( std::count( card, card + 5, card[i] ) == 2 ){\n\t\t\t\t\t\tf = true; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"full house\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t \tputs( \"three card\" );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t\t\tif( std::count( card, card + 5, card[i] ) == 2 && !f ){\n\t\t\t\t\t \tm = card[i];\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] != m && std::count( card, card + 5, card[i] ) == 2 && f ){\n\t\t\t\t\t\tputs( \"two pair\" );\n\t\t\t\t\t\tgoto end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tputs( \"one pair\" );\n\t\t\t\tbreak;\n\t\t\tcase 1:\t\n\t\t\t\tfor( int i = 1; i <= 10; i++ ){\n\t\t\t\t\tif( a[i] == 1 && a[i+1] == 1 && a[i+2] == 1 && a[i+3] == 1 && a[(i+4)%13] == 1 ) f = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"straight\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tputs( \"null\" );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\tend:\n\t}\n\n \treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring pairs[2][3] = { {\"null\",\"one pair\",\"two pair\"},\n\t\t\t\t\t  {\"three card\",\"full house\",\"\"} };\n\nint main() {\n\tint n, c, three, two;\n\tchar t;\n\tstring res;\n\twhile (!cin.eof()) {\n\t\tint card[13] = { 0 }, c = 0, three = 0, two = 0;\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tcin >> n >> t;\n\t\t\tcard[n - 1]++;\n\t\t}\n\t\tcin >> n;\n\t\tcard[n - 1]++;\n\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (card[i] == 4) {\n\t\t\t\tc = 114514;\n\t\t\t\tbreak;\n\t\t\t} else if(card[i] == 3) {\n\t\t\t\tthree++;\n\t\t\t} else if(card[i] == 2) {\n\t\t\t\ttwo++;\n\t\t\t}\n\n\t\t\tif (card[i] == 1) {\n\t\t\t\tc++;\n\n\t\t\t\tif (c == 4 && i == 12 && card[0] == 1) {\n\t\t\t\t\tc = 5;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if(card[i] == 0 && c != 5 && c > 0) {\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\t\tif (c == 5) {\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (c == 114514) {\n\t\t\tcout << \"four card\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tcout << pairs[three][two] << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n\n  int num[5];\n  char trash;\n  vector<int> V;\n\n  while(cin >> num[0] >> trash >> num[1] >> trash >> num[2] >> trash >> num[3] >> trash >> num[4]){\n    for(int i = 0; i < 5; i++) V.push_back(num[i]);\n\n    sort(V.begin(), V.end());\n\n\n    if(V[1] == V[0] && V[2] == V[0] && V[3] == V[0] || V[2] == V[1] && V[3] == V[1] && V[4] == V[1]){\n      cout << \"four card\"<< endl;\n    }else if(V[1] == V[0] && V[2] == V[0] && V[3] == V[4] || V[3] == V[2] && V[4] == V[2] && V[1] == V[0]){\n      cout << \"full house\" << endl;\n    }else if(V[1] == V[0]+1 && V[2] == V[0]+2 &&V[3] == V[0]+3 && V[4] == V[0]+4 || V[0] == 1 &&  V[1] == 10 && V[2] == 11 && V[3] == 12 && V[4] == 13){\n      cout << \"straight\" << endl;\n    }else if(V[1] == V[0] && V[2] == V[0] || V[2] == V[1] && V[3] == V[1] || V[3] == V[2] && V[4] == V[2]){\n      cout << \"three card\" << endl;\n    }else if(V[1] == V[0] && V[2] == V[3] || V[2] == V[1] && V[3] == V[4] || V[1] == V[0] && V[3] == V[4]){\n      cout << \"two pair\" << endl;\n    }else if(V[1] == V[0] || V[2] == V[1] || V[3] == V[2] || V[4] == V[3]){\n      cout << \"one pair\" << endl;\n    }else{\n      cout << \"null\" <<endl;\n    }\n\n    V.clear();\n\n\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void)\n{\n\tchar c[5];\n\tint i, j;\n\tint sum[14];\n\tint max, max2;\n\t\n\twhile (scanf(\"%d, %d, %d, %d, %d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\t\n\t\tfor (i = 0; i < 14; i++){\n\t\t\tsum[i] = 0;\n\t\t}\n\t\t\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tsum[c[i]-1]++;\n\t\t}\n\t\t\n\t\tmax = 0;\n\t\tmax2 = 0;\n\t\t\n\t\tfor (i = 0; i < 14; i++){\n\t\t\tif (max < sum[i]){\n\t\t\t\tmax = sum[i];\n\t\t\t}\n\t\t\telse if (max2 < sum[i]){\n\t\t\t\tmax2 = sum[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\tint ch;\n\t\t\n\t\tfor (i = 0; i < 10; i++){\n\t\t\t\n\t\t\tch = 0;\n\t\t\t\n\t\t\tfor (j = 0; j < 5; j++){\n\t\t\t\t\n\t\t\t\tif (sum[(i + j) % 13] == 1){\n\t\t\t\t\tch++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ch == 5){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if (max == 3 && max2 == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\n\t\t\n\t\telse if (ch == 5){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\t\n\t\telse if (max == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (max == 2 && max2 == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (max == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing pii = pair<int, int>;\n\nint main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  cout << fixed << setprecision(10);\n  \n  int a[5];\n  char c;\n  while (cin >> a[0]) {\n    for (int i = 1; i < 5; i++) {\n      cin >> c >> a[i];\n    }\n    sort(a, a + 5);\n    map<int, int> mp;\n    for (int i = 0; i < 5; i++) {\n      mp[a[i]]++;\n    }\n    int cnt = 0;\n    for (auto i : mp) cnt = max(cnt, i.second);\n    if (mp.size() == 2 && cnt == 4) {\n      cout << \"four card\" << endl;\n    } else if (mp.size() == 2 && cnt == 3) {\n      cout << \"full house\" << endl;\n    } else if (mp.size() == 3 && cnt == 3) {\n      cout << \"three card\" << endl;\n    } else if (mp.size() == 3 && cnt == 2) {\n      cout << \"two pair\" << endl;\n    } else if (mp.size() == 4) {\n      cout << \"one pair\" << endl;\n    } else {\n      bool flag = true;\n      for (int i = 1; i + 1 < 5; i++) {\n        flag &= a[i + 1] - a[i] == 1;\n      }\n      if (flag && ((a[0] == 1 && a[1] == 10) || (a[1] - a[0] == 1))) {\n        cout << \"straight\" << endl;\n      } else {\n        cout << \"null\" << endl;\n      }\n    }\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n\nint main(void){\n\tint hand[5];\n\tint cut_i,cut_j,tem;\n\n\tscanf(\"%d\",&hand[0]);\n\tfor(cut_i=1;cut_i<5;cut_i++){\n\t\tscanf(\",%d\",&hand[cut_i]);\n\t}\n\n\tfor(cut_i=0;cut_i<4;cut_i++){\n\t\tfor(cut_j=cut_i;cut_j<5;cut_j++){\n\t\t\tif(hand[cut_i]>hand[cut_j]){\n\t\t\t\ttem = hand[cut_i];\n\t\t\t\thand[cut_i] = hand[cut_j];\n\t\t\t\thand[cut_j] = tem;\n\t\t\t}\n\t\t}\n\t}\n\n\tif((hand[0] == hand[3]) || ( hand[1] == hand[4])){\n\t\tprintf(\"four card\\n\");\n\t}\n\telse if((hand[0] == hand[1] && hand[2] == hand[4]) ||(hand[0] == hand[2] && hand[3] == hand[4])){\n\t\tprintf(\"full house\\n\");\n\t}\n\telse if((hand[1]+1 == hand[2]) && (hand[2]+1 == hand[3]) && (hand[3]+1 == hand[4]) &&(((hand[0] ==1) && (hand[4] == 13))||(hand[0]+1 == hand[1]))){\n\t\tprintf(\"straight\\n\");\t\n\t}\n\telse if((hand[2] == hand[4]) ||(hand[0] == hand[2])){\n\t\tprintf(\"three card\\n\");\n\t}\n\telse if( ( ( (hand[0] == hand[1]) && ( (hand[2] == hand[3]) || (hand[3] == hand[4]) ))) ||\n\t\t( (hand[1] == hand[2]) &&(hand[3] == hand[4]) ) ){\n\t\t\tprintf(\"two pair\\n\");\n\t}\n\telse if((hand[0] == hand[1]) ||(hand[1] == hand[2])||(hand[2] == hand[3])||(hand[3] == hand[4])){\n\t\tprintf(\"one pair\\n\");\n\t}\n\telse {\n\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[5];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tscanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\tif(check[i] == 3) three++;\n\t\t\t\tif(check[i] >= 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(three == 1) printf(\"full house\\n\");\n\t\t\telse if(pair == 2) printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three >= 1)\n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse if(three == 2) printf(\"hull house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four >= 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n  \n  int d[5];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&d[0],&d[1],&d[2],&d[3],&d[4]) != EOF){\n    \n    sort(d,d+5);\n    \n    int ans = 0;\n    if(d[0] == d[3] || d[1] == d[4]) ans = 7;\n    if(!ans && d[0] == d[2] && d[3] == d[4]) ans = 6;\n    if(!ans && d[0] == d[1] && d[2] == d[4]) ans = 6;\n    if(!ans){\n      bool p = false;\n      for(int i=0;i<4;i++) if(d[i]+1 != d[i+1]) p = true;\n      if(!p) ans = 5;\n    }\n    if(!ans && d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13) ans = 5;\n    if(!ans && (d[0] == d[2] || d[1] == d[3] || d[2] == d[4])) ans = 4;\n    if(!ans){\n      int cnt = 0;\n      for(int i=0;i<4;i++) if(d[i] == d[i+1]) cnt++;\n      if(cnt == 2) ans = 3;\n      else if(cnt == 1) ans = 2;\n      else if(!cnt) ans = 1;\n    }\n    \n    if(ans == 1) cout << \"null\";\n    else if(ans == 2) cout << \"one pair\";\n    else if(ans == 3) cout << \"two pair\";\n    else if(ans == 4) cout << \"three card\";\n    else if(ans == 5) cout << \"straight\";\n    else if(ans == 6) cout << \"hull house\";\n    else if(ans == 7) cout << \"four card\";\n    cout << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\twhile(1){\n\t\tint card[13] = {}; // A ~ 13\n\t\tint data[5] = {};\n\n\t\tchar c0;\n\t\tfor(int i = 0; i < 5; ++i){\n\t\t\tif(i != 0) cin >> c0;\n\t\t\tcin >> data[i];\n\t\t\t++card[data[i] - 1];\n\t\t}\n\n\t\tif(cin.eof()) break;\n\n\t\tsort(card, card + 13, greater<int>());\n\t\t/*\n\t\tfor(int i = 0; i < 13; ++i){\n\t\t\tcout << card[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t\t*/\n\t\tswitch(card[0]){\n\t\t\tcase 4 :\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tsort(data, data + 5);\n\t\t\t\tif((data[0] == 1 && data[1] == 10 && data[4] == 13) || (data[0] + 4 == data[4]))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n\nusing namespace std;\n\nvoid solve()\n{\n\tint a[5];\n\tchar temp;\n\twhile(~scanf(\"%d,%d,%d,%d,%d%c\", &a[0], &a[1], &a[2], &a[3], &a[4], &temp))\n\t{\n\t\tmap<int, int> Map;\n\t\tfor(int i = 0; i < 5; ++i)\n\t\t{\n\t\t\tMap[a[i]]++;\n\t\t}\n\t\tif(Map.size() == 2)\n\t\t{\n\t\t\tmap<int, int>::iterator Ite = Map.begin();\n\t\t\tif(Ite->second == 1 || Ite->second == 4)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if(Ite->second == 2 || Ite->second == 3)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(Map.size() == 3)\n\t\t{\n\t\t\tfor(map<int, int>::iterator Ite = Map.begin(); Ite != Map.end(); ++Ite)\n\t\t\t{\n\t\t\t\tif(Ite->second == 2)\n\t\t\t\t{\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(Ite->second == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(Map.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmap<int, int>::iterator Ite = Map.begin();\n\t\t\tmap<int, int>::iterator IteNext = Map.begin();\n\t\t\t++IteNext;\n\t\t\tmap<int, int>::iterator IteEnd = Map.end();\n\t\t\tIteEnd--;\n\t\t\tif(IteEnd->first - Ite->first == 4 || IteNext->first - Ite->first == 9)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\nusing namespace std;\nint main()\n{\n\tint a,b,c,d,e;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)!=EOF)\n\t{\n\t\tint cards[13]={0};\n\t\tint dbl=0,thr=0,four=0,straight=0,tmp=0;\n\t\tcards[a-1]++; cards[b-1]++; cards[c-1]++; cards[d-1]++; cards[e-1]++;\n\n\t\tfor(int i = 0; i < 13; ++i)\n\t\t{\n\t\t\tif(cards[i]==2) dbl++;\n\t\t\telse if(cards[i]==3) thr++;\n\t\t\telse if(cards[i]==4) four++;\n\n\t\t\tif(0<i&&cards[i]==1&&cards[i-1]==1) tmp++;\n\t\t\tstraight=max(tmp,straight);\n\t\t}\n\n\t\tif(four) cout<<\"four cards\"<<endl;\n\t\telse if(thr&&dbl) cout<<\"full house\"<<endl;\n\t\telse if(straight==4||cards[0]==1&&cards[9]==1&&cards[10]==1&&cards[11]==1&&cards[12]==1) cout<<\"straight\"<<endl;\n\t\telse if(thr) cout<<\"three cards\"<<endl;\n\t\telse if(dbl==2) cout<<\"two pairs\"<<endl;\n\t\telse if(dbl) cout<<\"one pair\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n//conversion\n//------------------------------------------\ninline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}\n\n//math\n//-------------------------------------------\ntemplate<class T> inline T sqr(T x) {return x*x;}\n\n//typedef\n//------------------------------------------\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n\n//repetition\n//------------------------------------------\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n\n//clear memory\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\n//debug\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nVI n(5, 0);\n\nbool isStraight(){\n    int s = 0;\n    REP(i, 5) s+=n[i]-n[0]-i;\n    if(s == 0) return true;\n    else {\n        if(n[0] == 1) n[0]+=13;\n        SORT(n);\n\n        s = 0;\n        REP(i, 5) s+=n[i]-n[0]-i;\n        if(s == 0) return true;\n        else false;\n    }\n    return false;\n}\n\nint main(){\n    while(scanf(\"%d,%d,%d,%d,%d\", &n[0], &n[1], &n[2], &n[3], &n[4])!=EOF){\n        int m = 0;\n        SORT(n);\n        REP(i, 4) FOR(j, i+1, 5) if(n[i]==n[j]) m++;\n        switch(m){\n            case 1:\n                cout << \"one pair\" << endl;\n                break;\n            case 2:\n                cout << \"two pair\" << endl;\n                break;\n            case 3:\n                cout << \"three card\" << endl;\n                break;\n            case 4:\n                cout << \"full house\" << endl;\n                break;\n            case 6:\n                cout << \"four card\" << endl;\n                break;\n            default:\n                if(isStraight()) cout << \"straight\" << endl;\n                else cout << \"null\" << endl;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6];\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;}\n}\n\nfor(int i=0;i<4;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(c==1&&cc==2)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nbool fourcard(int h[5]) {\n\tif ((h[0] == h[1] && h[0] == h[2] && h[0] == h[3]) ||\n\t\t(h[4] == h[1] && h[4] == h[2] && h[4] == h[3]) )\n\t\treturn true;\n\treturn false;\n}\n\nbool fullhouse(int h[5]) {\n\tif ((h[0] == h[1] && h[0] == h[2] && h[3] == h[4]) ||\n\t\t(h[0] == h[1] && h[4] == h[2] && h[4] == h[3]) )\n\t\treturn true;\n\treturn false;\n}\n\nbool straight(int h[5]) {\n\tif (h[0] == 1 && h[1] != 2) {\n\t\tfor (int i = 1; i < 5; i++)\n\t\t\tif (h[i] != i + 9)\n\t\t\t\treturn false;\n\t}\n\telse {\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tif (h[i] + 1 != h[i+1])\n\t\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nbool threecard(int h[5]) {\n\tfor (int i = 0; i < 3; i++)\n\t\tif (h[i] == h[i+1] && h[i] == h[i+2])\n\t\t\treturn true;\n\treturn false;\n}\n\nint pairs(int h[5]) {\n\tint ret = 0;\n\tfor (int i = 0; i < 4; i++)\n\t\tif (h[i] == h[i+1]) {\n\t\t\tret++;\n\t\t\ti++;\n\t\t}\n\treturn ret;\n}\n\nint main() {\n\tint h[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &h[0], &h[1], &h[2], &h[3], &h[4]) != EOF) {\n\t\tsort(h, h + 5);\n\t\tfor (int i = 0; i < 5; i++)\n\t\t\tprintf(\"%d \", h[i]);\n\t\tprintf(\"\\n\");\n\t\tif (fourcard(h)) printf(\"four card\\n\");\n\t\telse if (fullhouse(h)) printf(\"full house\\n\");\n\t\telse if (straight(h)) printf(\"straight\\n\");\n\t\telse if (threecard(h)) printf(\"three card\\n\");\n\t\telse {\n\t\t\tint n = pairs(h);\n\t\t\tswitch (n) {\n\t\t\t\tcase 1: printf(\"one pair\\n\"); break;\n\t\t\t\tcase 2: printf(\"two pair\\n\"); break;\n\t\t\t\tdefault: printf(\"null\\n\"); break;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<algorithm>\nusing namespace  std;\n\nvector<string> ss(5);\nvector<int> vv(5);\nint num[13];\n\nvector<string> split(const string &s, char delimiter)\n{\n\tvector<string> ret;\n\tsize_t now = 0, find;\n\twhile ((find = s.find_first_of(delimiter, now)) != string::npos)\n\t{\n\t\tret.push_back(string(s, now, find - now));\n\t\tnow = find + 1;\n\t}\n\tret.push_back(string(s, now, s.size() - now));\n\treturn ret;\n}\nbool isFourCard(vector<int> vv)\n{\n\tfor (int i = 0; i < 13; i++)\n\t{\n\t\tif (num[i] == 4)return true;\n\t}\n\treturn false;\n}\nbool isFullhouse(vector<int> vv)\n{\n\tfor (int i = 0; i < 12; i++)\n\t{\n\t\tfor (int j = i + 1; j < 13; j++)\n\t\t{\n\t\t\tif (num[i] + num[j] == 5)return true;\n\t\t}\n\t}\n\treturn false;\n}\nbool isStraight(vector<int> vv)\n{\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tint j = i % 13;\n\t\tint count = 0;\n\t\twhile (num[j] == 1)\n\t\t{\n\t\t\tcount++;\n\t\t\tj = (j + 1) % 13;\n\t\t}\n\t\tif (count == 5)return true;\n\t}\n\treturn false;\n}\nbool isThreeCard(vector<int> vv)\n{\n\tfor (int i = 0; i < 13; i++)\n\t{\n\t\tif (num[i] == 3)return true;\n\t}\n\treturn false;\n}\nbool isTwoPair(vector<int> vv)\n{\n\tint count = 0;\n\tfor (int i = 0; i < 13; i++)\n\t{\n\t\tif (num[i] == 2)count++;\n\t}\n\treturn count == 2;\n}\nbool isOnePair(vector<int> vv)\n{\n\tfor (int i = 0; i < 13; i++)\n\t{\n\t\tif (num[i] == 2)return true;\n\t}\n\treturn false;\n}\nstring judge(vector<int> vv)\n{\n\tif (isFourCard(vv))\n\t{\n\t\treturn \"four card\";\n\t}\n\telse if (isFullhouse(vv))\n\t{\n\t\treturn \"full house\";\n\t}\n\telse if (isStraight(vv))\n\t{\n\t\treturn \"straight\";\n\t}\n\telse if (isThreeCard(vv))\n\t{\n\t\treturn \"three card\";\n\t}\n\telse if (isTwoPair(vv))\n\t{\n\t\treturn \"two pair\";\n\t}\n\telse if (isOnePair(vv))\n\t{\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\nint main()\n{\n\tstring s;\n\twhile (cin >> s)\n\t{\n\t\tss = split(s, ',');\n\t\tfor (int i = 0; i < 14; i++)num[i] = 0;\n\t\tfor (int i = 0; i < 5; i++)\n\t\t{\n\t\t\tstringstream str;\n\t\t\tstr << ss[i];\n\t\t\tstr >> vv[i];\n\t\t\tnum[vv[i] - 1]++;\n\t\t}\n\t\tsort(vv.begin(), vv.end());\n\t\tcout << judge(vv) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n\n      }\n    }\n    mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    /*for (int i = 0; i < mx_v.size(); i++) {\n      printf(\"mx[%d] = %d\\n\", i, mx_v[i]);\n      }*/\n    //printf(\"mx = %d\\n\", mx);\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c >= 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      for (int i = 0;  i< mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n\tprintf(\"three card\\n\");\n\tgoto end;\n      }\n    } else if (mx == 4 || mx == 5) {\n      printf(\"four card\\n\");\n      goto end;\n    } else {\n      printf(\"null\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint str(int a[5], int n){\n\tint tmp = a[n], i;\n\tfor(i = 0;i < 4 && ++tmp == a[++n];i++){if(tmp == 13 && i == 2)tmp = 0, n = -1;}\n\tif(i == 4)return 1;\n\telse return 0;\n}\n\nint main(){\n\tstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\",\"null\"};\n\tint a[5], t[13], ans;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1;\n\t\tsort(a, a+5);\n\t\tfor(int i = 0;i < 13;i++)t[i] = count(a, a+5,i+1);\n\t\t\n\t\tint th = 0, tw = 0, fo = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 2)tw = 1;\n\t\t\tif(t[i] == 3)th = 1;\n\t\t\tif(t[i] == 4)fo = 1;\n\t\t}\n\t\tif(tw && th)ans = 4;\n\t\tif(fo)ans = 5;\n\t\t\n\t\tif(ans == -1 && (str(a, 0) || str(a, 1)))ans = 3;\n\t\t\n\t\tfor(int i = 0;ans == -1 && i < 13;i++){\n\t\t\tif(t[i] == 3)ans = 2;\n\t\t\tif(ans == 0 && t[i] == 2)ans = 1;\n\t\t\tif(ans == -1 && t[i] == 2)ans = 0;\n\t\t}\n\t\t\n\t\t\n\t\tif(ans == -1)ans = 6;\n\t\t\n\t\t\n\t\tcout << s[ans] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    char c1, c2, c3, c4;\n    int card[5] = {};\n    \n    while (cin >> card[0] >> c1 >> card[1] >> c2 >> card[2] >> c3 >> card[3] >> c4 >> card[4]) {\n        sort(card, card + 5);\n\n        if (card[0] == card[3] || card[1] == card[4]) {\n            cout << \"four card\" << endl;\n        }\n        else if ((card[0] == card[2] && card[3] == card[4]) || (card[0] == card[1] && card[2] == card[4])) {\n            cout << \"full house\" << endl;\n        }\n        else if (card[0] + 1 == card[1] && card[1] + 1 == card[2] && card[2] + 1 == card[3] && card[3] + 1 == card[4]) {\n            cout << \"straight\" << endl;\n        }\n        else if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) {\n            cout << \"straight\" << endl;\n        }\n        else if (card[0] == card[2] || card[1] == card[3] || card[2] == card[4]) {\n            cout << \"three card\" << endl;\n        }\n        else if ((card[0] == card[1] && (card[2] == card[3] || card[3] == card[4])) || (card[1] == card[2] && card[3] == card[4])) {\n            cout << \"two pair\" << endl;\n        }\n        else if (card[0] == card[1] || card[1] == card[2] || card[2] == card[3] || card[3] == card[4]) {\n            cout << \"one pair\" << endl;\n        }\n        else {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n\tint n; char c; string s;\n\twhile(cin >> n)\n\t{\n\t\tint cd[13]={0},pr[5]={0};\n\n\t\tcd[n-1]++;\n\t\tfor(int i=0; i<4; i++)\n\t\t{\n\t\t\tcin >> c >> n;\n\t\t\tcd[n-1]++;\n\t\t}\n\n\t\tfor(int i=0; i<13; i++)\n\t\t{\n\t\t\tpr[cd[i]]++;\n\t\t}\n\n\t\tbool st=false;\n\t\tfor(int i=0; i<10; i++)\n\t\t{\n\t\t\tint sm=0;\n\t\t\tfor(int j=0; j<5; j++) sm+=(cd[(i+j)%13]?1:0);\n\t\t\tif(sm==5) st=true;\n\t\t}\n\n\t\t                      s=\"null\";\n\t\t     if(pr[4])        s=\"four card\";\n\t\telse if(pr[3]&&pr[2]) s=\"full house\";\n\t\telse if(st)           s=\"straight\";\n\t\telse if(pr[3])        s=\"three card\";\n\t\telse if(pr[2]==2)     s=\"two pair\";\n\t\telse if(pr[2])        s=\"one pair\";\n\n\t\tcout << s << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tint x;\n\t\n\twhile(scanf(\"%d\",&x)!=EOF)\n\t{\n\t\tint a[14]={};\n\t\ta[x]++;\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tscanf(\",%d\",&x);\n\t\t\ta[x]++;\n\t\t}\n\t\tint c=0,z=0;\n\t\tfor(int i=1;i<=13;i++)c=max(c,a[i]);\n\t\tfor(int i=1;i<=13;i++)if(c==a[i])z++;\n\t\tif(c==2&&z==1)\n\t\t{\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t}\n\t\telse if(c==2&&z==2)\n\t\t{\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t}\n\t\telse if(c==3)\n\t\t{\n\t\t\tfor(int i=1;i<=13;i++)\n\t\t\t{\n\t\t\t\tif(a[i]==2)\n\t\t\t\t{\n\t\t\t\t\tcout<<\"full house\"<<endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(i==13)\n\t\t\t\t{\n\t\t\t\t\tcout<<\"three card\"<<endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(c==4)\n\t\t{\n\t\t\tcout<<\"four card\"<<endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool e=false;\n\t\t\tfor(int i=1;i<=10;i++)\n\t\t\t{\n\t\t\t\tbool hoge=true;\n\t\t\t\tfor(int l=0;l<5;l++)\n\t\t\t\t{\n\t\t\t\t\tint g=i+l;\n\t\t\t\t\tif(g>13)\n\t\t\t\t\t{\n\t\t\t\t\t\tg-=13;\n\t\t\t\t\t}\n\t\t\t\t\tcout<<a[g]<<\" \";\n\t\t\t\t\tif(a[g]==0)hoge=false;\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t\tif(hoge==true)e=true;\n\t\t\t}\n\t\t\tif(e)cout<<\"straight\"<<endl;\n\t\t\telse cout<<\"null\"<<endl;\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tfor(auto it=count.begin();it!=count.end();it++){\n\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint a[6] = {};\n\twhile(scanf(\"%d\",&a[0])){\n\t\tfor(int i=1;i<5;i++)scanf(\",%d\", &a[i]);\n\t\t\tint cnt=0,flag=true,card[13]={},max = 4;\n\t\tsort(a,a+5);\n\t\tfor (int i=0;i<4;i++)for(int j=i+1;j<5;j++)\n\t\t\tif (a[i]==a[j])cnt++;\n\t\tint i=0;\n\t\tif(a[i]==1&&a[i+1]==10){\n\t\t\ti=1;\n\t\t\tmax=5;\n\t\t\ta[5]=14;\n\t\t}\n\t\tfor(;i<max;i++)if(a[i]+1!=a[i+1])flag=0;\nif (cnt == 6)printf(\"four card\\n\");\nelse if (cnt == 4)printf(\"full house\\n\");\nelse if (flag)printf(\"straight\\n\");\nelse if (cnt == 3)printf(\"three card\\n\");\nelse if (cnt == 2)printf(\"two pir\\n\");\nelse if (cnt == 1)printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint a[5];\n\nbool st(){\n\tint i=a[0];\n\tif((a[1]==i+1&&a[2]==i+2&&a[3]==i+3&&a[4]==i+4)||(i==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nvoid f(int a,int b,int c){\n\tif(c)cout<<\"four card\\n\";\n\telse if(a&&b)cout<<\"full house\\n\";\n\telse if(b)cout<<\"three card\\n\";\n\telse if(a==2)cout<<\"two pair\\n\";\n\telse if(a)cout<<\"one pair\\n\";\n\telse cout<<\"null\\n\";\n}\n\nint main(){\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tsort(a,a+5);\n\t\tif(st())cout<<\"straight\\n\";\n\t\telse{\n\t\t\tint num[14],pair=0,three=0,four=0;\n\t\t\tfor(int i=1;i<14;i++)num[i]=0;\n\t\t\tfor(int i=0;i<5;i++)num[a[i]]++;\n\t\t\tfor(int i=1;i<14;i++){\n\t\t\t\tif(num[i]==2)pair++;\n\t\t\t\telse if(num[i]==3)three++;\n\t\t\t\telse if(num[i]==4)four++;\n\t\t\t}\n\t\t\tf(pair,three,four);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<cmath>\n\n#define R 1\n#define D 2\n#define L 3\n#define U 4\n\nusing namespace std;\n\nint main(void){\n\n\tint card[14];\n\tint inp;\n\tint tmp;\n\tchar gava;\n\tbool f1,f2,f3;\n\n\twhile(cin>>inp>>gava){\n\n\t\tfor(int i=0;i<14;i++) card[i]=0;\n\t\tcard[inp]++;\n\t\tfor(int i=0;i<3;i++){\n\t\t\tcin>>inp>>gava;\n\t\t\tcard[inp]++;\n\t\t}\n\t\tcin>>inp;\n\t\tcard[inp]++;\n\t\tf3=false;\n\n\t\t/*four card*/\n\t\tfor(int i=0;i<14;i++){\n\t\t\tif(card[i]==4){\n\t\t\t\tf3=true;\n\t\t\t\tcout<<\"four card\"<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(f3) continue;\n\n\t\t/*full house*/\n\t\tf1=false,f2=false;\n\t\tfor(int i=0;i<14;i++){\n\t\t\tif(card[i]==3) f1=true;\n\t\t\tif(card[i]==2) f2=true;\n\t\t\tif(f1==true&&f2==true){\n\t\t\t\tf3=true;\n\t\t\t\tcout<<\"full house\"<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(f3) continue;\n\n\t\t/*straight*/\n\t\tfor(int i=0;i<14;i++){\n\t\t\tif(card[i]==0&&card[i+1]==1){\n\t\t\t\ttmp=i+1;\n\t\t\t\tf1=true;\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\tif(tmp==14){\n\t\t\t\t\t\ttmp=1;\n\t\t\t\t\t\tif(card[tmp+1]==1){\n\t\t\t\t\t\t\tf1=false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(card[tmp]!=1) f1=false;\n\t\t\t\t\ttmp++;\n\t\t\t\t}\n\t\t\t\tif(f1){\n\t\t\t\t\tf3=true;\n\t\t\t\t\tcout<<\"straight\"<<endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(f3) continue;\n\n\t\t/*three card*/\n\t\tfor(int i=0;i<14;i++){\n\t\t\tif(card[i]==3){\n\t\t\t\tf3=true;\n\t\t\t\tcout<<\"three card\"<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(f3) continue;\n\n\t\t/*two pair */\n\t\tf1=false,f2=false;\n\t\tfor(int i=0;i<14;i++){\n\t\t\tif(card[i]==2&&f1==false){\n\t\t\t\tf1=true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(card[i]==2) f2=true;\n\t\t\tif(f1==true&&f2==true){\n\t\t\t\tcout<<\"two pair\"<<endl;\n\t\t\t\tf3=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(f3) continue;\n\n\t\t/*one pair*/\n\t\tfor(int i=0;i<14;i++){\n\t\t\tif(card[i]==2){\n\t\t\t\tf3=true;\n\t\t\t\tcout<<\"one pair\"<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(f3) continue;\n\n\t\t/*null*/\n\t\tcout<<\"null\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0;\n  int three = 0;\n  int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump);\n\n  int a = 0;\n  int b = 0;\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0;\n  int three = 0;\n  int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump);\n\n  int a = 0;\n  int b = 0;\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    //cout<<e<<endl;\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  for(int i = 1;i < 14;++i){\n    cout<<check[i]<<endl;\n  }\n\n  //cout<<two<<\" \"<<three<<\" \"<<four<<endl;\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n\nint main(void){\n\tint hand[5];\n\tint cut_i,cut_j,tem;\n\t\n\twhile(scanf(\"%d\",&hand[0]) !=EOF){\n\t\tfor(cut_i=1;cut_i<5;cut_i++){\n\t\t\tscanf(\",%d\",&hand[cut_i]);\n\t\t}\n\n\t\tfor(cut_i=0;cut_i<4;cut_i++){\n\t\t\tfor(cut_j=cut_i;cut_j<5;cut_j++){\n\t\t\t\tif(hand[cut_i]>hand[cut_j]){\n\t\t\t\t\ttem = hand[cut_i];\n\t\t\t\t\thand[cut_i] = hand[cut_j];\n\t\t\t\t\thand[cut_j] = tem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif((hand[0] == hand[3]) || ( hand[1] == hand[4])){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if((hand[0] == hand[1] && hand[2] == hand[4]) ||(hand[0] == hand[2] && hand[3] == hand[4])){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\telse if((hand[1]+1 == hand[2]) && (hand[2]+1 == hand[3]) && (hand[3]+1 == hand[4]) &&(((hand[0] ==1) && (hand[4] == 13))||(hand[0]+1 == hand[1]))){\n\t\t\tprintf(\"straight\\n\");\t\n\t\t}\n\t\telse if((hand[2] == hand[4]) ||(hand[0] == hand[2])){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if( ( ( (hand[0] == hand[1]) && ( (hand[2] == hand[3]) || (hand[3] == hand[4]) ))) ||\n\t\t\t( (hand[1] == hand[2]) &&(hand[3] == hand[4]) ) ){\n\t\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if((hand[0] == hand[1]) ||(hand[1] == hand[2])||(hand[2] == hand[3])||(hand[3] == hand[4])){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main(){\n    int card[5] = {0};\n    while(~scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])){\n        string role = \"null\";\n        sort(card,card+5);\n        if((card[0] == card[1] && card[1] == card[2] && card[2] == card[3]) || (card[1] == card[2] && card[2] == card[3] && card[3] == card[4]))role = \"four card\";\n        else if(((card[0] == card[1] && card[1] == card[2]) && card[3] == card[4])||((card[0] == card[1]) && card[2] == card[3] && card[3] == card[4]))role = \"full house\";\n        else if(((card[0]+4) == (card[1]+3)) && ((card[1] + 3) == (card[2] + 2)) && ((card[2] + 2) == (card[3] + 1)) && ((card[3] + 1) == (card[4]))) role = \"straight\";\n        else if(((card[0]+12) == (card[1]+3)) && ((card[1] + 3) == (card[2] + 2)) && ((card[2] + 2) == (card[3] + 1)) && ((card[3] + 1) == (card[4]))) role = \"straight\";\n        else if((card[0] == card[1] && card[1] == card[2]) || (card[1] == card[2] && card[2] == card[3]) || (card[2] == card[3] && card[3] == card[4]))role = \"three card\";\n        else if((card[0] == card[1] && card[2] == card[3]) || (card[1] == card[2] && card[3] == card[4]) || (card[0] == card[1] && card[3] == card[4])) role = \"two pair\";\n        else if(card[0] == card[1] || card[1] == card[2] || card[2] == card[3] || card[3] == card[4]) role = \"one pair\";\n        cout << role << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\nusing namespace std;\n\nint main() {\n\tint c[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF) {\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tfor (int j = 0; j<4; j++) {\n\t\t\t\tif (c[j] > c[j + 1]) {\n\t\t\t\t\tint tmp = c[j];\n\t\t\t\t\tc[j] = c[j + 1];\n\t\t\t\t\tc[j + 1] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ((c[0]==c[1]&&c[1]==c[2]&&c[2]==c[3])||(c[1]==c[2]&&c[2]==c[3]&&c[3]==c[4]))cout << \"four cards\" << endl;\n\t\telse if ((c[0]==c[1]&&c[1]==c[2]&&c[3]==c[4])||(c[0]==c[1]&&c[2]==c[3]&&c[3]==c[4]))cout << \"full house\" << endl;\n\t\telse if ((c[0]==1&&c[1]==10&&c[2]==11&&c[3]==12&&c[4]==13)||(c[0]+1==c[1]&&c[0]+2==c[2]&&c[0]+3==c[3]&&c[0]+4==c[4]))cout << \"straight\" << endl;\n\t\telse if ((c[0]==c[1]&&c[1]==c[2])||(c[1]==c[2]&&c[2]==c[3])||(c[2]==c[3]&&c[3]==c[4]))cout << \"three cards\" << endl;\n\t\telse if ((c[0]==c[1]&&c[2]==c[3])||(c[1]==c[2]&&c[3]==c[4])||(c[0]==c[1]&&c[3]==c[4]))cout << \"two pair\" << endl;\n\t\telse if ((c[0] == c[1]) || (c[1] == c[2]) || (c[2] == c[3]) || (c[3] == c[4]))cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n  vector<int> c(5);\n  int ans;\n  while(~scanf(\"%d,%d,%d,%d,%d\", &c[0],&c[1],&c[2],&c[3],&c[4])) {\n    sort(c.begin(), c.begin()+5);\n    if(c[0] == c[3] || c[1] == c[4]) ans = 7;\n    else if((c[0] == c[2] && c[3] == c[4])|| (c[0] == c[1] && c[2] == c[4])) ans = 6;\n    else if(c[0] + 1 == c[1] && c[1] + 1 == c[2] && c[2] + 1 == c[3] && c[3] +1 == c[4])\n      ans = 5;\n    else if(c[0] == 1 && c[1] == 10 && c[2] == 11 && c[3] == 12 && c[4] == 13)\n      ans = 5;\n    else if(c[0] == c[2] || c[1] == c[3] || c[2] == c[4])\n      ans = 4;\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[0] == c[1] && c[3] == c[4]) || (c[1] == c[2] && c[3] == c[4]))\n      ans = 3;\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4])\n      ans = 2;\n    else ans= 1;\n    switch(ans) {\n    case 1: cout << \"null\" << endl; break;\n    case 2: cout << \"one pair\" << endl; break;\n    case 3: cout << \"two pair\" << endl; break;\n    case 4: cout << \"three card\" << endl; break;\n    case 5: cout << \"straight\" << endl; break;\n    case 6: cout << \"full house\" << endl; break;\n    case 7: cout << \"four card\" << endl; break;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n#define REP(i,n) for(int (i)=0; (i)<(n); (i)++)\n#define For(i,a,b) for(int (i)=(a); (i)<(b); (i)++)\n\nbool twopair(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    v.erase(unique(v.begin(), v.end()), v.end());\n    if (v.size() == 3) return true;\n    else return false;\n}\n\nbool straight(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    if (v[4]-v[3] == 1 && v[3]-v[2] == 1 && v[2]-v[1] == 1) {\n        if (v[1]-v[0] == 1 || (v[0] == 1 && v[4] == 13)) return true;\n        else return false;\n    }else return false;\n}\n\nbool fullhouse(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    if (v[3] == v[4]) return true;\n    else return false;\n}\n    \nint getMaxPair(int a, int b, int c, int d, int e) {\n    vector<int> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    v.push_back(d);\n    v.push_back(e);\n    sort(v.begin(), v.end());\n    vector<int> cnt;\n    int crt = 0;\n    int min = v[0];\n    REP(i,4) {\n        if (v[i+1] == min) {\n            crt++;\n        }else {\n            cnt.push_back(crt);\n            min = v[i+1];\n            crt = 0;\n        }\n    }\n    cnt.push_back(crt);\n    sort(cnt.begin(), cnt.end());\n    return cnt.back() + 1;\n}\n\nint main() {\n    int a,b,c,d,e;\n    char ch;\n    while(cin>>a>>ch>>b>>ch>>c>>ch>>d>>ch>>e) {\n        switch(getMaxPair(a,b,c,d,e)) {\n            case 1:\n                if (straight(a,b,c,d,e)) {\n                    cout << \"straight\" << endl;\n                }else {\n                    cout << \"null\" << endl;\n                }\n                break;\n            case 2:\n                if (twopair(a,b,c,d,e)) {\n                    cout << \"two pair\" << endl;\n                }else {\n                    cout << \"one pair\" << endl;\n                }\n                break;\n            case 3:\n                if (fullhouse(a,b,c,d,e)) {\n                    cout << \"full house\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n                break;\n            case 4:\n                cout << \"four card\" << endl;\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n  int card[5];\n  while (scanf(\"%d, %d, %d, %d, %d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n    sort(card, card + 5);\n    int ct[14] = {0};\n    for (int i = 0; i < 5; i++){\n      ct[card[i]]++;\n    }\n\n    int a = 0;\n    for (int i = 0; i < 4; i++){\n      if (card[i] + 1 == card[i + 1]) a++;\n    }\n    if (card[4] == 13 && card[0] == 1) a++;\n    if (a == 4){\n      cout << \"straight\\n\";\n      continue;\n    }\n    int ma = 0;\n    for (int i = 1; i < 14; i++) ma = max(ma, ct[i]);\n\n    if (ma == 4) {\n      cout << \"four card\\n\";\n      continue;\n    }\n    if (ma == 3){\n      if (card[0] == card[1] && card[1] != card[2] || card[3] == card[4] && card[3] != card[2]){\n        cout << \"full house\\n\";\n      }\n      else {\n        cout << \"three card\\n\";\n      }\n      continue;\n    }\n    if (ma == 2){\n      int b = 0;\n      for (int i = 1; i < 14; i++) if (ct[i] == 2) b++;\n      if (b == 2) cout << \"two pair\\n\";\n      else cout << \"one pair\\n\";\n      continue;\n    }\n    cout << \"null\\n\";\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n\nint cnt[13], ty[8];\n\nbool straight() {\n    rep (k, 10) {\n        bool f = true;\n        rep (i, 5) if (cnt[(k+i)%13] == 0) f = false;\n        if (f) return true;\n    }\n    return false;\n}\n\nint main() {\n    int a, b, c, d, e;\n    while (scanf(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e) != EOF) {\n        memset(cnt, 0, sizeof(cnt));\n        memset(ty, 0, sizeof(ty));\n        a--, b--, c--, d--, e--;\n        cnt[a]++;\n        cnt[b]++;\n        cnt[c]++;\n        cnt[d]++;\n        cnt[e]++;\n        rep (i, 13) ty[cnt[i]]++;\n        if (ty[4]) puts(\"four card\");\n        else if (ty[2] && ty[3]) puts(\"full house\");\n        else if (straight()) puts(\"straight\");\n        else if (ty[3]) puts(\"three card\");\n        else if (ty[2] >= 2) puts(\"two pair\");\n        else if (ty[2] >= 1) puts(\"one pair\");\n        else puts(\"null\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm.h>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint count1;\n\tint count2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\tcount1 = 0;\n\t\tcount2 = 0;\n\t\tstraight = 0;\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tcount1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tcount2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((count1 == 1 && count2 == 0) || (count1 == 0 && count2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (count1 == 1 && count1 == count2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (count1 + count2 == 3 && count1 != 0 && count2 != 0){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\t\n\t\telse if (count1 == 2 || count2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (count1 == 3 || count2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint a[5];\nbool is_straight()\n{\n  for (int i = 1; i < 5; i++) {\n    if (a[i] != a[i - 1] + 1) {\n      goto next;\n    }\n  }\n  return true;\n next:\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n    return true;\n  }\n  return false;\n}\n\n\nint main()\n{\n  while (scanf(\"%d\" , &a[0]) == 1) {\n    for (int i = 1; i < 5; i++) {\n      scanf(\",%d\", &a[i]);\n    }\n    sort(a, &a[5]);\n    /*for (int i = 0; i < 5; i++) {\n      printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");*/\n    vector<int> mx_v;\n    int mx = 1;\n    for (int i = 1; i < 5; i++) {\n      if (a[i] == a[i - 1]) {\n\tmx++;\n      } else {\n\tmx_v.push_back(mx);\n\tmx = 1;\n      }\n    }\n    mx_v.push_back(mx);\n    mx = *max_element(mx_v.begin(), mx_v.end());\n    //printf(\"mx = %d\\n\", mx);\n    if (mx == 1) {\n      if (is_straight()) {\n\tprintf(\"straight\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"null\\n\");\n\tgoto end;\n      }\n    } else if (mx == 2) {\n      int c = 0;\n      for (int i = 0; i < mx_v.size(); i++) {\n\tif (mx_v[i] == mx) {\n\t  c++;\n\t}\n      }\n      if (c == 2) {\n\tprintf(\"two pair\\n\");\n\tgoto end;\n      } else {\n\tprintf(\"one pair\\n\");\n\tgoto end;\n      }\n    } else if (mx == 3) {\n      for (int i = 0;  i< mx_v.size(); i++) {\n\tif (mx_v[i] == 2) {\n\t  printf(\"full house\\n\");\n\t  goto end;\n\t}\n\tprintf(\"three card\\n\");\n\tgoto end;\n      }\n    } else if (mx == 4) {\n      printf(\"four card\\n\");\n      goto end;\n    }\n  end:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint FourCard(vector<int>);\nint HullHouse(vector<int>);\nint Straight(vector<int>);\nint ThreeCard(vector<int>);\nint TwoPair(vector<int>);\nint OnePair(vector<int>);\n\nint main(){\n  int a,b,c,d,e;\n  char c1,c2,c3,c4;\n  vector<int> card;\n\n  while(cin >> a >> c1 >> b >> c2 >> c >> c3 >> d >> c4 >> e){\n    card.push_back(a);\n    card.push_back(b);\n    card.push_back(c);\n    card.push_back(d);\n    card.push_back(e);\n\n    sort(card.begin(), card.end());\n\n    if(FourCard(card) == 1)\n      cout << \"four card\" << endl;\n    else if(HullHouse(card) == 1)\n      cout << \"hull house\" << endl;\n    else if(Straight(card) == 1)\n      cout << \"straight\" << endl;\n    else if(ThreeCard(card) == 1)\n      cout << \"three card\" << endl;\n    else if(TwoPair(card) == 1)\n      cout << \"two pair\" << endl;\n    else if(OnePair(card) == 1)\n      cout << \"one pair\" << endl;\n    else\n      cout << \"null\" << endl;\n\n    card.clear();\n  }\n\n  return 0;\n}\n\nint FourCard(vector<int> x){\n  int i;\n  for(i=0; i<2; ++i){\n    if(x[i] == x[i+1] && x[i] == x[i+2] && x[i] == x[i+3])\n      return 1;\n  }\n  return 0;\n}\n\nint HullHouse(vector<int> x){\n  if((x[0] == x[1] && x[0] == x[2] && x[3] == x[4])||(x[0] == x[1] && x[2] == x[3] && x[2] == x[4]))\n    return 1;\n  else\n    return 0;\n}\n\nint Straight(vector<int> x){\n  if(x[0] == x[1]-1 && x[0] == x[2]-2 && x[0] == x[3]-3 && x[0] == x[4]-4)\n    return 1;\n  else if(x[0] == 1 && x[1] == 10 && x[2] == 11 && x[3] == 12 && x[4] == 13)\n    return 1;\n  else\n    return 0;\n}\n\nint ThreeCard(vector<int> x){\n  int i;\n  for(i=0;i<3; ++i){\n    if(x[i] == x[i+1] && x[i] == x[i+2])\n      return 1;\n  }\n  return 0;\n}\n\nint TwoPair(vector<int> x){\n  int i;\n  if((x[0] == x[1] && x[2] == x[3])||(x[0] == x[1] && x[3] == x[4])||(x[1] == x[2] && x[3] == x[4]))\n    return 1;\n  else return 0;\n}\n\nint OnePair(vector<int> x){\n  int i;\n  for(i=0; i<4; ++i){\n    if(x[i] == x[i+1])\n      return 1;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\n\nint main(void){\n  int x[5];\n \n  while(scanf(\"%d,%d,%d,%d,%d\"\n\t       ,&x[0],&x[1],&x[2],&x[3],&x[4])!=EOF){\n    sort(x,x+5);\n\n    int cnt[15];\n    fill(cnt,cnt+15,0);\n    for(int i=0;i<5;i++){\n      cnt[x[i]]++;\n      if(x[i]==1)cnt[14]++;\n    }\n\n    int fg=0;\n    for(int i=0;i<15;i++)\n      if(cnt[i]==4){\n\tcout << \"four card\" << endl;\n\tfg=1;\n\tbreak;;\n      }\n    if(fg)continue;\n\n    int fg2=0,fg3=0;\n    for(int i=0;i<14;i++){\n      if(cnt[i]==2)fg2++;\n      if(cnt[i]==3)fg3=1;\n    }\n    if(fg2 && fg3){\n      \tcout << \"full house\" << endl;\n\tcontinue;\n    }\n\n    for(int i=0;i+4<15;i++){\n      if(cnt[i] & cnt[i+1] & cnt[i+2] & cnt[i+3] &cnt[i+4]){\n\tcout << \"straight\" << endl;\n\tfg=1;\n\tbreak;;\n      }\n    }\n    if(fg)continue;\n\n    if(fg3){\n      cout << \"three card\" << endl;\n      continue;\n    }\n\n    if(fg2==2){\n      cout << \"two pair\" << endl;\n      continue;\n    }\n\n    if(fg2==1){\n      cout <<\"one pair\" << endl;\n      continue;\n    }\n\n    cout << \"null\" << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint str(int a[5], int n){\n\tint tmp = a[n], i;\n\tfor(i = 0;i < 4 && ++tmp == a[++n];i++){if(tmp == 13 && i == 2)tmp = 0;}\n\t//cout << endl;\n\tif(i == 4)return 1;\n\telse return 0;\n}\n\nint main(){\n\tstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\",\"null\"};\n\tint a[5], t[13], ans;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1;\n\t\tsort(a, a+5);\n\t\tfor(int i = 0;i < 13;i++)t[i] = count(a, a+5,i+1);\n\t\t\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 3)ans = 2;\n\t\t\tif(ans == 0 && t[i] == 2)ans = 1;\n\t\t\tif(ans == -1 && t[i] == 2)ans = 0;\n\t\t}\n\t\t//for(int i = 0;i < 5;i++)cout << a[i] << \" \";\n\t\tif(str(a, 0) || str(a, 1))ans = 3;\n\t\tint th = 0, tw = 0, fo = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 2)tw = 1;\n\t\t\tif(t[i] == 3)th = 1;\n\t\t\tif(t[i] == 4)fo = 1;\n\t\t}\n\t\tif(tw && th)ans = 4;\n\t\tif(fo)ans = 5;\n\t\tif(ans == -1)ans = 6;\n\t\t//for(int i = 0;i < 5;i++)printf(\"%d \", a[i]);\n\t\t//for(int i = 0;i < 13;i++)cout << t[i] << \" \";\n\t\t//cout << \"fo\" << fo;\n\t\t//cout << endl;\n\t\t//cout << ans;\n\t\tcout << s[ans] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstring str[] = {\"null\", \"one pair\", \"two pair\", \"three card\",\n    \"straight\", \"full house\", \"four card\"};\n\nint main()\n{\n    int hand[5];\n    while (scanf(\"%d\", &hand[0]) != EOF) {\n        for (int i = 1; i < 5; i++) {\n            scanf(\",%d\", &hand[i]);\n        }\n        int data[14];\n        fill(data, data+14, 0);\n        for (int i = 0; i < 5; i++) {\n            data[hand[i]]++;\n        }\n        int ans = 0;\n        for (int i = 1; i < 14; i++) {\n            if (data[i] == 4) {\n                ans = 7;\n            }\n            if (data[i] == 2) {\n                if (ans == 2) {\n                    ans = 3;\n                } else if (ans == 4) {\n                    ans = 6;\n                } else {\n                    ans = 2;\n                }\n            }\n            if (data[i] == 3) {\n                if (ans == 2) {\n                    ans = 6;\n                } else {\n                    ans = 4;\n                }\n            }\n        }\n        sort(hand, hand+5);\n        if (!ans) {\n            for (int i = 1; i < 5; i++) {\n                if (hand[i-1]+1 != hand[i] ) {\n                    ans = 1;\n                }\n            }\n            if (ans != 1) {\n                ans = 5;\n            }\n            if (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 &&\n                    hand[3] == 12 && hand[4] == 13) {\n                ans = 5;\n            }\n        }\n        cout << str[ans-1] << endl;\n\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <string>\n#include <cmath>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<int(n);++i)\n\nstatic const double PI=6*asin(0.5);\ntypedef complex<double> P;\ntypedef long long ll;\n\n\nint a[5]={0};\nint c[14]={0};\nint node;\nchar t;\nint tmp;\n\nint main(){\n\twhile(cin>>tmp){\n\t\tc[tmp]++;\n\t\trep(i,4){\n\t\t\tcin>>t>>tmp;\n\t\t\tc[tmp]++;\n\t\t}\n\t\trep(i,14){\n\t\t\ta[c[i]]++;\n\t\t}\n\t\tbool str=false;\n\t\trep(i,10){\n\t\t\tif(c[i]==1){\n\t\t\t\trep(j,4){\n\t\t\t\t\tif(c[i+j+1]!=1){\n\t\t\t\t\t\tstr=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(j==3) str=true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//rep(i,13) cout<<c[i+1]<<\" \";\n\t\t//cout<<endl;\n\t\tif(c[1]==1&&c[10]==1&&c[11]==1&&c[12]==1&&c[13]==1) str=true;\n\t\tif(a[4]==1) cout<<\"four card\\n\";\n\t\telse if(a[3]==1&&a[2]==1) cout<<\"full house\\n\";\n\t\telse if(str) cout<<\"straight\\n\";\n\t\telse if(a[3]==1) cout<<\"three card\\n\";\n\t\telse if(a[2]==2) cout<<\"two pair\\n\";\n\t\telse if(a[2]==1) cout<<\"one pair\\n\";\n\t\telse cout<<\"null\\n\";\n\t\t\n\t\trep(i,14) c[i]=0;\n\t\trep(i,5) a[i]=0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint bigger(int a, int b){\n\tif(a>=b){return a;}\n\treturn b;\n}\n\nint one_pair(int a[]){\n\tint i, j;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(j!=i){\n\t\t\t\tif(a[i]==a[j]){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint two_pair(int a[]){\n\tint i, j, count=0;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(a[i] == a[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(count == 4){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint three_card(int a[]){\n\tint i, j, k;\n\tfor(i=0; i<5; i++){\n\t\tfor(j=0; j<5; j++){\n\t\t\tfor(k=0; k<5; k++){\n\t\t\t\tif(i!=j && i!=k && j!=k){\n\t\t\t\t\tif(a[i]==a[j] && a[i]==a[k]){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint four_card(int a[]){\n\tint i, j, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){count++;}\n\t\t}\n\t\tif(count==4){return 1;}\n\t}\n\treturn 0;\n}\n\nint straight(int a[]){\n\tint i, j, m, flag=0, count;\n\t\n\tfor(i=0; i<5; i++){\n\t\tfor(j=i; j<5; j++){\n\t\t\tif(a[i]>a[j]){\n\t\t\t\tm=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=m;\n\t\t\t}\n\t\t}\n\t}\n\tcount=0;\n\tfor(i=0; i<5; i++){\n\t\tif(a[i]!=a[0]+i){\n\t\t\tflag=0;\n\t\t}else{\n\t\t\tflag++;\n\t\t}\n\t}\n\t\n\tif(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13){\n\t\tflag++;\n\t}\n\t\n\tif(a[0]==1 && a[1]==2){\n\t\tflag=0;\n\t}\n\t\n\tif(flag){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint full_house(int a[]){\n\tint i, j, k, m, count;\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1){\n\t\t\t\tcount++;\n\t\t\t\tm=i;\n\t\t\t}\n\t\t}\n\t\tif(count==3){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(count!=3){;return 0;}\n\t\n\tfor(i=0; i<13; i++){\n\t\tcount=0;\n\t\tfor(j=0; j<5; j++){\n\t\t\tif(a[j]==i+1 && m!=i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count==2){\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint output(int n){\n\tswitch(n){\n\t\tcase 1:\n\t\t\tprintf(\"null\\n\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tprintf(\"three card\\n\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tprintf(\"straight\\n\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tprintf(\"full house\\n\");\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tprintf(\"four card\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint main (void){\n\tint cards[5], result;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4])!=EOF){\n\t\tresult=1;\n\t\tif(one_pair(cards)){\n\t\t\tresult=bigger(result, 2);\n\t\t}\n\t\tif(two_pair(cards)){\n\t\t\tresult=bigger(result, 3);\n\t\t}\n\t\tif(three_card(cards)){\n\t\t\tresult=bigger(result, 4);\n\t\t}\n\t\tif(straight(cards)){\n\t\t\tresult=bigger(result, 5);\n\t\t}\n\t\tif(full_house(cards)){\n\t\t\tresult=bigger(result, 6);\n\t\t}\n\t\tif(four_card(cards)){\n\t\t\tresult=bigger(result, 7);\n\t\t}\n\t\toutput(result);\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n\tint a[5],c[5]={0};\n\tint i;\n\tchar x;\n\twhile(cin>>a[0]){\n\t\tif(a[0]==1)a[0]+=13;\n\t\tfor(i=1;i<5;i++){\n\t\t\tcin>>x>>a[i];\n\t\t\tif(a[i]==1)a[i]+=13;\n\t\t\t}\n\t\t\n\t\tc[0]=c[1]=c[2]=c[3]=0;\n\t\tsort(&a[0],&a[5]);\n\t\t\t\n\t\tfor(i=0;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[0]++; else break;\n\t\tfor(i=i+1;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[1]++; else break;\n\t\tfor(i=i+1;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[2]++; else break;\n\t\tfor(i=i+1;i<5;i++)\n\t\t\tif(a[i]==a[i+1])c[3]++; else break;\n\t\t\t\n\t\tif(c[0]==0&&c[1]==0&&c[2]==0&&c[3]==0)\n\t\t\tfor(i=0;i<4;i++)if(a[i]+1==a[i+1])c[4]=1; else {c[4]=0;break;}\n\t\t\n\t\tsort(c,c+4,greater<int>());\n\t\tif(c[0]==2&&c[1]==1)cout<<\"full house\";\n\t\telse if(c[0]==1&&c[1]==1)cout<<\"two pair\";\n\t\telse if(c[0]==1)cout<<\"one pair\";\n\t\telse if(c[0]==2)cout<<\"three card\";\n\t\telse if(c[0]==3)cout<<\"four card\";\n\t\telse if(c[0]==4)cout<<\"five card\";\n\t\telse if(c[4]==1)cout<<\"straight\";\n\t\telse cout<<\"null\";\n\t\tcout<<endl;\n\t\t\n\t}\n\n\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <map> \nusing namespace std;\n \nconst int MAX= 10000100;\n\n#define loop(i,a,b) for(int i = a ; i < b ; i ++)\n#define rep(i,a) loop(i,0,a)\n#define all(a) (a).begin(),(a).end()\n#define ll long long int\n#define gcd(a,b) __gcd(a,b)\n\nint GCD(int a, int b) {if(!b) return a; return gcd(b, a%b);}\nint lcm(int a, int b) {return a*b / gcd(a, b);}\n\nint main(void){\n  string str;\n  while(cin>>str){\n    vector<int> card;\n    vector<int> cnt(13,0);\n    for(int i = 0 ; i < str.size() ; i ++){\n      if('1' <= str[i] && str[1] <= '9'){\n\tif('0' <= str[i + 1] && str[i + 1] <= '9'){\n\t  int num = 10 + str[i + 1] - '0';\n\t  card.push_back(num);\n\t  cnt[--num] ++;\n\t  i ++;\n\t}else{\n\t  int num = str[i] - '0';\n\t  card.push_back(num);\n\t  cnt[--num] ++;\n\t}\n      } \n    }\n    sort(card.begin(),card.end());\n    int ans[2][2] = {0,0,0,0};\n    int c1,c2;\n    c1 = c2 = 0;\n    bool straight = false;\n    rep(i,cnt.size()){\n      if(cnt[i] == 1 && \n\t cnt[i + 1] == 1 && \n\t cnt[i + 2] == 1 && \n\t cnt[i + 3] == 1 && \n\t cnt[i + 4] == 1){\n\tstraight = true;\n\tbreak;\n      }\n      if(cnt[i] > 1 && c1 == 0)\n\tc1 = cnt[i];\n      else if(cnt[i] > 1)\n\tc2 = cnt[i];\n    }\n    if(straight)\n      cout<<\"straight\";\n    else if(c1 == 5)\n      cout<<\"five card\";\n    else if(c1 == 4 || c2 == 4)\n      cout<<\"four card\";\n    else if((c1 == 3 && c2 == 2) || \n\t    (c1 == 2 && c2 == 3)) \n      cout<<\"full house\";\n    else if(c1 == 3)\n      cout<<\"three card\";\n    else if(c1 == 2 && c2 == 2)\n      cout<<\"two pair\";\n    else if(c1 == 2)\n      cout<<\"one pair\";\n    else if(cnt[ 9] == 1 && \n\t    cnt[10] == 1 && \n\t    cnt[11] == 1 && \n\t    cnt[12] == 1 && \n\t    cnt[ 0] == 1)\n      cout<<\"straight\";\n    else \n      cout<<\"null\";\n    cout<<endl;\n    \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<vector>\n#include<utility>\n#include<queue>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<stack>\n#include<typeinfo>\nusing namespace std;\ntypedef pair<int, int> P;\nint main() {\n\tchar ch, straight, four, three, twop, onep;\n\tint check[5] = { 1,10,11,12,13 }, st = 0;\n\tint card[5];\twhile (cin >> card[0] >> ch >> card[1] >> ch >> card[2] >> ch >> card[3] >> ch >> card[4]) {\n\t\tint cnt[14] = { 0 };\n\t\tsort(card, card + 5);\n\t\tfour = false;\n\t\tthree = false;\n\t\ttwop = false;\n\t\tonep = false;\n\t\tstraight = true;\n\t\tst = 0;\n\t\tfor (int i = 0; i < 5; ++i) {\n\t\t\tif (i != 0 && card[i - 1] + 1 != card[i])straight = false;\n\t\t\tif (card[i] == check[i])st++;\n\t\t\tcnt[card[i]]++;\n\t\t}\n\t\tif (st == 5)straight = true;\n\t\tfor (int i = 0; i < 5; ++i) {\n\t\t\tif (i != 0 && card[i - 1] == card[i])continue;\n\t\t\tif (cnt[card[i]] == 4) {\n\t\t\t\tfour = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (cnt[card[i]] == 3) three = true;\n\t\t\telse if (cnt[card[i]] == 2 && onep)twop = true;\n\t\t\telse if (cnt[card[i]] == 2)onep = true;\n\t\t}\n\n\t\tif (four)cout << \"four card\" << endl;\n\t\telse if (onep&&three)cout << \"full house\" << endl;\n\t\telse if (straight)cout << \"straight\" << endl;\n\t\telse if (three)cout << \"three card\" << endl;\n\t\telse if (twop)cout << \"two pair\" << endl;\n\t\telse if (onep)cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\n\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define _ ios_base::sync_with_stdio(0);cin.tie(0);\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nusing namespace std;\nconst int MAX_N=5;\nconst int BINS=13;\nint main(){ _;\n  int a[MAX_N];\n  int b[BINS+1];\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=-1){\n    REP(i,BINS+1) b[i]=0;\n    REP(i,MAX_N) b[a[i]-1]++;\n    b[13]=b[0];\n    for(int i=0;i<BINS;i++)\n      if(b[i]==4){\n\tcout<<\"four card\"<<endl;\n\tgoto NEXT;\n      }\n    for(int i=0;i<BINS;i++)\n      for(int j=0;j<BINS;j++)\n\tif(b[i]==2&&b[j]==3){\n\t  cout<<\"full house\"<<endl;\n\t  goto NEXT;\n\t}\n    for(int i=0;i<10;i++)\n      if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n\tcout<<\"straight\"<<endl;\n\tgoto NEXT;\n      }\n    for(int i=0;i<BINS;i++)\n      if(b[i]==3){\n\tcout<<\"three card\"<<endl;\n\tgoto NEXT;\n      }\n    for(int i=0;i<BINS;i++)\n      for(int j=0;j<BINS;j++)\n\tif(i!=j&&b[i]==2&&b[j]==2){\n\t  cout<<\"two pair\"<<endl;\n\t  goto NEXT;\n\t}\n    for(int i=0;i<BINS;i++)\n      if(b[i]==2){\n\tcout<<\"one pair\"<<endl;\n\tgoto NEXT;\n      }\n    cout<<\"null\"<<endl;\n  NEXT:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\nint cards[5];\nint card[14]={0};\n\n\nint main()\n{\n\tstart:\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4])!=EOF)\n\t{\n\t\tfill(card,card+14,0);\n\t\tfor(int i=0;i<5;i++)\n\t\t{\n\t\t\tcard[cards[i]-1]++;\n\t\t\tif(cards[i]==1)card[13]++;\n\t\t}\n\t\tfor(int i=0;i<13;i++)\n\t\t{\n\t\t\tif(card[i]==4)\n\t\t\t{\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tgoto start;\n\t\t\t}\n\t\t\tif(card[i]==3)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<13;j++)\n\t\t\t\t{\n\t\t\t\t\tif(card[j]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t    goto start;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\t\tgoto start;\n\t\t\t}\n\t\t}\n\t\tint flag=0;\n\t\tfor(int i=0;i<13;i++)\n\t\t{\n\t\t\tif(card[i]==2)flag++;\n\t\t}\n\t\tif(flag==2)\n\t\t{\n\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\tgoto start;\n\t\t}\n\t\tif(flag==1)\n\t\t{\n\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t\tgoto start;\n\t\t}\n\t\tfor(int i=0;i<14;i++)\n\t\t{\n\t\t\tint k=1;\n\t\t\tfor(int j=0;j<5;j++)\n\t\t\t{\n\t\t\t\tk*=card[i+j];\n\t\t\t}\n\t\t\tif(k==1)\n\t\t\t{\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tgoto start;\n\t\t\t}\n\t\t}\n\t\tprintf(\"null\\n\");\n\t\tgoto start;\n\t}\n　　　　return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  vector<int> hand(5);\n  char c;\n  \n  while(cin >> hand[0]>>c>>hand[1]>>c>>hand[2]>>c>>hand[3]>>c>>hand[4]){\n    vector<int> cnt(15, 0);\n    for(int i=0; i<5; i++){\n      cnt[hand[i]]++;\n      if(hand[i] == 1) cnt[14]++;\n    }\n    bool flag = false;\n\n    // four card\n    for(int i=1; i<=13; i++){\n      if(cnt[i] == 4){\n        cout << \"four card\" << endl; flag = true;\n      }\n    }\n    if(flag) continue;\n\n    // three card or full house\n    for(int i=1; i<=13; i++){\n      if(cnt[i] == 3){\n        for(int j=1; j<=13; j++){\n          if(cnt[j] == 2){\n            cout << \"full house\" << endl; flag = true;\n          }\n        }\n        if(flag) break;\n        cout << \"three card\" << endl; flag = true;\n      }\n    }\n    if(flag) continue;\n\n    // two pair or one pair\n    for(int i=1; i<=13; i++){\n      if(cnt[i] == 2){\n        for(int j=i+1; j<=13; j++){\n          if(cnt[j] == 2){\n            cout << \"two pair\" << endl; flag = true;\n          }\n        }\n        if(flag) break;\n        cout << \"one pair\" << endl; flag = true;\n      }\n    }\n    if(flag) continue;\n\n    // straight\n    for(int i=1; i<=13; i++){\n      if(cnt[i] == 1 && cnt[i+1] == 1 && cnt[i+2] == 1 && cnt[i+3] == 1 && cnt[i+4] == 1){\n        cout << \"straight\" << endl; flag = true;\n      }\n    }\n    if(flag) continue;\n\n    //null\n    cout << \"null\" << endl;\n  }\n\n}\n  \n  \n"
  },
  {
    "language": "C++",
    "code": "/* AOJ 0038*/\n\n#include<iostream>\n#include<queue>\n\nusing namespace std;\n\nvoid Swap(int *a,int *b){\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid BabbleSort(int *data,int n){\n\n\tint i,j;\n\tfor(i=0;i<n-1;i++){\n\t\tfor(j=n-1;j>i;j--){\n\t\t\tif(data[j] <= data[j-1]){\n\t\t\t\tSwap(&data[j],&data[j-1]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n//onePair or threeCards or fourCards\nint isSameCard(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tBabbleSort(tmp,13);\n\n\tif(tmp[12]==3 && tmp[11] == 2){\n\t\treturn 6;//フルハウス\n\t}\n\telse if(tmp[12] == 4){\n\t\treturn 7;//フォーカード\n\t}\n\telse if(tmp[12] == 3){\n\t\treturn 4;\n\t}\n\telse if(tmp[12] == 2 && tmp[11] == 2){\n\t\treturn 3;\n\t}\n\telse if(tmp[12] == 2){\n\t\treturn 2;\n\t}\n\telse{\n\t\treturn 1;\n\t}\n}\n\nint isStraight(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tif(tmp[9] == 1 && tmp[10] == 1 && tmp[11] == 1 && tmp[12]==1 && tmp[0]==1){\n\t\treturn 5;\n\t}\n\telse{\n\t\tfor(int i=0;i<13-5;i++){\n\t\t\tif(tmp[i]==1&&tmp[i+1]==1&&tmp[i+2]==1&&tmp[i+3]==1&&tmp[i+4]==1){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\nint main(){\n\n\tint data[5];\n\tchar tmp;\n\n\tqueue<int> ans;\n\n\twhile(cin>>data[0]){\n\t\tif(data[0]==0){\n\t\t\tbreak;\n\t\t}\n\t\tcin>>tmp;\n\t\tcin>>data[1];\n\t\tcin>>tmp;\n\t\tcin>>data[2];\n\t\tcin>>tmp;\n\t\tcin>>data[3];\n\t\tcin>>tmp;\n\t\tcin>>data[4];\n\n\t\tBabbleSort(data,5);\n\n\t\tif(isSameCard(data)>=2){\n\t\t\tans.push(isSameCard(data));\n\t\t}\n\t\telse{\n\t\t\tans.push(isStraight(data));\n\t\t}\n\n\t}\n\n\tint size=ans.size();\n\n\tfor(int i=0;i<size;i++){\n\t\tswitch(ans.front()){\n\t\tcase 7:\n\t\t\tcout<<\"four cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tcout<<\"full house\"<<endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"three cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tcout<<\"null\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t\tans.pop();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nint main()\n{\n\tvector<int> H(5);\n\t\twhile(~scanf(\"%d,%d,%d,%d,%d\", &H[0] ,&H[1] ,&H[2] ,&H[3] ,&H[4]))\n\t\t{\n\t\t\tvector<int> L(32, 0);\n\t\t\tint kind = 0;\n\t\t\tfor(int i = 0; i < 5; i++)\n\t\t\t{\n\t\t\t\tif(L[H[i]-1] == 0)\n\t\t\t\t{\n\t\t\t\t\tkind++;\n\t\t\t\t}\n\t\t\t\tL[H[i]-1]++;\n\t\t\t}\n\n\t\t\tif(kind == 2)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 4)\n\t\t\t\t{\n\t\t\t\t\tcout << \"four pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcout << \"error 1\" << endl;\n\t\t\t}\n\t\t\telse if(kind == 5)\n\t\t\t{\n\t\t\t\tbool straight = false;\n\t\t\t\tfor(int i = 0; i < 9; i++)\n\t\t\t\t{\n\t\t\t\t\tL[13] = L[0];\n\t\t\t\t\tif(L[i] && L[i+1] && L[i+2] && L[i+3] && L[i+4])\n\t\t\t\t\t{\n\t\t\t\t\t\tstraight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(straight)\n\t\t\t\t{\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 3)\n\t\t\t{\n\t\t\t\tint mx = *max_element(L.begin(), L.end());\n\t\t\t\tif(mx == 3)\n\t\t\t\t{\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(mx == 2)\n\t\t\t\t{\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(kind == 4)\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nenum Direction {R, L, U, D};\n\nbool input(int b[])\n{\n\tchar dummy;\n\tfor (int i=0; i<5; i++) {\n\t\tif ( !(cin >> b[i]) ) return false;\n\t\tif (i<4) cin >> dummy;\n\t}\n\treturn true;\n}\n\nvoid sort5(int a[])\n{\n\tfor (int i=0; i<5; i++) {\n\t\tfor (int j=4; j>i; j--) {\n\t\t\tif (a[j-1] > a[j]) {\n\t\t\t\tint tmp = a[j];\ta[j] = a[j-1]; a[j-1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint hand[5];\n\twhile ( input(hand) ) {\n\t\tsort5(hand);\n\t\tif ( hand[0] == hand[3] || hand[1] == hand[4] ) {\n\t\t\tcout << \"four card\";\n\t\t} else if ( (hand[0] == hand[2] && hand[3] == hand[4]) || (hand[0] == hand[1] && hand[2] == hand[4]) ) {\n\t\t\tcout << \"full house\";\n\t\t} else if ( hand[0] + 1 == hand[1] && hand[1] + 1 == hand[2] && hand[2] + 1 == hand[3] && hand[3] + 1 == hand[4] ) {\n\t\t\tcout << \"straight\";\n\t\t} else if ( hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13 ) {\n\t\t\tcout << \"straight\";\n\t\t} else if ( hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4] ) {\n\t\t\tcout << \"three card\";\n\t\t} else if ( hand[0] == hand[1] && hand[2] == hand[3] || hand[0] == hand[1] && hand[3] == hand[4] || hand[1] == hand[2] && hand[3] == hand[4] ) {\n\t\t\tcout << \"two pair\";\n\t\t} else if ( hand[0] == hand[1] || hand[1] == hand[2] || hand[2] == hand[3] || hand[3] == hand[4]) {\n\t\t\tcout << \"one pair\";\n\t\t} else cout << \"null\";\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* AOJ 0038*/\n\n#include<iostream>\n#include<queue>\n\nusing namespace std;\n\nvoid Swap(int *a,int *b){\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid BabbleSort(int *data,int n){\n\n\tint i,j;\n\tfor(i=0;i<n-1;i++){\n\t\tfor(j=n-1;j>i;j--){\n\t\t\tif(data[j] <= data[j-1]){\n\t\t\t\tSwap(&data[j],&data[j-1]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n//onePair or threeCards or fourCards\nint isSameCard(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tBabbleSort(tmp,13);\n\n\tif(tmp[12]==3 && tmp[11] == 2){\n\t\treturn 6;//フルハウス\n\t}\n\telse if(tmp[12] == 4){\n\t\treturn 7;//フォーカード\n\t}\n\telse if(tmp[12] == 3){\n\t\treturn 4;\n\t}\n\telse if(tmp[12] == 2 && tmp[11] == 2){\n\t\treturn 3;\n\t}\n\telse if(tmp[12] == 2){\n\t\treturn 2;\n\t}\n\telse{\n\t\treturn 1;\n\t}\n}\n\nint isStraight(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tif(tmp[9] == 1 && tmp[10] == 1 && tmp[11] == 1 && tmp[12]==1 && tmp[0]==1){\n\t\treturn 5;\n\t}\n\telse{\n\t\tfor(int i=0;i<=13-5;i++){\n\t\t\tif(tmp[i]==1&&tmp[i+1]==1&&tmp[i+2]==1&&tmp[i+3]==1&&tmp[i+4]==1){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\nint main(){\n\n\tint data[5];\n\tchar tmp;\n\n\tqueue<int> ans;\n\n\twhile(cin>>data[0]){\n\t\tif(data[0]==0){\n\t\t\tbreak;\n\t\t}\n\t\tcin>>tmp;\n\t\tcin>>data[1];\n\t\tcin>>tmp;\n\t\tcin>>data[2];\n\t\tcin>>tmp;\n\t\tcin>>data[3];\n\t\tcin>>tmp;\n\t\tcin>>data[4];\n\n\t\tBabbleSort(data,5);\n\n\t\tif(isSameCard(data)>=2){\n\t\t\tans.push(isSameCard(data));\n\t\t}\n\t\telse{\n\t\t\tans.push(isStraight(data));\n\t\t}\n\n\t}\n\n\tint size=ans.size();\n\n\tfor(int i=0;i<size;i++){\n\t\tswitch(ans.front()){\n\t\tcase 7:\n\t\t\tcout<<\"four cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tcout<<\"full house\"<<endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"three cards\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tcout<<\"null\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t\tans.pop();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint ary[20],te[5],num[10];\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&te[0],&te[1],&te[2],&te[3],&te[4])>0){\n\t\tfill(ary,ary+20,0);\n\t\tfill(num,num+10,0);\n\t\tfor(int i=0;i<5;i++) ary[te[i]]++;\n\t\tfor(int i=1;i<=13;i++) num[ary[i]]++;\n\t\tbool isstt=false;\n\t\tfor(int i=1;i<10;i++){\n\t\t\tbool fla=true;\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(ary[i+j]!=1){\n\t\t\t\t\tfla=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(fla) isstt=true;\n\t\t}\n\t\tif((!isstt)&&ary[1]==1&&ary[10]==1&&ary[11]==1&&ary[12]==1&&ary[13]==1) isstt=true;\n\t\tif(num[4]>0) cout<<\"four card\"<<endl;\n\t\telse if(num[3]>0&&num[2]>0) cout<<\"full house\"<<endl;\n\t\telse if(isstt) cout<<\"straight\"<<endl;\n\t\telse if(num[3]>0) cout<<\"three card\"<<endl;\n\t\telse if(num[2]>1) cout<<\"two pair\"<<endl;\n\t\telse if(num[2]>0) cout<<\"one pair\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint straight(int[]);\n\nint main() {\n\n\tint ans, h[5];\n\n\twhile(1) {\n\t\tans=0;\n\t\tfor(int i=0; i<5; i++) {\n\t\t\tcin >> h[i];\n\t\t}\n\t\tif(cin.eof())\n\t\t\tbreak;\n\t\tsort(h, h+5);\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(h))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n\n}\n\nint straight(int h[5]) {\n\n\tfor(int i=0; i<9; i++) {\n\t\tif(h[4]=i+4&&h[3]==i+3&&h[2]==i+2&&h[1]==i+1&&h[0]==i||h[0]==1&&h[1]==10&&h[2]==11&&h[3]==12&&h[4]==13)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\nusing namespace std;\n\nclass Hand\n{\n  public:\n    Hand(vector<int> cards);\n\n  public:\n    string what_hand();\n\n  private:\n    bool is_one_pair();\n    bool is_two_pair();\n    bool is_three_card();\n    bool is_straight();\n    bool is_full_house();\n    bool is_four_card();\n\n  private:\n    vector<int> m_hand;\n};\n\nHand::Hand(vector<int> cards) :\n  m_hand(5)\n{\n  for (int i = 0; i < 5; ++i)\n  {\n    m_hand[i] = cards[i];\n  }\n  sort(m_hand.begin(), m_hand.end());\n}\n\nstring Hand::what_hand()\n{\n  if (is_four_card())\n  {\n    return \"four card\";\n  }\n  else if (is_full_house())\n  {\n    return \"full house\";\n  }\n  else if (is_straight())\n  {\n    return \"straight\";\n  }\n  else if (is_three_card())\n  {\n    return \"three card\";\n  }\n  else if (is_two_pair())\n  {\n    return \"two pair\";\n  }\n  else if (is_one_pair())\n  {\n    return \"one pair\";\n  }\n  else\n  {\n    return \"null\";\n  }\n}\n\nbool Hand::is_one_pair()\n{\n  int prev = -1;\n  for (int card : m_hand)\n  {\n    if (prev == -1)\n    {\n      prev = card;\n      continue;\n    }\n    if (prev == card) return true;\n    prev = card;\n  }\n  return false;\n}\n\nbool Hand::is_two_pair()\n{\n  if ((m_hand[0] == m_hand[1] and m_hand[2] == m_hand[3]) or\n      (m_hand[0] == m_hand[1] and m_hand[3] == m_hand[4]) or\n      (m_hand[1] == m_hand[2] and m_hand[3] == m_hand[4]) )\n  {\n    return true;\n  }\n  else\n  {\n  return false;\n  }\n}\n\nbool Hand::is_three_card()\n{\n  for (int i = 0; i < 3; ++i)\n  {\n    if (m_hand[i] == m_hand[i+1] and m_hand[i] == m_hand[i+2])\n    {\n      return true;\n    }\n  }\n  return false;\n}\n\nbool Hand::is_straight()\n{\n  if (m_hand[0] == 1 and m_hand[1] == 10 and m_hand[2] == 11 and \n      m_hand[3] == 12 and m_hand[4] == 13)\n  {\n    return true;\n  }\n\n  int prev = -1;\n  for (int card : m_hand)\n  {\n    if (prev == -1)\n    {\n      prev = card;\n      continue;\n    }\n    if (prev + 1 != card)\n    {\n      return false;\n    }\n    prev = card;\n  }\n  return true;\n}\n\nbool Hand::is_full_house()\n{\n  if ((m_hand[0] == m_hand[1] and m_hand[0] == m_hand[2] and\n       m_hand[3] == m_hand[4]) or\n      (m_hand[2] == m_hand[3] and m_hand[2] == m_hand[4] and\n       m_hand[0] == m_hand[1]) )\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\n\nbool Hand::is_four_card()\n{\n  if ((m_hand[0] == m_hand[1] and m_hand[0] == m_hand[2] and m_hand[0] == m_hand[3]) or\n      (m_hand[1] == m_hand[2] and m_hand[1] == m_hand[3] and m_hand[1] == m_hand[4]) )\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\n\nint main(void)\n{\n  cin >> noskipws;\n  while (true)\n  {\n    vector<int> cards(5);\n    char buf_ch;\n    for (int& card : cards)\n    {\n      cin >> card;\n      cin >> buf_ch;\n    }\n    if (cin.eof() ) break;\n\n    Hand hand(cards);\n    cout << hand.what_hand() << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef _GLIBCXX_NO_ASSERT\n#include <cassert>\n#endif\n#include <cctype>\n#include <cerrno>\n#include <cfloat>\n#include <ciso646>\n#include <climits>\n#include <clocale>\n#include <cmath>\n#include <csetjmp>\n#include <csignal>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n\n#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#include <ccomplex>\n#include <cfenv>\n#include <cinttypes>\n#include <cstdbool>\n#include <cstdint>\n#include <ctgmath>\n#include <cwchar>\n#include <cwctype>\n#endif\n\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n\n#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#include <array>\n#include <atomic>\n#include <chrono>\n#include <condition_variable>\n#include <forward_list>\n#include <future>\n#include <initializer_list>\n#include <mutex>\n#include <random>\n#include <ratio>\n#include <regex>\n#include <system_error>\n#include <thread>\n#include <tuple>\n#include <typeindex>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#endif\n\n#include <array>\n\nusing namespace std;\nint a[5] = {};\n\nbool for_card ()\n{\n\tarray<int , 14> d{};\n\tfor( size_t i = 0; i < 5; i++ )\n\t{\n\t\td[a[i]]++;\n\t}\n\tsort ( d.rbegin () , d.rend () );\n\treturn d[0] == 4;\n}\n\nbool fullhouse ()\n{\n\tarray<int , 14> d{};\n\tfor( size_t i = 0; i < 5; i++ )\n\t{\n\t\td[a[i]]++;\n\t}\n\tsort ( d.rbegin () , d.rend () );\n\treturn d[0] == 3 && d[1] == 2;\n}\n\nbool straight ()\n{\n\tarray<int , 14> d{};\n\tfor( size_t i = 0; i < 5; i++ )\n\t{\n\t\td[a[i]]++;\n\t\tif( d[a[i]] > 1 )return 0;\n\t}\n\tint k = 0;\n\twhile( d[k] == 0 )k++;\n\tif( d[1] && d[10] && d[11] && d[12] && d[13] )return 1;\n\tfor( int i = k; i < k + 5; i++ )\n\t{\n\t\tif( d[i] == 0 )return 0;\n\t}\n\treturn 1;\n}\n\nbool there_card ()\n{\n\tarray<int , 14> d{};\n\tfor( size_t i = 0; i < 5; i++ )\n\t{\n\t\td[a[i]]++;\n\t}\n\tsort ( d.rbegin () , d.rend () );\n\treturn d[0] == 3;\n}\n\nbool two_pair ()\n{\n\tarray<int , 14> d{};\n\tfor( size_t i = 0; i < 5; i++ )\n\t{\n\t\td[a[i]]++;\n\t}\n\tsort ( d.rbegin () , d.rend () );\n\treturn d[0] == 2 && d[1] == 2;\n}\n\nbool one_pair ()\n{\n\tarray<int , 14> d{};\n\tfor( size_t i = 0; i < 5; i++ )\n\t{\n\t\td[a[i]]++;\n\t}\n\tsort ( d.rbegin () , d.rend () );\n\treturn d[0] == 2;\n}\n\n\n\nint main ()\n{\n\tchar x;\n\twhile( cin >> a[0] >> x >> a[1] >> x >> a[2] >> x >> a[3] >> x >> a[4] )\n\t{\n\t\tif( for_card () )\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t} else if( fullhouse () )\n\t\t{\n\t\t\tcout << \"full house\" << endl;\n\t\t} else if( straight () )\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t} else if( there_card () )\n\t\t{\n\t\t\tcout << \"three card\" << endl;\n\t\t} else if( two_pair () )\n\t\t{\n\t\t\tcout << \"two pair\" << endl;\n\t\t} else if( one_pair () )\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t} else\n\t\t{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main() {\nint a[5];\nchar q,w,e,r;\nwhile(cin>>a[0]>>q>>a[1]>>w>>a[2]>>e>>a[3]>>r>>a[4]){\n\tfor(int kk=0;kk<=3;kk++){\n\t\tfor(int ll=kk+1;ll<=4;ll++){\n\t\t\tif(a[kk]>a[ll]){\n\t\t\t\tint t;\n\t\t\t\tt=a[ll];\n\t\t\t\ta[ll]=a[kk];\n\t\t\t\ta[kk]=t;\n\t\t\t}\n\t\t}\n\t}\n\tif(a[0]==a[3]||a[1]==a[4]){\n\t\tcout<<\"four card\"<<endl;\n\t}\n\telse{\n\t\tif((a[0]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[4])){\n\t\t\tcout<<\"full house\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tif(((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4]))||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\n\t\t\t\tcout<<\"straight\"<<endl;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a[0]==a[2]||a[1]==a[3]||a[2]==a[4]){\n\t\t\t\t\tcout<<\"three card\"<<endl;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4])){\n\t\t\t\t\t\tcout<<\"two pair\"<<endl;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4]){\n\t\t\t\t\t\t\tcout<<\"one pair\"<<endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcout<<\"null\"<<endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint main(){\n\tint n[5], num[14], pair[3],i;\n\twhile (scanf_s(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4]) != EOF){\n\t\ti = 0;\n\t\tfor (int i = 0; i < 14; i++) num[i] = 0;\n\t\tfor (int i = 0; i < 3; i++) pair[i] = 0;\n\t\tfor (int i = 0; i < 5; i++) num[n[i] - 1]++;\n\t\tfor (int i = 0; i < 13; i++){\n\t\t\tif (num[i] > 1) pair[num[i] - 2]++;\n\t\t}\n\t\tif (pair[2]) cout << \"four card\" << endl;\n\t\telse if (pair[0] && pair[1]) cout << \"full house\" << endl;\n\t\telse if (pair[1]) cout << \"three card\" << endl;\n\t\telse if (pair[0] == 2) cout << \"two pair\" << endl;\n\t\telse if (pair[0]) cout << \"one pair\" << endl;\n\t\telse{\n\t\t\tnum[13] = num[0];\n\t\t\tfor (i = 0; i < 10; i++){\n\t\t\t\tif (num[i] == 1 && num[i] == num[i + 1] && num[i + 1] == num[i + 2] && num[i + 2] == num[i + 3] && num[i + 3] == num[i + 4]) {\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (i == 10)  cout << \"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nbool find_two(vector<int> v, int mode[14]) {\n    for(int r = 0; r < 5; r++) {\n        if(mode[v[r]] == 2) return(true);\n    }\n    return(false);\n}\nbool isSequencial(vector<int> v) {\n    if((v[0]==1&&v[1]==2&&v[2]==3&&v[3]==4&&v[4]==5) || (v[0]==1&&v[1]==10&&v[2]==11&&v[3]==12&&v[4]==13)) { return(true);}\n    for(int r = 1; r < 5; r++) {\n        if(v[r] - 1 != v[r - 1]) return(false);\n    }\n    return(true);\n}\n\nint main(void) {\n    vector<int> v(5);\n    while(scanf(\"%d,%d,%d,%d,%d\", &v[0], &v[1], &v[2], &v[3], &v[4]) != EOF) {\n        //頻度記録\n        int mode[14]; memset(mode, 0, sizeof(mode));\n        int max = -1;\n        for(int r = 0; r < 5; r++) {\n            mode[v[r]]++; if(mode[v[r]] > max) max = mode[v[r]];\n        }\n        sort(v.begin(), v.end());\n        if(max == 4) {\n            cout << \"four card\" << endl;\n        } else if(max == 3) {\n            if(find_two(v, mode)) cout << \"full house\" << endl;\n            else                  cout << \"three card\" << endl;\n        } else if(isSequencial(v)) {\n            cout << \"straight\" << endl;\n        } else if(max == 2) {\n            int count = 0;\n            for(int r = 0; r < 14; r++) {\n                if(mode[r] == 2) count++;\n            }\n            if(count == 2) {\n                cout << \"two pair\" << endl;\n            } else if(count == 1) {\n                cout << \"one pair\" << endl;\n            } else cout << \"null\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n    }\n    return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nint straight(int[]);\n\nint main() {\n\n\tint ans, h[5];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &h[0], &h[1], &h[2], &h[3], &h[4])!=EOF) {\n\t\tans=0;\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(h))\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n\n}\n\nint straight(int h[5]) {\n\t\n\tsort(h, h+5);\n\tfor(int i=0; i<9; i++) {\n\t\tif(h[0]==i&&h[1]==i+1&&h[2]==i+2&&h[3]==i+3&&h[4]==i+4||h[0]==1&&h[1]==10&&h[2]==11&&h[3]==12&&h[4]==13)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n\n\tint card[5], cnt, max_cnt, min_cnt, cnt_one;\n\tchar cnm;\n\n\twhile(cin >> card[0]){\n\t\tcnt = 1;\n\t\tfor(int i=1; i<9; i++){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tcin >> card[cnt];\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse cin >> cnm;\n\t\t}\n\t\t\n\t\tsort(card, card + 5);\n\t\tmax_cnt = 1;\n\t\tmin_cnt = 5;\n\t\tcnt_one = 0;\n\t\tcnt = 1;\n\t\tfor(int i=0; i<4; i++){\n\t\t\tif(card[i] == card[i+1]) cnt++;\n\t\t\telse {\n\t\t\t\tmin_cnt = min(min_cnt, cnt);\n\t\t\t\tif(cnt == 1) cnt_one++;\n\t\t\t\tcnt = 1;\n\t\t\t}\n\t\t\tmax_cnt = max(max_cnt, cnt);\n\t\t}\n\t\tif(card[3] != card[4]) cnt_one++;\n\n\t\tif(max_cnt == 4) cout << \"four card\" << endl;\n\t\telse if(max_cnt == 3){\n\t\t\tif(min_cnt == 1) cout << \"three card\" << endl;\n\t\t\telse cout << \"full house\" << endl;\n\t\t}\n\t\telse if(max_cnt == 2){\n\t\t\tif(cnt_one == 3) cout << \"one pair\" << endl;\n\t\t\telse cout << \"two pair\" << endl;\n\t\t}\n\t\telse if(card[0] + 4 == card[4] || (card[0] == 1 && card[1] == 10)){\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse cout << \"null\" << endl;\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\nint max(const void* x,const void* y);\nint main(){\n\tfor(;;){\n\t\tint hand[5];\n\t\tif(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4]) == EOF){break;}\n\t\tqsort(hand,5,sizeof(int),max);\n\t\tint f = 0;\n\t\tfor(int i=0; i<5; i++){\n\t\t\tif(hand[i] == hand[i+1] && hand[i+1] == hand[i+2] && hand[i+2] == hand[i+3]){f = 1;i+=3;}\n\t\t\telse if(hand[i] == hand[i+1] && hand[i+1] == hand[i+2]){f += 2;i+=2;}\n\t\t\telse if(hand[i] == hand[i+1]){f += 3;i+=1;}\n\t\t}\n\t\tif(hand[0]+1 == hand[1] && hand[1]+1 == hand[2] && hand[2]+1 == hand[3] && hand[3]+1 == hand[4]){f = 10;}\n\t\tif(hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13){f = 10;}\n\t\tif(f == 1){cout <<\"four card\"<<endl;}\n\t\telse if(f == 2){cout <<\"three card\"<<endl;}\n\t\telse if(f == 3){cout <<\"one pair\"<<endl;}\n\t\telse if(f == 6){cout <<\"two pair\"<<endl;}\n\t\telse if(f == 5){cout <<\"full house\"<<endl;}\n\t\telse if(f == 10){cout <<\"straight\"<<endl;}\n\t\telse if(f == 0){cout <<\"null\"<<endl;}\n\t}\n\treturn 0;\n}\nint max(const void* x,const void* y){\n\treturn *(int*)x - *(int*)y;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm.h>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint c1;\n\tint c2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\t\n\t\tc1 = 0;\n\t\tc2 = 0;\n\t\tstraight = 0;\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tc1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tc2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((c1 == 1 && c2 == 0) || (c1 == 0 && c2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (c1 == 1 && c1 == c2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (c1 + c2 == 3 && c1 != 0 && c2 != 0){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\t\n\t\telse if (c1 == 2 || c2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (c1 == 3 || c2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <math.h>\n#include <map>\n#include <iomanip>\n#include <vector>\n#include <queue>\n#include <set>\n\n#define PI 3.14159265359\n\n#define INF 1000000;\n\n#define rep(i, n) for(int i=0; i<n; i++)\n#define REP(n) rep(i, n)\n\ntypedef long long ll;\n\nusing namespace std;\n\n\n/*\nclass ElectronicPetEasy\n{\npublic:\n\tstring isDifficult(int st1, int p1, int t1, int st2, int p2, int t2)\n\t{\n\t\t\n\t}\n};\n*/\n\n\nint length(int a[])\n{\n\tint res = 0, len = 0;\n\tREP(14)\n\t{\n\t\tif (a[i]) len++;\n\t\telse len = 0;\n\t\tres = max(res, len);\n\t}\n\treturn res;\n}\n\n\nint main()\n{\n\tint a[14], n;\n\tstring ans;\n\t\n\twhile (scanf(\"%d\", &n) != EOF)\n\t{\n\t\tfill(a, a + 14, 0);\n\t\ta[n - 1]++;\n\t\tif (n == 1) a[13]++;\n\t\tfor (int i=1; i<5; i++)\n\t\t{\n\t\t\tscanf(\",%d\", &n);\n\t\t\ta[n - 1]++;\n\t\t\tif (n == 1) a[13]++;\n\t\t}\n\t\tans = \"null\";\n\t\tif (count(a, a + 13, 4) == 1) ans = \"four card\";\n\t\telse if (count(a, a + 13, 3) == 1 && count(a, a + 13, 2) == 1) ans = \"full house\";\n\t\telse if (length(a) == 5) ans = \"straight\";\n\t\telse if (count(a, a + 13, 3) == 1) ans = \"three card\";\n\t\telse if (count(a, a + 13, 2) == 2) ans = \"two pair\";\n\t\telse if (count(a, a + 13, 2) == 1) ans = \"one pair\";\n\t\t\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint hist[14+1];\nint group[4+1];\nint cont;\n\nbool fourofakind() { return group[4] == 1; }\nbool fullhouse() { return (group[2] == 1 && group[3] == 1); }\nbool straight() { return cont == 5; }\nbool threeofakind() { return group[3] == 1; }\nbool twopair() { return group[2] == 2; }\nbool onepair() { return group[2] == 1; }\n\nint main() {\n\tint k;\n\twhile (scanf(\"%d\", &k) == 1) {\n\t\tfor (int i = 1; i <= 14; i++) hist[i] = 0;\n\t\tfor (int i = 0; i <= 4; i++) group[i] = 0;\n\t\tcont = 0;\n\t\tfor (int i = 0; i < 5; i++, scanf(\",%d\", &k)) {\n\t\t\thist[k]++;\n\t\t\tif (k == 1) hist[14]++;\n\t\t}\n\t\tfor (int i = 1; i <= 13; i++)\n\t\t\tgroup[hist[i]]++;\n\t\tint c = 0;\n\t\tfor (int i = 1; i <= 14; i++) {\n\t\t\tif (hist[i] == 1) {\n\t\t\t\tc++;\n\t\t\t\tif (c > cont) cont = c;\n\t\t\t} else\n\t\t\t\tc = 0;\n\t\t}\n\n\t\tif (fourofakind()) cout << \"four card\";\n\t\telse if (fullhouse()) cout << \"full house\";\n\t\telse if (straight()) cout << \"straight\";\n\t\telse if (threeofakind()) cout << \"three card\";\n\t\telse if (twopair()) cout << \"two pair\";\n\t\telse if (onepair()) cout << \"one pair\";\n\t\telse cout << \"null\";\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <deque>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint a, ans;\n\tdeque<int> h;\n\n\twhile(1) {\n\t\tfor(int i=0; i<5; i++) {\n\t\t\tcin >> a;\n\t\t\th.push_back(a);\n\t\t}\n\t\tsort(h.begin(), h.end());\n\t\twhile(1) {\n\t\t\tif(h[0]==h[1]) {\n\t\t\t\tif(h[1]==h[2]) {\n\t\t\t\t\tif(h[2]==h[3]) {\n\t\t\t\t\t\tans=7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(h[3]==h[4]) {\n\t\t\t\t\t\tans=6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tans=4;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(h[2]==h[3]&&h[3]==h[4]) {\n\t\t\t\t\tans=6;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(h[2]==h[3]||h[3]==h[4]||h[4]==h[2]) {\n\t\t\t\t\tans=3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tans=2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(h[1]==h[2]&&h[2]==h[3]&&h[3]==h[4]) {\n\t\t\t\tans=7;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(h[4]==h[3]+1&&h[3]==h[2]+1&&h[2]==h[1]+1&&h[1]==h[0]+1) {\n\t\t\t\tans=5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(h[0]==1&&h[4]==h[3]+1&&h[3]==h[2]+1&&h[2]==h[1]+1) {\n\t\t\t\tans=5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(h[1]==h[2]&&h[2]==h[3]||h[2]==h[3]&&h[3]==h[4]) {\n\t\t\t\tans=4;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(h[2]==h[3]&&h[4]==h[5]) {\n\t\t\t\tans=3;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(h[1]==h[2]||h[1]==h[3]||h[1]==h[4]||h[2]==h[3]||h[2]==h[4]||h[3]==h[4]) {\n\t\t\t\tans=2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tans=1;\n\t\t\tbreak;\n\t\t}\n\t\th.clear();\n\t\tswitch(ans) {\n\t\t\tcase 1:\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint card[13];\nint solve(){\n    int m;\n    vector<int> n;\n    for(int i=0;i<13;i++){\n        if(card[i]) n.push_back(card[i]);\n    }\n    for(int i=0;i<n.size();i++){\n        for(int j=1;j<n.size()-i;i++){\n            if(n[j-1] < n[j]) swap(n[j-1], n[j]);\n        }\n    }\n    if(n.size()==2){\n        if(n[0] == 4){\n            cout << \"four card\" << endl;\n        }else{\n            cout << \"full house\" << endl;\n        }\n    }else if(n.size()==3){\n        if(n[0] == 3){\n            cout << \"three card\" << endl;\n        }else{\n            cout << \"two pair\" << endl;\n        }\n    }else if(n.size()==4){\n        cout << \"one pair\" << endl;\n    }else{\n        bool straight=false;\n        for(int i=0;i<13-3;i++){\n            if(card[i]&&card[i+1]&&card[i+2]&&card[i+3]&&card[(i+4)%13]){\n                cout << \"straight\" << endl;\n                straight=true;\n                break;\n            }\n        }\n        if(!straight){\n            cout << \"null\" << endl;\n        }\n    }\n}\n\nint main(){\n    char comma;\n    int m;\n    while(cin >> m){\n        for(int i=0;i<13;i++){\n            card[i] = 0;\n        }\n        m--;\n        card[m]++;\n        for(int i=0;i<4;i++){\n            cin >> comma >> m;\n            m--;\n            card[m]++;\n        }\n        solve();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\nusing namespace std;\n\nint main() {\n\tint c[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF) {\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tfor (int j = 0; j<4; j++) {\n\t\t\t\tif (c[j] > c[j + 1]) {\n\t\t\t\t\tint tmp = c[j];\n\t\t\t\t\tc[j] = c[j + 1];\n\t\t\t\t\tc[j + 1] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ((c[0]==c[1]&&c[1]==c[2]&&c[2]==c[3])||(c[1]==c[2]&&c[2]==c[3]&&c[3]==c[4]))cout << \"four card\" << endl;\n\t\telse if ((c[0]==c[1]&&c[1]==c[2]&&c[3]==c[4])||(c[0]==c[1]&&c[2]==c[3]&&c[3]==c[4]))cout << \"full house\" << endl;\n\t\telse if ((c[0]==1&&c[1]==10&&c[2]==11&&c[3]==12&&c[4]==13)||(c[0]+1==c[1]&&c[0]+2==c[2]&&c[0]+3==c[3]&&c[0]+4==c[4]))cout << \"straight\" << endl;\n\t\telse if ((c[0]==c[1]&&c[1]==c[2])||(c[1]==c[2]&&c[2]==c[3])||(c[2]==c[3]&&c[3]==c[4]))cout << \"three card\" << endl;\n\t\telse if ((c[0]==c[1]&&c[2]==c[3])||(c[1]==c[2]&&c[3]==c[4])||(c[0]==c[1]&&c[3]==c[4]))cout << \"two pair\" << endl;\n\t\telse if ((c[0] == c[1]) || (c[1] == c[2]) || (c[2] == c[3]) || (c[3] == c[4]))cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include <stdlib.h>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n\tint p[5],pair[5],str[5],che[5];\n\twhile( scanf(\"%d,%d,%d,%d,%d\",&p[0],&p[1],&p[2],&p[3],&p[4]) != EOF ){\n\t\tsort(p,p+5);\n\t\tpair[0]=0;\n\t\tstr[0]=0;\n\t\tche[0]=0;\n\t\tfor(int i=1;i<5;i++){\n\t\t\tif(p[i]==p[i-1]){\n\t\t\t\tpair[i] = pair[i-1]+1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tpair[i]=0;\n\t\t\t}\n\t\t\tif(p[i-1]+1==p[i]){\n\t\t\t\tstr[i] = str[i-1]+1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstr[i] = 0;\n\t\t\t}\n\t\t\tche[i]=0;\n\t\t}\n\t\tif(p[0]==1&&p[4]==13)str[4]++;\n\t\tfor(int i=0;i<5;i++){\n\t\t\tche[pair[i]]++;\n\t\t}\n\t\tif(che[3]==1){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if(che[2]==1&&che[1]==2){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\telse if(str[4]==4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if(che[2]==1){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if(che[1]==2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if(che[1]==1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n\nenum Role\n{\n\tNoRole,\n\tOnepair,\n\tTwoPair,\n\tThreeCard,\n\tStraight,\n\tFullHouse,\n\tFourCard\n};\n\nstd::vector<int> CountSameCard(std::vector<int> card)\n{\n\tstd::vector<int> count(5);\n\n\tstd::sort(card.begin(),card.end());\n\n\tint memory =card[0];\n\n\tint j=0;\n\n\tfor(size_t i=1; i<5; ++i)\n\t{\n\t\tif(card[i]==memory)\n\t\t{\n\t\t\tcount[j] += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++j;\n\t\t}\n\n\t\tmemory = card[i];\n\t}\n\n\tstd::sort(count.begin(), count.end());\n\n\treturn count;\n}\n\nbool JudgeStraight(std::vector<int> card)\n{\n\tconst int SpecialStraight[5]=\n\t{\n\t\t1,\n\t\t10,\n\t\t11,\n\t\t12,\n\t\t13,\n\t};\n\n\tstd::sort(card.begin(),card.end());\n\n\tint memory = card[0];\n\n\tsize_t i = 1;\n\n\tfor(; i<5; ++i)\n\t{\n\t\tif(!(card[i]==memory+1))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tmemory = card[i];\n\t}\n\n\tsize_t j=0;\n\n\tfor(; j<5; ++j)\n\t{\n\t\tif(card[j]!=SpecialStraight[j])\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t} \n\n\treturn (i==5) || (j==5);\n}\n\nRole JudgeRole(std::vector<int> count, bool straight)\n{\n\tstd::sort(count.begin(),count.end());\n\n\tint max = *max_element(count.begin(),count.end());\n\n\tif(max==3)\n\t{\n\t\treturn FourCard;\n\t}\n\n\tif(max==2)\n\t{\n\t\tif(count[3]==1)\n\t\t{\n\t\t\treturn FullHouse;\n\t\t}\n\t}\n\n\tif(straight)\n\t{\n\t\treturn Straight;\n\t}\n\n\tif(max==2)\n\t{\n\t\treturn ThreeCard;\n\t}\n\n\n\tif(max==1)\n\t{\n\t\tif(count[3]==1)\n\t\t{\n\t\t\treturn TwoPair;\n\t\t}\n\n\t\treturn Onepair;\n\t}\n\telse\n\t{\n\t\treturn NoRole;\n\t}\n}\n\n\nint main()\n{\n\tstd::vector<int> card(5);\n\n\tchar c;\n\n\twhile(std::cin >> card[0] >> c >> card[1] >> c >> card[2] >> c >> card[3] >> c >> card[4])\n\t{\n\t\tswitch(JudgeRole(CountSameCard(card),JudgeStraight(card)))\n\t\t{\n\t\tcase FourCard:\n\t\t\tstd::cout << \"four card\\n\";\n\t\t\tbreak;\n\t\tcase FullHouse:\n\t\t\tstd::cout << \"full house\\n\";\n\t\t\tbreak;\n\t\tcase Straight:\n\t\t\tstd::cout << \"straight\\n\";\n\t\t\tbreak;\n\t\tcase ThreeCard:\n\t\t\tstd::cout << \"three card\\n\";\n\t\t\tbreak;\n\t\tcase TwoPair:\n\t\t\tstd::cout << \"two pair\\n\";\n\t\t\tbreak;\n\t\tcase Onepair:\n\t\t\tstd::cout << \"one pair\\n\";\n\t\t\tbreak;\n\t\tcase NoRole:\n\t\t\tstd::cout << \"null\\n\";\n\t\t\tbreak;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint str(int a[5], int n){\n\tint tmp = a[n], i;\n\tfor(i = 0;i < 4 && ++tmp == a[++n];i++){if(tmp == 13 && i == 2)tmp = 0, n = -1;}\n\t//cout << endl;\n\tif(i == 4)return 1;\n\telse return 0;\n}\n\nint main(){\n\tstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\",\"null\"};\n\tint a[5], t[13], ans;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1;\n\t\tsort(a, a+5);\n\t\tfor(int i = 0;i < 13;i++)t[i] = count(a, a+5,i+1);\n\t\t\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 3)ans = 2;\n\t\t\tif(ans == 0 && t[i] == 2)ans = 1;\n\t\t\tif(ans == -1 && t[i] == 2)ans = 0;\n\t\t}\n\t\t//for(int i = 0;i < 5;i++)cout << a[i] << \" \";\n\t\tif(str(a, 0) || str(a, 1))ans = 3;\n\t\tint th = 0, tw = 0, fo = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 2)tw = 1;\n\t\t\tif(t[i] == 3)th = 1;\n\t\t\tif(t[i] == 4)fo = 1;\n\t\t}\n\t\tif(tw && th)ans = 4;\n\t\tif(fo)ans = 5;\n\t\tif(ans == -1)ans = 6;\n\t\t//for(int i = 0;i < 5;i++)printf(\"%d \", a[i]);\n\t\t//for(int i = 0;i < 13;i++)cout << t[i] << \" \";\n\t\t//cout << \"fo\" << fo;\n\t\t//cout << endl;\n\t\t//cout << ans;\n\t\tcout << s[ans] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int c[6] = {0},same[5] = {0};\n\n  while(scanf(\"%d,%d,%d,%d,%d\\n\",&c[0],&c[1],&c[2],&c[3],&c[4]) == 5) {\n    int same[5] = {0};\n    int straight = 0;\n    for(int i=0;i<5;i++) {\n      for(int j=0;j<5;j++) {\n\tif(c[i] == c[j]) {\n\t  same[i]++;\n\t}\n      }\n    }\n    sort(c,c+5);\n    sort(same,same+5);\n    if(same[4] == 4) {\n      cout << \"four card\" << endl;\n    }\n    else if(same[4] == 3) {\n      if(same[1] == 2) {\n\tcout << \"full house\" << endl;\n      }\n      else {\n\tcout << \"three card\" << endl;\n      }\n    }\n    else if(same[4] == 2) {\n      if((same[3] == 2) &&(same[2] == 2)) {\n\tcout << \"two pair\" << endl;\n      }\n      else {\n\tcout << \"one pair\" << endl;\n      }\n    }\n    else if(same[4] == 1) {\n      for(int i=0;i<4;i++) {\n\tif(c[i] == c[i+1]-1) {\n\t  straight = 1;\n\t}\n\telse {\n\t  straight = 0;\n\t  break;\n\t}\n      }\n      if((c[0] == 1) && (c[1] == 10)) {\n\tstraight = 1;\n      }\n      if(straight) {\n\tcout << \"straight\" << endl;\n      }\n      else {\n\tcout << \"null\" << endl;\n      }\n    }\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nvoid Sort( int* a )\n{\n    for( int i = 0; i < 4; i++ )\n    {\n        for( int j = i + 1; j < 5; j++ )\n        {\n            if( a[i] > a[j] )\n            {\n                int temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n        }\n    }\n}\n\nbool fourCard( int* a )\n{\n    if( a[0] == a[1] && a[2] == a[3] && a[1] == a[2] || a[1] == a[2] && a[3] == a[4] && a[2] == a[3] )\n        return true;\n    else\n        return false;\n}\n\nbool fullHouse( int* a )\n{\n    if( a[0] == a[1] && a[2] == a[3] && a[3] == a[4] || a[0] == a[1] && a[0] == a[2] && a[3] == a[4] )\n        return true;\n    else\n        return false;\n}\n\nbool threeCard( int* a )\n{\n    if( a[0] != a[1] && a[2] == a[3] && a[3] == a[4] || a[3] != a[4] && a[0] == a[1] && a[0] == a[2] || a[0] != a[4] && a[1] == a[2] && a[2] == a[3] )\n        return true;\n    else\n        return false;\n}\n\nbool straight( int* a )\n{\n    if( a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13 )\n        return true;\n    for( int i = 0; i < 4; i++ )\n        if( a[i+1] - a[i] != 1 )\n            return false;\n    return true;\n}\n\nbool twoPair( int* a )\n{\n    if( fourCard(a) == false && ( a[0] == a[1] && a[2] == a[3] || a[0] == a[1] && a[3] == a[4] || a[1] == a[2] && a[3] == a[4] ) )\n        return true;\n    else\n        return false;;\n}\n\nbool onePair( int * a )\n{\n    if( twoPair(a) == false && threeCard(a) == false && ( a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4] ) )\n        return true;\n    else\n        return false;\n}\n\nint main()\n{\n    int card[5];\n    char p;\n\n    while( cin >> card[0] >> p >> card[1] >> p >> card[2] >> p >> card[3] >> p >> card[4] )\n    {\n        Sort(card);\n        if( fullHouse(card) == true )\n            cout << \"full house\" << endl;\n        else if( fourCard(card) == true )\n            cout << \"four card\" << endl;\n        else if( threeCard(card) == true )\n            cout << \"three card\" << endl;\n        else if( twoPair(card) == true )\n            cout << \"two pair\" << endl;\n        else if( onePair(card) == true )\n            cout << \"one pair\" << endl;\n        else if( straight(card) == true )\n            cout << \"straight\" << endl;\n        else\n            cout << \"null\" << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <stack>\n#include <list>\n#include <queue>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <math.h>\n\n#define PREP(i, m, n) for(int i = m; i < n; i++)\n#define MREP(i, m, n) for(int i = m - 1; i >= n; i--)\n\n#define rep(i, n) for(int i = 0; i < (n); i++)\n#define FOR(i, a, b) for(int i = a; i < b; i++)\n#define all(v) v.begin(), v.end()\n#define rev(v) v.rbegin(), v.rend()\n#define prime first\n#define weight second\n#define MP make_pair\n#define PB push_back\n\nusing namespace std;\n\nstring rule(int two, int three, int four, int st, map<int, int> table){\n\t\n\tif(four == 1) return \"four card\";\n\telse if(three == 1){\n\t\tif(two == 1) return \"full house\";\n\t\telse return \"three card\";\n\t}\n\telse if(two == 2) return \"two pair\";\n\telse if(two == 1) return \"one pair\";\n\n\tfor(int i = 0; i < table.size(); i++){\n\t\tif(table[i] == st) return \"straight\";\n\t}\n\n\treturn \"null\";\n}\n\nint main(){\n\tmap<int, int> table;\n\ttable[0] = 15;\n\ttable[1] = 20;\n\ttable[2] = 25;\n\ttable[3] = 30;\n\ttable[4] = 35;\n\ttable[5] = 40;\n\ttable[6] = 45;\n\ttable[7] = 50;\n\ttable[8] = 55;\n\ttable[9] = 47;\n\t\n\tint tmp = 0;\n\twhile(scanf(\"%d\", &tmp) != EOF){\n\t\tvector<int> input;\n\t\tinput.push_back(tmp);\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tscanf(\",%d\", &tmp);\n\t\t\tinput.push_back(tmp);\n\t\t}\n\t\t\n\t\tmap<int, int> hand;\n\t\tint two = 0, three = 0, four = 0,st = 0;\n\t\t\n\t\tfor(int i = 0; i < 5; i++){\n\t\t\tif(hand.find(input[i]) != hand.end()) hand[input[i]]++;\n\t\t\telse hand[input[i]] = 1;\n\t\t}\n\n\t\tfor(map<int, int>::iterator it = hand.begin(); it != hand.end(); it++){\n\t\t\tif(it->second == 2) two++;\n\t\t\telse if(it->second == 3) three++;\n\t\t\telse if(it->second == 4) four++;\n\t\t\tst += it->first;\n\t\t}\n\n\t\tcout << rule(two, three, four, st, table) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define rep(i,a) for(int i = 0 ; i < a;  i ++)\nint main(void){\n  vector<int> array(5);\n  vector<int> original;\n  vector<int> card(14);\n  string s;  \n  while(cin>>s){\n    rep(i,5)array[i]=0;\n    rep(i,14)card[i]=0;\n    for(int i = 0, j = 0 ; i < s.size() ; i ++){\n      if(s[i] == ','){\n\tj++;continue;\n      }\n      array[j] = array[j] * 10 +s[i]-'0';\n    }\n    rep(i,5)card[array[i]]++;\n    original = card;\n    sort(card.begin(),card.end(),greater<int>());\n    \n    //rep(i,5)cout<<card[i]<<endl;\n    if(\n       (card[0 ] == 1 && card[1 ] == 1 && card[2 ] == 1 && card[3 ] == 1 && card[4] == 1 ) \n       ){\n      bool check=0;\n      rep(i,4){\n\tif(array[i] != array[i+1] - 1){\n\t  check = 1;\n\t  break;\n\t}\n      }\n      //rep(i,14)cout<<card[i]<<\" \";cout<<endl;\n      if(!check)cout<<\"straight\"<<endl;\n      else if((original[1] == 1 && original[10] == 1 && original[11] == 1 && original[12] == 1 && original[13] == 1 )){\n\tcout<<\"straight\"<<endl;\n      }else cout<<\"null\"<<endl;\n      continue;\n    }\n    sort(array.begin(),array.end());\n    switch(card[0]){\n    case 4:\n      cout<<\"four card\"<<endl;break;\n    case 3:\n      if(card[1]==2){\n\tcout<<\"full house\"<<endl;\n      }else{\n\tcout<<\"three card\"<<endl;\n      }\n      break;\n    case 2:\n      if(card[1]==2){\n\tcout<<\"two pair\"<<endl;\n      }else{\n\tcout<<\"one pair\"<<endl;\n      }\n      break;\n    default:\n      cout<<\"null\"<<endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main() {\n  int a[5];\n  int b[5];\n  bool s;\n  int x, y;\n  while (scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) == 5) {\n    sort(a, a+5);\n    memset(b, 0, sizeof(int)*5);\n    x = y = -1;\n    for (int i=0; i<5; i++) {\n      if (a[i] != x) {\n        x = a[i];\n        ++y;\n      }\n      ++b[y];\n    }\n    sort(b, b+5, greater<int>());\n    s = true;\n    for (int i=0; i<4; i++) {\n      if (a[i]+1 != a[i+1]) {\n        s = false;\n        break;\n      }\n    }\n    if (a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13) s = true;  // exception\n    if (b[0] == 4) {\n      printf(\"four card\\n\");\n    } else if (b[0] == 3 && b[1] == 2) {\n      printf(\"full house\\n\");\n    } else if (s) {\n      printf(\"straight\\n\");\n    } else if (b[0] == 3) {\n      printf(\"three card\\n\");\n    } else if (b[0] == 2 && b[1] == 2) {\n      printf(\"two pair\\n\");\n    } else if (b[0] == 2) {\n      printf(\"one pair\\n\");\n    } else {\n      printf(\"null\\n\");\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nint a[5];\nint main() {\n\twhile(~scanf(\"%d,%d,%d,%d,%d\", a[0], a[1], a[2], a[3], a[4])) {\n\t\tsort(a, a + 5);\n\t\tif((a[0] == a[1] || a[3] == a[4]) && a[1] == a[2] && a[2] == a[3]) printf(\"four card\\n\");\n\t\tif((a[0] == a[1] && a[2] == a[3] && a[3] == a[4]) || (a[0] == a[1] && a[1] == a[2] && a[3] == a[4])) printf(\"full house\\n\");\n\t\tif(a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && (a[3] + 1) % 13 == a[4] % 13) printf(\"straight\\n\");\n\t\tif(((a[0] == a[1] || a[2] == a[3]) && a[1] == a[2]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n\t\telse {\n\t\t\tint p = 0; for(int i = 1; i < 5; i++) if(a[i - 1] == a[i]) p++;\n\t\t\tif(p == 2) printf(\"two pair\\n\");\n\t\t\tif(p == 1) printf(\"one pair\\n\");\n\t\t\tif(p == 0) printf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <map>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid solve()\n{\n\tint a[5];\n\twhile(~scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]))\n\t{\n\t\tmap<int, int> input;\n\t\tfor(int i = 0; i < 5; ++i)\n\t\t{\n\t\t\t++input[a[i]];\n\t\t}\n\t\tvector<int> cards;\n\t\tmap<int, int>::iterator it = input.begin();\n\t\twhile(it != input.end())\n\t\t{\n\t\t\tcards.push_back(it->second);\n\t\t\t++it;\n\t\t}\n\t\tsort(cards.begin(), cards.end(), greater<int>());\n\t\tif(cards.size() == 2)\n\t\t{\n\t\t\tif(cards[0] == 4 && cards[1] == 1)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if(cards[0] == 3 && cards[1] == 2)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(cards.size() == 3)\n\t\t{\n\t\t\tif(cards[0] == 3 && cards[1] == 1 && cards[2] == 1)\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t\telse if(cards[0] == 2 && cards[1] == 2 && cards[2] == 1)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(cards.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint b[5];\n\t\t\tint pos = 0;\n\t\t\tmap<int, int>::iterator it = input.begin();\n\t\t\twhile(it != input.end())\n\t\t\t{\n\t\t\t\tb[pos] = it->first;\n\t\t\t\t++it;\n\t\t\t\t++pos;\n\t\t\t}\n\t\t\tif(b[1] == b[0] + 1 && b[2] == b[1] + 1 && b[3] == b[2] + 1 && b[4] == b[3] + 1 ||\n\t\t\t   b[0] == 1 && b[1] == 10 && b[2] == 11 && b[3] == 12 && b[4] == 13)\n\t\t\t{\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nint main(){\n  int hand[5];\n  for(;;){\n    if(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4]) == EOF){break;}\n    sort(hand,hand+5);\n    int p = 0;\n    for(int i=0; i<5; i++){\n      int x = 0;\n      for(int j=i+1; j<5; j++){\n\tif(hand[i] == hand[j]){x++;}\n      }\n      if(x == 1){p+=1;}\n      if(x == 2){p+=3;}\n      if(x == 3){p+=5;}\n      i+=x;\n    }\n    if(p == 0){\n      if(hand[1] == hand[0]+1 && hand[2] == hand[1]+1 && hand[3] == hand[2]+1 && hand[4] == hand[3]+1){p = 6;}\n      if(hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13){p = 6;}\n    }\n    if(p == 0){cout <<\"null\"<<endl;}\n    else if(p == 1){cout <<\"one pair\"<<endl;}\n    else if(p == 2){cout <<\"two pair\"<<endl;}\n    else if(p == 3){cout <<\"three card\"<<endl;}\n    else if(p == 4){cout <<\"full house\"<<endl;}\n    else if(p == 5){cout <<\"four card\"<<endl;}\n    else if(p == 6){cout <<\"straight\"<<endl;}\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tint card[5]; char ch;\n\twhile(cin>>card[0]>>ch>>card[1]>>ch>>card[2]>>ch>>card[3]>>ch>>card[4]){\n\tint num[13]={0};\n\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\tstring ans=\"null\";\n\tint pair=0;\n\tfor(int i=0;i<13;i++){\n\t\tif(num[i]==2 && pair==0 && ans!=\"three card\") ans=\"one pair\",pair++;\n\t\telse if(num[i]==2 && pair==1 && ans!=\"three card\") ans=\"two pair\",pair++;\n\t\telse if(num[i]==3) ans=\"three card\";\n\t\telse if(num[i]==4) ans=\"four card\";\n\t};\n\tif(ans==\"three card\" && pair==1) ans=\"full house\";\n\tif(ans==\"null\") do{\n\t\tfor(int i=0;i<=9;i++){\n\t\t\tif(num[i]==1 &&num[i+1]==1&& num[i+2]==1 && num[i+3]==1 && num[i+4]==1) ans=\"straight\";\n\t\t};\n\t\tif(num[9]==1&&num[10]==1&&num[11]==1&&num[12]==1&&num[0]==1) ans=\"straight\";\n\t}while(0);\n\tcout << ans << '\\n' ;\n\t};\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <map>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\n\twhile(~scanf(\"%d\", &hand[0])){\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &hand[i]);\n\t\t}\n\t\tint num[17] = {0};\n\n\t\tfor(int i = 0; i < 5; i ++){\n\t\t\tif(hand[i] == 1){\n\t\t\t\thand[i] += 13;\n\t\t\t}\n\t\t\tnum[hand[i]]++;\n\t\t}\n\n\t\tint h = 0;\n\t\tstring s[] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\t\tint seq = 0;\n\n\t\tfor(int i = 2; i < 17; i++){\n\t\t\tif(num[i] == 2){\n\t\t\t\tif(h == 3){\n\t\t\t\t\th = 5;\n\t\t\t\t}else{\n\t\t\t\t\th++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(num[i] == 3){\n\t\t\t\tif(h == 1){\n\t\t\t\t\th = 5;\n\t\t\t\t}else{\n\t\t\t\t\th = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(num[i] == 4){\n\t\t\t\th = 6;\n\t\t\t}\n\t\t\telse if(num[i-2]&num[i-1]&num[i]&num[i+1]&num[i+2]){\n\t\t\t\th = 4;\n\t\t\t}\n\t\t}\n\n\t\tcout << s[h] << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <stdio.h>\n#include <iostream>\nusing namespace std;\n\n#define ONE 1\n#define TWO 2\n#define THREE 3\n#define STO 4\n#define FULL 5\n#define FOUR 6\n\nint main(void){\n\tint a[5];\n\tint hand;\n\tint cnt[3];\n\tint num;\n\tint temp;\n\tint i;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) != EOF){\n\t\thand = 0;\n\t\tnum = 0;\n\t\tcnt[0] = 1;\n\t\tcnt[1] = 1;\n\t\tcnt[2] = 1;\n\t\tsort(a, a+5);\n\t\ttemp = a[0];\n\t\tfor(i=1; i<5; i++){\n\t\t\tif(temp == a[i]){\n\t\t\t   \tcnt[num]++;\n\t\t\t}else{\n\t\t\t\ttemp = a[i];\n\t\t\t\tif(cnt[num] == 1){\n\t\t\t\t\tcnt[num] = 1;\n\t\t\t\t}else{\n\t\t\t\t\tnum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(cnt[0] == 4 || cnt[1] == 4 || cnt[2] == 4){\n\t\t\thand = FOUR;\n\t\t\tputs(\"four card\");\n\t\t}else if(cnt[0] + cnt[1] + cnt[2] == 6){\n\t\t\thand = FULL;\n\t\t\tputs(\"full house\");\n\t\t}else if((a[0]+1 == a[1] && a[1]+1 == a[2] && a[2]+1 == a[3] && a[3]+1 == a[4]) ||\n\t\t\t   \t(a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)){\n\t\t\thand = STO;\n\t\t\tputs(\"straight\");\n\t\t}\n\t\telse if(cnt[0] == 3 || cnt[1] == 3 || cnt[2] == 3){\n\t\t\thand = THREE;\t//two pair\n\t\t\tputs(\"three card\");\n\t\t}else if(cnt[0] + cnt[1] + cnt[2] == 5){\n\t\t\thand = TWO;\t//three pair\n\t\t\tputs(\"two pair\");\n\t\t}else if(cnt[0] == 2 || cnt[1] == 2 || cnt[2] == 2){\n\t\t\thand = ONE;\n\t\t\tputs(\"one pair\");\n\t\t}else{\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tint card[5]; char ch;\n\twhile(cin>>card[0]>>ch>>card[1]>>ch>>card[2]>>ch>>card[3]>>ch>>card[4]){\n\tint num[13]={0};\n\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\tstring ans=\"null\";\n\tint pair=0;\n\tfor(int i=0;i<13;i++){\n\t\tif(num[i]==2 && pair==0 && ans!=\"three card\") ans=\"one pair\",pair++;\n\t\telse if(num[i]==2 && pair==1 && ans!=\"three card\") ans=\"two pair\",pair++;\n\t\telse if(num[i]==3) ans=\"three card\";\n\t\telse if(num[i]==4) ans=\"four cards\";\n\t};\n\tif(ans==\"three card\" && pair==1) ans=\"full house\";\n\tif(ans==\"null\") do{\n\t\tint flag=0;\n\t\tfor(int i=0;i<=9;i++){\n\t\t\tif(flag==0 && num[i]==1) flag=1;\n\t\t\tif(flag==1 && num[i+1]==1&& num[i+2]==1 && num[i+3]==1 && num[i+4]==1) ans=\"straight\";\n\t\t};\n\t\tif(num[9]==1&&num[10]==1&&num[11]==1&&num[12]==1&&num[0]==1) ans=\"straight\";\n\t}while(0);\n\tcout << ans << '\\n' ;\n\t};\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(void){\n \n    int a[5]={0};\n    string str=\"null\";\n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n        sort(a,a+5);\n        if(((a[0]==a[1])&&(a[2]==a[3])&&(a[2]==a[1]))||((a[1]==a[2])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"four card\";\n        else if(((a[0]==a[1])&&(a[1]==a[2])&&(a[3]==a[4]))||((a[0]==a[1])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"full house\";\n        else if(((a[0]==1)&&(a[1]==10)&&(a[2]==11)&&(a[3]==12)&&(a[4]==13))||((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4])))str=\"straight\";\n        else if(((a[0]==a[1])&&(a[1]==a[2]))||((a[1]==a[2])&&(a[2]==a[3]))||((a[2]==a[3])&&(a[3]==a[4])))str=\"three card\";\n        else if(((a[0]==a[1])&&((a[2]==a[3])||(a[3]==a[4])))||((a[1]==a[2])&&(a[3]==a[4])))str=\"two pair\";\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))str=\"one pair\";\n \n        cout<<str<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\n\nint main() {\n  int x;\n  while(scanf(\"%d\",&x)==1) {\n    int a[15];\n    fill(a,a+14,0);\n    a[x]++;\n    for(int i=0; i<4; i++) {\n      scanf(\"%*c%d\",&x);\n      a[x]++;\n    }\n    int z=1,cnt=0;\n    for(int i=1; i<14; i++) {\n      if(a[i]==2) {\n\tif(z==1) z=2;\n\telse if(z==2) z=3;\n\telse if(z==4) z=6;\n      }\n      if(a[i]==3) {\n\tif(z==1) z=4;\n\telse if(z==2) z=6;\n      }\n      if(a[i]==4) {\n\tz=7;\n      }\n      if(a[i]==1) {\n\tcnt++;\n      } else cnt=0;\n      if(cnt==5) z=5;\n    }\n    if(cnt==4 && a[1]==1) z=5;\n\n    if(z==1) cout << \"null\" << endl;\n    if(z==2) cout << \"one pair\" << endl;\n    if(z==3) cout << \"two pair\" << endl;\n    if(z==4) cout << \"three card\" << endl;\n    if(z==5) cout << \"straight\" << endl;\n    if(z==6) cout << \"full house\" << endl;\n    if(z==7) cout << \"four card\" << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(void){\n\n    int a[5]={0};\n    string str=\"null\";\n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n        sort(a,a+5);\n        if(((a[0]==a[1])&&(a[2]==a[3])&&(a[2]==a[1]))||((a[1]==a[2])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"four card\";\n        else if(((a[0]==a[1])&&(a[1]==a[2])&&(a[3]==a[4]))||((a[0]==a[1])&&(a[2]==a[3])&&(a[3]==a[4])))str=\"full house\";\n        else if(((a[0]==1)&&(a[1]==10)&&(a[2]==11)&&(a[3]==12)&&(a[4]==13))||((a[0]+1==a[1])&&(a[1]+1==a[2])&&(a[2]+1==a[3])&&(a[3]+1==a[4])))str=\"straight\";\n        else if(((a[0]==a[1])&&(a[1]==a[2]))||((a[1]==a[2])&&(a[2]==a[3]))||((a[2]==a[3])&&(a[3]==a[4])))str=\"three card\";\n        else if(((a[0]==a[1])&&((a[2]==a[3])||(a[3]==a[4])))||((a[1]==a[2])&&(a[3]==a[4])))str=\"two pair\";\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4]))str=\"one pair\";\n\n        cout<<str<<endl;\n    }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint ar[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &ar[0], &ar[1], &ar[2], &ar[3], &ar[4])) {\n\t\tsort(ar, ar + 5);\n\t\tint a = ar[0];\n\t\tint b = ar[1];\n\t\tint c = ar[2];\n\t\tint d = ar[3];\n\t\tint e = ar[4];\n\n\t\tif (a == d || b == e) { cout << \"four card\" << endl; }\n\t\telse if (a == c || d == e) { cout << \"full house\" << endl; }\n\t\telse if (a == b || c == e) { cout << \"full house\" << endl; }\n\t\telse if (b - a == 1 && c - b == 1 && d - c == 1 && e - d == 1&&a!=1 ) { cout << \"straight\" << endl; }\n\t\telse if (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) { cout << \"straight\" << endl; }\n\t\telse if (a == c || b == d || c == e) { cout << \"three card\" << endl; }\n\t\telse if (a==b&&c==d) { cout << \"two pair\" << endl; }\n\t\telse if (a == b&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (b == c&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (a == b || b == c || c == d || d == e) { cout << \"one pair\" << endl; }\n\t\telse { cout << \"null\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nint main()\n{\n\tint cs[5], i, j, t, r, fl, fl2;\n\tchar c, s[8][11] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\twhile (std::cin >> cs[0] >> c >> cs[1] >> c >> cs[2] >> c >> cs[3] >> c >> cs[4])\n\t{\n\t\tr = 1;\n\t\tstd::sort(cs, cs+5);\n\t\tint n[13] = {0};\n\t\tfor (i = 0; i < 5; i++)\n\t\t\tn[cs[i]-1]++;\n\t\tfor (i = fl = t = 0; i < 13; i++)\n\t\t\tif (n[i] == 2)\tt++;\n\t\tif (t == 1)\tr = 2;\n\t\tif (t == 2)\tr = 3;\n\t\tfor (i = fl = 0; i < 13 && !fl; i++)\n\t\t\tif (n[i] == 3)\t\tr = 4, fl = 1;\n\t\t\telse if (n[i] == 4)\tr = 7, fl = 1;\n\t\tfor (i = fl = 0; i < 9 && !fl; i++)\n\t\t{\n\t\t\tfor (j = 0, fl2 = 1; j < 5 && fl2; j++)\n\t\t\t\tif (n[i+j] != 1)\tfl2 = 0;\n\t\t\tif (fl2)\tr = 5, fl2 = 1;\n\t\t}\n\t\tif (!fl)\n\t\t{\n\t\t\tfor (i = 9, fl = 0; i < 13 && !fl; i++)\n\t\t\t\tif (n[i] != 1)\tfl = 1;\n\t\t\tif (!fl && n[0])\tr = 5;\n\t\t}\n\t\tfor (i = fl = fl2 = 0; i < 13; i++)\n\t\t{\n\t\t\tif (n[i] == 2)\tfl = 1;\n\t\t\tif (n[i] == 3)\tfl2 = 1;\n\t\t}\n\t\tif (fl && fl2)\tr = 6;\n\t\tstd::cout << s[r-1] << std::endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define gsort(st,en) sort((st),(en),greater<int>())\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing vi = vector<int>;\nusing vl = vector<ll>;\nusing dict = map<string,int>;\nusing pii = pair<int,int> ;\n\nconstexpr int imax = ((1<<30)-1)*2+1 ;\nconstexpr int inf = 100000000;\nconstexpr double PI = acos(-1.0) ;\ndouble eps = 1e-10 ;\nconst int dy[] = {-1,0,1,0};\nconst int dx[] = {0,-1,0,1};\n\ninline bool value(int x,int y,int w,int h){\n  return (x >= 0 && x < w && y >= 0 && y < h);\n}\n\ntemplate<typename T>\nvoid Unique(vector<T> &v){\n  sort(all(v));\n  v.erase(unique(all(v)),v.end());\n}\n\ntemplate<typename T>\nT ston(string& str, T n){\n  istringstream sin(str) ;\n  T num ;\n  sin >> num ;\n  return num ;\n}\n\nvoid Ans(bool f){\n  if(f) cout << \"YES\"<<endl;\n  else cout << \"NO\"<<endl;\n}\n\nstring Solve(vector<int> v){\n  set<int> s;\n  int st = 0;\n  REP(i,1,14){\n    if(v[i] > 0){\n      s.insert(i);\n    }\n    if(v[i] == v[i-1] && v[i] != 0){\n      ++st;\n    }\n  }\n  int m = *max_element(all(v));\n  if(m == 4){\n    return \"four card\";\n  }\n  else if(m == 3 && s.size() == 2){\n    return \"full house\";\n  }\n  else if(m == 1){\n    if((v[1] == v[10] && v[11] == v[12] && v[13] == v[1] && v[1] == v[11])||(st == 4)){\n      return \"straight\";\n    }\n  }\n  else if(m == 3 && s.size() == 3){\n    return \"three card\";\n  }\n  else if(m == 2 && s.size() == 3){\n    return \"two pair\";\n  }\n  else if(m == 2){\n    return \"one pair\";\n  }\n  return \"null\";\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  char c;\n  int a,b,d,e,f;\n  while(cin >> a >> c >> b >> c >> d >> c >> e >> c >> f){\n    vary(int,v,14,0);\n    v[a]++;\n    v[b]++;\n    v[d]++;\n    v[e]++;\n    v[f]++;\n    cout << Solve(v) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint hand[5];\n\tint card[13];\n\tint m;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &hand[0], &hand[1], &hand[2], &hand[3], &hand[4]) != EOF){\n\t\tm = -99999;\n\t\tfor(int i = 0; i < 13; i++){\n\t\t\tcard[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < 5; i++){\n\t\t\tcard[hand[i]]++;\n\t\t}\n\t\tsort(hand, hand+5);\n\t\tfor(int i = 0; i < 13; i++){\n\t\t\tm = max(m, card[i]);\n\t\t}\n\t\tif(m == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t}else if(m == 3){\n\t\t\tif((hand[0] == hand[1] && hand[0] == hand[2] && hand[3] == hand[4])\n\t\t\t\t||(hand[0] == hand[1] && hand[2] == hand[3] && hand[2] == hand[4])){\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\t}else {\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\t}\n\t\t}else if(m == 2){\n\t\t\tif(hand[0] == hand[1] && (hand[2] == hand[3] || hand[3] == hand[4])\n\t\t\t\t\t|| hand[1] == hand[2] && hand[3] == hand[4]){\n\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t}else if(hand[0] == hand[1] || hand[1] == hand[2] || hand[2] == hand[3] || hand[4]){\n\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t}\n\t\t}else if(hand[0]+1 == hand[1] && hand[1]+1 == hand[2] && hand[2]+1 == hand[3] && hand[3]+1 == hand[4]\n\t\t\t\t|| hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}else{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\nint main() {int RB[15],t,p,f,l,i;while (scanf(\"%d\",&t)!=EOF) {for (i=0;i<15;RB[i++]=0);RB[t]++;for (i=1;i<5;i++) scanf(\",%d\",&t),RB[t]++;t=p=f=l=0;for (i=0;i<15;i++) if (RB[i]==4) f++; else if (RB[i]==3) t++; else if (RB[i]==2) p++;RB[14]=RB[1];for (i=1;i<11;i++) if (RB[i]*RB[i+1]*RB[i+2]*RB[i+3]*RB[i+4]) l=1;if (l) puts(\"straight\"); else if (f) puts(\"four card\"); else if (t && p) puts(\"full house\"); else if (t) puts(\"three card\"); else if (p==2) puts(\"two pair\"); else if (p) puts(\"one pair\"); else puts(\"null\");}return 0;}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef complex<double> P;\ntypedef pair<int,int> pii;\n#define REP(i,n) for(ll i=0;i<n;++i)\n#define REPR(i,n) for(ll i=1;i<n;++i)\n#define FOR(i,a,b) for(ll i=a;i<b;++i)\n\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define DEBUG_VEC(v) cout<<#v<<\":\";REP(i,v.size())cout<<\" \"<<v[i];cout<<endl\n#define ALL(a) (a).begin(),(a).end()\n\n#define MOD (ll)(1e9+7)\n#define ADD(a,b) a=((a)+(b))%MOD\n#define FIX(a) ((a)%MOD+MOD)%MOD\n\nint main(){\n  int a[5];\n  while(~scanf(\"%d,%d,%d,%d,%d\",a,a+1,a+2,a+3,a+4)){\n    sort(a,a+5);\n    if(a[1]==a[2] && a[2]==a[3] && (a[0]==a[1] || a[3]==a[4])){\n      cout<<\"four card\"<<endl;\n    }else if(a[0]==a[1] && a[3]==a[4] && (a[1]==a[2] || a[2]==a[3])){\n      cout<<\"full house\"<<endl;\n    }else if((a[0]+1==a[1] && a[1]+1==a[2] && a[2]+1==a[3] && a[3]+1==a[4]) ||\n             (a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)){\n      cout<<\"straight\"<<endl;\n    }else if((a[0]==a[1] && a[1]==a[2]) || (a[1]==a[2] && a[2]==a[3]) || (a[2]==a[3] && a[3]==a[4])){\n      cout<<\"three card\"<<endl;\n    }else if((a[0]==a[1] && (a[2]==a[3] || a[3]==a[4]) || (a[1]==a[2] && a[3]==a[4]))){\n      cout<<\"two pair\"<<endl;\n    }else if(a[0]==a[1] || a[1]==a[2] || a[2]==a[3] || a[3]==a[4]){\n      cout<<\"one pair\"<<endl;\n    }else{\n      cout<<\"null\"<<endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int num;\n    while(cin>>num){\n        char str;\n        int hand[14]={};\n        hand[num]++;\n        for(int i=0;i<4;i++){\n            cin>>str>>num;\n            hand[num]++;\n        }\n        bool four=0,three=0,two[2]={};\n        for(int i=1,j=0;i<14;i++){\n            if(hand[i]==4)four=1;\n            else if(hand[i]==3)three=1;\n            else if(hand[i]==2){\n                two[j]=1;\n                j++;\n            }\n        }\n        if(four)cout<<\"four card\"<<endl;\n        else if(three&&two[0])cout<<\"full house\"<<endl;\n        else if(three)cout<<\"three card\"<<endl;\n        else if(two[1])cout<<\"two pair\"<<endl;\n        else if(two[0])cout<<\"one pair\"<<endl;\n        else{\n            bool kawa=0;\n            for(int i=1;i<=10;i++){\n                if(hand[i]==1){\n                    for(int j=0;j<5;j++){\n                        if(j+i>13&&hand[1]!=1)break;\n                        else if(j+i<14&&hand[i+j]!=1)break;\n                        if(j==4)kawa=1;\n                    }\n                }\n            }\n            if(kawa)cout<<\"straight\"<<endl;\n            else cout<<\"null\"<<endl;\n        }\n\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nbool fourcard(int h[5]) {\n\tif ((h[0] == h[1] && h[0] == h[2] && h[0] == h[3]) ||\n\t\t(h[4] == h[1] && h[4] == h[2] && h[4] == h[3]) )\n\t\treturn true;\n\treturn false;\n}\n\nbool fullhouse(int h[5]) {\n\tif ((h[0] == h[1] && h[0] == h[2] && h[3] == h[4]) ||\n\t\t(h[0] == h[1] && h[4] == h[2] && h[4] == h[3]) )\n\t\treturn true;\n\treturn false;\n}\n\nbool straight(int h[5]) {\n\tif (h[0] == 1 && h[1] != 2) {\n\t\tfor (int i = 1; i < 5; i++)\n\t\t\tif (h[i] != i + 9)\n\t\t\t\treturn false;\n\t}\n\telse {\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tif (h[i] + 1 != h[i+1])\n\t\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nbool threecard(int h[5]) {\n\tfor (int i = 0; i < 3; i++)\n\t\tif (h[i] == h[i+1] && h[i] == h[i+2])\n\t\t\treturn true;\n\treturn false;\n}\n\nint pairs(int h[5]) {\n\tint ret = 0;\n\tfor (int i = 0; i < 4; i++)\n\t\tif (h[i] == h[i+1]) {\n\t\t\tret++;\n\t\t\ti++;\n\t\t}\n\treturn ret;\n}\n\nint main() {\n\tint h[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &h[0], &h[1], &h[2], &h[3], &h[4]) != EOF) {\n\t\tsort(h, h + 5);\n\t\tfor (int i = 0; i < 5; i++)\n\t\t\tprintf(\"%d \", h[i]);\n\t\tprintf(\"\\n\");\n\t\tif (fourcard(h)) printf(\"four card\\n\");\n\t\telse if (fullhouse(h)) printf(\"full house\\n\");\n\t\telse if (straight(h)) printf(\"straight\\n\");\n\t\telse if (threecard(h)) printf(\"three card\\n\");\n\t\telse {\n\t\t\tint n = pairs(h);\n\t\t\tswitch (n) {\n\t\t\t\tcase 0: printf(\"null\\n\"); break;\n\t\t\t\tcase 1: printf(\"one pair\\n\"); break;\n\t\t\t\tcase 2: printf(\"two pair\\n\"); break;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define rep(i,n) for(int i=0; i<n; i++)\ntypedef long long ll;\ntypedef pair<int,int> pii;\n\nint main() {\n\tint p[5];\n\tchar c;\n\twhile(cin >> p[0] >> c >> p[1] >> c >> p[2] >> c >> p[3] >> c >> p[4]) {\n\t\tint n[13] = {};\n\t\trep(i,5) n[p[i]-1]++;\n\t\tbool found = false;\n\n\t\trep(i,13) if(n[i]==4) {\n\t\t\tcout << \"four card\" << endl;\n\t\t\tfound = true;\n\t\t}\n\t\tif(found) continue;\n\n\t\trep(i,13) rep(j,13) if(n[i]==2 && n[j]==3) {\n\t\t\tcout << \"full house\" << endl;\n\t\t\tfound = true;\n\t\t}\n\t\tif(found) continue;\n\n\t\trep(i,10) {\n\t\t\tbool ok = true;\n\t\t\trep(j,5) {\n\t\t\t\tif(n[(i+j)%13]!=1) {\n\t\t\t\t\tok = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ok) {\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tif(found) continue;\n\n\t\trep(i,13) if(n[i]==3) {\n\t\t\tcout << \"four card\" << endl;\n\t\t\tfound = true;\n\t\t}\n\t\tif(found) continue;\n\n\t\tint ps = 0;\n\t\trep(i,13) if(n[i]==2) ps++;\n\t\tif(ps==2) {\n\t\t\tcout << \"two pair\" << endl;\n\t\t}\n\t\telse if(ps==1) {\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\nint main(){\n\tint card[5]={},pair[5]={},s=0;\n\tchar k;\n\twhile(cin>>card[0]>>k>>card[1]){\n\t\tfor(int i=2;i<5;i++)cin>>k>>card[i];\n\t\tfor(int j=0;j<5;j++)pair[j]=card[j];\n\t\tsort(pair,pair+5);\n\t\tif(pair[0]==pair[1]==pair[2]==pair[3])cout<<\"four card\"<<endl;\n\t\telse if(pair[1]==pair[2]==pair[3]==pair[4])cout<<\"four card\"<<endl;\n\t\telse if(pair[0]==pair[1]==pair[2]&&pair[3]==pair[4])cout<<\"full house\"<<endl;\n\t\telse if(pair[0]==pair[1]&&pair[2]&&pair[3]==pair[4])cout<<\"full house\"<<endl;\n\t\telse if(pair[1]==pair[0]+1&&pair[2]==pair[0]+2&&pair[3]==pair[0]+3&&pair[4]==pair[0]+4)cout<<\"straight\"<<endl;\n\t\telse if(pair[0]==1&&pair[1]==10&&pair[2]==11&&pair[3]==12&&pair[4]==13)cout<<\"straight\"<<endl;\n\t\telse if(pair[0]==pair[1]==pair[2])cout<<\"three pair\"<<endl;\n\t\telse if(pair[1]==pair[2]==pair[3])cout<<\"three pair\"<<endl;\n\t\telse if(pair[2]==pair[3]==pair[4])cout<<\"three pair\"<<endl;\n\t\telse if(pair[0]==pair[1]&&pair[2]==pair[3])cout<<\"two pair\"<<endl;\n\t\telse if(pair[0]==pair[1]&&pair[3]==pair[4])cout<<\"two pair\"<<endl;\n\t\telse if(pair[1]==pair[2]&&pair[3]==pair[4])cout<<\"two pair\"<<endl;\n\t\telse if(pair[0]==pair[1])cout<<\"one pair\"<<endl;\n\t\telse if(pair[1]==pair[2])cout<<\"one pair\"<<endl;\n\t\telse if(pair[2]==pair[3])cout<<\"one pair\"<<endl;\n\t\telse if(pair[3]==pair[4])cout<<\"one pair\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint c[5];\n\tint i, n, s;\n\twhile(~scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4])){\n\t\tsort(c, c+5);\n\t\tn = 0;\n\t\ts = 0;\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\tif(c[i] == c[i+1]){\n\t\t\t\tn++;\n\t\t\t}\n\t\t\tif(c[i]+1 == c[i+1]){\n\t\t\t\ts++;\n\t\t\t}\n\t\t}\n\t\tif (n == 3 && c[1] == c[3]) {\n\t\t\tcout << \"four card\" << endl;\n\t\t}else if (n == 3) {\n\t\t\tcout << \"full house\" << endl;\n\t\t}else if (s == 4 || (s==3 && c[0] == 1 && c[1]==10 && c[4]==13)) {\n\t\t\tcout << \"straight\" << endl;\n\t\t}else if (n == 2 && (c[0]==c[2] || c[1]==c[3] || c[2]==c[4])) {\n\t\t\tcout << \"three card\" << endl;\n\t\t}else if (n == 2) {\n\t\t\tcout << \"two pair\" << endl;\n\t\t}else if(n ==1){\n\t\t\tcout << \"one pair\" << endl;\n\t\t}else{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint a[6] = {};\n\twhile(scanf(\"%d\",&a[0])!=EOF){\n\t\tfor(int i=1;i<5;i++)scanf(\",%d\", &a[i]);\n\t\t\tint cnt=0,flag=true,card[13]={},max = 4;\n\t\tsort(a,a+5);\n\t\tfor (int i=0;i<4;i++)for(int j=i+1;j<5;j++)\n\t\t\tif (a[i]==a[j])cnt++;\n\t\tint i=0;\n\t\tif(a[i]==1&&a[i+1]==10){\n\t\t\ti=1;\n\t\t\tmax=5;\n\t\t\ta[5]=14;\n\t\t}\n\t\tfor(;i<max;i++)if(a[i]+1!=a[i+1])flag=0;\nif (cnt == 6)printf(\"four card\\n\");\nelse if (cnt == 4)printf(\"full house\\n\");\nelse if (flag)printf(\"straight\\n\");\nelse if (cnt == 3)printf(\"three card\\n\");\nelse if (cnt == 2)printf(\"two pair\\n\");\nelse if (cnt == 1)printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n    int card[5];\n    \n    while(scanf(\"%d\" ,&card[0])!=EOF){\n        for(int i = 1 ; i < 5 ; i++){\n            scanf(\",%d\" ,&card[i]);\n        }\n        \n        int cnt = 0;\n        for(int i = 0 ; i < 5 ; i++){\n            for(int j = 0 ; j < 5 ; j++){\n                if(card[i] == card[j] && i != j) cnt++;\n                \n            }\n        }\n        \n        int flg = 0;\n        switch(cnt){\n            case 2:\n                printf(\"one pair\\n\");\n                flg = 2;\n                break;\n            case 4:\n                printf(\"two pair\\n\");\n                flg = 2;\n                break;\n            case 6:\n                printf(\"three card\\n\");\n                flg = 2;\n                break;\n            case 8:\n                printf(\"full house\\n\");\n                flg = 2;\n                break;\n            case 12:\n                printf(\"four card\\n\");\n                flg = 2;\n                break;\n            default:\n                flg = 1;\n        }\n        \n        if(flg == 2) continue;\n        \n        int ct=0;\n        if(flg){\n            sort(card,card+5);\n            for(int i = 1 ; i < 5 ; i++){\n                if(card[i]-card[i-1]==1) ct++;\n            }\n        }\n        \n        if(ct==4) printf(\"straight\\n\");\n        else if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13) printf(\"straight\\n\");\n        else printf(\"null\\n\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\n\nusing namespace std;\n\nint solve(vector<int> _p, string *result){\n\n\tvector <int> cnt(5, 0);\n\tint max = 0;\n\tint cnt_pair = 0;\n\n\tfor (int i = 0; i < 5; i++){\n\t\tfor (int j = 0; j < 5; j++){\n\t\t\tif (_p[i] == _p[j]){\n\t\t\t\tcnt[i]++;\n\t\t\t\tif (cnt[i]>max) max = cnt[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (max == 4){\n\t\t*result = \"four card\";\n\t}\n\telse if (max == 3){\n\t\t*result = \"three card\";\n\t\tfor (int i = 0; i < 5; i++){\n\t\t\tif (cnt[i] == 2){\n\t\t\t\t*result = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (max == 2){\n\t\t*result = \"one pair\";\n\t\tfor (int i = 0; i < 5; i++){\n\t\t\tif (cnt[i] == 2){\n\t\t\t\tcnt_pair++;\n\t\t\t}\n\t\t}\n\t\tif (cnt_pair == 4){\n\t\t\t*result = \"two pair\";\n\t\t}\n\t}\n\telse{\n\t\t*result = \"straight\";\n\t\tsort(_p.begin(), _p.end());\n\t\tfor (int i = 0; i < 3; i++){\n\t\t\tif (_p[i]+1 != _p[i+1]){\n\t\t\t\t*result = \"null\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (*result == \"straight\"){\n\t\t\tif ((_p[3] + 1 == _p[4]) || (_p[3] == 13 && _p[4] == 1))\n\t\t\t\t;\n\t\t\telse\n\t\t\t\t*result = \"null\";\n\t\t}\n\t}\n\n\t//*result = \"one pair\";\n\treturn 1;\n}\n\nint main(){\n\n\tint buf;\n\tchar dummy;\n\tvector<int> p;\n\tstring result;\n\n\twhile (1){\n\t\tfor (int i = 0; i < 4; i++){\n\t\t\tif (cin >> buf >> dummy);else return 0;\n\t\t\tp.push_back(buf);\n\t\t}\n\t\tcin >> buf;\n\t\tp.push_back(buf);\n\n\n\t\tsolve(p, &result);\n\t\t\n\t\tcout << result << endl;\n\n\n\t\tp.clear();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ninline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}\n\ntemplate<class T> inline T sqr(T x) {return x*x;}\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nint dx[4] = {-1, 0, 1, 0};\nint dy[4] = {0, -1, 0, 1};\n\nint main() {\n  int c[5];\n\n  while(scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF) {\n    int n[13] = {};\n    REP(i, 5) n[c[i]-1]++;\n\n    int first = 0, second = 0, straight = 0;\n    REP(i, 13) {\n      if(n[i] > 0 && n[(i+1)%13] > 0) \n\tstraight++;\n      if(first < n[i]) {\n\tsecond = first;\n\tfirst = n[i];\n      } else if(second < n[i]) {\n\tsecond = n[i];\n      }\n    }\n\n    if(first == 4) cout << \"four card\" << endl;\n    else if(first == 3) {\n      if(second == 2) cout << \"full house\" << endl;\n      else cout << \"three card\" << endl;\n    }\n    else if(straight == 4 ) {\n      if(n[12] > 0 && n[0] > 0 && n[1] > 0) cout << \"null\" << endl;\n      else cout << \"straight\" << endl;\n    }\n    else if(first == 2 && second == 2) cout << \"two pair\" << endl;\n    else if(first == 2) cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6];\nint c=0,cc=0;\nbool f=true;\n//while(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\n\nscanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4]);\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;cc=0;}\n}\n\nfor(int i=0;i<3;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <array>\n#include <numeric>\n#include <algorithm>\n#include <cstdint>\n\nint main()\n{\n\tstd::uint16_t num;\n\twhile (std::cin >> num) {\n\t\ttypedef std::array<std::uint16_t, 13> CardArray;\n\t\tCardArray cards;\n\t\tcards.fill(0);\n\t\t++cards[num - 1];\n\t\tfor (std::size_t i = 0; i < 4; ++i) {\n\t\t\tchar comma;\n\t\t\tstd::cin >> comma >> num;\n\t\t\t++cards[num - 1];\n\t\t}\n\n\t\tCardArray::iterator i;\n\t\tif (std::find(cards.begin(), cards.end(), 4) != cards.end()) {\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\t}\n\t\telse if (std::find(cards.begin(), cards.end(), 3) != cards.end()) {\n\t\t\tif (std::find(cards.begin(), cards.end(), 2) != cards.end()) {\n\t\t\t\tstd::cout << \"full house\" << std::endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::cout << \"three card\" << std::endl;\n\t\t\t}\n\t\t}\n\t\telse if ((i = std::find(cards.begin(), cards.end(), 2)) != cards.end()) {\n\t\t\tif (std::find(i + 1, cards.end(), 2) != cards.end()) {\n\t\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (cards[0] == 1 and std::accumulate(cards.begin() + 9, cards.end(), 0u) == 4u) {\n\t\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti = std::find(cards.begin(), cards.end(), 1);\n\t\t\t\tif (std::accumulate(i, i + 5, 0u) == 5u) {\n\t\t\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstd::cout << \"null\" << std::endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tst.insert(nums[i]);\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\t\tif(*it>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(*it==4){\n\t\t\treturn \"four card\";\n\t\t}else if(*it==3){\n\t\t\tis3 = true;\n\t\t}else if(*it==2){\n\t\t\tif(is3){\n\t\t\t\treturn \"full house\";\n\t\t\t}else if(is2){\n\t\t\t\treturn \"two pair\";\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm.h>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint count1;\n\tint count2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\t\n\t\tcount1 = 0;\n\t\tcount2 = 0;\n\t\tstraight = 0;\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tcount1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tcount2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((count1 == 1 && count2 == 0) || (count1 == 0 && count2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (count1 == 1 && count1 == count2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (count1 + count2 == 3 && count1 != 0 && count2 != 0){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t\t\n\t\telse if (count1 == 2 || count2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (count1 == 3 || count2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint a[6] = {};\n\twhile(scanf(\"%d\",&a[0])!=EOF){\n\t\tfor(int i=1;i<5;i++)scanf(\",%d\", &a[i]);\n\t\t\tint cnt=0,flag=true,card[13]={},max = 4;\n\t\tsort(a,a+5);\n\t\tfor (int i=0;i<4;i++)for(int j=i+1;j<5;j++)\n\t\t\tif (a[i]==a[j])cnt++;\n\t\tint i=0;\n\t\tif(a[i]==1&&a[i+1]==10){\n\t\t\ti=1;\n\t\t\tmax=5;\n\t\t\ta[5]=14;\n\t\t}\n\t\tfor(;i<max;i++)if(a[i]+1!=a[i+1])flag=0;\nif (cnt == 6)printf(\"four card\\n\");\nelse if (cnt == 4)printf(\"full house\\n\");\nelse if (flag)printf(\"straight\\n\");\nelse if (cnt == 3)printf(\"three card\\n\");\nelse if (cnt == 2)printf(\"two pir\\n\");\nelse if (cnt == 1)printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n}\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n\nint a, b, c, d, e;\nint cnt[13];\n\nint main()\n{\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e ) != EOF )\n\t{\n\t\tmemset( cnt, 0, sizeof( cnt ) );\n\t\tcnt[a-1]++, cnt[b-1]++, cnt[c-1]++, cnt[d-1]++, cnt[e-1]++;\n\n\t\tif( std::find( cnt, cnt + 13, 4 ) != cnt + 13 )\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\telse if( std::find( cnt, cnt + 13, 3 ) != cnt + 13 && std::find( cnt, cnt + 13, 2 ) != cnt + 13 )\n\t\t\tstd::cout << \"full house\" << std::endl;\n\t\telse if( std::find( cnt, cnt + 13, 3 ) != cnt + 13 )\n\t\t\tstd::cout << \"three card\" << std::endl;\n\t\telse if( std::count( cnt, cnt + 13, 2 ) == 2 )\n\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\telse if( std::count( cnt, cnt + 13, 2 ) == 1 )\n\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\telse\n\t\t{\n\t\t\tbool f = false;\n\n\t\t\tfor( int i = 0; i < 10; i++ )\n\t\t\t{\n\t\t\t\tif( cnt[i] && cnt[i+1] && cnt[i+2] && cnt[i+3] && cnt[(i+4)%13] )\n\t\t\t\t{\n\t\t\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t\t\t\tf = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif( !f )\n\t\t\t\tstd::cout << \"null\" << std::endl;\n\t \t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<math.h>\n#include<string>\n#include<string.h>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<utility>\n#include<set>\n#include<map>\n#include<stdlib.h>\n#include<iomanip>\n\nusing namespace std;\n\n#define ll long long\n#define ld long double\n#define EPS 0.0000000001\n#define INF 1e9\n#define MOD 1000000007\n#define rep(i,n) for(i=0;i<n;i++)\n#define loop(i,a,n) for(i=a;i<n;i++)\n#define all(in) in.begin(),in.end()\n#define shosu(x) fixed<<setprecision(x)\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n\nint main(void) {\n  int i,j;\n  int a,b,c,d,e;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)!=EOF){\n    vi v(14,0);\n    v[a]++;\n    v[b]++;\n    v[c]++;\n    v[d]++;\n    v[e]++;\n\n    bool ans=false;\n    if(v[1]&&v[10]&&v[11]&&v[12]&&v[13]){\n      cout<<\"straight\"<<endl;\n      ans=true;\n    }\n    rep(i,10)\n      if(v[i]&&v[i+1]&&v[i+2]&&v[i+3]&&v[i+4]){\n\tcout<<\"straight\"<<endl;\n\tans=true;\n      }\n    if(ans)continue;\n\n    int na=0,nb=0,nc=0;\n    rep(i,14)\n      if(v[i]==2)na++;\n      else if(v[i]==3)nb++;\n      else if(v[i]==4)nc++;\n\n    if(nc)cout<<\"four card\"<<endl;\n    else if(na&&nb)cout<<\"full house\"<<endl;\n    else if(nb)cout<<\"three card\"<<endl;\n    else if(na==2)cout<<\"two pair\"<<endl;\n    else if(na)cout<<\"one pair\"<<endl;\n    else cout<<\"null\"<<endl;\n  END:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<stdlib>\nusing namespace std;\nint max(const void* x,const void* y);\nint main(){\n\tfor(;;){\n\t\tint hand[5];\n\t\tif(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4]) == EOF){break;}\n\t\tqsort(hand,5,sizeof(int),max);\n\t\tint f = 0;\n\t\tfor(int i=0; i<5; i++){\n\t\t\tif(hand[i] == hand[i+1] && hand[i+1] == hand[i+2] && hand[i+2] == hand[i+3]){f = 1;i+=3;}\n\t\t\telse if(hand[i] == hand[i+1] && hand[i+1] == hand[i+2]){f += 2;i+=2;}\n\t\t\telse if(hand[i] == hand[i+1]){f += 3;i+=1;}\n\t\t}\n\t\tif(hand[0]+1 == hand[1] && hand[1]+1 == hand[2] && hand[2]+1 == hand[3] && hand[3]+1 == hand[4]){f = 10;}\n\t\tif(hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13){f = 10;}\n\t\tif(f == 1){cout <<\"four card\"<<endl;}\n\t\telse if(f == 2){cout <<\"three card\"<<endl;}\n\t\telse if(f == 3){cout <<\"one pair\"<<endl;}\n\t\telse if(f == 6){cout <<\"two pair\"<<endl;}\n\t\telse if(f == 5){cout <<\"full house\"<<endl;}\n\t\telse if(f == 10){cout <<\"straight\"<<endl;}\n\t\telse if(f == 0){cout <<\"null\"<<endl;}\n\t}\n\treturn 0;\n}\nint max(const void* x,const void* y){\n\treturn *(int*)x - *(int*)y;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\nint main( void )\n{\n\tstring in;\n\twhile ( cin >> in )\n\t{\n\t\treplace( in.begin(), in.end(), ',', ' ' );\n\t\tistringstream is( in );\n\t\tvector <int> hands(5);\n\t\tfor ( int i = 0; i < 5; i++ )\n\t\t{\n\t\t\tis >> hands[i];\n\t\t}\n\n\t\tsort( hands.begin(), hands.end() );\n\n\t\tbool straight = true;\n\t\tfor ( int i = 0 ; straight && i < 4; i++ )\n\t\t{\n\t\t\tif ( i == 0 && hands[0] == 1 && hands[1] == 10 )\n\t\t\t\tcontinue;\n\t\t\tif ( hands[i+1] - hands[i] != 1 )\n\t\t\t{\n\t\t\t\tstraight = false;\n\t\t\t}\n\t\t}\n\n\t\tif ( straight )\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvector <int> cnt( 14, 0 );\n\t\t\tfor ( int i = 0; i < 5; i++ )\n\t\t\t{\n\t\t\t\tcnt[ hands[i] ] ++;\n\t\t\t}\n\n\t\t\tsort( cnt.rbegin(), cnt.rend() );\n\n\t\t\tif ( cnt[0] == 4 )\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 3 && cnt[1] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 3 )\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 2 && cnt[1] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tint card[5];\n\t\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF ){\n\t \t\n\t\tint a[20];\n\t\tmemset( a, 0, sizeof( a ) );\n\t\tint c = 0;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ) a[card[i]]++;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t c = std::max( c, std::count( card, card + 5, card[i] ) );\n\t\t}\n\t\t\n\t\tbool f = false;\n\t\tint m;\n\t\t\n\t\tswitch( c ){\n\t\t\tcase 4:\n\t\t \t\tputs( \"four card\" );\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t \t\tif( std::count( card, card + 5, card[i] ) == 2 ){\n\t\t\t\t\t\tf = true; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"full house\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t \tputs( \"three card\" );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t\t\tif( std::count( card, card + 5, card[i] ) == 2 && !f ){\n\t\t\t\t\t \tm = card[i];\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] != m && std::count( card, card + 5, card[i] ) == 2 && f ){\n\t\t\t\t\t\tputs( \"two pair\" );\n\t\t\t\t\t\tgoto end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tputs( \"one pair\" );\n\t\t\t\tbreak;\n\t\t\tcase 1:\t\n\t\t\t\tfor( int i = 1; i <= 10; i++ ){\n\t\t\t\t\tif( a[i] == 1 && a[i+1] == 1 && a[i+2] == 1 && a[i+3] == 1 && a[(i+4)%13] == 1 ) f = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"straight\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tputs( \"null\" );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\tend:\n\t}\n\n \treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define gcu getchar_unlocked\n#define ii inline int in\n#define bs inline bool scan\nii(int c){int n=0;bool m=false;if(c=='-')m=true,c=gcu();\n\tdo{n=10*n+(c-'0'),c=gcu();}while(c>='0');return m?-n:n;}\nii() {return in(gcu());}\nbs(int &n){int c=gcu();return c==EOF?false:(n=in(c),true);}\nbs(char &c){c=gcu();gcu();return c!=EOF;}\n// bs(string &s){int c; s = \"\";\n//\tfor(;;){c=gcu();if(c=='\\n'||c==' ')return true;else if(c==EOF)return false;s+=c;}}\n#undef ii\n#undef bs\n#define pcu putchar_unlocked\n#define vo inline void out\ntemplate <typename T>\nvo(T n){static char buf[20];char *p=buf;\n\tif(n<0)pcu('-'),n*=-1;if(!n)*p++='0';else while(n)*p++=n%10+'0',n/=10;\n\twhile (p!=buf)pcu(*--p);}\nvo(const char *s){while(*s)pcu(*s++);}\nvo(char c){pcu(c);}\n// vo(string &s){for (char c: s) pcu(c);}\ntemplate <typename head, typename... tail>\nvo(head&& h, tail&&... t){out(h);out(move(t)...);}\n//template <typename T>\n//vo(vector<T> &v){for(T &x:v)out(&x == &v[0]?\"\":\" \"),out(x);out('\\n');}\n#undef vo\n\ntypedef vector<int> v;\n\nint main() {\n\tv d(5);\n\tfor (;;) {\n\t\tfor (int &n: d)\n\t\t\tif (!scan(n))\n\t\t\t\treturn 0;\n\t\tsort(d.begin(), d.end());\n\t\tv h(5);\n\t\th[0] = 1;\n\t\tint t = d[0], c = 0;\n\t\tfor (auto i = d.begin() + 1; i != d.end(); i++) {\n\t\t\tif (t != *i) {\n\t\t\t\tif (t + 1 == *i)\n\t\t\t\t\th[4]++;\n\t\t\t\tt = *i, h[0]++, c = 0;\n\t\t\t} else\n\t\t\t\th[c]--, c++, h[c]++;\n\t\t}\n\t\tif (d == v{1, 10, 11, 12, 13})\n\t\t\th[4]++;\n\n\t\tif (h[4] == 4) out(\"straight\");\n\t\telse if (h[3]) out(\"four card\");\n\t\telse if (h[1] && h[2]) out(\"full house\");\n\t\telse if (h[2]) out(\"three card\");\n\t\telse if (h[1] == 2) out(\"two pair\");\n\t\telse if (h[1]) out(\"one pair\");\n\t\telse out(\"null\");\n\t\tout('\\n');\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"null\"};\n\nint str(int n){\n\tcout << s[n] << endl;\n\treturn 0;\n}\n\nint main(){\n\tint a[5], t[14], ans, m;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n\t\tans = -1, m = 0;\n\t\tsort(a, a+5);\n\t\tfill(t, t+14, 0);\n\t\tfor(int i = 0;i < 5;i++){\n\t\t\tt[a[i]]++;\n\t\t\tif(m < t[a[i]])m = t[a[i]];\n\t\t}\n\t\t\n\t\tint flag = 0;\n\t\tif(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){str(3);continue;}\n\t\tfor(int i = 1;i < 5 && a[i-1]+1 == a[i];i++)flag = i;\n\t\tif(flag == 4){str(3);continue;}\n\t\t\n\t\tif(m == 4){cout << \"four card\" << endl;continue;}\n\t\tif(m == 3){\n\t\t\tint f = 1;\n\t\t\tfor(int i = 1;i <= 13;i++){\n\t\t\t\tif(t[i] == 2)f = 0;\n\t\t\t}\n\t\t\tif(!f){cout << \"full house\" << endl;continue;}\n\t\t\tans = 2;\n\t\t}\n\t\t\n\t\tfor(int i = 1;i <= 13;i++){\n\t\t\tif(!ans && t[i] == 2)ans = 1;\n\t\t\tif(ans != 1 && t[i] == 2)ans = 0;\n\t\t}\n\t\tif(ans == -1)ans = 4;\n\t\tstr(ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main(){\n  int t[5];\n  char c;\n  while(cin>>t[0]>>c>>t[1]>>c>>t[2]>>c>>t[3]>>c>>t[4]){\n    int same[14]={0};\n    int a = 0;\n    int b = 0;\n    bool role = false;\n    for(int i=0;i<5;i++) same[t[i]]++;\n    for(int i=0;i<14;i++){\n      if(same[i]>1&&a==0) a = same[i];\n      else if(same[i]>1&&b==0) b = same[i];\n    }\n    for(int i=1;i<11;i++){\n      int h = i+4;\n      if(h==14) h = 1; \n      if(same[i]==1&&same[i+1]==1&&same[i+2]==1&&same[i+3]==1&&same[h]==1){ cout << \"straight\" << endl;\n\trole = true;}\n    }\n    if(!role){\n      if(a==4) cout << \"four card\" << endl;\n      else if(a==3&&b==2||a==2&&b==3) cout << \"full house\" << endl;\n      else if(a==3) cout << \"three card\" << endl;\n      else if(a==2&&b==2) cout << \"two pair\" << endl;\n      else if(a==2) cout << \"one pair\" << endl;\n      else cout << \"null\" << endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\nint main(){\n\tint c[5];\n\twhile( scanf(\" %d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF ){\n\t\tsort(c, c+5);\n\t\t\n\t\t//four card\n\t\tbool flag=true;\n\t\tfor(int i=0; i<=2; ++i){\n\t\t\tif(c[i] != c[i+1]) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tflag=true;\n\t\tfor(int i=1; i<=3; ++i){\n\t\t\tif(c[i] != c[i+1]) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//full house\n\t\tflag=false;\n\t\tif(c[0]==c[1] && c[2]==c[3] && c[3]==c[4]) flag=true;\n\t\tif(c[0]==c[1] && c[1]==c[2] && c[3]==c[4]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//straight\t\n\t\tflag=true;\t\n\t\tfor(int j=0; j<=4; ++j){\n\t\t\tif(c[j]!=c[0]+j) flag=false;\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(c[0]==1){\n\t\t\tflag=true;\n\t\t\tfor(int i=1; i<=4; ++i){\n\t\t\t\tif(c[i]!=9+i) flag=false;\t\n\t\t\t}\t\n\t\t}\n\t\tif(flag){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t//three card\n\t\tflag=false;\n\t\tfor(int i=0; i<=2; ++i)\n\t\t\tif(c[i]==c[i+1] && c[i+1]==c[i+2]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\t\t\n\t\t//two pair\n\t\tflag=false;\n\t\tif(c[0]==c[1] && c[2]==c[3]) flag=true;\n\t\tif(c[0]==c[1] && c[3]==c[4]) flag=true;\n\t\tif(c[1]==c[2] && c[3]==c[4]) flag=true;\n\t\tif(flag){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\n\t\t//one pair\n\t\tflag=false;\n\t\tfor(int i=0; i<=3; ++i)\n\t\t\tif(c[i]==c[i+1]) flag=true;\t\t\n\t\n\t\tif(flag){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\t\n\n\t\t//null\n\t\tprintf(\"null\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <string>\nusing namespace std;\nint main()\n{\n    char buf[32];\n    while (fgets(buf, 32, stdin)) {\n        int f[5];\n        int k=0;\n        char* p=strtok(buf, \",\\n\");\n        f[0] = atoi(p);\n        while (p = strtok(NULL, \",\\n\")) f[++k] = atoi(p);\n        sort(f, f+5);\n\n        string res = \"null\";\n        for (int i=0; i<2; ++i) {\n            if (f[0]==f[1]||f[1]==f[2]||f[2]==f[3]||f[3]==f[4])\n                res = \"one pair\";\n            if (f[0]==f[1]&&(f[2]==f[3]||f[3]==f[4]) || f[1]==f[2]&&f[3]==f[4])\n                res = \"two pair\";\n            if (f[0]==f[2]||f[1]==f[3]||f[2]==f[4]) res = \"three card\";\n            if (f[0]+1==f[1]&&f[1]+1==f[2]&&f[2]+1==f[3]&&f[3]+1==f[4])\n                res = \"straight\";\n            if (f[0]==f[2]&&f[3]==f[4] || f[0]==f[1]&&f[2]==f[4])\n                res = \"full house\";\n            if (f[0]==f[3]||f[1]==f[4]) res = \"four card\";\n            for (int j=0; j<5; j++) if (f[j]==1) f[j]=14;\n            sort(f, f+5);\n        }\n        puts(res.c_str());\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n  int i, j, k, c[5], t;\n  while(scanf(\"%d\", &c[0]) != EOF) {\n    for(i = 1; i < 5; ++i) scanf(\",%d\", &c[i]);\n    for(i = 0; i < 5; ++i) if(c[i] == 1) c[i] = 14;\n    for(i = 0; i < 5; ++i) for(j = i + 1; j < 5; ++j) if(c[i] > c[j]) t = c[i], c[i] = c[j], c[j] = t;\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) || (c[3] == c[4] && c[1] == c[2] && c[2] == c[3])) printf(\"four card\\n\");\n    else if((c[0] == c[1] && c[1] == c[2] && c[3] == c[4]) || (c[0] == c[1] && c[2] == c[3] && c[3] == c[4])) printf(\"full house\\n\");\n    else if((c[4] == c[3] + 1 || (c[4] == 14 && c[3] == 5)) && c[3] == c[2] + 1 && c[2] == c[1] + 1 && c[1] == c[0] + 1) printf(\"straight\\n\");\n    else if((c[0] == c[1] && c[1] == c[2]) || (c[2] == c[3] && c[1] == c[2]) || (c[2] == c[3] && c[3] == c[4])) printf(\"three card\\n\");\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[0] == c[1] && c[3] == c[4]) || (c[1] == c[2] && c[3] == c[4])) printf(\"two pair\\n\");\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nbool fourcard(int h[5]) {\n\tif ((h[0] == h[1] && h[0] == h[2] && h[0] == h[3]) ||\n\t\t(h[4] == h[1] && h[4] == h[2] && h[4] == h[3]) )\n\t\treturn true;\n\treturn false;\n}\n\nbool fullhouse(int h[5]) {\n\tif ((h[0] == h[1] && h[0] == h[2] && h[3] == h[4]) ||\n\t\t(h[0] == h[1] && h[4] == h[2] && h[4] == h[3]) )\n\t\treturn true;\n\treturn false;\n}\n\nbool straight(int h[5]) {\n\tif (h[0] == 1 && h[1] != 2) {\n\t\tfor (int i = 1; i < 5; i++)\n\t\t\tif (h[i] != i + 9)\n\t\t\t\treturn false;\n\t}\n\telse {\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tif (h[i] + 1 != h[i+1])\n\t\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nbool threecard(int h[5]) {\n\tfor (int i = 0; i < 3; i++)\n\t\tif (h[i] == h[i+1] && h[i] == h[i+2])\n\t\t\treturn true;\n\treturn false;\n}\n\nint pairs(int h[5]) {\n\tint ret = 0;\n\tfor (int i = 0; i < 4; i++)\n\t\tif (h[i] == h[i+1]) {\n\t\t\tret++;\n\t\t\ti++;\n\t\t}\n\treturn ret;\n}\n\nint main() {\n\tint h[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &h[0], &h[1], &h[2], &h[3], &h[4]) != EOF) {\n\t\tsort(h, h + 5);\n//\t\tfor (int i = 0; i < 5; i++)\n//\t\t\tprintf(\"%d \", h[i]);\n//\t\tprintf(\"\\n\");\n\t\tif (fourcard(h)) printf(\"four card\\n\");\n\t\telse if (fullhouse(h)) printf(\"full house\\n\");\n\t\telse if (straight(h)) printf(\"straight\\n\");\n\t\telse if (threecard(h)) printf(\"three card\\n\");\n\t\telse {\n\t\t\tint n = pairs(h);\n\t\t\tswitch (n) {\n\t\t\t\tcase 1: printf(\"one pair\\n\"); break;\n\t\t\t\tcase 2: printf(\"two pair\\n\"); break;\n\t\t\t\tdefault: printf(\"null\\n\"); break;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint check(vector<int> v) {\n\tsort(v.begin(), v.end());\n\t//for (int i = 0; i < v.size(); i++)cout << v[i] << \"  \";\n\tif ((v[0] == v[1] && v[1] == v[2] && v[2]== v[3]) || (v[1] == v[2] && v[2]== v[3] && v[3] == v[4])) {//four cards\n\t\treturn 1;\n\t}\n\telse if (((v[0] == v[1] && v[1] == v[2]) && (v[3] == v[4])) || ((v[0] == v[1]) && (v[2] == v[3] && v[3] == v[4]))) {//full house\n\t\treturn 2;\n\t}\n\telse if (v[0] == v[1] - 1 && v[0] == v[2] - 2 && v[0] == v[3] - 3 && v[0] == v[4] - 4) {//straight\n\t\treturn 3;\n\t}\n\telse if (v[0]==1 && v[1]==10 && v[2]==11 && v[3] == 12 && v[4] == 13) {//straight\n\t\treturn 3;\n\t}\n\telse if (((v[0] == v[1] && v[1] == v[2]) || (v[1] == v[2] && v[2] == v[3])) || ((v[2] == v[3] && v[3] == v[4]))) {//three cards\n\t\treturn 4;\n\t}\n\telse if ((v[0] == v[1] && v[2] == v[3]) || (v[0] == v[1] && v[3] == v[4]) || (v[1] == v[2] && v[3] == v[4])) {//two pair\n\t\treturn 5;\n\t}\n\telse if ((v[0] == v[1]) || (v[1] == v[2]) || (v[2] == v[3]) || (v[3] == v[4])) {//one pair\n\t\treturn 6;\n\t}\n\telse {\n\t\treturn 7;\n\t}\n}\n\n\nint main()\n{\n\tvector<int> v;\n\tint a, b, c, d, e;\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e) != EOF) {\n\t\tv.clear();\n\t\tv.push_back(a);\n\t\tv.push_back(b);\n\t\tv.push_back(c);\n\t\tv.push_back(d);\n\t\tv.push_back(e);\n\t\tswitch (check(v)) {\n\t\t\tcase 1:cout << \"four card\" << endl; break;\n\t\t\tcase 2:cout << \"full house\" << endl; break;\n\t\t\tcase 3:cout << \"straight\" << endl; break;\n\t\t\tcase 4:cout << \"three card\" << endl; break;\n\t\t\tcase 5:cout << \"two pair\" << endl; break;\n\t\t\tcase 6:cout << \"one pair\" << endl; break;\n\t\t\tcase 7:cout << \"null\" << endl; break;\n\t\t\tdefault:cout << \"Error\" << endl; break;\n\t\t}\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<sstream>\nusing namespace std;\nvector<string> split(const string &str, char delim){\n  istringstream iss(str); string tmp; vector<string> res;\n  while(getline(iss, tmp, delim)) res.push_back(tmp);\n  return res;\n}\n\nstring paircard(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j) if(x == card[j]) ansx++;\n\t\t\t\tif(k!=j) if(y == card[j]) ansy++;\n\t\t\t}\n\t\t\tif(ansx < ansy) swap(ansx,ansy);\n\t\t\tif(ansx == 4)             return \"four card\";\n\t\t\tif(ansx == 3 && ansy ==2) return \"full house\";\n\t\t\tif(ansx == 3 && ansy ==1) return \"three card\";\n\t\t\tif(ansx == 2 && ansy ==2) return \"two pair\";\n\t\t\tif(ansx == 2 && ansy ==1) return \"one pair\";\n\t\t}\n\t\treturn \"null\";\n}\n\nbool straight(vector<int> card){\n\tint ans = 1;\n\tif(card[0] == 1){\n\t\t\tfor(int i=0;i+1<4;i++){\n\t\t\t\tif(card[1]+i+1 == card[i+2]) ans++;\n\t\t\t}\n\t\t\tif(card[4] == 13 && ans == 4) return true;\n\t\t}\n\tans = 1;\n\tfor(int i=0;i+1<5;i++){\n\t\tif(card[0]+i+1 == card[i+1]) ans++;\n\t}\n\tif(ans==5) return true;\n\n\treturn false;\n}\n\n\nstring poker(vector<int> card){\n\n \tif(straight(card)){return \"straight\";}\n\n\treturn paircard(card);\n}\n\n\nint main(){\n\tstring str; vector<string> st; vector<int> card;\n\twhile(cin >> str){\n\t\tst = split(str,',');\n\t\tfor(int i=0;i<5;i++){\n\t\t\tstringstream ss; int a;\n\t\t\tss << st[i];\n\t\t\tss >> a;\n\t\t\tcard.push_back(a);\n\t\t}\n\t\tsort(card.begin(),card.end());\n\t\tcout << poker(card) << endl;\n\t\tcard.clear();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\n\nint main(void){\n  int x[5],card[14],fg[5],i;\n  vector<int>y;\n  while(~scanf(\"%d,%d,%d,%d,%d\"\n\t       ,&x[0],&x[1],&x[2],&x[3],&x[4])){\n    \n    memset(card,0,sizeof(card));\n    memset(fg,0,sizeof(fg));\n\n\n    for(i=0;i<5;i++)card[x[i]]++;\n\n    for(i=1;i<14;i++){\n      if(card[i]==2 && fg[0]==0)fg[0]=1;\n      else if(card[i]==2 && fg[0]==1){\n\tfg[0]=0;\n\tcout <<\"two pair\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n      else if(card[i]==3 && fg[0]!=1)fg[3]=1;\n      else if(card[i]==3 && fg[0]==1){\n\tfg[0]=0;\n\tcout << \"full house\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n      else if(card[i]==4){\n\tcout << \"four card\" << endl;\n\tfg[2]=1;\n\tbreak;\n      }\n    }\n    if(fg[0]==1){\n      cout << \"one pair\" << endl;\n      fg[2]=1;\n    }\n    else if(fg[3]==1){\n      cout << \"three card\" << endl;\n      fg[2]=1;\n    }\n    \n    for(i=0;i<5;i++)y.push_back(x[i]);\n    sort(y.begin(),y.end());\n \n    for(i=1;i<4;i++)if(y[i]+1!=y[i+1])fg[4]=1;\n\n    if(!fg[4] && !fg[2]){\n      cout << \"straight\" <<endl;\n      fg[2]=1;\n    }\n    if(fg[2]==0)cout <<\"null\"<<endl;\n    y.clear();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cstdio>\n#include<climits>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<complex>\n#include<map>\n\n#define f first\n#define s second\n#define mp make_pair\n\n#define REP(i,n) for(int i=0; i<(int)(n); i++)\n#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n#define ALL(c) (c).begin(), (c).end()\n#define EPS (1e-10)\nusing namespace std;\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef complex<double> P;\n\nconst char *name[] = {\n  \"null\",\n  \"one pair\",\n  \"two pair\",\n  \"three card\",\n  \"straight\",\n  \"full house\",\n  \"four card\"\n};\n\nint main(){\n  int c[5];\n  while(~scanf(\"%d,%d,%d,%d,%d\",c,c+1,c+2,c+3,c+4)){\n    int cnt[14] = {0};\n    int yaku = 0;\n    int cnt2[5] = {0};\n    sort(c, c+5);\n    REP(i,5) cnt[c[i]]++;\n    REP(i,14) cnt2[cnt[i]]++;\n    if(cnt2[2] == 1) yaku = 1;\n    if(cnt2[2] == 2) yaku = 2;\n    if(cnt2[3] == 1) yaku = 3;\n    if(c[1]==c[0]+1&&\n       c[2]==c[1]+1&&\n       c[3]==c[2]+1&&\n       c[4]==c[3]+1)\n      yaku = 4;\n    if(c[0]==1  &&\n       c[1]==10 &&\n       c[2]==11 &&\n       c[3]==12 &&\n       c[4]==13)\n      yaku = 4;\n    if(cnt2[2] == 1 && cnt2[3] == 1)\n      yaku = 5;\n    if(cnt2[4] == 1)\n      yaku = 6;\n    puts(name[yaku]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6];\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;cc=0;}\n}\n\nfor(int i=0;i<3;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, n) for (int i = 0; i < int(n); i++)\n#define rrep(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define reps(i, n) for (int i = 1; i <= int(n); i++)\n#define rreps(i, n) for (int i = int(n); i >= 1; i--)\n#define repc(i, n) for (int i = 0; i <= int(n); i++)\n#define rrepc(i, n) for (int i = int(n); i >= 0; i--)\n#define repi(i, a, b) for (int i = int(a); i < int(b); i++)\n#define repic(i, a, b) for (int i = int(a); i <= int(b); i++)\n#define repp(i, n) rep(i, n)\n#define reppp(i, n) repp(i, n)\n#define rrepp(i, n) rrep(i, n)\n#define repss(i, n) reps(i, n)\n#define repcc(i, n) repc(i, n)\n#define repii(i, a, b) repi(i, a, b)\n#define each(x, y) for (auto &x : y)\n#define all(a) (a).begin(), (a).end()\n#define bit(b) (1ll << (b))\n\nusing namespace std;\n\nusing i32 = int;\nusing i64 = long long;\nusing u64 = unsigned long long;\nusing f80 = long double;\nusing vi32 = vector<i32>;\nusing vi64 = vector<i64>;\nusing vu64 = vector<u64>;\nusing vf80 = vector<f80>;\nusing vstr = vector<string>;\n\ninline void yes() { cout << \"Yes\" << '\\n'; exit(0); }\ninline void no() { cout << \"No\" << '\\n'; exit(0); }\ninline i64 gcd(i64 a, i64 b) { if (min(a, b) == 0) return max(a, b); if (a % b == 0) return b; return gcd(b, a % b); }\ninline i64 lcm(i64 a, i64 b) { return a / gcd(a, b) * b; }\ninline u64 xorshift() { static u64 x = 88172645463325252ull; x = x ^ (x << 7); return x = x ^ (x >> 9); }\nvoid solve(); int main() { ios::sync_with_stdio(0); cin.tie(0); cout << fixed << setprecision(16); solve(); return 0; }\ntemplate <typename T> class pqasc : public priority_queue<T, vector<T>, greater<T>> {};\ntemplate <typename T> class pqdesc : public priority_queue<T, vector<T>, less<T>> {};\ntemplate <typename T> inline void amax(T &x, T y) { if (x < y) x = y; }\ntemplate <typename T> inline void amin(T &x, T y) { if (x > y) x = y; }\ntemplate <typename T> inline T power(T x, i64 n, T e = 1) { T r = e; while (n > 0) { if (n & 1) r *= x; x *= x; n >>= 1; } return r; }\ntemplate <typename T> istream& operator>>(istream &is, vector<T> &v) { each(x, v) is >> x; return is; }\ntemplate <typename T> ostream& operator<<(ostream &os, vector<T> &v) { rep(i, v.size()) { if (i) os << ' '; os << v[i]; } return os; }\ntemplate <typename T, typename S> istream& operator>>(istream &is, pair<T, S> &p) { is >> p.first >> p.second; return is; }\ntemplate <typename T, typename S> ostream& operator<<(ostream &os, pair<T, S> &p) { os << p.first << ' ' << p.second; return os; }\n\nvoid solve() {\n  vi32 v(5);\n  char _;\n  while (true) {\n    rep(i, 4) if (!(cin >> v[i] >> _)) return;\n    cin >> v[4];\n    {\n      map<int, int> ma;\n      rep(i, 5) ma[v[i]]++;\n      bool f = false;\n      each(m, ma) {\n        if (m.second == 4) f = true;\n      }\n      if (f) {\n        cout << \"four card\" << '\\n';\n        continue;\n      }\n    }\n    {\n      map<int, int, greater<int>> ma;\n      rep(i, 5) ma[v[i]]++;\n      if (ma.size() == 2) {\n        bool f1 = false, f2 = false;\n        each(m, ma) {\n          if (m.second == 3) f1 = true;\n          if (m.second == 2) f2 = true;\n        }\n        if (f1 && f2) {\n          cout << \"full house\" << '\\n';\n          continue;\n        }\n      }\n    }\n    {\n      sort(all(v));\n      if (v == vi32({1, 10, 11, 12, 13})) {\n        cout << \"straight\" << '\\n';\n        continue;\n      }\n      bool f = true;\n      rep(i, 4) if (v[i + 1] - v[i] != 1) f = false;\n      if (f) {\n        cout << \"straight\" << '\\n';\n        continue;\n      }\n    }\n    {\n      map<int, int, greater<int>> ma;\n      rep(i, 5) ma[v[i]]++;\n      bool f = false;\n      each(m, ma) {\n        if (m.second == 3) f = true;\n      }\n      if (f) {\n        cout << \"three card\" << '\\n';\n        continue;\n      }\n    }\n    {\n      map<int, int, greater<int>> ma;\n      rep(i, 5) ma[v[i]]++;\n      int c = 0;\n      each(m, ma) {\n        if (m.second == 2) c++;\n      }\n      if (c == 2) {\n        cout << \"two pair\" << '\\n';\n        continue;\n      }\n    }\n    {\n      map<int, int, greater<int>> ma;\n      rep(i, 5) ma[v[i]]++;\n      int c = 0;\n      each(m, ma) {\n        if (m.second == 2) c++;\n      }\n      if (c == 1) {\n        cout << \"one pair\" << '\\n';\n        continue;\n      }\n    }\n    cout << \"null\" << '\\n';\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nenum {\n  null = 0,\n  one_pair = 1,\n  two_pair = 2,\n  three_card = 3,\n  four_card = 4,\n  full_house = 5,\n  straight = 6,\n};\n\nint main(void) {\n  int card[5];\n  int pattern;\n  \n  while(scanf(\"%d,%d,%d,%d,%d\", &card[0],&card[1],&card[2],&card[3],&card[4]) != EOF) {\n    sort(card, card + 5);\n    \n    pattern = null;\n    \n    // ストレート\n    bool check = true;\n    for(int i = 0; i < 4; ++i) {\n      if(card[i + 1] != card[i] + 1) {\n        check = false;\n      }\n    }\n    if(card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) {\n      check = true;\n    }\n    if(check) {\n      pattern = straight;\n    }\n    \n    // ワンペア・ツーペア\n    int count = 0;\n    for(int i = 0; i < 4; ++i) {\n      if(card[i] == card[i + 1]) {\n        ++count;\n      }\n    }\n    if(count == 1) {\n      pattern = one_pair;\n    }\n    if(count == 2) {\n      pattern = two_pair;\n    }\n    \n    // スリーカード\n    if(card[0] == card[2] || card[1] == card[3] || card[2] == card[4]) {\n      pattern = three_card;\n    }\n    \n    // フォーカード\n    if(card[0] == card[3] || card[1] == card[4]) {\n      pattern = four_card;\n    }\n    \n    // フルハウス\n    if((card[0] == card[1] && card[2] == card[4]) || (card[0] == card[2] && card[3] == card[4])) {\n      pattern = full_house;\n    }\n    switch(pattern) {\n      case null       : cout << \"null\" << endl;         break;\n      case one_pair   : cout << \"one pair\" << endl;     break;\n      case two_pair   : cout << \"two pair\" << endl;     break;\n      case three_card : cout << \"three card\" << endl;   break;\n      case four_card  : cout << \"four card\" << endl;    break;\n      case full_house : cout << \"full house\" << endl;   break;\n      case straight   : cout << \"straight\" << endl;     break;\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/* AOJ 0038*/\n\n#include<iostream>\n#include<queue>\n\nusing namespace std;\n\nvoid Swap(int *a,int *b){\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid BabbleSort(int *data,int n){\n\n\tint i,j;\n\tfor(i=0;i<n-1;i++){\n\t\tfor(j=n-1;j>i;j--){\n\t\t\tif(data[j] <= data[j-1]){\n\t\t\t\tSwap(&data[j],&data[j-1]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n//onePair or threeCards or fourCards\nint isSameCard(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tBabbleSort(tmp,13);\n\n\tif(tmp[12]==3 && tmp[11] == 2){\n\t\treturn 6;//フルハウス\n\t}\n\telse if(tmp[12] == 4){\n\t\treturn 7;//フォーカード\n\t}\n\telse if(tmp[12] == 3){\n\t\treturn 4;\n\t}\n\telse if(tmp[12] == 2 && tmp[11] == 2){\n\t\treturn 3;\n\t}\n\telse if(tmp[12] == 2){\n\t\treturn 2;\n\t}\n\telse{\n\t\treturn 1;\n\t}\n}\n\nint isStraight(int *data){\n\t\n\tint tmp[13];\n\n\tfor(int i=0;i<13;i++){\n\t\ttmp[i] = 0;\n\t}\n\n\tfor(int i=0;i<5;i++){\n\t\ttmp[data[i]-1]++;\n\t}\n\n\tif(tmp[9] == 1 && tmp[10] == 1 && tmp[11] == 1 && tmp[12]==1 && tmp[0]==1){\n\t\treturn 5;\n\t}\n\telse{\n\t\tfor(int i=0;i<=13-5;i++){\n\t\t\tif(tmp[i]==1&&tmp[i+1]==1&&tmp[i+2]==1&&tmp[i+3]==1&&tmp[i+4]==1){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\nint main(){\n\n\tint data[5];\n\tchar tmp;\n\n\tqueue<int> ans;\n\n\twhile(cin>>data[0]){\n\t\tif(data[0]==0){\n\t\t\tbreak;\n\t\t}\n\t\tcin>>tmp;\n\t\tcin>>data[1];\n\t\tcin>>tmp;\n\t\tcin>>data[2];\n\t\tcin>>tmp;\n\t\tcin>>data[3];\n\t\tcin>>tmp;\n\t\tcin>>data[4];\n\n\t\tBabbleSort(data,5);\n\n\t\tif(isSameCard(data)>=2){\n\t\t\tans.push(isSameCard(data));\n\t\t}\n\t\telse{\n\t\t\tans.push(isStraight(data));\n\t\t}\n\n\t}\n\n\tint size=ans.size();\n\n\tfor(int i=0;i<size;i++){\n\t\tswitch(ans.front()){\n\t\tcase 7:\n\t\t\tcout<<\"four card\"<<endl;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tcout<<\"full house\"<<endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcout<<\"straight\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"three card\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tcout<<\"null\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t\tans.pop();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\nusing namespace std;\n/* null\n * one pair\n * two pair\n * three card\n * straight\n * full house\n * four card\n * */\nint main() {\n\tvector<int> cards(5);\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],\n\t\t\t\t&cards[3],&cards[4])) {\n\t\tvector<int> cnt(13, 0);\n\t\tfor (int i=0; i<5; i++) cnt[cards[i]-1]++;\n\t\tint two = 0, three = 0, four = 0;\n\t\tfor (int i=0; i<13; i++) {\n\t\t\tif (cnt[i] == 2) two++;\n\t\t\tif (cnt[i] == 3) three++;\n\t\t\tif (cnt[i] == 4) four++;\n\t\t}\n\t\tif (four == 1) {\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1 && three == 1) {\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t} else if (three == 1) {\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 2) {\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1) {\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tint c = 0;\n\t\tbool flag = false;\n\t\tfor (int i=0; i<9; i++) {\n\t\t\tif (cnt[i] == 1) {\n\t\t\t\tif (cnt[i+1]==1&&cnt[i+2]==1&&cnt[i+3]==1&&\n\t\t\t\t\t\tcnt[i+4]==1) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (flag||\n\t\t\t\t(cnt[9]==1&&cnt[10]==1&&cnt[11]==1&&cnt[12]==1&&cnt[0]==1)) {\n\t\t\tprintf(\"straight\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#define INF 1000000000\n#define mod 1000000007\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define REP(i,a,b) for(int i=(a);i<(b);i++)\n#define all(x) (x).begin(),x.end()\nusing namespace std;\nint dx[4]={1,0,-1,0};\nint dy[4]={0,1,0,-1};\nbool debug=false;\n\nint c[6];\n\nvoid DEBUG(){\n  rep(i,5)cout<<c[i]<<\" \";\n  cout<<endl;\n}\n\nvoid tranp_sort(){\n  for(int i=0;i<5;i++){\n    if(c[i]==1)c[i]+=13;\n  }\n  sort(c,c+5);\n  for(int i=0;i<5;i++){\n    if(c[i]==14)c[i]=1;\n  }\n}\n\nvoid input(){  \n  getchar();cin>>c[1];\n  getchar();cin>>c[2];\n  getchar();cin>>c[3];\n  getchar();cin>>c[4];\n}\n\n\nbool one_pair(){\n  for(int i=1;i<5;i++){\n    if(c[i]==c[i-1])return true;\n  }\n  return false;\n}\n\nbool two_pair(){\n  int cnt=0;\n  map<int,int>m;\n  for(int i=0;i<5;i++)m[c[i]]++;\n  for(int i=1;i<=13;i++){\n    if(m[i]==2)cnt++;\n  }\n  if(cnt==2)return true;\n  else return false;\n}\n\nbool three_card(){\n  for(int i=2;i<5;i++){\n    if(c[i]==c[i-1]&&c[i-1]==c[i-2])return true;\n  }\n  return false;\n}\n\nbool four_card(){\n  for(int i=3;i<5;i++){\n    if(c[i]==c[i-1]&&c[i-1]==c[i-2]&&c[i-2]==c[i-3])return true;\n  }\n  return false;\n}\n\nbool fullhouse(){\n  bool a,b;\n  a=b=false;\n  map<int,int>m;\n  for(int i=0;i<5;i++)m[c[i]]++;\n  for(int i=1;i<=13;i++){\n    if(m[i]==3)a=true;\n    if(m[i]==2)b=true;\n  }\n  if(a==true&&b==true)return true;\n  else return false;\n}\n\nbool straight(){\n  //DEBUG();\n  int tmp=c[0];\n  if(c[0]==2&&c[1]==3&&c[2]==4&&c[3]==5&&c[4]==1)return true;\n  for(int i=0;i<5;i++){\n    if(c[i]==1)tmp++;\n    //cout<<c[i]<<\" = \"<<(tmp+i)%14<<endl;\n    if((tmp+i)%14!=c[i])return false;\n  }\n  return true;\n}\n\nint main(){\n\n  while(cin>>c[0]){\n    input();\n    tranp_sort();\n    if(four_card())cout<<\"four card\"<<endl;\n    else if(fullhouse())cout<<\"full house\"<<endl;\n    else if(straight())cout<<\"straight\"<<endl;\n    else if(three_card())cout<<\"three card\"<<endl;\n    else if(two_pair())cout<<\"two pair\"<<endl;\n    else if(one_pair())cout<<\"one pair\"<<endl;\n    else cout<<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <utility>\n#include <stack>\n#include <functional>\n#include <queue>\n#include <cmath>\n#include <set>\n#include <map>\n#include <numeric>\n*/\n#include <bits/stdc++.h>\n#define rep(i,j,k) for(int i=(int)j;i<(int)k;i++)\n#define rrep()\n#define Sort(x) sort((x).begin(),(x).end())\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define vi vector<int>\n#define INF (int)1e9\n#define INFL 1e18\n#define MOD 1000000007\n#define pb push_back\n#define MP make_pair\ntypedef long long int ll;\ntypedef std::pair<int,int> P;\nint D=1;\nint dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\nusing namespace std;\n\nint gcd(int a,int b){\n    if(a<b)swap(a,b);\n    int k=a%b;\n    while(k!=0){\n        a=b;\n        b=k;\n        k=a%b;\n    }\n}\n\nint lcm(ll a,ll b){\n    return a*b/gcd(a,b);\n}\n\nint main(){\n    char c; int x;\n    int v[13]={};\n    while(cin>>x){\n        bool st=false;\n    v[x-1]++;\n    rep(i,1,5){\n        cin>>c;\n        cin>>x;\n        v[x-1]++;\n    }\n    \n    rep(i,0,10){\n        bool str=true;\n        rep(j,0,5){\n            int ni=i+j;\n            ni%=13;\n            if(v[i]!=v[ni] || v[i]!=1)str=false;\n        }\n        if(str){\n            cout<<\"straight\"<<endl;\n            st=true;\n        }\n    }\n    \n    int two=0,three=0,four=0;\n    rep(i,0,13){\n        if(v[i]==2)two++;\n        if(v[i]==3)three++;\n        if(v[i]==4)four++;\n    }\n    \n    if(four)cout<<\"four card\"<<endl;\n    else if(two && three)cout<<\"full house\"<<endl;\n    else if(three)cout<<\"three card\"<<endl;\n    else if(two==2)cout<<\"two pair\"<<endl;\n    else if(two)cout<<\"one pair\"<<endl;\n    else if(!st)cout<<\"null\"<<endl;\n    \n    fill(v,v+13,0);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n  vector<int> poker;\n  int check[15] = {0};\n  int two = 0;\n  int three = 0;\n  int four = 0;\n  int ans = 0;\n\n  string trump;\n  getline(cin,trump);\n\n  int a = 0;\n  int b = 0;\n  for(char e : trump){\n    if(e == 49){\n      if(b == 0){\n        b = 1;\n      }\n      else{\n        a = (e - 48) + 10;\n        poker.push_back(a);\n        b = 0;\n      }\n    }\n    else if(48 <= e && 57 >= e){\n      if(b == 1){\n        a = (e - 48) + 10;\n        b = 0;\n      }\n      else{\n        a = e - 48;\n      }\n      poker.push_back(a);\n    }\n    else{\n      if(b == 1){\n        poker.push_back(b);\n        b = 0;\n      }\n    }\n  }\n  \n  if(b == 1){\n    poker.push_back(b);\n  }\n\n  for(int e : poker){\n    cout<<e<<endl;\n    ++check[e];\n  }\n  check[14] = check[1];\n\n  for(int i = 1;i < 14;++i){\n    if(check[i] == 4){\n      ++four;\n    }\n    else if(check[i] == 3){\n      ++three;\n    }\n    else if(check[i] == 2){\n      ++two;\n    }\n  }\n\n  for(int i = 1;i < 14;++i){\n    cout<<check[i]<<endl;\n  }\n\n  cout<<two<<\" \"<<three<<\" \"<<four<<endl;\n\n  if(four == 1){\n    cout<<\"four card\"<<endl;\n    ans = 1;\n  }\n  else if(three == 1){\n    ans = 1;\n    if(two == 1){\n      cout<<\"full house\"<<endl;\n    }\n    else{\n      cout<<\"three card\"<<endl;\n    }\n  }\n  else if(two == 2){\n    ans = 1;\n    cout<<\"two pair\"<<endl;\n  }\n  else if(two == 1){\n    ans = 1;\n    cout<<\"one pair\"<<endl;\n  }\n  else{\n    for(int i = 1;i < 11;++i){\n      if(check[i] == check[i+1] && check[i] == check[i+2] && check[i] == check[i+3] && check[i] == check[i+4] && check[i] != 0){\n        cout<<\"straight\"<<endl;\n        ans = 1;\n        break;\n      }\n    }\n  }\n\n  if(ans == 0){\n    cout<<\"null\"<<endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <utility>\n#include <cctype>\n#include <numeric>\nusing namespace std;\n\n#define rep(i,n) for(int (i)=0; (i)<(int)(n); ++(i))\n#define foreach(c,i) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n\nint c[6];\nconst string name[] = {\n  \"null\", \"one pair\", \"two pair\", \"three card\",\n  \"full house\", \"straight\", \"four card\"\n};\n\nvoid solve() {\n  // count pair\n  int cnt = 0;\n  rep(i,4) for (int j = i+1; j < 5; ++j) {\n    if (c[i] == c[j]) ++cnt;\n  }\n\n  // check straight\n  bool flag = true;\n  for (int i = 1; i <= 4; ++i) if (c[0] != c[i]-i) flag = false;\n  if (!flag && c[0] == 1) {\n    flag = true;\n    for (int i = 1; i <= 4; ++i) if (c[i] != 9+i) flag = false;\n  }\n  if (flag && cnt < 4) cnt = 5;\n  \n  // output\n  //rep(i,5) printf(\"%3d\", c[i]);\n  printf(\"%s\\n\", name[cnt].c_str());\n}\n\nint main() {\n  while (scanf(\"%d\", c) != -1) {\n    rep(i,4) scanf(\",%d\", c+i+1);\n    sort(c,c+5);\n    solve();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n  vector<int> c(5);\n  int ans;\n  while(~scanf(\"%d,%d,%d,%d,%d\", &c[0],&c[1],&c[2],&c[3],&c[4])) {\n    sort(c.begin(), c.begin()+5);\n    if(c[0] == c[3] || c[1] == c[4]) ans = 7;\n    else if((c[0] == c[2] && c[3] == c[4])|| (c[0] == c[1] && c[2] == c[4])) ans = 6;\n    else if(c[0] == c[4] - 4 && c[1] == c[3] - 2 && c[1] != c[2])\n      ans = 5;\n    else if(c[0] == 1 && c[1] == 10 && c[2] == 11 && c[3] == 12 && c[3] == 12)\n      ans = 5;\n    else if(c[0] == c[2] || c[1] == c[3] || c[2] == c[4])\n      ans = 4;\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[1] == c[2] && c[3] == c[4]))\n      ans = 3;\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4])\n      ans = 2;\n    else ans= 1;\n    switch(ans) {\n    case 1: cout << \"null\" << endl; break;\n    case 2: cout << \"one pair\" << endl; break;\n    case 3: cout << \"two pair\" << endl; break;\n    case 4: cout << \"three card\" << endl; break;\n    case 5: cout << \"straight\" << endl; break;\n    case 6: cout << \"full house\" << endl; break;\n    case 7: cout << \"four card\" << endl; break;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint a[5];\n\tchar t;\n\twhile(cin >> a[0] >> t >> a[1] >> t >> a[2] >> t >> a[3] >> t >> a[4]){\n\t\tsort(a,a+5);\n\t\tif(a[0] == a[3] || a[1] == a[4]){\n\t\t\tcout << \"four card\" << endl;\n\t\t}\n\t\telse if((a[0] == a[1] && a[2] == a[4]) || (a[0] == a[2] && a[3] == a[4])){\n\t\t\tcout << \"full house\" << endl;\n\t\t}\n\t\telse if((a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]) || (a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse if(a[0] == a[2] || a[1] == a[3] || a[2] == a[4]){\n\t\t\tcout << \"three card\" << endl;\n\t\t}\n\t\telse if((a[0]==a[1]&&(a[2]==a[3]||a[3]==a[4]))||(a[1]==a[2]&&a[3]==a[4])){\n\t\t\tcout << \"two pair\" << endl;\n\t\t}\n\t\telse if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4])){\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tint card[5];\n\t\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF ){\n\t \t\n\t\tint a[20];\n\t\tmemset( a, 0, sizeof( a ) );\n\t\tint c = 0;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ) a[card[i]]++;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t c = std::max( c, (int)std::count( card, card + 5, card[i] ) );\n\t\t}\n\t\t\n\t\tbool f = false;\n\t\tint m;\n\t\t\n\t\tswitch( c ){\n\t\t\tcase 4:\n\t\t \t\tputs( \"four card\" );\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t \t\tif( std::count( card, card + 5, card[i] ) == 2 ){\n\t\t\t\t\t\tf = true; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"full house\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t \tputs( \"three card\" );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t\t\tif( std::count( card, card + 5, card[i] ) == 2 && !f ){\n\t\t\t\t\t \tm = card[i];\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] != m && std::count( card, card + 5, card[i] ) == 2 && f ){\n\t\t\t\t\t\tputs( \"two pair\" );\n\t\t\t\t\t\tgoto end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tputs( \"one pair\" );\n\t\t\t\tbreak;\n\t\t\tcase 1:\t\n\t\t\t\tfor( int i = 1; i <= 10; i++ ){\n\t\t\t\t\tif( a[i] == 1 && a[i+1] == 1 && a[i+2] == 1 && a[i+3] == 1 && a[(i+4)%13] == 1 ) f = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"straight\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tputs( \"null\" );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t}\n\t\t\nend:\n\n\t}\n\n \treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n\nint main (){\n\t\n\tint card[6];\n\tint index;\n\tint i, j;\n\tint time=0;\n\t\n\tdo{\n\t\tscanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]);\n\t\t\tdo{\n\t\t\t\tfor(j=0;j<5;j++){\n\t\t\t\t\tfor(i=0;i<5-1;i++){\n\t\t\t\t\t\tif(card[i]>card[i+1]){\n\t\t\t\t\t\t\tindex=card[i+1];\n\t\t\t\t\t\t\tcard[i+1]=card[i];\n\t\t\t\t\t\t\tcard[i]=index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (card[j]>card[j+1]);\n\t\tif((card[0]==card[1] && card[1]==card[2] && card[3]==card[4]) || (card[0]==card[1] && card[2]==card[3] && card[3]==card[4])){\n\t\t\tprintf(\"full house\\n\");}\n\t\telse if((card[0]==card[1] && card[1]==card[2] && card[2]==card[3]) || (card[1]==card[2] && card[2]==card[3] && card[3]==card[4])){\n\t\t\tprintf(\"four card\\n\");}\n\t\telse if((card[0]==card[1] && card[1]==card[2]) || (card[1]==card[2] && card[2]==card[3]) || (card[2]==card[3] && card[3]==card[4])){\n\t\t\tprintf(\"three card\\n\");}\n\t\telse if((card[0]==card[1] && card[2]==card[3]) || (card[0]==card[1] && card[3]==card[4]) || (card[1]==card[2] && card[2]==card[3])){\n\t\t\tprintf(\"two pair\\n\");}\n\t\telse if(card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4]){\n\t\t\tprintf(\"\\none pair\\n\");}\n\t\telse if((card[0]==card[1]-1 && card[1]==card[2]-1 && card[2]==card[3]-1 && card[3]==card[4]-1) || \n\t\t\t\t(card[0]==1 && card[1]==card[2]-1 && card[2]==card[3]-1 && card[3]==card[4]-1)){\n\t\t\tprintf(\"stright\\n\");}\n\t\telse printf(\"null\\n\");\n\t\ttime++;\n\t} while (time<50);\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define ll long long\n#define EPS 1.0e-8\n#define MAX_N 100\ntypedef pair<int,int> Pii;\ntypedef pair<int,int> Pis;\nconst double PI=acos(-1);\n\nbool is_onepair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == 1){\n\t\treturn true;\n\t}\n\t\n}\n\nbool is_twopair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 2){\n\t\t\treturn true;\n\t\t}\n}\n\nbool is_threecard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 3) return true;\n\t}\n}\n\nbool is_straight(int numbers[], map<int,int> freq, int count){\n\n\tif(numbers[0] == 11 || numbers[0] == 12 || numbers[0] == 13) return false;\n\n\tif(((numbers[0]+1 == numbers[1]) || (numbers[0]+9 == numbers[1])) && numbers[1] + 1 == numbers[2] && numbers[2] + 1 == numbers[3] && numbers[3] + 1 == numbers[4] ) return true;\n\treturn false;\n}\n\nbool is_fullhouse(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\tint cnt1 = 0, cnt2 = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcnt1++;\n\t\t}\n\t\tif(freq[i] == 3){\n\t\t\tcnt2++;\n\t\t}\n\t}\n\t\tif(cnt1 == 1 && cnt2 == 1){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n}\n\nbool is_fourcard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 4){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 1){\n\t\t\treturn true;\n\t\t}\n\t\t return false;\n}\n\nint main(){\n\tint numbers[5];\n\tmap<int,int> freq;\n\tint count = 0;\n\n\t\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&numbers[0],&numbers[1],&numbers[2],&numbers[3],&numbers[4])){\n\n\t\tsort(numbers,numbers+5);\n\n\t\tif(is_fullhouse(numbers, freq, count)) cout << \"full house\" << endl;\n\t\telse if(is_onepair(numbers, freq, count)) cout << \"one pair\" << endl;\n\t\telse if(is_twopair(numbers, freq, count)) cout << \"two pair\" << endl;\t\t\n\t\telse if(is_threecard(numbers, freq, count)) cout << \"three card\" << endl;\n\t\telse if(is_straight(numbers, freq, count)) cout << \"straight\" << endl;\n\n\t\telse if(is_fourcard(numbers, freq, count)) cout << \"four card\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "//0038 Poker Hand\n\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\n\nint main(void)\n{\n\tconst int N = 5;\n\twhile(1)\n\t{\n\t\tint hand[N];\n\t\tchar dummy;\n\t\tint i, j;\n\t\tfor(i = 0; i < N; i++)\n\t\t{\n\t\t\tif(i)\n\t\t\t\tcin >> dummy;\n\t\t\tcin >> hand[i];\n\t\t}\n\t\tif(!cin)\n\t\t\tbreak;\n\n\t\tsort(hand, hand+N);\n\n\t\tif(hand[0] == hand[3] ||\n\t\t\thand[1] == hand[4])\n\t\t\tcout << \"four card\" << endl;\n\t\telse if( (hand[0] == hand[1] && hand[2] == hand[4]) ||\n\t\t\t\t(hand[0] == hand[2] && hand[3] == hand[4]) )\n\t\t\tcout << \"full house\" << endl;\n\t\telse if( (hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) ||\n\t\t\t(hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4]) )\n\t\t\tcout << \"straight\" << endl;\n\t\telse if( (hand[0] == hand[2] || hand[1] == hand[3] || hand[2] == hand[4]) )\n\t\t\tcout << \"three card\" << endl;\n\t\telse if( (hand[0]==hand[1] && hand[2]==hand[3]) ||\n\t\t\t\t(hand[0]==hand[1] && hand[3]==hand[4]) ||\n\t\t\t\t(hand[1]==hand[2] && hand[3]==hand[4]) )\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if( hand[0]==hand[1] || hand[1]==hand[2] || hand[2]==hand[3] || hand[3]==hand[4] )\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t\tcout << \"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nstruct cards{\n\tint num, card;\n};\n\nint main()\n{\n\tvector<int> card(5);\n\tvector<int> num;\n\t// num, card\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF)\n\t{\n\t\tsort(card.begin(), card.end());\n\t\tnum.clear();\n\n\t\tint st = card[0];\n\t\tbool straight = true;\n\t\tfor(int i = 1; i < 5; i++)\n\t\t{\n\t\t\tst++;\n\t\t\tif(st != card[i])\n\t\t\t{\n\t\t\t\tstraight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(straight)\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tint cnt = 1;\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == 1) card[i] = 14;\n\t\t}\n\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == card[i+1])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnum.push_back(cnt);\n\n\t\t\t\tcnt = 1;\n\t\t\t}\n\t\t}\n\n\t\tif(num.size() == 2)\n\t\t{\n\t\t\tif( num[0] == 4 || num[1] == 4)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\tif( num[0] == 3 && num[1] == 2 || num[0] == 2 && num[1] == 3)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 3)\n\t\t{\n\t\t\tif( num[0] == 3 || num[1] == 3 || num[2] == 3)\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\n\t\t\telse if( num[0] == 2 && num[1] == 2 || num[0] == 2 && num[2] == 2 || num[1] == 2 && num[2] == 2)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse if(num.size() == 5)\n\t\t{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint ans, h[5];\n\n\twhile(1) {\n\t\tans=0;\n\t\tfor(int i=0; i<5; i++) {\n\t\t\tcin >> h[i];\n\t\t}\n\t\tif(cin.eof())\n\t\t\tbreak;\n\t\tsort(h, h+5);\n\t\tfor(int i=0; i<4; i++) {\n\t\t\tfor(int j=i+1; j<5; j++) {\n\t\t\t\tif(h[i]==h[j])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tif(h[4]==h[3]+1&&h[3]==h[2]+1&&h[2]==h[1]+1&&h[1]==h[0]+1) {\n\t\t\tans=5;\n\t\t}\n\t\tif(h[0]==1&&h[4]==13&&h[3]==12&&h[2]==11&&h[1]==10) {\n\t\t\tans=5;\n\t\t}\n\t\tswitch(ans) {\n\t\t\tcase 0:\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nbool straight(int* a){\n\tfor(int i = 0; i < 4; i++){\n\t\tif(a[i + 1] - a[i] != 1) break;\n\t\tif(i + 1 == 4) return true;\n\t}\n\t\n\treturn (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13);\n}\n\nint main(){\n\tint card[5];\n\t\n\twhile((scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])) != EOF){\n\t\tsort(card, card + 5);\n\t\t\n\t\t//four card\n\t\tif(card[2] == card[1] && card[2] == card[3] && (card[2] == card[0] || card[2] == card[4])){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\t//full house\n\t\telse if(card[0] == card[1] && card[3] == card[4] && (card[2] == card[1] || card[2] == card[3])){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\t//straight\n\t\telse if(straight(card)){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\t//three card\n\t\telse if((card[0] == card[1] && card[1] == card[2]) || (card[1] == card[2] && card[2] == card[3]) || (card[2] == card[3] && card[3] == card[4])){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\t//two pair\n\t\telse if((card[0] == card[1] && (card[2] == card[3] || card[3] == card[4])) || (card[1] == card[2] && card[3] == card[4])){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\t//one pair\n\t\telse if(card[0] == card[1] || card[1] == card[2] || card[2] == card[3] || card[3] == card[4]){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\t//null\n\t\telse{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\ntypedef long long LL;\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nusing namespace std;\nint main(void)\n{\n  for(;;){\n    int n[5];\n    char c;\n    REP(i,5){\n      if(i) cin >> c;\n      if(cin >> n[i] == 0) return 0;\n    }\n    int num[16];\n    REP(i,16) num[i]=0;\n    REP(i,5) ++num[n[i]];\n    num[14]=num[1];\n    string s=\"null\";\n    REP(i,11){\n      int st=0;\n      REP(j,5) if(num[i+j]) ++st;\n      if(st==5) s=\"straight\";\n    }\n    int pa=0;\n    REP(i,5) REP(j,i) if(n[i]==n[j]) ++pa;\n    if(pa==1) s=\"one pair\";\n    if(pa==2) s=\"two pair\";\n    if(pa==3) s=\"three card\";\n    if(pa==4) s=\"full house\";\n    if(pa==6) s=\"four card\";\n    cout << s << endl;\n\n\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main(){\nint c[6],s[6],ans=0;\nstring a[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full \n\nhouse\",\"four card\"};\nwhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\nans=0;\nfor(int i=0;i<5;i++)s[i]=100;\ns[0]=c[0];\nfor(int i=1;i<5;i++){\nfor(int j=i-1;j>-1;j--){\nif(s[j]<=c[i]){\nfor(int k=i;k>j+1;k--)s[k]=s[k-1];\ns[j+1]=c[i];\nbreak;}}\nif(s[0]>c[i]){\nfor(int k=i;k>0;k--)s[k]=s[k-1];\ns[0]=c[i];}}\nif(s[0]==s[1]||s[1]==s[2]||s[3]==s[4]||s[2]==s[3])ans=1;\nif((s[0]==s[1]||s[1]==s[2])&&(s[2]==s[3]||s[3]==s[4]))ans=2;\nif(s[0]==s[2]||s[1]==s[3]||s[2]==s[4])ans=3;\nif(s[2]+1==s[3]&&s[1]+1==s[2]&&s[3]+1==s[4]&&(s[0]+1==s[1]||(s[0]==1&&s\n\n[4]==13)))ans=4;\nif((s[0]==s[2]&&s[3]==s[4])||(s[0]==s[1]&&s[2]==s[4]))ans=5;\nif(s[0]==s[3]||s[1]==s[4])ans=6;\n\nfor(int i=0;i<7;i++){if(ans==i)cout<<a[i]<<endl;}\n\n}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main(){\n\n  vector<int> card(5);\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n\tbool judge_1p = false;\n\tbool judge_2p = false;\n\tbool judge_3 = false;\n\tbool judge_4 = false;\n\tbool judge_s = false;\n\n\tint pair = 0;\n\t\n\n\tsort(card.begin(),card.end());\n\t\n\tfor(int i=0;i<4;++i){\n\t  int count = 1;\n\t  for(int j=i+1;j<5;++j){\n\t\tif(card[i]==card[j])\n\t\t  count++;\n\t\telse{\n\t\t  i = j-1;\n\t\t  break;\n\t\t}\n\t  }\n\t  if(count == 2){\n\t\tif(judge_1p == false)\n\t\t  judge_1p = true;\n\t\telse if(judge_1p==true)\n\t\t  judge_2p = true;\n\t  }\n\t  else if(count == 3)\n\t\tjudge_3 = true;\n\n\t  else if(count == 4)\n\t\tjudge_4 = true;\n\t  \n\t}\n\n\tif(card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13){\n\t  cout<<\"straight\"<<endl;\n\t  continue;\n\t} \n\t\n\tfor(int i=0;i<4;++i){\n\t  if(card[i] == card[i+1] - 1 && i == 3)\n\t\tjudge_s = true;\n\t\t\n\t  else if(card[i] != card[i+1] - 1)\n\t\tbreak;\n\t}\n\n\tif(judge_4 == true)\n\t  cout<<\"four card\"<<endl;\n\telse if(judge_3 == true && judge_1p == true )\n\t  cout<<\"full house\"<<endl;\n\telse if(judge_3 == true)\n\t  cout<<\"three card\"<<endl;\n\telse if(judge_2p == true)\n\t  cout<<\"two pair\"<<endl;\n\telse if(judge_1p == true)\n\t  cout<<\"one pair\"<<endl;\n\telse if(judge_s == true)\n\t  cout<<\"straight\"<<endl;\n\telse\n\t  cout<<\"null\"<<endl;\n  }\n  \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<string.h>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\nint strtoint(char *s){\n\tint n=0;\n\twhile(*s!='\\0'){\n\t\tn += n*10 + *s - '0';\n\t\ts++;\n\t}\n\treturn n;\n}\n\nvoid toint(char *s, int cards[5]){\n\n\tchar *tp;\n\n\ttp = strtok(s,\",\");\n\tcards[0] = strtoint(tp);\n\n\tfor(int i=1;i<5;++i){\n\t\ttp = strtok(NULL,\",\");\n\t\tcards[i] = strtoint(tp);\n\n\t}\n\n\n\n\n\n}\n\nint main(){\n\n\tchar s[32];\n\tstring res;\n\tint card[5];\t\n\n\tcin >> s;\n\n\ttoint(s,card);\n\n\tswitch( Result(card) ){\n\t\tcase 1:res=\"null\";break;\n\t\tcase 2:res=\"one pair\";break;\n\t\tcase 3:res=\"two pair\";break;\n\t\tcase 4:res=\"three card\";break;\n\t\tcase 5:res=\"straight\";break;\n\t\tcase 6:res=\"full house\";break;\n\t\tcase 7:res=\"four card\";break;\n\t}\n\n\tcout << res << endl;\n\n\t\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>  \n\nusing namespace std;\n\n#define FOR(i, j, k) for(int i = j; i < k; ++i)\n#define rep(i, j) FOR(i, 0, j)\n#define repr(i, j) for(int i = j; i >= 0; --i)\n#define INF (1 << 30)\n#define MOD 1e9 + 7\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> P;\n\nint main() {\n\tint a[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) != EOF) {\n\t\tbool three = false, four = false, straight = false, full = false;\n\t\tint pair = 0, count = 1;\n\t\tsort(a, a + 5);\n\t\trep(i, 4) {\n\t\t\tif(a[i] == a[i+1]) ++count;\n\t\t\telse count = 1;\n\t\t\tif(count == 4) four = true;\n\t\t\tif(count == 3) three = true;\n\t\t\telse if(count == 2) ++pair;\n\t\t}\n\t\trep(i, 4) {\n\t\t\tif(a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n\t\t\t\tstraight = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(a[i] != a[i + 1] - 1) {\n\t\t\t\tstraight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse straight = true;\n\t\t}\n\t\tif(three && pair == 2) full = true;\n\t\tif(four) cout << \"four card\" << endl;\n\t\telse if(full) cout << \"full house\" << endl;\n\t\telse if(straight) cout << \"straight\" << endl;\n\t\telse if(three) cout << \"three card\" << endl;\n\t\telse if(pair == 2) cout << \"two pair\" << endl;\n\t\telse if(pair == 1) cout << \"one pair\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <fstream>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nint main()\n{\n\twhile(true)\n\t{\n\t\tint v[5];\n\t\tchar k;\n\n\t\tcin >> v[0];\n\t\trep(i, 4)\n\t\t\tcin >> k >> v[i+1];\n\n\n\t\tvint n(13, 0);\n\n\t\trep(i, 5)\n\t\t\tn[v[i]-1]++;\n\n\t\trep(i, 13)\tif(4 <= n[i])\n\t\t{\n\t\t\tcout << \"four card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) rep(j, 13) if(n[i] == 2 && n[j] == 3)\n\t\t{\n\t\t\tcout << \"full house\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 10) if(n[i % 13] == 1 && n[(i+1) % 13] == 1 &&  n[(i+2) % 13] == 1 &&  n[(i+3) % 13] == 1 &&  n[(i+4) % 13] == 1)\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(3 <= n[i])\n\t\t{\n\t\t\tcout << \"three card\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) REP(j, 1, 13) if(n[i] == 2 && n[j] == 2)\n\t\t{\n\t\t\tcout << \"two pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\trep(i, 13) if(n[i] == 2)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t\tgoto ng;\n\t\t}\n\n\t\tcout << \"null\" << endl;\n\nng:\n\t\t;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool is_four(int cards[5]){\n\tint num;\n\tfor(int i = 0; i < 2; i++){\n\t\tnum = cards[i];\n\t\tfor(int j = 0; j < 4; j++){\n\t\t\tif(cards[i+j] != num) break;\n\t\t\tif(j == 3) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool is_full(int cards[5]){\n\tif(cards[0] == cards[1] && cards[3] == cards[4] \n\t&& (cards[2] == cards[0] || cards[2] == cards[4]))\n\t\treturn true;\n\treturn false;\n}\n\nbool is_st(int cards[5]){\n\tint num = cards[0];\n\tfor(int i = 1; i < 5; i++){\n\t\tif(cards[i] != (num + i)) break;\n\t\tif(i == 4) return true;\n\t}\n\tif(cards[0] == 1 && cards[1] == 10 && cards[2] == 11 \n\t\t&& cards[3] == 12 && cards[4] == 13)\n\t\treturn true;\n\treturn false;\n}\n\nbool is_three(int cards[5]){\n\tint num;\n\tfor(int i = 0; i < 3; i++){\n\t\tnum = cards[i];\n\t\tfor(int j = 0; j < 3; j++){\n\t\t\tif(cards[i+j] != num) break;\n\t\t\tif(j == 2) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool is_two(int cards[5]){\n\tint count = 0;\n\tif(cards[0] == cards[1] || cards[1] == cards[2]) count++;\n\tif(cards[2] == cards[3] || cards[3] == cards[4]) count++;\n\tif(count == 2) return true;\n\treturn false;\n}\n\nbool is_one(int cards[5]){\n\tfor(int i = 0; i < 4 ; i++){\n\t\tif(cards[i] == cards[i+1]) return true;\n\t}\n\treturn false;\n}\n\nint main(){\n\tint cards[5];\n\tchar c;\n\twhile(cin >> cards[0] >> c >> cards[1] >> c \n\t\t>> cards[2]\t>> c >> cards[3] >> c >> cards[4])\n\t{\n\t\tsort(cards, cards + 5);\n\t\tif(is_four(cards)){\n\t\t\tcout << \"four card\" << endl;\n\t\t}else if(is_full(cards)){\n\t\t\tcout << \"full house\" << endl;\n\t\t}else if(is_st(cards)){\n\t\t\tcout << \"straight\" << endl;\n\t\t}else if(is_three(cards)){\n\t\t\tcout << \"three card\" << endl;\n\t\t}else if(is_two(cards)){\n\t\t\tcout << \"two pair\" << endl;\n\t\t}else if(is_one(cards)){\n\t\t\tcout << \"one pair\" << endl;\n\t\t}else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint str(int a[5], int n){\n\tint tmp = a[n], i;\n\tfor(i = 0;i < 4 && ++tmp == a[++n];i++){if(tmp == 13 && i == 2)tmp = 0, n = -1;}\n\tif(i == 4)return 1;\n\telse return 0;\n}\n\nint main(){\n\tstring s[]={\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\",\"null\"};\n\tint a[5], t[13], ans;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tans = -1;\n\t\tsort(a, a+5);\n\t\tfor(int i = 0;i < 13;i++)t[i] = count(a, a+5,i+1);\n\t\t\n\t\tint th = 0, tw = 0, fo = 0;\n\t\tfor(int i = 0;i < 13;i++){\n\t\t\tif(t[i] == 2)tw = 1;\n\t\t\tif(t[i] == 3)th = 1;\n\t\t\tif(t[i] == 4)fo = 1;\n\t\t}\n\t\tif(tw && th)ans = 4;\n\t\tif(fo)ans = 5;\n\t\t\n\t\tif(ans == -1 && (str(a, 0) || str(a, 1)))ans = 3;\n\t\t\n\t\tfor(int i = 0;ans == -1 && i < 13;i++){\n\t\t\tif(t[i] == 3)ans = 2;\n\t\t\tif(ans == 0 && t[i] == 2)ans = 1;\n\t\t\tif(ans == -1 && t[i] == 2)ans = 0;\n\t\t}\n\t\t\n\t\t\n\t\tif(ans == -1)ans = 6;\n\t\t\n\t\t\n\t\tcout << s[ans] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main(){\n\n\tint numc[14];\n\tint in[5];\n\n\twhile(1){\n\t\t\n\t\tfor(int i=0; i<14; ++i){\n\t\t\tnumc[i] = 0;\n\t\t}\n\n\t\tfor(int i=0; i<5; ++i){\n\t\t\t\n\t\t\tint a;\n\t\t\tchar c;\n\t\t\t\n\t\t\tcin >> a;\n\n\t\t\tif(cin.eof())\n\t\t\t\treturn 0;\n\n\t\t\tnumc[a]++;\n\t\t\tin[i] = a;\n\n\t\t\tif(i<4)\n\t\t\t\tcin >> c;\n\t\t}\n\n\t\tsort(numc, numc+14, greater<int>());\n\t\tsort(in, in+5);\n\n\t\tif(numc[0]>=4){\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tcontinue;\n\t\t}\n\t\tif(numc[0]==3&&numc[1]==2){\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tbool str = true;\n\t\t\t\n\t\tfor(int i=0; i<4; ++i){\n\t\t\t\n\t\t\tif(in[i+1]-in[i]!=1){\n\t\t\t\tstr = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tif(str||in[0]==1&&in[1]==10&&in[2]==11&&in[3]==12&&in[4]==13){\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(numc[0]>=3){\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tcontinue;\n\t\t}\n\t\tif(numc[0]>=2&&numc[1]>=2){\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\tcontinue;\n\t\t}\n\t\tif(numc[0]>=2){\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <complex>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n\ninline int to_int(string s) {int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string to_str(T x) {ostringstream sout; sout << x; return sout.str();}\n\ntypedef long long ll;\n\nstruct cards{\n\tint num, card;\n};\n\nbool straight( vector<int> card )\n{\n\tsort(card.begin(), card.end());\n\tint st = card[0];\n\tbool straight1 = true, straight2 = true;\n\tfor(int i = 1; i < 5; i++)\n\t{\n\t\tst++;\n\t\tif(st != card[i])\n\t\t{\n\t\t\tstraight1 = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor(int i = 0; i < 5; i++)\n\t{\n\t\tif(card[i] == 1) card[i] = 14;\n\t}\n\n\tsort(card.begin(), card.end());\n\tst = card[0];\n\tfor(int i = 1; i < 5; i++)\n\t{\n\t\tst++;\n\t\tif(st != card[i])\n\t\t{\n\t\t\tstraight2 = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn (straight1 || straight2);\n}\n\nint main()\n{\n\tvector<int> card(5);\n\tvector<int> num;\n\t// num, card\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF)\n\t{\n\t\tnum.clear();\n\n\t\tif(straight(card))\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tsort(card.begin(), card.end());\n\t\tint cnt = 1;\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tif(card[i] == card[i+1])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnum.push_back(cnt);\n\n\t\t\t\tcnt = 1;\n\t\t\t}\n\t\t}\n\n\t\tif(num.size() == 2)\n\t\t{\n\t\t\tif( num[0] == 4 || num[1] == 4)\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\tif( num[0] == 3 && num[1] == 2 || num[0] == 2 && num[1] == 3)\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 3)\n\t\t{\n\t\t\tif( num[0] == 3 || num[1] == 3 || num[2] == 3)\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\n\t\t\telse if( num[0] == 2 && num[1] == 2 || num[0] == 2 && num[2] == 2 || num[1] == 2 && num[2] == 2)\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if(num.size() == 4)\n\t\t{\n\t\t\tcout << \"one pair\" << endl;\n\t\t}\n\t\telse if(num.size() == 5)\n\t\t{\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stdlib.h>\nint compare_int (const void* a,const void* b) {\n\n  return (*(int*)a-*(int*)b);\n\n}\n\nint main(void) {\n\n  int hand[5];\n  \n  int overlap[5];\n  int used[5];\n\n  int count;\n  int full_or_three=-1;\n  int two_or_one=-1;\n  int temp;\n  int i,j,k,l,m=0;\n\n  char c;\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4])!=EOF) {\n\n    //sort current hand\n    qsort(hand,sizeof(hand)/sizeof(hand[0]),sizeof(int),compare_int);\n\n    //for(i=0;i<5;i++) printf(\"%d \",hand[i]);\n  \n    //count overlapped cards\n    count=0;\n\n    for(i=0;i<5;i++) {\n\n      overlap[i]=0;\n      used[i]=0;\n    }\n\n    for(i=0;i<4;i++) {\n\n      if(used[i]==1) continue;\n    \n      for(j=i+1;j<5;j++) {\n\n\tif(used[j]==0 && hand[i]==hand[j]) {\n\n\t  overlap[count]++;\n\n\t  used[i]=used[j]=1;\n\n\t}\n\n      }\n\n      used[i]=1;\n\n      count++;\n\n    }\n\n    //for(i=0;i<5;i++) printf(\"%d \",overlap[i]);\n\n    //check overlapped cards\n  \n    //four card?\n    for(i=0;i<5;i++) {\n\n      if(overlap[i]==3) {\n\n\tprintf(\"four card\\n\");\n\n\tgoto Terminate;\n      \n      }\n\n    }\n\n    //full house or three card?\n    for(i=0;i<5;i++) {\n    \n      if(overlap[i]==2) {\n\n\tfor(j=0;j<5;j++) {\n\n\t  if(overlap[j]==1) {\n\n\t    printf(\"full house\\n\");\n\n\t    goto Terminate;\n\n\t  }\n\n\t}\n\n\tprintf(\"three card\\n\");\n\n\tgoto Terminate;\n\n      }\n\n    }\n\n    if(full_or_three==1) {\n\n      for(i=0;i<5;i++) {\n\n\tif(overlap[i]==1) {\n\n\t  printf(\"full house\\n\");\n\n\t  goto Terminate;\n\n\t}\n\n\telse {\n\n\t  printf(\"three card\\n\");\n\n\t  goto Terminate;\n\n\t}\n\n      }\n\n    }\n\n    //straight?\n    if(hand[0]+1==hand[1] && hand[1]+1==hand[2] && hand[2]+1==hand[3] && hand[3]+1==hand[4] || (hand[0]==1 && hand[1]==10 && hand[2]==11 && hand[3]==12 && hand[4]==13)) {\n\n      printf(\"straight\\n\");\n\n      goto Terminate;\n\n    }\n\n    //two pair or one pair?\n    for(i=0;i<4;i++) {\n\n      if(overlap[i]==1) {\n\n\tfor(j=i+1;j<5;j++) {\n\n\t  if(overlap[j]==1) {\n\n\t    printf(\"two pair\\n\");\n\n\t    goto Terminate;\n\n\t  }\n\n\t}\n\n\tprintf(\"one pair\\n\");\n\n\tgoto Terminate;\n\n      }\n\n    }\n\n    //null\n    printf(\"null\\n\");\n\n  Terminate:\n    continue;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<sstream>\nusing namespace std;\n\nvector<string> split(const string &str, char delim){\n  istringstream iss(str); string tmp; vector<string> res;\n  while(getline(iss, tmp, delim)) res.push_back(tmp);\n  return res;\n}\n\nbool forcard(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans >= 4) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\n\nbool fullhouse(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(x == card[j]) ansx++;\n\t\t\t\t}\n\t\t\t\tif(k!=j){\n\t\t\t\t\tif(y == card[j]) ansy++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ansx == 3 && ansy ==2) return true;\n\t\t\tif(ansx == 2 && ansy ==3) return true;\n\t\t}\n\t\treturn false;\n}\n\nbool straight(vector<int> card){\n\tint ans = 1;\n\tif(card[0] == 1){\n\t\t\tfor(int i=0;i+1<4;i++){\n\t\t\t\tif(card[1]+i+1 == card[i+2]) ans++;\n\t\t\t}\n\t\t\tif(card[4] == 13 && ans == 4) return true;\n\t\t}\n\tans = 1;\n\t\tfor(int i=0;i+1<5;i++){\n\t\t\tif(card[0]+i+1 == card[i+1]) ans++;\n\t\t}\n\t\tif(ans==5) return true;\n\n\treturn false;\n}\n\nbool threecard(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans == 3) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\n\nbool twopair(vector<int> card){\n\n\t\tfor(int i=0,k;i<5;i++){\n\t\t\tint x = card[i],y; int ansx =1,ansy=1;\n\t\t\tfor(k=0;k<5;k++) if(card[k] != x){ y = card[k]; break;};\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(x == card[j]) ansx++;\n\t\t\t\t}\n\t\t\t\tif(k!=j){\n\t\t\t\t\tif(y == card[j]) ansy++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ansx == 2 && ansy ==2) return true;\n\t\t}\n\t\treturn false;\n}\n\nbool onepair(vector<int> card){\n\tint ans =1;\n\tfor(int i=0;i<5;i++){\n\t\tint x = card[i];\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(i!=j){\n\t\t\t\tif(x == card[j]) ans++;\n\t\t\t}\n\t\t}\n\t\tif(ans == 2) return true;\n\t\tans = 1;\n\t}\n\treturn false;\n}\nstring poker(vector<int> card){\n\tif(forcard(card)) {return \"four card\"; } else\n\tif(fullhouse(card)){ return \"full house\"; } else\n \tif(straight(card)){return \"straight\";} else\n\tif(threecard(card)){ return \"three card\";} else\n\tif(twopair(card)){ return \"two pair\";} else\n\tif(onepair(card)){ return \"one pair\";}\n\treturn \"null\";\n}\n\n\nint main(){\n\tstring str; vector<string> st; vector<int> card;\n\twhile(cin >> str){\n\t\tst = split(str,',');\n\t\tfor(int i=0;i<5;i++){\n\t\t\tstringstream ss; int a;\n\t\t\tss << st[i];\n\t\t\tss >> a;\n\t\t\tcard.push_back(a);\n\t\t}\n\t\tsort(card.begin(),card.end());\n\t\tcout << poker(card) << endl;\n\n\t\tcard.clear();\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\nusing namespace std;\nint main()\n{\n\tint a,b,c,d,e;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)!=EOF)\n\t{\n\t\tint cards[13]={0};\n\t\tint dbl=0,thr=0,four=0,straight=0,tmp=0;\n\t\tcards[a-1]++; cards[b-1]++; cards[c-1]++; cards[d-1]++; cards[e-1]++;\n\n\t\tfor(int i = 0; i < 13; ++i)\n\t\t{\n\t\t\tif(cards[i]==2) dbl++;\n\t\t\telse if(cards[i]==3) thr++;\n\t\t\telse if(cards[i]==4) four++;\n\n\t\t\tif(0<i&&cards[i]==1&&cards[i-1]==1) tmp++;\n\t\t\tstraight=max(tmp,straight);\n\t\t}\n\n\t\tif(four) cout<<\"four card\"<<endl;\n\t\telse if(thr&&dbl) cout<<\"full house\"<<endl;\n\t\telse if(straight==4||cards[0]==1&&cards[9]==1&&cards[10]==1&&cards[11]==1&&cards[12]==1) cout<<\"straight\"<<endl;\n\t\telse if(thr) cout<<\"three card\"<<endl;\n\t\telse if(dbl==2) cout<<\"two pair\"<<endl;\n\t\telse if(dbl) cout<<\"one pair\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n\n  int hand[5];\n  \n  int rest[2];\n\n  int flag;\n  int temp;\n  int i,j,k,l,m=0;\n\n  char c;\n\n  scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4]);\n  \n  //ツ催渉可づ可ソツーツトツつオツづつッツづ篠・ツ・ツ・\n  //four card?\n  for(i=0;i<5;i++) {\n    flag=1;\n    for(j=0;j<5;j++) {\n      for(k=0;k<5;k++) {\n\tif(j==i || k==i || j==k) continue;\n\telse if(hand[j]!=hand[k]) flag=0;\n      }\n    }\n    if(flag==1) break;\n  }\n\n  if(flag==1) {\n    printf(\"four card\\n\");\n    return 0;\n  }\n\n  //either three card or full house?\n  flag=0;\n\n  for(i=0;i<3;i++) {\n    for(j=i+1;j<4;j++) {\n      for(k=j+1;k<5;k++) {\n\tif(hand[i]==hand[j] && hand[i]==hand[k]) {\n\t  flag=1;\n\t  goto Three;\n\t}\n      }\n    }\n  }\n\n  //judge three card or full house\n Three:\n  if(flag==1) {\n    for(l=0;l<5;l++) {\n      if(l!=i && l!=j && l!=k) {\n\trest[m]=hand[l];\n\tm++;\n      }\n    }\n\n    if(rest[0]==rest[1]) {\n      printf(\"full house\\n\");\n      return 0;\n    }\n\n    else {\n      printf(\"three card\\n\");\n      return 0;\n    }\n\n  }\n\n  //straight?\n  for(i=0;i<4;i++) {\n    for(j=i+1;j<5;j++) {\n      if(hand[j]>hand[j+1]) {\n\ttemp=hand[j];\n\thand[j]=hand[j+1];\n\thand[j+1]=hand[j];\n      }\n    }\n  }\n  //for(i=0;i<5;i++) printf(\"%d \",hand[i]);\n  flag=1;\n\n  for(i=0;i<4;i++) {\n    if(hand[i]+1!=hand[i+1]) flag=0; \n  }\n\n  if(flag==1) {\n    printf(\"straight\\n\");\n    return 0;\n  }\n\n  //two pair or one pair\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\nbool isstraight(int *n){\n\tfor(int i=0;i<4;i++){\n\t\tif(n[i+1] - n[i] != 1){\n\t\t\tif(n[4] == 13 && n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nint main(){\n\tint card[5];\n\tchar tmp[4];\n\twhile(cin >> card[0] >> tmp[0] >> card[1] >> tmp[1] >> card[2] >> tmp[2] >> card[3] >> tmp[3] >> card[4]){\n\t\tint n[14] = {0};\n\t\tfor(int i=0;i<5;i++){\n\t\t\tn[card[i]]++;\n\t\t}\n\t\tsort(n,n+14,greater<int>());\n\t\tsort(card,card+5);\n\t\tif(isstraight(card)){\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse{\n\t\t\tif(n[0] == 4){\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if(n[0] == 3){\n\t\t\t\tif(n[1] == 2){\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(n[0] == 2){\n\t\t\t\tif(n[1] == 2){\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse cout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nint card[13];\n\nvoid c_card(){\n  for(int i=0; i<13; i++){\n    card[i]=0;\n  }\n}\n\nvoid judge(){\n  int count2=0, count3=0;\n  bool flag = false;\n  for(int i=0; i<13; i++){\n    if(card[i] == 2){ count2++; flag = true; }\n    if(card[i] == 3){ count3++; flag = true; }\n    if(card[i] == 4){ cout << \"four card\" << endl; flag = true;}\n\n    if(card[i%13]== 1 && card[(i+1)%13]==1 && card[(i+2)%13]==1 && card[(i+3)%13]==1 && card[(i+4)%13]==1){\n      if(card[10]==1 && card[11]==1 && card[12]==1 && card[0]==1 && card[1]==1){\n\tcontinue;\n      }\n      else{\n\tcout << \"straight\" << endl;\n\tflag = true;\n      }\n    }\n\n  }\n  \n  if(count2==1 && count3==0) cout << \"one pair\" << endl;\n  if(count2==2) cout << \"two pair\" << endl;\n  if(count2==0 && count3==1) cout << \"three card\" << endl;\n  if(count2==1 && count3==1) cout << \"full house\" << endl;\n\n  if(!flag) cout << \"null\" << endl;\n}\n\n\nint main(){\n  int c[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    c_card();\n    for(int i=0; i<5; i++)\n      card[c[i]-1]++;\n\n    judge();\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstring m[7]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\nint c[5],ans;\nbool s1(){\n\tbool ok=false;\n\tfor(int i=0;i<4;i++){\n\t\tif(c[i]==c[i+1])ok=true;\n\t}\n\treturn ok;\n}\nbool s2(){\n\tbool ok=false;\n\tif(c[1]==c[2]&&c[3]==c[4])ok=true;\n\tif(c[0]==c[1]&&c[3]==c[4])ok=true;\n\tif(c[0]==c[1]&&c[2]==c[3])ok=true;\n\treturn ok;\n}\nbool s3(){\n\tbool ok=false;\n\tfor(int i=0;i<3;i++){\n\t\tif(c[i]==c[i+1]&&c[i]==c[i+2])ok=true;\n\t}\n\treturn ok;\n}\nbool s4(){\n\tbool ok=true;\n\tfor(int i=0;i<4;i++){\n\t\tif(c[i]+1!=c[i+1])ok=false;\n\t}\n\tint d[5]={1,10,11,12,13};\n\tbool A=true;\n\tfor(int i=0;i<5;i++){\n\t\tif(c[i]!=d[i])A=false;\n\t}\n\tif(A)ok=true;\n\treturn ok;\n}\nbool s5(){\n\tbool ok=true;\n\tif(c[0]!=c[1]||c[3]!=c[4])ok=false;\n\tif(c[1]!=c[2]&&c[3]!=c[2])ok=false;\n\treturn ok;\n}\nbool s6(){\n\tbool ok=false;\n\tif(c[0]==c[1]&&c[0]==c[2]&&c[0]==c[3])ok=true;\n\tif(c[4]==c[1]&&c[4]==c[2]&&c[4]==c[3])ok=true;\n\treturn ok;\n}\nint main(){\n\tchar z;\n\twhile(cin>>c[0]){\n\t\tfor(int i=1;i<5;i++)cin>>z>>c[i];\n\t\tans=0;\n\t\tsort(c,c+5);\n\t\tif(s1())ans=1;\n\t\tif(s2())ans=2;\n\t\tif(s3())ans=3;\n\t\tif(s4())ans=4;\n\t\tif(s5())ans=5;\n\t\tif(s6())ans=6;\n\t\tcout<<m[ans]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint card[13];\nint solve(){\n    int m;\n    vector<int> n;\n    for(int i=0;i<13;i++){\n        if(card[i]) n.push_back(card[i]);\n    }\n    for(int i=0;i<n.size();i++){\n        for(int j=1;j<n.size()-i;j++){\n            if(n[j-1] < n[j]) swap(n[j-1], n[j]);\n        }\n    }\n    for(int i=0;i<n.size();i++){\n        cout << n[i] << \" \";\n    }\n    cout << endl;\n    if(n.size()==2){\n        if(n[0] == 4){\n            cout << \"four card\" << endl;\n        }else{\n            cout << \"full house\" << endl;\n        }\n    }else if(n.size()==3){\n        if(n[0] == 3){\n            cout << \"three card\" << endl;\n        }else{\n            cout << \"two pair\" << endl;\n        }\n    }else if(n.size()==4){\n        cout << \"one pair\" << endl;\n    }else{\n        bool straight=false;\n        for(int i=0;i<13-3;i++){\n            if(card[i]&&card[i+1]&&card[i+2]&&card[i+3]&&card[(i+4)%13]){\n                cout << \"straight\" << endl;\n                straight=true;\n                break;\n            }\n        }\n        if(!straight){\n            cout << \"null\" << endl;\n        }\n    }\n}\n\nint main(){\n    char comma;\n    int m;\n    while(cin >> m){\n        for(int i=0;i<13;i++){\n            card[i] = 0;\n        }\n        m--;\n        card[m]++;\n        for(int i=0;i<4;i++){\n            cin >> comma >> m;\n            m--;\n            card[m]++;\n        }\n        solve();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\nstring judge(int* nums){\n\tset<int> st;\n\tmap<int,int> count;\n\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tforeach(it,count){\n\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}\n\tif(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n  typedef map<int,int> Imap;\n  int n;\n  while(scanf(\"%d,\",&n)>0){\n    Imap h;\n    h[n]++;\n    for(int i=1;i<4;i++){\n      scanf(\"%d,\",&n);\n      h[n]++;\n    }\n    scanf(\"%d\",&n);\n    h[n]++;\n    if(h.size()==2){\n      for(Imap::iterator it=h.begin();it!=h.end();it++){\n\tif(it->second==4){\n\t  cout<<\"four card\";\n\t  break;\n\t}\n\telse if(it->second==3){\n\t  cout<<\"full house\";\n\t  break;\n\t}\n      }\n    }\n    else if(h.size()==3){\n      for(Imap::iterator it=h.begin();it!=h.end();it++){\n\tif(it->second==3){\n\t  cout<<\"three card\";\n\t  break;\n\t}\n\telse if(it->second==2){\n\t  cout<<\"two pair\";\n\t  break;\n\t}\n      }\n    }\n    else if(h.size()==4) cout<<\"one pair\";\n    else{\n      int m[5];\n      int i=0;\n      for(Imap::iterator it=h.begin();it!=h.end();it++) m[i++]=it->first;\n      sort(m,m+5);\n      for(int j=0;j<4;j++){\n\tif(m[j+1]!=m[j]+1&&!(m[j]==1&&m[j+1]==10)){\n\t  cout<<\"null\";\n\t  break;\n\t}\n\tif(j==3) cout<<\"straight\";\n      }\n    }\n    cout<<endl;\n  }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[5]={};\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;}\n}\n\nfor(int i=0;i<3;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n/* null\n * one pair\n * two pair\n * three card\n * straight\n * full house\n * four card\n * */\nint main() {\n\tvector<int> cards(5);\n\twhile (scanf(\"%d%*c%d%*c%d%*c%d%*c%d\",&cards[0],&cards[1],&cards[2],\n\t\t\t\t&cards[3],&cards[4])) {\n\t\tsort(cards.begin(), cards.end());\n\t\tvector<int> cnt(13, 0);\n\t\tfor (int i=0; i<5; i++) cnt[cards[i]-1]++;\n\t\tint two = 0, three = 0, four = 0;\n\t\tfor (int i=0; i<13; i++) {\n\t\t\tif (cnt[i] == 2) two++;\n\t\t\tif (cnt[i] == 3) three++;\n\t\t\tif (cnt[i] == 4) four++;\n\t\t}\n\t\tif (four == 1) {\n\t\t\tprintf(\"four card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1 && three == 1) {\n\t\t\tprintf(\"full house\\n\");\n\t\t\tcontinue;\n\t\t} else if (three == 1) {\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 2) {\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t} else if (two == 1) {\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tint c = 0;\n\t\tbool flag = false;\n\t\tfor (int i=0; i<10; i++) {\n\t\t\tif (cnt[i] == 1) {\n\t\t\t\tc++;\n\t\t\t\tfor (int j=1; j<5; j++) {\n\t\t\t\t\tint p = j + i;\n\t\t\t\t\tif (p == 13) p = 0;\n//\t\t\t\t\tprintf(\"%d\\n\", p);\n\t\t\t\t\tif (cnt[p] == 1) c++;\n\t\t\t\t}\n\t\t\t\tif (c == 5) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t}\n\t\tif (flag) {\n\t\t\tprintf(\"straight\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <utility>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <stdio.h>\n#include <sstream>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n \n#define rep(i,n) for(int i=0; i<n; i++)\n#define FOR(i,s,n) for(int i=s; i<n; i++)\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n#define foreach(it,con) for(auto it=con.begin();it!=con.end();it++)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\n\n\nstring judge(int* nums){\n\tmap<int,int> count;\n\tFOR(i,1,14){\n\t\tcount[i] = 0;\n\t}\n\trep(i,5){\n\t\tcount[nums[i]]++;\n\t}\n\t\n\tbool is2 = false;\n\tbool is3 = false;\n\tint c=0;\n\tint mc=0;\n\tstring ret=\"\";\n\tforeach(it,count){\n\t\tif(it->second>0){\n\t\t\tc++; \n\t\t\tmc=max(mc,c);\n\t\t}else{\n\t\t\tc=0;\n\t\t}\n\t\tif(it->second==4){\n\t\t\tret = \"four card\";\n\t\t\tbreak;\n\t\t}else if(it->second==3){\n\t\t\tif(is2){\n\t\t\t\tret = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tis3 = true;\n\t\t\t}\n\t\t}else if(it->second==2){\n\t\t\tif(is3){\n\t\t\t\tret = \"full house\";\n\t\t\t\tbreak;\n\t\t\t}else if(is2){\n\t\t\t\tret = \"two pair\";\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tis2 = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(mc==5){\n\t\treturn \"straight\";\n\t}else if(ret!=\"\"){\n\t\treturn ret;\n\t}else if(is3){\n\t\treturn \"three card\";\n\t}else if(is2){\n\t\treturn \"one pair\";\n\t}\n\treturn \"null\";\n}\n\n\n\nint main(){\n\tint nums[5];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&nums[0],&nums[1],&nums[2],&nums[3],&nums[4])+1){\n\t\tcout << judge(nums) << endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\n#define ACE 14\nint is4card(int cnt[]);\nint isFullHouse(int cnt[]);\nint isStraight(int cnt[]);\nint is3card(int cnt[]);\nint is2pair(int cnt[]);\nint is1pair(int cnt[]);\n\nint main(void){\n    int c[5];\n    int count[ACE+1];\n    \n    while (scanf(\"%d,%d,%d,%d,%d\", c+0, c+1, c+2, c+3, c+4) != EOF){\n        for (int i=2; i<=ACE; i++) count[i]=0;\n        for (int i=0; i<5; i++){\n            if (c[i]==1) c[i]=ACE;\n            count[c[i]]++;\n        }\n        \n        if (is4card(count)) printf(\"four card\\n\");\n        else if (isFullHouse(count)) printf(\"full house\\n\");\n        else if (isStraight(count)) printf(\"straight\\n\");\n        else if (is3card(count)) printf(\"three card\\n\");\n        else if (is2pair(count)) printf(\"two pair\\n\");\n        else if (is1pair(count)) printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}\n\nint is4card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 4) return 1;\n    }\n    return 0;\n}\n\nint isFullHouse(int cnt[]){\n    return is3card(cnt) && is1pair(cnt);\n}\n\nint isStraight(int cnt[]){\n    int len;\n    \n    for (int i=2; i<=ACE; i++){\n        if (cnt[i]==0) len=0;\n        else {\n            len++;\n            if (len==5) return 1;\n        }\n    }\n    return 0;\n}\n\nint is3card(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 3) return 1;\n    }\n    return 0;\n}\n\nint is2pair(int cnt[]){\n    int i,j;\n    // find the first pair\n    for (i=2; i<=ACE; i++){\n        if (cnt[i] == 2) break;\n    }\n    if (i>ACE) return 0;\n    // find second pair\n    for (j=2; j<=ACE; j++){\n        if (i==j) continue;\n        if (cnt[j] == 2) return 1;\n    }\n    return 0;\n}\n\nint is1pair(int cnt[]){\n    for (int i=2; i<=ACE; i++){\n        if (cnt[i] == 2) return 1;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <stack>\n#include <vector>\n#include <map>\n#include <set>\n#include <iostream>\n\n\nusing namespace std;\n\n\nint c[5];\nint counts[14];\nint countscounts[5];\n\nbool IsFourCard()\n{\n\treturn countscounts[4] == 1;\n}\nbool IsFullHouse()\n{\n\treturn countscounts[3] == 1 && countscounts[2] == 1;\n}\nbool IsStraight()\n{\n\tfor (int i = 0; i < 4; ++i)\n\t{\n\t\tif (c[i]+1 != c[i+1])\n\t\t{\n\t\t\tint t[] = { 1, 10, 11, 12, 13 };\n\t\t\tfor (int j = 0; j < 5; ++j)\n\t\t\t{\n\t\t\t\tif (c[j] != t[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}\nbool IsThreeCard()\n{\n\treturn countscounts[3] == 1;\n}\nbool IsTwoPair()\n{\n\treturn countscounts[2] == 2;\n}\nbool IsOnePair()\n{\n\treturn countscounts[2] == 1;\n}\nbool IsNull()\n{\n\treturn true;\n}\n\nint main()\n{\n\tbool (*judge[])() = { IsFourCard, IsFullHouse, IsStraight\n\t\t, IsThreeCard, IsTwoPair, IsOnePair, IsNull };\n\tchar* names[] = { \"four card\", \"full house\", \"straight\"\n\t\t, \"three card\", \"two pair\", \"one pair\", \"null\" };\n\n\twhile (scanf(\"%d,%d,%d,%d,%d\", c, c+1, c+2, c+3, c+4) != EOF)\n\t{\n\t\tsort(c, c+5);\n\t\tmemset(counts, 0, sizeof(counts));\n\t\tmemset(countscounts, 0, sizeof(countscounts));\n\t\tfor (int i = 0; i < 5; ++i)\n\t\t\t++counts[c[i]];\n\t\tfor (int i = 1; i < 14; ++i)\n\t\t\t++countscounts[counts[i]];\n\n\t\tfor (int i = 0; i < sizeof(judge)/sizeof(judge[0]); ++i)\n\t\t{\n\t\t\tif (judge[i]())\n\t\t\t{\n\t\t\t\tputs(names[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip> \n#include <complex> \n#include <string>\n#include <vector> \n#include <list>\n#include <deque> \n#include <stack> \n#include <queue> \n#include <set>\n#include <map>\n#include <bitset>\n#include <functional>\n#include <utility>\n#include <algorithm> \n#include <numeric> \n#include <typeinfo> \n#include <cstdio>\n#include <cstdlib> \n#include <cstring>\n#include <cmath>\n#include <climits> \n#include <ctime>\n\nusing namespace std;\n\nint main(void){\n\tint card[15],cards[5];\n\tint a[5];\n\tint b;\n\tbool y=false;\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tfor(b=0;b<=14;b++){\n\t\t\tcard[b]=0;\n\t\t}\n\t\tfor(b=0;b<=4;b++){\n\t\t\tcards[b]=0;\n\t\t}\n\t\ty=false;\n\t\tfor(b=0;b<=4;b++){\n\t\t\tcard[a[b]]+=1;\n\t\t}\n\t\tfor(b=0;b<14;b++){\n\t\t\tcards[card[b]]+=1;\n\t\t}\n\t\tif(cards[4]==1)cout << \"four card\" << endl;\n\t\telse if(cards[3]==1 && cards[2]==1)cout << \"full house\" << endl;\n\t\telse if(cards[3]==1)cout << \"three card\" << endl;\n\t\telse if(cards[2]==2)cout << \"two pair\" << endl;\n\t\telse if(cards[2]==1)cout << \"one pair\" << endl;\n\t\telse{\n\t\t\tif(card[1]==1 && card[10]==1 && card[11]==1 && card[12]==1 && card[13]==1)cout << \"straight\" << endl,y=true;\n\t\t\tfor(b=1;b<=9;b++){\n\t\t\t\tif(card[b]==1 && card[b+1]==1 && card[b+2]==1 && card[b+3]==1 && card[b+4]==1){\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\t\ty=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(y==false)cout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n\tint a[5];\n\tint kari;\n\tchar d;\n\t\n\twhile (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n\t\tfor (int i = 4; i > 0; i--) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (a[j] > a[j+1]) {\n\t\t\t\t\tkari = a[j];\n\t\t\t\t\ta[j] = a[j+1];\n\t\t\t\t\ta[j+1] = kari;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n\t\t\tif ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\tif (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\t} else if ((a[0] == a[1] && a[1] == a[2] && a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n\t\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\t}else {\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\t}\n\t\t\t} else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n\t\t\t\tif ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t\t} else {\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t} else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n\t\t\tcout << \"straight\" << endl;\n\t\t} else {\n\t\t\tcout << \"null\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tint card[5]; char ch;\n\twhile(cin>>card[0]>>ch>>card[1]>>ch>>card[2]>>ch>>card[3]>>ch>>card[4]){\n\tint num[13]={0};\n\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\tstring ans=\"null\";\n\tint pair=0;\n\tfor(int i=0;i<13;i++){\n\t\tif(num[i]==2 && ans!=\"three card\") pair++;\n\t\telse if(num[i]==3) ans=\"three card\";\n\t\telse if(num[i]==4) ans=\"four card\";\n\t};\n\t\n\tif(ans==\"three card\" && pair==1) ans=\"full house\";\n\telse if(pair==1) ans=\"one pair\";\n\telse if(pair==2) ans=\"two pair\";\n\telse if(ans==\"null\") do{\n\t\tfor(int i=0;i<9;i++){\n\t\t\tif(num[i]==1 &&num[i+1]==1&& num[i+2]==1 && num[i+3]==1 && num[i+4]==1) ans=\"straight\";\n\t\t};\n\t\tif(num[9]==1&&num[10]==1&&num[11]==1&&num[12]==1&&num[0]==1) ans=\"straight\";\n\t}while(0);\n\tcout << ans << '\\n' ;\n\t};\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<vector>\n#include<list>\n#include<stdio.h>\n#include<math.h>\n#include<iomanip>\n#include<map>\n#include<stack>\n#include<queue>\n#include<algorithm>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) range(i,0,b)\n#define debug(x) cout << \"debug \" << x << endl;\nusing namespace std;\n\nint main(){\n    int n[5];\n    string ans;\n    while(scanf(\"%d%*c%d%*c%d%*c%d%*c%d\", &n[0],&n[1],&n[2],&n[3],&n[4]) != EOF){\n        rep(i,4){\n            for(int j = 4; j > i; j--){\n                if(n[j] < n[j - 1]){\n                    int num = n[j];\n                    n[j] = n[j - 1];\n                    n[j - 1] = num;\n                }\n            }\n        }\n        ans = \"null\";\n        rep(i,4){\n            if(n[i] == n[i + 1]){\n                ans = \"one pair\";\n                rep(j,4){\n                    if(n[j] == n[j + 1] && n[j] != n[i]){\n                        ans = \"two pair\";\n                        break;\n                    }\n                }\n            }\n        }\n        rep(i,3){\n            if(n[i] == n[i + 1] && n[i] == n[i + 2]){\n                ans = \"three card\";\n                rep(j,4){\n                    if(n[j] == n[j + 1] && n[j] != n[i] && n[j] != n[i + 1]){\n                        ans = \"full house\";\n                        break;\n                    }\n                }\n            }\n        }\n        rep(i,2){\n            if(n[i] == n[i + 1] && n[i] == n[i + 2] && n[i] == n[i + 3]){\n                ans = \"four card\";\n                break;\n            }\n        }\n        bool c = true;\n        int f = n[0];\n        rep(i,5){\n            if(n[i] != f + i){\n                c = false;\n                break;\n            }\n        }\n        if(c) ans = \"straight\";\n        if(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13) ans = \"straight\";\n        cout << ans << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<map>\nusing namespace std;\nint main(){\n  for(;;){\n    vector<int> lot(5);\n    int ans = 0;\n    if(scanf(\"%d\",&lot[0]) == EOF) break;\n    for(int i=1; i<5; i++) scanf(\",%d\",&lot[i]);\n    sort(lot.begin(),lot.end());\n    map<int,int> card;\n    for(int i=0; i<5; i++) card[lot[i]]++;\n    for(map<int,int>::iterator it = card.begin(); it!=card.end(); it++){\n      if(it->second == 2) ans+=2; \n      if(it->second == 3) ans+=3;\n      if(it->second == 4) ans+=6;\n    }\n    if(ans == 2) cout <<\"one pair\"<<endl;\n    if(ans == 3) cout <<\"three card\"<<endl;\n    if(ans == 4) cout <<\"two pair\"<<endl;\n    if(ans == 5) cout <<\"full house\"<<endl;\n    if(ans == 6) cout <<\"four card\"<<endl;\n    if(lot[0]+1 == lot[1] && lot[1]+1 == lot[2] && lot[2]+1 == lot[3] && lot[3]+1 == lot[4]) cout <<\"straight\"<<endl;\n    else if(lot[0] == 1 && lot[1] == 10 && lot[2] == 11 && lot[3] == 12 && lot[4] == 13) cout <<\"straight\"<<endl;\n    else if(ans == 0) cout<<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define loop(i,x,n) for(int i=(x);i<(n);i++)\n#define all(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fir first\n#define sec second\n#define ub upper_bound\n#define lb lower_bound\n//#define int long long\nusing namespace std;\nconst int MOD=1000000007;\nconst int INF=1000000009;\n\nint main(){\n  int a,b,c,d,e;\n  char x;\n  while(cin>>a>>x>>b>>x>>c>>x>>d>>x>>e){\n    int num[14]={};\n    num[a]++;num[b]++;num[c]++;num[d]++;num[e]++;\n    int M_NUM=*max_element(num,num+14);\n    bool key=false;\n    loop(i,1,10)if(num[i]==1&&num[i+1]==1&&num[i+2]==1&&num[i+3]==1&&num[i+4]==1)key=true;\n    if(num[1]==1&&num[13]==1&&num[12]==1&&num[11]==1&&num[10]==1)key=true;\n    if(key){\n      cout<<\"straight\"<<endl;\n      goto at;\n    }\n    if(M_NUM==4){\n      cout<<\"four card\"<<endl;\n      goto at;\n    }else if(M_NUM==3){\n      bool flag=false;\n      rep(i,14)if(num[i]==2)flag=true;\n      if(flag){\n        cout<<\"full house\"<<endl;\n        goto at;\n      }else{\n        cout<<\"three card\"<<endl;\n        goto at;\n      }\n    }else if(M_NUM==2){\n      int p=0;\n      rep(i,14)if(num[i]==2)p++;\n      if(p==2){\n        cout<<\"two pair\"<<endl;\n        goto at;\n      }else{\n        cout<<\"one pair\"<<endl;\n        goto at;\n      }\n    }else{\n      cout<<\"NULL\"<<endl;\n    }\n    at: ;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <fstream>\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <utility>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\nint a[5];\n\nbool four_card() {\n  if (a[0] == a[1]) {\n    return a[1] == a[2] && a[2] == a[3];\n  } else {\n    return a[1] == a[2] && a[2] == a[3] && a[3] == a[4];\n  }\n}\n\nbool straight() {\n  if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)\n    return true;\n  for (int i = 0; i < 4; i++)\n    if (a[i] != a[i+1] - 1)\n      return false;\n  return true;\n}\n\nbool full_house() {\n  int b = a[0];\n  int c = a[4];\n  if (b != a[1] || c != a[3])\n    return false;\n  return b == a[2] || c == a[2];\n}\n\nbool three_card() {\n  if (a[0] == a[1]) {\n    return a[1] == a[2];\n  } else if (a[1] == a[2]) {\n    return a[2] == a[3];\n  } else {\n    return a[2] == a[3] && a[3] == a[4];\n  }\n}\n\nbool two_pair() {\n  set<int> se;\n  for (int i = 0; i < 5; i++)\n    se.insert(a[i]);\n  return se.size() == 3;\n}\n\nbool one_pair() {\n  set<int> se;\n  for (int i = 0; i < 5; i++)\n    se.insert(a[i]);\n  return se.size() == 4;\n}\n\nint main() {\n  string s[7] = {\n    \"four card\", \"full house\", \"straight\", \"three card\", \"two pair\", \"one pair\", \"null\"\n  };\n\n  char c;\n  while (cin >> a[0]) {\n    for (int i = 1; i < 5; i++)\n      cin >> c >> a[i];\n    sort(a, a + 5);\n    string res;\n    if (four_card()) {\n      res = s[0];\n    } else if (full_house()) {\n      res = s[1];\n    } else if (straight()) {\n      res = s[2];\n    } else if (three_card()) {\n      res = s[3];\n    } else if (two_pair()) {\n      res = s[4];\n    } else if (one_pair()) {\n      res = s[5];\n    } else {\n      res = s[6];\n    }\n    cout << res << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    const string out[] = {\"null\", \"one pair\", \"two pair\", \n                          \"three card\",\"straight\",\n                          \"full house\", \"four card\"};\n    char ch;\n    int input[6];\n\n    while (cin >> input[0]) {\n        // Input\n        for (int i = 1; i < 5; i++) \n            cin >> ch >> input[i];\n        input[5] = 100;\n\n        // Initialization\n        sort(input, input + 5);\n\n        // Algorithm\n        int card[5] = {0};\n        int cnt = 0;\n        \n        for (int i = 0; i < 5; i++) {\n            if (input[i] == input[i + 1])\n                cnt++;\n            else {\n                card[cnt]++;\n                cnt = 0;\n            }\n        }\n\n        if (card[3] == 1) \n            cout << out[6] << endl;\n        else if (card[1] == 1 && card[2] == 1) \n            cout << out[5] << endl;\n        else if (card[2] == 1) \n            cout << out[3] << endl;\n        else if (card[1] == 2)\n            cout << out[2] << endl;\n        else if (card[1] == 1)\n            cout << out[1] << endl;\n        else if (card[0] == 5) {\n            int i;\n            for (i = 1; i < 4; i++) \n                if (input[i + 1] != input[1] + i)\n                    break;\n            if (i == 4 && ((input[0] == input[1] - 1) || (input[0] == 1))) \n                cout << out[4] << endl;\n            else \n                cout << out[0] << endl;\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\nint main(){\n    int a[5];\n    while(scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])!=EOF){\n        vector<int> hand(15, 0);\n        for(int i=0; i<5; i++){\n            hand[a[i]]++;\n        }\n        hand[14] = hand[1];\n        int fs=0, sc=0;\n        for(int i=1; i<=13; i++){\n            if(hand[i] >= fs){\n                sc = fs;\n                fs = hand[i];\n            }else if(hand[i] > sc){\n                sc = hand[i];\n            }\n        }\n        bool straight = false;\n        for(int i=1; i<=10; i++){\n            bool continued = true;\n            for(int j=0; j<5; j++){\n                if(hand[i+j]==0){\n                    continued = false;\n                    break;\n                }\n            }\n            if(continued){\n                straight = true;\n                break;\n            }\n        }\n        if(fs == 4){\n            cout << \"four card\" << endl;\n        }else if(fs==3 && sc==2){\n            cout << \"full house\" << endl;\n        }else if(straight){\n            cout << \"straight\" << endl;\n        }else if(fs==3){\n            cout << \"three card\" << endl;\n        }else if(fs==2 && sc==2){\n            cout << \"two pair\" << endl;\n        }else if(fs == 2){\n            cout << \"one pair\" << endl;\n        }else{\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tint card[5]; char ch;\n\twhile(cin>>card[0]>>ch>>card[1]>>ch>>card[2]>>ch>>card[3]>>ch>>card[4]){\n\tint num[13]={0};\n\tfor(int i=0;i<5;i++) num[card[i]-1]++;\n\tstring ans=\"null\";\n\tint pair=0;\n\tfor(int i=0;i<13;i++){\n\t\tif(num[i]==2 && pair==0 && ans!=\"three card\") ans=\"one pair\",pair++;\n\t\telse if(num[i]==2 && pair==1 && ans!=\"three card\") ans=\"two pair\",pair++;\n\t\telse if(num[i]==3) ans=\"three card\";\n\t\telse if(num[i]==4) ans=\"four cards\";\n\t};\n\tif(ans==\"three card\" && pair==1) ans=\"full house\";\n\tif(ans==\"null\") do{\n\t\tint flag=0;\n\t\tfor(int i=0;i<=9;i++){\n\t\t\tif(flag==0 && num[i]==1) flag=1;\n\t\t\tif(flag==1 && num[i+1]==1&& num[i+2] && num[i+3] && num[i+4]==1) ans=\"straight\";\n\t\t};\n\t}while(0);\n\tcout << ans << '\\n' ;\n\t};\n}"
  },
  {
    "language": "C++",
    "code": "#define\t_USE_MATH_DEFINES\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cfloat>\n#include <map>\n#include <queue>\n#include <stack>\n#include <list>\n#include <string>\n#include <set>\n#include <complex>\n#define  rep(i,n) for(int i=0;i<(n);i++)\n#define  REP(i,n) for(int i=1;i<(n);i++)\n#define  rrep(i,n) for(int i=(n)-1;i>=0;i--)\n#define  VI\tvector<int>\n#define\t VS vector<string>\n#define  all(a) (a).begin(),(a).end()\n#define  debug(x) cout<<#x<<\": \"<<x<<endl\n\nusing namespace std;\nint main(){\n\t\n\tint a[5];\n\t\n\twhile(~scanf(\"%d,%d,%d,%d,%d,\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n\t\tvector<int> p(15,0);\n\t\tbool f=false;\n\t\trep(i,5){\n\t\t\tif(a[i]==1){\n\t\t\t\tp[14]++;\n\t\t\t}\n\t\t\tp[a[i]]++;\n\t\t}\n\t\tif(find(p.begin(),p.end()-1,4)!=p.end()-1){\n\t\t\tcout<<\"four card\"<<endl;\n\t\t\tf=true;\n\t\t}\n\t\telse if(find(p.begin(),p.end()-1,3)!=p.end()-1&&find(p.begin(),p.end()-1,2)!=p.end()-1){\n\t\t\tcout<<\"full house\"<<endl;\n\t\t\tf=true;\n\t\t}\n\t\telse{\n\t\t\trep(i,5){\n\t\t\t\tif(a[i]>=1&&a[i]<=10){\n\t\t\t\t\tif(p[a[i]]==1&&p[a[i]+1]==1&&p[a[i]+2]==1&&p[a[i]+3]==1&&p[a[i]+4]==1){\n\t\t\t\t\t\tcout<<\"straight\"<<endl;\n\t\t\t\t\t\tf=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\tif(!f){\n\t\t\t\tif(find(p.begin(),p.end()-1,3)!=p.end()-1)\n\t\t\t\t\tcout<<\"three card\"<<endl;\n\t\t\t\telse{\n\t\t\t\t\tint point =0;\n\t\t\t\tREP(i,14){\n\t\t\t\t\tif(p[i]==2)\n\t\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t\t\tif(point>=2)\n\t\t\t\t\t\tcout<<\"two pair\"<<endl;\n\t\t\t\t\telse if(point==1)\n\t\t\t\t\t\tcout<<\"one pair\"<<endl;\n\t\t\t\t\telse\n\t\t\t\t\t\tcout<<\"null\"<<endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t}\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n\n\tbool test = false;\n\tint A[13] = {};\n\tint a;\n\t\n\twhile(1) {\n\tfor(int i=0;i<5;i++) {\n\t\t\n\t\tcin >> a;\n\t\t\n\t\tA[a-1]++;\n\t\n\t}\n\tif ( A[0] == 1 && A[9] == 1 && A[10] == 1 && A[11] == 1 && A[12] ==1 ) {\n\tcout << \"straight\\n\";\n\tcontinue;\n}\n\t\n\tfor(int i=0;i<9;i++)\n\tif ( A[i] == 1 && A[i+1] == 1 && A[i+2] == 1 && A[i+3] == 1 && A[i+4] ==1 ) {\n\ttest = true;\n\tcontinue;\n}\n\t\n\tsort(A, A+13);\n\t\n\tif(test)\n\tcout << \"straight\\n\";\n\t\n\telse if( A[11] == 1 && A[12] == 2)\n\tcout << \"one pair\\n\";\n\t\n\telse if( A[11] == 2 && A[12] == 2)\n\tcout << \"two pair\\n\";\n\t\n\telse if( A[11] == 1 && A[12] == 3 )\n\tcout << \"three card\\n\";\n\t\n\telse if( A[11] == 2 && A[12] == 3)\n\tcout << \"full house\\n\";\n\t\n\telse if( A[12] == 4)\n\tcout << \"four card\\n\";\n\t\n\telse \n\tcout << \"null\\n\";\n\tfor(int i=0;i<13;i++)\n\tA[i] = 0;\n}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n\nusing namespace std;\n\nint main() {\n  char *line = nullptr;\n  size_t buffer_size;\n  while (getline(&line, &buffer_size, stdin) > 0) {\n    int cards[5];\n    sscanf(\n        line, \"%d,%d,%d,%d,%d\",\n        cards, cards + 1, cards + 2, cards + 3, cards + 4);\n    sort(cards, cards + 5);\n    int counts[14] = {};\n    for (auto card : cards) { ++counts[card]; }\n\n    int pairs[2] = {};\n    int three_card = 0, four_card = 0;\n    for (int card = 1; card <= 13; ++card) {\n      switch (counts[card]) {\n        case 2:\n          pairs[pairs[0] ? 1 : 0] = card;\n          break;\n        case 3:\n          three_card = card;\n          break;\n        case 4:\n          four_card = card;\n          break;\n        default:\n          break;\n      }\n    }\n\n    bool trivial_straight = true;\n    for (int i = 0, head = cards[0]; i < 5; ++i) {\n      if (cards[i] != head + i) {\n        trivial_straight = false;\n        break;\n      }\n    }\n    bool straight_with_tailing_ace = cards[0] == 1;\n    for (int i = 1; i < 5; ++i) {\n      if (cards[i] != 10 - 1 + i) {\n        straight_with_tailing_ace = false;\n        break;\n      }\n    }\n    bool straight = trivial_straight or straight_with_tailing_ace;\n\n    int num_pairs = (pairs[0] ? 1 : 0) + (pairs[1] ? 1 : 0);\n\n    const char *character = \"null\";\n    if (four_card) { character = \"four card\"; }\n    else if (three_card and num_pairs == 1) { character = \"full house\"; }\n    else if (straight) { character = \"straight\"; }\n    else if (three_card) { character = \"three card\"; }\n    else if (num_pairs == 2) { character = \"two pair\"; }\n    else if (num_pairs == 1) { character = \"one pair\"; }\n    puts(character);\n  }\n  free(line);\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#define NC 5\n\nusing namespace std;\n\nint C[ NC ];\n\nbool isStraight(){\n    for ( int i = 2; i < 5; i++ ){\n\tif ( C[i-1] != C[i] - 1 ) return false;\n    }\n    if ( C[4] == 13 ) return ( C[0] == 1 ) ? true : false;\n    return ( C[0] == C[1] - 1 ) ? true : false;\n}\n\nbool isFourC(){\n    for ( int i = 2; i < 4; i++ ) if ( C[i-1] != C[i] ) return false;\n    return ( C[0] == C[1] || C[3] == C[4] );\n}\n\nbool isFullHouse(){\n    if ( C[0] == C[1] && C[2] == C[3] && C[3] == C[4] ||\n\t C[0] == C[1] && C[1] == C[2] && C[3] == C[4] ) return true;\n    else return false;\n}\n\nbool isThreeC(){\n    if ( C[0] == C[1] && C[1] == C[2] ||\n\t C[1] == C[2] && C[2] == C[3] ||\n\t C[2] == C[3] && C[3] == C[4] ) return true;\n    else return false;\n}\n\nbool isPair(int pair){\n    int sum = 0;\n    for ( int i = 1; i < 5; i++ ) if ( C[i-1] == C[i] ) sum++;\n    return sum == pair; // one pair ツつゥ two pair \n}\n\nstring judge(){\n    sort( C, C + NC );\n\n    if ( isStraight() ) return \"straight\";\n    else if ( isFourC() ) return \"four card\";\n    else if ( isFullHouse() ) return \"full house\";\n    else if ( isThreeC() ) return \"three card\";\n    else if ( isPair(2) ) return \"two pair\";\n    else if ( isPair(1) ) return \"one pair\";\n    else return \"null\";\n}\n\nbool read(){\n    char comma;\n    if ( !(cin >> C[0]) ) return false;\n    for ( int i = 1; i < NC; i++ ){\n\tcin >> comma >> C[i];\n    }\n    return true;\n}\n\nint main(){\n    while ( read() ){\n\tcout << judge() << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main(void)\n{\n    int card[5];\n    \n    while (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n        \n        stable_sort(card, card + 5);\n        \n        if (((card[0] == card[1]) && (card[1] == card[2]) && (card[2] == card[3])) || ((card[1] == card[2]) && (card[2] == card[3]) && (card[3] == card[4]))){\n            printf(\"four card\\n\");\n        }\n        else if (((card[0] == card[1]) && (card[2] == card[3]) && (card[3] == card[4])) || ( (card[4] == card[3]) && (card[0] == card[1]) && (card[1] == card[2]) )){\n            printf(\"full house\\n\");\n        }\n        else if (((card[0] == 1) && (card[1] == 10) && (card[2] == 11) && (card[3] == 12) && (card[4] == 13)) || ((card[0] == card[1] - 1) && (card[1] == card[2] - 1) && (card[2] == card[3] - 1) && (card[3] == card[4] - 1))){\n            printf(\"straight\\n\");\n        }\n        else if ( ((card[0] == card[1]) && (card[1] == card[2])) || ((card[1] == card[2]) && (card[2] == card[3])) || ((card[2] == card[3]) && (card[3] == card[4])) ){\n            printf(\"three card\\n\");\n        }\n        else if (((card[0] == card[1]) && (card[2] == card[3])) || ((card[1] == card[2]) && (card[3] == card[4])) || ((card[0] == card[1]) && (card[3] == card[4]))){\n            printf(\"two pair\\n\");\n        }\n        else if ((card[0] == card[1]) || (card[1] == card[2]) || (card[2] == card[3]) || (card[3] == card[4])){\n            printf(\"one pair\\n\");\n        }\n        else {\n            printf(\"null\\n\");\n        }\n    }\n    \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[5];\n\tchar kari;\n\t//while(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tscanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\telse if(check[i] == 3) three++;\n\t\t\t\telse if(check[i] >= 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(three == 1) printf(\"full house\\n\");\n\t\t\telse if(pair == 2) printf(\"two pair\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three >= 1)\n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse if(three == 2) printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four >= 1) printf(\"four card\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main(){\nchar a[][11]={\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\nlong i,h,f,hh[14];\nchar c;\nwhile(cin>>h){\nfor(i=0;i<13;i++)hh[i]=0;\nhh[h-1]++;\nfor(i=1;i<5;i++){cin>>c>>h;hh[h-1]++;}\nf=0;\nfor(i=0;i<13;i++)cout<<hh[i];\ncout<<endl;\nfor(i=0;i<13;i++){\nif(hh[i]==4){\nf=6;\n}else if(hh[i]==3){\nif(f==1)f=5;else f=3;\n}else if(hh[i]==2){\nif(f==3)f=5;\nelse if(f==1)f=2;\nelse f=1;\n}\n}\nif(f==0){\n  for(i=0;i<13;i++)if(hh[i]==1)break;\n  if(hh[i+1]==1)\n  if(hh[i+2]==1)\n  if(hh[i+3]==1)\n  if(hh[i+4]==1)f=4;\n  if(hh[i+9]==1)\n  if(hh[i+10]==1)\n  if(hh[i+11]==1)\n  if(hh[i+12]==1)f=4;\n}\ncout<<a[f]<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<ios>\n#include<algorithm>\nusing namespace std;\nint a[5];\nmain()\n{\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",a,a+1,a+2,a+3,a+4))\n\t{\n\t\tsort(a,a+5);\n\t\tif(a[1]==a[4]||a[0]==a[3])cout<<\"four card\"<<endl;\n\t\telse if(a[0]==a[1]&&a[2]==a[4]||a[0]==a[2]&&a[3]==a[4])cout<<\"full house\"<<endl;\n\t\telse if((a[0]+1==a[1]||a[0]+9==a[1])&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4])\n\t\t\tcout<<\"straight\"<<endl;\n\t\telse if(a[0]==a[2]||a[1]==a[3]||a[2]==a[4])cout<<\"three card\"<<endl;\n\t\telse if(a[0]==a[1]&&(a[2]==a[3]||a[3]==a[4])||a[1]==a[2]&&a[3]==a[4])cout<<\"two pair\"<<endl;\n\t\telse if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4])cout<<\"one pair\"<<endl;\n\t\telse cout<<\"null\"<<endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nint main(void)\n{\n\tint card[6];\n\tchar kari;\n\twhile(1)\n\t{\n\t\tfor(int i = 0;i < 5;i++)\n\t\t{\n\t\t\tif(scanf(\"%d\",&card[i])== EOF) goto kitune;\n\t\t\tif(i!= 4) scanf(\"%c\",&kari);\n\t\t}\n\t\tint cnt = 0,check[15] = {0};\n\t\tsort(card,card+5);\n\t\tfor(int i = 0;i<5;i++)\n\t\t{\n\t\t\tcheck[card[i]]++;\n\t\t\tif(card[i] == 1) check[14] = 1;\n\t\t}\n\t\tfor(int i = 0;i<=14;i++)\n\t\t{\n\t\t\tif(check[i] == 1)\n\t\t\t{\n\t\t\t\tif(check[i+1] == 1) \n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(cnt == 4) break;\n\t\t\t\t}\n\t\t\t\telse cnt = 0;\n\t\t\t}\n\t\t}\n\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\tint st = 0;\n\t\tif(cnt == 4)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tst = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0;i < 13;i++)\n\t\t\t{\n\t\t\t\tif(check[i] == 2) pair++;\n\t\t\t\tif(check[i] == 3) three++;\n\t\t\t\tif(check[i] == 4) four++;\n\t\t\t}\n\t\t}\n\t\tif(pair >= 1)\n\t\t{\n\t\t\tif(pair == 2) printf(\"two pair\\n\");\n\t\t\telse if(three == 1) printf(\"full house\\n\");\n\t\t\telse printf(\"one pair\\n\");\n\t\t}\n\t\telse if(three == 1) \n\t\t{\n\t\t\tif(pair == 1) printf(\"full house\\n\");\n\t\t\telse printf(\"three card\\n\");\n\t\t}\n\t\telse if(four == 1) printf(\"fourcard\\n\");\n\t\telse if(st != 1) printf(\"null\\n\");\n\t}\n\tkitune:;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[5]={};\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;}\n}\n\nfor(int i=0;i<4;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tint l[5];\n\tchar c;\n\twhile (cin) {\n\t\tcin >> l[0] >> c;\n\t\tcin >> l[1] >> c;\n\t\tcin >> l[2] >> c;\n\t\tcin >> l[3] >> c;\n\t\tcin >> l[4];\n\t\tsort(l, l + 5);\n\t\tif (l[0] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[4] == l[1] && l[1] == l[2] && l[2] == l[3])\n\t\t\tcout << \"four card\";\n\t\telse if (l[0] == l[1] && l[1] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[0] == l[1] && l[3] == l[2] && l[4] == l[3])\n\t\t\tcout << \"full house\";\n\t\telse if (l[4] == l[3] + 1 && l[3] == l[2] + 1 && l[2] == l[1] + 1 && l[1] == l[0] + 1)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == 1 && l[1] == 10 && l[2] == 11 && l[3] == 12 && l[4] == 13)\n\t\t\tcout << \"straight\";\n\t\telse if (l[0] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[1] && l[1] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[3] == l[4] && l[3] == l[2])\n\t\t\tcout << \"three card\";\n\t\telse if (l[0] == l[1] && l[2] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[2] == l[1] && l[4] == l[3])\n\t\t\tcout << \"two pair\";\n\t\telse if (l[0] == l[1] || l[1] == l[2] || l[2] == l[3] || l[3] == l[4])\n\t\t\tcout << \"one pair\";\n\t\telse cout << \"null\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nmain(){\n  int a[5];\n  while(~scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])){\n    int card[14]={};\n    int p=1;\n    int pan=0;\n    int tpan=0;\n    for(int i=0;i<5;i++){\n      card[a[i]]++;\n      if(card[a[i]]>3) p=7;\n      else if(card[a[i]]>2){\n\ttpan++;\n\tpan--;\n      }\n      else if(card[a[i]]>1){\n\tpan++;\n      }\n    }\n    if(p==7) puts(\"four card\");\n    else if(tpan==1 && pan==1) puts(\"full house\");\n    else if(tpan==1) puts(\"three card\");\n    else if(pan==2) puts(\"two pair\");\n    else if(pan==1) puts(\"one pair\");\n    else{\n      bool f=false;\n      for(int i=1;i<10;i++){\n\tfor(int j=0;j<5;j++){\n\t  int ind = (i+j)%14+1;\n\t  if(!card[ind]) break;\n\t  if(j==4) f=true;\n\t}\n\tif(f) break;\n      }\n      if(f) puts(\"straight\");\n      else\n\tputs(\"null\");\n    }\n    \n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main() {\n  int card[5];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\\n\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF) {\n    \n    int isStraight = 1;\n    sort(card, card + 5);\n    if( card[0] == card[1]-1 || card[4] == 13 && card[0] == 1 ) isStraight ++;\n    for(int i=1; i<4; i++) {\n      if(card[i] + 1 == card[i+1]) isStraight ++;\n    }\n    \n    if( isStraight == 5 ) {\n      cout << \"straight\" << endl;\n      continue;\n    }\n\n    int cdcnt[14]; fill(cdcnt, cdcnt+14, 0);\n    for(int i=0; i<5; i++) {\n      cdcnt[card[i]-1] ++;\n    }\n\n    int mxpair = 0;    \n    for(int i=0; i<13; i++) {\n      mxpair = max(mxpair, cdcnt[i]);\n    }\n    \n    if( mxpair == 4 ) {\n      cout << \"four card\" << endl;\n    } \n\n    else if( mxpair == 3 ) {\n      for(int i=0; i<5; i++) {\n\tif( cdcnt[card[i]-1] == 2 ) {\n\t  cout << \"full house\" << endl;\n\t  goto Fin;\n\t}\n      }\n      cout << \"three card\" << endl;\n    }\n    \n    else if( mxpair == 2 ) {\n      int twopaircnt = 0;\n      \n      for(int i=0; i<5; i++) {\n\tif( cdcnt[card[i]-1] == 2 ) twopaircnt ++;\n      }\n      if( twopaircnt == 2 ) {\n\tcout << \"one pair\" << endl;\n      } else {\n\tcout << \"two pair\" << endl;\n      }\n    }\n    \n    else {\n      cout << \"null\" << endl;\n    }\n\n  Fin:\n    ;\n  }\n  \n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tint x;\n\t\n\twhile(scanf(\"%d\",&x)!=EOF)\n\t{\n\t\tint a[14]={};\n\t\ta[x]++;\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tscanf(\",%d\",&x);\n\t\t\ta[x]++;\n\t\t}\n\t\tint c=0,z=0;\n\t\tfor(int i=1;i<=13;i++)c=max(c,a[i]);\n\t\tfor(int i=1;i<=13;i++)if(c==a[i])z++;\n\t\tif(c==2&&z==1)\n\t\t{\n\t\t\tcout<<\"one pair\"<<endl;\n\t\t}\n\t\telse if(c==2&&z==2)\n\t\t{\n\t\t\tcout<<\"two pair\"<<endl;\n\t\t}\n\t\telse if(c==3)\n\t\t{\n\t\t\tfor(int i=1;i<=13;i++)\n\t\t\t{\n\t\t\t\tif(a[i]==2)\n\t\t\t\t{\n\t\t\t\t\tcout<<\"full house\"<<endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(i==13)\n\t\t\t\t{\n\t\t\t\t\tcout<<\"three card\"<<endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(c==4)\n\t\t{\n\t\t\tcout<<\"four card\"<<endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool e=false;\n\t\t\tfor(int i=1;i<=10;i++)\n\t\t\t{\n\t\t\t\tbool hoge=true;\n\t\t\t\tfor(int l=0;l<5;l++)\n\t\t\t\t{\n\t\t\t\t\tint g=i+l;\n\t\t\t\t\tif(g>13)\n\t\t\t\t\t{\n\t\t\t\t\t\tg-=13;\n\t\t\t\t\t}\n\t\t\t\t\tif(a[g]==0)hoge=false;\n\t\t\t\t}\n\t\t\t\tif(hoge==true)e=true;\n\t\t\t}\n\t\t\tif(e)cout<<\"straight\"<<endl;\n\t\t\telse cout<<\"null\"<<endl;\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<array>\n#include<algorithm>\nint main()\n{\n\twhile (true)\n\t{\n\t\tint a, b, c, d, e;\n\t\tchar foo;\n\t\tstd::cin >> a >> foo >> b >> foo >> c >> foo >> d >> foo >> e;\n\t\tif (std::cin.eof())\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tstd::array<int, 5>num = { a,b,c,d,e };\n\t\tstd::sort(num.begin(), num.end());\n\t\tif (num[0] == num[3] || num[1] == num[4])\n\t\t{\n\t\t\tstd::cout << \"four card\" << std::endl;\n\t\t}\n\t\telse if (num[0] == num[1] && num[2] == num[4] || num[0] == num[2] && num[3] == num[4])\n\t\t{\n\t\t\tstd::cout << \"full house\" << std::endl;\n\t\t}\n\t\telse if (num[2] == num[1] + 1 && num[3] == num[1] + 2 && num[4] == num[1] + 3 && (num[0] == num[1] - 1 || num[0] == 1 && num[1] == 10))\n\t\t{\n\t\t\tstd::cout << \"straight\" << std::endl;\n\t\t}\n\t\telse if (num[0]==num[2]||num[1]==num[3]||num[2]==num[4])\n\t\t{\n\t\t\tstd::cout << \"three card\" << std::endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint pair = 0;\n\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t{\n\t\t\t\tif (num[i] == num[i + 1])\n\t\t\t\t{\n\t\t\t\t\tpair++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch (pair)\n\t\t\t{\n\t\t\tcase 2:\n\t\t\t\tstd::cout << \"two pair\" << std::endl;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tstd::cout << \"one pair\" << std::endl;\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tstd::cout << \"null\" << std::endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <map>\n#include <algorithm>\n\nvoid check_multiplicity(const int* sorted_cards, std::map<int,int>& multiplicities)\n{\n\tmultiplicities.clear();\n\n\tconst int* current = sorted_cards;\n\tconst int* end = sorted_cards + 5;\n\twhile (current != end) {\n\t\tconst int* next = std::upper_bound(current, end, *current);\n\t\t++multiplicities[next - current];\n\t\tcurrent = next;\n\t}\n}\n\nint count(const std::map<int,int> multiplicities, int multiplicity)\n{\n\tstd::map<int,int>::const_iterator i = multiplicities.find(multiplicity);\n\treturn (i != multiplicities.end()) ? i->second : 0;\n}\n\nbool check_straight(const int* sorted_cards, const std::map<int,int>& multiplicities)\n{\n\tif (count(multiplicities, 1) != 5) {\n\t\treturn false;\n\t}\n\treturn (sorted_cards[4] == sorted_cards[0] + 4)\n\t\t|| (sorted_cards[0] == 1 && sorted_cards[1] == 10);\n}\n\nint main()\n{\n\tint cards[5] = {};\n\twhile (scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) == 5) {\n\t\tstd::sort(cards, cards + 5);\n\t\tstd::map<int,int> multiplicities;\n\t\tcheck_multiplicity(cards, multiplicities);\n\n\t\tif (count(multiplicities, 4) > 0) {\n\t\t\tstd::cout << \"four card\\n\";\n\t\t} else if (count(multiplicities, 3) > 0 && count(multiplicities, 2) > 0) {\n\t\t\tstd::cout << \"full house\\n\";\n\t\t} else if (check_straight(cards, multiplicities)) {\n\t\t\tstd::cout << \"straight\\n\";\n\t\t} else if (count(multiplicities, 3) > 0) {\n\t\t\tstd::cout << \"three card\\n\";\n\t\t} else if (count(multiplicities, 2) == 2) {\n\t\t\tstd::cout << \"two pair\\n\";\n\t\t} else if (count(multiplicities, 2) == 1) {\n\t\t\tstd::cout << \"one pair\\n\";\n\t\t} else {\n\t\t\tstd::cout << \"null\\n\";\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<string.h>\nusing namespace std;\n\nint Result(int cards[5]){\n\tint num_card[13];\n\tbool four=false, three=false, two=false;\n\tint\tnum_two=0;\n\tint min = 12,max = 0;\n\n\tfor(int i=0;i<13;++i)num_card[i]=0;\n\n\tfor(int i=0;i<5;++i){\n\t\tnum_card[ cards[i] - 1 ] ++;\n\t}\n\n\n\n\tfor(int i=0;i<13;++i){\n\n\t\tif(num_card[i]>0){\n\t\t\tif(i<min)min=i;\n\t\t\tif(i>max)max=i;\n\n\t\t\tif(num_card[i]==4)four=true;\n\t\t\telse if(num_card[i]==3)three=true;\n\t\t\telse if(num_card[i]==2){\n\t\t\t\ttwo=true;\n\t\t\t\t++num_two;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(four)return 7;\n\telse if(three){\n\t\tif(two)return 6;\n\t\telse return 4;\n\t}\n\telse if(two){\n\t\tif(num_two == 2)return 3;\n\t\telse return 2;\n\t}\n\n\tif(max-min+1 == 5)\n\t\treturn 5;\n\n\treturn 1;\n}\nint strtoint(char *s){\n\tint n=0;\n\twhile(*s!='\\0'){\n\t\tn += n*10 + *s - '0';\n\t\ts++;\n\t}\n\treturn n;\n}\n\nvoid toint(char *s, int cards[5]){\n\n\tchar *tp;\n\n\ttp = strtok(s,\",\");\n\tcards[0] = strtoint(tp);\n\n\tfor(int i=1;i<5;++i){\n\t\ttp = strtok(NULL,\",\");\n\t\tcards[i] = strtoint(tp);\n\n\t}\n\n\n\n\n\n}\n\nint main(){\n\n\tchar s[32];\n\tstring res;\n\tint card[5];\n\n\twhile(true){\n\n\t\tcin >> s;\n\n\t\ttoint(s,card);\n\n\t\tswitch( Result(card) ){\n\t\t\tcase 1:res=\"null\";break;\n\t\t\tcase 2:res=\"one pair\";break;\n\t\t\tcase 3:res=\"two pair\";break;\n\t\t\tcase 4:res=\"three card\";break;\n\t\t\tcase 5:res=\"straight\";break;\n\t\t\tcase 6:res=\"full house\";break;\n\t\t\tcase 7:res=\"four card\";break;\n\t\t}\n\n\t\tcout << res << endl;\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint straight(int card[])\n{\n\tfor(int i=1; i<9; i++){\n\t\tif(((card[0]==i)&&(card[1]==i+1)&&(card[2]==i+2)&&(card[3]==i+3)&&(card[4]==i+4)) || \n\t\t\t(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13))\n\t\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint main(){\n\tint c[5], n;\n\tchar k;\n\n\twhile(1){\n\t\tcin>>c[0]>>k>>c[1]>>k>>c[2]>>k>>c[3]>>k>>c[4];\n\t\tif(cin.eof())break;\n\t\tn=0;\n\t\tsort(c, c+5);\n\n\t\tfor(int i=0; i<4; i++){\n\t\t\tfor(int j=i+1; j<5; j++){\n\t\t\t\tif(c[i]==c[j])\n\t\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\tswitch(n){\n\t\t\tcase 1:\n\t\t\t\tcout<<\"one pair\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout<<\"two pair\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcout<<\"three card\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcout<<\"full house\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcout<<\"four card\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tcout<<\"four card\\n\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(c))\n\t\t\t\t\tcout<<\"straight\\n\";\n\t\t\t\telse\n\t\t\t\t\tcout<<\"null\\n\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\nint main( void )\n{\n\tstring in;\n\twhile ( cin >> in )\n\t{\n\t\treplace( in.begin(), in.end(), ',', ' ' );\n\t\tistringstream is( in );\n\t\tvector <int> hands(5);\n\t\tfor ( int i = 0; i < 5; i++ )\n\t\t{\n\t\t\tis >> hands[i];\n\t\t}\n\n\t\tsort( hands.begin(), hands.end() );\n\n\t\tbool straight = true;\n\t\tfor ( int i = 0 ; straight && i < 4; i++ )\n\t\t{\n\t\t\tif ( i == 0 && hands[i] == 1 )\n\t\t\t\tcontinue;\n\t\t\tif ( hands[i+1] - hands[i] != 1 )\n\t\t\t{\n\t\t\t\tstraight = false;\n\t\t\t}\n\t\t}\n\n\t\tif ( straight )\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvector <int> cnt( 14, 0 );\n\t\t\tfor ( int i = 0; i < 5; i++ )\n\t\t\t{\n\t\t\t\tcnt[ hands[i] ] ++;\n\t\t\t}\n\n\t\t\tsort( cnt.rbegin(), cnt.rend() );\n\n\t\t\tif ( cnt[0] == 4 )\n\t\t\t{\n\t\t\t\tcout << \"four cards\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 3 && cnt[1] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 3 )\n\t\t\t{\n\t\t\t\tcout << \"three cards\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 2 && cnt[1] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "<?php\n\nwhile (TRUE) {\n    $c = fscanf(STDIN, '%d,%d,%d,%d,%d');\n    if (feof(STDIN)) {\n        break;\n    }\n    sort($c);\n    $hash = array();\n    $max = 0;\n    foreach ($c as $v) {\n        if (!isset($hash[$v])) {\n            $hash[$v] = 0;\n        }\n        $hash[$v]++;\n        $max = $hash[$v] > $max ? $hash[$v] : $max;\n    }\n    arsort($hash);\n    $combo = 'null';\n    if ($max >= 2) {\n        $combo = 'one pair';\n    }\n    if ($max >= 2 && count($hash) <= 3) {\n        $combo = 'two pair';\n    }\n    if ($max >= 3) {\n        $combo = 'three card';\n    }\n    if (count($hash) === 5 && isStraight($c)) {\n        $combo = 'straight';\n    }\n    if ($max >= 3 && count($hash) <= 2) {\n        $combo = 'full house';\n    }\n    if ($max >= 4) {\n        $combo = 'four card';\n    }\n    echo $combo . PHP_EOL;\n}\n\nfunction isStraight($cards) {\n    if (max($cards) - min($cards) === 4) {\n        return true;\n    }\n    if ($cards[0] === 1 && $cards[1] === 10 && $cards[4] === 13) {\n        return true;\n    }\n    return false;\n}"
  },
  {
    "language": "C++",
    "code": "//Poker Hand\n#include<bits/stdc++.h>\nusing namespace std;\n\nint c[5];\n\nbool four_card(){\n  if(c[0]==c[3] || c[1]==c[4]){\n    cout<<\"four card\"<<endl;\n    return true;\n  }\n  return false;\n}\n\nbool full_house(){\n  if((c[0]==c[2] && c[3]==c[4]) || (c[0]==c[1] && c[2]==c[4])){\n    cout<<\"full house\"<<endl;\n    return true;\n  }\n  return false;\n}\n\nbool straight(){\n  int i, n=c[0];\n  for(i=1; i<5; i++){\n    if(n==1&&c[i]==10){\n      n=c[1];\n      continue;\n    }\n    if(c[i]!=n+1)break;\n    n=c[i];\n  }\n  if(i==5){\n    cout<<\"straight\"<<endl;\n    return true;\n  }\n  return false;\n}\n\nbool three_card(){\n  if(c[0]==c[2] || c[1]==c[3] || c[2]==c[4]){\n    cout<<\"three card\"<<endl;\n    return true;\n  }\n  return false;\n}\n\nbool two_pair(){\n  int n=0;\n  for(int i=0; i<5; i++){\n    if(c[i]==c[i+1])n++;\n  }\n  if(n==2){\n    cout<<\"two pair\"<<endl;\n    return true;\n  }\n  return false;\n}\n\nbool one_pair(){\n  int n=0;\n  for(int i=0; i<5; i++){\n    if(c[i]==c[i+1])n++;\n  }\n  if(n==1){\n    cout<<\"one pair\"<<endl;\n    return true;\n  }\n  return false;\n}\n\nint main(){\n  while(scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4])!=EOF){\n    sort(c, c+5);\n    if(four_card())continue;\n    if(full_house())continue;\n    if(straight())continue;\n    if(three_card())continue;\n    if(two_pair())continue;\n    if(one_pair())continue;\n    cout<<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// clang-format off\n#include <bits/stdc++.h>\n#define int long long\n#define main signed main()\n#define loop(i, a, n) for (int i = (a); i < (n); i++)\n#define rep(i, n) loop(i, 0, n)\n#define forever for (;;)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define prec(n) fixed << setprecision(n)\ntemplate<typename A> using V = std::vector<A>;\ntemplate<typename A> using F = std::function<A>;\ntemplate<typename A, typename B> using P = std::pair<A, B>;\nusing pii = P<int, int>;\nusing vi = V<int>;\nusing vd = V<double>;\nusing vs = V<std::string>;\nusing vpii = V<pii>;\nusing vvi = V<vi>;\nusing vvpii = V<vpii>;\nconstexpr int INF = sizeof(int) == sizeof(long long) ? 1000000000000000000LL : 1000000000;\nconstexpr int MOD = 1000000007;\nconstexpr double PI = 3.14159265358979;\ntemplate<typename A, typename B> bool cmin(A &a, const B &b) { return a > b ? (a = b, true) : false; }\ntemplate<typename A, typename B> bool cmax(A &a, const B &b) { return a < b ? (a = b, true) : false; }\nconstexpr bool odd(const int n) { return n & 1; }\nconstexpr bool even(const int n) { return ~n & 1; }\ntemplate<typename T> std::istream &operator>>(std::istream &is, std::vector<T> &v) { for (T &x : v) is >> x; return is; }\ntemplate<typename A, typename B> std::istream &operator>>(std::istream &is, std::pair<A, B> &p) { is >> p.first; is >> p.second; return is; }\nusing namespace std;\n// clang-format on\n\nmain {\n  vi v(5);\n  char gomi;\n  while (cin >> v[0] >> gomi >> v[1] >> gomi >> v[2] >> gomi >> v[3] >> gomi >> v[4]) {\n    sort(all(v));\n    if (v[1] == v[4]) {\n      cout << \"four card\" << endl;\n      continue;\n    }\n    if ((v[0] == v[1] && v[2] == v[4]) || (v[0] == v[2] && v[3] == v[4])) {\n      cout << \"full house\" << endl;\n      continue;\n    }\n    if (v[4] - v[0] == 4 || (v[0] == 1 && v[1] == 10 && v[4] - v[1] == 3)) {\n      cout << \"straight\" << endl;\n      continue;\n    }\n    if (v[0] == v[2] || v[1] == v[3] || v[2] == v[4]) {\n      cout << \"three card\" << endl;\n      continue;\n    }\n    if ((v[0] == v[1] && (v[2] == v[3] || v[3] == v[4])) || (v[1] == v[2] && v[3] == v[4])) {\n      cout << \"two pair\" << endl;\n      continue;\n    }\n    if (v[0] == v[1] || v[1] == v[2] || v[2] == v[3] || v[3] == v[4]) {\n      cout << \"one pair\" << endl;\n      continue;\n    }\n    cout << \"null\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n\n  int num[5];\n  char trash;\n  vector<int> V;\n\n  while(cin >> num[0] >> trash >> num[1] >> trash >> num[2] >> trash >> num[3] >> trash >> num[4]){\n    for(int i = 0; i < 5; i++) V.push_back(num[i]);\n\n    sort(V.begin(), V.end());\n\n\n    if(V[1] == V[0] && V[2] == V[0] && V[3] == V[0] || V[2] == V[1] && V[3] == V[1] && V[4] == V[1]){\n      cout << \"four card\"<< endl;\n    }else if(V[1] == V[0] && V[2] == V[0] && V[3] == V[4] || V[3] == V[2] && V[4] == V[2] && V[1] == V[0]){\n      cout << \"full house\" << endl;\n    }else if(V[1] == V[0]+1 && V[2] == V[0]+2 &&V[3] == V[0]+3 && V[4] == V[0]+4 || V[0] == 1 &&  V[1] == 10 && V[2] == 11 && V[3] == 12 && V[4] == 13){\n      cout << \"straight\" << endl;\n    }else if(V[1] == V[0] && V[2] == V[0] || V[2] == V[1] && V[3] == V[1] || V[3] == V[2] && V[4] == V[2]){\n      cout << \"three card\" << endl;\n    }else if(V[1] == V[0] && V[2] == V[3] || V[2] == V[1] && V[3] == V[4]){\n      cout << \"two pair\" << endl;\n    }else if(V[1] == V[0] || V[2] == V[1] || V[3] == V[2] || V[4] == V[3]){\n      cout << \"one pair\" << endl;\n    }else{\n      cout << \"null\" <<endl;\n    }\n\n    V.clear();\n\n\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<(n);++i)\n#define loop for(;;)\n#define trace(var) cerr<<\">>> \"<<#var<<\" = \"<<var<<endl;\n#define inf (1e9)\n#define eps (1e-9)\nusing Integer = long long;\nusing Real = long double;\nconst Real PI = acosl(-1);\n\ntemplate<class S, class T> inline\nostream& operator<<(ostream&os, pair<S,T> p) {\n  return os << '(' << p.first << \", \" << p.second << ')';\n}\n\ntemplate<class S, class T, class U> inline\nostream& operator<<(ostream&os, tuple<S,T,U> t) {\n  return os << '('\n    << get<0>(t) << \", \"\n    << get<1>(t) << \", \"\n    << get<2>(t) << ')';\n}\n\ntemplate<class T> inline\nostream& operator<<(ostream&os, vector<T> v) {\n  if (v.size() == 0) { return os << \"(empty)\"; }\n  os << v[0];\n  for (int i=1, len=v.size(); i<len; ++i) os << ' ' << v[i];\n  return os;\n}\n\ntemplate<class T> inline\nistream& operator>>(istream&is, vector<T>&v) {\n  rep (i, v.size()) is >> v[i];\n  return is;\n}\n\n//           ^   >  v   <\nint dx[] = { -1, 0, 1,  0 };\nint dy[] = {  0, 1, 0, -1 };\n\nusing vi = vector<int>;\nusing vvi = vector<vi>;\nusing vd = vector<double>;\nusing vvd = vector<vd>;\nusing vb = vector<bool>;\n\nint memo[20];\n\nbool fourcard(vi&xs) {\n  rep (i, 20) memo[i] = 0;\n  for (int x: xs) memo[x]++;\n  bool res = false;\n  rep (i, 20) if (memo[i] == 4) res = true;\n  return res;\n}\n\nbool straight(vi&xs) {\n  {\n    bool res = true;\n    rep (i, xs.size()) {\n      if (xs[i] != xs[0] + i) res = false;\n    }\n    if (res) return true;\n  }\n  if (xs[0] == 1) {\n    bool res = true;\n    for (int i = 1; i < xs.size(); ++i) {\n      if (xs[i] != 9 + i) res = false;\n    }\n    if (res) return true;\n  }\n  return false;\n}\n\nbool fullhouse(vi&xs) {\n  if ( xs[0] == xs[1] and xs[2] == xs[3] and xs[3] == xs[4]) return true;\n  if ( xs[0] == xs[1] and xs[1] == xs[2] and xs[3] == xs[4]) return true;\n  return false;\n}\n\nbool three(vi&xs) {\n  int n = 0;\n  rep (i, xs.size()) {\n    int m = 0;\n    for (int j = i; j < xs.size(); ++j) {\n      if (xs[i] == xs[j]) ++m;\n      else break;\n    }\n    n = max(n, m);\n  }\n  return n >= 3;\n}\n\nbool two(vi&xs) {\n  rep (i,20) memo[i] = 0;\n  for (int x: xs) memo[x]++;\n\n  int m = 0;\n  rep (i,20) if (memo[i] == 2) ++m;\n  return m == 2;\n}\n\nbool one(vi&xs) {\n  rep (i,20) memo[i] = 0;\n  for (int x: xs) memo[x]++;\n\n  int m = 0;\n  rep (i,20) if (memo[i] == 2) ++m;\n  return m == 1;\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(0);\n  cout.setf(ios::fixed);\n  cout.precision(10);\n  random_device dev;\n  mt19937 rand(dev());\n\n  int a,b,c,d,e;\n  char comma;\n  while (cin>>a>>comma>>b>>comma>>c>>comma>>d>>comma>>e) {\n    vi xs = {a,b,c,d,e};\n    sort(begin(xs), end(xs));\n    if (fourcard(xs)) {\n      cout << \"four card\" << endl;\n    } else if (fullhouse(xs)) {\n      cout << \"full house\" << endl;\n    } else if (straight(xs)) {\n      cout << \"straight\" << endl;\n    } else if (three(xs)) {\n      cout << \"three card\" << endl;\n    } else if (two(xs)) {\n      cout << \"two pair\" << endl;\n    } else if (one(xs)) {\n      cout << \"one pair\" << endl;\n    } else {\n      cout << \"null\" << endl;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\ntypedef complex<double> P;\nconst int N = 5;\n\nclass C{\n  public:\n    int num, cnt;\n    C(){}\n    C(int _n, int _c){ num = _n; cnt = _c; }\n};\n\nbool compare_num(const C &a, const C &b){ return a.num < b.num; }\nbool compare_cnt(const C &a, const C &b){ return a.cnt < b.cnt; }\n\nstring solve(int cards[N]){\n  vector<C> c;\n  set<int> s;\n  REP(i, N){\n    int cnt = 0;\n    REP(j, N) if(cards[i] == cards[j]) ++cnt;\n    if(s.find(cards[i]) == s.end()) c.push_back(C(cards[i], cnt));\n    s.insert(cards[i]);\n  }\n  sort(c.begin(), c.end(), compare_cnt);\n  reverse(c.begin(), c.end());\n  if(c[0].cnt == 4) return \"four card\";\n  if(c[0].cnt == 3 && c[1].cnt == 2) return \"full house\";\n  sort(c.begin(), c.end(), compare_num);\n  if(c.size() == 5 && ((c[0].num + 1 == c[1].num && c[1].num + 1 == c[2].num && c[2].num + 1 == c[3].num && c[3].num + 1 == c[4].num) || (c[0].num == 1 && c[1].num == 10 && c[2].num == 11 && c[3].num == 12 && c[4].num == 13))) return \"straight\";\n  sort(c.begin(), c.end(), compare_cnt);\n  reverse(c.begin(), c.end());\n  if(c[0].cnt == 3) return \"three card\";\n  if(c[0].cnt == 2 && c[1].cnt == 2) return \"two pair\";\n  if(c[0].cnt == 2) return \"one pair\";\n  return \"null\";\n}\n\nint main() {\n  int cards[N];\n  while(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF) cout <<solve(cards) <<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint check(vector<int> v) {\n\tsort(v.begin(), v.end());\n\t//for (int i = 0; i < v.size(); i++)cout << v[i] << \"  \";\n\tif ((v[0] == v[1] && v[1] == v[2] && v[2]== v[3]) || (v[1] == v[2] && v[2]== v[3] && v[3] == v[4])) {//four cards\n\t\treturn 1;\n\t}\n\telse if (((v[0] == v[1] && v[1] == v[2]) && (v[3] == v[4])) || ((v[0] == v[1]) && (v[2] == v[3] && v[3] == v[4]))) {//full house\n\t\treturn 2;\n\t}\n\telse if (v[0] == v[1] - 1 && v[0] == v[2] - 2 && v[0] == v[3] - 3 && v[0] == v[4] - 4) {//straight\n\t\treturn 3;\n\t}\n\telse if (v[0]==1 && v[1]==10 && v[2]==11 && v[3] == 12 && v[4] == 13) {//straight\n\t\treturn 3;\n\t}\n\telse if (((v[0] == v[1] && v[1] == v[2]) || (v[1] == v[2] && v[2] == v[3])) || ((v[2] == v[3] && v[3] == v[4]))) {//three cards\n\t\treturn 4;\n\t}\n\telse if ((v[0] == v[1] && v[2] == v[3]) || (v[0] == v[1] && v[3] == v[4]) || (v[1] == v[2] && v[3] == v[4])) {//two pair\n\t\treturn 5;\n\t}\n\telse if ((v[0] == v[1]) || (v[1] == v[2]) || (v[2] == v[3]) || (v[3] == v[4])) {//one pair\n\t\treturn 6;\n\t}\n\telse {\n\t\treturn 7;\n\t}\n}\n\n\nint main()\n{\n\tvector<int> v;\n\tint a, b, c, d, e;\n\twhile (scanf_s(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e) != EOF) {\n\t\tv.clear();\n\t\tv.push_back(a);\n\t\tv.push_back(b);\n\t\tv.push_back(c);\n\t\tv.push_back(d);\n\t\tv.push_back(e);\n\t\tswitch (check(v)) {\n\t\t\tcase 1:cout << \"four cards\" << endl; break;\n\t\t\tcase 2:cout << \"full house\" << endl; break;\n\t\t\tcase 3:cout << \"straight\" << endl; break;\n\t\t\tcase 4:cout << \"three card\" << endl; break;\n\t\t\tcase 5:cout << \"two pair\" << endl; break;\n\t\t\tcase 6:cout << \"one pair\" << endl; break;\n\t\t\tcase 7:cout << \"null\" << endl; break;\n\t\t\tdefault:cout << \"Error\" << endl; break;\n\t\t}\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n  vector<int> c(5);\n  int ans;\n  while(~scanf(\"%d,%d,%d,%d,%d\", &c[0],&c[1],&c[2],&c[3],&c[4])) {\n    sort(c.begin(), c.begin()+5);\n    if(c[0] == c[3] || c[1] == c[4]) ans = 7;\n    else if((c[0] == c[2] && c[3] == c[4])|| (c[0] == c[1] && c[2] == c[4])) ans = 6;\n    else if(c[0] + 1 == c[1] && c[1] + 1 == c[2] && c[2] + 1 == c[3] && c[3] +1 == c[4])\n      ans = 5;\n    else if(c[0] == 1 && c[1] == 10 && c[2] == 11 && c[3] == 12 && c[4] == 13)\n      ans = 5;\n    else if(c[0] == c[2] || c[1] == c[3] || c[2] == c[4])\n      ans = 4;\n    else if((c[0] == c[1] && c[2] == c[3]) || (c[0] == c[1] && c[3] == c[4]) || (c[1] == c[2] && c[3] == c[4]))\n      ans = 3;\n    else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4])\n      ans = 2;\n    else ans= 1;\n    switch(ans) {\n    case 1: cout << \"null\" << endl; break;\n    case 2: cout << \"one pair\" << endl; break;\n    case 3: cout << \"two pair\" << endl; break;\n    case 4: cout << \"three card\" << endl; break;\n    case 5: cout << \"straight\" << endl; break;\n    case 6: cout << \"full house\" << endl; break;\n    case 7: cout << \"four card\" << endl; break;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ninline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}\ntemplate<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}\n\ntemplate<class T> inline T sqr(T x) {return x*x;}\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nint dx[4] = {-1, 0, 1, 0};\nint dy[4] = {0, -1, 0, 1};\n\nint main() {\n  int c[5];\n\n  while(scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF) {\n    int n[13] = {};\n    REP(i, 5) n[c[i]-1]++;\n\n    int first = 0, second = 0, straight = 0;\n    REP(i, 13) {\n      if(n[i] > 0 && n[(i+1)%13] > 0) \n\tstraight++;\n      if(first < n[i]) {\n\tsecond = first;\n\tfirst = n[i];\n      } else if(second < n[i]) {\n\tsecond = n[i];\n      }\n    }\n\n    if(first == 4) cout << \"four card\" << endl;\n    else if(first == 3) {\n      if(second == 2) cout << \"full house\" << endl;\n      else cout << \"three card\" << endl;\n    }\n    else if(straight == 4 ) {\n      if(n[12] > 0 && n[1] > 0 || n[2] > 0 || n[3] > 0) cout << \"null\" << endl;\n      else cout << \"straight\" << endl;\n    }\n    else if(first == 2 && second == 2) cout << \"two pair\" << endl;\n    else if(first == 2) cout << \"one pair\" << endl;\n    else cout << \"null\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\n\nint cards[5];\n\nbool check ()\n{\n     for (int i = 0; i < 5; i++) if (cards[i] > 0) return true;\n     return false;\n}\n\nvoid ref() { for (int i = 0; i < 5; i++) cards[i] = 0; }\n\nint main()\n{\n     while (scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF) {\n          int yaku = 0;\n\n          sort(cards, cards + 5);\n\n          if (check() && cards[0] == cards[1] && cards[1] == cards[2] && cards[2] == cards[3]) {yaku = 6; ref();}\n          if (check() && cards[1] == cards[2] && cards[2] == cards[3] && cards[3] == cards[4]) {yaku = 6; ref();}\n          if (check() && cards[0] == cards[1] && cards[1] == cards[2] && cards[3] == cards[4]) {yaku = 5; ref();}\n          if (check() && cards[2] == cards[3] && cards[3] == cards[4] && cards[0] == cards[1]) {yaku = 5; ref();}\n          if (check() && cards[0] + 1 == cards[1] && cards[1] + 1 == cards[2] && cards[2] + 1 == cards[3] && cards[3] + 1 == cards[4]) {yaku = 4; ref();}\n          if (check() && cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13) {yaku = 4; ref();}\n\n          int tmp = 0;\n          for (int i = 0; i < 5 && check(); i++) {\n               int t = cards[i];\n               cards[i] = 0;\n               if (t == 0) continue;\n               for (int j = 0; j < 5; j++) {\n                    if (i == j) continue;\n                    if (cards[j] == 0) continue;\n                    if (t == cards[j]) tmp++;\n               }\n               yaku = tmp;\n          }\n\n          switch (yaku) {\n          case 1: cout << \"one pair\" << endl; break;\n          case 2: cout << \"two pair\" << endl; break;\n          case 3: cout << \"three card\" << endl; break;\n          case 5: cout << \"full house\" << endl; break;\n          case 6: cout << \"four card\" << endl; break;\n          case 4: cout << \"straight\" << endl; break;\n          default: cout << \"null\" << endl;\n          }\n     }\n\n     return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint main(){\n  int p[5],c[14],p2,p3,p4;\n  while(scanf(\"%d,%d,%d,%d,%d\",p,p+1,p+2,p+3,p+4)!=EOF){\n    for(int i=1;i<14;i++) c[i] = 0;\n    p2 = 0;\n    p3 = 0;\n    p4 = 0;\n    for(int i=0;i<5;i++) c[ p[i] ]++;\n    for(int i=1;i<14;i++){\n      if(c[i]==2) p2++;\n      if(c[i]==3) p3++;\n      if(c[i]==4) p4++;\n    }\n    if(p4 == 1) puts(\"four card\");\n    else if(p3 == 1){\n      if(p2 == 1) puts(\"full house\");\n      else puts(\"three card\");\n    } else if(p2 == 2) puts(\"two pair\");\n    else if(p2 == 1) puts(\"one pair\");\n    else {\n      sort(p,p+5);\n      if(p[4]-p[0]==4||p[0]==1&&p[1]==10) puts(\"straight\");\n      else puts(\"null\");\n    }\n  }\n  return(0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\nint main()\n{\n\tint hand[13];\n\tint i;\n\tint a;\n\tint pair,three,str,four;\n\tchar aa;\n\t\n\tfor(;cin >> a;)\n\t{\n\t\tfor(i=0;i<13;i++)\n\t\t\thand[i]=0;\n\t\t\n\t\thand[a-1]++;\n\t\t\n\t\tfor(i=1;i<5;i++)\n\t\t{\n\t\t\tcin >> aa >> a;\n\t\t\thand[a-1]++;\n\t\t}\n\t\t\n\t\tpair=str=three=four=0;\n\t\t\n\t\tfor(i=0;i<13;i++)\n\t\t{\n\t\t\tif(hand[i]==4)\n\t\t\t\tfour=1;\n\t\t\telse if(hand[i]==2)\n\t\t\t\tpair++;\n\t\t\telse if(hand[i]==3)\n\t\t\t\tthree=1;\n\t\t\tif(i!=12 && hand[i]==1 && hand[i+1]==1)\n\t\t\t\tstr++;\n\t\t}\n\t\tif(hand[12]==1 && hand[0]==1 && hand[1]!=1)\n\t\t\tstr++;\n\t\t\n\t\tif(str==4)\n\t\t\tcout << \"straight\" << endl;\n\t\telse if(four==1)\n\t\t\tcout << \"four card\" << endl;\n\t\telse if(pair==1 && three==1)\n\t\t\tcout << \"full house\" << endl;\n\t\telse if(three==1)\n\t\t\tcout << \"three card\" << endl;\n\t\telse if(pair==2)\n\t\t\tcout << \"two pair\" << endl;\n\t\telse if(pair==1)\n\t\t\tcout << \"one pair\" << endl;\n\t\telse\n\t\t cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#define INF 1000000000\n#define mod 1000000007\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define REP(i,a,b) for(int i=(a);i<(b);i++)\n#define all(x) (x).begin(),x.end()\nusing namespace std;\nint dx[4]={1,0,-1,0};\nint dy[4]={0,1,0,-1};\nbool debug=false;\n\nint c[6];\n\nvoid tranp_sort(){\n  for(int i=0;i<5;i++){\n    if(c[i]==1)c[i]+=13;\n  }\n  sort(c,c+5);\n  for(int i=0;i<5;i++){\n    if(c[i]==14)c[i]=1;\n  }\n}\n\nvoid input(){  \n  getchar();cin>>c[1];\n  getchar();cin>>c[2];\n  getchar();cin>>c[3];\n  getchar();cin>>c[4];\n}\n\n\nbool one_pair(){\n  for(int i=1;i<5;i++){\n    if(c[i]==c[i-1])return true;\n  }\n  return false;\n}\n\nbool two_pair(){\n  int cnt=0;\n  map<int,int>m;\n  for(int i=0;i<5;i++)m[c[i]]++;\n  for(int i=1;i<=13;i++){\n    if(m[i]==2)cnt++;\n  }\n  if(cnt==2)return true;\n  else return false;\n}\n\nbool three_card(){\n  for(int i=2;i<5;i++){\n    if(c[i]==c[i-1]&&c[i-1]==c[i-2])return true;\n  }\n  return false;\n}\n\nbool four_card(){\n  for(int i=3;i<5;i++){\n    if(c[i]==c[i-1]&&c[i-1]==c[i-2]&&c[i-2]==c[i-3])return true;\n  }\n  return false;\n}\n\nbool fullhouse(){\n  bool a,b;\n  a=b=false;\n  map<int,int>m;\n  for(int i=0;i<5;i++)m[c[i]]++;\n  for(int i=1;i<=13;i++){\n    if(m[i]==3)a=true;\n    if(m[i]==2)b=true;\n  }\n  if(a==true&&b==true)return true;\n  else return false;\n}\n\nbool straight(){\n  int tmp=c[0];\n  for(int i=0;i<5;i++){\n    if(c[i]==1)tmp++;\n    //cout<<c[i]<<\" = \"<<(tmp+i)%14<<endl;\n    if((tmp+i)%14!=c[i])return false;\n  }\n  return true;\n}\n\nint main(){\n\n  while(cin>>c[0]){\n    input();\n    tranp_sort();\n    if(four_card())cout<<\"four card\"<<endl;\n    else if(fullhouse())cout<<\"full house\"<<endl;\n    else if(straight())cout<<\"straight\"<<endl;\n    else if(three_card())cout<<\"three card\"<<endl;\n    else if(two_pair())cout<<\"two pair\"<<endl;\n    else if(one_pair())cout<<\"one pair\"<<endl;\n    else cout<<\"null\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\nusing namespace std;\n\nint main(){\nint n[6]={};\nint c=0,cc=0;\nbool f=true;\nwhile(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\nfor(int i=0;i<5;i++)\nfor(int j=4;j>i;j--)\nif(n[j-1]>n[j]){int t=n[j];n[j]=n[j-1];n[j-1]=t;}\n\nfor(int i=0;i<4;i++){\nif(n[i]==n[i+1])c++;\nelse if(c>=1){cc=c;c=0;}\nelse {c=0;}\n}\n\nfor(int i=0;i<3;i++){\nif(n[i+1]!=(n[i]+1))f=false;\n}\nif(n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13)f=true;\n\n\n\n\n\nif(c==3)printf(\"four card\\n\");\nelse if(c==2&&cc==1)printf(\"full house\\n\");\nelse if(f==true)printf(\"straight\\n\");\nelse if(c==2||cc==2)printf(\"three card\\n\");\nelse if(n[0]==n[1]&&n[2]==n[3])printf(\"two pair\\n\");\nelse if(n[0]==n[1]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[1]==n[2]&&n[3]==n[4])printf(\"two pair\\n\");\nelse if(n[0]==n[1]||n[2]==n[3]||n[1]==n[2]||n[3]==n[4])printf(\"one pair\\n\");\nelse printf(\"null\\n\");\n\nc=0,cc=0;f=true;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint main()\n{\n\tvector<int> card(5);\n\tvector<int> count(13);\n\tstring handName[7] = {\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"};\n\tint hand;\n\tint max, pair;\n\tint i;\n\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n\t\tfill(count.begin(), count.end(), 0);\n\t\tmax = 0;\n\t\tpair = 0;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif ( ++count[card[i]-1] > max )\n\t\t\t\tmax = count[card[i]-1];\n\t\t\tif ( count[card[i]-1] == 2 )\n\t\t\t\tpair++;\n\t\t}\n\n\t\tif (max == 4) hand = 6;\n\t\telse if (max==3 && pair==2) hand = 5;\n\t\telse if (max == 3) hand = 3;\n\t\telse if (pair == 2) hand = 2;\n\t\telse if (pair == 1) hand = 1;\n\t\telse hand = 0;\n\t\tif (hand < 4) {\n\t\t\tfor (i = 0; i < 13-3; i++) {\n\t\t\t\tif (count[i]==1 && count[i+1]==1 && count[i+2]==1 && count[i+3]==1 && count[(i+4)%13]==1)\n\t\t\t\t\thand = 4;\n\t\t\t}\n\t\t}\n\n\t\tcout<<handName[hand]<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstring hands( const vector<int>& c ) {\n\tint n = (int)c.size();\n\n\tint p1 = 0;\n\tint c3 = 0;\n\n\tfor( int i = 0; i < n; ++i ) {\n\t\tif( c[i] == 4 ) {\n\t\t\treturn \"four card\";\n\t\t}\n\t\telse if( c[i] == 3 ) { c3 += 1; }\n\t\telse if( c[i] == 2 ) { p1 += 1; }\n\t}\n\n\tif( c3 > 0 && p1 > 0 ) {\n\t\treturn \"full house\";\n\t}\n\telse if( c3 > 0 ) {\n\t\treturn \"three card\";\n\t}\n\telse if( p1 == 2 ) {\n\t\treturn \"two pair\";\n\t}\n\telse if( p1 == 1 ) {\n\t\treturn \"one pair\";\n\t}\n\n\tint x = 0;\n\tfor( int i = 0; i <= n; ++i ) {\n\t\tx = (c[i%n] == 1) ? (x+1) : 0;\n\n\t\tif( x == 5 ) { break; }\n\t}\n\n\treturn x == 5 ? \"straight\" : \"null\";\n}\n\nint main() {\n\tios_base::sync_with_stdio( false );\n\n\tstring line;\n\twhile( getline( cin, line ) ) {\n\t\treplace( line.begin(), line.end(), ',', ' ' );\n\n\t\tistringstream iss( line );\n\t\tvector<int> cnt( 13 );\n\t\tint cd;\n\t\twhile( iss >> cd ) { cnt[cd-1] += 1; }\n\n\t\tcout << hands( cnt ) << '\\n';\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nconst int MAX_N = 13;\nconst int n = MAX_N;\nconst int m = 5;\nint card[MAX_N];\nvi x(m);\n\nstring judge(vi num)\n{\n  if(num[0] == 4) return \"four card\";\n  if(num[0] == 3 && num[1] == 2) return \"full house\" ;\n  if(num[0] == 1 && x[4] - x[0] == 4) return \"straight\";\n  if(num[0] == 1 && x[0] == 0 && x[1] == 9 && x[4] == 12) return \"straight\";\n  if(num[0] == 3) return \"three card\";\n  if(num[0] == 2 && num[1] == 2) return \"two pair\";\n  if(num[0] == 2) return \"one pair\";\n  return \"null\";\n}\n\nint main()\n{\n  rep(i, n) card[i] = i;\n\n  while(~scanf(\"%d,%d,%d,%d,%d\", &x[0], &x[1], &x[2], &x[3], &x[4], &x[5])){\n    vi num(MAX_N);\n    rep(i, m) x[i] -= 1;\n    rep(i, m) num[x[i]] += 1;\n    sort(ALL(num), greater<int>());\n    sort(ALL(x));\n    cout << judge(num) << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stdcomp.h>\n#include <algorithm.h>\n\nusing namespace std;\n\nint main(void)\n{\n\tint card[5];\n\tint count1;\n\tint count2;\n\tint straight;\n\tint i;\n\tint j;\n\tchar conma;\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%c %d\", &conma, &card[i]);\n\t\t}\n\t\tsort(card, card + 5);\n\t\tcount1 = 0;\n\t\tcount2 = 0;\n\t\tstraight = 0\n\t\t\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (card[i] + 1 == card[i + 1]){\n\t\t\t\tstraight++;\n\t\t\t}\n\t\t\tif (card[i] == card[i + 1] && card[i] == card[0]){\n\t\t\t\tcount1++;\n\t\t\t}\n\t\t\telse if (card[i]  == card[i + 1] && card[i] != card[0]){\n\t\t\t\tcount2++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((count1 == 1 && count2 == 0) || (count1 == 0 && count2 == 1)){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse if (count1 == 1 && count1 == count2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (count1 == 2 || count2 == 2){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (straight == 4){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (count1 == 3 || count2 == 3){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\nint main( void )\n{\n\tstring in;\n\twhile ( cin >> in )\n\t{\n\t\treplace( in.begin(), in.end(), ',', ' ' );\n\t\tistringstream is( in );\n\t\tvector <int> hands(5);\n\t\tfor ( int i = 0; i < 5; i++ )\n\t\t{\n\t\t\tis >> hands[i];\n\t\t}\n\n\t\tsort( hands.begin(), hands.end() );\n\n\t\tbool straight = true;\n\t\tfor ( int i = 0 ; straight && i < 4; i++ )\n\t\t{\n\t\t\tif ( i == 0 && hands[i] == 1 )\n\t\t\t\tcontinue;\n\t\t\tif ( hands[i+1] - hands[i] != 1 )\n\t\t\t{\n\t\t\t\tstraight = false;\n\t\t\t}\n\t\t}\n\n\t\tif ( straight )\n\t\t{\n\t\t\tcout << \"straight\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvector <int> cnt( 14, 0 );\n\t\t\tfor ( int i = 0; i < 5; i++ )\n\t\t\t{\n\t\t\t\tcnt[ hands[i] ] ++;\n\t\t\t}\n\n\t\t\tsort( cnt.rbegin(), cnt.rend() );\n\n\t\t\tif ( cnt[0] == 4 )\n\t\t\t{\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 3 && cnt[1] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"full house\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 3 )\n\t\t\t{\n\t\t\t\tcout << \"three card\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 2 && cnt[1] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t}\n\t\t\telse if ( cnt[0] == 2 )\n\t\t\t{\n\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"null\" << endl;\n\t\t\t}\n\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n\tint ar[5];\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &ar[0], &ar[1], &ar[2], &ar[3], &ar[4])!=EOF) {\n\t\tsort(ar, ar + 5);\n\t\tint a = ar[0];\n\t\tint b = ar[1];\n\t\tint c = ar[2];\n\t\tint d = ar[3];\n\t\tint e = ar[4];\n\n\t\tif (a == d || b == e) { cout << \"four card\" << endl; }\n\t\telse if (a == c && d == e) { cout << \"full house\" << endl; }\n\t\telse if (a == b && c == e) { cout << \"full house\" << endl; }\n\t\telse if (b - a == 1 && c - b == 1 && d - c == 1 && e - d == 1&&a!=1 ) { cout << \"straight\" << endl; }\n\t\telse if (a == 1 && b == 10 && c == 11 && d == 12 && e == 13) { cout << \"straight\" << endl; }\n\t\telse if (a == c || b == d || c == e) { cout << \"three card\" << endl; }\n\t\telse if (a==b&&c==d) { cout << \"two pair\" << endl; }\n\t\telse if (a == b&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (b == c&&d == e) { cout << \"two pair\" << endl; }\n\t\telse if (a == b || b == c || c == d || d == e) { cout << \"one pair\" << endl; }\n\t\telse { cout << \"null\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n \n    int a[5];\n    int kari;\n    char d;\n     \n    while (cin >> a[0] >> d >> a[1] >> d >> a[2] >> d >> a[3] >> d >> a[4]) {\n        for (int i = 4; i > 0; i--) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] > a[j+1]) {\n                    kari = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = kari;\n                }\n            }\n        }\n        if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n            if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) {\n                if (((a[0] == a[1] && a[1] == a[2]) && (a[3] == a[4])) || ((a[0] == a[1]) && (a[2] == a[3] && a[3] == a[4]))) {\n                    cout << \"full house\" << endl;\n                } else if ((a[0] == a[1] && a[1] == a[2] && a[2]==a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])){\n                    cout << \"four card\" << endl;\n                }else {\n                    cout << \"three card\" << endl;\n                }\n            } else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n                    cout << \"four card\" << endl;\n                } else {\n                    cout << \"two pair\" << endl;\n                }\n            } else {\n                cout << \"one pair\" << endl;\n            }\n        } else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0]  == 1 && a[1] == 10 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1)){\n            cout << \"straight\" << endl;\n        } else {\n            cout << \"null\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\twhile(1){\n\t\tint card[13]; // A ~ 13\n\t\tint data[5];\n\n\t\tchar c0;\n\t\tfor(int i = 0; i < 5; ++i){\n\t\t\tif(i != 0) cin >> c0;\n\t\t\tcin >> data[i];\n\t\t\t++card[data[i] - 1];\n\t\t}\n\n\t\tif(cin.eof()) break;\n\n\t\tsort(card, card + 13, greater<int>());\n\t\t/*\n\t\tfor(int i = 0; i < 13; ++i){\n\t\t\tcout << card[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t\t*/\n\t\tswitch(card[0]){\n\t\t\tcase 4 :\n\t\t\t\tcout << \"four card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"full house\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"three card\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 :\n\t\t\t\tif(card[1] == 2)\n\t\t\t\t\tcout << \"two pair\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"one pair\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tsort(data, data + 5);\n\t\t\t\tbool check = true;\n\t\t\t\tif(data[4] == 13) data[0] = 9;\n\t\t\t\tfor(int i = 0; i < 5; ++i){\n\t\t\t\t\tif(data[0] + i != data[i]){\n\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(check)\n\t\t\t\t\tcout << \"straight\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"null\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<stdlib>\nusing namespace std;\nint max(const void* x,const void* y);\nint main(){\n\tfor(;;){\n\t\tint hand[5];\n\t\tif(scanf(\"%d,%d,%d,%d,%d\",&hand[0],&hand[1],&hand[2],&hand[3],&hand[4]) == EOF){break;}\n\t\tqsort(hand,5,sizeof(int),max);\n\t\tint f = 0;\n\t\tfor(int i=0; i<5; i++){\n\t\t\tif(hand[i] == hand[i+1] && hand[i+1] == hand[i+2] && hand[i+2] == hand[i+3]){f = 1;i+=3;}\n\t\t\telse if(hand[i] == hand[i+1] && hand[i+1] == hand[i+2]){f += 2;i+=2;}\n\t\t\telse if(hand[i] == hand[i+1]){f += 3;i+=1;}\n\t\t}\n\t\tif(hand[0]+1 == hand[1] && hand[1]+1 == hand[2] && hand[2]+1 == hand[3] && hand[3]+1 == hand[4]){f = 10;}\n\t\tif(hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13){f = 10;}\n\t\tif(f == 1){cout <<\"four card\"<<endl;}\n\t\telse if(f == 2){cout <<\"three card\"<<endl;}\n\t\telse if(f == 3){cout <<\"one pair\"<<endl;}\n\t\telse if(f == 6){cout <<\"two pair\"<<endl;}\n\t\telse if(f == 5){cout <<\"full house\"<<endl;}\n\t\telse if(f == 10){cout <<\"straight\"<<endl;}\n\t\telse if(f == 0){cout <<\"null\"<<endl;}\n\t}\n\treturn 0;\n}\nint max(const void* x,const void* y){\n\treturn *(int*)x - *(int*)y;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define ll long long\n#define EPS 1.0e-8\n#define MAX_N 100\ntypedef pair<int,int> Pii;\ntypedef pair<int,int> Pis;\nconst double PI=acos(-1);\n\nbool is_onepair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == 1){\n\t\treturn true;\n\t}\n\t\n}\n\nbool is_twopair(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 2){\n\t\t\treturn true;\n\t\t}\n}\n\nbool is_threecard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 3) return true;\n\t}\n}\n\nbool is_straight(int numbers[], map<int,int> freq, int count){\n\n\tif(numbers[0] == 11 || numbers[0] == 12 || numbers[0] == 13) return false;\n\n\tif(((numbers[0]+1 == numbers[1]) || (numbers[0]+9 == numbers[1])) && numbers[1] + 1 == numbers[2] && numbers[2] + 1 == numbers[3] && numbers[3] + 1 == numbers[4] ) return true;\n\treturn false;\n}\n\nbool is_fullhouse(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\tint cnt1 = 0, cnt2 = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 2){\n\t\t\tcnt1++;\n\t\t}\n\t\tif(freq[i] == 3){\n\t\t\tcnt2++;\n\t\t}\n\t}\n\t\tif(cnt1 == 1 && cnt2 == 1){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n}\n\nbool is_fourcard(int numbers[], map<int,int> freq, int count){\n\tcount = 0;\n\trep(i,5) freq[numbers[i]]++;\n\trep(i,13){\n\t\tif(freq[i] == 4){\n\t\t\tcount++;\n\t\t}\n\t}\n\t\tif(count == 1){\n\t\t\treturn true;\n\t\t}\n\t\t return false;\n}\n\nint main(){\n\tint numbers[5];\n\tmap<int,int> freq;\n\tint count = 0;\n\n\t\n\twhile(~scanf(\"%d,%d,%d,%d,%d\",&numbers[0],&numbers[1],&numbers[2],&numbers[3],&numbers[4])){\n\n\t\tsort(numbers,numbers+5);\n\n\t\tif(is_fullhouse(numbers, freq, count)) cout << \"full house\" << endl;\n\t\telse if(is_onepair(numbers, freq, count)) cout << \"one pair\" << endl;\n\t\telse if(is_twopair(numbers, freq, count)) cout << \"two pair\" << endl;\t\t\n\t\telse if(is_threecard(numbers, freq, count)) cout << \"three card\" << endl;\n\t\telse if(is_straight(numbers, freq, count)) cout << \"straight\" << endl;\n\n\t\telse if(is_fourcard(numbers, freq, count)) cout << \"four card\" << endl;\n\t\telse cout << \"null\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<stdio.h>\n\nint main()\n{\n\tint card[5];\n\t\n\twhile( scanf( \"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4] ) != EOF ){\n\t \t\n\t\tint a[20];\n\t\tstd::fill( a, a + 20, 0 );\n\t\tint c = 0;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ) a[card[i]]++;\n\t\t\n\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t c = std::max( c, std::count( card, card + 5, card[i] ) );\n\t\t}\n\t\t\n\t\tbool f = false;\n\t\tint m;\n\t\t\n\t\tswitch( c ){\n\t\t\tcase 4:\n\t\t \t\tputs( \"four card\" );\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t \t\tif( std::count( card, card + 5, card[i] ) == 2 ){\n\t\t\t\t\t\tf = true; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"full house\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t \tputs( \"three card\" );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfor( int i = 0; i < 5; i++ ){\n\t\t\t\t\tif( std::count( card, card + 5, card[i] ) == 2 && !f ){\n\t\t\t\t\t \tm = card[i];\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] != m && std::count( card, card + 5, card[i] ) == 2 && f ){\n\t\t\t\t\t\tputs( \"two pair\" );\n\t\t\t\t\t\tgoto end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tputs( \"one pair\" );\n\t\t\t\tbreak;\n\t\t\tcase 1:\t\n\t\t\t\tfor( int i = 1; i <= 10; i++ ){\n\t\t\t\t\tif( a[i] == 1 && a[i+1] == 1 && a[i+2] == 1 && a[i+3] == 1 && a[(i+4)%13] == 1 ) f = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( f ){\n\t\t\t\t \tputs( \"straight\" );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tputs( \"null\" );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\tend:\n\t}\n\n \treturn 0;\n}"
  },
  {
    "language": "Haskell",
    "code": "import Data.List\n\ncommaToSpace :: String->String\ncommaToSpace \"\" = \"\"\ncommaToSpace (x:xs) = if x==',' then ' ':(commaToSpace xs) else x:(commaToSpace xs)\n\nreadCard :: String->[Int]\nreadCard str = map (\\x->read x::Int) $ words $ commaToSpace str\n\n--\nfourcard :: [Int]->Bool\nfourcard card = or $ map (\\i->(length $ filter (==i) card)>=4) $ nub card\n\nfullhouse :: [Int]->Bool\nfullhouse card = ((c!!0)==(c!!1)&&(c!!1)==(c!!2)&&(c!!3)==(c!!4)) ||\n                 ((c!!0)==(c!!1)&&(c!!2)==(c!!3)&&(c!!3)==(c!!4)) \n    where c = sort card\n\nstraight :: [Int]->Bool\nstraight card\n    | h==1        = c==[1,2,3,4,5] || c==[1,10,11,12,13]\n    | otherwise   = c==[h,h+1,h+2,h+3,h+4]\n    where c = sort card\n          h = head c\n\nthreecard :: [Int]->Bool\nthreecard card = or $ map (\\i->(length $ filter (==i) card)>=3) $ nub card\n\ntwopair :: [Int]->Bool\ntwopair card = 2==(length $ filter (\\i->(length $ filter (==i) card)==2) $ nub card)\n\nonepair :: [Int]->Bool\nonepair card = or $ map (\\i->(length $ filter (==i) card)>=2) $ nub card\n--\n\nsolve :: [Int]->IO ()\nsolve card = do\n    if fourcard card then putStrLn \"four card\"\n    else if fullhouse card then putStrLn \"full house\"\n    else if straight card then putStrLn \"straight\"\n    else if threecard card then putStrLn \"three card\"\n    else if twopair card then putStrLn \"two pair\"\n    else if onepair card then putStrLn \"one pair\"\n    else putStrLn \"null\"\n\nmain = do\n    ss <- getContents\n    mapM_ solve $ map readCard $ lines ss"
  },
  {
    "language": "Haskell",
    "code": "import Data.List\n\nparse :: String -> [Int]\nparse xs = case read (\"(\" ++ xs ++ \")\") of\n    (c1,c2,c3,c4,c5) -> [c1,c2,c3,c4,c5]\n\n(<|>) :: Maybe a -> Maybe a -> Maybe a\nNothing <|> x = x\nx       <|> _ = x\n\nconditional :: a -> a -> Bool -> a\nconditional x y b = if b then x else y\n\nonePair :: [Int] -> Maybe String\nonePair = conditional (Just \"one pair\") Nothing . any ((== 2) . length) . group\n\ntwoPair :: [Int] -> Maybe String\ntwoPair [c1,c2,c3,c4,c5] = conditional (Just \"two pair\") Nothing $ (c1 == c2 && c3 == c4) || (c1 == c2 && c4 == c5) || (c2 == c3 && c4 == c5)\ntwoPair _ = undefined\n\nthreeCard :: [Int] -> Maybe String\nthreeCard = conditional (Just \"three card\") Nothing . any ((== 3) . length) . group\n\nstraight :: [Int] -> Maybe String\nstraight (x:xs) = conditional (Just \"straight\") Nothing $ impl x xs\n    where\n        impl :: Int -> [Int] -> Bool\n        impl _ [] = True\n        impl 1 [10,11,12,13] = True\n        impl y (z:zs)\n            | succ y == z = impl z zs\n            | otherwise   = False\nstraight _ = undefined\n\nfullHouse :: [Int] -> Maybe String\nfullHouse = conditional (Just \"full house\") Nothing . all ((\\ x -> x == 2 || x == 3) . length) . group\n\nfourCard :: [Int] -> Maybe String\nfourCard = conditional (Just \"four card\") Nothing . any ((== 4) . length) . group\n\napply :: [(a -> b)] -> a -> [b]\napply fs x = map (\\ f -> f x) fs\n\nscore :: [Int] -> Maybe String\nscore = foldr (<|>) Nothing . apply [fourCard , fullHouse , straight , threeCard , twoPair , onePair] . sort\n\nsolve :: [Int] -> IO ()\nsolve = putStrLn . maybe \"null\" id . score\n    \nmain :: IO ()\nmain = getContents\n    >>= mapM_ solve . map parse . lines"
  },
  {
    "language": "Haskell",
    "code": "import Data.List\nimport Data.List.Split\n\nmain = interact $ unlines.map (handCheck.map read.splitOn \",\").lines\nhandCheck cards\n    | isFourCard cards = \"four card\"\n    | isFullHouse cards = \"full house\"\n    | isStraight cards  = \"straight\"\n    | isThreeCard cards = \"three card\"\n    | isTwoPair cards   = \"two pair\"\n    | isOnePair cards   = \"one pair\"\n    | otherwise         = \"null\"\n\nisFourCard cds = 4 == (maximum.map length.group.sort $ cds)\nisFullHouse cds = 2 == (length.group.sort $ cds)\nisStraight cds = case mincds of\n                   1 -> [mincds..mincds+4] == scds || (tail scds) == [10..13]\n                   otherwise -> [mincds..mincds+4] == scds\n                   where scds = sort cds\n                         mincds = head scds\nisThreeCard cds = 3 == (maximum.map length.group.sort $ cds)\nisTwoPair cds = 3 == (length.group.sort $ cds)\nisOnePair cds = 2 == (maximum.map length.group.sort $ cds)"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Control.Applicative\nimport Data.List\nimport Data.List.Split\n\nmain = do\n  xs <- input (map read . splitOn \",\") :: IO [[Int]]\n  mapM_ putStrLn $ solve xs\n\nsolve :: [[Int]] -> [String]\nsolve = map poker\n\npoker :: [Int] -> String\npoker xs\n  | cs == [1,4] = \"four card\"\n  | sxs == [1,10,11,12,13] = \"straight\"\n  | and (map (== (head axs)) axs) = \"straight\"\n  | cs == [2,3] = \"full house\"\n  | cs == [1,1,3] = \"three card\"\n  | cs == [1,2,2] = \"two pair\"\n  | cs == [1,1,1,2] = \"one pair\"\n  | otherwise = \"null\"\n  where\n    cs = (sort . map length . group . sort) xs\n    sxs = sort xs\n    axs = zipWith (+) sxs (reverse sxs)\n\ninput :: (String -> a) -> IO [a]\ninput f = map f . lines <$> getContents "
  },
  {
    "language": "Haskell",
    "code": "{-# LANGUAGE OverloadedStrings #-}\n\nimport           Control.Arrow  ((&&&))\nimport           Data.Either    (rights)\nimport           Data.List      (group, sort)\nimport qualified Data.Text      as T\nimport qualified Data.Text.IO   as T\nimport qualified Data.Text.Read as T\n\nfrequency :: Ord a => [a] -> [(Int, a)]\nfrequency = map (length &&& head) . group . sort\n\njudge :: [Int] -> T.Text\njudge = judge' . sort . frequency\n    where\n        judge' [(1, _), (4, _)] = \"four card\"\n        judge' [(2, _), (3, _)] = \"full house\"\n        judge' [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)] = \"straight\"\n        judge' [(1, 1), (1, 10), (1, 11), (1, 12), (1, 13)] = \"straight\"\n        judge' [(1, c1), (1, c2), (1, c3), (1, c4), (1, c5)]\n            | [c1, c2, c3, c4, c5] == [c1 .. c5] = \"straight\"\n            | otherwise                          = \"null\"\n        judge' [(1, _), (1, _), (3, _)] = \"three card\"\n        judge' [(1, _), (2, _), (2, _)] = \"two pair\"\n        judge' [(1, _), (1, _), (1, _), (2, _)] = \"one pair\"\n        judge' _ = \"null\"\n\nmain :: IO ()\nmain = T.interact $ T.unlines . map judge . map (map fst) .\n    map rights . map (map T.decimal) . map (T.splitOn \",\") . T.lines"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Control.Applicative\nimport Data.List\nimport Data.List.Split\n\nmain = do\n  xs <- input (map read . splitOn \",\") :: IO [[Int]]\n  mapM_ putStrLn $ solve xs\n\nsolve :: [[Int]] -> [String]\nsolve = map poker\n\npoker :: [Int] -> String\npoker xs\n  | cs == [1,4] = \"four card\"\n  | sxs == [1,10,11,12,13] = \"straight\"\n  | f sxs = \"straight\"\n  | cs == [2,3] = \"full house\"\n  | cs == [1,1,3] = \"three card\"\n  | cs == [1,2,2] = \"two pair\"\n  | cs == [1,1,1,2] = \"one pair\"\n  | otherwise = \"null\"\n  where\n    cs = (sort . map length . group . sort) xs\n    sxs = sort xs\n    f [y] = True\n    f (y:z:zs) = if y + 1 == z then f (z:zs) else False\n\ninput :: (String -> a) -> IO [a]\ninput f = map f . lines <$> getContents "
  },
  {
    "language": "Haskell",
    "code": "import Data.List\nmain = interact $ unlines . map (poker_hand . sort . map (read::String->Int) . splitOn ',') . lines\n \nsplitOn c xs\n | null xs = []\n | head xs == c = splitOn c (tail xs)\n | otherwise = (takeWhile (/= c)) xs : splitOn c (dropWhile (/= c) xs)\n\npoker_hand xs\n | (maximum . map length . group) xs == 4 = \"four card\"\n | (sort . map length . group) xs == [2,3] = \"full house\"\n | xs == [(head xs)..(head xs + 4)] || xs == [1,10,11,12,13] = \"straight\"\n | (maximum . map length . group) xs == 3 = \"three card\"\n | (length . group) xs == 3 = \"two pair\"\n | (length . group) xs == 4 = \"one pair\"\n | otherwise = \"null\""
  },
  {
    "language": "Haskell",
    "code": "import Data.List\n\nsplitBy :: Char -> String -> [String]\nsplitBy _ [] = []\nsplitBy a x =\n  let s = takeWhile (/= a) x\n      x'= dropWhile (/= a) x\n  in\n    if x' == []\n    then [s]\n    else s:(splitBy a $ drop 1 x')\n\nfour_card (c1:c2:c3:c4:c5:_) =\n  ( c1==c2 && c2==c3 && c3==c4 ) ||\n  ( c2==c3 && c3==c4 && c4==c5 )\n\nfull_house (c1:c2:c3:c4:c5:_) =\n  ( ( c1==c2 ) && ( c3==c4 && c4==c5 ) ) ||\n  ( ( c1==c2 && c2==c3 ) && ( c4==c5 ) )\n\nstraight c@(c1:c2:c3:c4:c5:_) =\n  let r1 = take 5 [c1..]\n      r2 = [1,10,11,12,13]\n  in\n    r1 == c || r2 == c\n\nthree_card c@(c1:c2:c3:c4:c5:_) =\n  ( c1==c2 && c2==c3 ) ||\n  ( c2==c3 && c3==c4 ) ||\n  ( c3==c4 && c4==c5 )\n\ntwo_pair c@(c1:c2:c3:c4:c5:_) =\n  ( ( c1==c2 ) && ( ( c3 == c4 ) || (c4 == c5) ) ) ||\n  ( ( c2==c3 ) && ( c4 == c5 ) )\n\none_pair c@(c1:c2:c3:c4:c5:_) =\n  ( c1==c2 ) ||\n  ( c2==c3 ) ||\n  ( c3==c4 ) ||\n  ( c4==c5 )\n\nans' x\n  | four_card  x = \"four card\"\n  | full_house x = \"full house\"\n  | straight   x = \"straight\"\n  | three_card x = \"three card\"\n  | two_pair   x = \"two pair\"\n  | one_pair   x = \"one pair\"\n  | otherwise    = \"null\"\n\nans x = ans' $ sort x\n\nmain = do\n  c <- getContents\n  let i = map (map read) $ map (splitBy ',') $ lines c :: [[Int]]\n      o = map ans i\n  mapM_ putStrLn o\n      "
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Control.Applicative\nimport Data.Functor\nimport Data.Monoid\nimport Data.Maybe\nimport Data.List\nimport Data.Foldable (foldMap)\nimport Data.List.Split\nimport Data.Char\nimport Data.Ratio\nimport Data.Ord\nimport Data.Array.IO\n\nreadInt = read :: String -> Int\ngetInt = readLn :: IO Int\ngetInts = map readInt . words <$> getLine\nsjoin :: (Show a) => [a] -> String\nsjoin = unwords . map show\ncond :: a -> a -> Bool -> a\ncond t f c = if c then t else f\n-- end of templete\n\nscore hand\n  | elem 4 counts = \"four card\"\n  | counts == [2,3] = \"full house\"\n  | hand == [1,10,11,12,13] || map (subtract $ head hand) (tail hand) == [1,2,3,4] = \"straight\"\n  | elem 3 counts = \"three card\"\n  | counts == [1,2,2] = \"two pair\"\n  | elem 2 counts = \"one pair\"\n  | otherwise = \"null\"\n  where counts = sort . map length . group $ hand\n\nmain = do\n    ls <- map (sort . map readInt . wordsBy (==',')) . lines <$> getContents\n    forM_ ls $ putStrLn . score"
  },
  {
    "language": "Haskell",
    "code": "import Data.Ord (comparing)\nimport Data.List (foldl',sortBy)\nimport Data.List.Split (splitOn)\nimport qualified Data.Map.Strict as Map\nimport System.IO (isEOF)\n\ntype Composition = [(Int,Int)]\n\nmain = do\n    quit <- isEOF\n    if quit then return () else do\n        input >>= return . solve >>= output\n        main\n\ninput :: IO [Int]\ninput = (map read . splitOn \",\") `fmap` getLine\n\noutput :: String -> IO ()\noutput = putStrLn\n\nsolve :: [Int] -> String\nsolve ns = comp `seq` (snd $ head $ filter (\\(pred,_) -> pred comp) preds)\n    where\n    comp = composition ns\n    preds = [\n        (isFourCard, \"four card\"),\n        (isFullHouse, \"full house\"),\n        (isStraight, \"straight\"),\n        (isThreeCard, \"three card\"),\n        (isTwoPair, \"two pair\"),\n        (isOnePair, \"one pair\"),\n        (const True, \"null\")]\n\ncomposition :: [Int] -> Composition\ncomposition ns = sortBy (flip (comparing snd)) $ filter (\\(_,c) -> c > 0) $\n                 Map.assocs $ foldl' countUp Map.empty ns\n    where\n    countUp map n = Map.insertWith (+) n 1 map\n\nisFourCard :: Composition -> Bool\nisFourCard [(_,4),(_,1)] = True\nisFourCard _ = False\n\nisFullHouse :: Composition -> Bool\nisFullHouse [(_,3),(_,2)] = True\nisFullHouse _ = False\n\nisStraight :: Composition -> Bool\nisStraight [(1,1),(10,1),(11,1),(12,1),(13,1)] = True\nisStraight [(a,1),(b,1),(c,1),(d,1),(e,1)]\n    | b-a==1 && c-b==1 && d-c==1 && e-d==1 = True\nisStraight _ = False\n\nisThreeCard :: Composition -> Bool\nisThreeCard [(_,3),(_,1),(_,1)] = True\nisThreeCard _ = False\n\nisTwoPair :: Composition -> Bool\nisTwoPair [(_,2),(_,2),(_,1)] = True\nisTwoPair _ = False\n\nisOnePair :: Composition -> Bool\nisOnePair [(_,2),(_,1),(_,1),(_,1)] = True\nisOnePair _ = False"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n\n   int a,b,c,d,e;\n   int state = 0;      //0:null;1:1pair,2:2pair,3:3card,4:hullhouse,5:straight,6:4card\n\n   while(scanf(\"%d,%d,%d,%d.%d\",&a,&b,&c,&d,&e)!=EOF){\n\n      while(!((a<=b)&&(b<=c)&&(c<=d)&&(d<=e))){\n         int tmp;\n         if(a>b){a = tmp; a = b; b = tmp;}\n         if(b>c){b = tmp; b = c; c = tmp;}\n         if(c>d){c = tmp; c = d; d = tmp;}\n         if(d>e){d = tmp; d = e; e = tmp;}\n      }\n\n      int p1 = 0;\n      int p1_n = 0;\n      int p2 =0;\n      int p2_n = 0;\n      if(a==b){p1++; p1_n=a;}\n      if(b==c){\n         if(b == p1_n){\n            p1++;\n         }else if(p1_n==0){\n            p1++;\n            p1_n = b;\n         }else{\n            p2++;\n            p2_n = b;\n         }\n      }\n      if(c==d){\n         if(c == p1_n){\n            p1++;\n         }else if(p1_n==0){\n            p1++;\n            p1_n = c;\n         }else{\n            p2++;\n            p2_n = c;\n         }\n      }\n      if(d==e){\n      if(d == p1_n){\n            p1++;\n         }else if(p1_n==0){\n            p1++;\n            p1_n = d;\n         }else{\n            p2++;\n            p2_n = d;\n         }\n      }\n      \n\n      state = 0;\n      if(p1==0&&p2==0){\n         if(a==1&&b ==10&&c==11&&d ==12&&e ==13){\n            state =5;\n         }else if(a+1==b&&b+1==c&&c+1 =d&&d+1 ==e){\n            state =5;\n         }\n      }else if((p1==1&&p2==1)){\n         state = 2;\n      }else if((p1==1&&p2==2)||(p1==2&&p2==1)){\n         state = 4;\n      }else if(p1==3||p2==3){\n         state = 6;\n      }else if(p1==2||p2==2){\n         state = 3;\n      }else if(p1==1&&p2==1){\n         state = 2;\n      }else if(p1==1||p2==1){\n         state =1;\n      }\n   \n\n      swicth case(state){\n         case 0:  printf(\"null\\n\"); break;\n         case 1:  printf(\"one pair\\n\"); break;\n         case 2:  printf(\"two pair\\n\"); break;\n         case 3:  printf(\"three card\\n\"); break;\n         case 4:  printf(\"hullhouse\\n\"); break;\n         case 5:  printf(\"straight\\n\"); break;\n         case 6:  printf(\"four card\\n\"); break;\n      }\n      \n   \n\n   return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++){b[i]=0;}\n      for(int i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n\tint i,j,a[9],f[20],y;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tmemset(f,0,sizeof(f));\n\t\tfor(i=0;i<5;i++)f[a[i]]++;\n\t\ty=1;\n\t\tfor(i=1;i<14;i++){\n\t\t\tif(f[i]==4)y=7;\n\t\t\telse if(f[i]==3 && y<4){\n\t\t\t\ty=4;\n\t\t\t\tfor(j=1;j<14;j++)if(f[j]==2)y=6;\n\t\t\t}\n\t\t\telse if(f[i]==2 && y<2){\n\t\t\t\ty=2;\n\t\t\t\tfor(j=1;j<14;j++)if(i!=j && f[j]==2)y=3;\n\t\t\t}\n\t\t}\n\t\tfor(i=1;i<11;i++){\n\t\t\tif(f[i]==1 && f[i+1]==1 && f[i+2]==1 && f[i+3]==1 && f[(i+4)%13]==1 && y<5)y=5;\n\t\t}\n\t\t\n\t\tif(y==1)printf(\"null\\n\");\n\t\telse if(y==2)printf(\"one pair\\n\");\n\t\telse if(y==3)printf(\"two pair\\n\");\n\t\telse if(y==4)printf(\"three card\\n\");\n\t\telse if(y==5)printf(\"straight\\n\");\n\t\telse if(y==6)printf(\"full house\\n\");\n\t\telse if(y==7)printf(\"four card\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n\n\tint i,j,tmp,card[5]={0},pair[5],count[4];\n\tchar *rank[30];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])!=EOF){\n\t\tfor(i=0;i<5;i++) pair[i]=0;\n\t\tfor(i=0;i<4;i++) count[i]=0;\n\t\t*rank=\"\";\n\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=1;j<5-i;j++){\n\t\t\t\tif(card[j-1]>card[j]){\n\t\t\t\t\ttmp=card[j-1];\n\t\t\t\t\tcard[j-1]=card[j];\n\t\t\t\t\tcard[j]=tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=0;j<5;j++){\n\t\t\t\tif(card[i]==card[j]){\n\t\t\t\t\tpair[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(i=0;i<5;i++){\n\t\t\tif(pair[i]==4){\n\t\t\t\t*rank=\"four card\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(pair[i]==2){\n\t\t\t\tfor(j=0;j<5;j++){\n\t\t\t\t\tif(pair[j]==3){\n\t\t\t\t\t\t*rank=\"full house\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(*rank==\"full house\") break;\n\t\t\t}\n\t\t\telse if(pair[i]==3){\n\t\t\t\tfor(j=0;j<5;j++){\n\t\t\t\t\tif(pair[j]==2){\n\t\t\t\t\t\t*rank=\"full house\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(*rank==\"full house\") break;\n\t\t\t\t*rank=\"three card\";\n\t\t\t}\n\t\t\tif(pair[i]==2) count[1]++;\n\t\t}\n\t\tif(card[0]+1==card[1] && card[0]+2==card[2] && card[0]+3==card[3] && card[0]+4==card[4]) *rank=\"straight\";\n\t\telse if(card[0]+9==card[1] && card[0]+10==card[2] && card[0]+11==card[3] && card[0]+12==card[4]) *rank=\"straight\";\n\t\telse if(count[1]==4) *rank=\"two pair\";\n\t\telse if(count[1]==2 && *rank==\"\") *rank=\"one pair\";\n\t\telse if(*rank==\"\") *rank=\"null\";\n\n\t\tprintf(\"%s\\n\",*rank);\n\n\t}\n\n\n\n\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint b[5],c[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};\n\tint i,j,temp,count[14],k;\n\n\tscanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4]);\n\n/*sort*/\n\tfor (i = 0; i < 5; i++) \n\t{\n        \tfor (j = 4; j > i; j--) \n\t\t{\n            \t\tif (b[j - 1] > b[j])\n\t\t\t{ \n            \t    \t\ttemp = b[j];\n                \t\tb[j] = b[j - 1];\n                \t\tb[j - 1]= temp;\n            \t\t}\n        \t}\t\n\t}\n\n/*count*/\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tcount[i] = 0;\n\n\t\tfor(j=0;j<5;j++)\n\t\t{\n\t\t\tif(i==b[j])\n\t\t\t{\n\t\t\t\tcount[i]+=1;\n\t\t\t}\n\t\t}\n\t}\n\n/*4,full*/\n\tfor(i=1;i<14;i++)\n\t{\t\t\t\n\t\tif(count[i]==4)\n\t\t{\n\t\t\tprintf(\"four card\");\n\t\t\treturn 0;\n\t\t}\n\t\n\n\t\tif(count[i]==3)\n\t\t{\n\t\t\t\tfor(k=1;k<14;k++)\n\t\t\t\t{\n\t\t\t\t\tif(count[k]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(count[k]==3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"full house\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n/*straight*/\n\tif(  (b[0]==1&&b[1]==10&&b[2]==11&&b[3]==12&&b[4]==13)\n\t   ||(b[1]==b[0]+1&&b[2]==b[0]+2&&b[3]==b[0]+3&&b[4]==b[0]+4)\t)\n\t{\n\t\tprintf(\"straigh\");\n\t\treturn 0;\n\t}\n/*2*/\t\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tif(count[i]==3)\n\t\t{\n\t\t\tprintf(\"three card\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(k!=i&&count[k]==2)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"two pair\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tprintf(\"one pair\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"null\");\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint a[5];\nvoid sort(void) {\n  int n, i;\n  for (i = 0; i < 5; i ++) {\n    if (a[i - 1] > a[i]) {\n      n = a[i]; a[i] = a[i - 1]; a[i - 1] = n; i -= 2;\n      if (i < 0) i ++;\n    }\n  }\n}\nint main() {\n  while (scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) != EOF) {\n    sort();\n    if ((a[0] == a[1] || a[3] == a[4]) && a[1] == a[2] && a[2] == a[3]) printf(\"four card\\n\");\n    else if (a[0] == a[1] && a[3] == a[4] && (a[1] == a[2] || a[2] == a[3])) printf(\"full house\\n\");\n    else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)) printf(\"straight\\n\");\n    else if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n    else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) printf(\"two pair\\n\");\n    else if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int *card)\n{\n\tint i, j, temp;\n\t\n\tfor (i = 0;i < 5;i++) {\n\t\tfor (j = 0;j < 4-i; j++) {\n\t\t\tif (card[j] > card[j+1]) {\n\t\t\t\ttemp = card[j];\n\t\t\t\tcard[j] = card[j+1];\n\t\t\t\tcard[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid check_equal(int *card, int *continuation) /** (n < 5) **/\n{\n\tint count, i, j, std;\n\t\n\tfor (j=0; j<5; j+=count) {\n\t\tcount = 0;\n\t\tfor (i=j; i<5; i++) {\n\t\t\tstd = card[j];\n\t\t\tif (std == card[i+1]) count++;\n\t\t\telse break;\n\t\t}\n\t\tcontinuation[j] = count;  \n\t\tcount++; //àµcountª0ÅàjÉ1ÍÁZ³¹é\n\t}\n\t\n\tfor (i=0; i<5; i++) {\n\t\t\tif (continuation[i] < 0) continuation[i] = continuation[i-1];\n\t}\n}\n\nint sum(int *array, int n)\n{\n\tint i, add = 0;\n\t\n\tfor (i=0; i<n; i++) {\n\t\tadd+= array[i];\n\t}\n\t\n\treturn add;\n}\n\nint straight(int *card, int n)\n{\n\tint add = 0, i;\n\t\n\tfor (i=n-1; i>0; i--) {\n\t\tif (card[i] == 10 && card[i-1] == 1 && add == 3) return 1;\n\t\tadd += card[i] - card[i-1];\n\t}\n\t\n\tif (add == 4) return 1;\n\telse\t\t  return 0;\n}\n\nint main(void) {\n\tint card[5];\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n\t\tint hash = 0, continuation[5] = {-1, -1, -1, -1, -1};\n\t\tchar *comp = \"null\";\n\t\t\n\t\tsort(card);\n\t\tcheck_equal(card, continuation);\n\t\thash = sum(continuation, 5);\n\t\t\n\t\tswitch (hash) {\n\t\t\tcase  2 : comp = \"one pair\"; break;\n\t\t\tcase  4 : comp = \"two pair\"; break;\n\t\t\tcase  6 : comp = \"three card\"; break;\n\t\t\tcase  8 : comp = \"full house\"; break;\n\t\t\tcase 12 : comp = \"four card\"; break;\n\t\t\tdefault : if(straight(card, 5)) comp = \"straight\";\n\t\t}\n\t\t\n\t\tprintf(\"%s\\n\", comp);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\nint main(){\n   int a[5],b[13];\n   int i,j;\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(i=0;i<13;i++){b[i]=0;}\n      for(i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(i=0;i<13;i++){\n         for(j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\nint main(){\n   int a[5],b[13];\n   int i,j;\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(i=0;i<13;i++){b[i]=0;}\n      for(i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(i=0;i<13;i++){\n         for(j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"one pair\\n\"); goto exit;}\n     }\n\n     for(i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n     \n   }\n   return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint i, j;\n\tint st;\n\tint sta;\n\tint pair[13];\n\tint two, three, four;\n\tint card[5];\n\tint t;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tfor (j = 0; j < 4 - i; j++){\n\t\t\t\tif (card[j] > card[j + 1]){\n\t\t\t\t\tt = card[j + 1];\n\t\t\t\t\tcard[j + 1] = card[j];\n\t\t\t\t\tcard[j] = t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tpair[i] = 0;\n\t\t}\n\t\tst = 0; sta = 0;\n\t\ttwo = 0; three = 0; four = 0;\n\t\tfor (i = 0; i < 4; i++){\n//\t\t\tprintf(\"%d\", card[i]);\n\t\t\tpair[card[i] - 1]++;\n\t\t\tif (card[i + 1] - card[i] == 1){\n\t\t\t\tst++;\n\t\t\t}\n\t\t\tif (card[i] == i + 9 || card[i] == 1){\n\t\t\t\tsta++;\n\t\t\t}\n\t\t}\n\t\tif (card[i] == i + 9){\n\t\t\tsta++;\n\t\t}\n//\t\tprintf(\"%d %d\\n\", card[i], sta);\n\t\tpair[card[i] - 1]++;\n\t\tif (card[i] == i + 1){\n\t\t\tsta++;\n\t\t}\n\t\tfor (i = 0; i < 13; i++){\n//\t\t\tprintf(\"%d\", pair[i]);\n\t\t\tif (pair[i] == 2){\n\t\t\t\ttwo++;\n\t\t\t}\n\t\t\tif (pair[i] == 3){\n\t\t\t\tthree++;\n\t\t\t}\n\t\t\tif (pair[i] == 4){\n\t\t\t\tfour++;\n\t\t\t}\n\t\t}\n//\t\tprintf(\"\\n\");\n//\t\tprintf(\"%d %d %d\\n\", two, three, four);\n\t\tif (four == 1){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if (two == 1 && three == 1){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\telse if (st == 4 || sta == 5){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if (three == 1){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (two == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if (two == 1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int a[5]){\n  int i,j,t;\n  /*??????????????????\n  for(i=0;i<5;i++){\n    printf(\"%d\",a[i]);\n  }\n  */\n  for(j=0;j<4;j++){\n    for(i=4;i>j;i--){\n      if(a[i]<a[i-1]){\n\tt=a[i];\n\ta[i]=a[i-1];\n\ta[i-1]=t;\n      }\n    }\n  }\n}\n\nint main(void){\n  int c[5];\n  int z[5];\n  int x,mai,k2,k3,state;\n  int i;\n  while((scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4]))!=EOF){\n    /*C??????????????????????¢????ok\n    for(i=0;i<5;i++){\n      printf(\"%d\",c[i]);\n    }\n    */\n    sort(c);\n    /*?????????????¢????ok\n    for(i=0;i<5;i++){\n      printf(\"%d,\",c[i]);\n    }\n    */\n    mai=1;  k3=0; k2=0;\n    x=c[0]; state=0;\n    if(c[0]==1 && c[1]==10 &&c[2]==11 &&c[3]==12 && c[4]==13){\n      printf(\"straight\\n\");\n      state++;\n    }else if(c[1]==c[0]+1 && c[2]==c[1]+1 && c[3]==c[2]+1 && c[4]==c[3]+1){\n      printf(\"straight\\n\");\n      state++;\n    }else{\n      for(i=1;i<5;i++){\n\t//printf(\"%d,%d,%d\\n\",mai,k2,k3);\n\tif(x==c[i]){\n\t  mai++;\n\t  //printf(\"mai++\");\n\t}else if(mai==4){\n\t  printf(\"four card\\n\");\n\t  state++;\n\t  break;\n\t}else{\n\t  x=c[i];\n\t  if(mai==3){  \n\t    k3++;\n\t  }else if(mai==2){   \n\t    k2++;\n\t  }\n\t  mai=1;\n\t}\n      }\n      if(mai==4){\n\tprintf(\"four card\\n\");\n\tstate++;\n      }else if(mai==3){\n\tk3++;\n      }else if(mai==2){\n\tk2++;\n      }\n      //printf(\"%d\\n\",state);\n      //printf(\"%d,%d,%d\\n\",mai,k2,k3);\n      if(state==0){\n\tif(k3==1){\n\t  if(k2==1){\n\t    printf(\"full house\\n\");\n\t  }else{\n\t    printf(\"three card\\n\");\n\t  }\n\t}else if(k2==2){\n\t  printf(\"two pair\\n\");\n\t}else if(k2==1){\n\t  printf(\"one pair\\n\");\n\t}else{\n\t  printf(\"null\\n\");\n\t}\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tsort(card);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[1] + 1;i < 5;i++){\n\t\t\t\tif(card[count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[2] + 1;i < 5;i++){\n\t\t\t\t\tif(card[count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsort2(count);\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare_int(const void *a, const void *b){\n    return *(int*)a - *(int*)b;\n}\n\n\nint main(int argc,char* argv[]){\n  int first_card,is_st;\n  int i;\n  int max,max2,max3,max4;\n  int cards[5];\n  int hands[13];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) != EOF){\n    max = max2 = 0;is_st = 1;\n    qsort(cards, 5, sizeof(int), compare_int);\n    \n    for(i = 0;i < 13;i++){\n      hands[i] = 0;\n    }\n    \n    for(i = 0;i < 5;i++){\n      hands[cards[i] - 1]++;\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max <= hands[i]){\n\tmax = hands[i];\n      }\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max2 <= hands[i] && max >= hands[i]){\n\tmax2 = hands[i];\n      }\n    }\n    \n    if(max == 4){\n      printf(\"four card\\n\");\n      continue;\n    }\n\n    if(max == 3 && max2 == 2){\n      printf(\"full house\\n\");\n      continue;\n    }\n    \n    first_card = cards[0];\n    for(i = 1;i < 5;i++){\n      if(first_card + 1 != cards[i]){is_st = 0;break;}else{\n\tfirst_card++;\n      }\n    }\n\n    if(is_st || (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)){\n      printf(\"straight\\n\");\n      continue;\n    }\n    \n    if(max == 3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max == 2 && max2 == 2){\n      printf(\"two pair\\n\");\n      continue;\n    }\n\n    if(max == 2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n\n    printf(\"null\\n\");\n    \n  }\n  \n  return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nvoid swap(int x[],int l,int r){\n\tint t;\n\tt=x[l];\n\tx[l]=x[r];\n\tx[r]=t;\n}\n\nvoid qsort(int x[],int l,int r){\n\tint i,j,p;\n\ti=l;\n\tj=r;\n\tp=x[(i+j)/2];\n\twhile(1){\n\t\twhile(x[i]<p)i++;\n\t\twhile(x[j]>p)j--;\n\t\tif(i>=j)break;\n\t\tswap(x,i,j);\n\t\ti++;\n\t\tj--;\n\t}\n\tif(i-l>0)qsort(x,l,i-1);\n\tif(r-j>0)qsort(x,j+1,r);\n}\n\nint main(){\n\tint h[5];\n\tint same,s,p,p1,p2;\n\tint i,j,k;\n\tchar c[7][12]={\"four card\",\"full house\",\"straight\",\"three card\",\"two pair\",\"one pair\",\"null\"};\n\tint yaku[7];\n\tint b;\n\tchar str[12];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&h[0],&h[1],&h[2],&h[3],&h[4])!=EOF){\n\t\tqsort(h,0,4);\n\t\t// for(i=0; i<5; i++){\n\t\t// \tprintf(\"%2d \",h[i]);\n\t\t// }\n\t\t// printf(\"\\n\");\n\t\tfor(i=0; i<7; i++){\n\t\t\tyaku[i]=0;\n\t\t}\n\t\tsame=0;\n\t\ts=0;\n\t\tp=0;\n\t\tp1=0;\n\t\tp2=0;\n\t\tfor(i=0; i<5; i++){\n\t\t\ts=0;\n\t\t\tfor(j=i; j<5; j++){\n\t\t\t\tif(h[i]==h[j]){\n\t\t\t\t\ts++;\n\t\t\t\t\tif(p==0&&i!=j){\n\t\t\t\t\t\tp1=h[i];\n\t\t\t\t\t\tp++;\n\t\t\t\t\t}\n\t\t\t\t\telse if(p==1&&i!=j){\n\t\t\t\t\t\tif(h[i]!=p1){\n\t\t\t\t\t\t\tp2=i;\n\t\t\t\t\t\t\tp++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(s>same)same=s;\n\t\t}\n\t\tif(same==4)yaku[0]=1;\n\t\tif(same==3){\n\t\t\tif(p==2)yaku[1]=1;\n\t\t\tyaku[3]=1;\n\t\t}\n\t\tif(same==2)yaku[5]=1;\n\t\tif(p==2)yaku[4]=1;\n\t\tfor(i=0; i<5; i++){\n\t\t\tif(h[i]!=h[0]+i)break;\n\t\t\tif(i==4)yaku[2]=1;\n\t\t}\n\t\tif(h[0]==1&&h[1]==10&&h[2]==11&&h[3]==12&&h[4]==13){\n\t\t\tyaku[2]=1;\n\t\t}\n\t\t//(\"same:%d p:%d\\n\", same,p);\n\t\tyaku[6]=1;\n\t\tb=1;\n\t\tfor(i=0; i<7; i++){\n\t\t\tif(yaku[i]){\n\t\t\t\tb=0;\n\t\t\t\tprintf(\"%s\\n\", c[i]);\n\t\t\t}\n\t\t\tif(!b)break;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\n#define JUDGE(x, y) ((cards[x] == cards[y]) ? 1 : 0)\n#define SJUDGE(x, y) ((cards[x] + y - x == cards[y]) ? 1 : 0)\n\nint main(){\n  int cards[5], i, j, min;\n\n  while(scanf(\"%d,%d,%d,%d,%d\", &cards[0], &cards[1], &cards[2], &cards[3], &cards[4]) != EOF){\n    for(i = 0;i < 5;i++){\n      min = i;\n      for(j = i + 1;j < 5;j++)\n\tmin = cards[j] > cards[min] ? min : j;\n      if(min != i){\n\tcards[min] += cards[i];\n\tcards[i] = cards[min] - cards[i];\n\tcards[min] -= cards[i];\n      }\n    }\n\n    if(JUDGE(1, 2) && JUDGE(2, 3) && (JUDGE(0, 1) || JUDGE(3, 4))) puts(\"four card\");\n    else if(JUDGE(0, 1) && JUDGE(3, 4) && (JUDGE(1, 2) || JUDGE(2, 3))) puts(\"full house\");\n    else if(SJUDGE(1, 2) && SJUDGE(2, 3) && SJUDGE(3, 4) && (SJUDGE(0, 1) || (cards[0] == 1 && cards[4] == 13))) puts(\"straight\");\n    else if((JUDGE(0, 1) && JUDGE(1, 2)) || (JUDGE(1, 2) && JUDGE(2, 3)) || (JUDGE(2, 3) && JUDGE(3, 4))) puts(\"three card\");\n    else if((JUDGE(0, 1) && JUDGE(2, 3)) || (JUDGE(1, 2) && JUDGE(3, 4)) || (JUDGE(0, 1) && JUDGE(3, 4))) puts(\"two pair\");\n    else if(JUDGE(0, 1) || JUDGE(1, 2) || JUDGE(2 ,3) || JUDGE(3, 4)) puts(\"one pair\");\n    else puts(\"null\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a,b,c[5],d=0,e,f=0,g,h=0,i,j,l=0;\n  int k[2]={1};\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    for(a=0;a<5;a++){\n      for(b=4;b>0;b--){\n\tif(c[b]<c[b-1]){\n\t  e=c[b];\n\t  c[b]=c[b-1];\n\t  c[b-1]=e;\n\t}\n      }\n    }\n    for(a=0;a<5;a++){\n      for(b=4;b>0;b--){\n\tif(c[b]==c[b-1]){\n\t  d=1;\n\t  break;\n\t}\n      }\n      if(d==1)break;\n    }\n    switch(d){\n    case 0:\n      for(a=1;a<5;a++){\n\tif(c[0]==1){\n\t  l=1;\n\t  for(b=2;b<5;b++){\n\t    if(c[b]-1!=c[b-1]||((c[4]!=13&&c[1]!=10)&&(c[4]!=5&&c[1]!=2))){\n\t      f=1;\n\t      break;\n\t    }\n\t  }\n\t}\n\tif(c[a]-1!=c[a-1]&&l!=1){\n\t  f=1;\n\t  break;\n\t}\n      }\n      if(f==1){\n\tprintf(\"null\\n\");\n      }\n      else{\n\tprintf(\"straight\\n\");\n      }\n      break;\n    default:\n      for(a=0;a<4;a++){\n\tif(c[a]==c[a+1]){\n\t  k[h]=k[h]+1;\n\t}\n\tif(k[h]>1&&c[a]!=c[a+1]){\n\t  h=1;\n\t}\n      }\n      if(k[0]==4){\n\tprintf(\"four card\\n\");\n      }\n      else if(k[0]==3||k[1]==3){\n\tif((k[0]==2&&k[1]==3)||(k[0]==3&&k[1]==2)){\n\t  printf(\"full house\\n\");\n\t}\n\telse{\n\t  printf(\"three card\\n\");\n\t}\n      }\n      else if(k[0]==2&&k[1]==2){\n\tprintf(\"two pair\\n\");\n      }\n      else if(k[0]==2||k[1]==2){\n\tprintf(\"one pair\\n\");\n      }\n      break;\n    }\n    d=0;\n    h=0;\n    f=0;\n    l=0;\n    k[0]=1;\n    k[1]=1;\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tsort(card);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[0] + count[1] + 1;i < 5;i++){\n\t\t\t\tif(card[count[0] + count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[0] + count[1] + count[2] + 1;i < 5;i++){\n\t\t\t\t\tif(card[count[0] + count[1] + count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsort2(count);\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint cmp(int *a, int *b);\nvoid reverse(int count[4]);\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\t\n\t\tqsort(card, 5, sizeof(int), cmp);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[0] + count[1] + 1;i < 5;i++){\n\t\t\t\tif(card[count[0] + count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[0] + count[1] + count[2] + 1;i < 5;i++){\n\t\t\t\t\tif(card[count[0] + count[1] + count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tqsort(count, 4, sizeof(int), cmp);\n\t\treverse(count);\n\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nint cmp(int *a, int *b){\n\treturn *a < *b ? -1 : *a > *b;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid reverse(int count[4]){\n\tint i, temp[4];\n\tfor(i = 0;i < 4;i++){\n\t\ttemp[i] = count[3 - i];\n\t}\n\n\tfor(i = 0;i < 4;i++){\n\t\tcount[i] = temp[i];\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++){b[i]=0;}\n      for(int i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int a[5]){\n  int i,j,t;\n  /*??????????????????\n  for(i=0;i<5;i++){\n    printf(\"%d\",a[i]);\n  }\n  */\n  for(j=0;j<4;j++){\n    for(i=4;i>j;i--){\n      if(a[i]<a[i-1]){\n\tt=a[i];\n\ta[i]=a[i-1];\n\ta[i-1]=t;\n      }\n    }\n  }\n}\n\nint main(void){\n  int c[5];\n  int z[5];\n  int x,mai,k2,k3,state;\n  int i;\n  while((scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4]))!=EOF){\n    /*C??????????????????????¢????ok\n    for(i=0;i<5;i++){\n      printf(\"%d\",c[i]);\n    }\n    */\n    sort(c);\n    /*?????????????¢????ok\n    for(i=0;i<5;i++){\n      printf(\"%d,\",c[i]);\n    }\n    */\n    mai=1;  k3=0; k2=0;\n    x=c[0]; state=0;\n    if(c[0]==1 && c[1]==10 &&c[2]==11 &&c[3]==12 && c[4]==13){\n      printf(\"straight\\n\");\n      state++;\n    }else if(c[1]==c[0]+1 && c[2]==c[1]+1 && c[3]==c[2]+1 && c[4]==c[3]+1){\n      printf(\"straight\\n\");\n      state++;\n    }else{\n      for(i=1;i<5;i++){\n\t//printf(\"%d,%d,%d\\n\",mai,k2,k3);\n\tif(x==c[i]){\n\t  mai++;\n\t  //printf(\"mai++\");\n\t}else if(mai==4){\n\t  printf(\"four card\\n\");\n\t  state++;\n\t  break;\n\t}else{\n\t  x=c[i];\n\t  if(mai==3){  \n\t    k3++;\n\t  }else if(mai==2){   \n\t    k2++;\n\t  }\n\t  mai=1;\n\t}\n      }\n      if(mai==4){\n\tprintf(\"four card\\n\");\n\tstate++;\n      }else if(mai==3){\n\tk3++;\n      }else if(mai==2){\n\tk2++;\n      }\n      //printf(\"%d\\n\",state);\n      //printf(\"%d,%d,%d\\n\",mai,k2,k3);\n      if(state==0){\n\tif(k3==1){\n\t  if(k2==1){\n\t    printf(\"full house\\n\");\n\t  }else{\n\t    printf(\"three card\\n\");\n\t  }\n\t}else if(k2==2){\n\t  printf(\"two pair\\n\");\n\t}else if(k2==1){\n\t  printf(\"one pair\\n\");\n\t}else{\n\t  printf(\"null\\n\");\n\t}\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n\n  int in[5]={0};\n  while(scanf(\"%d,\",&in[0])!=EOF){\n    scanf(\"%d,%d,%d,%d\",&in[1],&in[2],&in[3],&in[4]);\n\n    int sort[5]={0};\n    int i,j;\n    int datesu=0;\n\n    for(i=0;i<5;i++){    \n      for(j=datesu-1;j>=0;j--){\n\tif(in[i]>sort[j])\n\t  sort[j+1]=sort[j];\n\telse{\n\t  sort[j+1]=in[i];\n\t  break;\n\t}\n      }\n      if(j==-1)\n\tsort[0]=in[i];\n      datesu++;\n    }\n    \n    \n    if(sort[0]==sort[3]||sort[1]==sort[4]){\n      puts(\"four card\");\n    }else if(sort[0]==sort[2]){\n      if(sort[3]==sort[4])\n\tputs(\"full house\");\n      else\n\tputs(\"three card\");\n    }else if(sort[2]==sort[4]){\n      if(sort[0]==sort[1])\n\tputs(\"full house\");\n      else\n\tputs(\"three house\");\n    }else if(sort[1]==sort[3]){\n      puts(\"three card\");\n    }else if((sort[0]==sort[1]&&sort[2]==sort[3])||(sort[0]==sort[1]&&sort[3]==sort[4])||(sort[1]==sort[2]&&sort[3]==sort[4])){\n      puts(\"two pair\");\n    }else if(sort[0]==sort[1]||sort[1]==sort[2]||sort[2]==sort[3]||sort[3]==sort[4]){\n      puts(\"one pair\");\n    }else if(sort[4]==1&&sort[3]==10){\n      puts(\"straight\");\n    }else if(sort[4]-sort[0]==-4){\n      puts(\"straight\");\n    }else\n      puts(\"null\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint compar(const int *val1, const int *val2);\nint poker(int *ary);\n\nint main(void) {\n\tint ary[5];\n\tint n;\n\tint i,m;\n\tchar str[100],*line;\n\n\tfor( ;fgets(str,sizeof(str),stdin)!=NULL; ){\n\t\tline=strtok(str,\", \");\n\t\tsscanf(line,\"%d\",&m);\n\t\tary[0]=m;\n\t\tfor(i=1;i<5;i++){\n\t\t\tline=strtok(NULL,\", \");\n\t\t\tsscanf(line,\"%d\",&m);\n\t\t\tary[i]=m;\n\t\t}\n\t\tn = sizeof(ary)/sizeof(ary[0]);\n\t\tqsort(ary, n, sizeof(int),(int (*)(const void *, const void *))compar);\n\t\tpoker(ary);\n\t}\n\treturn 0;\n}\n\nint compar(const int *val1, const int *val2) {\n\tif( *val1 < *val2 )\n\t\treturn -1;\n\telse if( *val1 == * val2 )\n        \treturn 0;\n\telse\n\t\treturn 1;\n}\n\nint poker(int *ary){\n\tif((ary[0]==ary[1] && ary[1]==ary[2] && ary[2]==ary[3]) || (ary[1]==ary[2] && ary[2]==ary[3] && ary[3]==ary[4]))\n\t\tprintf(\"four card\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2]) && (ary[3]==ary[4]) || (ary[2]==ary[3] && ary[3]==ary[4]) && (ary[0]==ary[1]))\n\t\tprintf(\"full house\\n\");\n\telse if((ary[0]==ary[1]-1 && ary[1]==ary[2]-1) && (ary[2]==ary[3]-1) && (ary[3]==ary[4]-1))\n\t\tprintf(\"straight\\n\");\n\telse if((ary[0]==ary[1]-9 && ary[1]==ary[2]-1) && (ary[2]==ary[3]-1) && (ary[3]==ary[4]-1))\n\t\tprintf(\"straight\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2]) || (ary[1]==ary[2] && ary[2]==ary[3]) || (ary[2]==ary[3] && ary[3]==ary[4]))\n\t\tprintf(\"three card\\n\");\n\telse if((ary[0]==ary[1] && ary[2]==ary[3]) || (ary[0]==ary[1] && ary[3]==ary[4]) || (ary[1]==ary[2] && ary[3]==ary[4]))\n\t\tprintf(\"two pair\\n\");\n\telse if(ary[0]==ary[1] || ary[1]==ary[2] || ary[2]==ary[3] || ary[3]==ary[4])\n\t\tprintf(\"one pair\\n\");\n\telse\n\t\tprintf(\"null\\n\");\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nvoid sort(void);\nint FourCard(void);\nint HullHouse(void);\nint Straight(void);\nint ThreeCard(void);\nint TwoPair(void);\nint OnePair(void);\n\nint x[5];\n\nint main(){\n  int a,b,c,d,e;\n  char c1,c2,c3,c4;\n\n  while(scanf(\"%d %c %d %c %d %c %d %c %d\", &a, &c1, &b, &c2, &c, &c3, &d, &c4, &e) != EOF){\n    x[0] = a;\n    x[1] = b;\n    x[2] = c;\n    x[3] = d;\n    x[4] = e;\n\n    sort();\n\n    if(FourCard() == 1)\n      printf(\"four card\\n\");\n    else if(HullHouse() == 1)\n      printf(\"full house\\n\");\n    else if(Straight() == 1)\n      printf(\"straight\\n\");\n    else if(ThreeCard() == 1)\n      printf(\"three card\\n\");\n    else if(TwoPair() == 1)\n      printf(\"two pair\\n\");\n    else if(OnePair() == 1)\n      printf(\"one pair\\n\");\n    else\n      printf(\"null\\n\");\n  }\n\n  return 0;\n}\n\nvoid sort(void){\n  int i, j, a, b;\n  for(i=1; i<5; i++){\n    a = x[i];\n    for(j=i; x[j-1]>a && j>0; j--){\n      b = x[j-1];\n      x[j-1] = x[j];\n      x[j] = b;\n    }\n  }\n}\n\nint FourCard(void){\n  int i;\n  for(i=0; i<2; ++i){\n    if(x[i] == x[i+1] && x[i] == x[i+2] && x[i] == x[i+3])\n      return 1;\n  }\n  return 0;\n}\n\nint HullHouse(void){\n  if((x[0] == x[1] && x[0] == x[2] && x[3] == x[4])||(x[0] == x[1] && x[2] == x[3] && x[2] == x[4]))\n    return 1;\n  else\n    return 0;\n}\n\nint Straight(void){\n  if(x[0] == x[1]-1 && x[0] == x[2]-2 && x[0] == x[3]-3 && x[0] == x[4]-4)\n    return 1;\n  else if(x[0] == 1 && x[1] == 10 && x[2] == 11 && x[3] == 12 && x[4] == 13)\n    return 1;\n  else\n    return 0;\n}\n\nint ThreeCard(void){\n  int i;\n  for(i=0;i<3; ++i){\n    if(x[i] == x[i+1] && x[i] == x[i+2])\n      return 1;\n  }\n  return 0;\n}\n\nint TwoPair(void){\n  int i;\n  if((x[0] == x[1] && x[2] == x[3])||(x[0] == x[1] && x[3] == x[4])||(x[1] == x[2] && x[3] == x[4]))\n    return 1;\n  else return 0;\n}\n\nint OnePair(void){\n  int i;\n  for(i=0; i<4; ++i){\n    if(x[i] == x[i+1])\n      return 1;\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++)b[i]=0;\n      for(int i=0;i<13;i++) b[a[i]-1]++;\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4);\n         printf(\"four card\\n\");\n         goto exit;\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               go to exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<13-4;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(){\n\tint num[5],i,j,k,l,m,key,flag=0,count=0;\n\t\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&num[0],&num[1],&num[2],&num[3],&num[4])!=EOF){\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++)if(num[i]==num[j] && i!=j){\n\t\t\tflag=1;\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tif(count==2)flag=2;\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++)if(i!=k && j!=k && num[i]==num[k] && num[j]==num[k])flag=3;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]>num[j]){\n\t\t\t\tkey=num[i];\n\t\t\t\tnum[i]=num[j];\n\t\t\t\tnum[j]=key;\n\t\t\t}\n\t\t}\n\t}\n\tif(num[0]==num[1]-1 && num[1]==num[2]-1 && num[2]==num[3]-1 && num[3]==num[4]-1 || num[0]==1 && num[1]==10 && num[2]==11 && num[3]==12 && num[4]==13)flag=4;\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++){\n\t\t\t\t\tif(i!=k && j!=k && num[i]==num[k] && num[j]==num[k]){\n\t\t\t\t\t\tfor(l=0;l<5;l++){\n\t\t\t\t\t\t\tfor(m=l;m<5;m++)if(num[l]==num[l+m] && m!=i && m!=j && m!=k && m!=l)flag=5;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++){\n\t\t\t\t\tif(i!=k && j!=k && num[i]==num[k] && num[j]==num[k]){\n\t\t\t\t\t\tfor(l=0;l<5;l++)if(i!=l && j!=l && k!=l && num[i]==num[l] && num[j]==num[l] && num[k]==num[l] )flag=6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tswitch(flag){\n\tcase 0:\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\tcase 1:\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\tcase 2:\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\tcase 3:\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\tcase 4:\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\tcase 5:\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\tcase 6:\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t}\n\t\tflag=0;\n\t\tcount=0;\n\t}\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(void){\n  int a[14];\n  int b[5];\n  int i,j,f;\n\n  while(scanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4])!=EOF){\n    for(i=0;i<14;i++)\n      a[i]=0;\n    for(i=0;i<5;i++)\n      a[b[i]]++;\n    \n    f=1;\n\n    for(i=0;i<14;i++){\n      if(a[i]>=4){\n\tputs(\"four card\");\n\tf=0;\n\tbreak;\n      }\n    }\n    if(f){\n      for(i=1;i<14;i++){\n\tif(f==0)\n\t  break;\n\tif(a[i]>=3){\n\t  if(f){\n\t    for(j=1;j<14;j++){\n\t      if(i!=j&&a[j]>=2){\n\t\tputs(\"full house\");\n\t\tf=0;\n\t\tbreak;\n\t      }\n\t    }\n\t  }\n\t}\n      }\n    }\n    if(f){\n      for(i=0;i<10;i++){\n\tif(a[i]&&a[i+1]&&a[i+2]&&a[i+3]&&a[i+4]){\n\t  puts(\"straight\");\n\t  f=0;\n\t  break;\n\t}\n      }\n    }\n    if(f){\n      if(a[10]&&a[11]&&a[12]&&a[13]&&a[1]){\n\tputs(\"straight\");\n\tf=0;\n      }\n    }\n    if(f){\n      for(i=0;i<14;i++){\n\tif(a[i]>=3){\n\t  puts(\"three card\");\n\t  f=0;\n\t  break;\n\t}\n      }\n    }\n    if(f){\n      for(i=0;i<14;i++){\n\tif(f==0)\n\t  break;\n\tif(a[i]>=2){\n\t  for(j=0;j<14;j++){\n\t    if(i!=j&&a[j]>=2){\n\t      puts(\"two pair\");\n\t      f=0;\n\t      break;\n\t    }\n\t  }\n\t}\n      }\n    }\n    if(f){\n      for(i=0;i<14;i++){\n\tif(a[i]>=2){\n\t  puts(\"one pair\");\n\t  f=0;\n\t  break;\n\t}\n      }\n    }\n    if(f)\n      puts(\"null\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n  int c[6];\n  int k;\n  int tmp;\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[1],&c[2],&c[3],&c[4],&c[5])!=EOF){\n    while(c[1]>c[2] || c[2]>c[3] || c[3]>c[4] || c[4]>c[5]){\n      for(k=1;k<=4;k++){\n        if(c[k]>c[k+1]){\n          tmp = c[k];\n          c[k] = c[k+1];\n          c[k+1] = tmp;\n        }\n      }\n    }\n    if((c[1]==c[2] && c[2]==c[3] && c[3]==c[4])||(c[2]==c[3] && c[3]==c[4] && c[4]==c[5])){\n      printf(\"four card\\n\");\n    }else if((c[1]==c[2] && c[2]==c[3] && c[4]==c[5])||(c[1]==c[2] && c[3]==c[4] && c[4] == c[5])){\n      printf(\"full house\\n\");\n    }else if((c[1]+1==c[2] && c[2]+1==c[3] && c[3]+1==c[4] && c[4]+1==c[5]) || (c[1]==1 && c[2]==10 &&  c[3]==11 && c[4]==12 && c[5]==13)){\n      printf(\"straight\\n\");\n    }else if((c[1]==c[2] && c[2]==c[3]) || (c[2]==c[3] && c[3]==c[4]) || (c[3]==c[4] && c[4] == c[5])){\n      printf(\"three card\\n\");\n    }else if((c[1]==c[2] && c[3]==c[4]) || (c[1]==c[2] && c[4]==c[5]) || (c[2]==c[3] && c[4]==c[5])){\n      printf(\"two pair\\n\");\n    }else if(c[1]==c[2] || c[2]==c[3] || c[3]==c[4] || c[4]==c[5]){\n      printf(\"one pair\\n\");\n    }else{\n      printf(\"null\\n\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a[100]={0},i,j,smp=0;\n  while(1){\n    if(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])==EOF)break;\n    for(i=0;i<5;i++){\n      for(j=i+1;j<5;j++){\n\tif(a[i] > a[j]){\n\t  smp=a[i];\n\t  a[i]=a[j];\n\t  a[j]=smp;\n\t}\n      }\n    }\n    if(a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3]||a[1]==a[2]&&a[2]==a[3]&&a[3]==a[4]){\n      printf(\"four card\\n\");\n    }\n    else if(a[0]==a[1]&&a[2]==a[3]&&a[3]==a[4]||a[0]==a[1]&&a[1]==a[2]&&a[3]==a[4]){\n      printf(\"full house\\n\");\n    }\n    else if(a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]||a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){\n      printf(\"straight\\n\");\n    }\n    else if(a[0]==a[1]&&a[1]==a[2]||a[1]==a[2]&&a[2]==a[3]||a[2]==a[3]&&a[3]==a[4]){\n      printf(\"three card\\n\");\n    }\n    else if(a[0]==a[1]&&a[2]==a[3]||a[0]==a[1]&&a[3]==a[4]||a[1]==a[2]&&a[3]==a[4]){\n      printf(\"two pair\\n\");\n    }\n    else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4]){\n      printf(\"one pair\\n\");\n    }\n    else{\n      printf(\"null\\n\");\n    }\n  }\n  return 0;\n}\n    \n    "
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\nint compare_int(const void *a,const void *b){\n  return *(int*)a-*(int*)b;\n}\nint main(){\n  int a[5];\n  while( scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n    qsort(a,5,sizeof(int),compare_int);\n    printf(\"%d %d %d %d %d\\n\",a[0],a[1],a[2],a[3],a[4]);\n    if((a[0]==a[1]&& a[1]==a[2] && a[2]==a[3]) || (a[1]==a[2] && a[2]==a[3] && a[3]==a[4]))printf(\"four card\\n\");\n    else if(a[0]==a[1] && a[1]==a[2]){\n      if(a[3]==a[4])printf(\"full house\\n\");\n      else printf(\"three card\\n\");\n    }\n    else if(a[1]==a[2] && a[2]==a[3])printf(\"three card\\n\");\n    else if(a[2]==a[3] && a[3]==a[4]){\n      if(a[0]==a[1])printf(\"full house\\n\");\n      else printf(\"three card\\n\");\n    }\n    else if(a[0]==a[1]){\n      if(a[2]==a[3] || a[3]==a[4])printf(\"two pair\\n\");\n      else printf(\"one pair\\n\");\n    }\n    else if(a[1]==a[2]){\n      if(a[3]==a[4])printf(\"two pair\\n\");\n      else printf(\"one pair\\n\");\n    }\n    else if(a[2]==a[3] ||a[3]==a[4])printf(\"one pair\\n\");\n    else {\n      if(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)printf(\"straight\\n\");\n      else if(a[0]+1==a[1] && a[1]+1==a[2] && a[2]+1==a[3] && a[3]+1==a[4])printf(\"straight\\n\");\n      else  printf(\"null\\n\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n\n  int in[5]={0};\n  while(scanf(\"%d,\",&in[0])!=EOF){\n    scanf(\"%d,%d,%d,%d\",&in[1],&in[2],&in[3],&in[4]);\n\n    int sort[5]={0};\n    int i,j;\n    int datesu=0;\n\n    for(i=0;i<5;i++){    \n      for(j=datesu-1;j>=0;j--){\n\tif(in[i]>sort[j])\n\t  sort[j+1]=sort[j];\n\telse{\n\t  sort[j+1]=in[i];\n\t  break;\n\t}\n      }\n      if(j==-1)\n\tsort[0]=in[i];\n      datesu++;\n    }\n    \n    \n    if(sort[0]==sort[3]||sort[1]==sort[4]){\n      puts(\"four card\");\n    }else if(sort[0]==sort[2]){\n      if(sort[3]==sort[4])\n\tputs(\"full house\");\n      else\n\tputs(\"three card\");\n    }else if(sort[2]==sort[4]){\n      if(sort[0]==sort[1])\n\tputs(\"full house\");\n      else\n\tputs(\"three card\");\n    }else if(sort[1]==sort[3]){\n      puts(\"three card\");\n    }else if((sort[0]==sort[1]&&sort[2]==sort[3])||(sort[0]==sort[1]&&sort[3]==sort[4])||(sort[1]==sort[2]&&sort[3]==sort[4])){\n      puts(\"two pair\");\n    }else if(sort[0]==sort[1]||sort[1]==sort[2]||sort[2]==sort[3]||sort[3]==sort[4]){\n      puts(\"one pair\");\n    }else if(sort[4]==1&&sort[3]==10){\n      puts(\"straight\");\n    }else if(sort[4]-sort[0]==-4){\n      puts(\"straight\");\n    }else\n      puts(\"null\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n  int card[5],ans,cou=0,tmp,i,j;\n  char yaku[7][15] = {\"four card\",\"full house\",\"straight\",\"three card\",\"two pair\",\"one pair\",\"null\"};\n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n    for(i=0;i<5;i++){\n      if(card[i] == 1){\n        card[i] = 14;\n      }\n    }\n    for(i=0;i<5;i++){\n      for(j=i+1;j<5;j++){\n        if(card[i] > card[j]){\n          tmp = card[i];\n          card[i] = card[j];\n          card[j] = tmp;\n        }\n      }\n    }\n    i=0;\n    if(card[0] == card[1] && card[1] == card[2] && card[2] == card[3] || card[1] == card[2] && card[2] == card[3] && card[3] == card[4]) ans = 0;\n    else if(card[0] == card[1] && card[1] == card[2] && card[3] == card[4] || card[0] == card[1] && card[2] == card[3] && card[3] == card[4]) ans = 1;\n    else if(card[1] == card[0] + 1 && card[2] == card[0] + 2 && card[3] == card[0] + 3 && card[4] == card[0] + 4) ans = 2;\n    else if(card[i] == card[i+1] && card[i+1] == card[i+2] || card[i+1] == card[i+2] && card[i+2] == card[i+3] || card[i+2] == card[i+3] && card[i+3] == card[i+4]) ans = 3;\n    else{\n      for(i=0;i<4;i++){\n        if(card[i] == card[i+1]){\n          cou++;\n        }\n      }\n      if(cou == 2){\n        ans = 4;\n      }\n      else if(cou == 1){\n        ans = 5;\n      }\n      else{\n        ans = 6;\n      }\n    }   \n    printf(\"%s\\n\",yaku[ans]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a[5],i,mai[14]={0},max=0,cnt=0,flg=0;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n    for(i=0,max=0,flg=0,cnt=0;i<=13;i++)mai[i]=0;\n    for(i=0;i<5;i++)mai[a[i]]++;\n\n    for(i=1;i<=13;i++){\n      if(max<mai[i])max=mai[i];\n      if(mai[i]>=4){\n\tprintf(\"four card\\n\");\n\tflg=1;\n      }\n    }\n    if(flg==1)continue;\n\n    if(max==3){\n      for(i=1;i<=13;i++){\n\tif(mai[i]==2){\n\t  printf(\"full house\\n\");\n\t  flg=1;\n\t}\n      }\n    }\n    if(flg==1)continue;\n\n    for(i=2,cnt=0;i<=13;i++){\n      if(mai[i]==1){\n\tfor(;i<=13;i++){\n\t  if(mai[i]==1){\n\t    cnt++;\n\t  }\n\t  else{\n\t    flg=1;\n\t    goto exit;\n\t  }\n\t}\n      }\n    }\n  exit:\n    if(cnt==4&&mai[1]==1&&(mai[2]==1||mai[13]==1)&&(!(mai[2]==1&&mai[13]==1))){\n      cnt++;\n    }\n    if(cnt==5){\n      printf(\"straight\\n\");\n      continue;\n    }\n\n    if(max==3){\n      printf(\"three card\\n\");\n      continue;\n    }\n    flg=0;\n    if(max==2){\n      for(i=1;i<=13;i++){\n\tif(mai[i]==2)flg++;\n\tif(flg==2){\n\t  printf(\"two pair\\n\");\n\t  break;\n\t}\n      }\n    }\n    if(flg==2)continue;\n\n    if(max==2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n    printf(\"null\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n\n  int in[5]={0};\n  while(scanf(\"%d,\",&in[0])!=EOF){\n    scanf(\"%d,%d,%d,%d\",&in[1],&in[2],&in[3],&in[4]);\n\n    int sort[5]={0};\n    int i,j;\n    int datesu=0;\n\n    for(i=0;i<5;i++){    \n      for(j=datesu-1;j>=0;j--){\n\tif(in[i]>sort[j])\n\t  sort[j+1]=sort[j];\n\telse{\n\t  sort[j+1]=in[i];\n\t  break;\n\t}\n      }\n      if(j==-1)\n\tsort[0]=in[i];\n      datesu++;\n    }\n    \n    \n    if(sort[0]==sort[3]||sort[1]==sort[4]){\n      puts(\"four card\");\n    }else if(sort[0]==sort[2]){\n      if(sort[3]==sort[4])\n\tputs(\"full house\");\n      else\n\tputs(\"three card\");\n    }else if(sort[2]==sort[4]){\n      if(sort[0]==sort[1])\n\tputs(\"full house\");\n      else\n\tputs(\"three house\");\n    }else if(sort[1]==sort[3]){\n      puts(\"three card\");\n    }else if((sort[0]==sort[1]&&sort[2]==sort[3])||(sort[0]==sort[1]&&sort[3]==sort[4])||(sort[1]==sort[2]&&sort[3]==sort[4])){\n      puts(\"two pair\");\n    }else if(sort[0]==sort[1]||sort[1]==sort[2]||sort[2]==sort[3]||sort[3]==sort[4]){\n      puts(\"one pair\");\n    }else if(sort[4]==1&&sort[3]==10){\n      puts(\"straight\");\n    }else if(sort[4]-sort[0]==-4){\n      puts(\"straight\");\n    }else\n      puts(\"null\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <cstdio>\n#include <functional>\n#include <algorithm>\n\nusing namespace std;\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int d[ 5 ];\n  int i;\n\n  while ( scanf ( \" %d,%d,%d,%d,%d\"\n                , d, d + 1, d + 2, d + 3, d + 4 ) == 5 )\n  {\n    int c[ 13 ] = { 0 };\n\n    sort ( d, d + 5 );\n    for ( i = 0; i < 5; ++i )\n    {\n      ++c[ d[ i ] - 1 ];\n    }\n    sort ( c, c + 13, greater< int > ( ) );\n\n    if ( c[ 0 ] == 4 )\n    {\n      puts ( \"four card\" );\n    }\n    else if ( c[ 0 ] == 3 && c[ 1 ] == 2 )\n    {\n      puts ( \"full house\" );\n    }\n    else if ( ( d[ 0 ] == d[ 1 ] - 1\n             && d[ 0 ] == d[ 2 ] - 2\n             && d[ 0 ] == d[ 3 ] - 3\n             && d[ 0 ] == d[ 4 ] - 4 )\n           || ( d[ 0 ] == 1\n             && d[ 1 ] == 10\n             && d[ 2 ] == 11\n             && d[ 3 ] == 12\n             && d[ 4 ] == 13 ) )\n    {\n      puts ( \"straight\" );\n    }\n    else if ( c[ 0 ] == 3 )\n    {\n      puts ( \"three card\" );\n    }\n    else if ( c[ 0 ] == 2 && c[ 1 ] == 2 )\n    {\n      puts ( \"two pair\" );\n    }\n    else if ( c[ 0 ] == 2 )\n    {\n      puts ( \"one pair\" );\n    }\n    else\n    {\n      puts ( \"null\" );\n    }\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint a[5];\n\tint memo[13];\n\tint i, j;\n\tint flag;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) != EOF){\n\t\tflag = 0;\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tmemo[i] = -1;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tif (memo[a[i] - 1] == -1){\n\t\t\t\tmemo[a[i] - 1] += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmemo[a[i] - 1]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (memo[i] == 4){\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (flag == 1){\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (memo[i] == 3){\n\t\t\t\tfor (j = 0; j < 13; j++){\n\t\t\t\t\tif (memo[j] == 2){\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (flag == 0){\n\t\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\t\tflag = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (flag == 1){\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 10; i++){\n\t\t\tif (memo[i % 13] + memo[(i + 1) % 13]+ memo[(i + 2) % 13] + memo[(i + 3) % 13] + memo[(i + 4) % 13] == 5){\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (flag == 1){\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (memo[i] == 2){\n\t\t\t\tfor (j = 0; j < 13; j++){\n\t\t\t\t\tif (i != j && memo[j] == 2){\n\t\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (flag == 0){\n\t\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t\tflag = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (flag == 0){\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint a[9],i;\n\nint cmp(const void *a,const void *b){\n\treturn *(int *)a - *(int *)b;\n}\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tqsort(a,5,sizeof(int),cmp);\n\t\tif(a[1]==a[2] && a[2]==a[3] && (a[0]==a[1] || a[4]==a[1]))printf(\"four card\\n\");\n\t\telse if((a[0]==a[1] && a[2]==a[3] && a[3]==a[4]) || ((a[3]==a[4] && a[0]==a[1] && a[1]==a[2])))printf(\"full house\\n\");\n\t\telse if(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)printf(\"straight\\n\");\n\t\telse if(a[4]==a[3]+1 && a[3]==a[2]+1 && a[2]==a[1]+1 && a[1]==a[0]+1)printf(\"straight\\n\");\n\t\telse if((a[0]==a[1] && a[1]==a[2]) || (a[1]==a[2] && a[2]==a[3]) || (a[3]==a[4] && a[4]==a[5]))printf(\"three card\\n\");\n\t\telse if((a[0]==a[1] && (a[2]==a[3] || a[3]==a[4])) || (a[1]==a[2] && a[3]==a[4]))printf(\"two pari\\n\");\n\t\telse if(a[0]==a[1] || a[1]==a[2] || a[2]==a[3] || a[3]==a[4])printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int a[5]){\n  int i,j,t;\n  /*??????????????????\n  for(i=0;i<5;i++){\n    printf(\"%d\",a[i]);\n  }\n  */\n  for(j=0;j<4;j++){\n    for(i=4;i>j;i--){\n      if(a[i]<a[i-1]){\n\tt=a[i];\n\ta[i]=a[i-1];\n\ta[i-1]=t;\n      }\n    }\n  }\n}\n\nint main(void){\n  int c[5];\n  int z[5];\n  int x,mai,k2,k3,state;\n  int i;\n  while((scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4]))!=EOF){\n    /*C??????????????????????¢????ok\n    for(i=0;i<5;i++){\n      printf(\"%d\",c[i]);\n    }\n    */\n    sort(c);\n    /*?????????????¢????ok\n    for(i=0;i<5;i++){\n      printf(\"%d,\",c[i]);\n    }\n    */\n    mai=1;  k3=0; k2=0;\n    x=c[0]; state=0;\n    if(c[1]==c[0]+1 && c[2]==c[1]+1 && c[3]==c[2]+1 && c[4]==c[3]+1){\n      printf(\"straight\\n\");\n      state++;\n    }else{\n      for(i=1;i<5;i++){\n\t//printf(\"%d,%d,%d\\n\",mai,k2,k3);\n\tif(x==c[i]){\n\t  mai++;\n\t  //printf(\"mai++\");\n\t}else if(mai==4){\n\t  printf(\"four card\\n\");\n\t  state++;\n\t  break;\n\t}else{\n\t  x=c[i];\n\t  if(mai==3){  \n\t    k3++;\n\t  }else if(mai==2){   \n\t    k2++;\n\t  }\n\t  mai=1;\n\t}\n      }\n      if(mai==4){\n\tprintf(\"four card\\n\");\n\tstate++;\n      }else if(mai==3){\n\tk3++;\n      }else if(mai==2){\n\tk2++;\n      }\n      //printf(\"%d\\n\",state);\n      //printf(\"%d,%d,%d\\n\",mai,k2,k3);\n      if(state==0){\n\tif(k3==1){\n\t  if(k2==1){\n\t    printf(\"full house\\n\");\n\t  }else{\n\t    printf(\"three card\\n\");\n\t  }\n\t}else if(k2==2){\n\t  printf(\"two pair\\n\");\n\t}else if(k2==1){\n\t  printf(\"one pair\\n\");\n\t}else{\n\t  printf(\"null\\n\");\n\t}\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int count = 0;\n        int t = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while( scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF )\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i + 1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n\n                if(count == 0)\n                {\n                        for(k = 0 ;k < P; k++)\n                        {\n                                c[k] = card[k] + k;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if((t == 4) || (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two paor\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                m = 0;\n                count = 0;\n                for(i = 0; i < P; i++)\n                {\n                           c[i] = 0;\n                        card[i] = 0;\n                }\n                i = 0;\n                j = 0;\n                k = 0;\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int kazu[5];\n  int i,j,k;\n  int count;\n  int count2;\n  int tmp;\n  int temp[5];\n  while(scanf(\"%d,%d,%d,%d,%d\",&kazu[0],&kazu[1],&kazu[2],&kazu[3],&kazu[4])!=EOF){\n    for(i=0;i<4;i++){\n      for(j=4;j>i;j--){\n\tif(kazu[j]<kazu[j-1]){\n\t  tmp=kazu[j];\n\t  kazu[j]=kazu[j-1];\n\t  kazu[j-1]=tmp;\n\t}\n      }\n    }\n    count=1;\n    count2=1;\n    for(i=0;i<4;i++){\n      if(kazu[i]==kazu[i+1]){\n\tcount++;\n      }\n      if(kazu[i]!=kazu[i+1] && count!=1) break;\n    }\n    for(i=i;i<4;i++){\n      if(kazu[i]==kazu[i+1]){\n\tcount2++;\n      }\n    }\n    \n    if(count==2 && count2==1) printf(\"one pair\\n\");\n    else if(count==2 && count2==2) printf(\"two pair\\n\");\n    else if(count==3 && count2==1) printf(\"three card\\n\");\n    else if(count==4 && count2==1) printf(\"four card\\n\");\n    else if(count==3 && count2==2 || count==2 && count2==3) printf(\"full house\\n\");\n    else{\n      count=0;\n      if(kazu[0]==1 && kazu[1]==10 && kazu[2]==11 && kazu[3]==12 && kazu[4]==13){\n\tprintf(\"straight\\n\");\n      }\n      else{\n\tfor(i=0;i<4;i++){\n\t  if(kazu[i+1]-kazu[i]==1) count++;\n\t}\n\tif(count==4) printf(\"straight\\n\");\n\telse printf(\"null\\n\");\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint max(int x, int y)\n{\n\tif (x > y){\n\t\treturn (x);\n\t}\n\t\n\treturn (y);\n}\n\nvoid swap(int *i, int *j)\n{\n\t*i += *j;\n\t*j = *i - *j;\n\t*i -= *j;\n}\n\nint main(void)\n{\n\tint card[13];\n\tchar str[7][11] = {{\"null\"}, {\"one pair\"}, {\"two pair\"}, {\"three card\"}, \n\t\t\t\t\t{\"staight\"}, {\"full house\"}, {\"four card\"}};\n\tint ans;\n\tint tmp;\n\tint i, j;\n\tchar c[5];\n\tint count;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\tans = 0;\n\t\ttmp = 0;\n\t\tmemset(card, 0, sizeof(card));\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tcard[c[i] - 1]++;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (card[i]){\n\t\t\t\tfor (j = i, count = 0; count < 5; count++, j++){\n\t\t\t\t\tif (!card[j]){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (j == 12 && count == 4){\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse if (j == 12){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count){\n\t\t\t\ttmp = 4;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 12 - 1; i++){\n\t\t\tfor (j = 0; j < 11 - i; j++){\n\t\t\t\tif (card[j] < card[j + 1]){\n\t\t\t\t\tswap(&card[j], &card[j + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (card[0] == 4){\n\t\t\tans = 6;\n\t\t}\n\t\telse if (card[0] == 3 && card[1] == 2){\n\t\t\tans = 5;\n\t\t}\n\t\telse if (card[0] == 3){\n\t\t\tans = 3;\n\t\t}\n\t\telse if (card[0] == 2 && card[1] == 2){\n\t\t\tans = 2;\n\t\t}\n\t\telse if (card[0] == 2){\n\t\t\tans = 1;\n\t\t}\n\t\t\n\t\tans = max(ans, tmp);\n\t\t\n\t\tprintf(\"%s\\n\", str[ans]);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint compar(const int *val1, const int *val2);\nint poker(int *ary);\n\nint main(void) {\n\tint ary[5];\n\tint n;\n\tint i,m;\n\tchar str[100],*line;\n\n\tfor( ;fgets(str,sizeof(str),stdin)!=NULL; ){\n\tline=strtok(str,\", \");\n\tsscanf(line,\"%d\",&m);\n\tary[0]=m;\n\tfor(i=1;i<5;i++){\n\t\tline=strtok(NULL,\", \");\n\t\tsscanf(line,\"%d\",&m);\n\t\tary[i]=m;\n\t}\n\tn = sizeof(ary)/sizeof(ary[0]);\n\tqsort(ary, n, sizeof(int),(int (*)(const void *, const void *))compar);\n\tpoker(ary);\n\t}\n\treturn 0;\n}\n\nint compar(const int *val1, const int *val2) {\n    if ( *val1 < *val2 ) {\n        return -1;\n    } else if ( *val1 == * val2 ) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n\nint poker(int *ary){\n\tif((ary[0]==ary[1] && ary[1]==ary[2] && ary[2]==ary[3]) || (ary[1]==ary[2] && ary[2]==ary[3] && ary[3]==ary[4]))\n\t\tprintf(\"four card\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2]) && (ary[3]==ary[4]) || (ary[2]==ary[3] && ary[3]==ary[4]) && (ary[0]==ary[1]))\n\t\tprintf(\"full house\\n\");\n\telse if((ary[0]==ary[1]-1 && ary[1]==ary[2]-1) && (ary[2]==ary[3]-1) && (ary[3]==ary[4]-1))\n\t\tprintf(\"straight\\n\");\n\telse if((ary[0]==ary[1]-9 && ary[1]==ary[2]-1) && (ary[2]==ary[3]-1) && (ary[3]==ary[4]-1))\n\t\tprintf(\"straight\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2]) || (ary[1]==ary[2] && ary[2]==ary[3]) || (ary[2]==ary[3] && ary[3]==ary[4]))\n\t\tprintf(\"three card\\n\");\n\telse if((ary[0]==ary[1] && ary[2]==ary[3]) || (ary[0]==ary[1] && ary[3]==ary[4]) || (ary[1]==ary[2] && ary[3]==ary[4]))\n\t\tprintf(\"two pair\\n\");\n\telse if(ary[0]==ary[1] || ary[1]==ary[2] || ary[2]==ary[3] || ary[3]==ary[4])\n\t\tprintf(\"one pair\\n\");\n\telse\n\t\tprintf(\"null\\n\");\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n\n   int a,b,c,d,e;\n   int state = 0;      //0:null;1:1pair,2:2pair,3:3card,4:hullhouse,5:straight,6:4card\n\n   while(scanf(\"%d,%d,%d,%d.%d\",&a,&b,&c,&d,&e)!=EOF){\n\n      while(!((a<=b)&&(b<=c)&&(c<=d)&&(d<=e))){\n         int tmp;\n         if(a>b){a = tmp; a = b; b = tmp;}\n         if(b>c){b = tmp; b = c; c = tmp;}\n         if(c>d){c = tmp; c = d; d = tmp;}\n         if(d>e){d = tmp; d = e; e = tmp;}\n      }\n\n      int p1 = 0;\n      int p1_n = 0;\n      int p2 =0;\n      int p2_n = 0;\n      if(a==b){p1++; p1_n=a;}\n      if(b==c){\n         if(b == p1_n){\n            p1++;\n         }else if(p1_n==0){\n            p1++;\n            p1_n = b;\n         }else{\n            p2++;\n            p2_n = b;\n         }\n      }\n      if(c==d){\n         if(c == p1_n){\n            p1++;\n         }else if(p1_n==0){\n            p1++;\n            p1_n = c;\n         }else{\n            p2++;\n            p2_n = c;\n         }\n      }\n      if(d==e){\n      if(d == p1_n){\n            p1++;\n         }else if(p1_n==0){\n            p1++;\n            p1_n = d;\n         }else{\n            p2++;\n            p2_n = d;\n         }\n      }\n      \n\n      state = 0;\n      if(p1==0&&p2==0){\n         if(a==1&&b ==10&&c==11&&d ==12&&e ==13){\n            state =5;\n         }else if(a+1==b&&b+1==c&&c+1 ==d&&d+1 ==e){\n            state =5;\n         }\n      }else if((p1==1&&p2==1)){\n         state = 2;\n      }else if((p1==1&&p2==2)||(p1==2&&p2==1)){\n         state = 4;\n      }else if(p1==3||p2==3){\n         state = 6;\n      }else if(p1==2||p2==2){\n         state = 3;\n      }else if(p1==1&&p2==1){\n         state = 2;\n      }else if(p1==1||p2==1){\n         state =1;\n      }\n   \n\n      switch(state){\n         case 0:  printf(\"null\\n\"); break;\n         case 1:  printf(\"one pair\\n\"); break;\n         case 2:  printf(\"two pair\\n\"); break;\n         case 3:  printf(\"three card\\n\"); break;\n         case 4:  printf(\"hullhouse\\n\"); break;\n         case 5:  printf(\"straight\\n\"); break;\n         case 6:  printf(\"four card\\n\"); break;\n      }\n    }\n   \n\n   return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare_int(const void *a, const void *b){\n    return *(int*)a - *(int*)b;\n}\n\n\nint main(int argc,char* argv[]){\n  int first_card,is_st;\n  int i;\n  int max,max2,max3,max4;\n  int cards[5];\n  int hands[13];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) != EOF){\n    max = max2 = 0;is_st = 1;\n    qsort(cards, 5, sizeof(int), compare_int);\n    \n    for(i = 0;i < 13;i++){\n      hands[i] = 0;\n    }\n    \n    for(i = 0;i < 5;i++){\n      hands[cards[i] - 1]++;\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max <= hands[i]){\n\tmax2 = max;\n\tmax = hands[i];\n      }else if(max2 <= hands[i]){\n\tmax2 = hands[i];\n      }\n    }\n    \n    if(max == 4){\n      printf(\"four card\\n\");\n      continue;\n    }\n\n    if(max == 3 && max2 == 2){\n      printf(\"full house\\n\");\n      continue;\n    }\n    \n    first_card = cards[0];\n    for(i = 1;i < 5;i++){\n      if(first_card + 1 != cards[i]){is_st = 0;break;}else{\n\tfirst_card++;\n      }\n    }\n\n    if(is_st || (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)){\n      printf(\"straight\\n\");\n      continue;\n    }\n    \n    if(max == 3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max == 2 && max2 == 2){\n      printf(\"two pair\\n\");\n      continue;\n    }\n\n    if(max == 2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n\n    printf(\"null\\n\");\n    \n  }\n  \n  return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a[5],i,mai[14]={0},max=0,cnt=0,flg=0;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n    for(i=0,max=0,flg=0,cnt=0;i<=13;i++)mai[i]=0;\n    for(i=0;i<5;i++)mai[a[i]]++;\n\n    for(i=1;i<=13;i++){\n      if(max<mai[i])max=mai[i];\n      if(mai[i]>=4){\n\tprintf(\"four card\\n\");\n\tflg=1;\n      }\n    }\n    if(flg==1)continue;\n\n    if(max==3){\n      for(i=1;i<=13;i++){\n\tif(mai[i]==2){\n\t  printf(\"full house\\n\");\n\t  flg=1;\n\t}\n      }\n    }\n    if(flg==1)continue;\n\n    for(i=2,cnt=0;i<=13;i++){\n      if(mai[i]==1){\n\tfor(;i<=13;i++){\n\t  if(mai[i]==1){\n\t    cnt++;\n\t  }\n\t  else{\n\t    flg=1;\n\t    break;\n\t  }\n\t}\n\tif(flg==1)break;\n      }\n      if(flg==1)break;\n    }\n    if(cnt==4&&mai[1]==1&&(mai[2]==1||mai[13]==1)&&(!(mai[2]==1&&mai[13]==1))){\n      cnt++;\n    }\n    if(cnt==5){\n      printf(\"straight\\n\");\n      continue;\n    }\n\n    if(max==3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max==2){\n      for(i=1;i<=13;i++){\n\tif(mai[i]==2)flg++;\n\tif(flg==2){\n\t  printf(\"two pair\\n\");\n\t  break;\n\t}\n      }\n    }\n    if(flg==2)continue;\n\n    if(max==2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n    printf(\"null\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "M(char*a){return*1[&a]-*a;}char c[];v;main(i){memset(c,48,15);for(;~scanf(\"%d,\",&v);)if(c[v]++,++i==6)c[14]=c[1],v=strstr(c,\"11111\"),qsort(c,14,i=1,M),puts(v?\"straight\":*c-52?*c-51?*c-50?\"null\":c[1]-50?\"one pair\":\"two pair\":c[1]-50?\"three card\":\"full house\":\"four card\"),memset(c,48,15);}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main (void) {\n    int temp[5],card[14],i,one,two,three,four;\n    while (scanf(\"%d,%d,%d,%d,%d\\n\",&temp[0],&temp[1],&temp[2],&temp[3],&temp[4])!=EOF) {\n        one=0;\n        two=0;\n        three=0;\n        four=0;\n        for(i=1;i<=13;i++) card[i]=0;\n        for (i=0; i<5; i++) {\n            card[temp[i]]++;\n            if (card[temp[i]]==1) one++;\n            if (card[temp[i]]==2) {\n                one--;\n                two++;\n            }\n            if (card[temp[i]]==3) {\n                two--;\n                three++;\n            }\n            if (card[temp[i]]==4) {\n                three--;\n                four++;\n            }\n        }\n        if (four==1) {\n            printf(\"four card\\n\");\n        } else if (three==1&&two==1) {\n            printf(\"full house\\n\");\n        } else if (one==5) {\n            for (i=1;i<=10;i++) {\n                if (i<=9&&card[i]==1&&card[i+1]==1&&card[i+2]==1&&card[i+3]==1&&card[i+4]==1) {\n                    printf(\"straight\\n\");\n                    break;\n                } else if (i==10&&card[i]==1&&card[i+1]==1&&card[i+2]==1&&card[i+3]==1&&card[1]==1) {\n                    printf(\"straight\\n\");\n                    break;\n                } else if (i==10) {\n                    printf(\"null\\n\");\n                    break;\n                }\n            }\n        } else if (three==1) {\n            printf(\"three card\\n\");\n        } else if (two==2) {\n            printf(\"two pair\\n\");\n        } else if (two==1) {\n            printf(\"one pair\\n\");\n        } else {\n            printf(\"null\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint card[5];\n\tint i,j;\n\tint temp;\n\tfor(i=0;i<5;i++){\n\t\tscanf(\"%d\",&card[i]);\n\t}\n\tfor(i=0;i<4;i++){\n\t\tfor(j=4;j>i;j--){\n\t\t\tif(card[j-1]>card[j]){\n\t\t\t\ttemp=card[j];\n\t\t\t\tcard[j]=card[j-1];\n\t\t\t\tcard[j-1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(card[0]==card[3]||card[1]==card[4]){\n\t\tprintf(\"four card\\n\");\n\t}\n\telse if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]){\n\t\tprintf(\"three card\\n\");\n\t}\n\telse if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"two pair\\n\");\n\t}\n\telse if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\t\tprintf(\"one pair\\n\");\n\t}\n\telse if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"full house\\n\");\n\t}\n\telse if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)){\n\t\tprintf(\"straight\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar judge(int hand[5]);\nvoid sort(int *hand);\n\nint main(void)\n{\n\tint hand[5];\n\tchar rank;\n\tint OF;\n\twhile (scanf(\" %d,\", &OF) != EOF){\n\t\thand[0] = OF;\n\t\t\n\tscanf(\"%d,%d,%d,%d\", &hand[1], &hand[2]\n\t\t\t\t\t\t\t  , &hand[3], &hand[4]);\n\t\n\tsort(hand);\n\trank = judge(hand);\n\t\n\tswitch (rank){\n\t\t\n\t\tcase ('S'):\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('A'):\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('B'):\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('C'):\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('D'):\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('E'):\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('F'):\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\t}\n\t}\n\treturn (0);\n}\n\nvoid sort(int *hand)\n{\n\tint i, j;\n\tint tmp;\n\tfor (i = 0; i < 5; i++){\n\t\tfor (j = 0; j < 5; j++){\n\t\t\tif (hand[i] < hand[j]){\n\t\t\t\ttmp = hand[i];\n\t\t\t\thand[i] = hand[j];\n\t\t\t\thand[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nchar judge(int hand[5])\n{\n\tint pair = 0;\n\tint card_3 = 0, card_4 = 0;\n\tchar rank;\n\tint straight = 0;\n\tint i;\n\tint sum = 0;\n\t\n\tfor (i = 0; i < 5; i++){\n\t\tsum += hand[i];\n\t\tif (hand[i] == hand[i + 1]){\n\t\t\tpair++;\n\t\t\tif (hand[i] == hand[i + 2]){\n\t\t\t\tpair--;\n\t\t\t\tcard_3++;\n\t\t\t\tif (hand[i] == hand[i + 3]){\n\t\t\t\t\tcard_3--;\n\t\t\t\t\tcard_4++;\n\t\t\t\t\ti++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hand[i] + 1 == hand[i + 1]){\n\t\t\tstraight++;\n\t\t}\n\t}\n\t\n\tif (card_4 == 1){\n\t\trank = 'S';\n\t}\n\telse if (card_3 == 1 && pair == 1){\n\t\trank = 'A';\n\t}\n\telse if (straight == 4){\n\t\trank = 'B';\n\t}\n\telse if (straight == 3 && sum == 47){\n\t\trank = 'B';\n\t}\n\t\n\telse if (card_3 == 1){\n\t\trank = 'C';\n\t}\n\telse if (pair == 2){\n\t\trank = 'D';\n\t}\n\telse if (pair == 1){\n\t\trank = 'E';\n\t}\n\telse {\n\t\trank = 'F';\n\t}\n\t\n\treturn (rank);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n\tint hand[5][2],p,a,b,f;\n\tfor(;;){\n\t\tif(scanf(\"%d,%d,%d,%d,%d\",&hand[0][0],&hand[1][0],&hand[2][0],&hand[3][0],&hand[4][0]) == EOF){break;}\n\t\tp = 0;\n\t\tfor(a=0;a<5;a++){hand[a][1] = 1;}\n\t\tfor(a=0;a<5;a++){\n\t\t\tif(hand[a][1] == 1){\n\t\t\t\tf = 0;\n\t\t\t\thand[a][1] = 0;\n\t\t\t\tfor(b=a;b<5;b++){\n\t\t\t\t\tif(hand[a][0] == hand[b][0] && hand[b][1] == 1){\n\t\t\t\t\t\tf++;\n\t\t\t\t\t\thand[b][1] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(f == 1){p+=2;}\n\t\t\t\tif(f == 2){p+=3;}\n\t\t\t\tif(f == 3){p+=10;}\n\t\t\t}\n\t\t}\n\t\tif(p == 0){\n\t\t\tfor(a=0;a<5;a++){\n\t\t\t\tfor(b=0;b<4;b++){\n\t\t\t\t\tif(hand[b][0]>hand[b+1][0]){\n\t\t\t\t\t\tf = hand[b][0];\n\t\t\t\t\t\thand[b][0] = hand[b+1][0];\n\t\t\t\t\t\thand[b+1][0] = f;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(a=0;a<4;a++){\n\t\t\t\tif(hand[a][0]+1 != hand[a+1][0]){break;}\n\t\t\t}\n\t\t\tif(a == 4){p = 1;}\n\t\t}\n\t\tif(hand[0][0] == 1 && hand[1][0] == 10 && hand[2][0] == 11 && hand[3][0] == 12 && hand[4][0] == 13){p = 1;}\n\t\tif(p == 0){printf(\"null\\n\");}\n\t\telse if(p == 1){printf(\"straight\\n\");}\n\t\telse if(p == 2){printf(\"one pair\\n\");}\n\t\telse if(p == 3){printf(\"three card\\n\");}\n\t\telse if(p == 4){printf(\"two pair\\n\");}\n\t\telse if(p == 5){printf(\"full house\\n\");}\n\t\telse if(p == 10){printf(\"four card\\n\");}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<memory.h>\nint cmp(const void *x, const void *y)\n{\n\treturn *(int*)x - *(int*)y;\n}\nint main()\n{\n\tint c[5], n[13], nn[5], i;\n\twhile (scanf(\"%d\", c)>0) {\n\t\tfor (i = 1; i < 5; i ++)\n\t\t\tscanf(\",%d\", c+i);\n\t\tqsort(c, 5, sizeof(int), cmp);\n\t\tmemset(n, 0, sizeof(n));\n\t\tfor (i = 0; i < 5; i ++)\n\t\t\tn[c[i]-1] ++;\n\t\tmemset(nn, 0, sizeof(nn));\n\t\tfor (i = 0; i < 13; i ++)\n\t\t\tnn[n[i]] ++;\n\t\tif (nn[4])\n\t\t\tputs(\"four card\");\n\t\telse if (nn[3] && nn[2])\n\t\t\tputs(\"full house\");\n\t\telse if (c[1]+1==c[2] && c[1]+2==c[3] && c[1]+3==c[4] && (c[1]-1==c[0] || (c[0]==1 && c[1]==10)))\n\t\t\tputs(\"straight\");\n\t\telse if (nn[3])\n\t\t\tputs(\"three card\");\n\t\telse if (nn[2] == 2)\n\t\t\tputs(\"two pair\");\n\t\telse if (nn[2])\n\t\t\tputs(\"one pair\");\n\t\telse\n\t\t\tputs(\"null\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "int main()\n{\n  int t[14];\n  int a,b,c,d,e,i,x;\n  for(;~scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e);)\n    {\n      for(i=0;i<14;i++)\n\tt[i]=0;\n      t[a]++;\n      t[b]++;\n      t[c]++;\n      t[d]++;\n      t[e]++;\n      for(;;)\n\t{\n\t  for(x=i=0;i<14;i++)\n\t    if(t[i]>3)\n\t      x=1,puts(\"four card\");\n\t  if(x!=0)\n\t    break;\n\t  for(x=i=0;i<14;i++)\n\t    {\n\t      if(t[i]==3)\n\t\tx+=3;\n\t      if(t[i]==2)\n\t\tx+=2;\n\t    }\n\t  if(x==5)\n\t    {\n\t      puts(\"full house\");\n\t      break;\n\t    }\n\t  for(x=i=0;i<10;i++)\n\t    if(t[i]==1&&t[i+1]==1&&t[i+2]==1&&t[i+3]==1&&t[i+4]==1)\n\t      x=1,puts(\"straight\");\n\t  if(x!=0)\n\t    break;\n\t  \n\t  for(x=i=0;i<14;i++)\n\t    if(t[i]>2)\n\t      x=1,puts(\"three card\");\n\t  if(x!=0)\n\t    break;\n\t  \t  \n\t  for(x=i=0;i<14;i++)\n\t    if(t[i]>1)\n\t      x++;\n\t  if(x==1)\n\t    {\n\t      puts(\"one pair\");\n\t      break;\n\t    }\n\t  if(x==2)\n\t    {\n\t      puts(\"two pair\");\n\t      break;\n\t    }\n\t  puts(\"null\");\n\t  break;\n\t}\n\t  \n\n\t\n\t\n    }\n}"
  },
  {
    "language": "C",
    "code": "int main(void){     int card[5],ans,n,i,l,t,f;           while(scanf(\" %d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])!=EOF){                   //昇順にソート         for(i=0;i<4;i++){             for(l=4;l>i;l--){                 if(card[l-1]>card[l]){                     t=card[l-1];                     card[l-1]=card[l];                     card[l]=t;                 }             }         }                   //ストレート判定         for(f=0,i=4;i>0;i--){             if(i==1 && card[1]==10 && card[0]==1)f=1;             if(card[i]!=card[i-1]+1)break;             if(i==1)f=1;         }                   //スリーペア         if(f==0){             for(i=0;i<3;i++){                 if(card[i]==card[i+2])f=3;             }         }                   //ワンペア判定         if(f==0){             for(i=0;i<4;i++){                 if(card[i]==card[i+1])f=2;             }         }                   if(card[0]==card[3] || card[1]==card[4]){             printf(\"four card\\n\");         }         else if((card[0]==card[1] && card[2]==card[4]) || card[0]==card[2] && card[3]==card[4]){             printf(\"full house\\n\");         }         else if(f==1){             printf(\"straight\\n\");         }         else if(f==3){             printf(\"three card\\n\");         }         else if((card[0]==card[1] && (card[2]==card[3] || card[3]==card[4])) || (card[1]==card[2] && card[3]==card[4])){             printf(\"two pair\\n\");         }         else if(f==2){             printf(\"one pair\\n\");         }         else{             printf(\"null\\n\");         }                                   }                 return 0; } "
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a,b,c[5],d=0,e,f=0,g,h=0,i,j,l=0;\n  int k[2]={1};\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    for(a=0;a<5;a++){\n      for(b=4;b>0;b--){\n\tif(c[b]<c[b-1]){\n\t  e=c[b];\n\t  c[b]=c[b-1];\n\t  c[b-1]=e;\n\t}\n      }\n    }\n    for(a=0;a<5;a++){\n      for(b=4;b>0;b--){\n\tif(c[b]==c[b-1]&&c[4]!=13){\n\t  d=1;\n\t  break;\n\t}\n      }\n      if(d==1)break;\n    }\n    switch(d){\n    case 0:\n      for(a=1;a<5;a++){\n\tif(c[0]==1){\n\t  l=1;\n\t  for(b=2;b<5;b++){\n\t    if(c[b]-1!=c[b-1]){\n\t      f=1;\n\t      break;\n\t    }\n\t  }\n\t}\n\tif(c[a]-1!=c[a-1]&&l!=1){\n\t  f=1;\n\t  break;\n\t}\n      }\n      if(f==1){\n\tprintf(\"null\\n\");\n      }\n      else{\n\tprintf(\"straight\\n\");\n      }\n      break;\n    default:\n      for(a=0;a<4;a++){\n\tif(c[a]==c[a+1]){\n\t  k[h]=k[h]+1;\n\t}\n\tif(k[h]>1&&c[a]!=c[a+1]){\n\t  h=1;\n\t}\n      }\n      if(k[0]==4){\n\tprintf(\"four card\\n\");\n      }\n      else if(k[0]==3||k[1]==3){\n\tif((k[0]==2&&k[1]==3)||(k[0]==3&&k[1]==2)){\n\t  printf(\"full house\\n\");\n\t}\n\telse{\n\t  printf(\"three card\\n\");\n\t}\n      }\n      else if(k[0]==2&&k[1]==2){\n\tprintf(\"two pair\\n\");\n      }\n      else if(k[0]==2||k[1]==2){\n\tprintf(\"one pair\\n\");\n      }\n      break;\n    }\n    d=0;\n    h=0;\n    f=0;\n    l=0;\n    k[0]=1;\n    k[1]=1;\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main(void){\n\tint i,str,hand,a[13],b[5];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4])!=EOF){\n\t\tfor(i=0;i<13;i++)a[i]=0;\n\t\tfor(i=0;i<5;i++)a[b[i]-1]++;\n\t\thand=0;str=0;\n\t\tfor(i=0;i<13;i++){\n\t\t\tif(a[i]==1){str++;if(str==5)hand=6;}\n\t\t\telse {\n\t\t\t\tstr=0;\n\t\t\t\tif(a[i]==2)hand++;\n\t\t\t\telse if(a[i]==3)hand+=3;\n\t\t\t\telse if(a[i]==4)hand=5;\n\t\t\t}\n\t\t}\n\t\tif(str==4 && a[0]==1)hand=6;\n\t\tswitch(hand){\n\t\tcase 1:printf(\"one pair\\n\");break;\n\t\tcase 2:printf(\"two pair\\n\");break;\n\t\tcase 3:printf(\"three card\\n\");break;\n\t\tcase 4:printf(\"full house\\n\");break;\n\t\tcase 5:printf(\"four card\\n\");break;\n\t\tcase 6:printf(\"straight\\n\");break;\n\t\tdefault:printf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#define f(i,k) for(i=k;i<5;i++)\nint main(){\n\tint c[6];\n\tint i=4,j,t,p=0;\n\tfor(;scanf(\"%d,%d,%d,%d,%d\",&c[i--],&c[i--],&c[i--],&c[i--],&c[i--])!=EOF;i=4,p=0){\n\t\tf(i,0){f(j,i){if(c[i]>c[j]){\n\t\t\t\t\tt=c[i];c[i]=c[j];c[j]=t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(c[0]==c[3] || c[1] ==c[4] ){printf(\"four card\\n\");continue;}\n\t\tif(c[0]==c[2] || c[1] ==c[3] || c[2]== c[4]){\n\t\t\tfor(i=0;i<2;i++)if(c[i]!=c[i+1])break;\n\t\t\tif(i==1){\n\t\t\t\tif(c[1]!=c[0]){printf(\"three card\\n\");continue;}\n\t\t\t\tprintf(\"full house\\n\");continue;\n\t\t\t}\n\t\t\tif(i==0){printf(\"three card\\n\");continue;}\n\t\t\tif(c[3]!=c[4]){printf(\"three card\\n\");continue;}\n\t\t\tprintf(\"full house\\n\");continue;\n\t\t}\n\t\tif(c[0]==c[1])p++;\n\t\tif(c[1]==c[2])p++;\n\t\tif(c[2]==c[3])p++;\n\t\tif(c[3]==c[4])p++;\n\t\tif(p==1){printf(\"one pair\\n\");continue;}\n\t\telse if(p==2){printf(\"two pair\\n\");continue;}\n\t\tif((c[0]+2==c[4]-2 && c[1]+1==c[3]-1) || (c[1]+2==c[0]+11 && c[2]+1==c[4]-1)){printf(\"straight\\n\");continue;}\n\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// Aizu Vol0 0038: Poker Hand\n// 2017.7.30\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX 14\n\nint main()\n{\n\tint card[MAX+3];\n\tint max;\n\tint i, j, d[5];\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &d[0], &d[1], &d[2], &d[3], &d[4]) == 5) {\n\t\tfor (i = 1; i <= MAX; i++) card[i] = 0;\n\t\tmax = 0;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif (++card[d[i]] > max) max = card[d[i]];\n\t\t\tif (d[i] == 1) card[14] = 1;\n\t\t}\n\t\tif (max == 4) {\n\t\t\tputs(\"four card\");\n\t\t\tgoto DONE;\n\t\t}\n\t\tif (max == 3) {\n\t\t\tfor (i = 1; i < MAX; i++) {\n\t\t\t\tif (card[i] == 2) {\n\t\t\t\t\tputs(\"full house\");\n\t\t\t\t\tgoto DONE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (max == 1) {\n\t\t\tfor (i = 1; i <= 10; i++) {\n\t\t\t\tfor (j = 0; ; j++) {\n\t\t\t\t\tif (j >= 5) {\n\t\t\t\t\t\tputs(\"straight\");\n\t\t\t\t\t\tgoto DONE;\n\t\t\t\t\t}\n\t\t\t\t\tif (card[i + j] != 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (max == 3) {\n\t\t\tputs(\"three card\");\n\t\t\tgoto DONE;\n\t\t}\n\t\tif (max == 2) {\n\t\t\tfor (i = 1; card[i] < 2; i++);\n\t\t\tfor (j = i + 1; j < MAX; j++) {\n\t\t\t\tif (card[j] == 2) {\n\t\t\t\t\tputs(\"two pair\");\n\t\t\t\t\tgoto DONE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tputs(\"one pair\");\n\t\t\tgoto DONE;\n\t\t}\n\t\tputs(\"null\");\n\tDONE:;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n\tint hand[5][2],p,a,b,f;\n\tfor(;;){\n\t\tif(scanf(\"%d,%d,%d,%d,%d\",&hand[0][0],&hand[1][0],&hand[2][0],&hand[3][0],&hand[4][0]) == EOF){break;}\n\t\tp = 0;\n\t\tfor(a=0;a<5;a++){hand[a][1] = 1;}\n\t\tfor(a=0;a<5;a++){\n\t\t\tif(hand[a][1] == 1){\n\t\t\t\tf = 0;\n\t\t\t\thand[a][1] = 0;\n\t\t\t\tfor(b=a;b<5;b++){\n\t\t\t\t\tif(hand[a][0] == hand[b][0] && hand[b][1] == 1){\n\t\t\t\t\t\tf++;\n\t\t\t\t\t\thand[b][1] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(f == 1){p+=2;}\n\t\t\t\tif(f == 2){p+=3;}\n\t\t\t\tif(f == 3){p+=10;}\n\t\t\t}\n\t\t}\n\t\tif(p == 0){\n\t\t\tfor(a=0;a<5;a++){\n\t\t\t\tfor(b=0;b<4;b++){\n\t\t\t\t\tif(hand[b][0]>hand[b+1][0]){\n\t\t\t\t\t\tf = hand[b][0];\n\t\t\t\t\t\thand[b][0] = hand[b+1][0];\n\t\t\t\t\t\thand[b+1][0] = f;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(a=0;a<4;a++){\n\t\t\t\tif(hand[a][0]+1 != hand[a+1][0]){break;}\n\t\t\t}\n\t\t\tif(a == 4){p = 1;}\n\t\t}\n\t\tif(p == 0){printf(\"null\\n\");}\n\t\telse if(p == 1){printf(\"straight\\n\");}\n\t\telse if(p == 2){printf(\"one pair\\n\");}\n\t\telse if(p == 3){printf(\"three card\\n\");}\n\t\telse if(p == 4){printf(\"two pair\\n\");}\n\t\telse if(p == 5){printf(\"full house\\n\");}\n\t\telse if(p == 10){printf(\"four card\\n\");}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0, j= 0, m = 0;\n        int count = 0;\n        int t = 0;\n        int memo = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) !=EOF)\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                /*\n                for(i = 0 ;i < P; i++)\n                {\n                        printf(\"%d\\n\",card[i]);\n                }*/\n\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i+1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        memo = card[i];\n                                        count++;\n                                }\n                        }\n                }\n/*----------------------------------------------------------*/\n                if(count == 0)\n                {\n                        for(i = 0 ;i < P; i++)\n                        {\n                                c[i] = card[i] + i;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if(t == 4||\n                        (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two paor\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                count = 0;\n\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a,b,c[5],d=0,e,f=0,g,h=0,i,j,l=0;\n  int k[2]={1};\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    for(a=0;a<5;a++){\n      for(b=4;b>0;b--){\n\tif(c[b]<c[b-1]){\n\t  e=c[b];\n\t  c[b]=c[b-1];\n\t  c[b-1]=e;\n\t}\n      }\n    }\n    for(a=0;a<5;a++){\n      for(b=4;b>0;b--){\n\tif(c[b]==c[b-1]){\n\t  d=1;\n\t  break;\n\t}\n      }\n      if(d==1)break;\n    }\n    switch(d){\n    case 0:\n      for(a=1;a<5;a++){\n\tif(c[0]==1){\n\t  l=1;\n\t  for(b=2;b<5;b++){\n\t    if(c[b]-1!=c[b-1]||(c[4]!=13&&c[1]!=10)){\n\t      f=1;\n\t      break;\n\t    }\n\t  }\n\t}\n\tif(c[a]-1!=c[a-1]&&l!=1){\n\t  f=1;\n\t  break;\n\t}\n      }\n      if(f==1){\n\tprintf(\"null\\n\");\n      }\n      else{\n\tprintf(\"straight\\n\");\n      }\n      break;\n    default:\n      for(a=0;a<4;a++){\n\tif(c[a]==c[a+1]){\n\t  k[h]=k[h]+1;\n\t}\n\tif(k[h]>1&&c[a]!=c[a+1]){\n\t  h=1;\n\t}\n      }\n      if(k[0]==4){\n\tprintf(\"four card\\n\");\n      }\n      else if(k[0]==3||k[1]==3){\n\tif((k[0]==2&&k[1]==3)||(k[0]==3&&k[1]==2)){\n\t  printf(\"full house\\n\");\n\t}\n\telse{\n\t  printf(\"three card\\n\");\n\t}\n      }\n      else if(k[0]==2&&k[1]==2){\n\tprintf(\"two pair\\n\");\n      }\n      else if(k[0]==2||k[1]==2){\n\tprintf(\"one pair\\n\");\n      }\n      break;\n    }\n    d=0;\n    h=0;\n    f=0;\n    l=0;\n    k[0]=1;\n    k[1]=1;\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n    int c[5];\n    while(scanf(\"%d\",&c[0])!=EOF){\n        int i,j,work,count,flag;\n        //↓昇順に並べ替える↓\n        for(i=1;i<5;i++)scanf(\",%d\",&c[i]);\n        for(i=0;i<4;i++){\n            for(j=i+1;j<5;j++){\n                if(c[i]>c[j]){\n                    work=c[i];\n                    c[i]=c[j];\n                    c[j]=work;\n                }\n            }\n        }\n        //↓４カードの判定↓\n        (c[0]==c[1])?i=0:i=1;\n        count=0;\n        for(j=1;j<4;j++){\n            if(c[i]==c[i+j])count++;\n        }\n        if(count==3){\n            puts(\"four card\");\n            continue;\n        }\n        //↓フルハウスの判定↓\n        count=0;\n        if(c[0]==c[1])count++;\n        if(c[0]==c[2])count++;\n        for(i=count+1;i<4;i++){\n            if(c[i]==c[i+1])count++;\n        }\n        if(count==3){\n            puts(\"full house\");\n            continue;\n        }\n\n        //↓ストレートの判定↓\n        count=flag=0;\n        if(c[0]==1 &&c[1]==10){\n            flag=1;\n            c[0]=9;\n        }\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1]-1)count++;\n        }\n        if(count==4){\n            puts(\"straight\");\n            continue;\n        }\n        if(flag==1)c[0]=1;\n        //↓３カードの判定↓\n        count=flag=0;\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1])count++;\n            else count=0;\n            if(count==2){\n                puts(\"three card\");\n                flag=1;\n            }\n        }\n        if(flag==1)continue;\n        //↓２ペア or １ペア　or 豚の判定↓\n        count=0;\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1])count++;\n        }\n        switch(count){\n            case 2:puts(\"two pair\");\n                    break;\n            case 1:puts(\"one pair\");\n                    break;\n            default:puts(\"null\");\n        }\n\n\n\n\n\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\nint main(){\n   int a[5],b[13];\n   int i,j;\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(i=0;i<13;i++){b[i]=0;}\n      for(i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(i=0;i<13;i++){\n         for(j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n     \n   }\n   return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint card[5];\n\tint i,j;\n\tint temp;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])!=EOF){\n\t\n\tfor(i=0;i<4;i++){\n\t\tfor(j=4;j>i;j--){\n\t\t\tif(card[j-1]>card[j]){\n\t\t\t\ttemp=card[j];\n\t\t\t\tcard[j]=card[j-1];\n\t\t\t\tcard[j-1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(card[0]==card[3]||card[1]==card[4]){\n\t\tprintf(\"four card\\n\");\n\t}\n\telse if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"full house\\n\");\n\t}\n\telse if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]){\n\t\tprintf(\"three card\\n\");\n\t}\n\telse if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"two pair\\n\");\n\t}\n\telse if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\t\tprintf(\"one pair\\n\");\n\t}\n\telse if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)){\n\t\tprintf(\"straight\\n\");\n\t}\n\telse{\n\t\tprintf(\"null\\n\");\n\t}\n\t\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint b[5],c[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};\n\tint i,j,temp,count[14],k;\n\n\tprintf(\"a,b,c,d,e\\n\");\n\tscanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4]);\n\n\n/*sort*/\n\tfor (i = 0; i < 5; i++) \n\t{\n        \tfor (j = 4; j > i; j--) \n\t\t{\n            \t\tif (b[j - 1] > b[j])\n\t\t\t{ \n            \t    \t\ttemp = b[j];\n                \t\tb[j] = b[j - 1];\n                \t\tb[j - 1]= temp;\n            \t\t}\n        \t}\t\n\t}\n\n/*count*/\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tcount[i] = 0;\n\n\t\tfor(j=0;j<5;j++)\n\t\t{\n\t\t\tif(i==b[j])\n\t\t\t{\n\t\t\t\tcount[i]+=1;\n\t\t\t}\n\t\t}\n\t}\n\n/*4,full*/\n\tfor(i=1;i<14;i++)\n\t{\t\t\t\n\t\tif(count[i]==4)\n\t\t{\n\t\t\tprintf(\"four card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\n\n\t\tif(count[i]==3)\n\t\t{\n\t\t\t\tfor(k=1;k<14;k++)\n\t\t\t\t{\n\t\t\t\t\tif(count[k]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(count[k]==3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n/*straight*/\n\tif(  (b[0]==1&&b[1]==10&&b[2]==11&&b[3]==12&&b[4]==13)\n\t   ||(b[1]==b[0]+1&&b[2]==b[0]+2&&b[3]==b[0]+3&&b[4]==b[0]+4)\t)\n\t{\n\t\tprintf(\"straigh\\n\");\n\t\treturn 0;\n\t}\n/*2*/\t\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tif(count[i]==3)\n\t\t{\n\t\t\tprintf(\"three card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(k!=i&&count[k]==2)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tprintf(\"one pair\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"null\\n\");\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid bubble(int a[5]){\n    int i,j,tmp;\n    \n    for(i=0;i<4;i++){\n        for(j=0;j<4-i;j++){\n            if(a[j]>a[j+1]){\n                tmp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=tmp;\n            }\n        }\n    }\n}\n\nint CheckFour(const int a[5]){\n    if(a[0]==a[3] || a[1]==a[4]){\n        return 1;\n    }\n    return 0;\n}\n\n\nint CheckThree(const int a[5]){\n    if(a[0]==a[2] || a[1]==a[3] || a[2]==a[4]){\n        return 1;\n    }\n    return 0;\n}\n\n//int CheckThree(const int a[5]){\n//    if(((a[0]==a[2])&&(a[2]!=a[3])) || ((a[1]==a[3])&&( (a[0]!=a[1])||(a[3]!=a[4]) )) || ((a[2]==a[4])&&(a[1]!=a[2]))){\n//        \n//    \n//}\n\nint CheckPair(const int a[5]){\n    int i,cnt=0;\n    \n    for(i=0;i<4;i++){\n        if(a[i]==a[i+1]){\n            cnt++;\n        }\n    }\n    return (cnt);\n}\n\nint CheckStraight(const int a[5]){\n    int i;\n    \n    if(a[0]==1){\n        for(i=1;i<4;i++){\n            if(a[i+1]!=a[i]+1)break;\n            if(i==3 && a[i+1]==a[i]+1) return 1;\n        }\n    }\n    //for(i=0;i<5;i++){\n    //    b[i]=a[i];\n    //    if(b[i]>=10)b[i]-=13;\n    //}\n    //bubble(b);\n    \n    for(i=0;i<4;i++){\n        if(a[i+1]!=a[i]+1)break;\n        if(i==3 && a[i+1]==a[i]+1) return 1;\n    }\n    return 0;\n}\n\n\n\nint main(void){\n    int i=0,a[5]={};\n    \n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n        bubble(a);\n        printf(\"%d\\n\",i++);\n        if(CheckFour(a))puts(\"Four Card\");\n        else if(CheckThree(a)){\n            if(CheckPair(a)==3)puts(\"Full House\");\n            else if(CheckPair(a)==2)puts(\"Three Card\");\n        }\n        else if(CheckPair(a)==2)puts(\"Two Pair\");\n        else if(CheckPair(a)==1)puts(\"One Pair\");\n        else if(CheckStraight(a))puts(\"Straight\");\n        else puts(\"Null\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid judge(int *);\n\nint main(void)\n{\n    int k[5];\n    int i;\n\n    while (scanf(\"%d\", &k[0]) != EOF)\n    {\n        for (i = 1; i < 5; i++){\n            scanf(\",%d\", &k[i]);\n        }\n        judge(k);\n\n    }\n    return (0);\n}\nvoid judge(int *k)\n{\n    int i,j;\n    int x;\n    int count;\n    int onepair;\n    int fourcard;\n    int threecard;\n    int temp;\n    int leach;\n\n    onepair = 0;\n    fourcard = 0;\n    threecard = 0;\n    \n    for (i = 0; i < 5; i++){\n        count = 0;\n        for (j = i + 1; j < 5; j++){\n            if(k[i] == k[j] && i != j){\n                count++;\n                //printf(\"<%d>\", count);\n            }\n        }\n        if (count == 1){ //k[i]と同じ数字が１枚あるとき\n            onepair++;\n            //printf(\"one%d\\n\", onepair);\n        }else if (count == 2){ //k[i]と同じ数字が２枚ある時\n            threecard++;\n            //printf(\"three%d\", threecard);\n        }else if (count == 3){ //k[i]と同じ数字が3枚あるとき\n            fourcard++;\n        }\n    }\n    /*カードを小さい順に並べ替える*/\n    for (i = 0; i < 5; i++){\n        for (j = 4; j > i; j--){\n            if (k[j] < k[j -1]){\n                temp = k[j];\n                k[j] = k[j - 1];\n                k[j - 1] = temp;\n            }\n        }\n        //printf(\"<%d>\",k[i]);\n    }\n\n    leach = 0;\n    for (i = 0; i < 5; i++){\n        if (k[i] + 1 == k[i + 1]){\n            leach++;\n            //printf(\"%d %d\", leach,k[i]);\n        }\n    }\n    \n    if ((k[0] = 1 && k[1] == 10 && k[2] == 11 && k[3] == 12 && k[4] == 13) || leach == 4 && onepair == 0){\n        printf(\"straight\\n\");\n    }else if (threecard == 1 && onepair == 2){\n        printf(\"full house\\n\");\n    }else if (fourcard == 1 && onepair > 0){\n        printf(\"four card\\n\");\n    }else if(threecard == 1 && onepair > 0){\n        printf(\"three card\\n\");\n    }else if (onepair == 2){\n        printf(\"two pair\\n\");\n    }else if (onepair == 1){\n        printf(\"one pair\\n\");\n    }else{\n        printf(\"null\\n\");\n    }\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tsort(card);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[0] + count[1];i < 5;i++){\n\t\t\t\tif(card[count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[0] + count[1] + count[2] - 1;i < 5;i++){\n\t\t\t\t\tif(card[count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsort2(count);\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++)b[i]=0;\n      for(int i=0;i<13;i++) b[a[i]-1]++;\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<13-4;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\nint main(){\n   int a[5],b[13];\n   int i,j;\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(i=0;i<13;i++){b[i]=0;}\n      for(i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(i=0;i<13;i++){\n         for(j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n      return 0;\n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar judge(int hand[5]);\nvoid sort(int *hand);\n\nint main(void)\n{\n\tint hand[5];\n\tchar rank;\n\tscanf(\"%d,%d,%d,%d,%d\", &hand[0], &hand[1], &hand[2]\n\t\t\t\t\t\t\t  , &hand[3], &hand[4]);\n\t\n\tsort(hand);\n\trank = judge(hand);\n\t\n\tswitch (rank){\n\t\t\n\t\tcase ('S'):\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('A'):\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('B'):\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('C'):\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('D'):\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('E'):\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('F'):\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\t}\n\t\n\treturn (0);\n}\n\nvoid sort(int *hand)\n{\n\tint i, j;\n\tint tmp;\n\tfor (i = 0; i < 5; i++){\n\t\tfor (j = 0; j < 5; j++){\n\t\t\tif (hand[i] < hand[j]){\n\t\t\t\ttmp = hand[i];\n\t\t\t\thand[i] = hand[j];\n\t\t\t\thand[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < 5; i++){\n\t\tprintf(\"%d\\n\", hand[i]);\n\t}\n}\n\nchar judge(int hand[5])\n{\n\tint pair = 0;\n\tint card_3 = 0, card_4 = 0;\n\tchar rank;\n\tint straight = 0;\n\tint i;\n\tint sum = 0;\n\t\n\t\n\tfor (i = 0; i < 5; i++){\n\t\tsum += hand[i];\n\t\tif (hand[i] == hand[i + 1]){\n\t\t\tpair++;\n\t\t\tif (hand[i] == hand[i + 2]){\n\t\t\t\tpair--;\n\t\t\t\tcard_3++;\n\t\t\t\tif (hand[i] == hand[i + 3]){\n\t\t\t\t\tcard_3--;\n\t\t\t\t\tcard_4++;\n\t\t\t\t\ti++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hand[i] + 1 == hand[i + 1]){\n\t\t\tstraight++;\n\t\t}\n\t}\n\tprintf(\"pair = %d\\n\", pair);\n\tprintf(\"card_3 = %d\\n\", card_3);\n\tprintf(\"card_4 = %d\\n\", card_4);\n\tprintf(\"straight = %d\\n\", straight);\n\t\n\tif (card_4 == 1){\n\t\trank = 'S';\n\t}\n\telse if (card_3 == 1 && pair == 1){\n\t\trank = 'A';\n\t}\n\telse if (straight == 4){\n\t\trank = 'B';\n\t}\n\telse if (straight == 3 && sum == 47){\n\t\trank = 'B';\n\t}\n\t\n\telse if (card_3 == 1){\n\t\trank = 'C';\n\t}\n\telse if (pair == 2){\n\t\trank = 'D';\n\t}\n\telse if (pair == 1){\n\t\trank = 'E';\n\t}\n\telse {\n\t\trank = 'F';\n\t}\n\t\n\treturn (rank);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare_int(const void *a, const void *b){\n    return *(int*)a - *(int*)b;\n}\n\n\nint main(int argc,char* argv[]){\n  int first_card,is_st;\n  int i;\n  int max,max2,max3,max4;\n  int cards[5];\n  int hands[13];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) != EOF){\n    max = max2 = 0;is_st = 1;\n    qsort(cards, 5, sizeof(int), compare_int);\n    \n    for(i = 0;i < 13;i++){\n      hands[i] = 0;\n    }\n    \n    for(i = 0;i < 5;i++){\n      hands[cards[i] - 1]++;\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max <= hands[i]){\n\tmax = hands[i];\n      }\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max2 <= hands[i] && max > hands[i]){\n\tmax2 = hands[i];\n      }\n    }\n    \n    if(max == 4){\n      printf(\"four card\\n\");\n      continue;\n    }\n\n    if(max == 3 && max2 == 2){\n      printf(\"full house\\n\");\n      continue;\n    }\n    \n    first_card = cards[0];\n    for(i = 1;i < 5;i++){\n      if(first_card + 1 != cards[i]){is_st = 0;break;}else{\n\tfirst_card++;\n      }\n    }\n\n    if(is_st || (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)){\n      printf(\"straight\\n\");\n      continue;\n    }\n    \n    if(max == 3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max == 2 && max2 == 2){\n      printf(\"two pair\\n\");\n      continue;\n    }\n\n    if(max == 2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n\n    printf(\"null\\n\");\n    \n  }\n  \n  return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++){b[i]=0;}\n      for(int i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\tint tr[5],p;\n\tint i,j,min,sum,sum2;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",tr,tr+1,tr+2,tr+3,tr+4)!= EOF)\n\t{\n\t\tp=0;\n\t\tmin=13;\n\t\tsum=0;\n\n\t\tfor(i=0;i<4;i++)\n\t\t{\n\t\t\tfor(j=i+1;j<5;j++)\n\t\t\t{\n\t\t\t\tif(tr[i]==tr[j])\n\t\t\t\t\tp++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tif(min>tr[i])\n\t\t\t{\n\t\t\t\tmin=tr[i];\n\t\t\t}\n\t\t\tsum+=tr[i];\n\t\t}\n\t\tif(p)\n\t\t{\n\t\t\tswitch(p)\n\t\t\t{\n\t\t\tcase 1:\n\t\t\t\tprintf(\"one pair\\n\");break;\n\t\t\tcase 2:\n\t\t\t\tprintf(\"two pair\\n\");break;\n\t\t\tcase 3:\n\t\t\t\tprintf(\"three card\\n\");break;\n\t\t\tcase 4:\n\t\t\t\tprintf(\"full house\\n\");break;\n\t\t\tcase 6:\n\t\t\t\tprintf(\"four card\\n\");break;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum2=(2*min+4)*5/2;\n\t\t\tif(sum==sum2)\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\telse if(min==1&&sum==47)\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "main(){\n  int a[6],i,j;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=-1){\n    for(i=0;i<5-1;i++)\n      for(j=i+1;j<5;j++)\n\tif(a[i]>a[j]){\n\t  a[5]=a[i];\n\t  a[i]=a[j];\n\t  a[j]=a[5];\n\t}\n    if((a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3])||(a[1]==a[2]&&a[2]==a[3]&&a[3]==a[4]))\n      puts(\"four cards\");\n    else if((a[0]==a[1]&&a[1]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[3]&&a[3]==a[4]))\n      puts(\"full house\");\n    else if((a[1]==a[0]+1&&a[2]==a[1]+1&&a[3]==a[2]+1&&a[4]==a[3]+1)||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13))\n      puts(\"straight\");\n    else if((a[0]==a[1]&&a[1]==a[2])||(a[1]==a[2]&&a[2]==a[3])||(a[2]==a[3]&&a[3]==a[4]))\n      puts(\"three card\");\n    else if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4]))\n      puts(\"two pair\");\n    else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4])\n      puts(\"one pair\");\n    else\n      puts(\"null\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare_int(const void *a, const void *b){\n    return *(int*)a - *(int*)b;\n}\n\n\nint main(int argc,char* argv[]){\n  int first_card,is_st;\n  int i;\n  int max,max2,max3,max4;\n  int cards[5];\n  int hands[13];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) != EOF){\n    max = max2 = 0;is_st = 1;\n    qsort(cards, 5, sizeof(int), compare_int);\n    \n    for(i = 0;i < 13;i++){\n      hands[i] = 0;\n    }\n    \n    for(i = 0;i < 5;i++){\n      hands[cards[i] - 1]++;\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max <= hands[i]){\n\tmax2 = ma;\n\tmax = hands[i];\n      }else if(max2 <= hands[i]){\n\tmax2 = hands[i];\n      }\n    }\n    \n    if(max == 4){\n      printf(\"four card\\n\");\n      continue;\n    }\n\n    if(max == 3 && max2 == 2){\n      printf(\"full house\\n\");\n      continue;\n    }\n    \n    first_card = cards[0];\n    for(i = 1;i < 5;i++){\n      if(first_card + 1 != cards[i]){is_st = 0;break;}else{\n\tfirst_card++;\n      }\n    }\n\n    if(is_st || (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)){\n      printf(\"straight\\n\");\n      continue;\n    }\n    \n    if(max == 3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max == 2 && max2 == 2){\n      printf(\"two pair\\n\");\n      continue;\n    }\n\n    if(max == 2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n\n    printf(\"null\\n\");\n    \n  }\n  \n  return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0;\n        int j = 0;\n        int m = 0;\n        int count = 0;\n        int t = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF)\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i + 1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n\n                if(count == 0)\n                {\n                        for(i = 0 ;i < P; i++)\n                        {\n                                c[i] = card[i] + i;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if((t == 4) || (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two paor\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                m = 0;\n                count = 0;\n                for(i = 0; i < P; i++)\n                {\n                           c[i] = 0;\n                        card[i] = 0;\n                }\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar judge(int hand[5]);\nvoid sort(int *hand);\n\nint main(void)\n{\n\tint hand[5];\n\tchar rank;\n\tchar OF;\n\twhile (scanf(\" %c,\", &OF) != EOF){\n\t\thand[0] = OF - '0';\n\t\t\n\tscanf(\"%d,%d,%d,%d\", &hand[1], &hand[2]\n\t\t\t\t\t\t\t  , &hand[3], &hand[4]);\n\t\n\tsort(hand);\n\trank = judge(hand);\n\t\n\tswitch (rank){\n\t\t\n\t\tcase ('S'):\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('A'):\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('B'):\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('C'):\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('D'):\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('E'):\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('F'):\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\t}\n\t}\n\treturn (0);\n}\n\nvoid sort(int *hand)\n{\n\tint i, j;\n\tint tmp;\n\tfor (i = 0; i < 5; i++){\n\t\tfor (j = 0; j < 5; j++){\n\t\t\tif (hand[i] < hand[j]){\n\t\t\t\ttmp = hand[i];\n\t\t\t\thand[i] = hand[j];\n\t\t\t\thand[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nchar judge(int hand[5])\n{\n\tint pair = 0;\n\tint card_3 = 0, card_4 = 0;\n\tchar rank;\n\tint straight = 0;\n\tint i;\n\tint sum = 0;\n\t\n\t\n\tfor (i = 0; i < 5; i++){\n\t\tsum += hand[i];\n\t\tif (hand[i] == hand[i + 1]){\n\t\t\tpair++;\n\t\t\tif (hand[i] == hand[i + 2]){\n\t\t\t\tpair--;\n\t\t\t\tcard_3++;\n\t\t\t\tif (hand[i] == hand[i + 3]){\n\t\t\t\t\tcard_3--;\n\t\t\t\t\tcard_4++;\n\t\t\t\t\ti++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hand[i] + 1 == hand[i + 1]){\n\t\t\tstraight++;\n\t\t}\n\t}\n\t\n\tif (card_4 == 1){\n\t\trank = 'S';\n\t}\n\telse if (card_3 == 1 && pair == 1){\n\t\trank = 'A';\n\t}\n\telse if (straight == 4){\n\t\trank = 'B';\n\t}\n\telse if (straight == 3 && sum == 47){\n\t\trank = 'B';\n\t}\n\t\n\telse if (card_3 == 1){\n\t\trank = 'C';\n\t}\n\telse if (pair == 2){\n\t\trank = 'D';\n\t}\n\telse if (pair == 1){\n\t\trank = 'E';\n\t}\n\telse {\n\t\trank = 'F';\n\t}\n\t\n\treturn (rank);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n \n#define MAX 14\n \nint main()\n{\n    int card[MAX+3];\n    int max;\n    int i, j, d[5];\n     \n    while (scanf(\"%d,%d,%d,%d,%d\", &d[0], &d[1], &d[2], &d[3], &d[4]) == 5) {\n        for (i = 1; i <= MAX; i++) card[i] = 0;\n        max = 0;\n        for (i = 0; i < 5; i++) {\n            if (++card[d[i]] > max) max = card[d[i]];\n            if (d[i] == 1) card[14] = 1;\n        }\n        if (max == 4) {\n            puts(\"four card\");\n            goto DONE;\n        }\n        if (max == 3) {\n            for (i = 1; i < MAX; i++) {\n                if (card[i] == 2) {\n                    puts(\"full house\");\n                    goto DONE;\n                }\n            }\n        }\n        if (max == 1) {\n            for (i = 1; i <= 10; i++) {\n                for (j = 0; ; j++) {\n                    if (j >= 5) {\n                        puts(\"straight\");\n                        goto DONE;\n                    }\n                    if (card[i + j] != 1) break;\n                }\n            }\n        }\n        if (max == 3) {\n            puts(\"three card\");\n            goto DONE;\n        }\n        if (max == 2) {\n            for (i = 1; card[i] < 2; i++);\n            for (j = i + 1; j < MAX; j++) {\n                if (card[j] == 2) {\n                    puts(\"two pair\");\n                    goto DONE;\n                }\n            }\n            puts(\"one pair\");\n            goto DONE;\n        }\n        puts(\"null\");\n    DONE:;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint b[5],c[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};\n\tint i,j,temp,count[14],k;\n\n\tscanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4]);\n\n\n/*sort*/\n\tfor (i = 0; i < 5; i++) \n\t{\n        \tfor (j = 4; j > i; j--) \n\t\t{\n            \t\tif (b[j - 1] > b[j])\n\t\t\t{ \n            \t    \t\ttemp = b[j];\n                \t\tb[j] = b[j - 1];\n                \t\tb[j - 1]= temp;\n            \t\t}\n        \t}\t\n\t}\n\n/*count*/\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tcount[i] = 0;\n\n\t\tfor(j=0;j<5;j++)\n\t\t{\n\t\t\tif(i==b[j])\n\t\t\t{\n\t\t\t\tcount[i]+=1;\n\t\t\t}\n\t\t}\n\t}\n\n/*4,full*/\n\tfor(i=1;i<14;i++)\n\t{\t\t\t\n\t\tif(count[i]==4)\n\t\t{\n\t\t\tprintf(\"four card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\n\n\t\tif(count[i]==3)\n\t\t{\n\t\t\t\tfor(k=1;k<14;k++)\n\t\t\t\t{\n\t\t\t\t\tif(count[k]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(count[k]==3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n/*straight*/\n\tif(  (b[0]==1&&b[1]==10&&b[2]==11&&b[3]==12&&b[4]==13)\n\t   ||(b[1]==b[0]+1&&b[2]==b[0]+2&&b[3]==b[0]+3&&b[4]==b[0]+4)\t)\n\t{\n\t\tprintf(\"straigh\\n\");\n\t\treturn 0;\n\t}\n/*2*/\t\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tif(count[i]==3)\n\t\t{\n\t\t\tprintf(\"three card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(k!=i&&count[k]==2)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tprintf(\"one pair\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"null\\n\");\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\nint compare_int(const void *a,const void *b){\n  return *(int*)a-*(int*)b;\n}\nint main(){\n  int a[5];\n  while( scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n    qsort(a,5,sizeof(int),compare_int);\n    if((a[0]==a[1]&& a[1]==a[2] && a[2]==a[3]) || (a[1]==a[2] && a[2]==a[3] && a[3]==a[4]))printf(\"four card\\n\");\n    else if(a[0]==a[1] && a[1]==a[2]){\n      if(a[3]==a[4])printf(\"full house\\n\");\n      else printf(\"three card\\n\");\n    }\n    else if(a[1]==a[2] && a[2]==a[3])printf(\"three card\\n\");\n    else if(a[2]==a[3] && a[3]==a[4]){\n      if(a[0]==a[1])printf(\"full house\\n\");\n      else printf(\"three card\\n\");\n    }\n    else if(a[0]==a[1]){\n      if(a[2]==a[3] || a[3]==a[4])printf(\"two pair\\n\");\n      else printf(\"one pair\\n\");\n    }\n    else if(a[1]==a[2]){\n      if(a[3]==a[4])printf(\"two pair\\n\");\n      else printf(\"one pair\\n\");\n    }\n    else if(a[2]==a[3] ||a[3]==a[4])printf(\"one pair\\n\");\n    else {\n      if(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)printf(\"straight\\n\");\n      else if(a[0]+1==a[1] && a[1]+1==a[2] && a[2]+1==a[3] && a[3]+1==a[4])printf(\"straight\\n\");\n      else  printf(\"null\\n\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int count = 0;\n        int t = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while( scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF )\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i + 1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n\n                if(count == 0)\n                {\n                        for(k = 0 ;k < P; k++)\n                        {\n                                c[k] = card[k] + k;\n                        }\n                        for(k = 1 ;k < P; k++)\n                        {\n                                if(c[0] == c[k])\n                                {\n                                        t++;\n                                }\n                        }\n                        if((t == 4) || (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two pair\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                m = 0;\n                count = 0;\n                for(i = 0; i < P; i++)\n                {\n                           c[i] = 0;\n                        card[i] = 0;\n                }\n                i = 0;\n                j = 0;\n                k = 0;\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint b[5];\n\tint i,j,temp,count[14],k;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4])!= EOF)\n{\n\n/*sort*/\n\tfor (i = 0; i < 5; i++) \n\t{\n        \tfor (j = 4; j > i; j--) \n\t\t{\n            \t\tif (b[j - 1] > b[j])\n\t\t\t{ \n            \t    \t\ttemp = b[j];\n                \t\tb[j] = b[j - 1];\n                \t\tb[j - 1]= temp;\n            \t\t}\n        \t}\t\n\t}\n\n/*count*/\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tcount[i] = 0;\n\n\t\tfor(j=0;j<5;j++)\n\t\t{\n\t\t\tif(i==b[j])\n\t\t\t{\n\t\t\t\tcount[i]+=1;\n\t\t\t}\n\t\t}\n\t}\n\n/*4,full*/\n\tfor(i=1;i<14;i++)\n\t{\t\t\t\n\t\tif(count[i]==4)\n\t\t{\n\t\t\tprintf(\"four card\");\n\t\t\treturn 0;\n\t\t}\n\t\n\n\t\tif(count[i]==3)\n\t\t{\n\t\t\t\tfor(k=1;k<14;k++)\n\t\t\t\t{\n\t\t\t\t\tif(count[k]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(count[k]==3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"full house\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n/*straight*/\n\tif(  (b[0]==1&&b[1]==10&&b[2]==11&&b[3]==12&&b[4]==13)\n\t   ||(b[1]==b[0]+1&&b[2]==b[0]+2&&b[3]==b[0]+3&&b[4]==b[0]+4)\t)\n\t{\n\t\tprintf(\"straigh\");\n\t\treturn 0;\n\t}\n/*2*/\t\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tif(count[i]==3)\n\t\t{\n\t\t\tprintf(\"three card\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(k!=i&&count[k]==2)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"two pair\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tprintf(\"one pair\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"null\");\n\treturn 0;\n}\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(void){\n\tint card[5],ans,n,i,l,t,f;\n\t\n\twhile(scanf(\" %d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])!=EOF){\n\t\t\n\t\t//昇順にソート\n\t\tfor(i=0;i<4;i++){\n\t\t\tfor(l=4;l>i;l--){\n\t\t\t\tif(card[l-1]>card[l]){\n\t\t\t\t\tt=card[l-1];\n\t\t\t\t\tcard[l-1]=card[l];\n\t\t\t\t\tcard[l]=t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//ストレート判定\n\t\tfor(f=0,i=4;i>0;i--){\n\t\t\tif(i==1 && card[1]==10 && card[0]==1)f=1;\n\t\t\tif(card[i]!=card[i-1]+1)break;\n\t\t\tif(i==1)f=1;\n\t\t}\n\t\t\n\t\t//スリーペア\n\t\tif(f==0){\n\t\t\tfor(i=0;i<3;i++){\n\t\t\t\tif(card[i]==card[i+2])f=3;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//ワンペア判定\n\t\tif(f==0){\n\t\t\tfor(i=0;i<4;i++){\n\t\t\t\tif(card[i]==card[i+1])f=2;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(card[0]==card[3] || card[1]==card[4]){\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if((card[0]==card[1] && card[2]==card[4]) || card[0]==card[2] && card[3]==card[4]){\n\t\t\tprintf(\"full house\\n\");\n\t\t}\n\t\telse if(f==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse if(f==3){\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if((card[0]==card[1] && (card[2]==card[3] || card[3]==card[4])) || (card[1]==card[2] && card[3]==card[4])){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\telse if(f==2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid bubble(int a[5]){\n    int i,j,tmp;\n    \n    for(i=0;i<4;i++){\n        for(j=0;j<4-i;j++){\n            if(a[j]>a[j+1]){\n                tmp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=tmp;\n            }\n        }\n    }\n}\n\nint CheckFour(const int a[5]){\n    if(a[0]==a[3] || a[1]==a[4]){\n        return 1;\n    }\n    return 0;\n}\n\nint CheckThree(const int a[5]){\n    if(a[0]==a[2] || a[1]==a[3] || a[2]==a[4]){\n        return 1;\n    }\n    return 0;\n}\n\n//int CheckThree(const int a[5]){\n//    if(((a[0]==a[2])&&(a[2]!=a[3])) || ((a[1]==a[3])&&( (a[0]!=a[1])||(a[3]!=a[4]) )) || ((a[2]==a[4])&&(a[1]!=a[2]))){\n//        \n//    \n//}\n\nint CheckPair(const int a[5]){\n    int i,cnt=0;\n    \n    for(i=0;i<4;i++){\n        if(a[i]==a[i+1]){\n            cnt++;\n        }\n    }\n    return (cnt);\n}\n\nint CheckStraight(const int a[5]){\n    int i;\n    \n    if(a[0]==1){\n        for(i=1;i<4;i++){\n            if(a[i+1]!=a[i]+1)break;\n            if(i==3 && a[i+1]==a[i]+1) return 1;\n        }\n    }\n    //for(i=0;i<5;i++){\n    //    b[i]=a[i];\n    //    if(b[i]>=10)b[i]-=13;\n    //}\n    //bubble(b);\n    \n    for(i=0;i<4;i++){\n        if(a[i+1]!=a[i]+1)break;\n        if(i==3 && a[i+1]==a[i]+1) return 1;\n    }\n    return 0;\n}\n\nint main(void){\n    int a[5]={};\n    \n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n        bubble(a);\n\n        if(CheckFour(a))puts(\"Four Card\");\n        else if(CheckThree(a)){\n            if(CheckPair(a)==3)puts(\"Full House\");\n            else if(CheckPair(a)==2)puts(\"Three Card\");\n        }\n        else if(CheckPair(a)==2)puts(\"Two Pair\");\n        else if(CheckPair(a)==1)puts(\"One Pair\");\n        else if(CheckStraight(a))puts(\"Straight\");\n        else puts(\"Null\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint a[9],i;\n\nint cmp(const void *a,const void *b){\n\treturn *(int *)a - *(int *)b;\n}\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tqsort(a,5,sizeof(int),cmp);\n\t\tif(a[1]==a[2] && a[2]==a[3] && (a[0]==a[1] || a[4]==a[1]))printf(\"four carsd\\n\");\n\t\telse if((a[0]==a[1] && a[2]==a[3] && a[3]==a[4]) || ((a[3]==a[4] && a[0]==a[1] && a[1]==a[2])))printf(\"full house\\n\");\n\t\telse if(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)printf(\"straight\\n\");\n\t\telse if(a[4]==a[3]+1 && a[3]==a[2]+1 && a[2]==a[1]+1 && a[1]==a[0]+1)printf(\"straight\\n\");\n\t\telse if((a[0]==a[1] && a[1]==a[2]) || (a[1]==a[2] && a[2]==a[3]) || (a[3]==a[4] && a[4]==a[5]))printf(\"three cards\\n\");\n\t\telse if((a[0]==a[1] && (a[2]==a[3] || a[3]==a[4])) || (a[1]==a[2] && a[3]==a[4]))printf(\"two pari\\n\");\n\t\telse if(a[0]==a[1] || a[1]==a[2] || a[2]==a[3] || a[3]==a[4])printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n\tint a[5] , i, j;\n\tint max, db, f;\n\t// get the data\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])!=EOF ){\n\t\tint c[13] = {0};\n\t\tint m[5] = {0};\n\t\tf = 0;\n\t\t\n\t\t// make card list\n\t\tfor(i=0; i<5; i++) {\n\t\t\tc[ a[i]-1 ] += 1;\n\t\t}\n\t\t\n\t\t// make the number of card list\n\t\tfor(i=0; i<13; i++) {\n\t\t\tm[ c[i] ] += 1;\n\t\t}\n\t\t\n\t\t// examine the role\n\t\twhile(1){\n\t\t\t// --- four card\n\t\t\tif (m[4]==1) {\n\t\t\t\tprintf(\"four card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- full house\n\t\t\tif ( (m[3]==1)&&(m[2]==1) ) {\n\t\t\t\tprintf(\"full house\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- straight\n\t\t\tfor(i=0; i<9; i++) {\n\t\t\t\tif ( (c[i])&&(c[i+1])&&(c[i+2])&&(c[i+3])&&(c[i+4]) ) {\n\t\t\t\t\tf = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 10 J Q K A\n\t\t\tif ( (c[9])&&(c[10])&&(c[11])&&(c[12])&&(c[0]) ) f = 1;\n\t\t\t\n\t\t\tif (f==1) {\n\t\t\t\tprintf(\"straight\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- three card\n\t\t\tif (m[3]==1) {\n\t\t\t\tprintf(\"three card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- two pair\n\t\t\tif (m[2]==2) {\n\t\t\t\tprintf(\"two pair\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- one pair\n\t\t\tif (m[2]==1) {\n\t\t\t\tprintf(\"one pair\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- none\n\t\t\tprintf(\"null\");\n\t\t\tbreak;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\nint main(void){\n\n  int num[13];\n  int card[5];\n  int i;\n\n  int one, three, straight, four;\n  int count;\n\n  while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])!=EOF){\n    for(i=0; i<13; i++){\n      num[i]=0;\n    }\n\n    for(i=0; i<5; i++){\n      num[card[i]-1]++;\n    }\n    \n\n    one=three=straight=four=0;\n  \n    for(i=0; i<13; i++){\n      if(num[i]==2){\n\tone++;\n      }\n      else if(num[i]==3){\n\tthree++;\n      }\n      else if(num[i]==4){\n\tfour++;\n      }\n    }\n\n    count=0;\n    i=0;\n    while(num[i]!=1){\n      i++;\n    }\n\n\n    count++;\n    for(i=i+1; i<13; i++){\n      if(num[i]!=1){\n\tbreak;\n      }\n      count++;\n    }\n\n    if(count==5){\n      straight++;\n    }\n\n    if(num[9]==1 && num[10]==1 && num[11]==1 && num[12]==1 && num[0]==1){\n      straight++;\n    }\n\n\n    if(four==1){\n      printf(\"four card\\n\");\n    }\n    else if(one==1 && three==1){\n      printf(\"full house\\n\");\n    }\n    else if(straight==1){\n      printf(\"straight\\n\");\n    }\n    else if(three==1){\n      printf(\"three card\\n\");\n    }\n    else if(one==2){\n      printf(\"two pair\\n\");\n    }\n    else if(one==1){\n      printf(\"one pair\\n\");\n    }\n    else{\n      printf(\"null\\n\");\n    }\n\n  }\n\n\n  return(0);\n}\n\n"
  },
  {
    "language": "C",
    "code": "/*\nAizuOnline A0038\nPoker Hand\n\n*/\n#include <stdio.h>\n#include <stdlib.h>\n\nextern int compare_int(const void* , const void* );\n\nmain()\n{ int i,j,cnt;\n  int a[5];\n\n  while(5 == scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]))\n  {      qsort(a,5,sizeof(int),compare_int ); \n\n         cnt = 0;\n         for(i=0;i<4;i++)\n           for(j=i+1;j<5;j++)\n             cnt += (a[i]==a[j])?1:0;\n/*   printf(\"cnt=%d\\n\",cnt); */\n        if(cnt==1)\n          printf(\"one pair\\n\");\n        else if(cnt==2)\n          printf(\"two pair\\n\");\n        else if(cnt==3)\n          printf(\"three card\\n\");\n        else if(cnt==4)\n          printf(\"full house\\n\");\n        else if(cnt==6)\n          printf(\"four card\\n\");\n        else if((a[0]+1 == a[1] &&\n           a[0]+2 == a[2] &&\n           a[0]+3 == a[3] &&\n           a[0]+4 == a[4])||\n           (a[0] == 1 &&\n            a[1] == 10 &&\n            a[2] == 11 &&\n            a[3] == 12 &&\n            a[4] == 13 ))\n          printf(\"straight\\n\");\n        else\n          printf(\"null\\n\");\n  }\n\nreturn(0);\n}\n\nint compare_int(const void* a, const void* b)\n{\n\treturn ( *(int*)a - *(int*)b );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n\tint a[5] , i, j;\n\tint max, db, f;\n\t// get the data\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) ){\n\t\tint c[13] = {0};\n\t\tint m[5] = {0};\n\t\tf = 0;\n\t\t\n\t\t// make card list\n\t\tfor(i=0; i<5; i++) {\n\t\t\tc[ a[i]-1 ] += 1;\n\t\t}\n\t\t\n\t\t// make the number of card list\n\t\tfor(i=0; i<13; i++) {\n\t\t\tm[ c[i] ] += 1;\n\t\t}\n\t\t\n\t\t// examine the role\n\t\twhile(1){\n\t\t\t// --- four card\n\t\t\tif (m[4]==1) {\n\t\t\t\tprintf(\"four card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- full house\n\t\t\tif ( (m[3]==1)&&(m[2]==1) ) {\n\t\t\t\tprintf(\"full house\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- straight\n\t\t\tfor(i=0; i<9; i++) {\n\t\t\t\tif ( (c[i])&&(c[i+1])&&(c[i+2])&&(c[i+3])&&(c[i+4]) ) {\n\t\t\t\t\tf = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 10 J Q K A\n\t\t\tif ( (c[9])&&(c[10])&&(c[11])&&(c[12])&&(c[0]) ) f = 1;\n\t\t\t\n\t\t\tif (f==1) {\n\t\t\t\tprintf(\"straight\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- three card\n\t\t\tif (m[3]==1) {\n\t\t\t\tprintf(\"three card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- two pair\n\t\t\tif (m[2]==2) {\n\t\t\t\tprintf(\"two pair\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- one pair\n\t\t\tif (m[2]==1) {\n\t\t\t\tprintf(\"one pair\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- none\n\t\t\tprintf(\"null\");\n\t\t\tbreak;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint b[5],c[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};\n\tint i,j,temp,count[14],k;\n\n\tscanf(\"%d,%d,%d,%d,%d\",&b[0],&b[1],&b[2],&b[3],&b[4]);\n\n\n/*sort*/\n\tfor (i = 0; i < 5; i++) \n\t{\n        \tfor (j = 4; j > i; j--) \n\t\t{\n            \t\tif (b[j - 1] > b[j])\n\t\t\t{ \n            \t    \t\ttemp = b[j];\n                \t\tb[j] = b[j - 1];\n                \t\tb[j - 1]= temp;\n            \t\t}\n        \t}\t\n\t}\n\n/*count*/\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tcount[i] = 0;\n\n\t\tfor(j=0;j<5;j++)\n\t\t{\n\t\t\tif(i==b[j])\n\t\t\t{\n\t\t\t\tcount[i]+=1;\n\t\t\t}\n\t\t}\n\t}\n\n/*4,full*/\n\tfor(i=1;i<14;i++)\n\t{\t\t\t\n\t\tif(count[i]==4)\n\t\t{\n\t\t\tprintf(\"four card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\n\n\t\tif(count[i]==3)\n\t\t{\n\t\t\t\tfor(k=1;k<14;k++)\n\t\t\t\t{\n\t\t\t\t\tif(count[k]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(count[k]==3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n/*straight*/\n\tif(  (b[0]==1&&b[1]==10&&b[2]==11&&b[3]==12&&b[4]==13)\n\t   ||(b[1]==b[0]+1&&b[2]==b[0]+2&&b[3]==b[0]+3&&b[4]==b[0]+4)\t)\n\t{\n\t\tprintf(\"straigh\\n\");\n\t\treturn 0;\n\t}\n/*2*/\t\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tif(count[i]==3)\n\t\t{\n\t\t\tprintf(\"three card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(k!=i&&count[k]==2)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tprintf(\"one pair\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"null\\n\");\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 0038\n *\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0038\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint diff1_Aas14_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(hand[i]== 1 || hand[j] == 1){\n                if(hand[i]== 1){\n                    if((14 - hand[j]) == 1)\n                        n++;\n                }else{ /*hand[j] == 1*/\n                    if((14 - hand[i]) == 1)\n                        n++;\n                }\n            }else{\n                if(abs(hand[i] -  hand[j]) == 1){\n                    n++;\n                }\n            }\n        }\n    }\n    return n;\n}\n\n\nint diff1_Aas1_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(abs(hand[i] -  hand[j]) == 1){\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\nint eq_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(hand[i] == hand[j]){\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\nint test_fourcard(int* hand){\n    return eq_count(hand) == 6;\n}\n\nint test_fullhouse(int* hand){\n    return eq_count(hand) == 4;\n}\n\nint test_straight(int* hand){\n    return diff1_Aas14_count(hand) == 4 || diff1_Aas1_count(hand) == 4;\n}\n\nint test_threecard(int* hand){\n    return eq_count(hand) == 3;\n}\n\nint test_twopair(int* hand){\n    return eq_count(hand) == 2;\n}\n\nint test_onepair(int* hand){\n    return eq_count(hand) == 1;\n}\n\n\n\nchar* test(int* hand){\n    if(test_fourcard(hand)){\n        return \"four card\";\n    }\n\n    if(test_fullhouse(hand)){\n        return \"full house\";\n    }\n\n    if(test_threecard(hand)){\n        return \"three card\";\n    }\n\n    if(test_twopair(hand)){\n        return \"two pair\";\n    }\n\n    if(test_onepair(hand)){\n        return \"one pair\";\n    }\n\n    if(test_straight(hand)){\n        return \"straight\";\n    }\n    return \"null\";\n}\n\n\nint main(){\n    int hand[5];\n    char* r;\n\n    while(scanf(\"%d,%d,%d,%d,%d\", hand, hand+1, hand+2, hand+3, hand+4) == 5){\n        r = test(hand);\n        printf(\"%s\\n\", r);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint data[5];\n\nvoid sort(int,int);\nvoid change(int,int);\nint pair();\nint three();\nint four();\nint straight();\n\nmain(){\n  int i;\n  \n  while(1){\n    if(scanf(\"%d\", &data[0])==EOF) break;\n    for(i=1;i<5;i++){\n      scanf(\",%d\", &data[i]);\n    }\n    sort(0,4);\n    \n    if(straight()==1) printf(\"straight\\n\");\n    else if(four()==1) printf(\"four card\\n\");\n    else if(pair()==2) printf(\"two pair\\n\");\n    else if(three()==1){\n      if(pair()==1) printf(\"full house\\n\");\n      else printf(\"three card\\n\");\n    }\n    else if(pair()==1) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n  return 0;\n}\n\nvoid sort(int left, int right){\n  int i, j, n;\n\n  i=left;\n  j=right;\n  n=data[(left+right)/2];\n\n  while(1){\n    while(n>data[i]) i++;\n    while(n<data[j]) j--;\n\n    if(i>=j) break;\n\n    change(i,j);\n    i++;\n    j--;\n  }\n\n  if(left<i-1) sort(left,i-1);\n  if(j+1<right) sort(j+1,right);\n}\n\nvoid change(int a, int b){\n  int temp;\n\n  temp=data[a];\n  data[a]=data[b];\n  data[b]=temp;\n}\n\nint pair(){\n  int i, count=0;\n\n  for(i=0;i<4;i++){\n    if(data[i]==data[i+1]){\n      if(i<3){\n\tif(data[i+1]!=data[i+2]) count++;\n      }\n      else count++;\n      i++;\n    }\n  }\n  if(count==1) return 1;\n  else if(count==2) return 2;\n  else return 0;\n}\n\nint three(){\n  int i, count=0;\n\n  for(i=0;i<3;i++){\n    if(data[i]==data[i+1] && data[i+1]==data[i+2]) count++;\n  }\n  return count;\n}\n\nint four(){\n  int i, count=0;\n\n  for(i=0;i<2;i++){\n    if(data[i]==data[i+1] && data[i+1]==data[i+2] && data[i+2]==data[i+3]) count++;\n  }\n  return count;\n}\n\nint straight(){\n  int i;\n\n  if(data[0]==1 && data[1]==10 && data[2]==11 && data[3]==12 && data[4]==13) return 1;\n  for(i=0;i<4;i++){\n    if((data[i+1]-data[i]==1)!=1) return 0;\n  }\n  return 1;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tsort(card);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[0] + count[1] + 1;i < 5;i++){\n\t\t\t\tif(card[count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[0] + count[1] + count[2] + 1;i < 5;i++){\n\t\t\t\t\tif(card[count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsort2(count);\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint max(int x, int y)\n{\n\tif (x > y){\n\t\treturn (x);\n\t}\n\t\n\treturn (y);\n}\n\nvoid swap(int *i, int *j)\n{\n\t*i += *j;\n\t*j = *i - *j;\n\t*i -= *j;\n}\n\nint main(void)\n{\n\tint card[13];\n\tchar str[7][11] = {{\"null\"}, {\"one pair\"}, {\"two pair\"}, {\"three card\"}, \n\t\t\t\t\t{\"staight\"}, {\"full house\"}, {\"four card\"}};\n\tint ans;\n\tint tmp;\n\tint i, j;\n\tchar c[5];\n\tint count;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\tans = 0;\n\t\ttmp = 0;\n\t\tmemset(card, 0, sizeof(card));\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tcard[c[i] - 1]++;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (card[i]){\n\t\t\t\tfor (j = i, count = 0; count < 5; count++, j++){\n\t\t\t\t\tif (!card[j]){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (j == 12 && count == 3){\n\t\t\t\t\t\tj = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (j == 12){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count){\n\t\t\t\ttmp = 4;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 12; i++){\n\t\t\tfor (j = 0; j < 12 - i; j++){\n\t\t\t\tif (card[j] < card[j + 1]){\n\t\t\t\t\tswap(&card[j], &card[j + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (card[0] == 4){\n\t\t\tans = 6;\n\t\t}\n\t\telse if (card[0] == 3 && card[1] == 2){\n\t\t\tans = 5;\n\t\t}\n\t\telse if (card[0] == 3){\n\t\t\tans = 3;\n\t\t}\n\t\telse if (card[0] == 2 && card[1] == 2){\n\t\t\tans = 2;\n\t\t}\n\t\telse if (card[0] == 2){\n\t\t\tans = 1;\n\t\t}\n\t\t\n\t\tprintf(\"%s\\n\", str[max(ans, tmp)]);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\tint card[14];\n\tint c[5];\n\tint i,j,t;\n\tint pair,tri,fo,st;\n\tint flag=0;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n\t\tflag=pair=tri=fo=st=0;\n\t\tfor(i=1;i<14;i++)\n\t\t\tcard[i]=0;\n\t\tfor(i=0;i<5;i++){\n\t\t\tcard[c[i]]++;\n\t\t\tif(card[c[i]]==4){\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(card[c[i]]==3)\n\t\t\t\ttri=1;\n\t\t}\n\t\tif(flag)\n\t\t\tcontinue;\n\t\tif(tri){\n\t\t\tfor(i=1;i<14;i++){\n\t\t\t\tif(card[i]==2)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(card[i]==2)\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor(i=1;i<14;i++){\n\t\t\tif(card[i]==2)\n\t\t\t\tpair++;\n\t\t}\n\t\tif(pair==2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse if(pair==1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor(i=1;i<10;i++){\n\t\t\tif(card[i]==1 &&\n\t\t\t\tcard[i+1]==1 &&\n\t\t\t\tcard[i+2]==1 &&\n\t\t\t\tcard[i+3]==1 &&\n\t\t\t\tcard[i+4]==1){\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tst=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(st)\n\t\t\tcontinue;\n\t\tif(card[1]==1 &&\n\t\t\tcard[10]==1 &&\n\t\t\tcard[11]==1 &&\n\t\t\tcard[12]==1 &&\n\t\t\tcard[13]==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t\t\tst=1;\n\t\t}\n\t\t\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}\n\t\t\n\t\t"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\n#define N 5\n\n//役を調べる関数群\nint isFourCard(int hand[]);\nint isFullHouse(int hand[]);\nint isStraight(int hand[]);\nint isThreeCard(int hand[]);\nint isTwoPair(int hand[]);\nint isOnePair(int hand[]);\n\n//hand[]の中からnの数を数える関数\nint countCard(int hand[], int n);\n\n//挿入ソート\nvoid insertionSort(int array[], int n);\n\n//チェック用。\nvoid display(int array[], int n);\n\n\nint main(void){\n\t\n\tint hands[N+1];\n\tchar temp;\n\tint i, ret;\n\tint result;\n\t\n\twhile(1){\n\t\t\n\t\t\n\t\t//入力\n\t\tfor(i=0; i<N; i++){\n\t\t\t\n\t\t\tret = scanf(\"%d%c\", &hands[i], &temp);\n\t\t\t\n\t\t\tif(ret == EOF){\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif(ret == EOF){\n\t\t\t\n\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t//昇順にソート\n\t\tinsertionSort(hands, N);\n\t\t\n\t\t\n\t\t//ソートできてるかチェック\n\t\t//display(hands, N);\n\t\t\n\t\t\n\t\t//役を調べる\n\t\tif(isFourCard(hands)){\n\t\t\t\n\t\t\tprintf(\"four card\\n\");\n\t\t\t\n\t\t}\n\t\telse if(isFullHouse(hands)){\n\t\t\t\n\t\t\tprintf(\"full house\\n\");\n\t\t\t\n\t\t}\n\t\telse if(isStraight(hands)){\n\t\t\t\n\t\t\tprintf(\"straight\\n\");\n\t\t\t\n\t\t}\n\t\telse if(isThreeCard(hands)){\n\t\t\t\n\t\t\tprintf(\"three card\\n\");\n\t\t\t\n\t\t}\n\t\telse if(isTwoPair(hands)){\n\t\t\t\n\t\t\tprintf(\"two pair\\n\");\n\t\t\t\n\t\t}\n\t\telse if(isOnePair(hands)){\n\t\t\t\n\t\t\tprintf(\"one pair\\n\");\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\t\n\t\t\tprintf(\"null\\n\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn 0;\n\t\n}\n\n\n\n//4カード\nint isFourCard(int hand[]){\n\t\n\tint ret = 0;\n\t\n\t//4カードに出てくる数字は2種類。  [0]番目と[4]番目は必ず違う数字になるので、そのどちらかが4枚あれば良い。\n\tif(countCard(hand, hand[0]) == 4 || countCard(hand, hand[4]) == 4){\n\t\t\n\t\tret = 1;\n\t\t\n\t}\n\t\n\treturn ret;\n\t\n}\n\n\n//フルハウス\nint isFullHouse(int hand[]){\n\t\n\tint ret = 0;\n\t\n\t//フルハウスに出てくる数字は2種類。  2:3 か 3:2 の並びになる。\n\tif((countCard(hand, hand[0]) == 2 && countCard(hand, hand[4]) == 3) || (countCard(hand, hand[0]) == 3 && countCard(hand, hand[4]) == 2)){\n\t\t\n\t\tret = 1;\n\t\t\n\t}\n\t\n\treturn ret;\n\t\n}\n\n\n//ストレート\nint isStraight(int hand[]){\n\t\n\tint ret = 1;\n\tint i;\n\t\n\t//階段になっているかどうかをチェック\n\tfor(i=0; i<N-1; i++){\n\t\t\n\t\t//階段になっていなければ抜ける\n\t\tif(hand[i]+1 != hand[i+1]){\n\t\t\t\n\t\t\tret = 0;\n\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t//[0]番目が1だった場合は、A, 10, 11, 12, 13の可能性があるのでそれをチェック\n\tif(hand[0] == 1){\n\t\t\n\t\tret = 1;\n\t\t\n\t\tfor(i=1; i<N-1; i++){\n\t\t\t\n\t\t\tif(hand[i]+1 != hand[i+1]){\n\t\t\t\t\n\t\t\t\tret = 0;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t//hand[1]が10ではなかった場合はそもそもダメ。\n\t\tif(hand[1] != 10){\n\t\t\t\n\t\t\tret = 0;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn ret;\n\t\n}\n\n\n//3カード\nint isThreeCard(int hand[]){\n\t\n\tint ret = 0;\n\t\n\t//3カードにおいて、[1]番目と[4]番目が同じ数字になることはない。 → [1]番目と[4]番目の枚数を数え、どちらかが3枚あれば良い。\n\tif(countCard(hand, hand[1]) == 3 || countCard(hand, hand[4]) == 3){\n\t\t\n\t\tret = 1;\n\t\t\n\t}\n\t\n\treturn ret;\n\t\n}\n\n\n//2ペア\nint isTwoPair(int hand[]){\n\t\n\tint ret = 0;\n\tint counts[3];\n\t\n\t//2ペアにおいて、[0], [2], [4]がそれぞれ同じになることはない。 → [0], [2], [4]の枚数を数え、いずれか2つが2枚あれば良い。\n\tcounts[0] = countCard(hand, hand[0]);\n\tcounts[1] = countCard(hand, hand[2]);\n\tcounts[2] = countCard(hand, hand[4]);\n\t\n\t//countsの中から、2の数を数える。  countsにはhands[0],[2],[4]の枚数が入っているため、「『2枚あった数字』の数」を求めることになる。\n\tif(countCard(counts, 2) == 2){\n\t\t\n\t\tret = 1;\n\t\t\n\t}\n\t\n\treturn ret;\n\t\n}\n\n\n//1ペアは甘え\nint isOnePair(int hand[]){\n\t\n\tint ret = 0;\n\tint i;\n\t\n\t//1ペア = 同じものが見つかり次第抜ける。\n\tfor(i=0; i<N-1; i++){\n\t\t\n\t\tif(hand[i] == hand[i+1]){\n\t\t\t\n\t\t\tret = 1;\n\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn ret;\n\t\n}\n\n\n\nint countCard(int hand[], int n){\n\t\n\tint count = 0;\n\tint i;\n\t\n\tfor(i=0; i<N; i++){\n\t\t\n\t\tif(hand[i] == n){\n\t\t\t\n\t\t\tcount++;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn count;\n\t\n}\n\n\n\nvoid insertionSort(int array[], int n){\n\t\n\tint i, k;\n\tint temp;\n\t\n\tfor(i=1; i<n; i++){\n\t\t\n\t\ttemp = array[i];\n\t\tk = i;\n\t\t\n\t\twhile(k > 0 && temp < array[k-1]){\n\t\t\t\n\t\t\tarray[k] = array[k-1];\n\t\t\tk--;\n\t\t\t\n\t\t}\n\t\t\n\t\tarray[k] = temp;\n\t\t\n\t}\n\t\n\treturn;\n\t\n}\n\n\n\nvoid display(int array[], int n){\n\t\n\tint i;\n\t\n\tfor(i=0; i<n; i++){\n\t\t\n\t\tprintf(\"%d \", array[i]);\n\t\t\n\t}\n\t\n\tprintf(\"\\n\");\n\t\n\treturn;\n\t\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\tint main(){\n\t\tint a[5],s[14],p[14],i,j,c,g,h,d;\n\t\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\t\tg=0;\n\t\t\th=0;\n\t\t\td=0;\n\t\t\tc=0;\n\t\t\tfor(i=0;i<14;i++){\n\t\t\t\ts[i]=i+1;\n\t\t\t\tp[i]=0;\n\t\t\t}\n\t\t\ts[13]=1;\n\t\t\tfor(i=0;i<13;i++)\n\t\t\t\tfor(j=0;j<5;j++)\n\t\t\t\tif(a[j]==s[i]){\n\t\t\t\tp[i]++;\n\t\t\t\tif(a[j]==1)\n\t\t\t\t\tp[13]++;\n\t\t\t}\n\t\t\tfor(i=0;i<10;i++)\n\t\t\t\tif(p[i]==1){\n\t\t\t\t\t\n\t\t\t\t\tfor(j=i+1;j<i+5;j++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(p[j]!=1)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif(j==i+4){\n\t\t\t\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\tif(c>0)\n\t\t\t\tcontinue;\n\t\t\tfor(i=0;i<13;i++){\n\t\t\t\tif(p[i]==4)d++;\n\t\t\t\tif(p[i]==3)g++;\n\t\t\t\tif(p[i]==2)h++;\n\t\t\t}\n\t\t\tif(d>0)\n\t\t\t\tprintf(\"fourcard\\n\");\n\t\t\telse if(g>0&&h>0)\n\t\t\t\tprintf(\"fullhouse\\n\");\n\t\t\telse if(g>0&&h==0)\n\t\t\t\tprintf(\"threecard\\n\");\n\t\t\telse if(g==0&&h==1)\n\t\t\t\tprintf(\"onepair\\n\");\n\t\t\telse if(g==0&&h==2)\n\t\t\t\tprintf(\"twopair\\n\");\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\t\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint max(int x, int y)\n{\n\tif (x > y){\n\t\treturn (x);\n\t}\t\n\treturn (y);\n}\n\nvoid swap(int *i, int *j)\n{\n\t*i += *j;\n\t*j = *i - *j;\n\t*i -= *j;\n}\n\nint main(void)\n{\n\tint card[13];\n\tchar str[7][16] = {\n\t\t\"null\", \"one pair\", \"two pair\", \"three card\", \n\t\t\"straight\", \"full house\", \"four card\",\n\t};\n\tint ans;\n\tint tmp;\n\tint i, j;\n\tchar c[5];\n\tint count;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\tans = 0;\n\t\ttmp = 0;\n\t\tmemset(card, 0, sizeof(card));\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tcard[c[i] - 1]++;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (card[i]){\n\t\t\t\tfor (j = i, count = 0; count < 5; count++, j++){\n\t\t\t\t\tif (!card[j]){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (j == 12 && count == 3){\n\t\t\t\t\t\tj = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (j == 12){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count){\n\t\t\t\ttmp = 4;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 12; i++){\n\t\t\tfor (j = 0; j < 12 - i; j++){\n\t\t\t\tif (card[j] < card[j + 1]){\n\t\t\t\t\tswap(&card[j], &card[j + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tprintf(\"%d \", card[i]);\n\t\t}\n\t\t\n\t\tif (card[0] == 4){\n\t\t\tans = 6;\n\t\t}\n\t\telse if (card[0] == 3 && card[1] == 2){\n\t\t\tans = 5;\n\t\t}\n\t\telse if (card[0] == 3){\n\t\t\tans = 3;\n\t\t}\n\t\telse if (card[0] == 2 && card[1] == 2){\n\t\t\tans = 2;\n\t\t}\n\t\telse if (card[0] == 2){\n\t\t\tans = 1;\n\t\t}\n\t\t\n\t\tprintf(\"%s\\n\", str[max(ans, tmp)]);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n  int b,c[5],i,j;\n\n  while(scanf(\"%d,%d,%d,%d,%d\",c,c+1,c+2,c+3,c+4)!=EOF){\n    for(i=0;i<4;i++) for(j=i+1;j<5;j++) if(c[i]>c[j]) { b=c[i];c[i]=c[j];c[j]=b; }\n    if((c[0]+1==c[1] && c[1]+1==c[2] && c[2]+1==c[3] && c[3]+1==c[4]) ||\n       (c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13)) printf(\"straight\\n\");\n    else if((c[0]==c[1] && c[0]==c[2] && c[0]==c[3]) || (c[1]==c[2] && c[1]==c[3] && c[1]==c[4])) printf(\"four card\\n\");\n    else if((c[0]==c[1] && c[0]==c[2] && c[3]==c[4]) || (c[0]==c[1] && c[2]==c[3] && c[2]==c[4])) printf(\"full house\\n\");\n    else if((c[0]==c[1] && c[1]==c[2]) || (c[1]==c[2] && c[2]==c[3]) || (c[2]==c[3] && c[3]==c[4])) printf(\"three card\\n\");\n    else if((c[0]==c[1] && (c[2]==c[3] || c[3]==c[4])) || (c[1]==c[2] && c[3]==c[4])) printf(\"two pair\\n\");\n    else if(c[0]==c[1] || c[1]==c[2] || c[2]==c[3] || c[3]==c[4]) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main(void)\n{\n\tint hand[5];\n\tint i, j;\n\t\n\twhile (scanf(\"%d\", hand) != EOF){\n\t\tint straight = 1;\n\t\tint pair = 0;\n\t\tint three = 0;\n\t\tint four = 0;\n\t\t\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\"%*c%d\", hand + i);\n\t\t}\n\t\tsort(hand, hand + 5);\n\t\tfor (i = 0; i < 5 || !puts(\"\"); i++){\n\t\t\tprintf(\"%d \", hand[i]);\n\t\t}\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (hand[i] == hand[i + 1]){\n\t\t\t\tpair++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 3; i++){\n\t\t\tif (hand[i] == hand[i + 1] && hand[i] == hand[i + 2]){\n\t\t\t\tthree = 1;\n\t\t\t\tpair -= 2;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 2; i++){\n\t\t\tif (hand[i] == hand[i + 1] && hand[i] == hand[i + 2] && hand[i] == hand[i + 3]){\n\t\t\t\tfour = 1;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tif (hand[i] != hand[i + 1] - 1){\n\t\t\t\tstraight = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13 && hand[0] == 1){\n\t\t\tstraight = 1;\n\t\t}\n\t\tif (straight == 1){\n\t\t\tputs(\"straight\");\n\t\t}\n\t\telse if (four == 1){\n\t\t\tputs(\"four card\");\n\t\t}\n\t\telse if (pair == 1 && three == 1){\n\t\t\tputs(\"full house\");\n\t\t}\n\t\telse if (three == 1){\n\t\t\tputs(\"three card\");\n\t\t}\n\t\telse if (pair == 2){\n\t\t\tputs(\"two pair\");\n\t\t}\n\t\telse if (pair == 1){\n\t\t\tputs(\"one pair\");\n\t\t}\n\t\telse {\n\t\t\tputs(\"null\");\n\t\t}\n\t\tputs(\"\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n  int card[5],ans,cou=0,tmp,i,j;\n  char yaku[7][15] = {\"four card\",\"full house\",\"straight\",\"three card\",\"two pair\",\"one pair\",\"null\"};\n  scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]);\n  for(i=0;i<5;i++){\n    if(card[i] == 1){\n      card[i] = 14;\n    }\n  }\n  for(i=0;i<5;i++){\n    for(j=i+1;j<5;j++){\n      if(card[i] > card[j]){\n        tmp = card[i];\n        card[i] = card[j];\n        card[j] = tmp;\n      }\n    }\n  }\n  i=0;\n  if(card[0] == card[1] && card[1] == card[2] && card[2] == card[3] || card[1] == card[2] && card[2] == card[3] && card[3] == card[4]) ans = 0;\n  else if(card[0] == card[1] && card[1] == card[2] && card[3] == card[4] || card[0] == card[1] && card[2] == card[3] && card[3] == card[4]) ans = 1;\n  else if(card[1] == card[0] + 1 && card[2] == card[0] + 2 && card[3] == card[0] + 3 && card[4] == card[0] + 4) ans = 2;\n  else if(card[i] == card[i+1] && card[i+1] == card[i+2] || card[i+1] == card[i+2] && card[i+2] == card[i+3] || card[i+2] == card[i+3] && card[i+3] == card[i+4]) ans = 3;\n  else{\n    for(i=0;i<4;i++){\n      if(card[i] == card[i+1]){\n        cou++;\n      }\n    }\n    if(cou == 2){\n      ans = 4;\n    }\n    else if(cou == 1){\n      ans = 5;\n    }\n    else{\n      ans = 6;\n    }\n  }\n  printf(\"%s\\n\",yaku[ans]);\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n    int c[5];\n    while(scanf(\"%d\",&c[0])!=EOF){\n        int i,j,work,count,flag;\n        \n        for(i=1;i<5;i++)scanf(\",%d\",&c[i]);\n        for(i=0;i<4;i++){\n            for(j=i+1;j<5;j++){\n                if(c[i]>c[j]){\n                    work=c[i];\n                    c[i]=c[j];\n                    c[j]=work;\n                }\n            }\n        }\n      \n        (c[0]==c[1])?i=0:i=1;\n        count=0;\n        for(j=1;j<4;j++){\n            if(c[i]==c[i+j])count++;\n        }\n        if(count==3){\n            puts(\"four card\");\n            continue;\n        }\n        count=0;\n        if(c[0]==c[1])count++;\n        if(c[0]==c[2])count++;\n        for(i=count+1;i<4;i++){\n            if(c[i]==c[i+1])count++;\n        }\n        if(count==3){\n            puts(\"full house\");\n            continue;\n        }\n\n        \n        count=0;\n        flag=0;\n        if(c[0]==1 &&c[1]==10){\n            flag=1;\n            c[0]=9;\n        }\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1]-1)count++;\n        }\n        if(count==4){\n            puts(\"straight\");\n            continue;\n        }\n        if(flag==1)c[0]=1;\n      \n        count=0;\n        flag=0;\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1])count++;\n            else count=0;\n            if(count==2){\n                puts(\"three card\");\n                flag=1;\n            }\n        }\n        if(flag==1)continue;\n      \n        count=0;\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1])count++;\n        }\n        switch(count){\n            case 2:\n                puts(\"two pair\");\n                break;\n            case 1:\n                puts(\"one pair\");\n                break;\n            default:\n                puts(\"null\");\n                break;\n        }\n\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "        int count = 0;\n        int t = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while( scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF )\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i + 1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n\n                if(count == 0)\n                {\n                        for(k = 0 ;k < P; k++)\n                        {\n                                c[k] = card[k] + k;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if((t == 4) || (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two pair\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                m = 0;\n                count = 0;\n                for(i = 0; i < P; i++)\n                {\n                           c[i] = 0;\n                        card[i] = 0;\n                }\n                i = 0;\n                j = 0;\n                k = 0;\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "main(){\n  int a[6],i,j;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=-1){\n    for(i=0;i<5-1;i++)\n      for(j=i+1;j<5;j++)\n\tif(a[i]>a[j]){\n\t  a[5]=a[i];\n\t  a[i]=a[j];\n\t  a[j]=a[5];\n\t}\n    if((a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3])||(a[1]==a[2]&&a[2]==a[3]&&a[3]==a[4]))\n      puts(\"four card\");\n    else if((a[0]==a[1]&&a[1]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[3]&&a[3]==a[4]))\n      puts(\"full house\");\n    else if((a[1]==a[0]+1&&a[2]==a[1]+1&&a[3]==a[2]+1&&a[4]==a[3]+1)||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13))\n      puts(\"straight\");\n    else if((a[0]==a[1]&&a[1]==a[2])||(a[1]==a[2]&&a[2]==a[3])||(a[2]==a[3]&&a[3]==a[4]))\n      puts(\"three card\");\n    else if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4]))\n      puts(\"two pair\");\n    else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4])\n      puts(\"one pair\");\n    else\n      puts(\"null\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint b[5],c[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};\n\tint i,j,temp,count[14],k;\n\n\tscanf(\"%d%d%d%d%d\",&b[0],&b[1],&b[2],&b[3],&b[4]);\n\n\n/*sort*/\n\tfor (i = 0; i < 5; i++) \n\t{\n        \tfor (j = 4; j > i; j--) \n\t\t{\n            \t\tif (b[j - 1] > b[j])\n\t\t\t{ \n            \t    \t\ttemp = b[j];\n                \t\tb[j] = b[j - 1];\n                \t\tb[j - 1]= temp;\n            \t\t}\n        \t}\t\n\t}\n\n/*count*/\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tcount[i] = 0;\n\n\t\tfor(j=0;j<5;j++)\n\t\t{\n\t\t\tif(i==b[j])\n\t\t\t{\n\t\t\t\tcount[i]+=1;\n\t\t\t}\n\t\t}\n\t}\n\n/*4,full*/\n\tfor(i=1;i<14;i++)\n\t{\t\t\t\n\t\tif(count[i]==4)\n\t\t{\n\t\t\tprintf(\"four card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\n\n\t\tif(count[i]==3)\n\t\t{\n\t\t\t\tfor(k=1;k<14;k++)\n\t\t\t\t{\n\t\t\t\t\tif(count[k]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(count[k]==3)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n/*straight*/\n\tif(  (b[0]==1&&b[1]==10&&b[2]==11&&b[3]==12&&b[4]==13)\n\t   ||(b[1]==b[0]+1&&b[2]==b[0]+2&&b[3]==b[0]+3&&b[4]==b[0]+4)\t)\n\t{\n\t\tprintf(\"straigh\\n\");\n\t\treturn 0;\n\t}\n/*2*/\t\n\tfor(i=1;i<14;i++)\n\t{\t\n\t\tif(count[i]==3)\n\t\t{\n\t\t\tprintf(\"three card\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(count[i]==2)\n\t\t{\n\t\t\tfor(k=1;k<14;k++)\n\t\t\t{\n\t\t\t\tif(k!=i&&count[k]==2)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tprintf(\"one pair\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"null\\n\");\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare_int(const void *a, const void *b){\n    return *(int*)a - *(int*)b;\n}\n\n\nint main(int argc,char* argv[]){\n  int first_card,is_st;\n  int i;\n  int max,max2,max3,max4;\n  int cards[5];\n  int hands[13];\n  \n  while(scanf(\"%d,%d,%d,%d,%d\",&cards[0],&cards[1],&cards[2],&cards[3],&cards[4]) != EOF){\n    max = max2 = max3 = max4 = 0;is_st = 1;\n    qsort(cards, 5, sizeof(int), compare_int);\n    \n    for(i = 0;i < 13;i++){\n      hands[i] = 0;\n    }\n    \n    for(i = 0;i < 5;i++){\n      hands[cards[i] - 1]++;\n    }\n\n    for(i = 0;i < 13;i++){\n      if(max <= hands[i]){\n\tmax4 = max3;\n\tmax3 = max2;\n\tmax2 = max;\n\tmax = hands[i];\n      }\n    }\n    \n    if(max == 4){\n      printf(\"four card\\n\");\n      continue;\n    }\n\n    if(max == 3 && max2 == 2){\n      printf(\"full house\\n\");\n      continue;\n    }\n    \n    first_card = cards[0];\n    for(i = 1;i < 5;i++){\n      if(first_card + 1 != cards[i]){is_st = 0;break;}else{\n\tfirst_card++;\n      }\n    }\n\n    if(is_st || (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13)){\n      printf(\"straight\\n\");\n      continue;\n    }\n    \n    if(max == 3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max == 2 && max2 == 2){\n      printf(\"two pair\\n\");\n      continue;\n    }\n\n    if(max == 2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n\n    printf(\"null\\n\");\n    \n  }\n  \n  return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\tint card[14];\n\tint c[5];\n\tint i,j,t;\n\tint pair,tri,fo,st;\n\tint flag=0;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n\t\tflag=pair=tri=fo=st=0;\n\t\tfor(i=1;i<14;i++)\n\t\t\tcard[i]=0;\n\t\tfor(i=0;i<5;i++){\n\t\t\tcard[c[i]]++;\n\t\t\tif(card[c[i]]==4){\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(card[c[i]]==3)\n\t\t\t\ttri=1;\n\t\t}\n\t\tif(flag)\n\t\t\tcontinue;\n\t\tif(tri){\n\t\t\tfor(i=1;i<14;i++){\n\t\t\t\tif(card[i]==2)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(card[i]==2)\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"tree card\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor(i=1;i<14;i++){\n\t\t\tif(card[i]==2)\n\t\t\t\tpair++;\n\t\t}\n\t\tif(pair==2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse if(pair==1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor(i=1;i<10;i++){\n\t\t\tif(card[i]==1 &&\n\t\t\t\tcard[i+1]==1 &&\n\t\t\t\tcard[i+2]==1 &&\n\t\t\t\tcard[i+3]==1 &&\n\t\t\t\tcard[i+4]==1){\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tst=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(st)\n\t\t\tcontinue;\n\t\tif(card[1]==1 &&\n\t\t\tcard[10]==1 &&\n\t\t\tcard[11]==1 &&\n\t\t\tcard[12]==1 &&\n\t\t\tcard[13]==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t\t\tst=1;\n\t\t}\n\t\t\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}\n\t\t\n\t\t"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n\tint a[5], i, j;\n\tint max, db, f;\n\t// get the data\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4])!=EOF ){\n\t\tint c[13] = {0};\n\t\tint m[5] = {0};\n\t\tf = 0;\n\t\t\n\t\t// make card list\n\t\tfor(i=0; i<5; i++) {\n\t\t\tc[ a[i]-1 ] += 1;\n\t\t}\n\t\t\n\t\t// make the number of card list\n\t\tfor(i=0; i<13; i++) {\n\t\t\tm[ c[i] ] += 1;\n\t\t}\n\t\t\n\t\t// examine the role\n\t\twhile(1){\n\t\t\t// --- four card\n\t\t\tif (m[4]==1) {\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- full house\n\t\t\tif ( (m[3]==1)&&(m[2]==1) ) {\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- straight\n\t\t\tfor(i=0; i<9; i++) {\n\t\t\t\tif ( (c[i])&&(c[i+1])&&(c[i+2])&&(c[i+3])&&(c[i+4]) ) {\n\t\t\t\t\tf = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 10 J Q K A\n\t\t\tif ( (c[9])&&(c[10])&&(c[11])&&(c[12])&&(c[0]) ) f = 1;\n\t\t\t\n\t\t\tif (f==1) {\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- three card\n\t\t\tif (m[3]==1) {\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- two pair\n\t\t\tif (m[2]==2) {\n\t\t\t\tprintf(\"two card\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- one pair\n\t\t\tif (m[2]==1) {\n\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- none\n\t\t\tprintf(\"null\\n\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n    int card[5];\n    int i, j, temp;\n\n    while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n        for(i=0;i<4;i++){\n            for(j=4;j>i;j--){\n                if(card[j-1]>card[j]){\n                    temp=card[j];\n                    card[j]=card[j-1];\n                    card[j-1]=temp;\n                }\n            }\n        }\n\n        if(card[0]==card[3]||card[1]==card[4]) printf(\"four card\\n\");\n        else if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])) printf(\"full house\\n\");\n        else if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]) printf(\"three card\\n\");\n        else if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])) printf(\"two pair\\n\");\n        else if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]) printf(\"one pair\\n\");\n        else if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)) printf(\"straight\\n\");\n        else printf(\"null\\n\");\n     \n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nint main(){\n  int i,max,kind,cont,cards[5],ume[13],j;\n  while(scanf(\"%d,%d,%d,%d,%d\",cards,cards+1,cards+2,cards+3,cards+4)!=EOF){\n    max=kind=0;\n    cont=13;\n    for(i=0;i<13;i++) ume[i]=0;\n    for(i=0;i<5;i++){\n      if(ume[cards[i]-1]){\n\tume[cards[i]-1]++;\n\tif(ume[cards[i]-1]>max) max=ume[cards[i]-1];\n      }else{\n\tkind++;\n\tif(cont>(cards[i]-1))\n\t  cont=cards[i]-1;\n\tume[cards[i]-1]++;\n      }\n    }\n    //    printf(\"max:%d cont:%d kind:%d\\n\",max,cont,kind);\n    if(max==4){\n      printf(\"four card\\n\");\n    }else if(max==3){\n      printf(\"%s\\n\",kind==2?\"full house\":\"three card\");\n    }else if(max==2){\n      printf(\"%s\\n\",kind==3?\"two pair\":\"one pair\");\n    }else{\n      /*      for(i=0;i<13;i++) printf(\"%d \",ume[i]);\n\t      printf(\"\\n\");*/\n      if(cont==0&&\n\t (ume[0]&&ume[9]&&ume[10]&&ume[11]&&ume[12])){\n\tprintf(\"straight\\n\");\n\tcontinue;\n      }\n      for(i=0;ume[(i+cont)%13];i++)\n\t;\n      if(i==5){\n\tif(ume[0]){\n\t  if((ume[1]&&!ume[12])||(!ume[1]&&ume[12]))\n\t    printf(\"straight\\n\");\n\t  else printf(\"null\\n\");\n\t}else{\n\t  printf(\"straight\\n\");\n\t}\n      }else{\n\tprintf(\"null\\n\");\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n\tint a[5] , i, j;\n\tint max, db, f;\n\t// get the data\n\twhile( scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) ){\n\t\tint c[13] = {0};\n\t\tint m[5] = {0};\n\t\tf = 0;\n\t\t\n\t\t// make card list\n\t\tfor(i=0; i<5; i++) {\n\t\t\tc[ a[i]-1 ] += 1;\n\t\t}\n\t\t\n\t\t// make the number of card list\n\t\tfor(i=0; i<13; i++) {\n\t\t\tm[ c[i] ] += 1;\n\t\t}\n\t\t\n\t\t// examine the role\n\t\twhile(1){\n\t\t\t// --- four card\n\t\t\tif (m[4]==1) {\n\t\t\t\tprintf(\"four card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- full house\n\t\t\tif ( (m[3]==1)&&(m[2]==1) ) {\n\t\t\t\tprintf(\"full house\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- straight\n\t\t\tfor(i=0; i<9; i++) {\n\t\t\t\tif ( (c[i])&&(c[i+1])&&(c[i+2])&&(c[i+3])&&(c[i+4]) ) {\n\t\t\t\t\tf = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 10 J Q K A\n\t\t\tif ( (c[9])&&(c[10])&&(c[11])&&(c[12])&&(c[0]) ) f = 1;\n\t\t\t\n\t\t\tif (f==1) {\n\t\t\t\tprintf(\"straight\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- three card\n\t\t\tif (m[3]==1) {\n\t\t\t\tprintf(\"three card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- two pair\n\t\t\tif (m[2]==2) {\n\t\t\t\tprintf(\"two card\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- one pair\n\t\t\tif (m[2]==1) {\n\t\t\t\tprintf(\"one pair\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// --- none\n\t\t\tprintf(\"null\");\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint pair(int a, int b, int c, int d, int e)\n{\n     int card[14] = {0};\n     int i, t, u=0;\n     \n     t = a;\n     card[t] = card[t] + 1;\n     \n     t = b;\n     card[t] = card[t] + 1;\n     \n     t = c;\n     card[t] = card[t] + 1;\n     \n     t = d;\n     card[t] = card[t] + 1;\n     \n     t = e;\n     card[t] = card[t] + 1;\n     \n     t = 0;\n     for(i=0; i<14; i++){\n\t  if(card[i]==2) t = t + 1;\n\t  if(card[i]==3) u = 1;\n\t  if(card[i]==4) t = 6;\n     }\n     \n     if(t==1 && u==1) return 5;\n     if(t!=0 && t<=6) return t;\n     if(u==1) return 3;\n     else return 0;\n}\n\nint compare_int(const void *a, const void *b)\n{\n     return *(int*)a - *(int*)b;\n}\n\nint straight(int a, int b, int c, int d, int e)\n{\n     int num[] = {a, b, c, d, e};\n     int v, w, x, y, z;\n     \n     qsort(num, 5, sizeof(int), compare_int);\n     \n     v = num[0];\n     w = num[1];\n     x = num[2];\n     y = num[3];\n     z = num[4];\n\t  \n     if(w==v+1){\n\t  if(x==w+1){\n\t       if(y==x+1){\n\t\t    if(z==y+1) return 4;\n\t       }\n\t  }\n     }\n     \n     if(v==1 && w==10 && x==11 && y==12 && z==13) return 4;\n\n     return 0;\n}\n\nint main(void)\n{\n     int a, b, c, d, e, op;\n\n     while(0<1){\n\t  if(scanf(\"%d,%d,%d,%d,%d\", &a, &b, &c, &d, &e)==-1) break;\n\n\t  op = pair(a, b, c, d, e);\n\t  \n\t  if(op==0) op = straight(a, b, c, d, e);\t  \n\t  \n\t  switch(op){\n\t  case 1: printf(\"one pair\\n\"); break;\n\t  case 2: printf(\"two pair\\n\"); break;\n\t  case 3: printf(\"three card\\n\"); break;\n\t  case 4: printf(\"straight\\n\"); break;\n\t  case 5: printf(\"full house\\n\"); break;\n\t  case 6: printf(\"four card\\n\"); break;\n\t  default: printf(\"null\\n\"); break;\n\t  }\n\t  \n     }\n\n     return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\n/* ツマツジツッツクツナツδ督バツーツづ慊づ敖づェツつセツつッツづ姪「ツ妥ィツづ個青ォツ篠ソツ湘」ツ仕ツ陛サツづ按つ「 */\n\nint main(void){\n\tint cards[13], t, i;\n\t\n\twhile(1){\n\t\tnext:\n\t\n\t\t/* init */\n\t\tfor(i=0; i<13; i++) cards[i]=0;\n\t\t\n\t\t/* input */\n\t\tfor(i=0; i<5; i++){\n\t\t\tif(scanf(\"%d%*c\",&t)==EOF) return 0;\n\t\t\tcards[t-1]++;\n\t\t}\n\t\t\n\t\t/* four card */\n\t\tfor(i=0; i<13; i++)\n\t\t\tif(cards[i]==4){\n\t\t\t\tputs(\"four card\");\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\n\t\t/* full house */\n\t\tt=0;\n\t\tfor(i=0; i<13; i++){\n\t\t\tif((cards[i]==3&&t==2)||(cards[i]==2&&t==3)){\n\t\t\t\tputs(\"full house\");\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\telse if(cards[i]>t) t=cards[i];\n\t\t}\n\t\t\n\t\t/* straight */\n\t\tfor(i=0; i<10; i++){\n\t\t\tfor(t=0; t<5; t++) if(!cards[(i+t)%13]) break;\n\t\t\tif(t==5){\n\t\t\t\tputs(\"straight\");\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* three card */\n\t\tfor(i=0; i<13; i++)\n\t\t\tif(cards[i]==3){\n\t\t\t\tputs(\"three card\");\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\t\n\t\t/* two pair */\n\t\tt=0;\n\t\tfor(i=0; i<13; i++)\n\t\t\tif(cards[i]==2) t++;\n\t\tif(t){\n\t\t\tif(t==2) puts(\"two pair\");\n\t\t\telse puts(\"one pair\");\n\t\t\tgoto next;\n\t\t}\n\t\t\n\t\tputs(\"null\");\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n\tint card[5],i,j,t;\n\t\n\twhile(0<=scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])){\n\t\t\n\t\tfor(i=0;i<5;i++){\n\t\t\tcard[i]=(card[i]+11)%13;\n\t\t}\n\t\t\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=i;j<5;j++){\n\t\t\t\tif(card[i]>card[j]){\n\t\t\t\t\tt=card[i];\n\t\t\t\t\tcard[i]=card[j];\n\t\t\t\t\tcard[j]=t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(card[0]==card[3] || card[1]==card[4]){\n\t\t\tprintf(\"four card\\n\");\n\t\t}else if((card[0]==card[2] && card[3]==card[4]) || (card[0]==card[1] && card[2]==card[4])){\n\t\t\tprintf(\"full house\\n\");\n\t\t}else if(card[1]-card[0]==1 && card[2]-card[1]==1 && card[3]-card[2]==1 && card[4]-card[3]==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t}else if(card[0]==card[2] || card[1]==card[3] || card[2]==card[4]){\n\t\t\tprintf(\"three card\\n\");\n\t\t}else if((card[0]==card[1]  && (card[3]==card[2] || card[3]==card[4])) || ((card[0]==card[1] || card[1]==card[2])&&card[3]==card[4])){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}else if(card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4]){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}else{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar judge(int hand[5]);\nvoid sort(int *hand);\n\nint main(void)\n{\n\tint hand[5];\n\tchar rank;\n\t\n\t\n\tscanf(\"%d,%d,%d,%d,%d\", &hand[0], &hand[1], &hand[2]\n\t\t\t\t\t\t\t  , &hand[3], &hand[4]);\n\t\n\tsort(hand);\n\trank = judge(hand);\n\t\n\tswitch (rank){\n\t\t\n\t\tcase ('S'):\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('A'):\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('B'):\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('C'):\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('D'):\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('E'):\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('F'):\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\t}\n\t\n\treturn (0);\n}\n\nvoid sort(int *hand)\n{\n\tint i, j;\n\tint tmp;\n\tfor (i = 0; i < 5; i++){\n\t\tfor (j = 0; j < 5; j++){\n\t\t\tif (hand[i] < hand[j]){\n\t\t\t\ttmp = hand[i];\n\t\t\t\thand[i] = hand[j];\n\t\t\t\thand[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nchar judge(int hand[5])\n{\n\tint pair = 0;\n\tint card_3 = 0, card_4 = 0;\n\tchar rank;\n\tint straight = 0;\n\tint i;\n\tint sum = 0;\n\t\n\t\n\tfor (i = 0; i < 5; i++){\n\t\tsum += hand[i];\n\t\tif (hand[i] == hand[i + 1]){\n\t\t\tpair++;\n\t\t\tif (hand[i] == hand[i + 2]){\n\t\t\t\tpair--;\n\t\t\t\tcard_3++;\n\t\t\t\tif (hand[i] == hand[i + 3]){\n\t\t\t\t\tcard_3--;\n\t\t\t\t\tcard_4++;\n\t\t\t\t\ti++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hand[i] + 1 == hand[i + 1]){\n\t\t\tstraight++;\n\t\t}\n\t}\n\t\n\tif (card_4 == 1){\n\t\trank = 'S';\n\t}\n\telse if (card_3 == 1 && pair == 1){\n\t\trank = 'A';\n\t}\n\telse if (straight == 4){\n\t\trank = 'B';\n\t}\n\telse if (straight == 3 && sum == 47){\n\t\trank = 'B';\n\t}\n\t\n\telse if (card_3 == 1){\n\t\trank = 'C';\n\t}\n\telse if (pair == 2){\n\t\trank = 'D';\n\t}\n\telse if (pair == 1){\n\t\trank = 'E';\n\t}\n\telse {\n\t\trank = 'F';\n\t}\n\t\n\treturn (rank);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint card[5];\n\tint i,j;\n\tint temp;\n\tfor(i=0;i<5;i++){\n\t\tscanf(\"%d\",&card[i]);\n\t}\n\tfor(i=0;i<4;i++){\n\t\tfor(j=4;j>i;j--){\n\t\t\tif(card[j-1]>card[j]){\n\t\t\t\ttemp=card[j];\n\t\t\t\tcard[j]=card[j-1];\n\t\t\t\tcard[j-1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(card[0]==card[3]||card[1]==card[4]){\n\t\tprintf(\"four card\");\n\t}\n\telse if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]){\n\t\tprintf(\"three card\");\n\t}\n\telse if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"two pair\");\n\t}\n\telse if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\t\tprintf(\"one pair\");\n\t}\n\telse if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"full house\");\n\t}\n\telse if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)){\n\t\tprintf(\"straight\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tsort(card);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[1] + 1;i < 5;i++){\n\t\t\t\tif(card[count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[2] + 1;i < 5;i++){\n\t\t\t\t\tif(card[count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsort2(count);\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint isstraight(int[5]);\n\nint main(void) {\n\tint cards[5];\n\tint i,j,temp;\n\tint yaku;\n\tchar yakuname[7][11]={\"null\",\"one pair\",\"two pair\",\"three card\",\n\t\t\t\t\t\t\"straight\",\"full house\",\"four card\"};\n\twhile(1) {\n\t\tif(scanf(\"%d,%d,%d,%d,%d\",\n\t\t\t&cards[0],&cards[1],&cards[2],&cards[3],&cards[4])==-1)break;\n\t\tfor(i=4;i>0;i--) {\n\t\t\tfor(j=0;j<i;j++) {\n\t\t\t\tif(cards[j]>cards[j+1]) {\n\t\t\t\t\ttemp=cards[j];\n\t\t\t\t\tcards[j]=cards[j+1];\n\t\t\t\t\tcards[j+1]=temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tyaku=0;\n\t\tif(cards[1]==cards[2] && cards[2]==cards[3]) {\n\t\t\tif(cards[0]==cards[1] || cards[3]==cards[4])yaku=6;\n\t\t\telse yaku=3;\n\t\t} else if(cards[0]==cards[1] && cards[1]==cards[2]) {\n\t\t\tif(cards[3]==cards[4])yaku=5; else yaku=3;\n\t\t} else if(cards[2]==cards[3] && cards[3]==cards[4]) {\n\t\t\tif(cards[0]==cards[1])yaku=5; else yaku=3;\n\t\t} else if(isstraight(cards))yaku=4;\n\t\telse {\n\t\t\tfor(i=0;i<4;i++) {\n\t\t\t\tif(cards[i]==cards[i+1])yaku++;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",yakuname[yaku]);\n\t}\n\treturn 0;\n}\n\nint isstraight(int cards[5]) {\n\tint i;\n\tfor(i=0;i<4;i++) {\n\t\tif(cards[i]+1!=cards[i+1])break;\n\t}\n\tif(i<4) {\n\t\tif(cards[0]==1 && cards[1]==10 && cards[2]==11 &&\n\t\t\tcards[3]==12 && cards[4]==13)return 1; else return 0;\n\t} else return 1;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid swap();\nint data[6]={0};\nint main(void)\n{\n\tint i,j,n;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&data[1],&data[2],&data[3],&data[4],&data[5])!=EOF){\n\t\tswap();\n\t\tif((data[1]==data[2] && data[2]==data[3] && data[3]==data[4])||(data[2]==data[3] && data[3]==data[4] && data[4]==data[5])) puts(\"four card\");\n\t\telse if((data[1]==data[2] && data[2]==data[3] && data[4]==data[5]) || (data[1]==data[2] && data[3]==data[4] && data[4]==data[5])) puts(\"full house\");\n\t\telse if((data[1]==1 && data[2]==10 && data[3]==11 && data[4]==12 && data[5]==13 ) || (data[1]+1==data[2] && data[2]+1==data[3] && data[3]+1==data[4] && data[4]+1==data[5])) puts(\"straight\");\n\t\telse if((data[1]==data[2] && data[2]==data[3]) || (data[2]==data[3] && data[3]==data[4]) || (data[3]==data[4] && data[4]==data[5])) puts(\"three card\");\n\t\telse if((data[1]==data[2] && data[3]==data[4]) || (data[1]==data[2] && data[4]==data[5]) || (data[2]==data[3] && data[4]==data[5])) puts(\"two pair\");\n\t\telse if((data[1]==data[2]) || (data[2]==data[3]) || (data[3]==data[4]) || (data[4]==data[5])) puts(\"one pair\");\n\t\telse puts(\"null\");\n\t\t}\n\treturn 0;\n}\n\nvoid swap(){\n\tint i,j,temp;\n\tfor(i=1;i<6;i++){\n\t\tfor(j=1;j<6;j++){\n\t\t\t\tif(data[i]<data[j]){\n\t\t\t\t\ttemp=data[i];\n\t\t\t\t\tdata[i]=data[j];\n\t\t\t\t\tdata[j]=temp;\n\t\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n  int card[5];\n  int flag[6] = {0}; //one pair, two pair, three card, straight, fullhouse, fourcard\n  int cnt, i, j;\n  int three, one, num;\n  while(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n    for(i=0;i<6;i++){\n      flag[i] = 0;\n    }\n    //ソートする\n    for(i=4;i>=0;i--){\n      for(j=0;j<i;j++){\n\tif(card[j+1] != 1){\n\t  if(card[j] > card[j+1] || card[j] == 1){\n\t    num = card[j];\n\t    card[j] = card[j+1];\n\t    card[j+1] = num;\n\t  }\n\t}\n      }\n    }\n    /*for(i=0;i<5;i++){\n      printf(\"%d\\n\",card[i]);\n      }*/\n    //two pair, one pairか調べる\n    for(i = 0;i<4;i++){\n      for(j = i+1;j<5;j++){\n\tif(card[i] == card[j]){\n\t  if(flag[0] == 1 && one != card[i]){\n\t    flag[1] = 1;\n\t  }else{\n\t    flag[0] = 1;\n\t    one = card[i];\n\t  }\n\t}\n      }\n    }\n    //three cardかfour cardか調べる\n    for(i=0;i<3;i++){\n      cnt = 0;\n      for(j=i+1;j<5;j++){\n\tif(card[i] == card[j]){\n\t  cnt++;\n\t}\n\tif(j == 4){\n\t  if(cnt == 3){\n\t    flag[5] = 1;\n\t  }else if(cnt == 2){\n\t    flag[2] = 1;\n\t    three = card[i];\n\t  }\n\t}\n      }\n    }\n    //straightか調べる\n    for(i=0;i<4;i++){\n      if(card[i] == 13 && card[i+1] == 1){\n\t;\n      }else if(card[4] == 2){\n\tbreak;\n      }else if(card[i+1] - card[i] != 1){\n\tbreak;\n      }\n      if(i==3){\n\tflag[3] = 1;\n      }\n     \n    }\n    //fullhouseか調べる\n    if(flag[2] == 1){\n      for(i=0;i<4;i++){\n\tfor(j=i+1;j<5;j++){\n\t  if(three == card[i]){\n\t    break;\n\t  }\n\t  if(card[i] == card[j]){\n\t    flag[4] = 1;\n\t  }\n\t}\n      }\n    }\n    //出力\n    for(i=5;i>=-1;i--){\n      if(i == -1){\n\tprintf(\"null\\n\");\n\tbreak;\n      }\n      if(flag[i] == 1){\n\tswitch(i){\n\tcase 0:\n\t  printf(\"one pair\\n\");\n\t  break;\n\tcase 1:\n\t  printf(\"two pair\\n\");\n\t  break;\n\tcase 2:\n\t  printf(\"three card\\n\");\n\t  break;\n\tcase 3:\n\t  printf(\"straight\\n\");\n\t  break;\n\tcase 4:\n\t  printf(\"full house\\n\");\n\t  break;\n\tcase 5:\n\t  printf(\"four card\\n\");\n\t  break;\n\t}\n\tbreak;\n      }\n    }\n  }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(){\n\tint num[5],i,j,k,l,m,key,flag=0,count=0;\n\t\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&num[0],&num[1],&num[2],&num[3],&num[4])!=EOF){\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++)if(num[i]==num[j] && i!=j){\n\t\t\tflag=1;\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tif(count==2)flag=2;\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++)if(i!=k && j!=k && num[i]==num[k] && num[j]==num[k])flag=3;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]>num[j]){\n\t\t\t\tkey=num[i];\n\t\t\t\tnum[i]=num[j];\n\t\t\t\tnum[j]=key;\n\t\t\t}\n\t\t}\n\t}\n\tif(num[0]==num[1]-1 && num[1]==num[2]-1 && num[2]==num[3]-1 && num[3]==num[4]-1 || num[0]==1 && num[1]==10 && num[2]==11 && num[3]==12 && num[4]==13)flag=4;\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++){\n\t\t\t\t\tif(i!=k && j!=k && num[i]==num[k] && num[j]==num[k]){\n\t\t\t\t\t\tfor(l=0;l<5;l++){\n\t\t\t\t\t\t\tfor(m=0;m<5;m++)if(num[l]==num[m] && l!=i && l!=j && l!=k && l!=m)flag=5;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++){\n\t\t\t\t\tif(i!=k && j!=k && num[i]==num[k] && num[j]==num[k]){\n\t\t\t\t\t\tfor(l=0;l<5;l++)if(i!=l && j!=l && k!=l && num[i]==num[l] && num[j]==num[l] && num[k]==num[l] )flag=6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tswitch(flag){\n\tcase 0:\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\tcase 1:\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\tcase 2:\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\tcase 3:\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\tcase 4:\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\tcase 5:\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\tcase 6:\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t}\n\t\tflag=0;\n\t\tcount=0;\n\t}\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint card[5];\n\tint i,j;\n\tint temp;\n\tfor(i=0;i<5;i++){\n\t\tscanf(\"%d\",&card[i]);\n\t}\n\tfor(i=0;i<4;i++){\n\t\tfor(j=4;j>i;j--){\n\t\t\tif(card[j-1]>card[j]){\n\t\t\t\ttemp=card[j];\n\t\t\t\tcard[j]=card[j-1];\n\t\t\t\tcard[j-1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(card[0]==card[3]||card[1]==card[4]){\n\t\tprintf(\"four card\\n\");\n\t}\n\telse if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]){\n\t\tprintf(\"three card\\n\");\n\t}\n\telse if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"two pair\\n\");\n\t}\n\telse if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\t\tprintf(\"one pair\\n\");\n\t}\n\telse if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"full house\\n\");\n\t}\n\telse if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)){\n\t\tprintf(\"straight\\n\");\n\t}\n\telse{\n\t\tprintf(\"null\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nusing namespace std;\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++){b[i]=0;}\n      for(int i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint card[5];\n\tint i,j;\n\tint temp;\n\t\n\tscanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]);\n\t\n\tfor(i=0;i<4;i++){\n\t\tfor(j=4;j>i;j--){\n\t\t\tif(card[j-1]>card[j]){\n\t\t\t\ttemp=card[j];\n\t\t\t\tcard[j]=card[j-1];\n\t\t\t\tcard[j-1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(card[0]==card[3]||card[1]==card[4]){\n\t\tprintf(\"four card\\n\");\n\t}\n\telse if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]){\n\t\tprintf(\"three card\\n\");\n\t}\n\telse if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"two pair\\n\");\n\t}\n\telse if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\t\tprintf(\"one pair\\n\");\n\t}\n\telse if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"full house\\n\");\n\t}\n\telse if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)){\n\t\tprintf(\"straight\\n\");\n\t}\n\telse{\n\t\tprintf(\"null\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++)b[i]=0;\n      for(int i=0;i<5;i++) b[a[i]-1]++;\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<13-4;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#define PI 3.14159265358979323\n\n//int calc1(float a,float b,float c,float d,float e,float f,float *x,float *y);\n//void quick(int *,long long,long long);\n//int comp(char *a,char *b);\n\nint main(){\n\t\n\tint a[5];\n\tint i,j,temp;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",a,a+1,a+2,a+3,a+4)!=EOF){\n\t\tfor(i=4;i>=1;i--)\n\t\t\tfor(j=0;j<i;j++)\n\t\t\t\tif(a[j]>a[j+1]){\n\t\t\t\t\ttemp=a[j];\n\t\t\t\t\ta[j]=a[j+1];\n\t\t\t\t\ta[j+1]=temp;\n\t\t\t\t}\n\t\tif(a[1]==a[2]&&a[2]==a[3]&&(a[0]==a[1]||a[3]==a[4]))\n\t\t\tprintf(\"four card\\n\");\n\t\telse if((a[0]==a[1]&&a[1]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[3]&&a[3]==a[4]))\n\t\t\tprintf(\"full house\\n\");\n\t\telse if(a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]&&( a[0]+1==a[1] || (a[0]==1&&a[4]==13) ))\n\t\t\tprintf(\"straight\\n\");\n\t\telse if((a[0]==a[1]&&a[1]==a[2])||(a[1]==a[2]&&a[2]==a[3])||(a[2]==a[3]&&a[3]==a[4]))\n\t\t\tprintf(\"three card\\n\");\n\t\telse if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4]))\n\t\t\tprintf(\"two pair\\n\");\n\t\telse if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4])\n\t\t\tprintf(\"one pair\\n\");\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\t}\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>          // printf(), scanf()\n#include <stdlib.h>         // qsort()\n#include <stdbool.h>\n\nint\ncmp_func(const void *l_, const void *r_)\n{\n\tconst int* l = (const int*) l_;\n\tconst int* r = (const int*) r_;\n\n\tif (*l < *r)\n\t\treturn -1;\n\n\tif (*l > *r)\n\t\treturn 1;\n\n\treturn 0;\n}\n\nint\nmain(int argc, char** argv)\n{\n\tint n[5];\n\tint nn[6];\n\tint i, j, k;\n\n\twhile (true)\n\t{\n\t\tif (scanf(\"%d,%d,%d,%d,%d\", &n[0], &n[1], &n[2], &n[3], &n[4]) == EOF)\n\t\t\tbreak;\n\n\t\tqsort(n, 5, sizeof(int), cmp_func);\n\n\t\tj = n[0] + 1;\n\t\tfor (i = 1; i < 5; ++i, ++j)\n\t\t{\n\t\t\tif (i == 1 && n[i] == 10 && n[0] == 1)\n\t\t\t\tj = 10;\n\n\t\t\tif (n[i] != j)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (i >= 5)\n\t\t{\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tint bn = n[0];\n\t\tj = 1;\n\t\tk = 0;\n\t\tfor (i = 1; i < 5; ++i)\n\t\t{\n\t\t\tif (n[i] != bn)\n\t\t\t{\n\t\t\t\tnn[k++] = j;\n\t\t\t\tbn = n[i];\n\t\t\t\tj = 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tj++;\n\t\t}\n\n\t\tnn[k++] = j;\n\t\tqsort(nn, k, sizeof(int), cmp_func);\n\t\tswitch (k)\n\t\t{\n\t\tcase 2:\n\t\t\tif (nn[k - 1] == 4)\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\tbreak;\n\n\t\tcase 3:\n\t\t\tif (nn[k - 1] == 3)\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"two pair\\n\");\n\t\t\tbreak;\n\n\t\tcase 4:\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tbreak;\n\n\t\tcase 5:\n\t\tdefault:\n\t\t\tprintf(\"null\\n\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "int main()\n{\n  int t[14];\n  int a,b,c,d,e,i,x;\n  for(;i=~scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e);)\n    {\n      if(i==0)\n\tbreak;\n      for(i=0;i<14;i++)\n\tt[i]=0;\n      t[a]++;\n      t[b]++;\n      t[c]++;\n      t[d]++;\n      t[e]++;\n      for(x=i=0;i<14;i++)\n\tif(t[i]>3)\n\t  x=1,puts(\"four card\");\n      if(x!=0)\n\tcontinue;\n      for(x=i=0;i<14;i++)\n\t{\n\t  if(t[i]==3)\n\t    x+=3;\n\t  if(t[i]==2)\n\t    x+=2;\n\t}\n      if(x==5)\n\t{\n\t  puts(\"full house\");\n\t  continue;\n\t}\n     if (t[1]==1&&t[10]==1&&t[11]==1&&t[12]==1&&t[13]==1)\n       {\n\t puts(\"straight\");\n\t continue;\n       }\n       for(x=i=0;i<10;i++)\n\tif(t[i]==1&&t[i+1]==1&&t[i+2]==1&&t[i+3]==1&&t[i+4]==1)\n\t  x=1,puts(\"straight\");\n     if(x!=0)\n       continue;\n      \n      for(x=i=0;i<14;i++)\n\tif(t[i]>2)\n\t  x=1,puts(\"three card\");\n      if(x!=0)\n\tcontinue;\n\n      for(x=i=0;i<14;i++)\n\tif(t[i]>1)\n\t  x++;\n      if(x==1)\n\t{\n\t  puts(\"one pair\");\n\t    continue;\n\t}\n      if(x==2)\n\t{\n\t  puts(\"two pair\");\n\t  continue;\n\t}\n      puts(\"null\");\n    }\n  exit(0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\n\nint compar(int *val1,int *val2){\n    return *val1-*val2;\n}\nint compar1(int *val1,int *val2){\n    return *val2-*val1;\n}\nint main(void){\n    int map[5],i,line[5],t,sign;\n    for(;t=0,sign=0,memset(map,0,sizeof(map)),memset(line,0,sizeof(line)),scanf(\"%d,%d,%d,%d,%d\",&map[0],&map[1],&map[2],&map[3],&map[4]) != EOF;){\n    qsort(map,5,sizeof(int),(int (*)(const void *,const void *))compar);\n        for(i=0;i<4;i++){\n            if(map[i] == map[i+1])\n                line[t]++;\n            else\n                t++;\n        }\nqsort(line,5,sizeof(int),(int (*)(const void *,const void *))compar1);\n        if(line[0] == 3)\n            printf(\"four card\\n\");\n        if(line[0] == 2 && line[1] == 1)\n            printf(\"full house\\n\");\n        if(line[0] == 2 && line[1] != 1)\n            printf(\"three card\\n\");\n        if(line[0] == 1 && line[1] == 1)\n            printf(\"two pair\\n\");\n        if(line[0] == 1 && line[1] != 1)\n            printf(\"one pair\\n\");\n        for(i=0;i<4;i++){\n            if(map[i]+1 != map[i+1])\n                sign=1;\n        }\n        if(map[0] == 1 && map[1] == 10 && map[2] == 11 && map[3] == 12 && map[4] == 13)\n            printf(\"straight\\n\");\n        for(i=0;i<4;i++){\n            if(map[i]+1 != map[i+1])\n                sign=1;\n        }\n        if(sign != 1 && line[0] == 0)\n            printf(\"straight\\n\");\n        else if(sign == 1 && line[0] == 0)\n            printf(\"null\\n\");\n        }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a[100]={0},i,j,smp=0;\n  while(1){\n    if(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])==EOF)break;\n    for(i=0;i<5;i++){\n      for(j=i+1;j<5;j++){\n\tif(a[i] > a[j]){\n\t  smp=a[i];\n\t  a[i]=a[j];\n\t  a[j]=smp;\n\t}\n      }\n    }\n    if(a[0]==a[1]&&a[1]==a[2] &&a[2]==a[3]||a[1]==a[2]&&a[2]==a[3]&&a[3]==a[4]){\n      printf(\"four card\\n\");\n    }\n    else if(a[0]==a[1]&&a[2]==a[3]&&a[3]==a[4]||a[0]==a[1]&&a[1]==a[2]&&a[3]==a[4]){\n      printf(\"full house\\n\");\n    }\n    else if(a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]||a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){\n      printf(\"straight\\n\");\n    }\n    else if(a[0]==a[1]&&a[1]==a[2]||a[1]==a[2]&&a[2]==a[3]||a[2]==a[3]&&a[3]==a[4]){\n      printf(\"three card\\n\");\n    }\n    else if(a[0]==a[1]&&a[2]==a[3]||a[0]==a[1]&&a[3]==a[4]||a[1]==a[2]&&a[3]==a[4]){\n      printf(\"two pair\\n\");\n    }\n    else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4]){\n      printf(\"one pair\\n\");\n    }\n    else{\n      printf(\"null\\n\");\n    }\n  }\n  return 0;\n}\n    \n    "
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int *a){\n\tint i,j,tmp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = i+1;j < 5;j++){\n\t\t\tif(a[i] > a[j]){\n\t\t\t\ttmp = a[i];\n\t\t\t\ta[i] = a[j];\n\t\t\t\ta[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint isstraight(int *a){\n\tint i,flag;\n\n\tif(a[0] == 1 && a[1] == 10){\n\t\tflag = 1;\n\t\tfor(i = 1;i < 4;i++){\n\t\t\tif(a[i]+1 != a[i+1]){\n\t\t\t\tflag = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag){\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tflag = 1;\n\tfor(i = 0;i < 4;i++){\n\t\tif(a[i]+1 != a[i+1]){\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(flag){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint yaku(int *a){\n\tint i,tmp,data,cnt;\n\n\ti = 0;\n\tdata = 0;\n\twhile(i < 5){\n\t\ttmp = a[i];\n\t\ti++;\n\t\tcnt = 1;\n\t\tdata *= 10;\n\t\twhile(1){\n\t\t\tif(i == 5){\n\t\t\t\tbreak;\n\t\t\t}else if(tmp != a[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t\tcnt++;\n\t\t}\n\t\tdata += cnt;\n\t}\n\n\treturn data;\n}\n\nint check(int *a){\n\tint data;\n\n\tif(isstraight(a)){\n\t\treturn 5;\n\t}\n\n\tdata = yaku(a);\n\n\tif(data == 1112 || data == 1121 || data == 1211 || data == 2111){\n\t\treturn 2;\n\t}else if(data == 122 || data == 212 || data == 221){\n\t\treturn 3;\n\t}else if(data == 113 || data == 131 || data == 311){\n\t\treturn 4;\n\t}else if(data == 23 || data == 32){\n\t\treturn 6;\n\t}else if(data == 14 || data == 41){\n\t\treturn 7;\n\t}else{\n\t\treturn 1;\n\t}\n}\n\nint main(){\n\tint card[5];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4]) != EOF){\n\t\tsort(card);\n\t\tswitch(check(card)){\n\t\t\tcase 1:\n\t\t\t\tprintf(\"null\\n\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(void){\n  int i,j;\n  int card[5],cardnum[13];\n  char hoge;\n  int rs;//roop stop\n  int three_card_flag,\n      two_pair_flag,\n      one_pair_flag;\n\n  for(;scanf(\"%d%c%d%c%d%c%d%c%d\",\n        &card[0],&hoge,\n        &card[1],&hoge,\n        &card[2],&hoge,\n        &card[3],&hoge,\n        &card[4])==9;){\n    //initialize\n    rs=0;\n    for(i=0;i<13;i++)\n      cardnum[i]=0;\n    three_card_flag=0;\n    one_pair_flag=0;\n    two_pair_flag=0;\n\n    for(i=0;i<5;i++)\n      cardnum[card[i]-1]++;\n\n    //four card\n    for(i=0;i<13;i++)\n      if(cardnum[i]==4){\n        printf(\"four card\\n\");\n        rs=1;\n        break;\n      }\n\n    if(rs) continue;\n    ////three card\n    for(i=0;i<13;i++)\n      if(cardnum[i]==3){\n        three_card_flag=1;\n        break;\n      }\n    ////one pair\n    for(i=0;i<13;i++)\n      if(cardnum[i]==2){\n        one_pair_flag=1;\n        break;\n      }\n    i++;\n    ////two pair\n    for(;i<13;i++)\n      if(cardnum[i]==2){\n        two_pair_flag=1;\n        break;\n      }\n    //full house\n    if(three_card_flag && one_pair_flag){\n      printf(\"full house\\n\");\n      continue;\n    }\n\n    //straight\n    if( cardnum[0] &&\n        cardnum[9] &&\n        cardnum[10] &&\n        cardnum[11] &&\n        cardnum[12]){\n      printf(\"straight\\n\");\n      continue;\n    }\n    for(i=0;i<9;i++)\n      if(cardnum[i]==1)\n        if( cardnum[i+1]==1 &&\n            cardnum[i+2]==1 &&\n            cardnum[i+3]==1 &&\n            cardnum[i+4]==1){\n          printf(\"straight\\n\");\n          rs=1;\n          break;\n        }\n\n    if(rs) continue;\n    //three card\n    if(three_card_flag){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    //two pair\n    if(two_pair_flag){\n      printf(\"two pair\\n\");\n      continue;\n    }\n\n    //one pair\n    if(one_pair_flag){\n      printf(\"one pair\\n\");\n      continue;\n    }\n\n    printf(\"null\\n\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint lowwer(const void *a, const void *b)\n{\n\tconst int *x = a;\n\tconst int *y = b;\n\n\treturn (*y - *x);\n}\n\nint main(void)\n{\n\tint card[5];\n\tint ma;\n\tint i;\n\tint sum;\n\n\twhile (~scanf(\"%d,%d,%d,%d,%d\", card, card + 1, card + 2, card + 3, card + 4)){\n\t\tint bucket[16];\n\t\tint sort_bucket[16];\n\n\t\tmemset(bucket, 0, sizeof(bucket));\n\t\tfor (i = 0; i < 5; i++) bucket[card[i]]++;\n\t\tmemcpy(sort_bucket, bucket, sizeof(bucket));\n\t\tqsort(sort_bucket, 16, sizeof(int), lowwer);\n\n\t\tbucket[14] = bucket[1];\n\t\tma = sum = 0;\n\t\tfor (i = 1; i < 15; i++) if (ma < (sum = (bucket[i] > 0 ? 1 : 0) * (sum + 1))) ma = sum;\n\n\n\t\tif \t\t(sort_bucket[0] == 4) \t\t\t\t\tputs(\"four card\");\n\t\telse if (sort_bucket[0] + sort_bucket[1] == 5) \tputs(\"full house\");\n\t\telse if (ma == 5) \t\t\t\t\t\t\t\tputs(\"straight\");\n\t\telse if (sort_bucket[0] == 3)\t\t\t\t\tputs(\"three card\");\n\t\telse if (sort_bucket[0] + sort_bucket[1] == 4)\tputs(\"two pair\");\n\t\telse if (sort_bucket[0] == 2)\t\t\t\t\tputs(\"one pair\");\n\t\telse \t\t\t\t\t\t\t\t\t\t\tputs(\"null\");\n\t}\n\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main()\n{\n\tint card[5], i, j, f;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tf = 0;\n\n\t\tfor (i = 0; i < 4; i++){\n\t\t\tfor (j = 0; j < 4; j++){\n\t\t\t\tif(card[j] > card[j+1]) {int t = card[j]; card[j] = card[j+1]; card[j+1] = t;}\n\t\t\t}\n\t\t}\n\n\t\tfor(i = 0; i < 2; i++){\n\t\t\tfor(j = i; j < 3+i; j++){\n\t\t\t\tif(card[j] != card[j+1]) break;\n\t\t\t\telse if(j == 2+i) {printf(\"four card\\n\"); f = 1;}\n\t\t\t}\n\t\t}\n\n\t\tif(card[0] == card[1] && card[3] == card[4] && (card[2] == card[3] || card[2] == card[1])) {printf(\"full house\\n\"); f = 1;}\n\t\telse if((card[4] - card[3] == 1 && card[3] - card[2] == 1 && card[2] - card[1] == 1 && card[1] - card[0] == 1) || (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)) {printf(\"straight\\n\"); f = 1;}\n\n\t\tif(f != 1){\n\t\t\tfor(i = 0; i < 3; i++){\n\t\t\t\tfor(j = i; j < 2+i; j++){\n\t\t\t\t\tif(card[j] != card[j+1]) break;\n\t\t\t\t\telse if(j == 1+i) {printf(\"three card\\n\"); f = 1;}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(f != 1) if((card[0] == card[1] && ((card[2] == card[3]) || card[3] == card[4])) || (card[1] == card[2] && card[3] == card[4])) {printf(\"two pair\\n\"); f = 1;}\n\n\t\tif(f != 1){\n\t\t\tfor (i = 0; i < 5; i++){\n\t\t\t\tfor(j = 0; j < 5; j++){\n\t\t\t\t\tif(card[i] == card[j] && i != j) {printf(\"one pair\\n\"); f = 1; break;}\n\t\t\t\t}\n\n\t\t\t\tif(f == 1) break;\n\t\t\t}\n\t\t}\n\n\t\tif(f != 1) printf(\"null\\n\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <limits.h>\t\n#define inf (INT_MAX-1)\n#define INF 9223372036854775807\n#define sq(n) ((n)*(n))\n#define rep(i,n) for(i=0;i<n;i++)\n#define rev(i,n) for(i=n-1;i>=0;i--)\n#define sort(a,n) qsort(a,n,sizeof(TYPE),cmp)\n#define sort_r(a,n) qsort(a,n,sizeof(TYPE),cmp_r);\n#define TYPE int\n#define MEMSET(a) memset(a,0,sizeof(a))\nconst int mod=(int)1e09+7;\n\nint in(void){\n\tint i;scanf(\"%d\",&i);\n\treturn i;\n}\nlong long llin(void){\n\tlong long i;scanf(\"%lld\",&i);\n\treturn i;\n}\ndouble din(void){\n\tdouble i;scanf(\"%lf\",&i);\n\treturn i;\n}\nvoid chin(char s[]){\n\tscanf(\"%s\",s);\n}\nvoid print(int a){\n\tprintf(\"%d\\n\",a);\n}\nvoid llprint(long long a){\n\tprintf(\"%lld\\n\",a);\n}\nvoid dprint(double a){\n\tprintf(\"%.10f\\n\",a);\n}\nvoid print2(int a,int b){\n\tprintf(\"%d %d\\n\",a,b);\n}\nlong long max(long long a,long long b){\n\treturn a>b?a:b;\n}\nlong long min(long long a,long long b){\n\treturn a<b?a:b;\n}\nlong long llabs(long long a){\n\treturn a>0?a:-a;\n}\ndouble dmax(double a,double b){\n\treturn a>b?a:b;\n}\nint cmp(const void *a,const void *b){\n\treturn *(TYPE *)a-*(TYPE *)b;\n}\nint cmp_r(const void *a,const void *b){\n\treturn *(TYPE *)b-*(TYPE *)a;\n}\nvoid swap(int *a,int *b){\n\tint t=*a;\n\t*a=*b;\n\t*b=t;\n}\n\nint main(void){\n\tint c[5],f;\n\twhile(scanf(\"%d,%d,%d,%d,%d\",c,c+1,c+2,c+3,c+4)!=EOF){\n\t\tsort(c,5);\n\t\tf=1;\n\t\tif(c[0]==c[1]||c[1]==c[2]||c[2]==c[3]||c[3]==c[4])f=2;\n\t\tif(c[0]==c[1]&&c[2]==c[3]||c[0]==c[1]&&c[3]==c[4]||c[1]==c[2]&&c[3]==c[4])f=3;\n\t\tif(c[0]==c[1]&&c[1]==c[2]||c[1]==c[2]&&c[2]==c[3]||c[2]==c[3]&&c[3]==c[4])f=4;\n\t\tif(c[0]+1==c[1]&&c[1]+1==c[2]&&c[2]+1==c[3]&&c[3]+1==c[4])f=5;\n\t\tif(c[0]==1&&c[1]==10&&c[2]==11&&c[3]==12&&c[4]==13)f=5;\n\t\tif(c[0]==c[1]&&c[1]==c[2]&&c[3]==c[4]||c[0]==c[1]&&c[2]==c[3]&&c[3]==c[4])f=6;\n\t\tif(c[0]==c[1]&&c[1]==c[2]&&c[2]==c[3]||c[1]==c[2]&&c[2]==c[3]&&c[3]==c[4])f=7;\n\t\tswitch(f){\n\t\t\tcase 1:puts(\"null\"); break;\n\t\t\tcase 2:puts(\"one pair\"); break;\n\t\t\tcase 3:puts(\"two pair\"); break;\n\t\t\tcase 4:puts(\"three card\"); break;\n\t\t\tcase 5:puts(\"straight\"); break;\n\t\t\tcase 6:puts(\"full house\"); break;\n\t\t\tcase 7:puts(\"four card\"); break;\n\t\t\tdefault: break;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n  int i,j,s,max,c[5],n;\n  while(~scanf(\"%d\",&n)){\n    int c[15]={0};\n    c[n]++;\n    max=s=1;\n    for(i=0;i<4;i++){\n      scanf(\",%d\",&n);\n      if(c[n]==0)s++;\n      c[n]++;\n      if(max<c[n])max=c[n];\n    }\n    if(max==4)printf(\"four card\\n\");\n    if(max==3){\n      if(s==2)printf(\"full house\\n\");\n      else    printf(\"three card\\n\");\n    }\n    if(max==2){\n      if(s==3)printf(\"two pair\\n\");\n      if(s==4)printf(\"one pair\\n\");\n    }\n    if(max==1){\n      if(c[2]==0){\n\tc[14]=c[1];\n\tc[1]=0;\n      }\n      for(i=s=0;c[i]==0;i++);\n      for(j=0;j<5;j++)s+=c[i+j];\n      if(s==5)printf(\"straight\\n\");\n      else    printf(\"null\\n\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\n\nint compar(int *val1,int *val2){\n    return *val1-*val2;\n}\nint compar1(int *val1,int *val2){\n    return *val2-*val1;\n}\nint main(void){\n    int map[5],i,line[5],t,sign;\n    for(;t=0,sign=0,memset(map,0,sizeof(map)),memset(line,0,sizeof(line)),scanf(\"%d,%d,%d,%d,%d\",&map[0],&map[1],&map[2],&map[3],&map[4]) != EOF;){\n    qsort(map,5,sizeof(int),(int (*)(const void *,const void *))compar);\n        for(i=0;i<4;i++){\n            if(map[i] == map[i+1])\n                line[t]++;\n            else\n                t++;\n        }\nqsort(line,5,sizeof(int),(int (*)(const void *,const void *))compar1);\n        if(line[0] == 3)\n            printf(\"four card\\n\");\n        if(line[0] == 2 && line[1] == 1)\n            printf(\"full house\\n\");\n        if(line[0] == 2 && line[1] != 1)\n            printf(\"three card\\n\");\n        if(line[0] == 1 && line[1] == 1)\n            printf(\"two pair\\n\");\n        if(line[0] == 1 && line[1] != 1)\n            printf(\"one pair\\n\");\n        for(i=0;i<4;i++){\n            if(map[i]+1 != map[i+1])\n                sign=1;\n        }\n        if(map[0] == 1 && map[1] == 10 && map[2] == 11 && map[3] == 12 && map[4] == 13)\n            printf(\"straight\\n\");\n        for(i=0;i<4;i++){\n            if(map[i]+1 != map[i+1])\n                sign=1;\n        }\n        if(sign != 1 && line[0] == 0)\n            printf(\"straight\\n\");\n        else if(sign == 1 && line[0] == 0)\n            printf(\"null\\n\");\n        }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nvoid sort(int card[5]);\nvoid sort2(int count[4]);\n\nint main(void){\n\tint card[5], count[4];\n\tint i;\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF){\n\t\tfor(i = 0;i < 4;i++){\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tsort(card);\n\n\t\tfor(i = 1;i < 5;i++){\n\t\t\tif(card[0] == card[i]){\n\t\t\t\tcount[0]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor(i = count[0] + 1;i < 5;i++){\n\t\t\tif(card[count[0]] == card[i]){\n\t\t\t\tcount[1]++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(count[0] + count[1] <= 4){\n\t\t\tfor(i = count[0] + count[1] + 1;i < 5;i++){\n\t\t\t\tif(card[count[0] + count[1]] == card[i]){\n\t\t\t\t\tcount[2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count[0] + count[1] + count[2] <= 4){\n\t\t\t\tfor(i = count[0] + count[1] + count[2] + 1;i < 5;i++){\n\t\t\t\t\tif(card[count[0] + count[1] + count[2]] == card[i]){\n\t\t\t\t\t\tcount[3]++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsort2(count);\n\n\t\tif(count[0] == 4){\n\t\t\tprintf(\"four card\\n\");\n\t\t} else if(count[0] == 3 && count[1] == 2){\n\t\t\tprintf(\"full house\\n\");\n\t\t} else if((card[0] == card[1] - 1 && card[0] == card[2] - 2 && card[0] == card[3] - 3 && card[0] == card[4] - 4)|| (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)){\n\t\t\tprintf(\"straight\\n\");\n\t\t} else if(count[0] == 3){\n\t\t\tprintf(\"three card\\n\");\n\t\t} else if(count[0] == 2 && count[1] == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t} else if(count[0] == 2){\n\t\t\tprintf(\"one pair\\n\");\n\t\t} else {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid sort(int card[5]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 5;i++){\n\t\tfor(j = 4;j > i;j--){\n\t\t\tif(card[j] < card[j - 1]){\n\t\t\t\ttemp = card[j - 1];\n\t\t\t\tcard[j - 1] = card[j];\n\t\t\t\tcard[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid sort2(int count[4]){\n\tint i, j, temp;\n\n\tfor(i = 0;i < 4;i++){\n\t\tfor(j = 3;j > i;j--){\n\t\t\tif(count[j] > count[j - 1]){\n\t\t\t\ttemp = count[j - 1];\n\t\t\t\tcount[j - 1] = count[j];\n\t\t\t\tcount[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint n_card(const int* hand);\nint straight(int* hand);\n\nint main(void)\n{\n\tint hand[5],j1,j2;\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",hand,hand+1,hand+2,hand+3,hand+4)!=EOF)\n\t{\n\t\tj1=n_card(hand);\n\t\tj2=straight(hand);\n\t\tif(j1==1&&j2==1) puts(\"null\");\n\t\telse if(j2==5) puts(\"straight\");\n\t\telse{\n\t\t\tswitch(j1){\n\t\t\tcase 7:\n\t\t\t\tputs(\"four card\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tputs(\"full house\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tputs(\"three card\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tputs(\"two pair\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tputs(\"one pair\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint n_card(const int* hand)\n{\n\tint i,j,cnt[14];\n\n\tfor(i=1;i<=13;i++){\n\t\tcnt[i]=0;\n\t\tfor(j=0;j<5;j++){\n\t\t\tif(hand[j]==i) cnt[i]++;\n\t\t}\n\t}\n\n\tfor(i=1;i<=13;i++){\n\t\tif(cnt[i]==4){\n\t\t\treturn 7;\n\t\t}\n\t\telse if(cnt[i]==3){\n\t\t\tfor(j=i+1;j<=13;j++){\n\t\t\t\tif(cnt[j]==2){\n\t\t\t\t\treturn 6;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 4;\n\t\t}\n\t\telse if(cnt[i]==2){\n\t\t\tfor(j=i+1;j<=13;j++){\n\t\t\t\tif(cnt[j]==2){\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t\telse if(cnt[j]==3){\n\t\t\t\t\treturn 6;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 2;\n\t\t}\n\t}\n\treturn 1;\n}\n\nint straight(int* hand)\n{\n\tint i,j,t;\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i+1;j<5;j++){\n\t\t\tif(hand[i]>hand[j]){\n\t\t\t\tt=hand[i];\n\t\t\t\thand[i]=hand[j];\n\t\t\t\thand[j]=t;\n\t\t\t}\n\t\t}\n\t}\n\tif(hand[4]-hand[3]==1&&hand[3]-hand[2]==1&&hand[2]-hand[1]==1){\n\t\tif(hand[1]-hand[0]==1||(hand[4]==13&&hand[0]==1)) return 5;\n\t}\n\n\treturn 1;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0, j= 0, m = 0;\n        int count = 0;\n        int t = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while(scanf(\"%d,%ad,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF)\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                /*\n                for(i = 0 ;i < P; i++)\n                {\n                        printf(\"%d\\n\",card[i]);\n                }*/\n\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i + 1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n/*----------------------------------------------------------*/\n                if(count == 0)\n                {\n                        for(i = 0 ;i < P; i++)\n                        {\n                                c[i] = card[i] + i;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if(t == 4||\n                        (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two paor\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                count = 0;\n\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid bubble(int a[5]){\n    int i,j,tmp;\n    \n    for(i=0;i<4;i++){\n        for(j=0;j<4-i;j++){\n            if(a[j]>a[j+1]){\n                tmp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=tmp;\n            }\n        }\n    }\n}\n\nint CheckFour(const int a[5]){\n    if(a[0]==a[3] || a[1]==a[4]){\n        return 1;\n    }\n    return 0;\n}\n\nint CheckThree(const int a[5]){\n    if(a[0]==a[2] || a[1]==a[3] || a[2]==a[4]){\n        return 1;\n    }\n    return 0;\n}\n\n//int CheckThree(const int a[5]){\n//    if(((a[0]==a[2])&&(a[2]!=a[3])) || ((a[1]==a[3])&&( (a[0]!=a[1])||(a[3]!=a[4]) )) || ((a[2]==a[4])&&(a[1]!=a[2]))){\n//        \n//    \n//}\n\nint CheckPair(const int a[5]){\n    int i,cnt=0;\n    \n    for(i=0;i<4;i++){\n        if(a[i]==a[i+1]){\n            cnt++;\n        }\n    }\n    return (cnt);\n}\n\nint CheckStraight(const int a[5]){\n    int i;\n    \n    if(a[0]==1){\n        for(i=1;i<4;i++){\n            if(a[i+1]!=a[i]+1)break;\n            if(i==3 && a[i+1]==a[i]+1) return 1;\n        }\n    }\n    //for(i=0;i<5;i++){\n    //    b[i]=a[i];\n    //    if(b[i]>=10)b[i]-=13;\n    //}\n    //bubble(b);\n    \n    for(i=0;i<4;i++){\n        if(a[i+1]!=a[i]+1)break;\n        if(i==3 && a[i+1]==a[i]+1) return 1;\n    }\n    return 0;\n}\n\nint main(void){\n    int a[5]={};\n    \n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) != EOF){\n        bubble(a);\n\n        if(CheckFour(a))puts(\"four card\");\n        else if(CheckThree(a)){\n            if(CheckPair(a)==3)puts(\"full house\");\n            else if(CheckPair(a)==2)puts(\"three card\");\n        }\n        else if(CheckPair(a)==2)puts(\"two pair\");\n        else if(CheckPair(a)==1)puts(\"one pair\");\n        else if(CheckStraight(a))puts(\"straight\");\n        else puts(\"null\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void) {\n\tint card[5];\n\tint swap;\n\tint i, j;\n\tint pair[2];\n\t_Bool straight;\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n\t\tpair[0] = pair[1] = 0;\n\t\tstraight = 1;\n\t\tfor (i = 5; i > 0; i--)\n\t\t\tfor (j = 0; j < i; j++)\n\t\t\t\tif( card[j] > card[j+1]) {\n\t\t\t\t\tswap = card[j];\n\t\t\t\t\tcard[j] = card[j+1];\n\t\t\t\t\tcard[j+1] = swap;\n\t\t\t\t}\n\t\tfor (i = j = 0; i < 4; i++) {\n\t\t\tif( card[i]+1 != card[i+1] )\n\t\t\t\tstraight = 0;\n\t\t\tif( card[i] == card[i+1]) {\n\t\t\t\tif( pair[j] == 0)\n\t\t\t\t\tpair[j] = 2;\n\t\t\t\telse\n\t\t\t\t\tpair[j]++;\n\t\t\t}\n\t\t\telse if( j < 2 ? pair[j] : 0)\n\t\t\t\tj++;\n\t\t}\n\t\tif( card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)\n\t\t\tstraight = 1;\n\t\tif( pair[0] == 4)\n\t\t\tprintf(\"four card\\n\");\n\t\telse if( (pair[0] == 3 && pair[1] == 2) || (pair[0] == 2 && pair[1] == 3))\n\t\t\tprintf(\"full house\\n\");\n\t\telse if( straight)\n\t\t\tprintf(\"straight\\n\");\n\t\telse if( pair[0] == 3 || pair[1] == 3)\n\t\t\tprintf(\"three card\\n\");\n\t\telse if( pair[0] == 2 && pair[1] == 2)\n\t\t\tprintf(\"two pair\\n\");\n\t\telse if( pair[0] == 2 || pair[1] == 2)\n\t\t\tprintf(\"one pair\\n\");\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int array[])\n{\n\tint i, j;\n\t\n\tfor (i = 0; i < 5 - 1; i++){\n\t\tfor (j = 0; j < 5 - i - 1; j++){\n\t\t\tif (array[j] > array[j + 1]){\n\t\t\t\tint tmp = array[j];\n\t\t\t\tarray[j] = array[j + 1];\n\t\t\t\tarray[j + 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tint i;\n\tint card[5];\n\t\n\twhile (scanf(\"%d\", &card[0]) != EOF){\n\t\tint count[5] = {0};\n\t\tint s_flag = 1;\n\t\tint null_flag = 1;\n\t\t\n\t\tfor (i = 1; i < 5; i++){\n\t\t\tscanf(\",%d\", &card[i]);\n\t\t}\n\t\tsort(card);\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tint j;\n\t\t\t\n\t\t\tfor (j = 0; j < i; j++){\n\t\t\t\tif (card[i] == card[j]){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif (count[j] > 1){\n\t\t\t\t\t\tnull_flag = 0;\n\t\t\t\t\t\ts_flag = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == i){\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t\tif (i != 0 && card[i - 1] + 1 != card[i]){\n\t\t\t\tif (card[i - 1] != 1){\n\t\t\t\t\ts_flag = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tint j;\n\t\t\tif (s_flag == 1){\n\t\t\t\tputs(\"straight\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (count[i] == 4){\n\t\t\t\tputs(\"four card\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (count[i] == 3){\n\t\t\t\tfor (j = 0; j < 5; j++){\n\t\t\t\t\tif (count[j] == 2){\n\t\t\t\t\t\tputs(\"full house\");\n\t\t\t\t\t\ti = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (i != 6){\n\t\t\t\t\tputs(\"three card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (count[i] == 2){\n\t\t\t\tfor (j = 0; j < 5; j++){\n\t\t\t\t\tif (count[j] == 3){\n\t\t\t\t\t\tputs(\"full house\");\n\t\t\t\t\t\ti = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if (j != i && count[j] == 2){\n\t\t\t\t\t\tputs(\"two pair\");\n\t\t\t\t\t\ti = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (i != 6){\n\t\t\t\t\tputs(\"one pair\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count[i] > 1){\n\t\t\t\tnull_flag = 0;\n\t\t\t}\n\t\t}\n\t\tif (null_flag == 1 && s_flag == 0){\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a[100]={0},i,j,smp=0;\n  while(1){\n    if(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]) == EOF)break;\n    for(i=0;i<5;i++){\n      for(j=i+1;j<5;j++){\n\tif(a[i] > a[j]){\n\t  smp = a[i];\n\t  a[i] = a[j];\n\t  a[j] =smp;\n\t}\n      }\n    }\n    if(a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3]||a[1]==a[2]&&a[2]==a[3]&&a[3]==a[4]){\n      printf(\"four card\\n\");\n    }\n    else if(a[0]==a[1]&&a[2]==a[3]&&a[3]==a[4]||a[0]==a[1]&&a[1]==a[2]&&a[3]==a[4]){\n      printf(\"full house\\n\");\n    }\n    else if(a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4]||a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){\n      printf(\"straight\\n\");\n    }\n    else if(a[0]==a[1]&&a[1]==a[2]||a[1]==a[2]&&a[2]==a[3]||a[2]==a[3]&&a[3]==a[4]){\n      printf(\"three card\\n\");\n    }\n    else if(a[0]==a[1]&&a[2]==a[3]||a[0]==a[1]&&a[3]==a[4]||a[1]==a[2]&&a[3]==a[4]){\n      printf(\"two pair\\n\");\n    }\n    else if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4]){\n      printf(\"one pair\\n\");\n    }\n    else{\n      printf(\"null\\n\");\n    }\n  }\n  return 0;\n}\n    \n    "
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint cmp_int(const void *a, const void *b) {\n    return *(int*)a - *(int*)b;\n}\n\nint main(void) {\n    int c[5];\n    int cmb[5], m, incr, i;\n    char *hand;\n\n    while (scanf(\"%d\", &c[0]) == 1) {\n        for (i = 1; i < 5; i++) {\n            scanf(\",%d\", &c[i]);\n            cmb[i] = 0;\n        }\n        qsort(c, 5, sizeof(int), cmp_int);\n        \n        for (i = 1, m = 1, incr = 0; i < 5; i++) {\n            m = c[i-1] == c[i]? m + 1: 1;\n            cmb[m]++;\n            incr += (c[i] - c[i-1]) == 1;\n        }\n        if (incr == 4 || (c[0] == 1 && c[1] == 10 && incr == 3)) {\n            hand = \"straight\";\n        }\n        else if (cmb[4]) {\n            hand = \"four card\";\n        }\n        else if (cmb[3] && cmb[2] == 2) {\n            hand = \"full house\";\n        }\n        else if (cmb[3]) {\n            hand = \"three card\";\n        }\n        else if (cmb[2] == 2) {\n            hand = \"two pair\";\n        }\n        else if (cmb[2]) {\n            hand = \"one pair\";\n        }\n        else {\n            hand = \"null\";\n        }\n        puts(hand);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define N 13\nint main(){\n  int i,j,n1,n2,n3,n4,n5;\n  int data[N];\n    while (scanf(\"%d,%d,%d,%d,%d\",&n1,&n2,&n3,&n4,&n5)!=EOF){\n      for (i=0;i<N;i++)\n        data[i]=0;\n      data[n1-1]++;data[n2-1]++;data[n3-1]++;data[n4-1]++;data[n5-1]++;\n      int three=0,two=0,four=0,one=0,straight=0;\n      for (i=0;i<N;i++){\n        if (data[i]==4)\n          four++;\n        else if (data[i]==3)\n          three++;\n        else if (data[i]==2)\n          two++;\n        if (i<10)\n          if (data[i%N]==1 &&\n              data[(i+1)%N]==1 &&\n              data[(i+2)%N]==1 &&\n              data[(i+3)%N]==1 &&\n              data[(i+4)%N]==1)\n            straight++;\n      }\n      if (four==1)\n        printf(\"four card\\n\");\n      else if ((three==1) && (two==1))\n        printf(\"full house\\n\");\n      else if (straight==1)\n        printf(\"straight\\n\");\n      else if (three==1)\n        printf(\"three card\\n\");\n      else if (two==2)\n        printf(\"two pair\\n\");\n      else if (two==1)\n        printf(\"one pair\\n\");\n      else\n        printf(\"null\\n\");\n    }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nvoid sort(int *data)\n{\n\tint i,j,tmp;\n\n\tfor(i=0;i<4;i++)\n\t{\n\t\tfor(j=i+1;j>0;j--)\n\t\t{\n\t\t\tif(data[j]<data[j-1])\n\t\t\t{\n\t\t\t\ttmp=data[j];\n\t\t\t\tdata[j]=data[j-1];\n\t\t\t\tdata[j-1]=tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint card[5];\n\tint count[5];\n\tint i,j,flg4,flg3,flg2,flgst;\n\tchar hand[11];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",card,card+1,card+2,card+3,card+4)!=EOF)\n\t{\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tcount[i]=0;\n\t\t}\n\t\tstrcpy(hand,\"null\");\n\t\tflg4=0;flg3=0;flg2=0;flgst=1;\n\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tfor(j=i;j<5;j++)\n\t\t\t{\n\t\t\t\tif(card[i]==card[j])\n\t\t\t\t{\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tif(count[i]==4)\n\t\t\t{\n\t\t\t\tflg4=1;\n\t\t\t}\n\t\t\telse if(count[i]==3)\n\t\t\t{\n\t\t\t\tflg3=1;\n\t\t\t}\n\t\t\telse if(count[i]==2)\n\t\t\t{\n\t\t\t\tflg2++;\n\t\t\t}\n\t\t}\n\n\t\tif(flg4)\n\t\t{\n\t\t\tstrcpy(hand,\"four card\");\n\t\t}\n\t\telse if(flg3)\n\t\t{\n\t\t\tif(flg2==2)\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"full house\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"three card\");\n\t\t\t}\n\t\t}\n\t\telse if(flg2)\n\t\t{\n\t\t\tif(flg2==2)\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"two pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"one pair\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsort(card);\n\n\t\t\tfor(i=1;i<5;i++)\n\t\t\t{\n\t\t\t\tif(card[i]!=card[0]+i)\n\t\t\t\t{\n\t\t\t\t\tflgst=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flgst&&card[0]==1)\n\t\t\t{\n\t\t\t\tflgst=1;\t\t\t\n\t\t\t\tfor(i=1;i<5;i++)\n\t\t\t\t{\n\t\t\t\t\tif(card[i]!=card[0]+i+8)\n\t\t\t\t\t{\n\t\t\t\t\t\tflgst=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flgst)\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"straight\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"null\");\n\t\t\t}\n\t\t}\n\t\tputs(hand);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\tint main(){\n\t\tint a[5],s[14],p[14],i,j,c,g,h,d;\n\t\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\t\tg=0;\n\t\t\th=0;\n\t\t\td=0;\n\t\t\tc=0;\n\t\t\tfor(i=0;i<14;i++){\n\t\t\t\ts[i]=i+1;\n\t\t\t\tp[i]=0;\n\t\t\t}\n\t\t\ts[13]=1;\n\t\t\tfor(i=0;i<13;i++)\n\t\t\t\tfor(j=0;j<5;j++)\n\t\t\t\tif(a[j]==s[i]){\n\t\t\t\tp[i]++;\n\t\t\t\tif(a[j]==1)\n\t\t\t\t\tp[13]++;\n\t\t\t}\n\t\t\tfor(i=0;i<10;i++)\n\t\t\t\tif(p[i]==1){\n\t\t\t\t\t\n\t\t\t\t\tfor(j=i+1;j<i+5;j++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(p[j]!=1)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif(j==i+4){\n\t\t\t\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\tif(c>0)\n\t\t\t\tcontinue;\n\t\t\tfor(i=0;i<13;i++){\n\t\t\t\tif(p[i]==4)d++;\n\t\t\t\tif(p[i]==3)g++;\n\t\t\t\tif(p[i]==2)h++;\n\t\t\t}\n\t\t\tif(d>0)\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\telse if(g>0&&h>0)\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\telse if(g>0&&h==0)\n\t\t\t\tprintf(\"three card\\n\");\n\t\t\telse if(g==0&&h==1)\n\t\t\t\tprintf(\"one pair\\n\");\n\t\t\telse if(g==0&&h==2)\n\t\t\t\tprintf(\"two pair\\n\");\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\t\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void){\n\tint i,j,tmp,n[5];\n\twhile(scanf(\"%d\",&n[0])!=EOF){\n\t\tfor(i=1;i<5;i++){\n\t\t\tscanf(\",%d\",&n[i]);\n\t\t}\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=i;j<5;j++){\n\t\t\t\tif(n[i]>n[j]){\n\t\t\t\t\ttmp=n[i];\n\t\t\t\t\tn[i]=n[j];\n\t\t\t\t\tn[j]=tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(n[1]==n[2]&&n[2]==n[3]&&(n[3]==n[4]||n[3]==n[0])){\n\t\t\tputs(\"four card\");\n\t\t}else if(n[0]==n[1]&&n[1]==n[2]&&n[3]==n[4]||n[0]==n[1]&&n[2]==n[3]&&n[3]==n[4]){\n\t\t\tputs(\"full house\");\n\t\t}else if(n[0]==n[1]-1&&n[1]==n[2]-1&&n[2]==n[3]-1&&n[3]==n[4]-1||n[0]==1&&n[1]==10&&n[2]==11&&n[3]==12&&n[4]==13){\n\t\t\tputs(\"straight\");\n\t\t}else if(n[0]==n[1]&&n[1]==n[2]||n[1]==n[2]&&n[2]==n[3]||n[2]==n[3]&&n[3]==n[4]){\n\t\t\tputs(\"three card\");\n\t\t}else if(n[0]==n[1]&&(n[2]==n[3]||n[3]==n[4])||n[1]==n[2]&&n[3]==n[4]){\n\t\t\tputs(\"two pair\");\n\t\t}else if(n[0]==n[1]||n[1]==n[2]||n[2]==n[3]||n[3]==n[4]){\n\t\t\tputs(\"one pair\");\n\t\t}else{\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void) {\n\tint card[5];\n\tint swap;\n\tint i, j;\n\tint pair[2];\n\t_Bool straight;\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n\t\tpair[0] = pair[1] = 0;\n\t\tstraight = 1;\n\t\tfor (i = 5; i > 0; i--)\n\t\t\tfor (j = 0; j < i; j++)\n\t\t\t\tif( card[j] > card[j+1]) {\n\t\t\t\t\tswap = card[j];\n\t\t\t\t\tcard[j] = card[j+1];\n\t\t\t\t\tcard[j+1] = swap;\n\t\t\t\t}\n\t\tfor (i = j = 0; i < 4; i++) {\n\t\t\tif( card[i]+1 != card[i+1] )\n\t\t\t\tstraight = 0;\n\t\t\tif( card[i] == card[i+1]) {\n\t\t\t\tif( pair[j] == 0)\n\t\t\t\t\tpair[j] = 2;\n\t\t\t\telse\n\t\t\t\t\tpair[j]++;\n\t\t\t}\n\t\t\telse if( j < 2 ? pair[j] : 0)\n\t\t\t\tj++;\n\t\t}\n\t\tif( card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)\n\t\t\tstraight = 1;\n\t\tif( pair[0] == 4)\n\t\t\tprintf(\"four card\\n\");\n\t\telse if( (pair[0] == 3 && pair[1] == 2) || (pair[0] == 2 && pair[1] == 3))\n\t\t\tprintf(\"full house\\n\");\n\t\telse if( straight)\n\t\t\tprintf(\"straight\\n\");\n\t\telse if( pair[0] == 3 || pair[1] == 3)\n\t\t\tprintf(\"three card\\n\");\n\t\telse if( pair[0] == 2 && pair[1] == 2)\n\t\t\tprintf(\"two pair\\n\");\n\t\telse if( pair[0] == 2 || pair[1] == 2)\n\t\t\tprintf(\"one pair\\n\");\n\t\telse\n\t\t\tprintf(\"null\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void){\n\tint i,j,tmp,n[5];\n\twhile(scanf(\"%d\",&n[0])!=EOF){\n\t\tfor(i=1;i<5;i++){\n\t\t\tscanf(\",%d\",&n[i]);\n\t\t}\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=i;j<5;j++){\n\t\t\t\tif(n[i]>n[j]){\n\t\t\t\t\ttmp=n[i];\n\t\t\t\t\tn[i]=n[j];\n\t\t\t\t\tn[j]=tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(n[1]==n[2]&&n[2]==n[3]&&(n[3]==n[4]||n[3]==n[0])){\n\t\t\tputs(\"four card\");\n\t\t}else if(n[0]==n[1]&&n[1]==n[2]&&n[3]==n[4]||n[0]==n[1]&&n[2]==n[3]&&n[3]==n[4]){\n\t\t\tputs(\"full house\");\n\t\t}else if((n[0]==n[1]-1||n[0]==1)&&n[1]==n[2]-1&&n[2]==n[3]-1&&n[3]==n[4]-1){\n\t\t\tputs(\"straight\");\n\t\t}else if(n[0]==n[1]&&n[1]==n[2]||n[1]==n[2]&&n[2]==n[3]||n[2]==n[3]&&n[3]==n[4]){\n\t\t\tputs(\"three card\");\n\t\t}else if(n[0]==n[1]&&(n[2]==n[3]||n[3]==n[4])||n[1]==n[2]&&n[3]==n[4]){\n\t\t\tputs(\"two pair\");\n\t\t}else if(n[0]==n[1]||n[1]==n[2]||n[2]==n[3]||n[3]==n[4]){\n\t\t\tputs(\"one pair\");\n\t\t}else{\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(){\n\tint num[5],i,j,k,l,m,key,flag=0,count=0;\n\t\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&num[0],&num[1],&num[2],&num[3],&num[4])!=EOF){\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++)if(num[i]==num[j] && i!=j){\n\t\t\tflag=1;\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tif(count==2)flag=2;\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++)if(i!=k && j!=k && num[i]==num[k] && num[j]==num[k])flag=3;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]>num[j]){\n\t\t\t\tkey=num[i];\n\t\t\t\tnum[i]=num[j];\n\t\t\t\tnum[j]=key;\n\t\t\t}\n\t\t}\n\t}\n\tif(num[0]==num[1]-1 && num[1]==num[2]-1 && num[2]==num[3]-1 && num[3]==num[4]-1 || num[0]==1 && num[1]==10 && num[2]==11 && num[3]==12 && num[4]==13)flag=4;\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++){\n\t\t\t\t\tif(i!=k && j!=k && num[i]==num[k] && num[j]==num[k]){\n\t\t\t\t\t\tfor(l=0;l<5;l++){\n\t\t\t\t\t\t\tfor(m=l;m<5;m++)if(num[l]==num[l+m] && l!=i && l!=j && l!=k && l!=m)flag=5;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=0;i<5;i++){\n\t\tfor(j=i;j<5;j++){\n\t\t\tif(num[i]==num[j] && i!=j){\n\t\t\t\tfor(k=0;k<5;k++){\n\t\t\t\t\tif(i!=k && j!=k && num[i]==num[k] && num[j]==num[k]){\n\t\t\t\t\t\tfor(l=0;l<5;l++)if(i!=l && j!=l && k!=l && num[i]==num[l] && num[j]==num[l] && num[k]==num[l] )flag=6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tswitch(flag){\n\tcase 0:\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\tcase 1:\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\tcase 2:\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\tcase 3:\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\tcase 4:\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\tcase 5:\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\tcase 6:\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t}\n\t\tflag=0;\n\t\tcount=0;\n\t}\nreturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0, j= 0, m = 0;\n        int count = 0;\n        int t = 0;\n        int memo = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) !=EOF)\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                /*\n                for(i = 0 ;i < P; i++)\n                {\n                        printf(\"%d\\n\",card[i]);\n                }*/\n\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i+1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n/*----------------------------------------------------------*/\n                if(count == 0)\n                {\n                        for(i = 0 ;i < P; i++)\n                        {\n                                c[i] = card[i] + i;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if(t == 4||\n                        (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two paor\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n                        printf(\"full house\\n\");\n                }\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                count = 0;\n\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nmain(){\n  int a[5],i,mai[14]={0},max=0,cnt=0,flg=0;\n  while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n    for(i=0,max=0,flg=0,cnt=0;i<=13;i++)mai[i]=0;\n    for(i=0;i<5;i++)mai[a[i]]++;\n\n    for(i=1;i<=13;i++){\n      if(max<mai[i])max=mai[i];\n      if(mai[i]>=4){\n\tprintf(\"four card\\n\");\n\tflg=1;\n      }\n    }\n    if(flg==1)continue;\n\n    if(max==3){\n      for(i=1;i<=13;i++){\n\tif(mai[i]==2){\n\t  printf(\"full house\\n\");\n\t  flg=1;\n\t}\n      }\n    }\n    if(flg==1)continue;\n\n    for(i=2,cnt=0;i<=13;i++){\n      if(mai[i]==1){\n\tfor(;i<=13;i++){\n\t  if(mai[i]==1){\n\t    cnt++;\n\t  }\n\t  else break;\n\t}\n      }\n    }\n    if(cnt==4&&mai[1]==1&&(mai[2]==1||mai[13]==1)&&(!(mai[2]==1&&mai[13]==1))){\n      cnt++;\n    }\n    if(cnt==5){\n      printf(\"straight\\n\");\n      continue;\n    }\n\n    if(max==3){\n      printf(\"three card\\n\");\n      continue;\n    }\n\n    if(max==2){\n      for(i=1;i<=13;i++){\n\tif(mai[i]==2)flg++;\n\tif(flg==2){\n\t  printf(\"two pair\\n\");\n\t  break;\n\t}\n      }\n    }\n    if(flg==2)continue;\n\n    if(max==2){\n      printf(\"one pair\\n\");\n      continue;\n    }\n    printf(\"null\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint a[5];\nvoid sort(void) {\n  int n, i;\n  for (i = 0; i < 5; i ++) {\n    if (a[i - 1] > a[i]) {\n      n = a[i]; a[i] = a[i - 1]; a[i - 1] = n; i -= 2;\n      if (i < 0) i ++;\n    }\n  }\n}\nint main() {\n  while (scanf(\"%d,%d,%d,%d,%d\", &a[0], &a[1], &a[2], &a[3], &a[4]) != EOF) {\n    sort();\n    if ((a[0] == a[1] || a[3] == a[4]) && a[1] == a[2] && a[2] == a[3]) printf(\"four card\\n\");\n    else if (a[0] == a[1] && a[3] == a[4] && (a[1] == a[2] || a[2] == a[3])) printf(\"full house\\n\");\n    else if ((a[1] == a[0] + 1 && a[2] == a[1] + 1 && a[3] == a[2] + 1 && a[4] == a[3] + 1) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)) printf(\"straight\\n\");\n    else if ((a[0] == a[1] && a[1] == a[2]) || (a[1] == a[2] && a[2] == a[3]) || (a[2] == a[3] && a[3] == a[4])) printf(\"three card\\n\");\n    else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) printf(\"two pair\\n\");\n    else if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) printf(\"one pair\\n\");\n    else printf(\"null\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n \nextern int compare_int(const void* , const void* );\n \nmain()\n{ int i,j,cnt;\n  int a[5];\n \n  while(5 == scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]))\n  {      qsort(a,5,sizeof(int),compare_int ); \n \n         cnt = 0;\n         for(i=0;i<4;i++)\n           for(j=i+1;j<5;j++)\n             cnt += (a[i]==a[j])?1:0;\n/*   printf(\"cnt=%d\\n\",cnt); */\n        if(cnt==1)\n          printf(\"one pair\\n\");\n        else if(cnt==2)\n          printf(\"two pair\\n\");\n        else if(cnt==3)\n          printf(\"three card\\n\");\n        else if(cnt==4)\n          printf(\"full house\\n\");\n        else if(cnt==6)\n          printf(\"four card\\n\");\n        else if((a[0]+1 == a[1] &&\n           a[0]+2 == a[2] &&\n           a[0]+3 == a[3] &&\n           a[0]+4 == a[4])||\n           (a[0] == 1 &&\n            a[1] == 10 &&\n            a[2] == 11 &&\n            a[3] == 12 &&\n            a[4] == 13 ))\n          printf(\"straight\\n\");\n        else\n          printf(\"null\\n\");\n  }\n \nreturn(0);\n}\n \nint compare_int(const void* a, const void* b)\n{\n    return ( *(int*)a - *(int*)b );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void){\n\tint card[14] , buf[5] = {0} , i , flag , check_3 , cnt;\n\twhile(scanf(\"%d,%d,%d,%d,%d\" , &buf[0] , &buf[1] , &buf[2] , &buf[3] , &buf[4])!=EOF){\n\t\tfor(i=1;i<14;i++){\n\t\t\tcard[i] = 0;\n\t\t}\n\t\tfor(i=0;i<5;i++){\n\t\t\tcard[buf[i]]++;\n\t\t}\n\t\tflag = 0;\n\t\tcheck_3 = 0;\n\t\tcnt = 0;\n\n\t\tfor(i=1;i<=13;i++){\n\t\t\tif(card[i] == 4){\n\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t\tif(card[i] == 3){\n\t\t\t\tcheck_3 = 1;\n\t\t\t}\n\t\t}\n\t\tif(flag) continue;\n\n\t\tif(check_3){\n\t\t\tfor(i=1;i<=13;i++){\n\t\t\t\tif(card[i] == 2){\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\tflag = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag) continue;\n\n\t\tfor(i=1;i<=9;i++){\n\t\t\tif(card[i]==1&&card[i+1]==1&&card[i+2]==1&&card[i+3]==1&&card[i+4]==1){\n\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t\tif(flag) continue;\n\t\tif(card[10]==1&&card[11]==1&&card[12]==1&&card[13]==1&&card[1]==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(check_3){\n\t\t\tprintf(\"three card\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor(i=1;i<=13;i++){\n\t\t\tif(card[i] == 2) cnt++;\n\t\t}\n\t\tif(cnt == 2){\n\t\t\tprintf(\"two pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(cnt == 1){\n\t\t\tprintf(\"one pair\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tprintf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint max(int x, int y)\n{\n\tif (x > y){\n\t\treturn (x);\n\t}\n\t\n\treturn (y);\n}\n\nvoid swap(int *i, int *j)\n{\n\t*i += *j;\n\t*j = *i - *j;\n\t*i -= *j;\n}\n\nint main(void)\n{\n\tint card[13];\n\tchar str[7][11] = {{\"null\"}, {\"one pair\"}, {\"two pair\"}, {\"three card\"}, \n\t\t\t\t\t{\"staight\"}, {\"full house\"}, {\"four card\"}};\n\tint ans;\n\tint tmp;\n\tint i, j;\n\tchar c[5];\n\tint count;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\tans = 0;\n\t\ttmp = 0;\n\t\tmemset(card, 0, sizeof(card));\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tcard[c[i] - 1]++;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (card[i]){\n\t\t\t\tfor (j = i, count = 0; count < 5; count++, j++){\n\t\t\t\t\tif (!card[j]){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (j == 12 && count == 3){\n\t\t\t\t\t\tj = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (j == 12){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count){\n\t\t\t\ttmp = 4;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 12 - 1; i++){\n\t\t\tfor (j = 0; j < 11 - i; j++){\n\t\t\t\tif (card[j] < card[j + 1]){\n\t\t\t\t\tswap(&card[j], &card[j + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (card[0] == 4){\n\t\t\tans = 6;\n\t\t}\n\t\telse if (card[0] == 3 && card[1] == 2){\n\t\t\tans = 5;\n\t\t}\n\t\telse if (card[0] == 3){\n\t\t\tans = 3;\n\t\t}\n\t\telse if (card[0] == 2 && card[1] == 2){\n\t\t\tans = 2;\n\t\t}\n\t\telse if (card[0] == 2){\n\t\t\tans = 1;\n\t\t}\n\t\t\n\t\tprintf(\"%s\\n\", str[max(ans, tmp)]);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "// AOJ Volume 0 Problem 0036\n\n#include <stdio.h>\n#include <string.h>\n\n\nint check_4card(int card[])\n{\n    int i;\n    \n    for (i = 1; i <= 13; i++){\n        if (card[i] == 4){\n            return (1);\n        }\n    }\n    \n    return (0);\n}\n\nint check_fullhouse(int card[])\n{\n    int i;\n    \n    for (i = 1; i <= 13; i++){\n        if (card[i] == 1){\n            return (0);\n        }\n    }\n    \n    return (1);\n}\n\nint check_3card(int card[])\n{\n    int i;\n    \n    for (i = 1; i <= 13; i++){\n        if (card[i] == 3){\n            return (1);\n        }\n    }\n    \n    return (0);\n}\n\nint check_2pair(int card[])\n{\n    int i;\n    int cnt;\n\n    cnt = 0;\n    for (i = 1; i <= 13; i++){\n        if (card[i] == 2){\n            cnt++;\n        }\n    }\n    \n    if (cnt == 2){\n        return (1);\n    }\n    return (0);\n}\n\nint check_1pair(int card[])\n{\n    int i;\n    int cnt;\n\n    cnt = 0;\n    for (i = 1; i <= 13; i++){\n        if (card[i] == 2){\n            cnt++;\n        }\n    }\n    \n    if (cnt == 1){\n        return (1);\n    }\n    return (0);\n}\n\nint check_straight(int card[])\n{\n    int i, j;\n\n    for (i = 1; i <= 13; i++){\n        if (card[i] != 0){\n            break;\n        }\n    }\n    \n    if (i == 1 && card[2] == 0){\n        i = 10;\n    }\n    \n    for (j = i; j < i + 5; j++){\n        if (card[j] != 1){\n            return (0);\n        }\n    }\n    return (1);\n}\n\nint main(void)\n{\n    int card[15];\n\tint c1, c2, c3, c4, c5;\n    int i, j;\n\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c1, &c2, &c3, &c4, &c5) != EOF){\n        memset(card, 0, sizeof(card));\n        \n        card[c1]++;\n        card[c2]++;\n        card[c3]++;\n        card[c4]++;\n        card[c5]++;\n        card[14] = card[1];\n        \n        if (check_4card(card) == 1){\n            printf(\"four card\\n\");\n        }\n        else if (check_fullhouse(card) == 1){\n            printf(\"full house\\n\");\n        }\n        else if (check_straight(card) == 1){\n            printf(\"straight\\n\");\n        }\n        else if (check_3card(card) == 1){\n            printf(\"three card\\n\");\n        }\n        else if (check_2pair(card) == 1){\n            printf(\"two pair\\n\");\n        }\n        else if (check_1pair(card) == 1){\n            printf(\"one pair\\n\");\n        }\n        else {\n            printf(\"null\\n\");\n        }\n\t}\n    \n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++){b[i]=0;}\n      for(int i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<13-4;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 0038\n *\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0038\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint diff1_Aas14_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(hand[i]== 1 || hand[j] == 1){\n                if(hand[i]== 1){\n                    if((14 - hand[j]) == 1)\n                        n++;\n                }else{ /*hand[j] == 1*/\n                    if((14 - hand[i]) == 1)\n                        n++;\n                }\n            }else{\n                if(abs(hand[i] -  hand[j]) == 1){\n                    n++;\n                }\n            }\n        }\n    }\n    return n;\n}\n\n\nint diff1_Aas1_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(abs(hand[i] -  hand[j]) == 1){\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\nint eq_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(hand[i] == hand[j]){\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\nint test_fourcard(int* hand){\n    return eq_count(hand) == 6;\n}\n\nint test_fullhouse(int* hand){\n    return eq_count(hand) == 4;\n}\n\nint test_straight(int* hand){\n    return diff1_Aas14_count(hand) == 4 || diff1_Aas1_count(hand) == 4;\n}\n\nint test_threecard(int* hand){\n    return eq_count(hand) == 3;\n}\n\nint test_twopair(int* hand){\n    return eq_count(hand) == 2;\n}\n\nint test_onepair(int* hand){\n    return eq_count(hand) == 1;\n}\n\n\n\nchar* test(int* hand){\n    if(test_fourcard(hand)){\n        return \"four card\";\n    }\n\n    if(test_fullhouse(hand)){\n        return \"full house\";\n    }\n\n    if(test_threecard(hand)){\n        return \"three card\";\n    }\n\n    if(test_twopair(hand)){\n        return \"two pair\";\n    }\n\n    if(test_onepair(hand)){\n        return \"one pair\";\n    }\n\n    if(test_straight(hand)){\n        return \"straight\";\n    }\n    return \"null\";\n}\n\n\nint main(){\n    int hand[5];\n    char* r;\n\n    while(scanf(\"%d,%d,%d,%d,%d\", hand, hand+1, hand+2, hand+3, hand+4) == 5){\n        r = test(hand);\n        printf(\"%s\\n\", r);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n\tint card[5],i,j,t;\n\t\n\twhile(0<=scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])){\n\t\t\n\t\tfor(i=0;i<5;i++){\n\t\t\tcard[i]=(card[i]+11)%13;\n\t\t}\n\t\t\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=i;j<5;j++){\n\t\t\t\tif(card[i]>card[j]){\n\t\t\t\t\tt=card[i];\n\t\t\t\t\tcard[i]=card[j];\n\t\t\t\t\tcard[j]=t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(card[0]==0 && card[1]==1 && card[2]==2 && card[3]==3 && card[4]==12){\n\t\t\tprintf(\"straight\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t\n\t\tif(card[0]==card[3] || card[1]==card[4]){\n\t\t\tprintf(\"four card\\n\");\n\t\t}else if((card[0]==card[2] && card[3]==card[4]) || (card[0]==card[1] && card[2]==card[4])){\n\t\t\tprintf(\"full house\\n\");\n\t\t}else if(card[1]-card[0]==1 && card[2]-card[1]==1 && card[3]-card[2]==1 && card[4]-card[3]==1){\n\t\t\tprintf(\"straight\\n\");\n\t\t}else if(card[0]==card[2] || card[1]==card[3] || card[2]==card[4]){\n\t\t\tprintf(\"three card\\n\");\n\t\t}else if((card[0]==card[1]  && (card[3]==card[2] || card[3]==card[4])) || ((card[0]==card[1] || card[1]==card[2])&&card[3]==card[4])){\n\t\t\tprintf(\"two pair\\n\");\n\t\t}else if(card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4]){\n\t\t\tprintf(\"one pair\\n\");\n\t\t}else{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint a[9],i;\n\nint cmp(const void *a,const void *b){\n\treturn *(int *)a - *(int *)b;\n}\nint main(){\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n\t\tqsort(a,5,sizeof(int),cmp);\n\t\tif(a[1]==a[2] && a[2]==a[3] && (a[0]==a[1] || a[4]==a[1]))printf(\"four cards\\n\");\n\t\telse if((a[0]==a[1] && a[2]==a[3] && a[3]==a[4]) || ((a[3]==a[4] && a[0]==a[1] && a[1]==a[2])))printf(\"full house\\n\");\n\t\telse if(a[0]==1 && a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13)printf(\"straight\\n\");\n\t\telse if(a[4]==a[3]+1 && a[3]==a[2]+1 && a[2]==a[1]+1 && a[1]==a[0]+1)printf(\"straight\\n\");\n\t\telse if((a[0]==a[1] && a[1]==a[2]) || (a[1]==a[2] && a[2]==a[3]) || (a[3]==a[4] && a[4]==a[5]))printf(\"three cards\\n\");\n\t\telse if((a[0]==a[1] && (a[2]==a[3] || a[3]==a[4])) || (a[1]==a[2] && a[3]==a[4]))printf(\"two paris\\n\");\n\t\telse if(a[0]==a[1] || a[1]==a[2] || a[2]==a[3] || a[3]==a[4])printf(\"one pair\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar judge(int hand[5]);\nvoid sort(int *hand);\n\nint main(void)\n{\n\tint hand[5];\n\tchar rank;\n\tchar OF;\n\twhile (scanf(\" %c,\", &OF) != EOF){\n\t\thand[0] = OF - '0';\n\t\t\n\tscanf(\"%d,%d,%d,%d\", &hand[1], &hand[2]\n\t\t\t\t\t\t\t  , &hand[3], &hand[4]);\n\t\n\tsort(hand);\n\trank = judge(hand);\n\t\n\tswitch (rank){\n\t\t\n\t\tcase ('S'):\n\t\tprintf(\"four card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('A'):\n\t\tprintf(\"full house\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('B'):\n\t\tprintf(\"straight\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('C'):\n\t\tprintf(\"three card\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('D'):\n\t\tprintf(\"two pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('E'):\n\t\tprintf(\"one pair\\n\");\n\t\tbreak;\n\t\t\n\t\tcase ('F'):\n\t\tprintf(\"null\\n\");\n\t\tbreak;\n\t}\n\t}\n\treturn (0);\n}\n\nvoid sort(int *hand)\n{\n\tint i, j;\n\tint tmp;\n\tfor (i = 0; i < 5; i++){\n\t\tfor (j = 0; j < 5; j++){\n\t\t\tif (hand[i] < hand[j]){\n\t\t\t\ttmp = hand[i];\n\t\t\t\thand[i] = hand[j];\n\t\t\t\thand[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nchar judge(int hand[5])\n{\n\tint pair = 0;\n\tint card_3 = 0, card_4 = 0;\n\tchar rank;\n\tint straight = 0;\n\tint i;\n\tint sum = 0;\n\t\n\t\n\tfor (i = 0; i < 5; i++){\n\t\tsum += hand[i];\n\t\tif (hand[i] == hand[i + 1]){\n\t\t\tpair++;\n\t\t\tif (hand[i] == hand[i + 2]){\n\t\t\t\tpair--;\n\t\t\t\tcard_3++;\n\t\t\t\tif (hand[i] == hand[i + 3]){\n\t\t\t\t\tcard_3--;\n\t\t\t\t\tcard_4++;\n\t\t\t\t\ti++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hand[i] + 1 == hand[i + 1]){\n\t\t\tstraight++;\n\t\t}\n\t}\n\t\n\tif (card_4 == 1){\n\t\trank = 'S';\n\t}\n\telse if (card_3 == 1 && pair == 1){\n\t\trank = 'A';\n\t}\n\telse if (straight == 4){\n\t\trank = 'B';\n\t}\n\telse if (straight == 3 && sum == 47){\n\t\trank = 'B';\n\t}\n\t\n\telse if (card_3 == 1){\n\t\trank = 'C';\n\t}\n\telse if (pair == 2){\n\t\trank = 'D';\n\t}\n\telse if (pair == 1){\n\t\trank = 'E';\n\t}\n\telse {\n\t\trank = 'F';\n\t}\n\t\n\treturn (rank);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n\n\tint i,j,tmp,card[5]={0},pair[5],count[4];\n\tchar *rank[30];\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&card[0],&card[1],&card[2],&card[3],&card[4])!=EOF){\n\t\tfor(i=0;i<5;i++) pair[i]=0;\n\t\tfor(i=0;i<4;i++) count[i]=0;\n\t\t*rank=\"\";\n\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=1;j<5-i;j++){\n\t\t\t\tif(card[j-1]>card[j]){\n\t\t\t\t\ttmp=card[j-1];\n\t\t\t\t\tcard[j-i]=card[j];\n\t\t\t\t\tcard[j]=tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(i=0;i<5;i++){\n\t\t\tfor(j=0;j<5;j++){\n\t\t\t\tif(card[i]==card[j]){\n\t\t\t\t\tpair[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(i=0;i<5;i++){\n\t\t\tif(pair[i]==4){\n\t\t\t\t*rank=\"four card\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(pair[i]==2){\n\t\t\t\tfor(j=0;j<5;j++){\n\t\t\t\t\tif(pair[j]==3){\n\t\t\t\t\t\t*rank=\"full house\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(*rank=\"full house\") break;\n\t\t\t}\n\t\t\telse if(pair[i]==3){\n\t\t\t\tfor(j=0;j<5;j++){\n\t\t\t\t\tif(pair[j]==2){\n\t\t\t\t\t\t*rank=\"full house\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(*rank=\"full house\") break;\n\t\t\t\t*rank=\"three card\";\n\t\t\t}\n\t\t\tif(pair[i]==2) count[1]++;\n\t\t}\n\t\tif(card[0]+1==card[1] && card[0]+2==card[2] && card[0]+3==card[3] && card[0]+4==card[4]) *rank=\"straight\";\n\t\telse if(card[0]+1==card[1] && card[0]+2==card[2] && card[0]+3==card[3] && card[0]-12==card[4]) *rank=\"straight\";\n\t\telse if(count[1]==4) *rank=\"two pair\";\n\t\telse if(count[1]==2 && *rank==\"\") *rank=\"one pair\";\n\t\telse if(*rank==\"\") *rank=\"null\";\n\n\t\tprintf(\"%s\\n\",rank);\n\n\t}\n\n\n\n\n\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++)b[i]=0;\n      for(int i=0;i<13;i++) b[a[i]-1]++;\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<13-4;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n \nint main(){\n  int n[5],m,i,j;\n \n  while(scanf(\"%d,%d,%d,%d,%d\",&n[0],&n[1],&n[2],&n[3],&n[4])!=EOF){\n    for(i=0;i<4;i++) \n      for(j=i+1;j<5;j++) \n\tif(n[i]>n[j]) { \n\t  m=n[i];\n\t  n[i]=n[j];\n\t  n[j]=m;\n\t}\n\n    if((n[0]+1==n[1] && n[1]+1==n[2] && n[2]+1==n[3] && n[3]+1==n[4]) ||(n[0]==1 && n[1]==10 && n[2]==11 && n[3]==12 && n[4]==13)) \n      printf(\"straight\\n\");\n\n    else if((n[0]==n[1] && n[0]==n[2] && n[0]==n[3]) || (n[1]==n[2] && n[1]==n[3] && n[1]==n[4])) \n      printf(\"four card\\n\");\n\n    else if((n[0]==n[1] && n[0]==n[2] && n[3]==n[4]) || (n[0]==n[1] && n[2]==n[3] && n[2]==n[4])) \n      printf(\"full house\\n\");\n\n    else if((n[0]==n[1] && n[1]==n[2]) || (n[1]==n[2] && n[2]==n[3]) || (n[2]==n[3] && n[3]==n[4])) \n      printf(\"three card\\n\");\n\n    else if((n[0]==n[1] && (n[2]==n[3] || n[3]==n[4])) || (n[1]==n[2] && n[3]==n[4]))\n      printf(\"two pair\\n\");\n\n    else if(n[0]==n[1] || n[1]==n[2] || n[2]==n[3] || n[3]==n[4]) \n      printf(\"one pair\\n\");\n\n    else \n      printf(\"null\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\nint compare(const void *a, const void *b) {\n\treturn *(int*)a - *(int*)b;\n}\nint main() {\n\tint h[5], c[4];\n\twhile (scanf(\"%d,%d,%d,%d,%d \", h, h+1, h+2, h+3, h+4) != EOF) {\n\t\tqsort(h, 5, sizeof(int), compare);\n\t\tc[0] = h[0] == h[1];\n\t\tc[1] = h[1] == h[2];\n\t\tc[2] = h[2] == h[3];\n\t\tc[3] = h[3] == h[4];\n\t\tif (c[0] + c[1] + c[2] + c[3] == 1) {\n\t\t\tputs(\"one pair\");\n\t\t}\n\t\telse if (c[0] > c[1] && c[2] != c[3]) {\n\t\t\tputs(\"two pair\");\n\t\t}\n\t\telse if (c[0] < c[1] && c[2] < c[3]) {\n\t\t\tputs(\"two pair\");\n\t\t}\n\t\telse if (c[0] == c[1] && c[1] != c[2] && c[2] == c[3]) {\n\t\t\tputs(\"three card\");\n\t\t}\n\t\telse if (c[0] < c[1] && c[2] > c[3]) {\n\t\t\tputs(\"three card\");\n\t\t}\n\t\telse if (c[0] & c[1] & !c[2] & c[3]) {\n\t\t\tputs(\"full house\");\n\t\t}\n\t\telse if (c[0] & !c[1] & c[2] & c[3]) {\n\t\t\tputs(\"full house\");\n\t\t}\n\t\telse if (c[0] & c[1] & c[2] & !c[3]) {\n\t\t\tputs(\"four card\");\n\t\t}\n\t\telse if ((!c[0]) & c[1] & c[2] & c[3]) {\n\t\t\tputs(\"four card\");\n\t\t}\n\t\telse if (h[1]-h[0] + h[2]-h[1] + h[3]-h[2] + h[4]-h[3] == 4) {\n\t\t\tputs(\"straight\");\n\t\t}\n\t\telse if (h[0]==1 && h[1]==10 && h[2]==11 && h[3]==12 && h[4]==13) {\n\t\t\tputs(\"straight\");\n\t\t}\n\t\telse {\n\t\t\tputs(\"null\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(void){\n  int i,j;\n  int hand[5];\n  int tmp,flag;\n  int pair,three,four;\n\n  while(1){\n    if(scanf(\"%d,\",&hand[0])==EOF)break;\n    for(i=1;i<5;i++)scanf(\"%d,\",&hand[i]);\n\n    for(i=0;i<4;i++){\n      for(j=i+1;j<5;j++){\n\tif(hand[i]>hand[j]){\n\t  tmp = hand[i];\n\t  hand[i] = hand[j];\n\t  hand[j] = tmp;\n\t}\n      }\n    }\n\n    pair = 0;\n    three = 0;\n    four = 0;\n\n    j = 1;\n    for(i=0;i<4;i++){\n      while(hand[i] == hand[j]){\n\tj++;\n\tif(j==5)break;\n      }\n\n      if(j - i == 2)pair++;\n      if(j - i == 3)three++;\n      if(j - i == 4)four++;\n\n      i = j-1;\n      j++;\n    }\n\n    flag = 0;\n    if(four){\n      printf(\"four card\\n\");\n      flag = 1;\n    }else if(three){\n      if(pair){\n\tprintf(\"full house\\n\");\n\tflag = 1;\n      }else{\n\tprintf(\"three card\\n\");\n\tflag = 1;\n      }\n    }else if(pair){\n      if(pair == 1){\n\tprintf(\"one pair\\n\");\n\tflag = 1;\n      }else{\n\tprintf(\"two pair\\n\");\n\tflag = 1;\n      }\n    }else{\n      if(hand[4]-hand[3] == 1){\n\tif(hand[3]-hand[2] == 1){\n\t  if(hand[2]-hand[1] == 1){\n\t    if(hand[1]-hand[0] == 1){\n\t      printf(\"straight\\n\");\n\t      flag = 1;\n\t    }else if(hand[0] == 1){\n\t      if(hand[1] == 10){\n\t\tif(hand[2] == 11){\n\t\t  if(hand[3] == 12){\n\t\t    if(hand[4] == 13){\n\t\t      printf(\"straight\\n\");\n\t\t      flag = 1;\n\t\t    }\n\t\t  }\n\t\t}\n\t      } \n\t    }\n\t  }\n\t}\n      }\n    }\n\n    if(!flag)printf(\"null\\n\");\n\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define SIZE 5\n\n/* prototype declaration */\nvoid playPoker();\nint isStraight(int *card);\nint sameNum(int *card);\nvoid sort(int *card);\nvoid swap(int *x, int *y);\n\nint main(int argc, const char *argv[])\n{\n\tplayPoker();\t\n\treturn 0;\n}\n\nvoid playPoker()\n{\n\tint card[SIZE];\n\twhile(scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4])!=EOF){\n\t\tsort(card);\n\t\tif(isStraight(card)){ \n\t\t\tprintf(\"straight\\n\");\n\t\t}else if(sameNum(card)){\n\t\t\tswitch(sameNum(card)){\n\t\t\t\tcase 6:\n\t\t\t\t\tprintf(\"four card\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tprintf(\"full house\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tprintf(\"three card\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tprintf(\"two pair\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}else{\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n}\n\nint isStraight(int *card)\n{\n\tint i;\n\n\t/* one case */\n\tif(card[0]==1 && card[1]==10 && card[2]==11 && card[3]==12 && card[4]==13) return 1;\t\n\t\n\t/* other cases */\n\tfor(i=SIZE-1; i>0; i--){\n\t\tif(card[i]-card[i-1]!=1) return 0; /* if differential bw card[i] and card[i-1] is 1 or not. */\n\t}\n\treturn 1;\n}\n\nint sameNum(int *card)\n{\n\tint i, j, cnt=0;\n\t\n\tfor(i=0; i<SIZE; i++)\n\t\tfor(j=SIZE-1; j>i; j--)\n\t\t\tif(card[i]==card[j]) cnt++;\n\t\n\treturn cnt;\n}\n\nvoid sort(int *card)\n{\n\tint i, j, min;\n\tfor(i=0; i<SIZE; i++){\n\t\tmin = i;\n\t\tfor(j=i+1; j<SIZE; j++){\n\t\t\tif(card[j]<card[min])\n\t\t\t \tmin = j;\n\t\t}\n\n\t\tswap(&card[i], &card[min]);\n\t}\n}\n\nvoid swap(int *x, int *y)\n{\n\tint tmp;\n\ttmp = *x;\n\t*x = *y;\n\t*y = tmp;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n    int c[5];\n    while(scanf(\"%d\",&c[0])!=EOF){\n        int i,j,n,work,count,flag,flag2=0;\n\n        for(i=1;i<5;i++)scanf(\",%d\",&c[i]);\n        for(i=0;i<4;i++){\n            for(j=i+1;j<5;j++){\n                if(c[i]>c[j]){\n                    work=c[i];\n                    c[i]=c[j];\n                    c[j]=work;\n                }\n            }\n        }\n        count=0;\n        flag=0;\n        if(c[0]==1 &&c[1]==10){\n            flag=1;\n            c[0]=9;\n        }\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1]-1)count++;\n        }\n        if(count==4)flag2=1;\n\n        if(flag==1)c[0]=1;\n\n        n=0;\n        for(i=0;i<4;i++)\n            for(j=i+1;j<5;j++)\n                if(c[i]==c[j])\n                    n++;\n        switch( n ){\n            case 1:\n                puts(\"one pair\");\n                break;\n            case 2:\n                puts(\"two pair\");\n                break;\n            case 3:\n                puts(\"three card\");\n                break;\n            case 4:\n                puts(\"full house\");\n                break;\n            case 6:\n                puts(\"four card\");\n            break;\n            default:\n                if(flag2==1)puts(\"straight\");\n                else puts(\"null\");\n        }\n\n\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nvoid sort(int *data)\n{\n\tint i,j,tmp;\n\n\tfor(i=0;i<4;i++)\n\t{\n\t\tfor(j=i+1;j>0;j--)\n\t\t{\n\t\t\tif(data[j]<data[j-1])\n\t\t\t{\n\t\t\t\ttmp=data[j];\n\t\t\t\tdata[j]=data[j-1];\n\t\t\t\tdata[j-1]=tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint card[5];\n\tint count[5];\n\tint i,j,flg4,flg3,flg2,flgst;\n\tchar hand[11];\n\n\twhile(scanf(\"%d,%d,%d,%d,%d\",card,card+1,card+2,card+3,card+4)!=EOF)\n\t{\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tcount[i]=0;\n\t\t}\n\t\tstrcpy(hand,\"null\");\n\t\tflg4=0;flg3=0;flg2=0;flgst=1;\n\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tfor(j=i;j<5;j++)\n\t\t\t{\n\t\t\t\tif(card[i]==card[j])\n\t\t\t\t{\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i=0;i<5;i++)\n\t\t{\n\t\t\tif(count[i]==4)\n\t\t\t{\n\t\t\t\tflg4=1;\n\t\t\t}\n\t\t\telse if(count[i]==3)\n\t\t\t{\n\t\t\t\tflg3=1;\n\t\t\t}\n\t\t\telse if(count[i]==2)\n\t\t\t{\n\t\t\t\tflg2++;\n\t\t\t}\n\t\t}\n\n\t\tif(flg4)\n\t\t{\n\t\t\tstrcpy(hand,\"four card\");\n\t\t}\n\t\telse if(flg3)\n\t\t{\n\t\t\tif(flg2==2)\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"full house\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"three card\");\n\t\t\t}\n\t\t}\n\t\telse if(flg2)\n\t\t{\n\t\t\tif(flg2==2)\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"two pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"one pair\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsort(card);\n\n\t\t\tfor(i=1;i<5;i++)\n\t\t\t{\n\t\t\t\tif((card[i]!=card[0]+i)&&(card[i]!=card[0]+i+8))\n\t\t\t\t{\n\t\t\t\t\tflgst=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flgst)\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"straight\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(hand,\"no pair\");\n\t\t\t}\n\t\t}\n\t\tputs(hand);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n  int c[5],i;\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    int t[14]={0};\n    int max=0,c2=0;\n    for(i=0;i<5;i++){\n      t[c[i]]++;\n      if(t[c[i]]>max){\n\tmax=t[c[i]];\n      }\n    }\n    for(i=0;i<13;i++){\n      if(t[i]==2){\n\tc2++;\n      }\n    }\n    if(max==4) printf(\"four card\\n\");\n    else if(max==3){\n      if(c2==1)printf(\"full house\\n\");\n      else     printf(\"three card\\n\");\n    }\n    else if(max==2){\n      if(c2==2)printf(\"two pair\\n\");\n      else     printf(\"one pair\\n\");\n    }\n    else if(max==1){\n      for(i=0;t[i]==0;i++);\n      if(t[i+1]==1&&t[i+2]==1&&t[i+3]==1&&t[i+4]==1)printf(\"straight\\n\");\n      else if(t[1]==1&&t[10]==1&&t[11]==1&&t[12]==1&&t[13]==1)printf(\"straight\\n\"); \n      else printf(\"null\\n\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main(){\n   int a[5],b[13];\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(int i=0;i<13;i++)b[i]=0;\n      for(int i=0;i<13;i++) b[a[i]-1]++;\n      \n      for(int i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(int i=0;i<13;i++){\n         for(int j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2){\n               printf(\"two pair\\n\");\n               go to exit;\n            }\n            \n         }\n      }\n\n\n     for(int i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"two pair\\n\"); goto exit;}\n     }\n\n     for(int i=0;i<13-4;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit;\n      \n     \n   }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void) {\n   int c[10], key = 1, C, i, j;\n   while(scanf(\"%d,%d,%d,%d,%d\", &c[1], &c[2], &c[3], &c[4], &c[5]) != EOF){\n       key = 1;\n       for ( i = 1; key; i++ ) {\n           key = 0;\n           for ( j = 5; j > i; j-- ) {\n               if ( c[j] < c[j - 1]) {\n                   C = c[j];\n                   c[j] = c[j - 1];\n                   c[j - 1] = C;\n                   key = 1;\n                }\n            }\n        }\n        /*for ( i = 1; i <= 5; i++) printf(\"%d \", c[i]);*/\n        if ( c[1] == c[4] || c[2] == c[5] ) printf(\"four card\\n\");\n        else if ( c[1] == c[2] && c[3] == c[5] ) printf(\"full house\\n\");\n        else if ( c[1] == c[3] && c[4] == c[5] ) printf(\"full house\\n\");\n        else if ( c[2] == c[1] + 1 && c[3] == c[2] + 1 && c[4] == c[3] + 1 && c[5] == c[4] + 1 ) printf(\"straight\\n\");\n        else if ( c[1] == 1 && c[2] == 10 && c[3] == 11 && c[4] == 12 && c[5] == 13 ) printf(\"straight\\n\");\n        else if ( c[1] == c[3] || c[2] == c[4] || c[3] == c[5] ) printf(\"three card\\n\");\n        else if ( c[1] == c[2] && c[3] == c[4] ) printf(\"two pair\\n\");\n        else if ( c[1] == c[2] && c[4] == c[5] ) printf(\"two pair\\n\");\n        else if ( c[2] == c[3] && c[4] == c[5] ) printf(\"two pair\\n\");\n        else if ( c[1] == c[2] || c[2] == c[3] || c[3] == c[4] || c[4] == c[5] ) printf(\"one pair\\n\");\n        else printf(\"null\\n\");\n    }\n\n   return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint a[5],temp;\n\nvoid sort()\n{\n\tint i,j;\n\tfor(i=0;i<5;i++){\n\t\tfor(j=0;j<5;j++){\n\t\t\tif(a[i]<a[j]){\n\t\t\t\ttemp=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint i,j;\n\twhile((scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4]))!=EOF){\n\t\tsort();\n\t\tif((a[0]==a[1]&&a[0]==a[2]&&a[0]==a[3])||(a[1]==a[2]&&a[1]==a[3]&&a[1]==a[4]))printf(\"four card\\n\");\n\t\telse if((a[0]==a[1]&&a[0]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[3]&&a[2]==a[4]))printf(\"full house\\n\");\n\t\telse if((a[0]==a[1]&&a[0]==a[2])||(a[1]==a[2]&&a[1]==a[3])||(a[2]==a[3]&&a[2]==a[4]))printf(\"three card\\n\");\n\t\telse if((a[0]==a[1]&&a[2]==a[3])||(a[1]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[3]==a[4]))printf(\"two pair\\n\");\n\t\telse if(a[0]==a[1]||a[1]==a[2]||a[2]==a[3]||a[3]==a[4])printf(\"one pair\\n\");\n\t\telse if((a[0]==a[1]-1&&a[1]==a[2]-1&&a[2]==a[3]-1&&a[3]==a[4]-1)||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13))printf(\"straight\\n\");\n\t\telse printf(\"null\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n int hand[6],box[14],i,j;\n while(scanf(\"%d,%d,%d,%d,%d\",&hand[1],&hand[2],&hand[3],&hand[4],&hand[5])!=EOF){\n  for(i=1;i<=13;i++){box[i]=0;}for(i=1;i<=5;i++)for(j=1;j<14;j++)if(hand[i]==j)box[j]++;\n  for(i=1;i<=13;i++){\n   if(box[i]==4){printf(\"four card\\n\");break;}\n   else if(box[i]==3){\n      for(j=1;j<=13;j++){\n       if(box[j]==2){printf(\"full house\\n\");break;}\n       if(j==13){printf(\"three card\\n\");break;}\n      }break;\n   }\n   else if(box[i]==2){\n      for(j=i+1;j<=13;j++){\n       if(box[j]==3){printf(\"full house\\n\");break;}\n       if(box[j]==2){printf(\"two pair\\n\");break;}\n       if(j==13){printf(\"one pair\\n\");break;}\n      }break;\n   }\n   else if(i==13){box[0]=box[13];\n      for(j=1;j<=10;j++){\n       if(box[j]==1&&box[j+1]==1&&box[j+2]==1&&box[j+3]==1&&box[(j+4)%13]==1){\n        printf(\"straight\\n\");break;\n       }\n       if(j==10){printf(\"null\\n\");break;}\n      }break;\n   }\n  }\n }\n return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\nint a[13],i,b,c,d,e,f,two=0,three=0,x=13,four=0;\nwhile(scanf(\"%d,%d,%d,%d,%d\\n\",&b,&c,&d,&e,&f)!=EOF){\nfor(i=0;i<13;i++){\na[i]=0;\n}\na[b-1]++;\nif(x>b-1){\nx=b-1;\n}\na[c-1]++;\nif(x>c-1){\nx=c-1;\n}\na[d-1]++;\nif(x>d-1){\nx=d-1;\n}\na[e-1]++;\nif(x>e-1){\nx=e-1;\n}\na[f-1]++;\nif(x>f-1){\nx=f-1;\n}\nfor(i=0;i<13;i++){\nif(a[i]==2){\ntwo++;\n}\nif(a[i]==3){\nthree++;\n}\nif(a[i]==4){\nfour++;\n}\n}\nif(four==1){\nprintf(\"four card\\n\");\n}\nelse if(two==1 && three==1){\nprintf(\"full house\\n\");\n}\nelse if(two==1){\nprintf(\"one pair\\n\");\n}\nelse if(two==2){\nprintf(\"two pair\\n\");\n}\nelse if(three==1){\nprintf(\"three card\\n\");\n}\nelse if(a[x]==1 && a[x+1]==1 && a[x+2]==1 && a[x+3]==1 && a[x+4]==1){\nprintf(\"straight\\n\");\n}\nelse if(a[9]==1 && a[10]==1 && a[11]==1 && a[12]==1 && a[0]==1){\nprintf(\"straight\\n\");\n}\nelse{\nprintf(\"null\\n\");\n}\ntwo=0,three=0,x=13,four=0;\n}\nreturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "/*\nAizuOnline A0038\nPoker Hand\n\n*/\n#include <stdio.h>\n#include <stdlib.h>\n\nextern int compare_int(const void* , const void* );\n\nmain()\n{ int i,j,cnt;\n  int a[5];\n\n  while(EOF != scanf(\"%d %d %d %d %d\",&a[0],&a[1],&a[2],&a[3],&a[4]))\n  {      qsort(a,5,sizeof(int),compare_int );\n\n         cnt = 0;\n         for(i=0;i<4;i++)\n           for(j=i+1;j<5;j++)\n             cnt += (a[i]==a[j])?1:0;\n/*   printf(\"cnt=%d\\n\",cnt); */\n        if(cnt==1)\n          printf(\"one pair\\n\");\n        else if(cnt==2)\n          printf(\"two pair\\n\");\n        else if(cnt==3)\n          printf(\"three card\\n\");\n        else if(cnt==4)\n          printf(\"full house\\n\");\n        else if(cnt==6)\n          printf(\"four card\\n\");\n        else if((a[0]+1 == a[1] &&\n           a[0]+2 == a[2] &&\n           a[0]+3 == a[3] &&\n           a[0]+4 == a[4])||\n           (a[0] == 1 &&\n            a[1] == 10 &&\n            a[2] == 11 &&\n            a[3] == 12 &&\n            a[4] == 13 ))\n          printf(\"straight\\n\");\n        else\n          printf(\"null\\n\");\n/*\n    for(i=0;i<5;i++)\n      printf(\"%d \",a[i]);\n    printf(\"\\n\");\n*/\n  }\n\nreturn(0);\n}\n\nint compare_int(const void* a, const void* b)\n{\n\treturn ( *(int*)a - *(int*)b );\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n\n  int in[5]={0};\n  while(scanf(\"%d,\",&in[0])!=EOF){\n    scanf(\"%d,%d,%d,%d\",&in[1],&in[2],&in[3],&in[4]);\n\n    int sort[5]={0};\n    int i,j;\n    int datesu=0;\n\n    for(i=0;i<5;i++){    \n      for(j=datesu-1;j>=0;j--){\n\tif(in[i]>sort[j])\n\t  sort[j+1]=sort[j];\n\telse{\n\t  sort[j+1]=in[i];\n\t  break;\n\t}\n      }\n      if(j==-1)\n\tsort[0]=in[i];\n      datesu++;\n    }\n    \n    \n    if(sort[0]==sort[3]||sort[1]==sort[4]){\n      puts(\"four card\");\n    }else if(sort[0]==sort[2]){\n      if(sort[3]==sort[4])\n\tputs(\"full house\");\n      else\n\tputs(\"three card\");\n    }else if(sort[2]==sort[4]){\n      if(sort[0]==sort[1])\n\tputs(\"full house\");\n      else\n\tputs(\"three house\");\n    }else if(sort[1]==sort[3]){\n      puts(\"three card\");\n    }else if((sort[0]==sort[1]&&sort[2]==sort[3])||(sort[0]==sort[1]&&sort[3]==sort[4])||(sort[1]==sort[2]&&sort[3]==sort[4])){\n      puts(\"two pair\");\n    }else if(sort[0]==sort[1]||sort[1]==sort[2]||sort[2]==sort[3]||sort[3]==sort[4]){\n      puts(\"one pair\");\n    }else if(sort[4]==1&&sort[0]==13){\n      puts(\"straight\");\n    }else if(sort[4]-sort[0]==-4){\n      puts(\"straight\");\n    }else\n      puts(\"null\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n    int main(){\n        int a[5],s[14],p[14],i,j,c,g,h,d;\n        while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n            g=0;\n            h=0;\n            d=0;\n            c=0;\n            for(i=0;i<14;i++){\n                s[i]=i+1;\n                p[i]=0;\n            }\n            s[13]=1;\n            for(i=0;i<13;i++)\n                for(j=0;j<5;j++)\n                if(a[j]==s[i]){\n                p[i]++;\n                if(a[j]==1)\n                    p[13]++;\n            }\n            for(i=0;i<10;i++)\n                if(p[i]==1){\n                     \n                    for(j=i+1;j<i+5;j++){\n                         \n                        if(p[j]!=1)\n                            break;\n                        if(j==i+4){\n                            printf(\"straight\\n\");\n                            c++;\n                        }\n                    }\n                     \n            }\n            if(c>0)\n                continue;\n            for(i=0;i<13;i++){\n                if(p[i]==4)d++;\n                if(p[i]==3)g++;\n                if(p[i]==2)h++;\n            }\n            if(d>0)\n                printf(\"four card\\n\");\n            else if(g>0&&h>0)\n                printf(\"full house\\n\");\n            else if(g>0&&h==0)\n                printf(\"three card\\n\");\n            else if(g==0&&h==1)\n                printf(\"one pair\\n\");\n            else if(g==0&&h==2)\n                printf(\"two pair\\n\");\n            else printf(\"null\\n\");\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void){\n    int c[5];\n    while(scanf(\"%d\",&c[0])!=EOF){\n        int i,j,work,count,flag;\n        \n        for(i=1;i<5;i++)scanf(\",%d\",&c[i]);\n        for(i=0;i<4;i++){\n            for(j=i+1;j<5;j++){\n                if(c[i]>c[j]){\n                    work=c[i];\n                    c[i]=c[j];\n                    c[j]=work;\n                }\n            }\n        }\n      \n        (c[0]==c[1])?i=0:i=1;\n        count=0;\n        for(j=1;j<4;j++){\n            if(c[i]==c[i+j])count++;\n        }\n        if(count==3){\n            puts(\"four card\");\n            continue;\n        }\n        count=0;\n        if(c[0]==c[1])count++;\n        if(c[0]==c[2])count++;\n        for(i=count+1;i<4;i++){\n            if(c[i]==c[i+1])count++;\n        }\n        if(count==3){\n            puts(\"full house\");\n            continue;\n        }\n\n        \n        count=flag=0;\n        if(c[0]==1 &&c[1]==10){\n            flag=1;\n            c[0]=9;\n        }\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1]-1)count++;\n        }\n        if(count==4){\n            puts(\"straight\");\n            continue;\n        }\n        if(flag==1)c[0]=1;\n      \n        count=flag=0;\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1])count++;\n            else count=0;\n            if(count==2){\n                puts(\"three card\");\n                flag=1;\n            }\n        }\n        if(flag==1)continue;\n      \n        count=0;\n        for(i=0;i<4;i++){\n            if(c[i]==c[i+1])count++;\n        }\n        switch(count){\n            case 2:\n                puts(\"two pair\");\n                break;\n            case 1:\n                puts(\"one pair\");\n                break;\n            default:\n                puts(\"null\");\n                break;\n        }\n\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n  int c[5],i;\n  while(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2],&c[3],&c[4])!=EOF){\n    int t[14]={0};\n    int max=0,c2=0;\n    for(i=0;i<5;i++){\n      t[c[i]]++;\n      if(t[c[i]]>max){\n\tmax=t[c[i]];\n      }\n    }\n    for(i=0;i<14;i++){\n      if(t[i]==2){\n\tc2++;\n      }\n    }\n    if(max==4) printf(\"four card\\n\");\n    else if(max==3){\n      if(c2==1)printf(\"full house\\n\");\n      else     printf(\"three card\\n\");\n    }\n    else if(max==2){\n      if(c2==2)printf(\"two pair\\n\");\n      else     printf(\"one pair\\n\");\n    }\n    else if(max==1){\n      for(i=0;t[i]==0;i++);\n      if(t[i+1]==1&&t[i+2]==1&&t[i+3]==1&&t[i+4]==1)printf(\"straight\\n\");\n      else if(t[1]==1&&t[10]==1&&t[11]==1&&t[12]==1&&t[13]==1)printf(\"straight\\n\"); \n      else printf(\"null\\n\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint max(int x, int y)\n{\n\tif (x > y){\n\t\treturn (x);\n\t}\t\n\treturn (y);\n}\n\nvoid swap(int *i, int *j)\n{\n\t*i += *j;\n\t*j = *i - *j;\n\t*i -= *j;\n}\n\nint main(void)\n{\n\tint card[13];\n\tchar str[7][16] = {\n\t\t\"null\", \"one pair\", \"two pair\", \"three card\", \n\t\t\"straight\", \"full house\", \"four card\",\n\t};\n\tint ans;\n\tint tmp;\n\tint i, j;\n\tchar c[5];\n\tint count;\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &c[0], &c[1], &c[2], &c[3], &c[4]) != EOF){\n\t\tans = 0;\n\t\ttmp = 0;\n\t\tmemset(card, 0, sizeof(card));\n\t\t\n\t\tfor (i = 0; i < 5; i++){\n\t\t\tcard[c[i] - 1]++;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 13; i++){\n\t\t\tif (card[i]){\n\t\t\t\tfor (j = i, count = 0; count < 5; count++, j++){\n\t\t\t\t\tif (!card[j]){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (j == 12 && count == 3){\n\t\t\t\t\t\tj = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (j == 12){\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count){\n\t\t\t\ttmp = 4;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 12; i++){\n\t\t\tfor (j = 0; j < 12 - i; j++){\n\t\t\t\tif (card[j] < card[j + 1]){\n\t\t\t\t\tswap(&card[j], &card[j + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (card[0] == 4){\n\t\t\tans = 6;\n\t\t}\n\t\telse if (card[0] == 3 && card[1] == 2){\n\t\t\tans = 5;\n\t\t}\n\t\telse if (card[0] == 3){\n\t\t\tans = 3;\n\t\t}\n\t\telse if (card[0] == 2 && card[1] == 2){\n\t\t\tans = 2;\n\t\t}\n\t\telse if (card[0] == 2){\n\t\t\tans = 1;\n\t\t}\n\t\t\n\t\tprintf(\"%s\\n\", str[max(ans, tmp)]);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(int argc, const char * argv[]) {\n    int a[5];\n    int i,swap,j;\n    \n    while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n        for(j=0;j<5;j++){\n            for(i=4;i>=j;i--){\n                if(a[i]<a[i-1]){\n                    swap=a[i];\n                    a[i]=a[i-1];\n                    a[i-1]=swap;\n                }\n            }\n        }\n        //printf(\"%d,%d,%d,%d,%d\\n\",a[0],a[1],a[2],a[3],a[4]);\n        if((a[0]==a[1]&&a[0]==a[2]&&a[0]==a[3])||(a[1]==a[2]&&a[1]==a[2]&&a[1]==a[3]&&a[1]==a[4])){\n            printf(\"four card\\n\");\n        }\n        else if((a[0]==a[1]&&a[0]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[3]&&a[2]==a[4])){\n            printf(\"full house\\n\");\n        }\n        else if((a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4])||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\n            printf(\"straight\\n\");\n        }\n        else if((a[0]==a[1]&&a[0]==a[2])||(a[1]==a[2]&&a[1]==a[3])||(a[2]==a[3]&&a[2]==a[4])){\n            printf(\"three card\\n\");\n        }\n        else if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4])){\n            printf(\"two pair\\n\");\n        }\n        else if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4])){\n            printf(\"one pair\\n\");\n        }\n        else\n            printf(\"null\\n\");\n        \n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n\n#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<stdarg.h>\n#include<malloc.h>\n\nint main()\n{\n\tint i, j, buf, c[5];\n\t\n\twhile(scanf(\"%d,%d,%d,%d,%d\",&c[0],&c[1],&c[2], &c[3],&c[4]) != EOF){\n\n\t\tfor(j=0; j<4; j++){\n\t\t\tfor(i=3; i>=j; i--){\n\t\t\t\tif(c[i] > c[i+1]){\n\t\t\t\t\tbuf = c[i];\n\t\t\t\t\tc[i] = c[i+1];\n\t\t\t\t\tc[i+1] = buf;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif((c[0]==c[1] && c[1]==c[2] && c[2]==c[3]) || (c[1]==c[2] && c[2]==c[3] && c[3]==c[4]))\n\t\t\tprintf(\"four card\\n\");\n\t\telse if((c[0]==c[1] && (c[2]==c[3] && c[3]==c[4])) || ((c[0]==c[1] && c[1]==c[2]) && (c[3]==c[4])))\n\t\t\tprintf(\"full house\\n\");\n\t\telse if((c[1]-c[0]==1 && c[2]-c[1]==1 && c[3]-c[2]==1 && c[4]-c[3]==1) || (c[0]==1 && c[1]==10 && c[2]==11 && c[3]==12 && c[4]==13))\n\t\t\tprintf(\"straight\\n\");\n\t\telse if((c[0]==c[1] && c[1]==c[2]) || (c[1]==c[2] && c[2]==c[3]) || (c[2]==c[3] && c[3]==c[4]))\n\t\t\tprintf(\"three card\\n\");\n\t\telse if((c[0]==c[1] && c[2]==c[3]) || (c[0]==c[1] && c[3]==c[4]) || (c[1]==c[2] && c[3]==c[4]))\n\t\t\tprintf(\"two pair\\n\");\n\t\telse if(c[0]==c[1] || c[1]==c[2] || c[2]==c[3] || c[3]==c[4])\n\t\t\tprintf(\"one pair\\n\");\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// Aizu Vol0 0038: Poker Hand\n// 2017.7.30\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX 14\n\nint main()\n{\n\tint card[MAX+3];\n\tint max;\n\tint i, j, d[5];\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &d[0], &d[1], &d[2], &d[3], &d[4]) == 5) {\n\t\tfor (i = 1; i <= MAX; i++) card[i] = 0;\n\t\tmax = 0;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif (++card[d[i]] > max) max = card[d[i]];\n\t\t\tif (d[i] == 1) card[14] = 1;\n\t\t}\n\t\tif (max == 4) {\n\t\t\tputs(\"four card\");\n\t\t\tgoto DONE;\n\t\t}\n\t\tif (max == 3) {\n\t\t\tfor (i = 1; i < MAX; i++) {\n\t\t\t\tif (card[i] == 2) {\n\t\t\t\t\tputs(\"full house\");\n\t\t\t\t\tgoto DONE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (max == 1) {\n\t\t\ti = 1;\n\t\tNEXT:\n\t\t\tfor (; card[i] == 0; i++);\n\t\t\tfor (j = 1; ; j++) {\n\t\t\t\tif (j >= 5) {\n\t\t\t\t\tputs(\"straight\");\n\t\t\t\t\tgoto DONE;\n\t\t\t\t}\n\t\t\t\tif (card[i + j] == 0) break;\n\t\t\t}\n\t\t\tif (i == 1) {\n\t\t\t\ti++;\n\t\t\t\tgoto NEXT;\n\t\t\t}\n\t\t}\n\t\tif (max == 3) {\n\t\t\tputs(\"three card\");\n\t\t\tgoto DONE;\n\t\t}\n\t\tif (max == 2) {\n\t\t\tfor (i = 1; card[i] < 2; i++);\n\t\t\tfor (j = i + 1; j < MAX; j++) {\n\t\t\t\tif (card[j] == 2) {\n\t\t\t\t\tputs(\"two pair\");\n\t\t\t\t\tgoto DONE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tputs(\"one pair\");\n\t\t\tgoto DONE;\n\t\t}\n\t\tputs(\"null\");\n\tDONE:;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n#define P 5\n\nint main(void)\n{\n        int card[P] = {0, 0, 0, 0, 0};\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int count = 0;\n        int t = 0;\n        int c[P] = {0, 0, 0, 0, 0};\n\n        while( scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF )\n        {\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = 0; j < P ; j++)\n                        {\n                                if(card[i] > card[j])\n                                {\n                                        m = card[i];\n                                        card[i] = card[j];\n                                        card[j] = m;\n                                }\n                        }\n                }\n                for(i = 0; i < P ; i++)\n                {\n                        for(j = i + 1; j < P ; j++)\n                        {\n                                if(card[i] == card[j])\n                                {\n                                        count++;\n                                }\n                        }\n                }\n\n                if(count == 0)\n                {\n                        for(k = 0 ;k < P; k++)\n                        {\n                                c[k] = card[k] + k;\n                        }\n                        for(i = 1 ;i < P; i++)\n                        {\n                                if(c[0] == c[i])\n                                {\n                                        t++;\n                                }\n                        }\n                        if((t == 4) || (card[0] == 13 && card[1] == 12 && card[2] == 11 && card[3] == 10 && card[4] == 1))\n                        {\n                                printf(\"straight\\n\");\n                        }\n                        else\n                        {\n                                printf(\"null\\n\");\n                        }\n                }\n                else if(count == 1)\n                {\n                        printf(\"one pair\\n\");\n                }\n                else if(count == 2)\n                {\n                        printf(\"two pair\\n\");\n                }\n                else if(count == 3)\n                {\n                        printf(\"three card\\n\");\n                }\n                else if(count == 4)\n                {\n/bin/bash: indent: コマンドが見つかりません\n                else if(count == 6)\n                {\n                        printf(\"four card\\n\");\n                }\n                t = 0;\n                m = 0;\n                count = 0;\n                for(i = 0; i < P; i++)\n                {\n                           c[i] = 0;\n                        card[i] = 0;\n                }\n                i = 0;\n                j = 0;\n                k = 0;\n        }\n        return 0;\n}"
  },
  {
    "language": "C",
    "code": "int main()\n{\n  int t[14];\n  int a,b,c,d,e,i,x;\n  for(;~scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e);)\n    {\n      for(i=0;i<14;i++)\n\tt[i]=0;\n      t[a]++;\n      t[b]++;\n      t[c]++;\n      t[d]++;\n      t[e]++;\n      for(;;)\n\t{\n\t  for(x=i=0;i<14;i++)\n\t    if(t[i]>3)\n\t      x=1,puts(\"four card\");\n\t  if(x!=0)\n\t    break;\n\t  for(x=i=0;i<14;i++)\n\t    {\n\t      if(t[i]==3)\n\t\tx+=3;\n\t      if(t[i]==2)\n\t\tx+=2;\n\t    }\n\t  if(x==5)\n\t    {\n\t      puts(\"full house\");\n\t      break;\n\t    }\n\t  for(x=i=0;i<10;i++)\n\t    if(t[i]==1&&t[i+1]==1&&t[i+2]==1&&t[i+3]==1&&t[i+4]==1)\n\t      x=1,puts(\"straight\");\n\t  if(x!=0)\n\t    break;\n\t  \n\t  for(x=i=0;i<14;i++)\n\t    if(t[i]>2)\n\t      x=1,puts(\"three card\");\n\t  if(x!=0)\n\t    break;\n\t  \t  \n\t  for(x=i=0;i<14;i++)\n\t    if(t[i]>1)\n\t      x++;\n\t  if(x==1)\n\t    {\n\t      puts(\"one pair\");\n\t      break;\n\t    }\n\t  if(x==2)\n\t    {\n\t      puts(\"two pair\");\n\t      break;\n\t    }\n\t  puts(\"null\");\n\t  break;\n\t}\n    }\n  exit(0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid sort(int array[], const int size) {\n\tint i, last, sorted = size;\n\n\twhile(sorted) {\n\t\tlast = 0;\n\t\tfor(i = 0; i < sorted - 1; ++i) {\n\t\t\tif(array[i] > array[i + 1]) {\n\t\t\t\tint temp = array[i];\n\t\t\t\tarray[i] = array[i + 1];\n\t\t\t\tarray[i + 1] = temp;\n\n\t\t\t\tlast = i + 1;\n\t\t\t}\n\t\t}\n\n\t\tsorted = last;\n\t}\n}\n\nint main() {\n\tint pair;\n\tint three_card;\n\tint four_card;\n\tint straight;\n\n\tint flag;\n\n\tint continue_sum;\n\tint prev;\n\tint temp;\n\n\tint input[5];\n\tint i;\n\n\twhile(scanf(\"%d\", &input[0]) != EOF) {\n\t\tfor(i = 1; i < 5; i++)\n\t\t\tscanf(\",%d\", &input[i]);\n\n\t\tpair = three_card = four_card = straight = flag = 0;\n\t\tprev = -1;\n\n\t\tsort(input, 5);\n\n\t\tfor(i = 0; i < 5; i++) {\n\t\t\tif(prev == input[i]) {\n\t\t\t\tif(flag && three_card) {\n\t\t\t\t\tfour_card++;\n\t\t\t\t\tthree_card--;\n\t\t\t\t}\n\n\t\t\t\telse if (flag) {\n\t\t\t\t\tthree_card++;\n\t\t\t\t\tpair--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tpair++;\n\n\t\t\t\tflag = 1;\n\t\t\t}\n\n\t\t\telse if(input[i] - prev == 1) {\n\t\t\t\tstraight++;\n\t\t\t\tflag = 0;\n\t\t\t}\n\n\t\t\telse\n\t\t\t\tflag = 0;\n\n\t\t\tprev = input[i];\n\t\t}\n\n\t\tif(pair == 2)\n\t\t\tprintf(\"two pair\\n\");\n\n\t\telse if(pair == 1) {\n\t\t\tif(three_card)\n\t\t\t\tprintf(\"full house\\n\");\n\n\t\t\telse\n\t\t\t\tprintf(\"one pair\\n\");\n\t\t}\n\n\t\telse if(four_card)\n\t\t\tprintf(\"four card\\n\");\n\n\t\telse if(three_card)\n\t\t\tprintf(\"three card\\n\");\n\n\t\telse if(straight == 4)\n\t\t\tprintf(\"straight\\n\");\n\n\t\telse if(straight == 3) {\n\t\t\tif(input[0] == 1 && input[4] == 13) {\n\t\t\t\tif(input[1] == 2 && input[3] != 12)\n\t\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\telse if(input[1] != 2 && input[3] == 12)\n\t\t\t\t\tprintf(\"straight\\n\");\n\t\t\t\telse\n\t\t\t\t\tprintf(\"null\\n\");\n\t\t\t}\n\n\t\t\telse printf(\"null\\n\");\n\t\t}\n\n\t\telse\n\t\t\tprintf(\"null\\n\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 0038\n *\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0038\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint diff1_Aas14_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(hand[i]== 1 || hand[j] == 1){\n                if(hand[i]== 1){\n                    if((14 - hand[j]) == 1)\n                        n++;\n                }else{ /*hand[j] == 1*/\n                    if((14 - hand[i]) == 1)\n                        n++;\n                }\n            }else{\n                if(abs(hand[i] -  hand[j]) == 1){\n                    n++;\n                }\n            }\n        }\n    }\n    return n;\n}\n\n\nint diff1_Aas1_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(abs(hand[i] -  hand[j]) == 1){\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\nint eq_count(int *hand){\n    int i, j, n;\n    n = 0;\n    for(i =0; i<5; i++){\n        for(j=i+1;j<5;j++){\n            if(hand[i] == hand[j]){\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\nint test_fourcard(int* hand){\n    return eq_count(hand) == 6;\n}\n\nint test_fullhouse(int* hand){\n    return eq_count(hand) == 4;\n}\n\nint test_straight(int* hand){\n    return diff1_Aas14_count(hand) == 4 || diff1_Aas1_count(hand) == 4;\n}\n\nint test_threecard(int* hand){\n    return eq_count(hand) == 3;\n}\n\nint test_twopair(int* hand){\n    return eq_count(hand) == 2;\n}\n\nint test_onepair(int* hand){\n    return eq_count(hand) == 1;\n}\n\n\n\nchar* test(int* hand){\n    if(test_fourcard(hand)){\n        return \"four card\";\n    }\n\n    if(test_fullhouse(hand)){\n        return \"full house\";\n    }\n\n    if(test_straight(hand)){\n        return \"straight\";\n    }\n\n    if(test_threecard(hand)){\n        return \"three card\";\n    }\n\n    if(test_twopair(hand)){\n        return \"two pair\";\n    }\n\n    if(test_onepair(hand)){\n        return \"one pair\";\n    }\n\n    return \"null\";\n}\n\n\nint main(){\n    int hand[5];\n    char* r;\n\n    while(scanf(\"%d,%d,%d,%d,%d\", hand, hand+1, hand+2, hand+3, hand+4) == 5){\n        r = test(hand);\n        printf(\"%s\\n\", r);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\n\nint main(){\n   int a[5],b[13];\n   int i,j;\n   while(scanf(\"%d,%d,%d,%d,%d\",&a[0],&a[1],&a[2],&a[3],&a[4])!=EOF){\n      for(i=0;i<13;i++){b[i]=0;}\n      for(i=0;i<5;i++){ b[a[i]-1]++;}\n      \n      for(i=0;i<13;i++){\n         if(b[i]==4){\n            printf(\"four card\\n\");\n            goto exit;\n         }\n      }\n\n      for(i=0;i<13;i++){\n         for(j=0; j<13;j++){\n            if(b[i]==2&&b[j]==3){\n               printf(\"full house\\n\");\n               goto exit;\n            }else if(b[i]==2&&b[j]==2&&i!=j){\n               printf(\"two pair\\n\");\n               goto exit;\n            }\n            \n         }\n      }\n\n\n     for(i=0;i<13;i++){\n        if(b[i]==3){printf(\"three card\\n\");goto exit;}\n        else if(b[i]==2){printf(\"one pair\\n\"); goto exit;}\n     }\n\n     for(i=0;i<9;i++){\n        if(b[i]==1&&b[i+1]==1&&b[i+2]==1&&b[i+3]==1&&b[i+4]==1){\n           printf(\"straight\\n\");\n           goto exit;\n        }\n     }\n\n     if(b[0]==1&&b[9]==1&&b[10]==1&&b[11]==1&b[12]==1){printf(\"straight\\n\"); goto exit;}\n\n     printf(\"null\\n\");\n\n     exit:;\n     \n   }\n   return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint a, b, c, d, e, q;\n\tint fu, ze;\n\tint card[5];\n\tint check[5];\n\tint straight[5] = {1, 10, 11, 12, 13};\n\t\n\twhile (scanf(\"%d,%d,%d,%d,%d\", &card[0], &card[1], &card[2], &card[3], &card[4]) != EOF) {\n\t\tfor (a = 0; a < 5; a++) {\n\t\t\tfu = a;\n\t\t\tfor (b = a + 1; b < 5; b++) {\n\t\t\t\tif (card[b] < card[fu]) {\n\t\t\t\t\tfu = b;\n\t\t\t\t}\n\t\t\t}\n\t\t\tze = card[a];\n\t\t\tcard[a] = card[fu];\n\t\t\tcard[fu] = ze;\n\t\t}\n\t\tfor (a = 0; a < 5; a++) {\n\t\t\tcheck[a] = 0;\n\t\t}\n\t\td = 0;\n\t\tq = 0;\n\t\tif (card[0] == straight[0]) {\n\t\t\tq++;\n\t\t}\n\t\tfor (a = 1; a < 5; a++) {\n\t\t\tif (card[a - 1] == (card[a] - 1)) {\n\t\t\t\td++;\n\t\t\t}\n\t\t\tif (card[a] == straight[a]) {\n\t\t\t\tq++;\n\t\t\t}\n\t\t}\n\t\tfor (a = 0; a < 5; a++) {\n\t\t\tc = 0;\n\t\t\tfor (b = a + 1; b < 5; b++) {\n\t\t\t\tif (card[a] == card[b] && card[a] != -1 && card[b] != -1) {\n\t\t\t\t\tc++;\t\t\t\n\t\t\t\t\tcard[b] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (c == 1) {\n\t\t\t\tcheck[0]++;\n\t\t\t}\n\t\t\telse if (c == 2) {\n\t\t\t\tcheck[1]++;\n\t\t\t}\n\t\t\telse if (c == 3) {\n\t\t\t\tcheck[2]++;\n\t\t\t}\n\t\t\tcard[a] = -1;\n\t\t}\n\t\tif (check[0] == 2) {\n\t\t\tprintf(\"two pair\\n\");\n\t\t}\n\t\t\n\t\telse if (check[0] == 1) {\n\t\t\tif (check[1] == 1) {\n\t\t\t\tprintf(\"full house\\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"one pair\\n\");\n\t\t\t}\n\t\t}\t\t\n\t\telse if (check[1] == 1) {\n\t\t\tprintf(\"three card\\n\");\n\t\t}\n\t\telse if (check[2] == 1) {\n\t\t\tprintf(\"four card\\n\");\n\t\t}\n\t\telse if (d == 4 || q == 5) {\n\t\t\tprintf(\"straight\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\"null\\n\");\n\t\t}\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint compar(const int *val1, const int *val2);\nint poker(int *ary);\n\nint main(void) {\n\tint ary[5];\n\tint n;\n\tint i,m;\n\tchar str[100],*line;\n\n\tfor( ;fgets(str,sizeof(str),stdin)!=NULL; ){\n\tline=strtok(str,\", \");\n\tsscanf(line,\"%d\",&m);\n\tary[0]=m;\n\tfor(i=1;i<5;i++){\n\t\tline=strtok(NULL,\", \");\n\t\tsscanf(line,\"%d\",&m);\n\t\tary[i]=m;\n\t}\n\tn = sizeof(ary)/sizeof(ary[0]);\n\tqsort(ary, n, sizeof(int),(int (*)(const void *, const void *))compar);\n\tpoker(ary);\n\t}\n\treturn 0;\n}\n\nint compar(const int *val1, const int *val2) {\n    if ( *val1 < *val2 ) {\n        return -1;\n    } else if ( *val1 == * val2 ) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n\nint poker(int *ary){\n\tif(ary[0]==ary[1] && ary[1]==ary[2] && ary[2]==ary[3])\n\t\tprintf(\"four card\\n\");\n\telse if((ary[0]==ary[1]-1 && ary[1]==ary[2]-1) && (ary[2]==ary[3]-1) && (ary[3]==ary[4]-1))\n\t\tprintf(\"straight\\n\");\n\telse if((ary[0]==ary[1]-9 && ary[1]==ary[2]-1) && (ary[2]==ary[3]-1) && (ary[3]==ary[4]-1))\n\t\tprintf(\"straight\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2]) && (ary[3]==ary[4]) || (ary[2]==ary[3] && ary[3]==ary[4]) && (ary[0]==ary[1]))\n\t\tprintf(\"full house\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2] && ary[2]==ary[3]) || (ary[1]==ary[2] && ary[2]==ary[3] && ary[3]==ary[4]))\n\t\tprintf(\"four card\\n\");\n\telse if((ary[0]==ary[1] && ary[1]==ary[2]) || (ary[1]==ary[2] && ary[2]==ary[3]) || (ary[2]==ary[3] && ary[3]==ary[4]))\n\t\tprintf(\"three card\\n\");\n\telse if((ary[0]==ary[1] && ary[2]==ary[3]) || (ary[0]==ary[1] && ary[3]==ary[4]) || (ary[1]==ary[2] && ary[3]==ary[4]))\n\t\tprintf(\"two pair\\n\");\n\telse if(ary[0]==ary[1] || ary[1]==ary[2] || ary[2]==ary[3] || ary[3]==ary[4])\n\t\tprintf(\"one pair\\n\");\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n\tint card[5];\n\tint i,j;\n\tint temp;\n\tfor(i=0;i<5;i++){\n\t\tscanf(\"%d\",&card[i]);\n\t}\n\tfor(i=0;i<4;i++){\n\t\tfor(j=4;j>i;j--){\n\t\t\tif(card[j-1]>card[j]){\n\t\t\t\ttemp=card[j];\n\t\t\t\tcard[j]=card[j-1];\n\t\t\t\tcard[j-1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(card[0]==card[3]||card[1]==card[4]){\n\t\tprintf(\"four card\");\n\t}\n\telse if(card[0]==card[2]||card[1]==card[3]||card[2]==card[4]){\n\t\tprintf(\"three card\");\n\t}\n\telse if((card[0]==card[1]&&(card[2]==card[3]||card[3]==card[4]))||(card[1]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"two pair\");\n\t}\n\telse if(card[0]==card[1]||card[1]==card[2]||card[2]==card[3]||card[3]==card[4]){\n\t\tprintf(\"one pair\");\n\t}\n\telse if((card[0]==card[1]&&card[2]==card[4])||(card[0]==card[2]&&card[3]==card[4])){\n\t\tprintf(\"full house\");\n\t}\n\telse if((card[4]==(card[0]+4))||(card[0]==1&&card[4]==13&&card[3]==12&&card[2]==11&&card[1]==10)){\n\t\tprintf(\"straight\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define CARD 5\n\nvoid sortArray(int array[],int data){\n\n  int i,j,c = 0;\n\n  for(i = 0;i < data;i++){\n\n    for(j = 0;j < data - i;j++){\n\n      if(array[j] > array[j + 1]){\n\n\tc = array[j];\n\tarray[j] = array[j + 1];\n\tarray[j + 1] = c;\n\n      }\n\n    }\n\n  }\n\n  return;\n\n}\n\n\nvoid judgeAndPrint(int array[],int data){\n\n  int i;\n\n  if(array[0] == array[3] || array[1] == array[4]){\n\n    printf(\"four card\\n\");\n\n  }else if(array[0] == array[2]){\n\n    if(array[3] == array[4]){\n    printf(\"full house\\n\");\n    }else{\n\n      printf(\"tree card\\n\");\n\n    }\n  }else if(array[2] == array[4]){\n\n    if(array[0] == array[1]){\n    printf(\"full house\\n\");\n    }else{\n\n      printf(\"tree card\\n\");\n\n    }\n  }else if(array[1] == array[3]){\n\n      printf(\"tree card\\n\");\n\n    }else if(array[0] == array[1]){\n\n      if(array[2] == array[3] || array[3] == array[4]){\n\n\tprintf(\"two pair\\n\");\n\n      }else{\n\n\tprintf(\"one pair\\n\");\n\n      }\n    }else if(array[3] == array[4]){\n\n      if(array[0] == array[1] || array[1] == array[2]){\n\n\tprintf(\"two pair\\n\");\n\n      }else{\n\n\tprintf(\"one pair\\n\");\n\n      }\n\n  }else if(array[1] == array[2] || array[2] == array[3]){\n\n\tprintf(\"one pair\\n\");\n\n      }else if(array[0] + 4 == array[4]){\n\n\tprintf(\"straight\\n\");\n\n  }else{\n\n\tprintf(\"null\\n\");\n\n  }\n\n  return;\n\n}\n\nint main(void){\n\n  int card[CARD];\n  int i;\n\n  for(i = 0;i < CARD;i++){\n\n    scanf(\"%d\",&card[i]);\n\n}\n\n  sortArray(card,CARD);\n\n\n  judgeAndPrint(card,CARD);\n\n  return 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(void)\n{\n    int a,b,c,d,e,box;\n    while(scanf(\"%d,%d,%d,%d,%d\",&a,&b,&c,&d,&e)!=EOF)\n    {\n         if(a>b)\n        {\n            box=a;\n            a=b;\n            b=box;\n        }\n        if(b>c)\n        {\n            box=b;\n            b=c;\n            c=box;\n        }\n        if(c>d)\n        {\n            box=c;\n            c=d;\n            d=box;\n        }\n        if(d>e)\n        {\n            box=d;\n            d=e;\n            e=box;\n        }\n        if(a>b)\n        {\n            box=a;\n            a=b;\n            b=box;\n        }\n        if(b>c)\n        {\n            box=b;\n            b=c;\n            c=box;\n        }\n        if(c>d)\n        {\n            box=c;\n            c=d;\n            d=box;\n        }\n        if(a>b)\n        {\n            box=a;\n            a=b;\n            b=box;\n        }\n        if(b>c)\n        {\n            box=b;\n            b=c;\n            c=box;\n        }\n        if(a>b)\n        {\n            box=a;\n            a=b;\n            b=box;\n        }\n        if(a==b)\n        {\n            if(b==c)\n            {\n                if(c==d||c==e)\n                    printf(\"four card\\n\");\n                else if(d==e)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"three card\\n\");\n                    }\n            else if(c==d)\n            {\n                if(a==e||c==e)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"two pair\\n\");\n            }\n            else if(d==e)\n            {\n                if(a==d)\n                    printf(\"four card\\n\");\n                else\n                    printf(\"two pair\\n\");\n            }\n            else if(b==d)\n                printf(\"three card\\n\");\n            else if(b==e)\n            {\n                if(c==d)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"three card\\n\");\n            }\n            else if(c==d)\n                printf(\"two pair\\n\");\n            else if(c==e)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(a==c)\n        {\n            if(c==d)\n            {\n                if(d==e)\n                    printf(\"four card\\n\");\n                else if(b==e)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"three card\\n\");\n            }\n            else if(c==e)\n            {\n                if(b==d)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"three card\\n\");\n            }\n            else if(b==d)\n                printf(\"two pair\\n\");\n            else if(b==e)\n                printf(\"two pair\\n\");\n            else if(d==e)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(a==d)\n        {\n            if(a==e)\n            {\n                if(b==c)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"three pair\\n\");\n            }\n            else if(b==c)\n            {\n                if(b==e)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"two pair\\n\");\n            }\n            else if(b==e||c==e)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(a==e)\n        {\n            if(b==c)\n            {\n                if(c==d)\n                    printf(\"full house\\n\");\n                else\n                    printf(\"two pair\\n\");\n            }\n            else if(b==d||c==d)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(b==c)\n        {\n            if(c==d)\n            {\n                if(d==e)\n                    printf(\"four card\\n\");\n                else\n                    printf(\"three card\\n\");\n            }\n            else if(c==e)\n                printf(\"three card\\n\");\n            else if(d==e)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(b==d)\n        {\n            if(d==e)\n                printf(\"three card\\n\");\n            else if(c==e)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(b==e)\n        {\n            if(c==d)\n                printf(\"two pair\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(c==d)\n        {\n            if(d==e)\n                printf(\"three card\\n\");\n            else\n                printf(\"one pair\\n\");\n        }\n        else if(c==e)\n            printf(\"one pair\\n\");\n        else if(d==e)\n            printf(\"one pair\\n\");\n        else if(e==d+1&&d==c+1&&c==b+1&&b==a+1)\n            printf(\"straight\\n\");\n        else if(e==d+1&&d==c+1&&c==b+1&&b==a+9)\n            printf(\"straight\\n\");\n        else printf(\"null\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main{\n\n    public static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n\n\twhile (sc.hasNextLine()) {\n\t    String[] cards = sc.nextLine().split(\",\");\n\t    // ??????????????????????????????\n\t    if (isFourCard(cards)) {\n\t\tSystem.out.println(\"four card\");\n\t\tcontinue;\n\t    }\n\t    // ????????¬??????????????????\n\t    if (isStraight(cards)) {\n\t\tSystem.out.println(\"straight\");\n\t\tcontinue;\n\t    }\n\t    // ???????????????\n\t    if (isFullHouse(cards)) {\n\t\tSystem.out.println(\"full house\");\n\t\tcontinue;\n\t    }\n\t    // ??????????????????????????????\n\t    if (isthreeCard(cards)) {\n\t\tSystem.out.println(\"three card\");\n\t\tcontinue;\n\t    }\n\t    // ???????????¢????????????\n\t    if (isTwoPare(cards)) {\n\t\tSystem.out.println(\"two pair\");\n\t\tcontinue;\n\t    }\n\t    // ???????????¢????????????\n\t    if (isOnePare(cards)) {\n\t\tSystem.out.println(\"one pair\");\n\t\tcontinue;\n\t    }\n\t    // ????????§?????????????????°null\n\t    System.out.println(\"null\");\n\t}\n    }\n\n    private static boolean isFourCard(String[] cards) {\n\treturn isPareCards(4, cards, false);\n    }\n\n    private static boolean isStraight(String[] cards) {\n\tArrays.sort(cards, new PokerHand().new Compare());\n\n\tif (isRoyalStraight(cards)) {\n\t    return true;\n\t}\n\n\tfor (int i = 1; i < cards.length; i++) {\n\t    int draw = Integer.parseInt(cards[i]) - Integer.parseInt(cards[i - 1]);\n\t    if (draw != 1) {\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    private static boolean isRoyalStraight(String[] cards) {\n\tArrays.sort(cards, new PokerHand().new Compare());\n\n\tString[] speStraight = { \"1\", \"10\", \"11\", \"12\", \"13\" };\n\n\tfor (int i = 0; i < cards.length; i++) {\n\t    if (!speStraight[i].equals(cards[i])) {\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    private static boolean isFullHouse(String[] cards) {\n\treturn isPareCards(3, cards, false) && isPareCards(2, cards, false);\n    }\n\n    private static boolean isthreeCard(String[] cards) {\n\treturn isPareCards(3, cards, false);\n    }\n\n    private static boolean isTwoPare(String[] cards) {\n\treturn isPareCards(2, cards, true);\n    }\n\n    private static boolean isOnePare(String[] cards) {\n\treturn isPareCards(2, cards, false);\n    }\n\n    // ?????????????????°????????°??????????????°???????????¨????????????\n    private static boolean isPareCards(int number, String[] cards, boolean pares) {\n\n\tHashMap<String, Integer> map = new HashMap<>();\n\tfor (int i = 0; i < cards.length; i++) {\n\t    int count = 0;\n\t    if (map.containsKey(cards[i])) {\n\t\tcount = map.get(cards[i]) + 1;\n\t    } else {\n\t\tcount = 1;\n\t    }\n\n\t    map.put(cards[i], count);\n\t}\n\tint pareCount = 0;\n\tfor (String key : map.keySet()) {\n\t    if (map.get(key) == number) {\n\t\tpareCount++;\n\t    }\n\t}\n\n\t// ???????????¢????????????????????´?????????????????§??????\n\tif (pares && pareCount == 2) {\n\t    return true;\n\t}\n\n\treturn !pares && pareCount == 1;\n    }\n\n    // ??\\???????????°????????????????????????????????¬?????????\n    public class Compare implements Comparator<String> {\n\n\t@Override\n\tpublic int compare(String o1, String o2) {\n\t    return Integer.parseInt(o1) - Integer.parseInt(o2);\n\t}\n\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport java.awt.geom.*;\nimport java.math.*;\n\npublic class Main {\n\n\tstatic final Scanner in = new Scanner(System.in);\n\tstatic final PrintWriter out = new PrintWriter(System.out,false);\n\n\tstatic void solve() {\n\t\tString[] s = in.next().split(\",\");\n\t\tint[] a = new int[5];\n\t\tfor (int i=0; i<5; i++) {\n\t\t\ta[i] = Integer.parseInt(s[i]);\n\t\t}\n\n\t\tArrays.sort(a);\n\t\tif ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\tout.println(\"four card\");\n\t\t} else if ((a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) || (a[0] == a[1] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\tout.println(\"full house\");\n\t\t} else if ((a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) || (a[4] == 1 && a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3])) {\n\t\t\tout.println(\"straight\");\n\t\t} else if ((a[0] == a[1] && a[1] == a[2]) || (a[2] == a[3] && a[3] == a[4]) || (a[1] == a[2] && a[2] == a[3])) {\n\t\t\tout.println(\"three card\");\n\t\t} else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n\t\t\tout.println(\"two pair\");\n\t\t} else if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n\t\t\tout.println(\"one pair\");\n\t\t} else {\n\t\t\tout.println(\"null\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tlong start = System.currentTimeMillis();\n\n\t\twhile(in.hasNext()) solve();\n\t\tout.flush();\n\n\t\tlong end = System.currentTimeMillis();\n\t\t//trace(end-start + \"ms\");\n\t\tin.close();\n\t\tout.close();\n\t}\n\n\tstatic void trace(Object... o) { System.out.println(Arrays.deepToString(o));}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.awt.geom.*;\nimport java.io.*;\npublic class Main{\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString [] input = sc.next().split(\",\");\n\t\t\tint [] data = new int[5];\n\t\t\tfor(int i = 0 ; i < 5; i++){\n\t\t\t\tdata[i] = Integer.parseInt(input[i]);\n\t\t\t}\n\t\t\tArrays.sort(data);\n\t\t\t//System.out.println(Arrays.toString(data));\n\t\t\tif(isfour(data)){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if(isfull(data)){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}\n\t\t\telse if(isstraight(data)){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}\n\t\t\telse if(isthree(data)){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}\n\t\t\telse if(istwo(data)){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}\n\t\t\telse if(one(data)){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate boolean one(int[] data) {\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tif(data[i] == data[i+1]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean istwo(int[] data) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tif(data[i] == data[i + 1]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 2) return true;\n\t\treturn false;\n\t}\n\n\tprivate boolean isthree(int[] data) {\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tif(data[i] == data[i + 1]){\n\t\t\t\tcount++;\n\t\t\t\tmax = Math.max(max, count);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\tif(max == 2){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean isstraight(int[] data) {\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tif(data[i] + 1 != data[i+1]){\n\t\t\t\tif(i == 0 &&  data[0] == 1 && data[4] == 13){\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tprivate boolean isfull(int[] data) {\n\t\tif(data[0] == data[1] && data[1] == data[2] && data[3] == data[4]){\n\t\t\treturn true;\n\t\t}\n\t\tif(data[0] == data[1] && data[2] == data[3] && data[3] == data[4]){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean isfour(int[] data) {\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tif(data[i] == data[i + 1]){\n\t\t\t\tcount++;\n\t\t\t\tmax = Math.max(max, count);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\tif(max == 3){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static void main(String [] args){\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "//Volume0-0038\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\nclass Num {\n\tpublic int num = 1;\n}\n\npublic class Main {\n\n    //declare\n\tprivate static ArrayList<Integer>   ar   = new ArrayList<Integer>(),\n\t                                    list = new ArrayList<Integer>();\n\tprivate static HashMap<Integer,Num> map  = new HashMap<Integer,Num>();\n\n\tpublic static void main(String[] args){\n\n\t\tString   result;\n\t\tString[] s;\n\t\tint      card;\n\n\t\t//initialize\n\t\tinit();\n\n        //input\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n        \tar.clear();\n        \tmap.clear();\n        \ts = sc.nextLine().split(\",\");\n        \tfor(int i=0;i<5;i++){\n        \t\tcard = Integer.parseInt(s[i]);\n        \t\tar.add(card);\n        \t\tif(map.containsKey(card)){\n        \t\t\tmap.get(card).num++;\n        \t\t} else {\n        \t\t\tmap.put(card, new Num());\n        \t\t}\n        \t}\n\n        \t//calculate\n        \tCollections.sort(ar);\n\n        \tout:{\n        \t\tif(include(4))  {result = \"four card\" ; break out;}\n        \t\tif(include(2,3)){result = \"full house\"; break out;}\n        \t\tif(straight())  {result = \"straight\"  ; break out;}\n        \t\tif(include(3))  {result = \"three card\"; break out;}\n        \t\tif(include(2,2)){result = \"two pair\"  ; break out;}\n        \t\tif(include(2))  {result = \"one pair\"  ; break out;}\n                                 result = \"null\"      ;\n        \t}\n\n        \t//output\n        \tSystem.out.println(result);\n        }\n\t}\n\n\tprivate static void init(){\n\t\tfor(int i=1;i<15;i++){\n\t\t\tlist.add(i);\n\t\t}\n\t}\n\n\tprivate static boolean include(int i){\n\t\tboolean ret = false;\n\t\tCollection<Num> cl = map.values();\n\t\tfor(Num n:cl){\n\t\t\tif(n.num == i){\n\t\t\t\tret = true;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate static boolean include(int i,int j){\n\n\t\tboolean ret = false;\n\n\t\tif(i != j){\n\t\t\tif(include(i) && include(j)){ret = true;}\n\t\t} else {\n\t\t\tint cnt = 0;\n\t\t\tCollection<Num> cl = map.values();\n\t\t\tfor(Num n:cl){\n\t\t\t\tif(n.num == i){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt > 1){ret = true;}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate static boolean straight(){\n\t\tboolean ret   = false;\n\t\tint     match = 0;\n\t\tfor(int i=list.indexOf(ar.get(0)),j=0; i<list.size() && j<ar.size();i++,j++){\n\t\t\tif   (list.get(i) == ar.get(j)){match++;}\n\t\t\telse                           {break;}\n\t\t}\n\t\tif     (match == 5){ret = true;}\n\t\telse if(ar.contains(1)){\n\t\t\tar.remove(0);\n\t\t\tar.add(14);\n\t\t\tret = straight();}\n\t\treturn ret;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tString check( String card ) {\n\t\tString hand;\n\t\tint one = card.indexOf(\"1\");\n\t\tint two = card.indexOf(\"2\");\n\t\tSystem.out.println(card+\" \"+card.getClass());\n\t\tSystem.out.println(card.indexOf(\"4\")+\" \"+card.indexOf(\"3\")+\" \"+two+\" \"+one);\n\t\tif ( card.indexOf(\"4\") != -1 )\n\t\t\thand = \"four card\";\n\t\telse if ( card.indexOf(\"3\") != -1 ) {\n\t\t\tif ( two != -1 )\n\t\t\t\thand = \"full house\";\n\t\t\telse\n\t\t\t\thand = \"three card\";\n\t\t} else if ( two != card.lastIndexOf(\"2\") )\n\t\t\thand = \"two pair\";\n\t\telse if ( two != -1 )\n\t\t\thand = \"one pair\";\n\t\telse {\n\t\t\tfor ( int i = one+1; i < one+5; i++ )\n\t\t\t\tif ( card.charAt(one) != card.charAt(i) ) return \"null\";\n\t\t\thand = \"straight\";\n\t\t}\n\t\treturn hand;\n\t}\n\tpublic static void main ( String[] args ) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tsc.useDelimiter(\"[\\n,]\");\n\t\tMain m = new Main();\n\t\tint[] cards;\n\t\twhile ( sc.hasNext() ) {\n\t\t\tString card = \"\";\n\t\t\tcards = new int[13];\n\t\t\tfor ( int i = 0; i < 5; i++ ) {\n\t\t\t\tint index = sc.nextInt() -2;\n\t\t\t\tif ( index == -1 ) index = 12;\n\t\t\t\tcards[index]++;\n\t\t\t} for ( int i = 0; i < cards.length; i++ )\n\t\t\t\tcard += cards[i];\n\t\t\tString result = m.check(card);\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\nclass Main {\n\n    public static void main( final String[] args ) {\n\n\tfinal Scanner stdin = new Scanner( System.in );\n\n\twhile ( stdin.hasNextLine() ) {\n\n\t    final String[] input = stdin.nextLine().split( \",\" );\n\n\t    int[] hand = new int[5];\n\t    for ( int i = 0; i < 5; i++ ) {\n\t\thand[i] = Integer.parseInt( input[i] );\n\t\tif ( hand[i] == 1 ) {\n\t\t    hand[i] = 14;\n\t\t}\n\t    }\n\n\t    Arrays.sort( hand );\n\t    if ( isFourCard( hand ) ) {\n\t\tSystem.out.println( \"four card\" );\n\t    } else if ( isFullHouse( hand ) ) {\n\t\tSystem.out.println( \"full house\" );\n\t    } else if ( isStraight( hand ) ) {\n\t\tSystem.out.println( \"straight\" );\n\t    } else if ( isThreeCard( hand ) ) {\n\t\tSystem.out.println( \"three card\" );\n\t    } else if ( isTwoPair( hand ) ) {\n\t\tSystem.out.println( \"two pair\" );\n\t    } else if ( isOnePair( hand ) ) {\n\t\tSystem.out.println( \"one pair\" );\n\t    } else {\n\t\tSystem.out.println( \"null\" );\n\t    }\n\t}\t\n    }\n\n    static int getDuplicateOf( int[] hands, int noOfDup ) {\n\tint ans = 0;\n\t\n\tint index = 0;\n\twhile ( index < hands.length ) {\n\t    int no = hands[index];\n\t    int counter = 0;\n\t    while ( index < hands.length && no == hands[index] ) {\n\t\tcounter++;\n\t\tindex++;\n\t    }\n\t    if ( counter == noOfDup ) {\n\t\tans++;\n\t    }\n\t}\n\treturn ans;\n    }\n\n    static boolean isOnePair( int[] hand ) {\n\treturn getDuplicateOf( hand, 2 ) == 1;\n    }\n\n    static boolean isTwoPair( int[] hand ) {\n\treturn getDuplicateOf( hand, 2 ) == 2;\n    }\n\n    static boolean isThreeCard( int[] hand ) {\n\treturn getDuplicateOf( hand, 3 ) == 1;\n    }\n\n    static boolean isFullHouse( int[] hand ) {\n\treturn getDuplicateOf( hand, 2 ) == 1 &&\n\t    getDuplicateOf( hand, 3 ) == 1;\n    }\n\n    static boolean isFourCard( int[] hand ) {\n\treturn getDuplicateOf( hand, 4 ) == 1;\n    }\n\n    static boolean isStraight( int[] hand ) {\n\tif ( 2 <= hand[0] && hand[0] <= 10 ) {\n\t    for ( int i = 0; i < 5; i++ ) {\n\t\tif ( hand[i] != hand[0] + i ) {\n\t\t    return false;\n\t\t}\n\t    }\n\t    return true;\n\t} else {\n\t    return false;\n\t}\t   \n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint[] card=new int[5];\n\t\t\tint[] equal=new int[5];\n\t\t\tint equalcount=0;\n\t\t\tString[] str=sc.next().split(\",\");\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tcard[i]=Integer.parseInt(str[i]);\n\t\t\t}\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tfor(int j=4;j>i;j--){\n\t\t\t\t\tif(card[j-1]>card[j]){\n\t\t\t\t\t\tint box=card[j-1];\n\t\t\t\t\t\tcard[j-1]=card[j];\n\t\t\t\t\t\tcard[j]=box;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\tif(card[i]==card[j]){\n\t\t\t\t\t\tequal[i]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tif(equal[i]==2){\n\t\t\t\t\tequalcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(equal[0]==4||equal[1]==4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(equal[1]==2&&equal[2]==3||equal[2]==3&&equal[3]==2){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if(equal[2]==3){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if(equalcount==4){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}else if(equalcount==2){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}else if(card[1]==card[0]+1&&card[2]==card[1]+1&&card[3]==card[2]+1&&card[4]==card[3]+1){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str,strArray[];\n\n\t\twhile((str=br.readLine()) != null){\n\t\t\tint index[] = new int[14];\n\t\t\tint count=0;\n\t\t\tboolean judge=false;\n\t\t\tstrArray = str.split(\",\");\n\n\t\t\tfor(String s:strArray){\n\t\t\t\tcount = Math.max(count, ++index[Integer.parseInt(s)]);\n\t\t\t}\n\n\t\t\tif(count==4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if(count==3){\n\t\t\t\tfor(int i=0; i<14; i++){\n\t\t\t\t\tif(index[i]==2){\n\t\t\t\t\t\tjudge=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(judge ? \"full house\" : \"three card\");\n\t\t\t}\n\t\t\telse if(count==2){\n\t\t\t\tint c=0;\n\t\t\t\tfor(int i=0; i<14; i++){\n\t\t\t\t\tif(index[i]==2){\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(c==2 ? \"two pair\" : \"one pair\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(index[1]==1 && index[10]==1 &&index[11]==1 && index[12]==1 && index[13]==1){\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t}else{\n\t\t\t\t\tint i=0;\n\t\t\t\t\tfor(i=0; i<14; i++){\n\t\t\t\t\t\tif(index[i]==1){\n\t\t\t\t\t\t\tjudge=true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor(int j=i; j<i+5; j++){\n\t\t\t\t\t\tif(index[j] != 1){\n\t\t\t\t\t\t\tjudge=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(judge ? \"straight\" : \"null\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class P0038 {\n\n    /**\n     * 0038 Poker Hand\n     */\n    public static void main(String[] args) throws IOException {\n\n        // Read All Hands\n        List<Hand> hands = readHands();\n\n        for (Hand hand : hands) {\n            // Judge a hand\n            String handName = hand.judge();\n\n            // Write a result\n            System.out.println(handName);\n        }\n    }\n\n    /**\n     * Read all input line and return the list of hand.\n     *\n     * @return List of Hand\n     */\n    protected static List<Hand> readHands() throws IOException {\n\n        List<Hand> hands = new ArrayList<Hand>();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                System.in));\n\n        // One line to one Hand\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n\n            // Convert line to int array\n            String[] values = line.split(\",\");\n            int[] cards = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                cards[i] = Integer.parseInt(values[i]);\n            }\n\n            // Create hand and add to list\n            hands.add(new Hand(cards));\n        }\n\n        if (reader != null) {\n            reader.close();\n        }\n\n        return hands;\n    }\n\n    /**\n     * Hand class\n     */\n    static class Hand {\n\n        /** card array */\n        int[] cards;\n\n        /**\n         * Constructor\n         *\n         * @param cards card array\n         */\n        public Hand(final int[] cards) {\n            // Copy arguments to fields\n            this.cards = new int[5];\n            System.arraycopy(cards, 0, this.cards, 0, cards.length);\n        }\n\n        /**\n         * Judge this hand.\n         *\n         * @return Hand name if this hand has some role or null\n         */\n        public String judge() {\n\n            // Count\n            int[] numberOfCards = new int[14]; // A to K (index 0 is not used)\n            for (int card : cards) {\n                numberOfCards[card]++;\n            }\n\n            // Find role elements\n            int pair = 0;\n            int threeCard = 0;\n            int fourCard = 0;\n            for (int number : numberOfCards) {\n                switch (number) {\n                case 2:\n                    pair++;\n                    break;\n                case 3:\n                    threeCard++;\n                    break;\n                case 4:\n                    fourCard++;\n                    break;\n                }\n            }\n\n            // Judge \"Four Card\"\n            if (fourCard > 0) {\n                return \"four card\";\n            }\n\n            // Judge \"Full House\"\n            if (pair > 0 && threeCard > 0) {\n                return \"full house\";\n            }\n\n            // Prepare to judge \"Straight\"\n            int[] straightJudge = new int[5];\n            System.arraycopy(cards, 0, straightJudge, 0, cards.length);\n            Arrays.sort(straightJudge);\n\n            // Judge \"Straight\" (is all card is sequantial?)\n            int sequenceCount = 0;\n            for (int i = 1; i < straightJudge.length; i++) {\n                if ((straightJudge[i] - straightJudge[i - 1]) == 1) {\n                    sequenceCount++;\n                }\n            }\n            if (sequenceCount == 4) {\n                return \"straight\";\n            }\n\n            // Judge \"Straight\" (is special straight including A)\n            if (straightJudge[0] == 1 && straightJudge[1] == 10 && straightJudge[2] == 11 && straightJudge[3] == 12\n                    && straightJudge[4] == 13) {\n                return \"straight\";\n            }\n\n            // Judge \"Three card\"\n            if (threeCard > 0) {\n                return \"three card\";\n            }\n\n            // Judge \"Two pair\"\n            if (pair > 1) {\n                return \"two pair\";\n            }\n\n            // Judge \"One pair\"\n            if (pair > 0) {\n                return \"one pair\";\n            }\n            return null;\n        }\n    }\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic Scanner sc = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\n\t\twhile (sc.hasNext()) {\n\t\t\tString str = sc.next();\n\t\t\tString[] st = str.split(\",\");\n\t\t\tint[] stn = new int[st.length];\n\t\t\tint[] num = new int[13];\n\t\t\tString ans = \"null\";\n\n\t\t\tArrays.fill(num, 0);\n\n\n\t\t\t// ??????????????°????????????\n\t\t\tfor (int i = 0; i < st.length; i++) {\n\t\t\t\tstn[i] = Integer.parseInt(st[i]);\n\t\t\t}\n\n\t\t\t// ??°?????????????????????\n\t\t\tfor (int i = 0; i < stn.length; i++) {\n\n\t\t\t\tnum[stn[i]-1]++;\n\n\t\t\t}\n\n\t\t\t// ??????\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 1) {\n\t\t\t\tans = \"one pair\";\n\t\t\t}\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 2) {\n\t\t\t\tans = \"two pair\";\n\t\t\t}\n\t\t\t// ??????????????¢\n\t\t\tif (maxone(num) == 3 && maxtwo(num) == 1) {\n\t\t\t\tans = \"three card\";\n\t\t\t}\n\t\t\t// ???????????????\n\t\t\tif (maxone(num) == 3 && maxtwo(num) == 2) {\n\t\t\t\tans = \"hull house\";\n\t\t\t}\n\t\t\t// ??????????????????\n\t\t\tif (maxone(num) == 4) {\n\t\t\t\tans = \"four card\";\n\t\t\t}\n\t\t\t// ????????¬??????\n\t\t\tfor (int i = 0; i < 9; i++) {\n\t\t\t\tif (num[i] == 1 && num[i + 1] == 1 && num[i + 2] == 1 && num[i + 3] == 1 && num[i + 4] == 1) {\n\t\t\t\t\tans = \"straight\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (num[9] == 1 && num[10] == 1 && num[11] == 1 && num[12] == 1 && num[0] == 1) {\n\t\t\t\tans = \"straight\";\n\t\t\t}\n\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n\n\t// ??°????????????????????§????????????\n\tpublic static int maxone(int[] num) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < num.length; i++) {\n\t\t\tif (max < num[i]) {\n\t\t\t\tmax = num[i];\n\t\t\t}\n\n\t\t}\n\t\treturn max;\n\t}\n\n\t// ??°???????????????2??????????????§?????°?????????\n\tpublic static int maxtwo(int[] num) {\n\t\tint max1 = 0;\n\t\tint max2 = 0;\n\t\tif (num[0] > num[1]) {\n\t\t\tmax1 = num[0];\n\t\t\tmax2 = num[1];\n\t\t} else {\n\t\t\tmax1 = num[1];\n\t\t\tmax2 = num[0];\n\t\t}\n\t\tfor (int i = 2; i < num.length; i++) {\n\t\t\tif (max1 < num[i]) {\n\t\t\t\tmax2 = max1;\n\t\t\t\tmax1 = num[i];\n\t\t\t} else if (max2 < num[i]) {\n\t\t\t\tmax2 = num[i];\n\t\t\t}\n\t\t}\n\t\treturn max2;\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1 && number[1]==10)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main {\n\n\tpublic static String solve (int[] hand) {\n\t\tArrays.sort(hand);\n\t\tint[] check = new int[14];\n\t\tfor (int i = 0; i < hand.length; i++)\n\t\t\tcheck[hand[i]]++;\n\t\tint pair2 = 0, pair3 = 0, pair4 = 0;\n\t\tfor (int i = 1; i < check.length; i++) {\n\t\t\tif (check[i] == 2) pair2++;\n\t\t\tif (check[i] == 3) pair3++;\n\t\t\tif (check[i] == 4) pair4++;\n\t\t}\n\t\tif (pair4 == 1) return \"four card\";\n\t\tif (pair3 == 1 && pair2 == 1) return \"full house\";\n\n\t\tboolean straightFlg = true;\n\t\tfor (int i = 1; i < hand.length; i++) {\n\t\t\tif (hand[i] != hand[i - 1] + 1) {\n\t\t\t\tstraightFlg = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tboolean straightFlg2 = hand[0] == 1 && hand[1] == 10 &&\n\t\t\t\t\t\t\t   hand[2] == 11 && hand[3] == 12 && hand[4] == 13;\n\t\tif (straightFlg || straightFlg2) return \"straight\";\n\t\tif (pair3 == 1) return \"three card\";\n\t\tif (pair2 == 2) return \"two pair\";\n\t\tif (pair2 == 1) return \"one pair\";\n\t\treturn \"null\";\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br =\n\t\t\t\tnew BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tString[] str = line.split(\",\");\n\t\t\tint[] nums = new int[5];\n\t\t\tfor (int i = 0; i < nums.length; i++)\n\t\t\t\tnums[i] = Integer.parseInt(str[i]);\n\t\t\tSystem.out.println(solve(nums));\n\t\t\tline = null;\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n\n    /**\n     * ?????????????????????\n     */\n    public static void main(String[] args) throws IOException {\n\n        // ??\\????????????????????????MAX50??¶??¨???????????????????????§????????¨????????????????????§OK???\n        List<Hand> hands = readHands();\n\n        // 1??¶??????????????????\n        for (Hand hand : hands) {\n\n            // ??????????????????\n            String handName = hand.judge();\n\n            // ?????????????????????\n            System.out.println(handName);\n\n        }\n    }\n\n    /**\n     * ?¨??????\\???????????????????????????1??????????????????????????????????????¨???????????´?????????\n     *\n     * @return ???????????????\n     */\n    protected static List<Hand> readHands() throws IOException {\n\n        // ????????????????????¨?????????\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                System.in));\n\n        List<Hand> hands = new ArrayList<Hand>();\n        String line = null;\n        // ?¨??????\\?????????1???????????????????????????????????????\n        while ((line = reader.readLine()) != null) {\n            String[] values = line.split(\",\");\n\n            // ??????????????°??????????????????\n            int[] cards = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                cards[i] = Integer.parseInt(values[i]);\n            }\n\n            // ??????????????????????????????????????????????????????\n            hands.add(new Hand(cards));\n        }\n\n        // ????????????????????????????????????\n        if (reader != null) {\n            reader.close();\n        }\n\n        return hands;\n    }\n\n    /**\n     * ???????????¨????????????\n     */\n    static class Hand {\n\n        /** ??????????????± */\n        int[] cards;\n\n        /**\n         * ?????°??§???????????????????????????????????????\n         *\n         * @param cards ?????????\n         */\n        public Hand(final int[] cards) {\n            // ?????????????????¨???????????????\n            this.cards = new int[5];\n            System.arraycopy(cards, 0, this.cards, 0, cards.length);\n        }\n\n        /**\n         * ??????????????????????????????\n         *\n         * @return ???????????????????????´??????null????????????\n         */\n        public String judge() {\n\n            // ?????°?????????????????????\n            int[] numberOfCards = new int[14]; // ??????????????????0????????¨?????????\n            for (int card : cards) {\n                numberOfCards[card]++;\n            }\n\n            // ?????°????????§????????§??????????????¢???\n            int pair = 0;\n            int threeCard = 0;\n            int fourCard = 0;\n            for (int number : numberOfCards) {\n                switch (number) {\n                case 2:\n                    pair++;\n                    break;\n                case 3:\n                    threeCard++;\n                    break;\n                case 4:\n                    fourCard++;\n                    break;\n                }\n            }\n\n            // ??????????????????\n            if (fourCard > 0) {\n                return \"four card\";\n            }\n\n            // ???????????????\n            if (pair > 0 && threeCard > 0) {\n                return \"full house\";\n            }\n\n            // ????????¬?????????????????§??????????????§????????¬??????????????§????????????\n            int[] straightJudge = new int[5];\n            System.arraycopy(cards, 0, straightJudge, 0, cards.length);\n            Arrays.sort(straightJudge);\n\n            // ??????????????????5??£?¶???§????????§?????????OK\n            int sequenceCount = 0;\n            for (int i = 1; i < straightJudge.length; i++) {\n                if ((straightJudge[i] - straightJudge[i - 1]) == 1) {\n                    sequenceCount++;\n                }\n            }\n            if (sequenceCount == 4) {\n                return \"straight\";\n            }\n\n            // A??????????????????????????¬??????????????\\???????????????\n            if (straightJudge[0] == 1 && straightJudge[1] == 10 && straightJudge[2] == 11 && straightJudge[3] == 12\n                    && straightJudge[4] == 13) {\n                return \"straight\";\n            }\n\n            // ??????????????????\n            if (threeCard > 0) {\n                return \"three card\";\n            }\n\n            // ???????????¢\n            if (pair > 1) {\n                return \"two pair\";\n            }\n\n            if (pair > 0) {\n                return \"one pair\";\n            }\n            return null;\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\n\n class Main{\n     public static void main(String args[]){\n         Scanner sc = new Scanner(System.in);\n         String line;\n         while(sc.hasNext()){\n             line=sc.nextLine();\n             if(line.isEmpty())break;\n             String[] split=line.split(\",\");\n             int[] ints = new int[5]; for(int i=0;i<5;i++)ints[i]=Integer.parseInt(split[i]);\n             if(!_4c(ints))if(!fullH(ints))if(!st(ints))if(!_3c(ints))if(!_2p(ints))if(!_1p(ints))\n                 System.out.println(\"null\");\n         }\n         \n         \n     }\n     static boolean _4c(int[] ints){\n         if(ints[1]==ints[2]&&ints[1]==ints[3]&&ints[1]==ints[4]){System.out.println(\"four card\");\n         return true;}\n         int count=0; for(int x : ints) if(x==ints[0])count++;\n         if(count==4){System.out.println(\"four card\");return true;}\n         return false;\n     }\n     static boolean fullH(int[] ints){\n         HashSet<Integer>hs=new HashSet<Integer>();\n         for(int x:ints) hs.add(x);\n         if(hs.size()==2){System.out.println(\"full house\"); return true;}\n         return false;\n     }\n     static boolean st(int[] ints){\n         TreeSet<Integer>hs=new TreeSet<Integer>();\n         \n         for(int x:ints) hs.add(x);\n         if(hs.size()!=5)return false;\n         if(hs.last()-hs.first()==4){System.out.println(\"straight\");return true;}\n         if(hs.first()==1){hs.remove(1);\n             if(hs.first()==10)System.out.println(\"straight\");return true;\n        }return false;\n     }\n     static boolean _3c(int[] ints){\n        for(int i=0; i<5;i++){\n            int count=0;\n            for(int j=i+1;j<5;j++){\n                if(ints[i]==ints[j])count++;\n            }\n            if(count==3){System.out.println(\"three card\");return true;}\n        }\n        return false;\n     }\n     static boolean _2p(int[] ints){\n         TreeMap<Integer,Integer>tm=new TreeMap<Integer,Integer>();\n         for(int in:ints){\n             if(tm.containsKey(in))tm.put(in, tm.get(in)+1);\n             else tm.put(in, 1);\n         }\n         if(tm.keySet().size()==3){System.out.println(\"two pair\");return true;}\n         return false;\n     }\n     static boolean _1p(int[] ints){\n         for(int i=0; i<5;i++){\n             for(int j=i+1;j<5;j++){\n                 if(ints[i]==ints[j]){System.out.println(\"one pair\");return true;}\n         }\n     }return false;}\n }"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\nclass Main{\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        \n        String line;\n\n        while((line = br.readLine()) != null){\n            String[] input = line.split(\",\");\n            int[] cards = new int[5];\n\n            // 特殊なstraight判定\n            int[] special = {1,10,11,12,13};\n\n            for(int i = 0; i < 5; i++){\n                cards[i] = Integer.parseInt(input[i]);\n            }\n\n            Arrays.sort(cards);\n\n            int tmp = 0;    // 比較対象の数字\n            int same = 0;   // 前の数字と一致する回数\n            boolean gtTwo = false; // 数字の一致する枚数が3枚以上かどうか\n            boolean gtThree = false; // 数字の一致する枚数が4枚以上かどうか\n            int count = 1;  // 今何枚連続で一致しているか\n\n            for(int x : cards){\n                if(tmp == x){\n                    same++;\n                    count++;\n                    if(count > 2) gtTwo = true;\n                    if(count > 3) gtThree = true;\n                }else{\n                    tmp = x;\n                    count = 1;\n                }\n            }\n\n            if(same == 3){\n                if(gtThree){\n                    System.out.println(\"four card\");\n                }else{\n                    System.out.println(\"full house\");\n                }\n            }else if(same == 2){\n                if(gtTwo){\n                    System.out.println(\"three card\");\n                }else{\n                    System.out.println(\"two pair\");\n                }\n            }else if(same == 1){\n                System.out.println(\"one pair\");\n            }else if(same == 0){\n                boolean isStraight = true;\n                int run = cards[0];\n                for(int i = 1; i < 5; i++){\n                    if(cards[i] - run != 1){\n                        isStraight = false;\n                        break;\n                    }\n                    run = cards[i];\n                }\n\n                if(isStraight || Arrays.equals(cards, special)){\n                    System.out.println(\"straight\");\n                }else{\n                    System.out.println(\"null\");\n                }\n            }\n\n        } // end of while\n\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\nfinal class Main {\n\n    private static String solv(final int[] hand) {\n        Arrays.sort(hand);\n        int count = 0;\n        int no = 0;\n        int pairCount = 0;\n        boolean threeCard = false;\n        boolean straight = true;\n        for (int i = 0; i < hand.length; i++) {\n            if (no != hand[i]) {\n                if (count == 4) {\n                    // 4card\n                    return \"four card\";\n                } else if (count == 3) {\n                    // 3card or fullhouse\n                    if (pairCount > 0) {\n                        return \"full house\";\n                    }\n                    threeCard = true;\n                } else if (count == 2) {\n                    // 1pair or 2pair or fullhouse\n                    if (threeCard) {\n                        return \"full house\";\n                    }\n                    pairCount++;\n                }\n                no = hand[i];\n                count = 1;\n            } else {\n                straight = false;\n                count++;\n            }\n        }\n        if (count == 4) {\n            // 4card\n            return \"four card\";\n        } else if (count == 3) {\n            // 3card or fullhouse\n            if (pairCount > 0) {\n                return \"full house\";\n            }\n            threeCard = true;\n        } else if (count == 2) {\n            // 1pair or 2pair or fullhouse\n            if (threeCard) {\n                return \"full house\";\n            }\n            pairCount++;\n        }\n        if (pairCount > 0) {\n            if (pairCount == 1) {\n                return \"one pair\";\n            } else if (pairCount == 2) {\n                return \"two pair\";\n            }\n        }\n        if (threeCard) {\n            return \"three card\";\n        }\n        if (straight) {\n            int[] temp = new int[hand.length + 1];\n            System.arraycopy(hand, 0, temp, 0, hand.length);\n            if (temp[0] == 1) {\n                temp[temp.length - 1] = 14;\n            }\n            int val = temp[0];\n            count = 1;\n            for (int i = 1; i < temp.length; i++) {\n                if (val + 1 == temp[i]) {\n                    count++;\n                    if (count == 5) {\n                        return \"straight\";\n                    }\n                } else {\n                    count = 1;\n                }\n                val = temp[i];\n            }\n        }\n        return \"null\";\n    }\n\n    private Main() {\n    }\n\n    public static void main(final String[] argv) throws IOException {\n        final BufferedReader inputReader =\n                new BufferedReader(new InputStreamReader(System.in));\n        while (true) {\n            String input = inputReader.readLine();\n            if (input == null) {\n                break;\n            }\n            String[] temp = input.split(\",\");\n            int[] hand = new int[temp.length];\n            for (int i = 0; i < temp.length; i++) {\n                hand[i] = Integer.parseInt(temp[i]);\n            }\n            String out = solv(hand);\n            System.out.println(out);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic Scanner sc = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\n\t\twhile (sc.hasNext()) {\n\t\t\tString str = sc.next();\n\t\t\tString[] st = str.split(\",\");\n\t\t\tint[] stn = new int[st.length];\n\t\t\tint[] num = new int[13];\n\t\t\tString ans = \"null\";\n\n\t\t\tArrays.fill(num, 0);\n\n\t\t\t// ??????????????°????????????\n\t\t\tfor (int i = 0; i < st.length; i++) {\n\t\t\t\tstn[i] = Integer.parseInt(st[i]);\n\t\t\t}\n\n\t\t\t// ??°?????????????????????\n\t\t\tfor (int i = 0; i < stn.length; i++) {\n\n\t\t\t\tnum[stn[i] - 1]++;\n\n\t\t\t}\n\n\t\t\t// ??????\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 1) {\n\t\t\t\tans = \"one pair\";\n\t\t\t}\n\t\t\t// ???????????¢\n\t\t\telse if (maxone(num) == 2 && maxtwo(num) == 2) {\n\t\t\t\tans = \"two pair\";\n\t\t\t}\n\t\t\t// ??????????????¢\n\t\t\telse if (maxone(num) == 3 && maxtwo(num) == 1) {\n\t\t\t\tans = \"three card\";\n\t\t\t}\n\t\t\t// ???????????????\n\t\t\telse if (maxone(num) == 3 && maxtwo(num) == 2) {\n\t\t\t\tans = \"full house\";\n\t\t\t}\n\t\t\t// ??????????????????\n\t\t\telse if (maxone(num) == 4) {\n\t\t\t\tans = \"four card\";\n\t\t\t}\n\t\t\t// ????????¬??????\n\t\t\telse {\n\t\t\t\tfor (int i = 0; i < 9; i++) {\n\t\t\t\t\tif (num[i] == 1 && num[i + 1] == 1 && num[i + 2] == 1 && num[i + 3] == 1 && num[i + 4] == 1) {\n\t\t\t\t\t\tans = \"straight\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (num[9] == 1 && num[10] == 1 && num[11] == 1 && num[12] == 1 && num[0] == 1) {\n\t\t\t\t\tans = \"straight\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n\n\t// ??°????????????????????§????????????\n\tpublic static int maxone(int[] num) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < num.length; i++) {\n\t\t\tif (max < num[i]) {\n\t\t\t\tmax = num[i];\n\t\t\t}\n\n\t\t}\n\t\treturn max;\n\t}\n\n\t// ??°???????????????2??????????????§?????°?????????\n\tpublic static int maxtwo(int[] num) {\n\t\tint max1 = 0;\n\t\tint max2 = 0;\n\t\tif (num[0] > num[1]) {\n\t\t\tmax1 = num[0];\n\t\t\tmax2 = num[1];\n\t\t} else {\n\t\t\tmax1 = num[1];\n\t\t\tmax2 = num[0];\n\t\t}\n\t\tfor (int i = 2; i < num.length; i++) {\n\t\t\tif (max1 < num[i]) {\n\t\t\t\tmax2 = max1;\n\t\t\t\tmax1 = num[i];\n\t\t\t} else if (max2 < num[i]) {\n\t\t\t\tmax2 = num[i];\n\t\t\t}\n\t\t}\n\t\treturn max2;\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(i==13){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1 && number[1]==10)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.lang.Integer;\nimport java.lang.String;\nimport java.lang.System;\nimport java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n\n        while(sc.hasNext()) {\n            String str = sc.nextLine();\n            String str_arr[] = str.split(\",\");\n\n            // 配列の初期化\n            int cards[] = new int[13];\n            for (int i = 0; i < cards.length; i++) {\n                cards[i] = 0;\n            }\n\n            // 枚数をカウント\n            for (int i = 0; i < str_arr.length; i++) {\n                int num = Integer.parseInt(str_arr[i]);\n                cards[num-1]++;\n            }\n\n            if (isFourCard(cards)) {\n                System.out.println(\"four card\");\n            } else if(isFullHouse(cards)) {\n                System.out.println(\"full house\");\n            } else if(isStraight(cards)) {\n                System.out.println(\"straight\");\n            } else if(isThreeCard(cards)) {\n                System.out.println(\"three card\");\n            } else if(isTwoPair(cards)) {\n                System.out.println(\"two pair\");\n            } else if(isOnePair(cards)) {\n                System.out.println(\"one pair\");\n            } else {\n                System.out.println(\"null\");\n            }\n        }\n    }\n\n    public static boolean isFourCard(int[] cards) {\n        for (int i = 0; i < cards.length; i++) {\n            if (cards[i] == 4) return true;\n        }\n        return false;\n    }\n\n    public static boolean isFullHouse(int[] cards) {\n        if (isThreeCard(cards) && isOnePair(cards)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static boolean isStraight(int[] cards) {\n        // 配列から文字列に変換\n        String card_str = arrayToString(cards);\n\n        String regex1 = \"1{5}\";\n        Pattern p1 = Pattern.compile(regex1);\n        Matcher m1 = p1.matcher(card_str);\n        if (m1.find()) { return true; }\n\n        String regex2 = \"10{8}1{4}\";\n        Pattern p2 = Pattern.compile(regex2);\n        Matcher m2 = p2.matcher(card_str);\n        if (m2.find()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static boolean isThreeCard(int[] cards) {\n        for (int i = 0; i < cards.length; i++) {\n            if (cards[i] == 3) return true;\n        }\n        return false;\n    }\n\n    public static boolean isTwoPair(int[] cards) {\n        int count = 0;\n        for (int i = 0; i < cards.length; i++) {\n            if (cards[i] == 2) count ++;\n        }\n\n        if (count == 2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static boolean isOnePair(int[] cards) {\n        for (int i = 0; i < cards.length; i++) {\n            if (cards[i] == 2) return true;\n        }\n        return false;\n    }\n\n    public static String arrayToString(int[] cards) {\n        String res = \"\";\n\n        for (int i = 0; i < cards.length; i++) {\n            res += cards[i];\n        }\n\n        return res;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint[] card=new int[5];\n\t\t\tint[] equal=new int[5];\n\t\t\tint equalcount=0;\n\t\t\tString[] str=sc.next().split(\",\");\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tcard[i]=Integer.parseInt(str[i]);\n\t\t\t}\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tfor(int j=4;j>i;j--){\n\t\t\t\t\tif(card[j-1]>card[j]){\n\t\t\t\t\t\tint box=card[j-1];\n\t\t\t\t\t\tcard[j-1]=card[j];\n\t\t\t\t\t\tcard[j]=box;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\tif(card[i]==card[j]){\n\t\t\t\t\t\tequal[i]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tif(equal[i]==2){\n\t\t\t\t\tequalcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tif(equal[0]==4||equal[1]==4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(equal[1]==2&&equal[2]==3||equal[2]==3&&equal[3]==2){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if(equal[2]==3){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if(equalcount==4){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}else if(equalcount==2){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}else if(card[1]==card[0]+1&&card[2]==card[1]+1&&card[3]==card[2]+1&&card[4]==card[3]+1){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else if(card[0]==1&&card[1]==10&&card[2]==11&&card[3]==12&&card[4]==13){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nclass Main\n{\n    public static void main(String args[])throws IOException\n    {\n\tBufferedReader input=new BufferedReader(new InputStreamReader(System.in));\n\tString str;\n\twhile((str=input.readLine())!=null)\n\t    {\n\t\tString str_ary[]=str.split(\",\");\n\t\tint a[]=new int[5];\n\t\tfor(int i=0;i<5;i++)\n\t\t    {\n\t\t\ta[i]=Integer.parseInt(str_ary[i]);\n\t\t    }\n\t\tfor(int i=0;i<5;i++)\n\t\t    {\n\t\t\tint mini=a[i],x=i;\n\t\t\tfor(int j=i;j<5;j++)\n\t\t\t    {\n\t\t\t\tif(mini>a[j])\n\t\t\t\t    {\n\t\t\t\t\tmini=a[j];\n\t\t\t\t\tx=j;\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t    }\n\t\t\tint tmp=a[i];\n\t\t\ta[i]=mini;\n\t\t\ta[x]=tmp;\n\t\t    }\n\t\t\n\t\tint count=0;\n\t\tfor(int i=0;i<5;i++)\n\t\t    {\n\t\t\tfor(int j=i;j<5;j++)\n\t\t\t    {\n\t\t\t\tif(a[i]==a[j] && i!=j)\n\t\t\t\t    {\n\t\t\t\t\tcount++;\n\t\t\t\t\t\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t\n\t\t    }\n\t\tif(((a[0]+1==a[1]) && (a[1]+1)==a[2]) && (a[2]+1==a[3]) && (a[3]+1==a[4]))System.out.println(\"straight\");\n\t\telse if((a[0]==1) && (a[1]==10) && (a[2]==11) && (a[3]==12) && (a[4]==13))System.out.println(\"straight\");\n\telse if(count==1)System.out.println(\"one pair\");\n\telse if(count==2)System.out.println(\"two pair\");\n\telse if(count==3)System.out.println(\"three card\");\n\telse if(count==4)System.out.println(\"full house\");\n\telse if(count==6)System.out.println(\"four card\");\n\telse System.out.println(\"null\");\n\t    }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\npublic class Main {\n public static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n\twhile (in.hasNext()) {\n\t String[] line = in.next().split(\",\");\n\t SortedMap<Integer, Integer> cards = new TreeMap<Integer, Integer>();\n\t for (String s : line) {\n\t\tInteger key = Integer.valueOf(s);\n\t\tint count = 1;\n\t\tif (cards.containsKey(key)) {\n\t\t count += cards.get(key).intValue();\n\t\t}\n\t\tcards.put(key, Integer.valueOf(count));\n\t }\n\t if (cards.containsValue(Integer.valueOf(4))) {\n\t\tSystem.out.println(\"four card\");\n\t } else {\n\t\tboolean hasThree =\n\t\t  (cards.containsValue(Integer.valueOf(3)));\n\t\tboolean hasPeir =\n\t\t  (cards.containsValue(Integer.valueOf(2)));\n\t\tif (hasThree) {\n\t\t System.out.println(\n\t\t\t (hasPeir) ? \"full house\" : \"three card\");\n\t\t} else if (hasPeir) {\n\t\t System.out.println(\n\t\t\t (cards.keySet().size() == 3) ?\n\t\t\t   \"two pair\" : \"one pair\");\n\t\t} else {\n\t\t int firstKey = cards.firstKey().intValue();\n\t\t int lastKey = cards.lastKey().intValue();\n\t\t if (lastKey - firstKey == 4 ||\n\t\t\t (firstKey == 1 && cards.tailMap(10).size() == 4)) {\n\t\t\tSystem.out.println(\"straight\");\n\t\t } else {\n\t\t\tSystem.out.println(\"null\");\n\t\t }\n\t\t}\n\t }\n\t}\n }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n    static int[] cards;\n    static int[] hindo;\n    public static void main(String[] args){\n\tScanner sc = new Scanner(System.in);\n\n\twhile(sc.hasNext()){\n\t    String[] line = sc.next().split(\",\");\n\t    cards = new int[5];\n\t    hindo = new int[14];\n\t    for(int i=0; i<cards.length; i++){\n\t\tcards[i] = Integer.parseInt(line[i]);\n\t\thindo[cards[i]]++;\n\t    }\n\n\t    String ans = solve();\n\n\t    System.out.println(ans);\n\n\t}\n    }\n\n    public static String solve(){\n\tint four = 0;\n\tint three = 0;\n\tint two = 0;\n\tint firstOne = 0;\n\tfor(int i=0; i<hindo.length; i++){\n\t    if(hindo[i]==1 && firstOne==0){firstOne=i;}\n\t    if(hindo[i]==4){four++;}\n\t    if(hindo[i]==3){three++;}\n\t    if(hindo[i]==2){two++;}\n\t}\n\tif(four==1){return \"four card\";}\n\tif(three==1 && two==1){return \"full house\";}\n\tif(three==1){return \"three card\";}\n\tif(two==2){return \"two pair\";}\n\tif(two==1){return \"one pair\";}\n\tif(firstOne>hindo.length-4){return \"null\";}\n\n\tboolean straight1 = true;\n\tfor(int i=firstOne; i<=firstOne+4; i++){\n\t    if(i==14){i=1;}\n\t    if(hindo[i]!=1){straight1 = false;}\n\t}\n\tboolean straight2 = true;\n\tint count = 0;\n\tfor(int i=firstOne; ; i--){\n\t    if(count==5){break;}\n\t    if(i==0){i=13;}\n\t    if(hindo[i]!=1){straight2 = false;}\n\t    count++;\n\t}\n\tif(straight1 || straight2){return \"straight\";}\n\n\telse return \"null\";\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\n\t\tString line;\n\t\tString[] cards;\n\t\twhile (sc.hasNext() == true) {\n\t\t\tline = sc.nextLine();\n\t\t\t\n\t\t\tcards = line.split(\",\");\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\t\tint pre = 0;\n\t\t\tboolean straight = false;\n\t\t\t\n\t\t\tint[] point = new int[14];\n\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\tint tmp = Integer.parseInt(cards[i]);\n\t\t\t\tpoint[tmp]++;\n\t\t\t\t\n\t\t\t\tif (pre != 0) {\n\t\t\t\t\tif ((pre + 1) != tmp) {\n\t\t\t\t\t\tif ((pre != 1) || (tmp != 10)) straight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tint[] judge = new int[5];\n\t\t\tfor (int i = 0; i < point.length; i++) {\n\t\t\t\tjudge[point[i]]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (judge[4] == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if ((judge[2] == 1) && (judge[3] == 1)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (judge[1] == 5) {\n\t\t\t\tif (straight == true) System.out.println(\"full house\");\n\t\t\t\telse System.out.println(\"null\");\n\t\t\t} else if (judge[3] == 1) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (judge[2] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (judge[2] == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n\n    /**\n     * 0038 Poker Hand\n     */\n    public static void main(String[] args) throws IOException {\n\n        // Read All Hands\n        List<Hand> hands = readHands();\n\n        for (Hand hand : hands) {\n            // Judge a hand\n            String handName = hand.judge();\n\n            // Write a result\n            System.out.println(handName);\n        }\n    }\n\n    /**\n     * Read all input line and return the list of hand.\n     *\n     * @return List of Hand\n     */\n    protected static List<Hand> readHands() throws IOException {\n\n        List<Hand> hands = new ArrayList<Hand>();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                System.in));\n\n        // One line to one Hand\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n\n            // Convert line to int array\n            String[] values = line.split(\",\");\n            int[] cards = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                cards[i] = Integer.parseInt(values[i]);\n            }\n\n            // Create hand and add to list\n            hands.add(new Hand(cards));\n        }\n\n        if (reader != null) {\n            reader.close();\n        }\n\n        return hands;\n    }\n\n    /**\n     * Hand class\n     */\n    static class Hand {\n\n        /** card array */\n        int[] cards;\n\n        /**\n         * Constructor\n         *\n         * @param cards card array\n         */\n        public Hand(final int[] cards) {\n            // Copy arguments to fields\n            this.cards = new int[5];\n            System.arraycopy(cards, 0, this.cards, 0, cards.length);\n        }\n\n        /**\n         * Judge this hand.\n         *\n         * @return Hand name if this hand has some role or null\n         */\n        public String judge() {\n\n            // Count\n            int[] numberOfCards = new int[14]; // A to K (index 0 is not used)\n            for (int card : cards) {\n                numberOfCards[card]++;\n            }\n\n            // Find role elements\n            int pair = 0;\n            int threeCard = 0;\n            int fourCard = 0;\n            for (int number : numberOfCards) {\n                switch (number) {\n                case 2:\n                    pair++;\n                    break;\n                case 3:\n                    threeCard++;\n                    break;\n                case 4:\n                    fourCard++;\n                    break;\n                }\n            }\n\n            // Judge \"Four Card\"\n            if (fourCard > 0) {\n                return \"four card\";\n            }\n\n            // Judge \"Full House\"\n            if (pair > 0 && threeCard > 0) {\n                return \"full house\";\n            }\n\n            // Prepare to judge \"Straight\"\n            int[] straightJudge = new int[5];\n            System.arraycopy(cards, 0, straightJudge, 0, cards.length);\n            Arrays.sort(straightJudge);\n\n            // Judge \"Straight\" (is all card is sequantial?)\n            int sequenceCount = 0;\n            for (int i = 1; i < straightJudge.length; i++) {\n                if ((straightJudge[i] - straightJudge[i - 1]) == 1) {\n                    sequenceCount++;\n                }\n            }\n            if (sequenceCount == 4) {\n                return \"straight\";\n            }\n\n            // Judge \"Straight\" (is special straight including A)\n            if (straightJudge[0] == 1 && straightJudge[1] == 10 && straightJudge[2] == 11 && straightJudge[3] == 12\n                    && straightJudge[4] == 13) {\n                return \"straight\";\n            }\n\n            // Judge \"Three card\"\n            if (threeCard > 0) {\n                return \"three card\";\n            }\n\n            // Judge \"Two pair\"\n            if (pair > 1) {\n                return \"two pair\";\n            }\n\n            // Judge \"One pair\"\n            if (pair > 0) {\n                return \"one pair\";\n            }\n            return null;\n        }\n    }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.Arrays;\n\nclass Main\n{\n\tpublic static void main(String args[])\n\t{\n\t\tScanner sc = new Scanner(System.in).useDelimiter(\"[,\\n]\");\n\t\t\n\t\twhile (true)\n\t\t{\n\t\t\tint hands[] = new int[5];\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\t{\n\t\t\t\t\thands[i] = sc.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tArrays.sort(hands);\n\t\t\tJUDGE:\n\t\t\t{\n\t\t\t\tint count = 0;\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t{\n\t\t\t\t\tif (hands[i] == hands[i+1] && hands[i] == hands[i+2] && hands[i] == hands[i+3])\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\t\tbreak JUDGE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcount = 0;\n\t\t\t\tfor (int i = 0; i< 3; i++)\n\t\t\t\t{\n\t\t\t\t\tif (hands[0] == hands[i])\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (count == 2 || count == 3)\n\t\t\t\t{\n\t\t\t\t\tint subcount = 0;\n\t\t\t\t\tfor (int i = count; i < 5; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (hands[count] == hands[i])\n\t\t\t\t\t\t\tsubcount++;\n\t\t\t\t\t}\n\t\t\t\t\tif (subcount == ((count == 2) ? 3 : 2))\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\t\tbreak JUDGE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcount = 0;\n\t\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\t{\n\t\t\t\t\tif (hands[0] + i == hands[i])\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (count == 5)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\tbreak JUDGE;\n\t\t\t\t}\n\t\t\t\tif (hands[0] == 1 && hands[1] == 10 && hands[2] == 11 && hands[3] == 12 && hands[4] == 13)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\tbreak JUDGE;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i< 3; i++)\n\t\t\t\t{\n\t\t\t\t\tif (hands[i] == hands[i+1] && hands[i] == hands[i+2])\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak JUDGE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcount = 0;\n\t\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\t{\n\t\t\t\t\tfor (int j = i + 1; j < 5; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (hands[i] == hands[j])\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tif (count == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\t\tbreak JUDGE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count == 1)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\tbreak JUDGE;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.TreeMap;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()) {\n\t\t\tTreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();\n\t\t\tString[] numbersStr = scan.nextLine().split(\",\");\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tInteger input = Integer.parseInt(numbersStr[i]);\n\t\t\t\tif(map.containsKey(input)) {\n\t\t\t\t\tmap.put(input, map.get(input) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tmap.put(input, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\toutputHand(map);\n\t\t}\n\t\tscan.close();\n\t}\n\n\tpublic static void outputHand(TreeMap<Integer, Integer> map) {\n\t\tif(isFourCard(map)) {\n\t\t\tSystem.out.println(\"four card\");\n\t\t} else if(isFullHouse(map)) {\n\t\t\tSystem.out.println(\"full house\");\n\t\t} else if(isStraight(map)) {\n\t\t\tSystem.out.println(\"straight\");\n\t\t} else if(isThreeCard(map)) {\n\t\t\tSystem.out.println(\"three card\");\n\t\t} else if(isTwoPair(map)) {\n\t\t\tSystem.out.println(\"two pair\");\n\t\t} else if(isOnePair(map)) {\n\t\t\tSystem.out.println(\"one pair\");\n\t\t} else {\n\t\t\tSystem.out.println(\"null\");\n\t\t}\n\t}\n\n\tprivate static boolean isOnePair(TreeMap<Integer, Integer> map) {\n\t\tif(map.containsValue(2)) return true;\n\t\treturn false;\n\t}\n\n\tprivate static boolean isTwoPair(TreeMap<Integer, Integer> map) {\n\t\tint pairNum = 0;\n\t\tfor(Integer value : map.keySet()) {\n\t\t\tif(map.get(value) == 2) pairNum++;\n\t\t}\n\t\tif(pairNum == 2) return true;\n\t\treturn false;\n\t}\n\n\tprivate static boolean isThreeCard(TreeMap<Integer, Integer> map) {\n\t\tif(map.containsValue(3)) return true;\n\t\treturn false;\n\t}\n\n\tprivate static boolean isStraight(TreeMap<Integer, Integer> map) {\n\t\tif(map.size() == 5) {\n\t\t\tint consecutiveNum = 0, lastNum = 0;\n\t\t\tfor(Integer value : map.keySet()) {\n\t\t\t\tif(value == lastNum + 1) {\n\t\t\t\t\tconsecutiveNum++;\n\t\t\t\t\tif(consecutiveNum == 4 && value == 13) {\n\t\t\t\t\t\tif(map.containsKey(1)) consecutiveNum++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsecutiveNum = 1;\n\t\t\t\t}\n\t\t\t\tlastNum = value;\n\t\t\t}\n\t\t\tif(consecutiveNum == 5) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static boolean isFullHouse(TreeMap<Integer, Integer> map) {\n\t\tif(map.containsValue(3) && map.containsValue(2)) return true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean isFourCard(TreeMap<Integer, Integer> map) {\n\t\tif(map.containsValue(4)) return true;\n\t\treturn false;\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\n\tstatic Scanner sc = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\n\t\twhile (sc.hasNext()) {\n\t\t\tString str = sc.next();\n\t\t\tString[] st = str.split(\",\");\n\t\t\tint[] stn = new int[st.length];\n\t\t\tint[] num = new int[13];\n\t\t\tString ans = \"null\";\n\n\t\t\t// ??????????????°????????????\n\t\t\tfor (int i = 0; i < st.length; i++) {\n\t\t\t\tstn[i] = Integer.parseInt(st[i]);\n\t\t\t}\n\n\t\t\t// ??°?????????????????????\n\t\t\tfor (int i = 0; i < stn.length; i++) {\n\t\t\t\tfor (int j = 1; j < 14; j++) {\n\t\t\t\t\tif (stn[i] == j) {\n\t\t\t\t\t\tnum[j - 1]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ??????\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 1) {\n\t\t\t\tans = \"one pair\";\n\t\t\t}\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 2) {\n\t\t\t\tans = \"two pair\";\n\t\t\t}\n\t\t\t// ??????????????¢\n\t\t\tif (maxone(num) == 3 && maxtwo(num) == 1) {\n\t\t\t\tans = \"three card\";\n\t\t\t}\n\t\t\t// ???????????????\n\t\t\tif (maxone(num) == 3 && maxtwo(num) == 2) {\n\t\t\t\tans = \"hull house\";\n\t\t\t}\n\t\t\t// ??????????????????\n\t\t\tif (maxone(num) == 4) {\n\t\t\t\tans = \"four card\";\n\t\t\t}\n\t\t\t// ????????¬??????\n\t\t\tfor (int i = 0; i < 9; i++) {\n\t\t\t\tif (num[i] == 1 && num[i + 1] == 1 && num[i + 2] == 1 && num[i + 3] == 1 && num[i + 4] == 1) {\n\t\t\t\t\tans = \"straight\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(num[9]==1 && num[10]==1 && num[11]==1 && num[12]==1 && num[0]==1){\n\t\t\t\tans = \"straight\";\n\t\t\t}\n\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n\n\t// ??°????????????????????§????????????\n\tpublic static int maxone(int[] num) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < num.length; i++) {\n\t\t\tif (max < num[i]) {\n\t\t\t\tmax = num[i];\n\t\t\t}\n\n\t\t}\n\t\treturn max;\n\t}\n\n\t// ??°???????????????2??????????????§?????°?????????\n\tpublic static int maxtwo(int[] num) {\n\t\tint max1 = 0;\n\t\tint max2 = 0;\n\t\tif (num[0] > num[1]) {\n\t\t\tmax1 = num[0];\n\t\t\tmax2 = num[1];\n\t\t} else {\n\t\t\tmax1 = num[1];\n\t\t\tmax2 = num[0];\n\t\t}\n\t\tfor (int i = 2; i < num.length; i++) {\n\t\t\tif (max1 < num[i]) {\n\t\t\t\tmax2=max1;\n\t\t\t\tmax1 = num[i];\n\t\t\t} else if (max2 < num[i]) {\n\t\t\t\tmax2 = num[i];\n\t\t\t}\n\t\t}\n\t\treturn max2;\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner sc = new Scanner(System.in);\n\t\tString ph = new String();\n\n\t\t\n\t\t\twhile(sc.hasNext()) {\n\t\t\t\tph = sc.nextLine();\n\t\t\t\tSystem.out.printf(\"%s\\n\", PokerHand(ph));\n\t\t\t}\n\t}\n\n\tprivate static String PokerHand(String ph) {\n\t\tString[] pkh = new String[5];\n\t\tint[] pkh_cnvIntger = new int[5];\n\t\tString hndnm = \"null\";\n\t\tMap<Integer, Integer> mapHand = new HashMap<>();\n\t\tint cnt = 0;\n\t\tboolean isStraight = true;\n\t\tint firstRankcnt = 0;\n\t\tint secondRankcnt = 0;\n\t\t\n\t\tpkh = ph.split(\",\");\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tpkh_cnvIntger[i] = Integer.parseInt(pkh[i]);\n\t\t\tcnt = 1;\n\t\t\t\tif (mapHand.containsKey(pkh_cnvIntger[i])) {\n\t\t\t\t\tcnt = mapHand.get(pkh_cnvIntger[i]) + 1;\n\t\t\t\t} \n\t\t\tmapHand.put(pkh_cnvIntger[i], cnt);\n\t\t}\n\t\n\t\tfor (int i = 1; i <= 13; i++) {\n\t\t\tif (mapHand.containsKey(i)) {\n\t\t\t\tif (mapHand.get(i) > firstRankcnt ) {\n\t\t\t\t\tsecondRankcnt = firstRankcnt;\n\t\t\t\t\tfirstRankcnt = mapHand.get(i);\n\t\t\t\t} else if ( mapHand.get(i) >secondRankcnt){\n\t\t\t\t\tsecondRankcnt = mapHand.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//System.out.println(mapHand);\n\t\t\n\t\tif (firstRankcnt >= 4) {\n\t\t\thndnm = \"four card\";\n\t\t} else if (firstRankcnt == 3) {\n\t\t\tif (secondRankcnt == 2) {\n\t\t\t\thndnm = \"full house\";\n\t\t\t} else {\n\t\t\t\thndnm = \"three card\";\n\t\t\t}\n\t\t} else if (firstRankcnt == 2) {\n\t\t\tif (secondRankcnt == 2) {\n\t\t\t\thndnm = \"two pair\";\n\t\t\t} else {\n\t\t\t\thndnm = \"one pair\";\n\t\t\t}\n\t\t} else {\n\t\t\thndnm = null;\n\t\t}\n\t\t\n\t\tArrays.sort(pkh_cnvIntger);\n\t\tfor (int i = 1; i < 5; i++) { // ストレート\n\t\t\tif (pkh_cnvIntger[i] - pkh_cnvIntger[i - 1] != 1) {\n\t\t\t\tisStraight = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (pkh_cnvIntger[0] == 1 && pkh_cnvIntger[1] == 10 && pkh_cnvIntger[2] == 11 && pkh_cnvIntger[3] == 12 && pkh_cnvIntger[4] == 13) { \n\t\t\tisStraight = true;\n\t\t}\n\t\t\n\t\tif (isStraight == true) hndnm = \"straight\";\n\t\t\n\t\treturn hndnm;\n\t}\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(sc.hasNext()){\n\t\t\tint[] n = new int[14];\n\t\t\tint[] m = new int[14];\n\t\t\t\n\t\t\tString s = sc.next();\n\t\t\t\n\t\t\tint start;\n\t\t\tint j=0;\n\t\t\tfor(int i=0;i<4;i++){\n\t\t\t\tstart = j;\n\t\t\t\twhile(s.substring(j,j+1).compareTo(\",\")!=0)j++;\n\t\t\t\tn[Integer.valueOf(s.substring(start,j))]++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tn[Integer.valueOf(s.substring(j,s.length()))]++;\n\t\t\t\n\t\t\tm = Arrays.copyOf(n,14);\n\t\t\t\n\t\t\tArrays.sort(m);\n\t\t\t\n\t\t\tif(m[13]==4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(m[13]==3 && m[12]==2){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if(m[13]==3 && m[12]==1){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if(m[13]==2 && m[12]==2){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}else if(m[13]==2 && m[12]==1){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}else{\n\t\t\t\tif(n[10]==1 && n[11]==1 && n[12]==1 && n[13]==1 && n[1]==1){\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t}else{\n\t\t\t\t\tboolean flag = true;\n\t\t\t\t\tfor(int i=1;i<10;i++){\n\t\t\t\t\t\tif(n[i]==1 && n[i+1]==1 && n[i+2]==1 && n[i+3]==1 && n[i+4]==1){\n\t\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(flag==true){\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\t\n\t\t\t\n\t\t}\n\t\n\t}\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str,strArray[];\n\t\tint nArray[] = new int[5];\n\n\t\twhile((str=br.readLine()) != null){\n\t\t\tstrArray = str.split(\",\");\n\n\t\t\tfor(int i=0; i<5; i++){\n\t\t\t\tnArray[i] = Integer.parseInt(strArray[i]);\n\t\t\t}\n\n\t\t\tArrays.sort(nArray);\n\t\t\tSystem.out.println(judgement(nArray));\n\n\t\t}\n\t}\n\n\tstatic String judgement(int n[]){\n\t\tString re=\"null\";\n\t\tif(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13){\n\t\t\tre=\"straight\";\n\t\t}\n\t\telse if(n[1]==n[0]+1 && n[2]==n[1]+1 && n[3]==n[2]+1 && n[4]==n[3]+1){\n\t\t\tre=\"straight\";\n\t\t}\n\t\telse if((n[0]==n[2] && n[1]==n[3]) || (n[1]==n[3] && n[2]==n[4])){\n\t\t\tre=\"four card\";\n\t\t}\n\t\telse if((n[0]==n[2] || n[2]==n[4]) && (n[0]==n[1] || n[3]==n[4])){\n\t\t\tre=\"full house\";\n\t\t}\n\t\telse if(n[0]==n[2] || n[1]==n[3] || n[2]==n[4]){\n\t\t\tre=\"three card\";\n\t\t}\n\t\telse if((n[0]==n[1] && (n[2]==n[3] || n[3]==n[4])) ||\n\t\t\t\t((n[0]==n[1] || n[1]==n[2]) && n[3]==n[4])){\n\t\t\tre=\"two pair\";\n\t\t}\n\t\telse if(n[0]==n[1] || n[1]==n[2] || n[2]==n[3] || n[3]==n[4]){\n\t\t\tre=\"one pair\";\n\t\t}\n\t\treturn re;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1 && number[1]!=1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\n\tstatic Scanner sc = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\n\t\twhile (sc.hasNext()) {\n\t\t\tString str = sc.next();\n\t\t\tString[] st = str.split(\",\");\n\t\t\tint[] stn = new int[st.length];\n\t\t\tint[] num = new int[13];\n\t\t\tString ans = \"null\";\n\n\t\t\t// ??????????????°????????????\n\t\t\tfor (int i = 0; i < st.length; i++) {\n\t\t\t\tstn[i] = Integer.parseInt(st[i]);\n\t\t\t}\n\n\t\t\t// ??°?????????????????????\n\t\t\tfor (int i = 0; i < stn.length; i++) {\n\n\t\t\t\tnum[stn[i]]++;\n\n\t\t\t}\n\n\t\t\t// ??????\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 1) {\n\t\t\t\tans = \"one pair\";\n\t\t\t}\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 2) {\n\t\t\t\tans = \"two pair\";\n\t\t\t}\n\t\t\t// ??????????????¢\n\t\t\tif (maxone(num) == 3 && maxtwo(num) == 1) {\n\t\t\t\tans = \"three card\";\n\t\t\t}\n\t\t\t// ???????????????\n\t\t\tif (maxone(num) == 3 && maxtwo(num) == 2) {\n\t\t\t\tans = \"hull house\";\n\t\t\t}\n\t\t\t// ??????????????????\n\t\t\tif (maxone(num) == 4) {\n\t\t\t\tans = \"four card\";\n\t\t\t}\n\t\t\t// ????????¬??????\n\t\t\tfor (int i = 0; i < 9; i++) {\n\t\t\t\tif (num[i] == 1 && num[i + 1] == 1 && num[i + 2] == 1 && num[i + 3] == 1 && num[i + 4] == 1) {\n\t\t\t\t\tans = \"straight\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (num[9] == 1 && num[10] == 1 && num[11] == 1 && num[12] == 1 && num[0] == 1) {\n\t\t\t\tans = \"straight\";\n\t\t\t}\n\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n\n\t// ??°????????????????????§????????????\n\tpublic static int maxone(int[] num) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < num.length; i++) {\n\t\t\tif (max < num[i]) {\n\t\t\t\tmax = num[i];\n\t\t\t}\n\n\t\t}\n\t\treturn max;\n\t}\n\n\t// ??°???????????????2??????????????§?????°?????????\n\tpublic static int maxtwo(int[] num) {\n\t\tint max1 = 0;\n\t\tint max2 = 0;\n\t\tif (num[0] > num[1]) {\n\t\t\tmax1 = num[0];\n\t\t\tmax2 = num[1];\n\t\t} else {\n\t\t\tmax1 = num[1];\n\t\t\tmax2 = num[0];\n\t\t}\n\t\tfor (int i = 2; i < num.length; i++) {\n\t\t\tif (max1 < num[i]) {\n\t\t\t\tmax2 = max1;\n\t\t\t\tmax1 = num[i];\n\t\t\t} else if (max2 < num[i]) {\n\t\t\t\tmax2 = num[i];\n\t\t\t}\n\t\t}\n\t\treturn max2;\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\n\npublic class Main{\n\tScanner sc=new Scanner(System.in);\n\n\tint INF=1<<28;\n\tdouble EPS=1e-9;\n\n\tint[] a;\n\n\tvoid run(){\n\t\ta=new int[13];\n\t\tsc.useDelimiter(\",|\\r\\n\");\n\t\tfor(; sc.hasNext();){\n\t\t\tArrays.fill(a, 0);\n\t\t\tfor(int i=0; i<5; i++){\n\t\t\t\ta[sc.nextInt()-1]++;\n\t\t\t\t// debug(sc.nextInt());\n\t\t\t}\n\t\t\tsolve();\n\t\t}\n\t}\n\n\tvoid solve(){\n\t\tif(fourCard())\n\t\t\tprintln(\"four card\");\n\t\telse if(fullHouse())\n\t\t\tprintln(\"full house\");\n\t\telse if(straight())\n\t\t\tprintln(\"straight\");\n\t\telse if(threeCard())\n\t\t\tprintln(\"three card\");\n\t\telse if(twoPair())\n\t\t\tprintln(\"two pair\");\n\t\telse if(onePair())\n\t\t\tprintln(\"one pair\");\n\t\telse\n\t\t\tprintln(\"null\");\n\t}\n\n\tboolean fourCard(){\n\t\tfor(int x : a){\n\t\t\tif(x==4){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean fullHouse(){\n\t\tboolean f2=false, f3=false;\n\t\tfor(int x : a){\n\t\t\tf2|=x==2;\n\t\t\tf3|=x==3;\n\t\t}\n\t\treturn f2&&f3;\n\t}\n\n\tboolean straight(){\n\t\tfor(int i=0; i<10; i++){\n\t\t\tif(a[i]*a[i+1]*a[i+2]*a[i+3]*a[(i+4)%13]==1)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean threeCard(){\n\t\tfor(int x : a){\n\t\t\tif(x==3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean twoPair(){\n\t\tint c=0;\n\t\tfor(int x : a){\n\t\t\tif(x==2){\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\treturn c==2;\n\t}\n\n\tboolean onePair(){\n\t\tfor(int x : a){\n\t\t\tif(x==2){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tvoid debug(Object... os){\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.CardLayout;\nimport java.awt.geom.Point2D;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\t\n\tpublic static void main(String[] args){\n\t\tnew Main();\n\t}\n\tpublic Main(){\n\t\tnew AOJ0038();\n\t}\n\t\n\tclass AOJ0038{\n\t\tint [] cards;\n\t\t\n\t\tboolean four(){\n\t\t\tfor(int i=0;i<14;i++)if(cards[i]>=4)return true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tboolean full(){\n\t\t\tboolean two=false;\n\t\t\tboolean three=false;\n\t\t\tfor(int s=0;s<14;s++){\n\t\t\t\tif(cards[s]==3)three=true;\n\t\t\t\tif(cards[s]==2)two=true;\n\t\t\t}\n\t\t\treturn three&&two;\n\t\t}\n\t\t\n\t\tboolean straight(){\n\t\t\tif(cards[1]==1&&cards[13]==1&&cards[12]==1&&cards[11]==1&&cards[10]==1)return true;\n\t\t\tfor(int i=5;i<14;i++){\n\t\t\t\tif(cards[i]==1&&cards[i-1]==1&&cards[i-2]==1&&cards[i-3]==1&&cards[i-4]==1)return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tboolean three(){\n\t\t\tint three=0;\n\t\t\tfor(int i=0;i<14;i++)if(cards[i]==3)three++;\t\t\t\n\t\t\tif(three==1)return true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tboolean two(){\n\t\t\tint two=0;\n\t\t\tfor(int i=0;i<14;i++)if(cards[i]==2)two++;\t\t\t\n\t\t\tif(two==2)return true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tboolean one(){\n\t\t\tint two=0;\n\t\t\tfor(int i=0;i<14;i++)if(cards[i]==2)two++;\t\t\t\n\t\t\tif(two==1)return true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tpublic AOJ0038() {\n\t\t\tScanner in = new Scanner(System.in);\n\t\t\twhile (in.hasNext()) {\n\t\t\t\tString[] input = in.nextLine().split(\",\");\n\t\t\t\tint[] huda = new int[input.length];\n\t\t\t\tfor(int i=0;i<input.length;i++)huda[i]=Integer.parseInt(input[i]);\n//\t\t\t\tString[] yaku = {\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"};\n\t\t\t\t//TODO 最も高い役を出力する。\n\t\t\t\tArrays.sort(huda);//小さい順にソート\n\t\t\t\tcards = new int[14];\n\t\t\t\tfor(int i=0;i<huda.length;i++)cards[huda[i]]++;\n\t\t\t\tif(four())System.out.println(\"four card\");\n\t\t\t\telse if(full())System.out.println(\"full house\");\n\t\t\t\telse if(straight())System.out.println(\"straight\");\n\t\t\t\telse if(three())System.out.println(\"three card\");\n\t\t\t\telse if(two())System.out.println(\"two pair\");\n\t\t\t\telse if(one())System.out.println(\"one pair\");\n\t\t\t\telse System.out.println(\"null\");\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\tclass AOJ2503{\n\t\tint MAX = 0;\n\t\tpublic AOJ2503() {\n\t\t\tScanner in = new Scanner(System.in);\n\t\t\tint n = in.nextInt();\n\t\t\tint m = in.nextInt();\n\n\t\t\tint[][] cost = new int[n][n];\n\n\t\t\tint[] dp = new int[n];\n\t\t\tfor(int i=0;i<n*n;i++){\n\t\t\t\tcost[i/n][i%n]=MAX;\n\t\t\t}\n\t\t\tfor(int i=0;i<m;i++){\n\t\t\t\tint a = in.nextInt();\n\t\t\t\tint b = in.nextInt();\n\t\t\t\tcost[a][b]=in.nextInt();\n\t\t\t}\t\n\t\t\t//\t\t\tTODO 一番大きいパスを0のポイントからn-1のポイントまでの\n\n\t\t\tfor(int s=1;s<n;s++){\n\t\t\t\tfor(int i=0;i<=s;i++){\n\t\t\t\t\tif(cost[i][s]==MAX)continue;\n\t\t\t\t\tdp[s]=Math.max(dp[s],dp[i]+cost[i][s]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int s=0;s<n;s++)for(int i=0;i<n;i++){\n\t\t\t\tif(cost[s][i]==MAX)continue;\n\t\t\t\tdp[i]=Math.max(dp[s]+cost[s][i],dp[i]);\n\t\t\t}\n\t\t\tfor(int i=0;i<n;i++)System.out.print(dp[i]+\" \");\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(dp[n-1]);\n\t\t}\n\t}\n\n\n\n\tclass  AOJ0155{\n\t\tint d[];\n\t\tint n;\n\t\tint x[];\n\t\tint y[];\n\t\tint ban[];\n\t\tboolean sw;\n\t\tArrayList<Integer> result;\n\t\tint back[];\n\t\tint[][] cost;\n\t\tvoid dijkstra(int s,int g){\n\t\t\td = new int[n+1];d[s]=0;\n\t\t\tArrays.fill(d,0);\n\t\t\tboolean used[] = new boolean[n+1];\n\t\t\tint sumn[] = new int[n+1];\n\t\t\tint v=s;\n\t\t\tint save = -1;\n\t\t\tback = new int[n+1];\n\t\t\twhile(true){\n\t\t\t\tsave = v;\n\t\t\t\tv=-1;\n\t\t\t\tfor(int u=1;u<n+1;u++)if(!used[u]&&(v==-1||d[u]<d[v])){\n\t\t\t\t\tv=u;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(v);\n\t\t\t\tif(v==-1)break;\n\t\t\t\telse back[v]=save;\n\t\t\t\tused[v]=true;\n\t\t\t\tfor(int u=1;u<n+1;u++)if(cost[v][u]!=100000)d[u]=Math.min(1+d[v],d[u]);\n\t\t\t}\n\t\t\tfor(int i=1;i<d.length;i++){\n\t\t\t\tSystem.out.println(i+\" \"+d[i]);\n\t\t\t}\n\t\t\tint now=g;\n\t\t\tresult = new ArrayList<Integer>();\n\t\t\tint a=0;\n\t\t\t//\t\t\tfor(int i=0;i<back.length;i++){\n\t\t\t//\t\t\t\tSystem.out.println(i+\" \"+back[i]);\n\t\t\t//\t\t\t}\n\t\t\twhile(true){\n\t\t\t\tif(cost[a][now]==1000000)sw = true;\n\t\t\t\tresult.add(now);\n\t\t\t\tif(now==s)break;\n\t\t\t\ta = now;\n\t\t\t\tnow=back[now];\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tpublic AOJ0155(){\n\t\t\tScanner in = new Scanner(System.in);\n\t\t\twhile(true){\n\t\t\t\tn = in.nextInt();\n\t\t\t\tif(n==0)break;\n\t\t\t\tcost = new int[n+1][n+1];\n\t\t\t\tban = new int[n+1];\n\t\t\t\tx = new int[n+1];\n\t\t\t\ty = new int[n+1];\n\t\t\t\tfor(int i=1;i<n+1;i++){\n\t\t\t\t\tban[i] = in.nextInt();\n\t\t\t\t\tx[ban[i]] = in.nextInt();\n\t\t\t\t\ty[ban[i]] = in.nextInt();\n\t\t\t\t}\n\t\t\t\tfor(int i=1;i<n+1;i++){\n\t\t\t\t\tfor(int s=i+1;s<n+1;s++){\n\t\t\t\t\t\tint x1 = x[i],y1= y[i],x2=x[s],y2=y[s];\n\t\t\t\t\t\tint costs = (int)Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\t\t\n\t\t\t\t\t\tcost[i][s] = costs > 50 ? 1000000:costs;\n\t\t\t\t\t\tcost[s][i] = cost[i][s];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint kai = in.nextInt();\n\t\t\t\tfor(int i=0;i<kai;i++){\n\t\t\t\t\tint s = in.nextInt();\n\t\t\t\t\tint g = in.nextInt();\n\t\t\t\t\tdijkstra(s, g);\n//\t\t\t\t\tif(sw){\n//\t\t\t\t\t\tSystem.out.println(\"NA\");\n//\t\t\t\t\t\tbreak;\n//\t\t\t\t\t}\n\t\t\t\t\tfor(int a=result.size()-1;a>=0;a--){\n\t\t\t\t\t\tSystem.out.print(result.get(a)+\" \");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n    public static void main(String[] args){\n\tint i,j;\n\tScanner scan = new Scanner(System.in);\n\n\twhile(scan.hasNext()){\n\t    String tmp[] = (scan.nextLine()).split(\",\");\n\t    int card[] = new int[14];\n\t    int count[] = new int[5];\n\t    for(i=0;i<5;i++){\n\t\tint n = Integer.parseInt(tmp[i]) - 1;\n\t\tcard[n]++;\n\t\tif(n == 0) card[13]++;\n\t    }\n\t    for(i=0;i<13;i++){\n\t\tif(card[i] < 4){\n\t\t    count[card[i]]++;\n\t\t}\n\t\telse{\n\t\t    count[4]++;\n\t\t}\n\t    }\n\n\t    if(count[4] == 1){\n\t\tSystem.out.println(\"four card\");\n\t    }\n\t    else if(count[3] == 1){\n\t\tif(count[2] == 1){\n\t\t    System.out.println(\"full house\");\n\t\t}\n\t\telse{\n\t\t    System.out.println(\"three card\");\n\t\t}\n\t    }\n\t    else if(count[2] == 2){\n\t\tSystem.out.println(\"two pair\");\n\t    }\n\t    else if(count[2] == 1){\n\t\tSystem.out.println(\"one pair\");\n\t    }\n\t    else{\n\t\tboolean flg = false;\n\n\t\tfor(i=0;card[i]==0;i++);\n\t\tfor(j=i+1;j<14 && card[j]==1;j++);\n\n\t\tif(j - i == 5){\n\t\t    flg = true;\n\t\t}\n\t\telse{\n\t\t    for(i=1;card[i]==0;i++);\n\t\t    for(j=i+1;j<14 && card[j]==1;j++);\n\n\t\t    if(j - i == 5){\n\t\t\tflg = true;\n\t\t    }\n\t\t}\n\t\tif(flg){\n\t\t    System.out.println(\"straight\");\n\t\t}\n\t\telse{\n\t\t    System.out.println(\"null\");\n\t\t}\n\t    }\n\t}\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pari\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pari\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n\n    return pariCount == 2;\n\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n\n    return pariCount == 3;\n\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        while (sc.hasNext()) {\n            String S = sc.next();\n\n            int[] card = new int[5];\n            for (int i = 0; i < 5; i++) {\n                card[i] = Integer.parseInt(S.split(\",\")[i]);\n            }\n\n            Arrays.sort(card);\n\n            String ans;\n            if (card[1] == card[4] || card[0] == card[3]) {\n                ans = \"four card\";\n            } else if ((card[0] == card[2] && card[3] == card[4]) || (card[0] == card[1] && card[2] == card[4])) {\n                ans = \"full house\";\n            } else if ((card[0] == card[2]) || (card[1] == card[3]) || (card[2] == card[4])) {\n                ans = \"three card\";\n            } else if ((card[0] == card[1] && card[2] == card[3]) || (card[0] == card[1] && card[3] == card[4]) || (card[1] == card[2] && card[3] == card[4])) {\n                ans = \"two pair\";\n            } else if ((card[0] == card[1]) || (card[1] == card[2]) || (card[2] == card[3]) || (card[3] == card[4])) {\n                ans = \"one pair\";\n            } else if ((card[0] + 4 == card[1] + 3 && card[1] + 3 == card[2] + 2 && card[2] + 2 == card[3] + 1 && card[3] + 1 == card[4]) || (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)) {\n                ans = \"straight\";\n            } else {\n                ans = \"null\";\n            }\n\n            System.out.println(ans);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "/**\n * \n * No.0038\tPoker Hand\n * \n * \n * @author \tyuichirw <y.iky917@gmail.com>\n * @see\t\thttp://rose.u-aizu.ac.jp/onlinejudge/ProblemSet/description.jsp?id=0038&lang=jp\n */\nimport java.util.*;\nimport static java.lang.Math.*;\n\npublic class Main {\n\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic int[] cards;\n\t\n\tstatic boolean read() {\n\t\tif(!sc.hasNext()) return false;\n\t\tString[] parsed = sc.next().split(\",\");\n\t\tcards = new int[5];\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tcards[i] = Integer.parseInt(parsed[i]);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tstatic String solve() {\n\t\t\n\t\tchar[] histgram = new char[14];\n\t\t\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\thistgram[cards[i]]++;\n\t\t}\n\t\t\n\t\tArrays.sort(histgram);\n\t\tint a,b;\n\t\ta = histgram[histgram.length - 1];\n\t\tb = histgram[histgram.length - 2];\n\t\tif(a == 4) {\n\t\t\treturn \"four cards\";\n\t\t}\n\t\t\n\t\tArrays.sort(cards);\n\t\tboolean straight = false; int cnt = 0, c = 0, d = 0;\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tcnt = 0;\n\t\t\tfor(int j = 0; j < 4; j++) {\n\t\t\t\tc = cards[(i+j)%5]; d = cards[(i+j+1)%5];\n\t\t\t\tif(abs(c-d) != 1 && abs(c-d) != 12) break;\n\t\t\t\tcnt++;\n\t\t\t\tif(abs(c-d) == 12 && cnt <= 4) break; \n\t\t\t}\n\t\t\tif(cnt == 4) {\n\t\t\t\tstraight = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(a == 3 && b == 2) {\n\t\t\treturn \"full house\";\n\t\t}\n\t\t\n\t\tif(straight) {\n\t\t\treturn \"straight\";\n\t\t}\n\t\t\n\t\tif(a == 3) {\n\t\t\treturn \"three card\";\n\t\t}\n\t\t\n\t\tif(a == 2 && b == 2) {\n\t\t\treturn \"two pair\";\n\t\t}\n\t\t\n\t\tif(a == 2) {\n\t\t\treturn \"one pair\";\n\t\t}\n\t\t\n\t\treturn \"null\";\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\twhile(read()) {\n\t\t\tSystem.out.println(solve());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate int[] card = new int[5];\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\t\n\tprivate void run() {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile (scan.hasNext()) {\n\t\t\tString[] cd = scan.nextLine().split(\",\");\n\t\t\tfor (int i = 0; i < 5; i++) card[i] = Integer.parseInt(cd[i]);\n\t\t\t\n\t\t\tArrays.sort(card);\n\t\t\t\n\t\t\tif (fourCard()) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if (fullHouse()) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if (straight()) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else if (threeCard()) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if (twoPair()) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}else if (onePair()) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\tprivate boolean fourCard() {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tmax = Math.max(max, continueNum(card[i]));\n\t\t}\n\t\treturn (max > 3);\n\t}\n\t\n\tprivate boolean fullHouse() {\n\t\tint max1 = -1;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (continueNum(card[i]) == 3) max1 = card[i];\n\t\t}\n\t\t\n\t\tif (max1 != -1) {\n\t\t\tint count = 0, max;\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tif (card[i] != max1) {\n\t\t\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\t\t\tif (card[j] != max1 && i != j && card[i] == card[j]) return true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tprivate boolean straight() {\n\t\tif (card[0] == 1) {\n\t\t\tif (card[1] == 2 && card[2] == 3 && card[3] == 4 && card[4] == 5) return true;\n\t\t\telse if (card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) return true;\n\t\t\telse return false;\n\t\t}else {\n\t\t\tif (card[1] == card[0] + 1 && card[2] == card[1] + 1 && card[3] == card[2] + 1 && card[4] == card[3] + 1) return true;\n\t\t\telse return false;\n\t\t}\n\t}\n\t\n\tprivate boolean threeCard() {\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (continueNum(card[i]) == 3) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate boolean twoPair() {\n\t\tint pair1 = -1;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (continueNum(card[i]) == 2) {\n\t\t\t\tpair1 = card[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (pair1 != -1) {\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tint count = 0;\n\t\t\t\tif (card[i] != pair1) {\n\t\t\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\t\t\tif (i != j && card[i] == card[j]) count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count == 1) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tprivate boolean onePair() {\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (continueNum(card[i]) == 2) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate int continueNum(int num) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (num == card[i]) count++;\n\t\t}\n\t\treturn count--;\n\t}\n\t\n\tprivate void debug() {\n\t\tSystem.out.println();\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n//Poker Hand\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString[] ss = sc.next().split(\",\");\n\t\t\tint[] c = new int[14];\n\t\t\tint max = 0;\n\t\t\tfor(String s:ss){\n\t\t\t\tmax = Math.max(max, ++c[Integer.parseInt(s)]);\n\t\t\t}\n\t\t\tif(max==4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if(max==3){\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int i=1;i<=13;i++){\n\t\t\t\t\tif(c[i]==2){\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f?\"full house\":\"three card\");\n\t\t\t}\n\t\t\telse if(max==2){\n\t\t\t\tint k = 0;\n\t\t\t\tfor(int i=1;i<=13;i++){\n\t\t\t\t\tif(c[i]==2)k++;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(k==2?\"two pair\":\"one pair\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int i=1;i<=10;i++){\n\t\t\t\t\tif(c[i]==1){\n\t\t\t\t\t\tboolean ff = true;\n\t\t\t\t\t\tfor(int j=i+1;j<=i+4;j++){\n\t\t\t\t\t\t\tif(c[(j-1)%13+1]!=1){\n\t\t\t\t\t\t\t\tff = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tf |= ff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f?\"straight\":\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tlabel:while(cin.hasNext()){\n\t\t\tString str = cin.next();\n\t\t\tString[] s = str.split(\",\");\n\t\t\tint[] a = new int[5];\n\t\t\tfor(int i = 0; i < 5;i++){\n\t\t\t\ta[i]=Integer.parseInt(s[i]);\n\t\t\t}\n\t\t\tArrays.sort(a);\n\t\t\tif(a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3]){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(a[1]==a[2]&&a[3]==a[2]&&a[4]==a[3]){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(a[0]==a[1]&&a[0]==a[2] && a[3]==a[4]){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(a[0]==a[1] && a[2]==a[3] && a[2] == a[4]){\n\t\t\t\tSystem.out.println(\"hull house\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(a[0]+1==a[1]&&a[0]+2==a[2]&&a[0]+3==a[3]&&a[0]+4==a[4]){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(a[0]==a[1] && a[0]==a[2] || a[1]==a[2]&&a[1]==a[3] || \n\t\t\t\t\ta[2]==a[3] && a[2] == a[4]){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int i = 0; i < 3;i++){\n\t\t\t\tif(a[i]==a[i+1]){\n\t\t\t\t\tfor(int j = i+3; j < 5;j++){\n\t\t\t\t\t\tif(a[j]==a[j-1]){\n\t\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\t\tcontinue label;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < 4; i++){\n\t\t\t\tif(a[i]==a[i+1]){\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\tcontinue label;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null) {\n\n\t\t\tArrayList<Integer> cardsArray = new ArrayList<Integer>();\n\t\t\tHashMap<Integer, Integer> cardsHash = new HashMap<Integer, Integer>();\n\n\t\t\t// 手札読み込み\n\t\t\tfor (String s : line.split(\",\")) {\n\t\t\t\tint i = Integer.parseInt(s);\n\t\t\t\t//\n\t\t\t\tcardsArray.add(i);\n\t\t\t\t//\n\t\t\t\tif (cardsHash.containsKey(i)) {\n\t\t\t\t\tcardsHash.put(i, cardsHash.get(i) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tcardsHash.put(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 役判定\n\t\t\tif (isFourCard(cardsHash)) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if (isFullHouse(cardsHash)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (isStraight(cardsArray)) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (isThreeCard(cardsHash)) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (isTwoPair(cardsHash)) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (isOnePair(cardsHash)) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static boolean isFourCard(HashMap<Integer, Integer> cards) {\n\t\tif (cards.containsValue(4))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean isFullHouse(HashMap<Integer, Integer> cards) {\n\t\tif (cards.containsValue(3) && cards.containsValue(2))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean isStraight(ArrayList<Integer> cards) {\n\t\tInteger[] temp = cards.toArray(new Integer[] {});\n\t\tArrays.sort(temp);\n\n\t\tboolean result = true;\n\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tif (temp[i + 1] - temp[i] == 1)\n\t\t\t\tresult &= true;\n\t\t\telse\n\t\t\t\tresult = false;\n\t\t}\n\n\t\tif (temp[0] == 1 && temp[1] == 10 && temp[2] == 11 && temp[3] == 12\n\t\t\t\t&& temp[4] == 13)\n\t\t\tresult = true;\n\n\t\treturn result;\n\t}\n\n\tpublic static boolean isThreeCard(HashMap<Integer, Integer> cards) {\n\t\tif (cards.containsValue(3))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean isTwoPair(HashMap<Integer, Integer> cards) {\n\t\tint count = 0;\n\t\tfor (Integer v : cards.values()) {\n\t\t\tif (v == 2)\n\t\t\t\tcount++;\n\t\t}\n\t\treturn count == 2 ? true : false;\n\t}\n\n\tpublic static boolean isOnePair(HashMap<Integer, Integer> cards) {\n\t\tint count = 0;\n\t\tfor (Integer v : cards.values()) {\n\t\t\tif (v == 2)\n\t\t\t\tcount++;\n\t\t}\n\t\treturn count == 1 ? true : false;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\n\t\tString line;\n\t\tString[] data;\n\t\twhile (sc.hasNext() == true) {\n\t\t\tline = sc.nextLine();\n\t\t\t\n\t\t\tdata = line.split(\",\");\n\t\t\t\n\t\t\tint[] cards = new int[data.length];\n\t\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\t\tcards[i] = Integer.parseInt(data[i]);\n\t\t\t}\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\t\tint pre = 0;\n\t\t\tboolean straight = true;\n\t\t\t\n\t\t\tint[] point = new int[14];\n\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\tint tmp = cards[i];\n\t\t\t\tpoint[tmp]++;\n\n\t\t\t\tSystem.out.print(tmp);\n\t\t\t\t\n\t\t\t\tif (pre != 0) {\n\t\t\t\t\tif ((pre + 1) != tmp) {\n\t\t\t\t\t\tif ((pre != 1) || (tmp != 10)) straight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tint[] judge = new int[5];\n\t\t\tfor (int i = 0; i < point.length; i++) {\n\t\t\t\tjudge[point[i]]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (judge[4] == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if ((judge[2] == 1) && (judge[3] == 1)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (judge[1] == 5) {\n\t\t\t\tif (straight == true) System.out.println(\"straight\");\n\t\t\t\telse System.out.println(\"null\");\n\t\t\t} else if (judge[3] == 1) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (judge[2] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (judge[2] == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile(scan.hasNext()) {\n\n            String line;\n            try {\n                line = scan.nextLine();\n            }catch(java.util.NoSuchElementException e) {\n                break;\n            }\n\n            int[] hand = new int[5];\n\n            String[] cardNum = line.split(\",\");\n\n            for(int i = 0; i < 5; i++) {\n                hand[i] = Integer.parseInt(cardNum[i]);\n            }\n\n            int[] number = new int[14];\n            for(int i = 0; i < 5; i++) {\n                number[hand[i]] += 1;\n            }\n\n            int paircount = 0;\n            ArrayList<Integer> list = new ArrayList<Integer>();\n            for(int i = 0; i < 14; i++) {\n                if(number[i] > 1) {\n                    list.add(number[i]);\n                }\n                if(number[i] == 2) {\n                    paircount += 1;\n                }\n            }\n\n            boolean isStraight = false;\n            int count = 0;\n            for(int i = 0 ; i < 14 ; i++) {\n            \tif(number[i] == 1) {\n            \t\tcount++;\n            \t}else if(number[i] ==0) {\n            \t\tcount = 0;\n            \t}\n            \tif(i == 13 && count == 4) {\n            \t\tif(number[1] == 1) {\n            \t\t\tcount++;\n            \t\t}\n            \t}\n            \tif(count == 5) {\n            \t\tisStraight = true;\n            \t\tbreak;\n            \t}\n            }\n\n            if(list.contains(4)) {\n                System.out.println(\"four card\");\n            }else if(list.contains(3) && list.contains(2)) {\n                System.out.println(\"full house\");\n            }else if(isStraight){\n            \tSystem.out.println(\"straight\");\n            } else if(list.contains(3)) {\n                 System.out.println(\"three card\");\n            }else if(paircount == 2) {\n                System.out.println(\"two pair\");\n            }else if(paircount == 1) {\n                System.out.println(\"one pair\");\n            }else {\n            \tSystem.out.println(\"null\");\n            }\n\n\t\t}\n\t}\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\n\n class Main{\n     public static void main(String args[]){\n         Scanner sc = new Scanner(System.in);\n         String line;\n         while(sc.hasNext()){\n             line=sc.nextLine();\n             if(line.isEmpty())break;\n             String[] split=line.split(\",\");\n             int[] ints = new int[5]; for(int i=0;i<5;i++)ints[i]=Integer.parseInt(split[i]);\n             if(!_4c(ints))if(!fullH(ints))if(!st(ints))if(!_3c(ints))if(!_2p(ints))if(!_1p(ints))\n                 System.out.println(\"null\");\n         }\n         \n         \n     }\n     static boolean _4c(int[] ints){\n         if(ints[1]==ints[2]&&ints[1]==ints[3]&&ints[1]==ints[4]){System.out.println(\"four card\");\n         return true;}\n         int count=0; for(int x : ints) if(x==ints[0])count++;\n         if(count==4){System.out.println(\"four card\");return true;}\n         return false;\n     }\n     static boolean fullH(int[] ints){\n         HashSet<Integer>hs=new HashSet<Integer>();\n         for(int x:ints) hs.add(x);\n         if(hs.size()==2){System.out.println(\"full house\"); return true;}\n         return false;\n     }\n     static boolean st(int[] ints){\n         TreeSet<Integer>hs=new TreeSet<Integer>();\n         \n         for(int x:ints) hs.add(x);\n         if(hs.size()!=5)return false;\n         if(hs.last()-hs.first()==4){System.out.println(\"straight\");return true;}\n         if(hs.first()==1){hs.remove(1);\n             if(hs.first()==10)System.out.println(\"straight\");return true;\n        }return false;\n     }\n     static boolean _3c(int[] ints){\n        for(int i=0; i<5;i++){\n            int count=0;\n            for(int j=i+1;j<5;j++){\n                if(ints[i]==ints[j])count++;\n            }\n            if(count==2){System.out.println(\"three card\");return true;}\n        }\n        return false;\n     }\n     static boolean _2p(int[] ints){\n         TreeMap<Integer,Integer>tm=new TreeMap<Integer,Integer>();\n         for(int in:ints){\n             if(tm.containsKey(in))tm.put(in, tm.get(in)+1);\n             else tm.put(in, 1);\n         }\n         if(tm.keySet().size()==3){System.out.println(\"two pair\");return true;}\n         return false;\n     }\n     static boolean _1p(int[] ints){\n         for(int i=0; i<5;i++){\n             for(int j=i+1;j<5;j++){\n                 if(ints[i]==ints[j]){System.out.println(\"one pair\");return true;}\n         }\n     }return false;}\n }"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.Arrays;\n \nclass Main{\nstatic int[] a=new int[5];\npublic static void main(String[] args) throws IOException{\nBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\nString line;\nwhile((line=br.readLine())!=null){\nString[] value=line.split(\",\");\na[0]=Integer.parseInt(value[0]);\na[1]=Integer.parseInt(value[1]);\na[2]=Integer.parseInt(value[2]);\na[3]=Integer.parseInt(value[3]);\na[4]=Integer.parseInt(value[4]);\nArrays.sort(a);\nif(a[1]==a[4]||a[0]==a[3]){\nSystem.out.println(\"four card\");\n}\nelse if((a[0]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[2]==a[4])){\nSystem.out.println(\"full house\");\n}\nelse if((a[0]==a[2])||(a[1]==a[3])||(a[2]==a[4])){\nSystem.out.println(\"three card\");\n}\nelse if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4])){\nSystem.out.println(\"two pair\");\n}\nelse if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4])){\nSystem.out.println(\"one pair\");\n}\nelse if((a[0]+4==a[1]+3&&a[1]+3==a[2]+2&&a[2]+2==a[3]+1&&a[3]+1==a[4])||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\nSystem.out.println(\"straight\");\n}\nelse{\nSystem.out.println(\"null\");\n}\n}\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tfor(; scanner.hasNext();)\n\t\t{\n\t\t\tString in = scanner.next();\n\t\t\tString[] w = in.split(\",\");\n\t\t\t\n\t\t\tint[] n = new int[5];\n\t\t\tfor(int i=0; i<5; i++)\n\t\t\t{\n\t\t\t\tn[i] = Integer.parseInt(w[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=0; i<5; i++)\n\t\t\t{\n\t\t\t\tfor(int j=i+1; j<5; j++)\n\t\t\t\t{\n\t\t\t\t\tif(n[i] > n[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tint buf = n[i];\n\t\t\t\t\t\tn[i] = n[j];\n\t\t\t\t\t\tn[j] = buf;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint strate = 1;\n\t\t\tint pair = 1;\n\t\t\tint pair_max = 0;\n\t\t\tint pair_cnt = 0;\n\t\t\tfor(int i=1; i<5; i++)\n\t\t\t{\n\t\t\t\tif(n[i] == n[i-1])\n\t\t\t\t{\n\t\t\t\t\tpair ++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pair > pair_max)\n\t\t\t\t\t{\n\t\t\t\t\t\tpair_max = pair;\n\t\t\t\t\t}\n\t\t\t\t\tif(pair > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tpair_cnt ++;\n\t\t\t\t\t}\n\t\t\t\t\tpair = 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(strate > 0)\n\t\t\t\t{\n\t\t\t\t\tif(n[i] == n[i-1]+1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstrate ++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strate==1 && n[4]==13 && n[0]==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrate ++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrate = 0;\n\t\t\t\t\t\t}\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(pair > pair_max)\n\t\t\t{\n\t\t\t\tpair_max = pair;\n\t\t\t}\n\t\t\tif(pair > 1)\n\t\t\t{\n\t\t\t\tpair_cnt ++;\n\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\tint result = 0;\n\t\t\tswitch(pair_max)\n\t\t\t{\n\t\t\t\tcase 2:\n\t\t\t\t\tif(pair_cnt == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = 2;\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\tresult = 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tif(pair_cnt == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = 5;\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\tresult = 3;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tresult = 6;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(strate == 5)\n\t\t\t{\n\t\t\t\tresult = 4;\n\t\t\t}\n\n\t\t\t\n\t\t\tString[] out =\n\t\t\t\t{\n\t\t\t\t\t\"null\",\n\t\t\t\t\t\"one pair\",\n\t\t\t\t\t\"two pair\",\n\t\t\t\t\t\"three card\",\n\t\t\t\t\t\"straight\",\n\t\t\t\t\t\"full house\",\n\t\t\t\t\t\"four card\",\n\t\t\t\t};\n\t\t\tSystem.out.println(out[result]);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.StringTokenizer;\nimport java.util.Arrays;\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString buf;\n\n\t\ttry {\n\t\t\twhile ((buf = br.readLine())!=null) {\n\t\t\t\tStringTokenizer st = new StringTokenizer(buf,\",\");\n\t\t\t\tint card[] = new int[5];\n\t\t\t\tfor (int i=0;i<5;i++) {\n\t\t\t\t\tcard[i] = Integer.parseInt(st.nextToken());\n\t\t\t\t}\n\t\t\t\tArrays.sort(card);\n\t\t\t\tif (isFourCard(card)) System.out.println(\"four card\");\n\t\t\t\telse if (isFullHouse(card)) System.out.println(\"full house\");\n\t\t\t\telse if (isStraight(card)) System.out.println(\"straight\");\n\t\t\t\telse if (isThreeCard(card)) System.out.println(\"three card\");\n\t\t\t\telse if (isTwoPair(card)) System.out.println(\"two pair\");\n\t\t\t\telse if (isOnePair(card)) System.out.println(\"one pair\");\n\t\t\t\telse System.out.println(\"null\"); \n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static boolean isOnePair(int c[]) {\n\t\tif (c[0]==c[1]||c[1]==c[2]||c[2]==c[3]||c[3]==c[4]) return true;\n\t\telse return false;\n\t}\n\n\tpublic static boolean isTwoPair(int c[]) {\n\t\tif (c[0]==c[1]) {\n\t\t\tif (c[2]==c[3]||c[3]==c[4]) return true;\n\t\t} else if (c[1]==c[2]) {\n\t\t\tif (c[3]==c[4]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isThreeCard(int c[]) {\n\t\tfor (int i=0;i<3;i++) {\n\t\t\tif (c[i]==c[i+1]&&c[i+1]==c[i+2]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isStraight(int c[]) {\n\t\tif (c[0]==1&&c[1]==10) {\n\t\t\tif (c[2]==11&&c[3]==12&&c[4]==13) return true;\n\t\t}\n\t\tfor (int i=0;i<4;i++) {\n\t\t\tif (c[i]+1==c[i+1]) continue;\n\t\t\telse return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static boolean isFullHouse(int c[]) {\n\t\tif (c[0]==c[1]&&c[1]==c[2]) {\n\t\t\tif (c[3]==c[4]) return true;\n\t\t} else if (c[2]==c[3]&&c[3]==c[4]) {\n\t\t\tif (c[0]==c[1]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isFourCard(int c[]) {\n\t\tif (c[0]==c[1]&&c[2]==c[3]&&c[0]==c[2]) return true;\n\t\telse if (c[1]==c[2]&&c[3]==c[4]&&c[1]==c[3]) return true;\n\t\telse return false;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tHashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();\n\t\tint min = 14;\n\t\twhile(scan.hasNext()) {\n\t\t\tString num = scan.nextLine();\n\t\t\tString[] block = num.split(\",\");\n\t\t\tint[] nums = new int[block.length];\n\t\t\tfor(int i = 0;i < block.length;i++) {\n\t\t\t\tnums[i] = Integer.parseInt(block[i]);\n\t\t\t}\n\t\t\tfor(int i = 0 ;i < block.length;i++) {\n\t\t\t\tint count = 0;\n\t\t\t\tif(hashMap.containsKey(nums[i])) {\n\t\t\t\t\tcount = hashMap.get(nums[i]);\n\t\t\t\t}\n\t\t\t\tif(min > nums[i]) {\n\t\t\t\t\tmin = nums[i];\n\t\t\t\t}\n\t\t\t\thashMap.put(nums[i], count + 1);\n\t\t\t}\n\n\t\t\tif(hashMap.containsValue(4)) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(hashMap.containsValue(3)&&hashMap.containsValue(2)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if(hashMap.containsValue(3)) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if(hashMap.containsValue(2)) {\n\t\t\t\tfor(Integer key : hashMap.keySet()) {\n\t\t\t\t\tif(hashMap.get(key) == 2) {\n\t\t\t\t\t\thashMap.remove(key);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(hashMap.containsValue(2)) {\n\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t}else {\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t}\n\t\t\t}else if(hashMap.containsKey(min) && hashMap.containsKey(min + 1) && hashMap.containsKey(min + 2)\n\t\t\t\t\t&& hashMap.containsKey(min + 3) && hashMap.containsKey(min +4)) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else if(hashMap.containsKey(10) && hashMap.containsKey(11) && hashMap.containsKey(12)\n\t\t\t\t\t&& hashMap.containsKey(13) && hashMap.containsKey(1)) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t\thashMap.clear();\n\t\t\tmin = 14;\n\t\t}\n\t\tscan.close();\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args){\n\n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n        \tString[] pairstr = input.nextLine().split(\",\");\n        \tint[] pairs = new int[pairstr.length];\n        \tfor(int i = 0 ; i < pairstr.length ; i++){\n        \t\tpairs[i] = Integer.parseInt(pairstr[i]);\n        \t}\n        \t/*for(int i = 0 ; i < pairs.length ; i++){\n        \t\tif(pairs[i]==(\"A\")){\n        \t\t\tpairs[i] = \"1\";\n        \t\t}else if(pairs[i]==(\"K\")){\n        \t\t\tpairs[i] = \"13\";\n        \t\t}else if(pairs[i]==(\"Q\")){\n        \t\t\tpairs[i] = \"12\";\n        \t\t}else if(pairs[i]==(\"J\")){\n        \t\t\tpairs[i] = \"11\";\n        \t\t}\n        \t}*/\n        \tArrays.sort(pairs);\n        \tSystem.out.println(order(pairs));\n        }\n    }\n\n    public static String order(int[] pairs){\n    \tif(pairs[0]==pairs[3] || pairs[1]==pairs[4])return \"four card\";\n    \tif((pairs[0]==pairs[1] && pairs[2]==pairs[4]) || (pairs[0]==pairs[2] && pairs[3]==pairs[4]))return \"full house\";\n    \tif(pairs[0]+1 == pairs[1] && pairs[1]+1 == pairs[2] && pairs[2]+1 == pairs[3] && pairs[3]+1 == pairs[4])return \"straight\";\n    \tif(pairs[0] == 1 && pairs[1] == 10 && pairs[2] == 11 && pairs[3] == 12 && pairs[4] == 13)return \"straight\";\n    \tif(pairs[0]==pairs[2] || pairs[1]==pairs[3] || pairs[2]==pairs[4])return \"three card\";\n    \tif((pairs[0]==pairs[1] && pairs[2]==pairs[3]) || (pairs[0]==pairs[1] && pairs[3]==pairs[4]) || (pairs[1]==pairs[2] && pairs[3]==pairs[4]))return \"two pair\";\n    \tif(pairs[0]==pairs[1] || pairs[1]==pairs[2] || pairs[2]==pairs[3] || pairs[3]==pairs[4])return \"one pair\";\n    \treturn \"null\";\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in).useDelimiter(\"(,|\\r\\n)\");\n\t\tint[] c = new int[14];\n\t\tint[] n = new int[5];\n\t\twhile (sc.hasNextInt()) {\n\t\t\tfor (int i = 0; i < 14; i++)\n\t\t\t\tc[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\tn[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++){\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tc[a - 1]++;\n\t\t\t}\n\t\t\tfor (int i = 0; i < 13; i++)\n\t\t\t\tn[c[i]]++;\n\t\t\tc[13] = c[0];\n\t\t\tint j = 13;\n\t\t\twhile (j > 3 && c[j] <= 0)\n\t\t\t\tj--;\n\t\t\tif (n[4] > 0) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if (n[3] > 0 && n[2] > 0) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (j > 3 && c[j - 1] > 0 && c[j - 2] > 0 && c[j - 3] > 0 && c[j - 4] > 0) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (n[3] > 0) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (n[2] > 1) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (n[2] > 0) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n\n    /**\n     * ?????????????????????\n     */\n    public static void main(String[] args) throws IOException {\n\n        // ??\\????????????????????????MAX50??¶??¨???????????????????????§????????¨????????????????????§OK???\n        List<Hand> hands = readHands();\n\n        // 1??¶??????????????????\n        for (Hand hand : hands) {\n\n            // ??????????????????\n            String handName = hand.judge();\n\n            // ?????????????????????\n            System.out.println(handName);\n\n        }\n    }\n\n    /**\n     * ?¨??????\\???????????????????????????1??????????????????????????????????????¨???????????´?????????\n     *\n     * @return ???????????????\n     */\n    protected static List<Hand> readHands() throws IOException {\n\n        // ????????????????????¨?????????\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                System.in));\n\n        List<Hand> hands = new ArrayList<Hand>();\n        String line = null;\n        // ?¨??????\\?????????1???????????????????????????????????????\n        while ((line = reader.readLine()) != null) {\n            String[] values = line.split(\",\");\n\n            // ??????????????°??????????????????\n            int[] cards = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                cards[i] = Integer.parseInt(values[i]);\n            }\n\n            // ??????????????????????????????????????????????????????\n            hands.add(new Hand(cards));\n        }\n\n        // ????????????????????????????????????\n        if (reader != null) {\n            reader.close();\n        }\n\n        return hands;\n    }\n\n    /**\n     * ???????????¨????????????\n     */\n    static class Hand {\n\n        /** ??????????????± */\n        int[] cards;\n\n        /**\n         * ?????°??§???????????????????????????????????????\n         *\n         * @param cards ?????????\n         */\n        public Hand(final int[] cards) {\n            // ?????????????????¨???????????????\n            this.cards = new int[5];\n            System.arraycopy(cards, 0, this.cards, 0, cards.length);\n        }\n\n        /**\n         * ??????????????????????????????\n         *\n         * @return ???????????????????????´??????null????????????\n         */\n        public String judge() {\n\n            // ?????°?????????????????????\n            int[] numberOfCards = new int[14]; // ??????????????????0????????¨?????????\n            for (int card : cards) {\n                numberOfCards[card]++;\n            }\n\n            // ?????°????????§????????§??????????????¢???\n            int pair = 0;\n            int threeCard = 0;\n            int fourCard = 0;\n            for (int number : numberOfCards) {\n                switch (number) {\n                case 2:\n                    pair++;\n                    break;\n                case 3:\n                    threeCard++;\n                    break;\n                case 4:\n                    fourCard++;\n                    break;\n                }\n            }\n\n            // ??????????????????\n            if (fourCard > 0) {\n                return \"four card\";\n            }\n\n            // ???????????????\n            if (pair > 0 && threeCard > 0) {\n                return \"full house\";\n            }\n\n            // ????????¬?????????????????§??????????????§????????¬??????????????§????????????\n            int[] straightJudge = new int[5];\n            System.arraycopy(cards, 0, straightJudge, 0, cards.length);\n            Arrays.sort(straightJudge);\n\n            // ??????????????????5??£?¶???§????????§?????????OK\n            int sequenceCount = 0;\n            for (int i = 1; i < straightJudge.length; i++) {\n                if ((straightJudge[i] - straightJudge[i - 1]) == 1) {\n                    sequenceCount++;\n                }\n            }\n            if (sequenceCount == 4) {\n                return \"straight\";\n            }\n\n            // A??????????????????????????¬??????????????\\???????????????\n            if (straightJudge[0] == 1 && straightJudge[1] == 10 && straightJudge[2] == 11 && straightJudge[3] == 12\n                    && straightJudge[4] == 13) {\n                return \"straight\";\n            }\n\n            // ??????????????????\n            if (threeCard > 0) {\n                return \"three card\";\n            }\n\n            // ???????????¢\n            if (pair > 1) {\n                return \"two pair\";\n            }\n\n            if (pair > 0) {\n                return \"one pair\";\n            }\n            return null;\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main {\n\tpublic static String sarch(int in[]){\n\t\tint i;\n\t\t//four\n\t\tfor(i=1;i<4;i++){\n\t\t\tif(in[0]!=in[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i==4)\n\t\t\treturn \"four card\";\n\t\tfor(i=2;i<5;i++){\n\t\t\tif(in[1]!=in[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i==5)\n\t\t\treturn \"four card\";\n\t\t//full house\n\t\tif(in[0]==in[1] && in[2]==in[3] && in[3]==in[4])\n\t\t\treturn \"full house\";\n\t\tif(in[0]==in[1] && in[1]==in[2] && in[3]==in[4])\n\t\t\treturn \"full house\";\n\t\t//straight\n\t\tfor(i=1;i<5;i++){\n\t\t\tif(in[i-1]+1!=in[i]) break;\n\t\t}\n\t\tif(i==5) return \"straight\";\n\t\tif(in[0]==1 && in[1]==10 && in[2]==11 && in[3]==12 && in[4]==13){\n\t\t\treturn \"straight\";\n\t\t}\n\t\t//three\n\t\tfor(i=1;i<3;i++){\n\t\t\tif(in[0]!=in[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i==3)\n\t\t\treturn \"three card\";\n\t\tfor(i=2;i<4;i++){\n\t\t\tif(in[1]!=in[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i==4)\n\t\t\treturn \"three card\";\n\t\tfor(i=3;i<5;i++){\n\t\t\tif(in[2]!=in[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i==5)\n\t\t\treturn \"three card\";\n\t\t//two pair\n\t\tif(in[0]==in[1] && in[2]==in[3])\n\t\t\treturn \"two pair\";\n\t\tif(in[0]==in[1] && in[3]==in[4])\n\t\t\treturn \"two pair\";\n\t\tif(in[1]==in[2] && in[3]==in[4])\n\t\t\treturn \"two pair\";\n\t\t//one\n\t\tif(in[0]==in[1])\n\t\t\treturn \"one pair\";\n\t\tif(in[1]==in[2])\n\t\t\treturn \"one pair\";\n\t\tif(in[2]==in[3])\n\t\t\treturn \"one pair\";\n\t\tif(in[3]==in[4])\n\t\t\treturn \"one pair\";\n\t\t\n\t\t//null\n\t\treturn \"null\";\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint in[]=new int[5],i,j,min,tmp;\n\t\twhile(sc.hasNext()){\n\t\t\tString str[]=sc.next().split(\",\");\n\t\t\tfor(i=0;i<5;i++){\n\t\t\t\tin[i]=Integer.parseInt(str[i]);\n\t\t\t}\n\t\t\t//sort\n\t\t\tfor(i=0;i<5;i++){\n\t\t\t\tmin=i;\n\t\t\t\tfor(j=i;j<5;j++){\n\t\t\t\t\tif(in[j]<in[min]) min=j;\n\t\t\t\t}\n\t\t\t\ttmp=in[i];\n\t\t\t\tin[i]=in[min];\n\t\t\t\tin[min]=tmp;\n\t\t\t}\n\t\t\tSystem.out.println(sarch(in));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while(true) {\n            \n            //1行受け取り\n            String line;\n            try {\n                line = sc.nextLine(); \n            }catch(Exception e) {\n                break;\n            }\n            \n            //数字の配列を作る\n            int[] nums = new int[5];\n            \n            //lineを分割\n            String[] linesp = line.split(\",\");\n            \n            \n            //配列に数字を入れる\n            for(int i = 0; i < 5; i++) {\n                nums[i] = Integer.parseInt(linesp[i]);\n            }\n            \n            //0~13の配列を用意してカウント数を入れる\n            int[] count = new int[14];\n            for(int i = 0; i < 5; i++) {\n                count[nums[i]] += 1;\n            }\n            \n            int paircount = 0;\n            int straightcount = 0;\n            List<Integer> list = new ArrayList<Integer>();\n            for(int i = 0; i < 14; i++) {\n                if(count[i] > 1) {\n                    list.add(count[i]);\n                }\n                if(count[i] == 2) {\n                    paircount += 1;\n                }\n            }\n            \n            if(list.contains(4)) {\n                System.out.println(\"four card\");\n            }else if(list.contains(3) && list.contains(2)) {\n                System.out.println(\"full house\");\n            }else if(list.contains(3)) {\n                 System.out.println(\"three card\");\n            }else if(paircount == 2) {\n                System.out.println(\"two pair\");\n            }else if(paircount == 1) {\n                System.out.println(\"one pair\");\n            }else {\n                for(int i = 1; i < 11; i++) {\n                    if(i < 10) {\n                        if(count[i] == 1 && count[i+1] == 1 && count[i+2] == 1 && count[i+3] == 1 && count[i+4] == 1) {\n                            System.out.println(\"straight\");\n                            break;\n                        }\n                    }else if(i == 10)   \n                        if(count[i] == 1 && count[i+1] == 1 && count[i+2] == 1 && count[i+3] == 1 && count[1] == 1) {\n                            System.out.println(\"straight\");\n                        }else {\n                            System.out.println(\"null\");\n                        }\n                }\n            }\n            \n            \n            \n\n        }\n    }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pari\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pari\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\twhile(scan.hasNext()){\n\t\t\tString[] ss = scan.next().split(\",\");\n\t\t\tint[] c = new int[14];\n\t\t\tint max = 0;\n\t\t\t\n\t\t\tfor(String s:ss){\n\t\t\t\tmax = Math.max(max, ++c[Integer.parseInt(s)]);\n\t\t\t}\n\t\t\t\n\t\t\tif(max == 4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(max == 3){\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int i = 1; i <= 13; i++){\n\t\t\t\t\tif(c[i] == 2){\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f?\"full house\":\"three card\");\n\t\t\t}else if(max == 2){\n\t\t\t\tint k = 0;\n\t\t\t\tfor(int i = 1; i <= 13; i++){\n\t\t\t\t\tif(c[i] == 2)k++;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(k==2?\"two pair\":\"one pair\");\n\t\t\t}else{\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int i = 1; i <= 10; i++){\n\t\t\t\t\tif(c[i] == 1){\n\t\t\t\t\t\tboolean ff = true;\n\t\t\t\t\t\tfor(int j = i + 1; j <= i + 4; j++){\n\t\t\t\t\t\t\tif(c[(j-1) % 13 + 1] != 1){\n\t\t\t\t\t\t\t\tff = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tf |= ff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f?\"straight\":\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tstatic void solve (FastScanner in, PrintWriter out, Methods ms) {\n\n\t\twhile (in.hasNext() == true) {\n//\t\tfor (int k=0; k<8; k++) {\n\t\t\t\n\t\t\tString[] s = in.next().split(\",\");\n\t\t\t\n\t\t\tint[] a = new int[5];\n\t\t\tfor (int i=0; i<5; i++) {\n\t\t\t\ta[i] = Integer.parseInt(s[i]);\n\t\t\t}\n\t\t\tArrays.sort(a);\n\n\t\t\tif (isSameNum(a[0], a[1], a[2], a[3]) || isSameNum(a[1], a[2], a[3], a[4])) {\n\t\t\t\tout.println(\"four card\");\n\t\t\t}\n\t\t\telse if ((isSameNum(a[0], a[1], a[2]) && isSameNum(a[3], a[4]))\n\t\t\t\t\t|| (isSameNum(a[0], a[1]) && isSameNum(a[2], a[3], a[4]))) {\n\t\t\t\tout.println(\"full house\");\n\t\t\t}\n\t\t\telse if (isStraight(a)) {\n\t\t\t\tout.println(\"straight\");\n\t\t\t}\n\t\t\telse if (isSameNum(a[0], a[1], a[2])\n\t\t\t\t\t|| isSameNum(a[1], a[2], a[3])\n\t\t\t\t\t|| isSameNum(a[2], a[3], a[4])) {\n\t\t\t\tout.println(\"three card\");\n\t\t\t}\n\t\t\telse if ((isSameNum(a[0], a[1]) && isSameNum(a[2], a[3]))\n\t\t\t\t\t|| (isSameNum(a[1], a[2]) && isSameNum(a[3], a[4]))\n\t\t\t\t\t|| (isSameNum(a[0], a[1]) && isSameNum(a[3], a[4]))) {\n\t\t\t\tout.println(\"two pair\");\n\t\t\t}\n\t\t\telse if (isSameNum(a[0], a[1])\n\t\t\t\t\t|| isSameNum(a[1], a[2])\n\t\t\t\t\t|| isSameNum(a[2], a[3])\n\t\t\t\t\t|| isSameNum(a[3], a[4])\n\t\t\t\t\t|| isSameNum(a[0], a[4])) {\n\t\t\t\tout.println(\"one pair\");\n\t\t\t}\n\t\t\telse out.println(\"null\");\n\n\t\t}\n\n\t}\n\n\tstatic boolean isSameNum (int... a) {\n\t\tfor (int i=0; i<a.length-1; i++) {\n\t\t\tif (a[i] != a[i+1]) return false;\n\t\t}\n\t\tif (a[0] != a[a.length-1]) return false;\n\t\treturn true;\n\t}\n\n\tstatic boolean isStraight (int[] a) {\n\t\tif (a[1]==10 && a[2]==11 && a[3]==12 && a[4]==13 && a[0]==1) return true;\n\t\tfor (int i=0; i<4; i++) {\n\t\t\tif (Math.abs(a[i+1]-a[i]) != 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\n\n\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tMethods ms = new Methods();\n\t\tsolve(in, out, ms);\n\t\tin.close();\n\t\tout.close();\n\t}\n\n\tstatic class Methods {\n\n\t\tpublic void print (Object... ar) {System.out.println(Arrays.deepToString(ar));}\n\n\t\tpublic int max (int... ar) {Arrays.sort(ar); return ar[ar.length-1];}\n\n\t\tpublic int min (int... ar) {Arrays.sort(ar); return ar[0];}\n\n\t\tpublic long gcd (long a, long b) {return b>0?gcd(b,a%b):a;}\n\n\t\tpublic long lcm (long a, long b) {return a/gcd(a,b)*b;}\n\n\t\tpublic long factorial (int i) {\n\t\t\tif (i==1) return 1;\n\t\t\telse return i*factorial(i-1);\n\t\t}\n\n\t\tpublic int manhat (int x1, int y1, int x2, int y2) {\n\t\t\treturn Math.abs(x1-x2)+Math.abs(y1-y2);\n\t\t}\n\n\t\tpublic double euclid (double x1, double y1, double x2, double y2) {\n\t\t\treturn Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n\t\t}\n\n\t\tpublic boolean isPrime (int n) {\n\t\t\tif (n==2) return true;\n\t\t\tif (n<2 || n%2==0) return false;\n\t\t\tfor (int i=3; i<=Math.sqrt(n); i+=2) if(n%i==0) return false;\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\tstatic class FastScanner {\n\n\t\tprivate InputStream in;\n\t\tprivate byte[] buffer = new byte[1024];\n\t\tprivate  int length = 0, p = 0;\n\n\t\tpublic FastScanner (InputStream stream) {\n\t\t\tin = stream;\n\t\t}\n\n\t\tpublic boolean hasNextByte () {\n\t\t\tif (p < length) return true;\n\t\t\telse {\n\t\t\t\tp = 0;\n\t\t\t\ttry {length = in.read(buffer);}\n\t\t\t\tcatch (Exception e) {e.printStackTrace();}\n\t\t\t\tif (length <= 0) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic int readByte () {\n\t\t\tif (hasNextByte() == true) return buffer[p++];\n\t\t\treturn -1;\n\t\t}\n\n\t\tpublic boolean isPrintable (int n) {return 33<=n&&n<=126;}\n\n\t\tpublic void skip () {\n\t\t\twhile (hasNextByte() && !isPrintable(buffer[p])) p++;\n\t\t}\n\n\t\tpublic boolean hasNext () {skip(); return hasNextByte();}\n\n\t\tpublic String next () {\n\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint t = readByte();\n\t\t\twhile (isPrintable(t)) {\n\t\t\t\tsb.appendCodePoint(t);\n\t\t\t\tt = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic String[] nextArray (int n) {\n\t\t\tString[] ar = new String[n];\n\t\t\tfor (int i=0; i<n; i++) ar[i] = next();\n\t\t\treturn ar;\n\t\t}\n\n\t\tpublic int nextInt () {return Math.toIntExact(nextLong());}\n\n\t\tpublic int[] nextIntArray (int n) {\n\t\t\tint[] ar = new int[n];\n\t\t\tfor (int i=0; i<n; i++) ar[i] = nextInt();\n\t\t\treturn ar;\n\t\t}\n\n\t\tpublic long nextLong () {\n\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\tboolean minus = false;\n\t\t\tint temp = readByte();\n\t\t\tif (temp == '-') {\n\t\t\t\tminus = true;\n\t\t\t\ttemp = readByte();\n\t\t\t}\n\t\t\tif (temp<'0' || '9'<temp) throw new NumberFormatException();\n\t\t\tlong n = 0;\n\t\t\twhile (isPrintable(temp)) {\n\t\t\t\tif ('0'<=temp && temp<='9') {\n\t\t\t\t\tn *= 10;\n\t\t\t\t\tn += temp - '0';\n\t\t\t\t}\n\t\t\t\telse throw new NumberFormatException();\n\t\t\t\ttemp = readByte();\n\t\t\t}\n\t\t\treturn minus? -n : n;\n\t\t}\n\n\t\tpublic long[] nextLongArray (int n) {\n\t\t\tlong[] ar = new long[n];\n\t\t\tfor (int i=0; i<n; i++) ar[i] = nextLong();\n\t\t\treturn ar;\n\t\t}\n\n\t\tpublic double nextDouble () {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tpublic double[] nextDoubleArray (int n) {\n\t\t\tdouble[] ar = new double[n];\n\t\t\tfor (int i=0; i<n; i++) ar[i] = nextDouble();\n\t\t\treturn ar;\n\t\t}\n\n\t\tpublic void close () {\n\t\t\ttry {in.close();}\n\t\t\tcatch(Exception e){}\n\t\t}\n\n\t}\n\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            String[] lines = sc.next().split(\",\");\n            int[] cards = new int[13];\n            int max = 0;\n            int max2 = 0;\n            for (String s:lines) {\n                int n = Integer.parseInt(s) - 1;\n                cards[n]++;\n                if (max < cards[n]) {\n                    max = cards[n];\n                } else if (max2 < cards[n]) {\n                    max2 = cards[n];\n                }\n            }\n            String a=max>=4?\"four card\":max==3?max2==2?\"full house\":\"three card\":max==2?max2==2?\"two pair\":\"one pair\":\"null\";\n\n                int count = 0;\n                for (int i = 0; i < 14; i++) {\n                    if (cards[i % 13] == 1) {\n                        count++;\n                        if (count == 5) {\n                            a = \"straight\";\n                            break;\n                        }\n                    } else {\n                        count = 0;\n                    }\n               // }\n            }\n            System.out.println(a);\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n\n\twhile (sc.hasNextLine()) {\n\t    String[] cards = sc.nextLine().split(\",\");\n\t    // ??????????????????????????????\n\t    if (isFourCard(cards)) {\n\t\tSystem.out.println(\"four card\");\n\t\tcontinue;\n\t    }\n\t    // ????????¬??????????????????\n\t    if (isStraight(cards)) {\n\t\tSystem.out.println(\"straight\");\n\t\tcontinue;\n\t    }\n\t    // ???????????????\n\t    if (isFullHouse(cards)) {\n\t\tSystem.out.println(\"full house\");\n\t\tcontinue;\n\t    }\n\t    // ??????????????????????????????\n\t    if (isthreeCard(cards)) {\n\t\tSystem.out.println(\"three card\");\n\t\tcontinue;\n\t    }\n\t    // ???????????¢????????????\n\t    if (isTwoPare(cards)) {\n\t\tSystem.out.println(\"two pair\");\n\t\tcontinue;\n\t    }\n\t    // ???????????¢????????????\n\t    if (isOnePare(cards)) {\n\t\tSystem.out.println(\"one pair\");\n\t\tcontinue;\n\t    }\n\t    // ????????§?????????????????°null\n\t    System.out.println(\"null\");\n\t}\n    }\n\n    private static boolean isFourCard(String[] cards) {\n\treturn isPareCards(4, cards, false);\n    }\n\n    private static boolean isStraight(String[] cards) {\n\tArrays.sort(cards, new Main().new Compare());\n\n\tif (isRoyalStraight(cards)) {\n\t    return true;\n\t}\n\n\tfor (int i = 1; i < cards.length; i++) {\n\t    int draw = Integer.parseInt(cards[i]) - Integer.parseInt(cards[i - 1]);\n\t    if (draw != 1) {\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    private static boolean isRoyalStraight(String[] cards) {\n\tArrays.sort(cards, new Main().new Compare());\n\n\tString[] speStraight = { \"1\", \"10\", \"11\", \"12\", \"13\" };\n\n\tfor (int i = 0; i < cards.length; i++) {\n\t    if (!speStraight[i].equals(cards[i])) {\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    private static boolean isFullHouse(String[] cards) {\n\treturn isPareCards(3, cards, false) && isPareCards(2, cards, false);\n    }\n\n    private static boolean isthreeCard(String[] cards) {\n\treturn isPareCards(3, cards, false);\n    }\n\n    private static boolean isTwoPare(String[] cards) {\n\treturn isPareCards(2, cards, true);\n    }\n\n    private static boolean isOnePare(String[] cards) {\n\treturn isPareCards(2, cards, false);\n    }\n\n    // ?????????????????°????????°??????????????°???????????¨????????????\n    private static boolean isPareCards(int number, String[] cards, boolean pares) {\n\n\tHashMap<String, Integer> map = new HashMap<>();\n\tfor (int i = 0; i < cards.length; i++) {\n\t    int count = 0;\n\t    if (map.containsKey(cards[i])) {\n\t\tcount = map.get(cards[i]) + 1;\n\t    } else {\n\t\tcount = 1;\n\t    }\n\n\t    map.put(cards[i], count);\n\t}\n\tint pareCount = 0;\n\tfor (String key : map.keySet()) {\n\t    if (map.get(key) == number) {\n\t\tpareCount++;\n\t    }\n\t}\n\n\t// ???????????¢????????????????????´?????????????????§??????\n\tif (pares && pareCount == 2) {\n\t    return true;\n\t}\n\n\treturn !pares && pareCount == 1;\n    }\n\n    // ??\\???????????°????????????????????????????????¬?????????\n    public class Compare implements Comparator<String> {\n\n\t@Override\n\tpublic int compare(String o1, String o2) {\n\t    return Integer.parseInt(o1) - Integer.parseInt(o2);\n\t}\n\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\n    /** データセットの区切り文字 */\n    private static final String DELIMITER = \",\";\n\n    /** ワンペア */\n    private static final String ONE_PAIR = \"one pair\";\n\n    /** ツーペア */\n    private static final String TWO_PAIR = \"two pair\";\n\n    /** スリーカード */\n    private static final String THREE_CARD = \"three card\";\n\n    /** ストレート */\n    private static final String STRAIGHT = \"straight\";\n\n    /** フルハウス */\n    private static final String FULL_HOUSE = \"full house\";\n\n    /** フォーカード */\n    private static final String FOUR_CARD = \"four card\";\n\n    /**\n     * メインメソッド\n     *\n     * @param args\n     */\n    public static void main(String[] args) {\n        // ローカルテスト用。提出時は\"System.in\"に修正。\n        // try (Scanner scanner = new Scanner(new File(\n        //            \"D:/Temp/AOJ/0038_PokerHand.txt\"))) {\n             try (Scanner scanner = new Scanner(System.in)) {\n            while (scanner.hasNextLine()) {\n                System.out.println(judgeHand(scanner.nextLine()\n                        .split(DELIMITER)));\n            }\n        } catch (Exception e) {\n            // 対応しない。\n        }\n    }\n\n    /**\n     * 役を判定する。\n     *\n     * @param cards データセット1行を格納した配列\n     * @return 判定結果\n     */\n    private static String judgeHand(String[] cards) {\n        Map<String, Integer> hands = readHands(cards);\n\n        if (hands.containsValue(4)) {\n            return FOUR_CARD;\n        }\n\n        if (hands.containsValue(3) && hands.containsValue(2)) {\n            return FULL_HOUSE;\n        }\n\n        if (hands.containsValue(3)) {\n            return THREE_CARD;\n        }\n\n        int pairs = countPairs(hands);\n\n        if (pairs == 2) {\n            return TWO_PAIR;\n        } else if (pairs == 1) {\n            return ONE_PAIR;\n        }\n\n        // ストレートが成立するときは他の役が成立しないので、最後に判定。\n        if (isStraight(hands)) {\n            return STRAIGHT;\n        }\n\n        return null;\n    }\n\n    /**\n     * 手札のカードを解析する。\n     *\n     * @param cards 手札5枚を格納した配列\n     * @return keyに手札、valueに同じ数字のカードの枚数を格納したMap\n     */\n    private static Map<String, Integer> readHands(String[] cards) {\n        Map<String, Integer> result = new HashMap<String, Integer>();\n\n        for (String card : cards) {\n            int counter = result.containsKey(card) ? result.get(card) + 1 : 1;\n            result.put(card, counter);\n        }\n\n        return result;\n    }\n\n    /**\n     * ペアの組数を数える。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ペアの組数\n     */\n    private static int countPairs(Map<String, Integer> handsMap) {\n        int pairCounter = 0;\n\n        for (Map.Entry<String, Integer> entry : handsMap.entrySet()) {\n            if (entry.getValue() == 2) {\n                pairCounter++;\n            }\n        }\n\n        return pairCounter;\n    }\n\n    /**\n     * ストレートの役が成立するか判定する。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ストレートが成立する場合に{@code true}、それ以外の場合に{@code false}\n     */\n    private static boolean isStraight(Map<String, Integer> handsMap) {\n\n        int[] hands = new int[5];\n\n        int counter = 0;\n        for (String hand : handsMap.keySet()) {\n            hands[counter++] = Integer.parseInt(hand);\n        }\n\n        Arrays.sort(hands);\n\n        // 1ずつインクリメントしない組み合わせは1つのみなので先にチェック。\n        if (Arrays.equals(new int[] { 1, 10, 11, 12, 13 }, hands)) {\n            return true;\n        }\n\n        for (int i = 0; i < hands.length - 1; i++) {\n            if (hands[i] + 1 != hands[i + 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Scanner;\npublic class Main {\n\tstatic long[] list = new long[10001];\n\tpublic static void main(String[] args) {\n\t\tScanner stdIn = new Scanner(System.in);\n\t\twhile(stdIn.hasNext()) {\n\t\t\tint[] data = new int[5];\n\t\t\tString[] tmp = stdIn.next().split(\",\");\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\t\n\t\t\t\tdata[i] = Integer.parseInt(tmp[i]);\n\t\t\t}\n\t\t\tsolv(data);\n\t\t}\n\t}\n\tpublic static void solv(int[] a) {\n\t\tArrays.sort(a);\n\t\tif((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\tSystem.out.println(\"four card\");\n\t\t\treturn;\n\t\t}\n\t\tif((a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) || (a[0] == a[1] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\tSystem.out.println(\"full house\");\n\t\t\treturn;\n\t\t}\n\t\tif((a[0] == 1 && a[1] == 2 && a[2] == 3 && a[3] == 4 && a[4] == 5) || a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n\t\t\tSystem.out.println(\"straight\");\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = 1; i < 5; i++) {\n\t\t\tif(a[i-1]+1 != a[i]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(a[i] == 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i == 4) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 2; i < 5; i++) {\n\t\t\tif(a[i-2] == a[i-1] && a[i-1] == a[i]) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 1; i < 5; i++) {\n\t\t\tif(a[i-1] == a[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 2) {\n\t\t\tSystem.out.println(\"two pair\");\n\t\t}\n\t\tif(count == 1) {\n\t\t\tSystem.out.println(\"one pair\");\n\t\t}\n\t\tif(count == 0) {\n\t\t\tSystem.out.println(\"null\");\n\t\t}\n\t\t\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in).useDelimiter(\"(,|\\r\\n|\\r|\\n)\");\n\t\tint[] c = new int[14];\n\t\tint[] n = new int[5];\n\t\twhile (sc.hasNextInt()) {\n\t\t\tfor (int i = 0; i < 14; i++)\n\t\t\t\tc[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\tn[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tc[a - 1]++;\n\t\t\t}\n\t\t\tfor (int i = 0; i < 13; i++)\n\t\t\t\tn[c[i]]++;\n\t\t\tc[13] = c[0];\n\t\t\tint j = 0;\n\n\t\t\twhile (j < 10) {\n\t\t\t\tif (c[j] > 0 && c[j + 1] > 0 && c[j + 2] > 0 && c[j + 3] > 0 && c[j + 4] > 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (n[4] > 0) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if (n[3] > 0 && n[2] > 0) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (j < 10) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (n[3] > 0) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (n[2] > 1) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (n[2] > 0) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\n\n class Main{\n     public static void main(String args[]){\n         Scanner sc = new Scanner(System.in);\n         String line;\n         while((line=sc.nextLine())!=null){\n             String[] split=line.split(\",\");\n             int[] ints = new int[5]; for(int i=0;i<5;i++)ints[i]=Integer.parseInt(split[i]);\n             if(!_4c(ints))if(!fullH(ints))if(!_3c(ints))if(!_2p(ints))if(!_1p(ints))\n                 System.out.println(\"null\");\n         }\n         \n         \n     }\n     static boolean _4c(int[] ints){\n         if(ints[1]==ints[2]&&ints[1]==ints[3]&&ints[1]==ints[4]){System.out.println(\"four card\");\n         return true;}\n         int count=0; for(int x : ints) if(x==ints[0])count++;\n         if(count==4){System.out.println(\"four card\");return true;}\n         return false;\n     }\n     static boolean fullH(int[] ints){\n         HashSet<Integer>hs=new HashSet<Integer>();\n         for(int x:ints) hs.add(x);\n         if(hs.size()==2){System.out.println(\"full house\"); return true;}\n         return false;\n     }\n     static boolean st(int[] ints){\n         TreeSet<Integer>hs=new TreeSet<Integer>();\n         \n         for(int x:ints) hs.add(x);\n         if(hs.size()!=5)return false;\n         if(hs.last()-hs.first()==4){System.out.println(\"straight\");return true;}\n         if(hs.first()==1){hs.remove(1);\n             if(hs.first()==10)System.out.println(\"straight\");return true;\n        }return false;\n     }\n     static boolean _3c(int[] ints){\n        for(int i=0; i<5;i++){\n            int count=0;\n            for(int j=i+1;j<5;j++){\n                if(ints[i]==ints[j])count++;\n            }\n            if(count==3){System.out.println(\"three card\");return true;}\n        }\n        return false;\n     }\n     static boolean _2p(int[] ints){\n         TreeMap<Integer,Integer>tm=new TreeMap<Integer,Integer>();\n         for(int in:ints){\n             if(tm.containsKey(in))tm.put(in, tm.get(in)+1);\n             else tm.put(in, 1);\n         }\n         if(tm.keySet().size()==3){System.out.println(\"two pair\");return true;}\n         return false;\n     }\n     static boolean _1p(int[] ints){\n         for(int i=0; i<5;i++){\n             for(int j=i+1;j<5;j++){\n                 if(ints[i]==ints[j]){System.out.println(\"one pair\");return true;}\n         }\n     }return false;}\n }"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str;\n\t\twhile((str = br.readLine()) != null) {\n\t\t\tString ns[] = str.split(\",\");\n\t\t\tint count[] = new int[13];\n\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\tcount[Integer.parseInt(ns[i]) - 1]++;\n\t\t\t}\n\t\t\tboolean flag = false;\n\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\tif(count[i] == 1) {\n\t\t\t\t\tif(count[i+1] == 1 && count[i+2] == 1 && count[i+3] == 1 && count[(i+4) % 13] == 1) {\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag) continue;\n\t\t\tint pair[] = new int[2];\n\t\t\tint cnt = 0;\n\t\t\tfor(int x : count) {\t\t\t\t\n\t\t\t\tif(x >= 2) {\n\t\t\t\t\tpair[cnt] = x;\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(pair[0] == 4) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\tcontinue;\n\t\t\t} else if(pair[0] == 3 && pair[1] == 2 || pair[0] == 2 && pair[1] == 3) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\tcontinue;\n\t\t\t} else if(pair[0] == 3) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\tcontinue;\n\t\t\t} else if(pair[0] == 2 && pair[1] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\tcontinue;\n\t\t\t} else if(pair[0] == 2) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pari\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pari\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n\n    return false;\n\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO ?????????????????????????????????????????????\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true){\n\t\t\tString tmp = br.readLine();\n\t\t\t\n\t\t\tif(tmp == null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tString[] tmpArray = tmp.split(\",\");\n\t\t\t\n\t\t\tint[] cards = new int[5];\n\t\t\tint[] appears = new int[13];\n\t\t\t\tfor(int i = 0; i < 5; i++){\n\t\t\t\tcards[i] = Integer.parseInt(tmpArray[i]);\n\t\t\t\tappears[cards[i] - 1]++;\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\n\t\t\tboolean fourcards = false;\n\t\t\tboolean threecards = false;\n\t\t\tint pair = 0;\n\t\t\t//4cards\n\t\t\tfor(int i = 0; i < 13; i++){\n\t\t\t\tif(appears[i] >= 4 ){\n\t\t\t\t\tfourcards = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(appears[i] == 3){\n\t\t\t\t\tthreecards = true;\n\t\t\t\t}\n\t\t\t\tif(appears[i] == 2){\n\t\t\t\t\tpair++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tboolean straight = false;\n\t\t\tif(cards[0]==1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13){\n\t\t\t\tstraight = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstraight = true;\n\t\t\t\tfor(int j = 1; j < 5; j++){\n\t\t\t\t\tif(cards[j] != cards[0] + j){\n\t\t\t\t\t\tstraight = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(fourcards){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if(threecards && pair == 1){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}\n\t\t\telse if(straight){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}\n\t\t\telse if(threecards){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}\n\t\t\telse if(pair == 2){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}\n\t\t\telse if(pair == 1){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\n\n\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\n\n class Main{\n     public static void main(String args[]){\n         Scanner sc = new Scanner(System.in);\n         String line;\n         while((line=sc.nextLine())!=null){\n             if(line.isEmpty())break;\n             String[] split=line.split(\",\");\n             int[] ints = new int[5]; for(int i=0;i<5;i++)ints[i]=Integer.parseInt(split[i]);\n             if(!_4c(ints))if(!fullH(ints))if(!st(ints))if(!_3c(ints))if(!_2p(ints))if(!_1p(ints))\n                 System.out.println(\"null\");\n         }\n         \n         \n     }\n     static boolean _4c(int[] ints){\n         if(ints[1]==ints[2]&&ints[1]==ints[3]&&ints[1]==ints[4]){System.out.println(\"four card\");\n         return true;}\n         int count=0; for(int x : ints) if(x==ints[0])count++;\n         if(count==4){System.out.println(\"four card\");return true;}\n         return false;\n     }\n     static boolean fullH(int[] ints){\n         HashSet<Integer>hs=new HashSet<Integer>();\n         for(int x:ints) hs.add(x);\n         if(hs.size()==2){System.out.println(\"full house\"); return true;}\n         return false;\n     }\n     static boolean st(int[] ints){\n         TreeSet<Integer>hs=new TreeSet<Integer>();\n         \n         for(int x:ints) hs.add(x);\n         if(hs.size()!=5)return false;\n         if(hs.last()-hs.first()==4){System.out.println(\"straight\");return true;}\n         if(hs.first()==1){hs.remove(1);\n             if(hs.first()==10)System.out.println(\"straight\");return true;\n        }return false;\n     }\n     static boolean _3c(int[] ints){\n        for(int i=0; i<5;i++){\n            int count=0;\n            for(int j=i+1;j<5;j++){\n                if(ints[i]==ints[j])count++;\n            }\n            if(count==3){System.out.println(\"three card\");return true;}\n        }\n        return false;\n     }\n     static boolean _2p(int[] ints){\n         TreeMap<Integer,Integer>tm=new TreeMap<Integer,Integer>();\n         for(int in:ints){\n             if(tm.containsKey(in))tm.put(in, tm.get(in)+1);\n             else tm.put(in, 1);\n         }\n         if(tm.keySet().size()==3){System.out.println(\"two pair\");return true;}\n         return false;\n     }\n     static boolean _1p(int[] ints){\n         for(int i=0; i<5;i++){\n             for(int j=i+1;j<5;j++){\n                 if(ints[i]==ints[j]){System.out.println(\"one pair\");return true;}\n         }\n     }return false;}\n }"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br =\n\t\t\t\tnew BufferedReader(new InputStreamReader(System.in));\n\t\tfor (String str; (str = br.readLine()) != null; ) {\n\t\t\tString[] data = str.split(\",\");\n\t\t\tint[] hand = new int[5];\n\t\t\tfor (int i=0; i < 5; i++) {\n\t\t\t\thand[i] = Integer.parseInt(data[i]); // 0, 1, 2, 3, 4\n\t\t\t}\n\t\t\tArrays.sort(hand);\n\n\t\t\tif (fourCard(hand)) System.out.println(\"four card\");\n\t\t\telse if (fullHouse(hand)) System.out.println(\"full house\");\n\t\t\telse if (straight(hand)) System.out.println(\"straight\");\n\t\t\telse if (threeCard(hand)) System.out.println(\"three card\");\n\t\t\telse if (twoPair(hand)) System.out.println(\"two pair\");\n\t\t\telse if (onePair(hand)) System.out.println(\"one pair\");\n\t\t\telse System.out.println(\"null\");\n\t\t}\n\t}\n\n\tpublic static boolean fourCard(int[] hand) {\n\t\tif (hand[1] != hand[3]) return false;\n\t\tif (hand[2] == hand[0] || hand[2] == hand[4]) return true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean fullHouse(int[] hand) {\n\t\tif (hand[0] == hand[1] && hand[2] == hand[4]) return true;\n\t\tif (hand[0] == hand[2] && hand[3] == hand[4]) return true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean straight(int[] hand) {\n\t\tif (hand[0] == 1\n\t\t\t\t&& hand[1] == 10\n\t\t\t\t&& hand[2] == 11\n\t\t\t\t&& hand[3] == 12\n\t\t\t\t&& hand[4] == 13) {\n\t\t\treturn true;\n\t\t}\n\t\tif (hand[0] + 1 == hand[1]\n\t\t\t\t&& hand[1] + 1 == hand[2]\n\t\t\t\t&& hand[2] + 1 == hand[3]\n\t\t\t\t&& hand[3] + 1 == hand[4]) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean threeCard(int[] hand) {\n\t\tif (hand[0] == hand[2]) return true;\n\t\tif (hand[1] == hand[3]) return true;\n\t\tif (hand[2] == hand[4]) return true;\n\t\treturn false;\n\t}\n\n\tpublic static boolean twoPair(int[] hand) {\n\t\tif (hand[0] == hand[1]\n\t\t\t\t&& hand[2] == hand[3]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (hand[0] == hand[1]\n\t\t\t\t&& hand[3] == hand[4]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (hand[1] == hand[2]\n\t\t\t\t&& hand[3] == hand[4]) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean onePair(int[] hand) {\n\t\tfor (int i=0; i <= 3; i++) {\n\t\t\tif (hand[i] == hand[i+1]) return true;\n\t\t}\n\t\treturn false;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tString check( String card ) {\n\t\tint one = card.indexOf(\"1\");\n\t\tint two = card.indexOf(\"2\");\n\t\tif ( card.indexOf(\"4\") != -1 )\n\t\t\treturn \"four card\";\n\t\telse if ( card.indexOf(\"3\") != -1 ) {\n\t\t\tif ( two != -1 )\n\t\t\t\t return \"full house\";\n\t\t\telse\n\t\t\t\treturn \"three card\";\n\t\t} else if ( two != card.lastIndexOf(\"2\") )\n\t\t\treturn \"two pair\";\n\t\telse if ( two != -1 )\n\t\t\treturn \"one pair\";\n\t\telse {\n\t\t\tif ( card.charAt(0)=='1' && card.charAt(9)=='1' && card.charAt(10)=='1' && card.charAt(11)=='1' && card.charAt(12)=='1')\n\t\t\t\treturn \"straight\";\n\t\t\tfor ( int i = one+1; i < one+5; i++ )\n\t\t\t\tif ( card.charAt(one) != card.charAt(i) ) return \"null\";\n\t\t\treturn \"straight\";\n\t\t}\n\t}\n\tpublic static void main ( String[] args ) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tsc.useDelimiter(\"[\\n,]\");\n\t\tMain m = new Main();\n\t\tint[] cards;\n\t\twhile ( sc.hasNext() ) {\n\t\t\tString card = \"\";\n\t\t\tcards = new int[13];\n\t\t\tfor ( int i = 0; i < 5; i++ )\n\t\t\t\tcards[sc.nextInt()-1]++;\n\t\t\tfor ( int i = 0; i < cards.length; i++ )\n\t\t\t\tcard += cards[i];\n\t\t\tString result = m.check(card);\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nimport java.lang.*;\n\nimport java.math.*;\n\n\n\npublic class Main {\n\n\tScanner sc = new Scanner(System.in);\n\n\n\n\tvoid run() {\n\n\t\tfor (; sc.hasNextLine();) {\n\n\t\t\tString buffer = sc.nextLine();\n\n\t\t\tScanner l = new Scanner(buffer.replace(',', ' '));\n\n\t\t\tint[] cards = new int[15];\n\n\t\t\tfor (int i = 0; i < 5; i++) {\n\n\t\t\t\tint a = l.nextInt();\n\n\t\t\t\tcards[a]++;\n\n\t\t\t\tif(a==1) cards[14]++;\n\n\t\t\t}\n\n//\t\t\tSystem.out.println(Arrays.toString(cards));\n\n\t\t\tint count = 0;\n\n\t\t\tint max = 0;\n\n\t\t\tint sub = 0;\n\n\t\t\tboolean str = false;\n\n\t\t\tfor (int i = 1; i < 15; i++) {\n\n\t\t\t\tif (cards[i] == 1) {\n\n\t\t\t\t\tcount++;\n\n\t\t\t\t}else{\n\n\t\t\t\t\tcount=0;\n\n\t\t\t\t}\n\n\t\t\t\tif (count == 5) {\n\n\t\t\t\t\tstr = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif(i==14) break;\n\n\t\t\t\tif (cards[i] > max) {\n\n\t\t\t\t\tmax = cards[i];\n\n\t\t\t\t} else if (cards[i] > sub) {\n\n\t\t\t\t\tsub = cards[i];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (str) {\n\n\t\t\t\tSystem.out.println(\"straight\");\n\n\t\t\t} else {\n\n\t\t\t\tif (max == 4) {\n\n\t\t\t\t\tSystem.out.println(\"four card\");\n\n\t\t\t\t} else if (max == 3) {\n\n\t\t\t\t\tif (sub == 2) {\n\n\t\t\t\t\t\tSystem.out.println(\"full house\");\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if (max == 2) {\n\n\t\t\t\t\tif (sub == 2) {\n\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tSystem.out.println(\"null\");\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\n\tpublic static void main(String[] args) {\n\n\t\tMain m = new Main();\n\n\t\tm.run();\n\n\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "/**\n * \n * No.0038\tPoker Hand\n * \n * \n * @author \tyuichirw <y.iky917@gmail.com>\n * @see\t\thttp://rose.u-aizu.ac.jp/onlinejudge/ProblemSet/description.jsp?id=0038&lang=jp\n */\nimport java.util.*;\nimport static java.lang.Math.*;\n\npublic class Main {\n\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic int[] cards;\n\t\n\tstatic boolean read() {\n\t\tif(!sc.hasNext()) return false;\n\t\tString[] parsed = sc.next().split(\",\");\n\t\tcards = new int[5];\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tcards[i] = Integer.parseInt(parsed[i]);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tstatic String solve() {\n\t\t\n\t\tchar[] histgram = new char[14];\n\t\t\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\thistgram[cards[i]]++;\n\t\t}\n\t\t\n\t\tArrays.sort(histgram);\n\t\tint a,b;\n\t\ta = histgram[histgram.length - 1];\n\t\tb = histgram[histgram.length - 2];\n\t\tif(a == 4) {\n\t\t\treturn \"four card\";\n\t\t}\n\t\t\n\t\tArrays.sort(cards);\n\t\tboolean straight = false; int cnt = 0, c = 0, d = 0;\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tcnt = 0;\n\t\t\tfor(int j = 0; j < 4; j++) {\n\t\t\t\tc = cards[(i+j)%5]; d = cards[(i+j+1)%5];\n\t\t\t\tif(abs(c-d) != 1 && abs(c-d) != 12) break;\n\t\t\t\tcnt++;\n\t\t\t\tif(abs(c-d) == 12 && cnt <= 4) break; \n\t\t\t}\n\t\t\tif(cnt == 4) {\n\t\t\t\tstraight = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(a == 3 && b == 2) {\n\t\t\treturn \"full house\";\n\t\t}\n\t\t\n\t\tif(straight) {\n\t\t\treturn \"straight\";\n\t\t}\n\t\t\n\t\tif(a == 3) {\n\t\t\treturn \"three card\";\n\t\t}\n\t\t\n\t\tif(a == 2 && b == 2) {\n\t\t\treturn \"two pair\";\n\t\t}\n\t\t\n\t\tif(a == 2) {\n\t\t\treturn \"one pair\";\n\t\t}\n\t\t\n\t\treturn \"null\";\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\twhile(read()) {\n\t\t\tSystem.out.println(solve());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport java.awt.geom.*;\nimport java.math.*;\n\npublic class Main {\n\n\tstatic final Scanner in = new Scanner(System.in);\n\tstatic final PrintWriter out = new PrintWriter(System.out,false);\n\n\tstatic void solve() {\n\t\tString[] s = in.next().split(\",\");\n\t\tint[] a = new int[5];\n\t\tfor (int i=0; i<5; i++) {\n\t\t\ta[i] = Integer.parseInt(s[i]);\n\t\t}\n\n\t\tArrays.sort(a);\n\t\tif ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\tout.println(\"four card\");\n\t\t} else if ((a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) || (a[0] == a[1] && a[2] == a[3] && a[3] == a[4])) {\n\t\t\tout.println(\"full house\");\n\t\t} else if ((a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4]) || (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)) {\n\t\t\tout.println(\"straight\");\n\t\t} else if ((a[0] == a[1] && a[1] == a[2]) || (a[2] == a[3] && a[3] == a[4]) || (a[1] == a[2] && a[2] == a[3])) {\n\t\t\tout.println(\"three card\");\n\t\t} else if ((a[0] == a[1] && a[2] == a[3]) || (a[0] == a[1] && a[3] == a[4]) || (a[1] == a[2] && a[3] == a[4])) {\n\t\t\tout.println(\"two pair\");\n\t\t} else if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) {\n\t\t\tout.println(\"one pair\");\n\t\t} else {\n\t\t\tout.println(\"null\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tlong start = System.currentTimeMillis();\n\n\t\twhile(in.hasNext()) solve();\n\t\tout.flush();\n\n\t\tlong end = System.currentTimeMillis();\n\t\t//trace(end-start + \"ms\");\n\t\tin.close();\n\t\tout.close();\n\t}\n\n\tstatic void trace(Object... o) { System.out.println(Arrays.deepToString(o));}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n\npublic class Main {\n\tprivate\tstatic\tBufferedReader\tbr = null;\n\n\tstatic {\n\t\tbr  = new BufferedReader(new InputStreamReader(System.in));\n\t}\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tint[]\tcard = null;\n\n\t\twhile ((card = parseCard()) != null) {\n\t\t\tjudge(card);\n\t\t}\n\t}\n\n\tprivate static void judge(int[] card) {\n\t\tint[]\taCnt = {1, 0, 0, 0, 0};\n\n\t\tArrays.sort(card);\n\n\t\tif (card[0] + 1 == card[1] && card[1] + 1 == card[2] && card[2] + 1 == card[3] && card[3] + 1 == card[4]) {\n\t\t\tSystem.out.println(\"straight\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13) {\n\t\t\tSystem.out.println(\"straight\");\n\t\t\treturn;\n\t\t}\n\n\t\tfor(int nLoop = 0, nTmp = 0; nLoop < card.length - 1; nLoop++) {\n\t\t\tnTmp += (card[nLoop] == card[nLoop+1]) ? 0 : 1;\n\t\t\taCnt[nTmp]++;\n\t\t}\n\n\t\t{\n\t\t\tint\tnFourCard  = 0;\n\t\t\tint\tnThreeCard = 0;\n\t\t\tint\tnOnePair   = 0;\n\n\t\t\tfor (int n = 0; n < aCnt.length && aCnt[n] != 0; n++) {\n\t\t\t\tif (aCnt[n] == 4) {\n\t\t\t\t\tnFourCard++;\n\t\t\t\t}\n\n\t\t\t\tif (aCnt[n] == 3) {\n\t\t\t\t\tnThreeCard++;\n\t\t\t\t}\n\n\t\t\t\tif (aCnt[n] == 2) {\n\t\t\t\t\tnOnePair++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (nFourCard == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if (nThreeCard == 1) {\n\t\t\t\tif (nOnePair == 1) {\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (nOnePair == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}\n\t\t\telse if (nOnePair == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static int[] parseCard() {\n\t\tint[]\tcard  = null;\n\t\tString\tstrIn = null;\n\n\t\tif ((strIn = parseStdin()) != null) {\n\t\t\tString[]\taN = strIn.split(\",\");\n\t\t\tcard = new int[5];\n\t\t\tfor (int n = 0; n < card.length; n++) {\n\t\t\t\tcard[n] = Integer.parseInt(aN[n]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn card;\n\t}\n\n\tprivate static String parseStdin() {\n\t\tString\tstrNum = null;\n\n\t\ttry {\n\t\t\tString line = br.readLine();\n\t\t\tif (line != null) {\n\t\t\t\tif (!line.isEmpty()) {\n\t\t\t\t\tstrNum = line;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {}\n\n\t\treturn strNum;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pari\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pari\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariCount++;\n        }\n      }\n    }\n    return pariCount == 3;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariCount++;\n        }\n      }\n    }\n    return pariCount == 4;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int currentCard = cardSet.get(0);\n    int chainCount = 0;\n    for (int i = 1; i < 5; i++) {\n      if (getAfterCard(currentCard) != cardSet.get(i)) {\n        break;\n      }\n      currentCard = cardSet.get(i);\n      chainCount++;\n    }\n    currentCard = cardSet.get(0);\n    for (int i = 4; i > 0; i--) {\n      if (getBeforCard(currentCard) != cardSet.get(i)) {\n        break;\n      }\n      currentCard = cardSet.get(i);\n      chainCount++;\n    }\n    return chainCount == 4;\n  }\n\n  private static int getBeforCard(int cardNum) {\n    if (cardNum == 1) {\n      return 13;\n    }\n    final int ret = cardNum - 1;\n    return ret;\n  }\n\n  private static int getAfterCard(int cardNum) {\n    if (cardNum == 13) {\n      return 1;\n    }\n    final int ret = cardNum + 1;\n    return ret;\n  }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main{\n    public static void main (String[] args) {\n\tScanner scan = new Scanner(System.in);\n\tString[] input;\n\tint[] hand = new int[15];\n\tint n, fourCard, threePair, twoPair;\n\tboolean straight;\n\twhile (scan.hasNext()) {\n\t    input = scan.nextLine().split(\",\");\n\t    for (int i = 0; i < 15; i++) {\n\t\thand[i] = 0;\n\t    }\n\t    fourCard = 0;\n\t    threePair = 0;\n\t    twoPair = 0;\n\t    straight = false;\n\t    for (int i = 0; i < 5; i++) {\n\t\tn = Integer.parseInt(input[i]);\n\t\thand[n]++;\n\t\tif (n == 1) {\n\t\t    hand[14]++;\n\t\t}\n\t    }\n\t    for (int i = 0; i < 14; i++) {\n\t\tif (hand[i] == 4) {\n\t\t    fourCard++;\n\t\t} else if (hand[i] == 3) {\n\t\t    threePair++;\n\t\t} else if (hand[i] == 2) {\n\t\t    twoPair++;\n\t\t}\n\t    }\n\t    if (fourCard == 1) {\n\t\tSystem.out.println(\"four card\");\n\t    } else if (threePair == 1 && twoPair == 1) {\n\t\tSystem.out.println(\"full house\");\n\t    } else if (threePair == 1 && twoPair == 0) {\n\t\tSystem.out.println(\"three card\");\n\t    } else if (twoPair == 2) {\n\t\tSystem.out.println(\"two pair\");\n\t    } else if (twoPair == 1) {\n\t\tSystem.out.println(\"one pair\");\n\t    } else {\n\t\tif (isStraight(hand)) {\n\t\t    System.out.println(\"straight\");\n\t\t} else {\n\t\t    System.out.println(\"null\");\n\t\t}\n\t    }\n\t}\n    }\n    static boolean isStraight (int[] hand) {\n\tint num = 15;\n\tint first = 1;\n\tfor (int i = 10; i < 25; i++) {\n\t    int card1 = hand[i % num];\n\t    int card2 = hand[(i + 1) % num];\n\t    int card3 = hand[(i + 2) % num];\n\t    int card4 = hand[(i + 3) % num];\n\t    int card5 = hand[(i + 4) % num];\n\t    if (card1 == 1 && card1 == card2 && card2 == card3 && card3 == card4 && card4 == card5) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.Arrays;\n\nclass Main{\nstatic int[] a=new int[5];\npublic static void main(String[] args) throws IOException{\nBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\nString line;\nwhile((line=br.readLine())!=null){\nString[] value=line.split(\",\");\na[0]=Integer.parseInt(value[0]);\na[1]=Integer.parseInt(value[1]);\na[2]=Integer.parseInt(value[2]);\na[3]=Integer.parseInt(value[3]);\na[4]=Integer.parseInt(value[4]);\nArrays.sort(a);\nif(a[1]==a[2]&&a[1]==a[3]&&a[1]==(a[4]|a[0])){\nSystem.out.println(\"four card\");\n}\nelse if((a[0]==a[1]&&a[0]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[3]==a[2]&&a[3]==a[4])){\nSystem.out.println(\"full house\");\n}\nelse if((a[0]==a[1]&&a[1]==a[2])||(a[1]==a[2]&&a[2]==a[3])||(a[2]==a[3]&&a[3]==a[4])){\nSystem.out.println(\"three card\");\n}\nelse if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4])){\nSystem.out.println(\"two pair\");\n}\nelse if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4])){\nSystem.out.println(\"one pair\");\n}\nelse if((a[0]+4==a[1]+3&&a[1]+3==a[2]+2&&a[2]+2==a[3]+1&&a[3]+1==a[4])||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\nSystem.out.println(\"straight\");\n}\nelse{\nSystem.out.println(\"null\");\n}\n}\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i == 2) {\n        pariCount++;\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\n\t\tString line;\n\t\tString[] data;\n\t\twhile (sc.hasNext() == true) {\n\t\t\tline = sc.nextLine();\n\t\t\t\n\t\t\tdata = line.split(\",\");\n\t\t\t\n\t\t\tint[] cards = new int[data.length];\n\t\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\t\tcards[i] = Integer.parseInt(data[i]);\n\t\t\t}\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\t\tint pre = 0;\n\t\t\tboolean straight = true;\n\t\t\t\n\t\t\tint[] point = new int[14];\n\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\tint tmp = cards[i];\n\t\t\t\tpoint[tmp]++;\n\t\t\t\t\n\t\t\t\tif (pre != 0) {\n\t\t\t\t\tif ((pre + 1) != tmp) {\n\t\t\t\t\t\tif ((pre != 1) || (tmp != 10)) straight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tint[] judge = new int[5];\n\t\t\tfor (int i = 0; i < point.length; i++) {\n\t\t\t\tjudge[point[i]]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (judge[4] == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if ((judge[2] == 1) && (judge[3] == 1)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (judge[1] == 5) {\n\t\t\t\tif (straight == true) System.out.println(\"straight\");\n\t\t\t\telse System.out.println(\"null\");\n\t\t\t} else if (judge[3] == 1) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (judge[2] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (judge[2] == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n        new Main().run();\n    }\n\tint[] hist;\n\tint four;\n\tint three;\n\tint two;\n\tpublic void run(){\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()){\n\t\t\thist = new int[14];\n\t\t\tString[] str = scan.next().split(\",\");\n\t\t\tfor(int i = 0;i < 5;i++){\n\t\t\t\thist[Integer.parseInt(str[i])]++;\n\t\t\t}\n\t\t\tfour = 0;\n\t\t\tthree = 0;\n\t\t\ttwo = 0;\n\t\t\tfor(int i = 1;i < 14;i++){\n\t\t\t\tswitch(hist[i]){\n\t\t\t\tcase 2:\n\t\t\t\t\ttwo++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthree++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tfour++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(four > 0){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(three > 0 && two > 0){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if(three > 0){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if(two > 1){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}else if(two > 0){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}else{\n\t\t\t\tif(hist[1] > 0 && hist[10] > 0 && hist[11] > 0 && hist[12] > 0 && hist[13] > 0){\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t}else{\n\t\t\t\t\tboolean fl = true;\n\t\t\t\t\tfor(int i = 1;i < 10;i++){\n\t\t\t\t\t\tif(hist[i] > 0 && hist[i+1] > 0 && hist[i+2] > 0 && hist[i+3] > 0 && hist[i+4] > 0){\n\t\t\t\t\t\t\tfl = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println((fl)?\"null\":\"straight\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tstatic Scanner sc = new Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tString[] str;\n\t\twhile(sc.hasNext()) {\n\t\t\tstr = sc.next().split(\",\");\n\t\t\tint[] hand = new int[13];\n\t\t\tint max = 0;\n\t\t\tboolean flag = false;\n\t\t\tint number = Integer.MIN_VALUE;\n\t\t\tint count = 0;\n\n\t\t\tArrays.fill(hand, 0);\n\n\t\t\t//???????????\\?????????\n\t\t\tfor(int $ = 0; $ < str.length; $++) {\n\t\t\t\tint num = Integer.parseInt(str[$]) - 1;\n\t\t\t\thand[num] += 1;\n\t\t\t\tmax = Math.max(max, hand[num]);\n\t\t\t}\n\n\t\t\tif(hand[0] == 1 && hand[12] == 1 && hand[11] == 1 && hand[10] == 1 &&hand[9] == 1) {\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\tfor(int $ = 0; $ < hand.length; $++) {\n\t\t\t\t\tif(hand[$] == 1 && ($ == number || number == Integer.MIN_VALUE)) {\n\t\t\t\t\t\tnumber = $ + 1;\n\t\t\t\t\t\tif(++count == 5) {\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArrays.sort(hand);\n\n\t\t\t//?????????????????????????????°???4????????¨???\n\t\t\tif(max == 4) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if(max == 3) {\n\t\t\t\tif(hand[hand.length - 2] == 2) {\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t}\n\t\t\t} else if(max == 2) {\n\t\t\t\tif(hand[hand.length - 2] == 2) {\n\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(flag) {\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1 && number[1]!=1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\n\npublic class Main{\n\tScanner sc=new Scanner(System.in);\n\n\tint INF=1<<28;\n\tdouble EPS=1e-9;\n\n\tint[] a;\n\n\tvoid run(){\n\t\ta=new int[13];\n\t\tsc.useDelimiter(\",|\\n\");\n\t\tfor(; sc.hasNext();){\n\t\t\tArrays.fill(a, 0);\n\t\t\tfor(int i=0; i<5; i++){\n\t\t\t\ta[sc.nextInt()-1]++;\n\t\t\t\t// debug(sc.nextInt());\n\t\t\t}\n\t\t\tsolve();\n\t\t}\n\t}\n\n\tvoid solve(){\n\t\tif(fourCard())\n\t\t\tprintln(\"four card\");\n\t\telse if(fullHouse())\n\t\t\tprintln(\"full house\");\n\t\telse if(straight())\n\t\t\tprintln(\"straight\");\n\t\telse if(threeCard())\n\t\t\tprintln(\"three card\");\n\t\telse if(twoPair())\n\t\t\tprintln(\"two pair\");\n\t\telse if(onePair())\n\t\t\tprintln(\"one pair\");\n\t\telse\n\t\t\tprintln(\"null\");\n\t}\n\n\tboolean fourCard(){\n\t\tfor(int x : a){\n\t\t\tif(x==4){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean fullHouse(){\n\t\tboolean f2=false, f3=false;\n\t\tfor(int x : a){\n\t\t\tf2|=x==2;\n\t\t\tf3|=x==3;\n\t\t}\n\t\treturn f2&&f3;\n\t}\n\n\tboolean straight(){\n\t\tfor(int i=0; i<10; i++){\n\t\t\tif(a[i]*a[i+1]*a[i+2]*a[i+3]*a[(i+4)%13]==1)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean threeCard(){\n\t\tfor(int x : a){\n\t\t\tif(x==3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean twoPair(){\n\t\tint c=0;\n\t\tfor(int x : a){\n\t\t\tif(x==2){\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\treturn c==2;\n\t}\n\n\tboolean onePair(){\n\t\tfor(int x : a){\n\t\t\tif(x==2){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tvoid debug(Object... os){\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tclass Hand {\n\t\tfinal String[] win = new String[] {\n\t\t\t\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"\n\t\t};\n\n\t\tint[] cards;\n\n\t\tpublic Hand(String s) {\n\t\t\tcards = new int[5];\n\t\t\tString[] ss = s.split(\",\");\n\t\t\tfor (int i = 0 ; i < 5 ; i++) cards[i] = Integer.parseInt(ss[i]);\n\t\t\tArrays.sort(cards);\n\t\t}\n\n\t\tpublic void display() {\n\t\t\tSystem.out.println(Arrays.toString(cards));\n\t\t}\n\n\t\tpublic int judge() {\n\t\t\tint[] temp = new int[5];\n\t\t\tint[] accum = new int[14];\n\t\t\tfor (int i = 0 ; i < 5 ; i++) {\n\t\t\t\ttemp[i] = cards[i] - cards[0];\n\t\t\t\taccum[temp[i]] += 1;\n\t\t\t}\n\t\t\tArrays.sort(accum);\n\t\t\tif (Arrays.binarySearch(accum, 4) >= 0) return 6;\n\t\t\tif (Arrays.binarySearch(accum, 3) >= 0) {\n\t\t\t\tif (Arrays.binarySearch(accum, 2) >= 0) return 5;\n\t\t\t\telse return 3;\n\t\t\t}\n\t\t\tif (Arrays.equals(temp, (new int[] {0,1,2,3,4}))\n\t\t\t\t|| Arrays.equals(temp, (new int[] {0,9,10,11,12}))) return 4;\n\t\t\tint count = 0;\n\t\t\tfor (int i = 1 ; i < 14 ; i++)\n\t\t\t\tif (accum[i] == 2) count++;\n\t\t\tswitch (count) {\n\t\t\tcase 1: return 1;\n\t\t\tcase 2: return 2;\n\t\t\tdefault: return 0;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tMain m = new Main();\n\n\t\tString line;\n\t\twhile ((line = sc.next()) != null) {\n\t\t\tHand hand = m.new Hand(line);\n\t\t\tSystem.out.println(hand.win[hand.judge()]);\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.StringTokenizer;\nimport java.util.Arrays;\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString buf;\n\n\t\ttry {\n\t\t\twhile ((buf = br.readLine())!=null) {\n\t\t\t\tStringTokenizer st = new StringTokenizer(buf,\",\");\n\t\t\t\tint card[] = new int[5];\n\t\t\t\tfor (int i=0;i<5;i++) {\n\t\t\t\t\tcard[i] = Integer.parseInt(st.nextToken());\n\t\t\t\t}\n\t\t\t\tArrays.sort(card);\n\t\t\t\tif (isFourCard(card)) System.out.println(\"four card\");\n\t\t\t\telse if (isFullHouse(card)) System.out.println(\"full house\");\n\t\t\t\telse if (isStraight(card)) System.out.println(\"straight\");\n\t\t\t\telse if (isThreeCard(card)) System.out.println(\"three card\");\n\t\t\t\telse if (isTwoPair(card)) System.out.println(\"two pair\");\n\t\t\t\telse if (isOnePair(card)) System.out.println(\"one pair\");\n\t\t\t\telse System.out.println(\"null\"); \n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static boolean isOnePair(int c[]) {\n\t\tif (c[0]==c[1]||c[1]==c[2]||c[2]==c[3]||c[3]==c[4]) return true;\n\t\telse return false;\n\t}\n\n\tpublic static boolean isTwoPair(int c[]) {\n\t\tif (c[0]==c[1]) {\n\t\t\tif (c[2]==c[3]||c[3]==c[4]) return true;\n\t\t} else if (c[1]==c[2]) {\n\t\t\tif (c[3]==c[4]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isThreeCard(int c[]) {\n\t\tfor (int i=0;i<3;i++) {\n\t\t\tif (c[i]==c[i+1]&&c[i+1]==c[i+2]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isStraight(int c[]) {\n\t\tif (c[0]==1&&c[1]==10) {\n\t\t\tif (c[2]==11&&c[3]==12&&c[4]==13) return true;\n\t\t}\n\t\tfor (int i=0;i<4;i++) {\n\t\t\tif (c[i]+1==c[i+1]) continue;\n\t\t\telse return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static boolean isFullHouse(int c[]) {\n\t\tif (c[0]==c[1]) {\n\t\t\tif (c[2]==c[3]&&c[3]==c[4]) return true;\n\t\t} else if (c[3]==c[4]) {\n\t\t\tif (c[0]==c[1]&&c[1]==c[2]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isFourCard(int c[]) {\n\t\tif (c[0]==c[1]&&c[2]==c[3]&&c[0]==c[2]) return true;\n\t\telse if (c[1]==c[2]&&c[3]==c[4]&&c[1]==c[3]) return true;\n\t\telse return false;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n    Main(){\n\tScanner sc = new Scanner(System.in);\n\n\twhile(sc.hasNext()){\n\t    String[] str = (sc.next()).split(\",\");\n\t    int[] hand = new int[5];\n\t    for(int i = 0; i < 5; i++)\n\t\thand[i] = Integer.parseInt(str[i]);\n\t    Arrays.sort(hand);\n\t    String res;\n\n\t    if(straight(hand)) res = \"straight\";\n\t    else res = func(hand);\n\n\t    System.out.println(res);\n\t}\n    }\n\n    String func(int[] hand){\n\tint[] num = new int[14];\n\tfor(int i = 0; i < 5; i++) num[hand[i]]++;\n\tArrays.sort(num);\n\t\n\tif(num[13] == 4) return \"four card\";\n\tif(num[13] == 3)\n\t    return (num[12] == 2)? \"full house\" : \"three card\";\n\tif(num[13] == 2)\n\t    return (num[12] == 2)? \"two pair\" : \"one pair\";\n\n\treturn \"null\";\n    }\n\n    boolean straight(int[] hand){\n\tboolean f;\n\tif(hand[0] == 1){\n\t    f = true;\n\t    for(int i = 1; i < 5 && f; i++)\n\t\tf = (hand[i] == 9+i);\n\n\t    if(f) return f;\n\t}\n\tf = true;\n\tfor(int i = 1; i < 5 && f; i++)\n\t    f = (hand[i] == (hand[0]+i));\n\n\treturn f;\n    }\n\n    public static void main(String[] args){\n\tnew Main();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 2) {\n        pariCount++;\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\tpublic static void main(String[] args) throws NumberFormatException,\n\t\t\tIOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in));\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tString line;\n\t\twhile ((line = reader.readLine()) != null) {\n\t\t\tif(line.isEmpty()){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tStringTokenizer tokenizer = new StringTokenizer(line,\",\");\n\t\t\tint[] num = new int[5];\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tnum[i] = Integer.parseInt(tokenizer.nextToken());\n\t\t\t}\n\n\t\t\tArrays.sort(num);\n\t\t\tint sum = 0;\n\t\t\tboolean straight = true;\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tint j = num[i + 1] - num[i];\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tif (j != 1 && j != 9) {\n\t\t\t\t\t\tstraight = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (j != 1) {\n\t\t\t\t\t\tstraight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (j == 0) {\n\t\t\t\t\tsum += (i + 1) * (i + 2) + 1;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (straight) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else {\n\t\t\t\tswitch (sum) {\n\t\t\t\tcase 23:\n\t\t\t\tcase 41:\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\tcase 37:\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 10:\n\t\t\t\tcase 20:\n\t\t\t\tcase 34:\n\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 16:\n\t\t\t\tcase 24:\n\t\t\t\tcase 28:\n\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0:\n\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n\n    /**\n     * ?????????????????????\n     */\n    public static void main(String[] args) throws IOException {\n\n        // ??\\????????????????????????MAX50??¶??¨???????????????????????§????????¨????????????????????§OK???\n        List<Hand> hands = readHands();\n\n        // 1??¶??????????????????\n        for (Hand hand : hands) {\n\n            // ??????????????????\n            String handName = hand.judge();\n\n            // ?????????????????????\n            System.out.println(handName);\n\n        }\n    }\n\n    /**\n     * ?¨??????\\???????????????????????????1??????????????????????????????????????¨???????????´?????????\n     *\n     * @return ???????????????\n     */\n    protected static List<Hand> readHands() throws IOException {\n\n        // ????????????????????¨?????????\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                System.in));\n\n        List<Hand> hands = new ArrayList<Hand>();\n        String line = null;\n        // ?¨??????\\?????????1???????????????????????????????????????\n        while ((line = reader.readLine()) != null) {\n            String[] values = line.split(\",\");\n\n            // ??????????????°??????????????????\n            int[] cards = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                cards[i] = Integer.parseInt(values[i]);\n            }\n\n            // ??????????????????????????????????????????????????????\n            hands.add(new Hand(cards));\n        }\n\n        // ????????????????????????????????????\n        if (reader != null) {\n            reader.close();\n        }\n\n        return hands;\n    }\n\n    /**\n     * ???????????¨????????????\n     */\n    static class Hand {\n\n        /** ??????????????± */\n        int[] cards;\n\n        /**\n         * ?????°??§???????????????????????????????????????\n         *\n         * @param cards ?????????\n         */\n        public Hand(final int[] cards) {\n            // ?????????????????¨???????????????\n            this.cards = new int[5];\n            System.arraycopy(cards, 0, this.cards, 0, cards.length);\n        }\n\n        /**\n         * ??????????????????????????????\n         *\n         * @return ???????????????????????´??????null????????????\n         */\n        public String judge() {\n\n            // ?????°?????????????????????\n            int[] numberOfCards = new int[14]; // ??????????????????0????????¨?????????\n            for (int card : cards) {\n                numberOfCards[card]++;\n            }\n\n            // ?????°????????§????????§??????????????¢???\n            int pair = 0;\n            int threeCard = 0;\n            int fourCard = 0;\n            for (int number : numberOfCards) {\n                switch (number) {\n                case 2:\n                    pair++;\n                    break;\n                case 3:\n                    threeCard++;\n                    break;\n                case 4:\n                    fourCard++;\n                    break;\n                }\n            }\n\n            // ??????????????????\n            if (fourCard > 0) {\n                return \"four card\";\n            }\n\n            // ???????????????\n            if (pair > 0 && threeCard > 0) {\n                return \"full house\";\n            }\n\n            // ????????¬?????????????????§??????????????§????????¬??????????????§????????????\n            int[] straightJudge = new int[5];\n            System.arraycopy(cards, 0, straightJudge, 0, cards.length);\n            Arrays.sort(straightJudge);\n\n            // ??????????????????5??£?¶???§????????§?????????OK\n            int sequenceCount = 0;\n            for (int i = 1; i < straightJudge.length; i++) {\n                if ((straightJudge[i] - straightJudge[i - 1]) == 1) {\n                    sequenceCount++;\n                }\n            }\n            if (sequenceCount == 4) {\n                return \"straight\";\n            }\n\n            // A??????????????????????????¬??????????????\\???????????????\n            if (straightJudge[0] == 1 && straightJudge[1] == 10 && straightJudge[2] == 11 && straightJudge[3] == 12\n                    && straightJudge[4] == 13) {\n                return \"straight\";\n            }\n\n            // ??????????????????\n            if (threeCard > 0) {\n                return \"three card\";\n            }\n\n            // ???????????¢\n            if (pair > 1) {\n                return \"two pair\";\n            }\n\n            if (pair > 0) {\n                return \"one pair\";\n            }\n            return null;\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Main {\n\n\tScanner sc;\n\n\tprivate Main(){\n\t\tsc = new Scanner( System.in );\n\t}\n\n\tprivate void run(){\n\t\twhile( sc.hasNext() ){\n\t\t\tString str = sc.next();\n\t\t\tint[] cards = new int[ 5 ];\n\t\t\tString[] cardsStr = str.split( \",\" );\n\t\t\tfor( int i = 0; i < cardsStr.length; i++ ){\n\t\t\t\tcards[ i ] = Integer.parseInt( cardsStr[ i ] );\n\t\t\t}\n\t\t\tint[] hist = new int[ 14 ];\n\t\t\tfor( int i = 0; i < hist.length; i++ ){\n\t\t\t\thist[ i ] = 0;\n\t\t\t}\n\t\t\tfor( int card : cards ){\n\t\t\t\thist[ card ] ++;\n\t\t\t}\n\t\t\tArrays.sort( cards ); // Very Important!!!!!!\n\n\t\t\t/* four card */\n\t\t\tif( this.checkSameCard( hist, 4 ) ){\n\t\t\t\tSystem.out.println( \"four card\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* full house */\n\t\t\tif( this.checkFullHouse( cards ) ){\n\t\t\t\tSystem.out.println( \"full house\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* straight */\n\t\t\tif( this.checkStraight( cards ) ){\n\t\t\t\tSystem.out.println( \"straight\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* three card */\n\t\t\tif( this.checkSameCard( hist, 3 ) ){\n\t\t\t\tSystem.out.println( \"three card\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* two pair */\n\t\t\tif( this.checkTwoPair( hist ) ){\n\t\t\t\tSystem.out.println( \"two pair\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* one pair */\n\t\t\tif( this.checkSameCard( hist, 2 ) ){\n\t\t\t\tSystem.out.println( \"one pair\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tSystem.out.println( \"null\" );\n\t\t}\n\t}\n\n\tprivate boolean checkSameCard( int[] hist, int n ){\n\n\t\tfor( int i = 1; i <= 13; i++ ){\n\t\t\tif( hist[ i ] == n ){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean checkFullHouse( int[] cards ){\n\t\tif(\n\t\t\t\tcards[ 0 ] == cards[ 1 ] &&\n\t\t\t\t( cards[ 1 ] == cards[ 2 ] || cards[ 2 ] == cards[ 3 ] ) &&\n\t\t\t\tcards[ 3 ] == cards[ 4 ]\n\t\t){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean checkStraight( int[] cards ){\n\t\tif(\n\t\t\t\t( cards[ 0 ] + 1 == cards[ 1 ] || cards[ 0 ] + 9 == cards[ 1 ] ) &&\n\t\t\t\tcards[ 1 ] + 1 == cards[ 2 ] &&\n\t\t\t\tcards[ 2 ] + 1 == cards[ 3 ] &&\n\t\t\t\tcards[ 3 ] + 1 == cards[ 4 ]\n\t\t){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean checkTwoPair( int[] hist ){\n\t\tint counter = 0;\n\t\tfor( int i = 1; i <= 13; i++ ){\n\t\t\tif( hist[ i ] == 2 ){\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\treturn ( counter == 2 ) ? true : false ;\n\t}\n\n\t/* Application Main Entry Point. */\n\tpublic static void main( String[] args ){\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = null;\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tString[] splited = line.trim().split(\",\");\n\n\t\t\tint[] cards = new int[5];\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tcards[i] = Integer.parseInt(splited[i]);\n\t\t\t}\n\t\t\tArrays.sort(cards);\n\n\t\t\tint same = 0;\n\t\t\tint pear = 0;\n\t\t\tboolean straight = true;\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tif (cards[i] != cards[i + 1] - 1\n\t\t\t\t\t\t&& cards[0] != cards[1] - 9) {\n\t\t\t\t\tstraight = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tfor (int j = i + 1; j < 5; j++) {\n\t\t\t\t\tif (cards[i] == cards[j])\n\t\t\t\t\t\tsame++;\n\t\t\t\t}\n\t\t\t\ti += same;\n\t\t\t\tif (pear == 0) {\n\t\t\t\t\tpear = same;\n\t\t\t\t\tsame = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (straight == true) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (same != 0) {\n\t\t\t\tif (same == pear)\n\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else {\n\t\t\t\tswitch (pear) {\n\t\t\t\tcase 1:\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0:\n\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc= new Scanner(System.in);\n        label:while(sc.hasNext()){\n            String str = sc.next();\n            String[] s = str.split(\",\");\n            int[] a = new int[5];\n            for(int i = 0; i < 5;i++){\n                a[i]=Integer.parseInt(s[i]);\n            }\n            Arrays.sort(a);\n            if(a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3]){\n                System.out.println(\"four card\");\n                continue;\n            }\n            if(a[1]==a[2]&&a[3]==a[2]&&a[4]==a[3]){\n                System.out.println(\"four card\");\n                continue;\n            }\n            if(a[0]==a[1]&&a[0]==a[2] && a[3]==a[4]){\n                System.out.println(\"full house\");\n                continue;\n            }\n            if(a[0]==a[1] && a[2]==a[3] && a[2] == a[4]){\n                System.out.println(\"hull house\");\n                continue;\n            }\n            if(a[0]+1==a[1]&&a[0]+2==a[2]&&a[0]+3==a[3]&&a[0]+4==a[4]){\n                System.out.println(\"straight\");\n                continue;\n            }\n            if(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13){\n                System.out.println(\"straight\");\n                continue;\n            }\n            if(a[0]==a[1] && a[0]==a[2] || a[1]==a[2]&&a[1]==a[3] || \n                    a[2]==a[3] && a[2] == a[4]){\n                System.out.println(\"three card\");\n                continue;\n            }\n            for(int i = 0; i < 3;i++){\n                if(a[i]==a[i+1]){\n                    for(int j = i+3; j < 5;j++){\n                        if(a[j]==a[j-1]){\n                            System.out.println(\"two pair\");\n                            continue label;\n                        }\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++){\n                if(a[i]==a[i+1]){\n                    System.out.println(\"one pair\");\n                    continue label;\n                }\n            }\n            System.out.println(\"null\");\n                 \n        }\n    }\n \n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n    Main(){\n\tScanner sc = new Scanner(System.in);\n\n\twhile(sc.hasNext()){\n\t    String[] str = (sc.next()).split(\",\");\n\t    int[] hand = new int[5];\n\t    for(int i = 0; i < 5; i++)\n\t\thand[i] = Integer.parseInt(str[i]);\n\t    Arrays.sort(hand);\n\t    String res = \"null\";\n\n\t    if(straight(hand)) res = \"straight\";\n\t    else if(fourcard(hand)) res = \"four card\";\n\t    else if(fullhouse(hand)) res = \"full house\";\n\t    else res = paircard(hand);\n\n\t    System.out.println(res);\n\t}\n    }\n\n    boolean straight(int[] hand){\n\tboolean f;\n\tif(hand[0] == 1){\n\t    f = true;\n\t    for(int i = 1; i < 5 && f; i++)\n\t\tf = (hand[i] == 9+i);\n\n\t    if(f) return f;\n\t}\n\tf = true;\n\tfor(int i = 1; i < 5 && f; i++)\n\t    f = (hand[i] == (hand[0]+i));\n\n\treturn f;\n    }\n\n    boolean fourcard(int[] hand){\n\tboolean f = true;\n\n\tfor(int i = 1; i < 4 && f; i++)\n\t    f = (hand[0] == hand[i]);\n\tif(f) return f;\n\n\tf = true;\n\tfor(int i = 2; i < 5 && f; i++)\n\t    f = (hand[1] == hand[i]);\n\n\treturn f;\n    }\n\n    boolean fullhouse(int[] hand){\n\tif(hand[0] == hand[1] && hand[2] == hand[3] && hand[2] == hand[4]) return true;\n\tif(hand[0] == hand[1] && hand[0] == hand[2] && hand[3] == hand[4]) return true;\n\n\treturn false;\n    }\n\n    String paircard(int[] hand){\n\tboolean f;\n\tfor(int i = 0; i < 3; i++){\n\t    f = true;\n\t    for(int j = 1; j < 3 && f; j++)\n\t\tf = (hand[i] == hand[i+j]);\n\t    if(f) return \"three card\";\n\t}\n\n\tfor(int i = 0; i < 1; i++)\n\t    if(hand[i] == hand[i+1])\n\t\tfor(int j = i+2; j < 4; j++)\n\t\t    if(hand[j] == hand[j+1]) return \"two pair\";\n\n\tfor(int i = 0; i < 4; i++)\n\t    if(hand[i] == hand[i+1]) return \"one pair\";\n\n\treturn \"null\";\n    }\n    public static void main(String[] args){\n\tnew Main();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\n    /** データセットの区切り文字 */\n    private static final String DELIMITER = \",\";\n\n    /** ワンペア */\n    private static final String ONE_PAIR = \"one pair\";\n\n    /** ツーペア */\n    private static final String TWO_PAIR = \"two pair\";\n\n    /** スリーカード */\n    private static final String THREE_CARD = \"three card\";\n\n    /** ストレート */\n    private static final String STRAIGHT = \"straight\";\n\n    /** フルハウス */\n    private static final String FULL_HOUSE = \"full house\";\n\n    /** フォーカード */\n    private static final String FOUR_CARD = \"four card\";\n\n    /**\n     * メインメソッド\n     *\n     * @param args\n     */\n    public static void main(String[] args) {\n        // ローカルテスト用。提出時は\"System.in\"に修正。\n        // try (Scanner scanner = new Scanner(new File(\n        // \"D:/Temp/AOJ/0038_PokerHand.txt\"))) {\n        try (Scanner scanner = new Scanner(System.in)) {\n            while (scanner.hasNextLine()) {\n                System.out.println(judgeHand(scanner.nextLine()\n                        .split(DELIMITER)));\n            }\n        } catch (Exception e) {\n            // 対応しない。\n        }\n    }\n\n    /**\n     * 役を判定する。\n     *\n     * @param cards データセット1行を格納した配列\n     * @return 判定結果\n     */\n    private static String judgeHand(String[] cards) {\n        Map<String, Integer> hands = readHands(cards);\n\n        if (hands.containsValue(4)) {\n            return FOUR_CARD;\n        }\n\n        if (hands.containsValue(3) && hands.containsValue(2)) {\n            return FULL_HOUSE;\n        }\n\n        if (hands.containsValue(3)) {\n            return THREE_CARD;\n        }\n\n        int pairs = countPairs(hands);\n\n        if (pairs == 2) {\n            return TWO_PAIR;\n        } else if (pairs == 1) {\n            return ONE_PAIR;\n        }\n\n        // ストレートが成立するときは他の役が成立しないので、最後に判定。\n        if (isStraight(hands)) {\n            return STRAIGHT;\n        }\n\n        return null;\n    }\n\n    /**\n     * 手札のカードを解析する。\n     *\n     * @param cards 手札5枚を格納した配列\n     * @return keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     */\n    private static Map<String, Integer> readHands(String[] cards) {\n        Map<String, Integer> result = new HashMap<String, Integer>();\n\n        for (String card : cards) {\n            int counter = result.containsKey(card) ? result.get(card) + 1 : 1;\n            result.put(card, counter);\n        }\n\n        return result;\n    }\n\n    /**\n     * ペアの組数を数える。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ペアの組数\n     */\n    private static int countPairs(Map<String, Integer> handsMap) {\n        int pairCounter = 0;\n\n        for (Map.Entry<String, Integer> entry : handsMap.entrySet()) {\n            if (entry.getValue() == 2) {\n                pairCounter++;\n            }\n        }\n\n        return pairCounter;\n    }\n\n    /**\n     * ストレートの役が成立するか判定する。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ストレートが成立する場合に{@code true}、それ以外の場合に{@code false}\n     */\n    private static boolean isStraight(Map<String, Integer> handsMap) {\n\n        int[] hands = new int[5];\n\n        int counter = 0;\n        for (String hand : handsMap.keySet()) {\n            hands[counter++] = Integer.parseInt(hand);\n        }\n\n        Arrays.sort(hands);\n\n        // 1ずつインクリメントしない組み合わせは1つのみなので先にチェック。\n        if (Arrays.equals(new int[] { 1, 10, 11, 12, 13 }, hands)) {\n            return true;\n        }\n\n        for (int i = 0; i < hands.length - 1; i++) {\n            if (hands[i] + 1 != hands[i + 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\n\npublic class Main{\n\tpublic static void main(String[] args) throws IOException{\n\t\tScanner stdIn = null;\n\t\tList<String> result = new ArrayList<String>();\n\t\t\n\t\ttry{\n\t\t\tstdIn = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t\twhile( stdIn.hasNext() ){\n\t\t\t\tString str = stdIn.next();\n\t\t\t\tString[] s = str.split(\",\");\n\t\t\t\tint[] card = new int[14];\n\t\t\t\tfor(int i = 0; i < s.length; i++){\n\t\t\t\t\tcard[Integer.parseInt(s[i])-1]++;\n\t\t\t\t}\n\t\t\t\tcard[13] = card[0];\n\t\t\t\tint zero = 0;\n\t\t\t\tint max = 0;\n\t\t\t\tint countMax = 1;\n\t\t\t\tint count = 1;\n\t\t\t\tfor(int i = 0; i < 13; i++){\n\t\t\t\t\tif( card[i] == 0 ){\n\t\t\t\t\t\tzero++;\n\t\t\t\t\t}\n\t\t\t\t\tif( card[i] > max ){\n\t\t\t\t\t\tmax = card[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( max == 1 ){\n\t\t\t\t\tfor(int i = 0; i < 13; i++){\n\t\t\t\t\t\tif( card[i] == 1 && card[i+1] == 1 ){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tif( countMax < count ){\n\t\t\t\t\t\t\t\tcountMax = count;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( card[i] == 0 ){\n\t\t\t\t\t\t\tcount = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( max == 4 ){\n\t\t\t\t\t result.add(\"four card\");\n\t\t\t\t} else if( max == 3 ){\n\t\t\t\t\tif( zero == 11 ){\n\t\t\t\t\t\tresult.add(\"full house\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.add(\"three card\");\n\t\t\t\t\t}\n\t\t\t\t} else if( max == 2 ){\n\t\t\t\t\tif( zero == 10 ){\n\t\t\t\t\t\tresult.add(\"two pair\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.add(\"one pair\");\n\t\t\t\t\t}\n\t\t\t\t} else if( countMax == 5 ){\n\t\t\t\t\tresult.add(\"straight\");\n\t\t\t\t} else {\n\t\t\t\t\tresult.add(\"null\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(String str : result){\n\t\t\t\tSystem.out.println(str);\n\t\t\t}\n\t\t} finally {\n\t\t\tif( stdIn != null ){\n\t\t\t\tstdIn.close();\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pari\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pari\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariCount++;\n        }\n      }\n    }\n    return pariCount == 3;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariCount++;\n        }\n      }\n    }\n    return pariCount == 4;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.lang.reflect.Array;\nimport java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()) {\n\t\t\tString[] strArr = in.nextLine().split(\",\");\n\t\t\tList<Integer> intArr = new ArrayList<>();\n\t\t\tfor (int i = 0; i < strArr.length; i++) {\n\t\t\t\tintArr.add(Integer.parseInt(strArr[i]));\n\t\t\t}\n\t\t\tsolve(intArr);\n\t\t}\n\t}\n\tpublic static void solve(List<Integer> hands) {\n\t\tCollections.sort(hands);\n\t\tint ans = 0;\n\t\tint[] cards = new int[15];\n\t\tfor(int i=0;i<hands.size();i++) {\n\t\t\tcards[hands.get(i)]++;\n\t\t}\n\t\tint pairs = 0;\n\t\tint max = 0;\n\t\tfor(int i=0;i<cards.length;i++) {\n\t\t\tmax = Math.max(max, cards[i]);\n\t\t\tif(cards[i] == 2) pairs++;\n\t\t}\n\n\t\t// ?????????A\n\t\tboolean streight = false;\n\t\tif(hands.get(0) == 1) {\n\t\t\tif(hands.get(1) == 2 && hands.get(2) == 3 && hands.get(3) == 4 && hands.get(4) == 5) streight=true;\n\t\t\tif(hands.get(1) == 10 && hands.get(2) == 11 && hands.get(3) == 12 && hands.get(4) == 13) streight=true;\n\t\t} else {\n\t\t\tstreight = true;\n\t\t\tfor(int i=1;i<hands.size();i++) {\n\t\t\t\tif(hands.get(i) - hands.get(i-1) != 1) {\n\t\t\t\t\tstreight = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(max == 4) {\n\t\t\tSystem.out.println(\"four card\");\n\t\t} else if(max == 3 && pairs == 1) {\n\t\t\tSystem.out.println(\"full house\");\n\t\t} else if(streight) {\n\t\t\tSystem.out.println(\"straight\");\n\t\t} else if(max == 3) {\n\t\t\tSystem.out.println(\"three card\");\n\t\t} else if(pairs == 2) {\n\t\t\tSystem.out.println(\"two pair\");\n\t\t} else if(pairs == 1) {\n\t\t\tSystem.out.println(\"one pair\");\n\t\t} else {\n\t\t\tSystem.out.println(\"null\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in).useDelimiter(\"(,|\\r\\n|\\r|\\n)\");\n\t\tint[] c = new int[14];\n\t\tint[] n = new int[5];\n\t\twhile (sc.hasNextInt()) {\n\t\t\tfor (int i = 0; i < 14; i++)\n\t\t\t\tc[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\tn[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++){\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tc[a - 1]++;\n\t\t\t}\n\t\t\tfor (int i = 0; i < 13; i++)\n\t\t\t\tn[c[i]]++;\n\t\t\tc[13] = c[0];\n\t\t\tint j = 13;\n\t\t\twhile (j > 3 && c[j] <= 0)\n\t\t\t\tj--;\n\t\t\tif (n[4] > 0) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if (n[3] > 0 && n[2] > 0) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (j > 3 && c[j] >0 &&c[j - 1] > 0 && c[j - 2] > 0 && c[j - 3] > 0 && c[j - 4] > 0) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (n[3] > 0) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (n[2] > 1) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (n[2] > 0) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic Scanner sc = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\n\t\twhile (sc.hasNext()) {\n\t\t\tString str = sc.next();\n\t\t\tString[] st = str.split(\",\");\n\t\t\tint[] stn = new int[st.length];\n\t\t\tint[] num = new int[13];\n\t\t\tString ans = \"null\";\n\n\t\t\tArrays.fill(num, 0);\n\n\t\t\t// ??????????????°????????????\n\t\t\tfor (int i = 0; i < st.length; i++) {\n\t\t\t\tstn[i] = Integer.parseInt(st[i]);\n\t\t\t}\n\n\t\t\t// ??°?????????????????????\n\t\t\tfor (int i = 0; i < stn.length; i++) {\n\n\t\t\t\tnum[stn[i] - 1]++;\n\n\t\t\t}\n\n\t\t\t// ??????\n\t\t\t// ???????????¢\n\t\t\tif (maxone(num) == 2 && maxtwo(num) == 1) {\n\t\t\t\tans = \"one pair\";\n\t\t\t}\n\t\t\t// ???????????¢\n\t\t\telse if (maxone(num) == 2 && maxtwo(num) == 2) {\n\t\t\t\tans = \"two pair\";\n\t\t\t}\n\t\t\t// ??????????????¢\n\t\t\telse if (maxone(num) == 3 && maxtwo(num) == 1) {\n\t\t\t\tans = \"three card\";\n\t\t\t}\n\t\t\t// ???????????????\n\t\t\telse if (maxone(num) == 3 && maxtwo(num) == 2) {\n\t\t\t\tans = \"hull house\";\n\t\t\t}\n\t\t\t// ??????????????????\n\t\t\telse if (maxone(num) == 4) {\n\t\t\t\tans = \"four card\";\n\t\t\t}\n\t\t\t// ????????¬??????\n\t\t\telse {\n\t\t\t\tfor (int i = 0; i < 9; i++) {\n\t\t\t\t\tif (num[i] == 1 && num[i + 1] == 1 && num[i + 2] == 1 && num[i + 3] == 1 && num[i + 4] == 1) {\n\t\t\t\t\t\tans = \"straight\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (num[9] == 1 && num[10] == 1 && num[11] == 1 && num[12] == 1 && num[0] == 1) {\n\t\t\t\t\tans = \"straight\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n\n\t// ??°????????????????????§????????????\n\tpublic static int maxone(int[] num) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < num.length; i++) {\n\t\t\tif (max < num[i]) {\n\t\t\t\tmax = num[i];\n\t\t\t}\n\n\t\t}\n\t\treturn max;\n\t}\n\n\t// ??°???????????????2??????????????§?????°?????????\n\tpublic static int maxtwo(int[] num) {\n\t\tint max1 = 0;\n\t\tint max2 = 0;\n\t\tif (num[0] > num[1]) {\n\t\t\tmax1 = num[0];\n\t\t\tmax2 = num[1];\n\t\t} else {\n\t\t\tmax1 = num[1];\n\t\t\tmax2 = num[0];\n\t\t}\n\t\tfor (int i = 2; i < num.length; i++) {\n\t\t\tif (max1 < num[i]) {\n\t\t\t\tmax2 = max1;\n\t\t\t\tmax1 = num[i];\n\t\t\t} else if (max2 < num[i]) {\n\t\t\t\tmax2 = num[i];\n\t\t\t}\n\t\t}\n\t\treturn max2;\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Main{\n\t\n\tMap<Integer, Integer> number_of_cards;\n\t\n\tPokerHand(int... cards){\n\t\tthis.number_of_cards = new HashMap<Integer, Integer>();\n\t\tfor(int c = 1; c <= 13; c++) this.number_of_cards.put(c, 0);\n\t\tfor(int i: cards) this.number_of_cards.put(i, this.number_of_cards.get(i) + 1);\n\t}\n\t\n\tPoker judge() {\n\t\t//onepair, twopair, threecard, fourcard, fullhouse\n\t\tint num_pair = 0;\n\t\tint num_three = 0;\n\t\tint num_four = 0;\n\t\tfor(Map.Entry<Integer, Integer> e: this.number_of_cards.entrySet()) {\n\t\t\tif(e.getValue() == 2) num_pair++;\n\t\t\telse if(e.getValue() == 3) num_three++;\n\t\t\telse if(e.getValue() == 4) num_four++;\n\t\t}\n\t\t\n\t\t//straight\n\t\tboolean straight = false;\n\t\tout: for(int c = 1; c <= 9; c++) {\n\t\t\tfor(int i = c; i < c+5; i++) {\n\t\t\t\tif(this.number_of_cards.get(i) != 1) continue out;\n\t\t\t}\n\t\t\tstraight = true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//straight 10 J Q K A\n\t\tout: if(this.number_of_cards.get(1) == 1) {\n\t\t\tfor(int c = 10; c <= 13; c++) {\n\t\t\t\tif(this.number_of_cards.get(c) != 1) break out;\n\t\t\t}\n\t\t\tstraight = true;\n\t\t}\n\t\t\n\t\t//judge\n\t\tif(num_four == 1) return Poker.FOURCARDS;\n\t\telse if(num_three == 1 && num_pair == 1) return Poker.FULLHOUSE;\n\t\telse if(straight) return Poker.STRAIGHT;\n\t\telse if(num_three == 1) return Poker.THREECARDS;\n\t\telse if(num_pair == 2) return Poker.TWOPAIR;\n\t\telse if(num_pair == 1) return Poker.ONEPAIR;\n\t\telse return Poker.NULL;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNextLine()) {\n\t\t\tString line = sc.nextLine();\n\t\t\tScanner scstr = new Scanner(line);\n\t\t\tscstr.useDelimiter(\",\");\n\t\t\t\n\t\t\tint[] cards = new int[5];\n\t\t\tfor(int i = 0; i < cards.length; i++) {\n\t\t\t\tcards[i] = scstr.nextInt();\n\t\t\t}\n\t\t\tscstr.close();\n\t\t\t\n\t\t\tSystem.out.println(new PokerHand(cards).judge());\n\t\t\tscstr.close();\n\t\t}\n\t\tsc.close();\n\t}\n\t\n}\n\n\n\nenum Poker{\n\tNULL(\"null\"), ONEPAIR(\"one pair\"), TWOPAIR(\"two pair\"), THREECARDS(\"three card\"), \n\tSTRAIGHT(\"straight\"), FULLHOUSE(\"full house\"), FOURCARDS(\"four card\");\n\t\n\tString name;\n\t\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n\t\n\tPoker(String str) {\n\t\tthis.name = str;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\nimport java.util.*;\n \npublic class Main {\n    Scanner sc = new Scanner(System.in);\n \n    public static void main(String[] args) {\n        new Main(); \n    }\n \n    public Main() {\n    \twhile(sc.hasNext()){\n    \t\tnew aoj0038().doIt();\n    \t}\n    }\n    class aoj0038{\n    \tString check(int cnt[]){\n    \t\tif(cnt[2] == 1)return \"four card\";\n    \t\telse if(cnt[1] == 1 && cnt[0] == 1)return \"full house\";\n    \t\telse if(cnt[1] == 1)return \"three card\";\n    \t\telse if(cnt[0] == 2)return \"two pair\";\n    \t\telse if(cnt[0] == 1)return \"one pair\";\n    \t\treturn \"null\";\n    \t}\n    \tvoid doIt(){\n    \t\tint a[] = new int [18];\n    \t\tint cnt[] = new int [3];\n    \t\tboolean st = true;\n    \t\tString str[] = sc.next().split(\",\");\n    \t\tfor(int i = 0;i < 5;i++){\n    \t\t\ta[Integer.parseInt(str[i]) - 1]++;\n    \t\t}\n    \t\tfor(int i = 0;i < 13;i++){\n    \t\t\tif(a[i] == 2)cnt[0]++;\n    \t\t\telse if(a[i] == 3)cnt[1]++;\n    \t\t\telse if(a[i] == 4)cnt[2]++;\n    \t\t}\n    \t\tfor(int i = 0;i < 13;i++){\n    \t\t\tif(a[i] == 1 && a[i+1] == 1 && a[i+2] == 1\n    \t\t\t\t\t&& a[i+3] == 1 && a[(i+4)%13] == 1){\n    \t\t\t\tSystem.out.println(\"straight\");\n    \t\t\t\tst = false;\n    \t\t\t}\n    \t\t}\n    \t\tif(st)System.out.println(check(cnt));\n    \t}\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Main{\n\t\n\tMap<Integer, Integer> number_of_cards;\n\t\n\tMain(int... cards){\n\t\tthis.number_of_cards = new HashMap<Integer, Integer>();\n\t\tfor(int c = 1; c <= 13; c++) this.number_of_cards.put(c, 0);\n\t\tfor(int i: cards) this.number_of_cards.put(i, this.number_of_cards.get(i) + 1);\n\t}\n\t\n\tPoker judge() {\n\t\t//onepair, twopair, threecard, fourcard, fullhouse\n\t\tint num_pair = 0;\n\t\tint num_three = 0;\n\t\tint num_four = 0;\n\t\tfor(Map.Entry<Integer, Integer> e: this.number_of_cards.entrySet()) {\n\t\t\tif(e.getValue() == 2) num_pair++;\n\t\t\telse if(e.getValue() == 3) num_three++;\n\t\t\telse if(e.getValue() == 4) num_four++;\n\t\t}\n\t\t\n\t\t//straight\n\t\tboolean straight = false;\n\t\tout: for(int c = 1; c <= 9; c++) {\n\t\t\tfor(int i = c; i < c+5; i++) {\n\t\t\t\tif(this.number_of_cards.get(i) != 1) continue out;\n\t\t\t}\n\t\t\tstraight = true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//straight 10 J Q K A\n\t\tout: if(this.number_of_cards.get(1) == 1) {\n\t\t\tfor(int c = 10; c <= 13; c++) {\n\t\t\t\tif(this.number_of_cards.get(c) != 1) break out;\n\t\t\t}\n\t\t\tstraight = true;\n\t\t}\n\t\t\n\t\t//judge\n\t\tif(num_four == 1) return Poker.FOURCARDS;\n\t\telse if(num_three == 1 && num_pair == 1) return Poker.FULLHOUSE;\n\t\telse if(straight) return Poker.STRAIGHT;\n\t\telse if(num_three == 1) return Poker.THREECARDS;\n\t\telse if(num_pair == 2) return Poker.TWOPAIR;\n\t\telse if(num_pair == 1) return Poker.ONEPAIR;\n\t\telse return Poker.NULL;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNextLine()) {\n\t\t\tString line = sc.nextLine();\n\t\t\tScanner scstr = new Scanner(line);\n\t\t\tscstr.useDelimiter(\",\");\n\t\t\t\n\t\t\tint[] cards = new int[5];\n\t\t\tfor(int i = 0; i < cards.length; i++) {\n\t\t\t\tcards[i] = scstr.nextInt();\n\t\t\t}\n\t\t\tscstr.close();\n\t\t\t\n\t\t\tSystem.out.println(new Main(cards).judge());\n\t\t\tscstr.close();\n\t\t}\n\t\tsc.close();\n\t}\n\t\n}\n\n\n\nenum Poker{\n\tNULL(\"null\"), ONEPAIR(\"one pair\"), TWOPAIR(\"two pair\"), THREECARDS(\"three card\"), \n\tSTRAIGHT(\"straight\"), FULLHOUSE(\"full house\"), FOURCARDS(\"four card\");\n\t\n\tString name;\n\t\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n\t\n\tPoker(String str) {\n\t\tthis.name = str;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.Arrays;\n\nclass Main {\n\n    public static void main(String[] args) throws IOException {\n        doit(args, System.in, System.out);\n    }\n\n    static void doit(String[] args, InputStream in, PrintStream out)\n            throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        while (true) {\n            String line = reader.readLine();\n            if (line == null || line.isEmpty()) {\n                break;\n            }\n            String[] values = line.split(\",\");\n            int[] numbers = new int[5];\n            int[] counts = new int[13];\n            for (int i = 0; i < 5; i++) {\n                int number = Integer.parseInt(values[i]);\n                numbers[i] = number;\n                counts[number - 1] += 1;\n            }\n            String result = null;\n            Arrays.sort(counts);\n            if (counts[12] == 4) {\n                result = \"four card\";\n            } else if (counts[12] == 3 && counts[11] == 2) {\n                result = \"full house\";\n            } else {\n                Arrays.sort(numbers);\n                if (numbers[4] - numbers[0] == 4\n                        || (numbers[0] == 1 && numbers[1] + numbers[4] == 23)) {\n                    result = \"straight\";\n                } else if (counts[12] == 3) {\n                    result = \"three card\";\n                } else if (counts[11] == 2) {\n                    result = \"two pair\";\n                } else if (counts[12] == 2) {\n                    result = \"one pair\";\n                }\n            }\n\n            out.println(result);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\npublic class Main {\n\n\tint INF = 1 << 28;\n\tint[] cards = new int[13];\n\tboolean c3, c4;\n\tboolean p1, p2;\n\tboolean st;\n\t\n\tvoid run() {\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(;sc.hasNext();) {\n\t\t\tc3 = p1 = p2 = st = c4 = false;\n\t\t\tint[] cards = new int[13];\n\t\t\tString[] str = sc.next().split(\",\");\n\t\t\tfor(int i=0;i<5;i++) {\n\t\t\t\tcards[ Integer.parseInt(str[i])-1 ]++;\n\t\t\t}\n\t\t\tint cnt = 0;\n\t\t\tfor(int i=0;i<13;i++) {\n\t\t\t\tif( cards[i] == 4 ) {\n\t\t\t\t\tc4 = true;\n\t\t\t\t}\n\t\t\t\tif( cards[i] == 3 ) {\n\t\t\t\t\tc3 = true;\n\t\t\t\t}\n\t\t\t\tif( p1 && cards[i] == 2 ) {\n\t\t\t\t\tp2 = true;\n\t\t\t\t}\n\t\t\t\tif( cards[i] == 2 ) {\n\t\t\t\t\tp1 = true;\n\t\t\t\t}\n\t\t\t\tif(cards[i] > 0 && cards[i] == cards[(i+1)%13]) cnt++;\n\t\t\t\tif(cnt != 4 && cnt > 0 && cards[i] != cards[(i+1)%13]) cnt = 0;\n//\t\t\t\tSystem.out.println(cnt);\n\t\t\t}\n\t\t\tif( c4 ) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if(p1 && c3) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}\n\t\t\telse if(cnt==4) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}\n\t\t\telse if(c3) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}\n\t\t\telse if(p2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}\n\t\t\telse if(p1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tvoid debug(Object... os) {\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n        public static void main(String[] args){\n                Scanner sc = new Scanner(System.in);\n                while(sc.hasNext()){\n                        String[] s = sc.nextLine().split(\",\");\n                        int[] c = new int[5];\n                        for(int i = 0; i < 5; i++){\n                                c[i] = Integer.parseInt(s[i]);\n                        }   \n                        Arrays.sort(c);\n                        if(c[0] == c[3] || c[1] == c[4]){\n                                System.out.println(\"four card\");\n                        }else if((c[0] == c[1] && c[2] == c[4]) || (c[0] == c[2] && c[3] == c[4])){\n                                System.out.println(\"full house\");\n                        }else{\n                                boolean flag = true;\n                                for(int i = 0; i < 4; i++){\n                                        flag &= c[i]+1 == c[i+1];\n                                }   \n                                if(flag || Arrays.equals(c, new int[]{1,10,11,12,13})){\n                                        System.out.println(\"straight\");\n                                }else if(c[0] == c[2] || c[1] == c[3] || c[2] == c[4]){\n                                        System.out.println(\"three card\");\n                                }else{\n\n                                        int kinds = 1;\n                                        for(int i = 0; i < 4; i++){\n                                                if(c[i] != c[i+1])kinds++;\n                                        }   \n                                        if(kinds == 5){ \n                                                System.out.println(\"null\");\n                                        }else if(kinds == 4){ \n                                                System.out.println(\"one pair\");\n                                        }else if(kinds == 3){ \n                                                System.out.println(\"two pair\");\n                                        }   \n                                }   \n                        }   \n\n                }   \n                sc.close();\n        }   \n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main{\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str,strArray[];\n\t\tint nArray[] = new int[5];\n\n\t\twhile((str=br.readLine()) != null){\n\t\t\tstrArray = str.split(\",\");\n\n\t\t\tfor(int i=0; i<strArray.length; i++){\n\t\t\t\tnArray[i] = Integer.parseInt(strArray[i]);\n\t\t\t}\n\t\t\tArrays.sort(nArray);\n\t\t\tjudgement(nArray);\n\n\t\t}\n\t}\n\n\tstatic void judgement(int n[]){\n\t\tif(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13){\n\t\t\tSystem.out.println(\"straight\");\n\t\t}else if(n[1]==n[0]+1 && n[2]==n[1]+1 && n[3]==n[2]+1 && n[4]==n[3]+1){\n\t\t\tSystem.out.println(\"straight\");\n\t\t}else if((n[0]==n[2] && n[1]==n[3]) || (n[1]==n[3] && n[2]==n[4])){\n\t\t\tSystem.out.println(\"four card\");\n\t\t}else if((n[0]==n[2] || n[2]==n[4]) && (n[0]==n[1] || n[3]==n[4])){\n\t\t\tSystem.out.println(\"full house\");\n\t\t}else if(n[0]==n[2] || n[1]==n[3] || n[2]==n[4]){\n\t\t\tSystem.out.println(\"three card\");\n\t\t}else if((n[0]==n[1] && (n[2]==n[3] || n[3]==n[4])) ||\n\t\t\t\t(n[0]==n[1] || n[2]==n[3]) && n[3]==n[4]){\n\t\t\tSystem.out.println(\"two pair\");\n\t\t}else if(n[0]==n[1] || n[1]==n[2] || n[2]==n[3] || n[3]==n[4]){\n\t\t\tSystem.out.println(\"one pair\");\n\t\t}else{\n\t\t\tSystem.out.println(\"null\");\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int[] count;\n    int a, i, j, k;\n    char[] ch;\n    String str;\n\n    count = new int[13];\n    for(;sc.hasNext();){\n      str = sc.next();\n      ch = new char[str.length()];\n      for(j = 0;j < str.length();j++)ch[j] = str.charAt(j);\n      a = 0; k = 0;\n      for(i = 0;i < 13;i++)count[i] = 0;\n\n      j = 0;\n      for(i = 0;i < 4;i++){\n        for(;j < str.length();j++){\n          if(ch[j] == ','){\n            a = readint(ch, k, j);\n            count[(a + 11) % 13]++;\n            k = ++j; break;\n          }\n        }\n      }\n      a = readint(ch, k, str.length());\n      count[(a + 11) % 13]++;\n\n      a = 0;\n      for(i = 0;i < 13;i++){\n        if(count[i] == 4){\n          out.println(\"four card\"); a = -1; break;\n        }else if(count[i] == 3){\n          for(j = 0;j < 13;j++){\n            if(count[j] == 2){\n              out.println(\"full house\"); a = -1; break;\n            }\n          }\n          if(a != -1){\n            out.println(\"three card\"); a = -1;\n          }\n        }else if(count[i] == 2){\n          for(j = 0;j < 13;j++){\n            if(count[j] == 2 && j != i){\n              out.println(\"two pair\"); a = -1; break;\n            }else if(count[j] == 3){\n              out.println(\"full house\"); a = -1; break;\n            }\n          }\n          if(a != -1){\n            out.println(\"one pair\"); a = -1;\n          }\n        }else if(count[i] == 1){\n          if(i < 9 && count[i + 1] == 1 && count[i + 2] == 1\n           && count[i + 3] == 1 && count[i + 4] == 1){\n             out.println(\"straight\"); a = -1;\n          }\n        }\n        if(a == -1)break;\n      }\n      if(a == 0)out.println(\"null\");\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n  private static int readint(char[] ch, int l, int r){\n    int i, d, res;\n    d = 1; res = 0;\n    for(i = r - 1;i >= l;i--){\n      res += d * (int)(ch[i] - '0');\n      d *= 10;\n    }\n    return res;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\n    /** データセットの区切り文字 */\n    private static final String DELIMITER = \",\";\n\n    /** ワンペア */\n    private static final String ONE_PAIR = \"one pair\";\n\n    /** ツーペア */\n    private static final String TWO_PAIR = \"two pair\";\n\n    /** スリーカード */\n    private static final String THREE_CARD = \"three card\";\n\n    /** ストレート */\n    private static final String STRAIGHT = \"straight\";\n\n    /** フルハウス */\n    private static final String FULL_HOUSE = \"full house\";\n\n    /** フォーカード */\n    private static final String FOUR_CARD = \"four card\";\n\n    /**\n     * メインメソッド\n     *\n     * @param args\n     */\n    public static void main(String[] args) {\n        // ローカルテスト用。提出時は\"System.in\"に修正。\n//        try (Scanner scanner = new Scanner(new File(\n//                \"D:/Temp/AOJ/0038_PokerHand.txt\"))) {\n        try (Scanner scanner = new Scanner(System.in)) {\n            while (scanner.hasNextLine()) {\n                System.out.println(judgeHand(scanner.nextLine()\n                        .split(DELIMITER)));\n            }\n        } catch (Exception e) {\n            // 対応しない。\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 役を判定する。\n     *\n     * @param cards データセット1行を格納した配列\n     * @return 判定結果\n     */\n    private static String judgeHand(String[] cards) {\n        Map<String, Integer> hands = readHands(cards);\n\n        if (hands.containsValue(4)) {\n            return FOUR_CARD;\n        }\n\n        if (hands.containsValue(3) && hands.containsValue(2)) {\n            return FULL_HOUSE;\n        }\n\n        if (hands.containsValue(3)) {\n            return THREE_CARD;\n        }\n\n        int pairs = countPairs(hands);\n\n        if (pairs == 2) {\n            return TWO_PAIR;\n        } else if (pairs == 1) {\n            return ONE_PAIR;\n        }\n\n        // ストレートが成立するときは他の役が成立しないので、最後に判定。\n        if (isStraight(hands)) {\n            return STRAIGHT;\n        }\n\n        return null;\n    }\n\n    /**\n     * 手札のカードを解析する。\n     *\n     * @param cards 手札5枚を格納した配列\n     * @return keyに手札、valueに同じ数字のカードの枚数を格納したMap\n     */\n    private static Map<String, Integer> readHands(String[] cards) {\n        Map<String, Integer> result = new HashMap<String, Integer>();\n\n        for (String card : cards) {\n            int counter = result.containsKey(card) ? result.get(card) : 0;\n            result.put(card, counter++);\n        }\n\n        return result;\n    }\n\n    /**\n     * ペアの組数を数える。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ペアの組数\n     */\n    private static int countPairs(Map<String, Integer> handsMap) {\n        int pairCounter = 0;\n\n        for (Map.Entry<String, Integer> entry : handsMap.entrySet()) {\n            if (entry.getValue() == 2) {\n                pairCounter++;\n            }\n        }\n\n        return pairCounter;\n    }\n\n    /**\n     * ストレートの役が成立するか判定する。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ストレートが成立する場合に{@code true}、それ以外の場合に{@code false}\n     */\n    private static boolean isStraight(Map<String, Integer> handsMap) {\n\n        int[] hands = new int[5];\n\n        int counter = 0;\n        for (String hand : handsMap.keySet()) {\n            hands[counter++] = Integer.parseInt(hand);\n        }\n\n        java.util.Arrays.sort(hands);\n\n        // 1ずつインクリメントしない組み合わせは1つのみなので先にチェック。\n        if (new int[] { 10, 11, 12, 13, 1 }.equals(hands)) {\n            return true;\n        }\n\n        for (int i = 0; i < hands.length; i++) {\n            if (hands[i] + 1 != hands[i + 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n\npublic class Main {\n\n\tclass Hand {\n\t\tfinal String[] win = new String[] {\n\t\t\t\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"\n\t\t};\n\n\t\tint[] cards;\n\n\t\tpublic Hand(String s) {\n\t\t\tcards = new int[5];\n\t\t\tString[] ss = s.split(\",\");\n\t\t\tfor (int i = 0 ; i < 5 ; i++) cards[i] = Integer.parseInt(ss[i]);\n\t\t\tArrays.sort(cards);\n\t\t}\n\n\t\tpublic void display() {\n\t\t\tSystem.out.println(Arrays.toString(cards));\n\t\t}\n\n\t\tpublic int judge() {\n\t\t\tint[] temp = new int[5];\n\t\t\tint[] accum = new int[14];\n\t\t\tfor (int i = 0 ; i < 5 ; i++) {\n\t\t\t\ttemp[i] = cards[i] - cards[0];\n\t\t\t\taccum[temp[i]] += 1;\n\t\t\t}\n\t\t\tArrays.sort(accum);\n\t\t\tif (Arrays.binarySearch(accum, 4) >= 0) return 6;\n\t\t\tif (Arrays.binarySearch(accum, 3) >= 0) {\n\t\t\t\tif (Arrays.binarySearch(accum, 2) >= 0) return 5;\n\t\t\t\telse return 3;\n\t\t\t}\n\t\t\tif (Arrays.equals(temp, (new int[] {0,1,2,3,4}))\n\t\t\t\t|| Arrays.equals(temp, (new int[] {0,9,10,11,12}))) return 4;\n\t\t\tint count = 0;\n\t\t\tfor (int i = 1 ; i < 14 ; i++)\n\t\t\t\tif (accum[i] == 2) count++;\n\t\t\tswitch (count) {\n\t\t\tcase 1: return 1;\n\t\t\tcase 2: return 2;\n\t\t\tdefault: return 0;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tMain m = new Main();\n\n\t\tString line;\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tHand hand = m.new Hand(line);\n\t\t\tSystem.out.println(hand.win[hand.judge()]);\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\n    /** データセットの区切り文字 */\n    private static final String DELIMITER = \",\";\n\n    /** ワンペア */\n    private static final String ONE_PAIR = \"one pair\";\n\n    /** ツーペア */\n    private static final String TWO_PAIR = \"two pair\";\n\n    /** スリーカード */\n    private static final String THREE_CARD = \"three card\";\n\n    /** ストレート */\n    private static final String STRAIGHT = \"straight\";\n\n    /** フルハウス */\n    private static final String FULL_HOUSE = \"full house\";\n\n    /** フォーカード */\n    private static final String FOUR_CARD = \"four card\";\n\n    /**\n     * メインメソッド\n     *\n     * @param args\n     */\n    public static void main(String[] args) {\n        // ローカルテスト用。提出時は\"System.in\"に修正。\n        // try (Scanner scanner = new Scanner(new File(\n        //            \"D:/Temp/AOJ/0038_PokerHand.txt\"))) {\n             try (Scanner scanner = new Scanner(System.in)) {\n            while (scanner.hasNextLine()) {\n                System.out.println(judgeHand(scanner.nextLine()\n                        .split(DELIMITER)));\n            }\n        } catch (Exception e) {\n            // 対応しない。\n        }\n    }\n\n    /**\n     * 役を判定する。\n     *\n     * @param cards データセット1行を格納した配列\n     * @return 判定結果\n     */\n    private static String judgeHand(String[] cards) {\n        Map<String, Integer> hands = readHands(cards);\n\n        if (hands.containsValue(4)) {\n            return FOUR_CARD;\n        }\n\n        if (hands.containsValue(3) && hands.containsValue(2)) {\n            return FULL_HOUSE;\n        }\n\n        if (hands.containsValue(3)) {\n            return THREE_CARD;\n        }\n\n        int pairs = countPairs(hands);\n\n        if (pairs == 2) {\n            return TWO_PAIR;\n        } else if (pairs == 1) {\n            return ONE_PAIR;\n        }\n\n        // ストレートが成立するときは他の役が成立しないので、最後に判定。\n        if (isStraight(hands)) {\n            return STRAIGHT;\n        }\n\n        return null;\n    }\n\n    /**\n     * 手札のカードを解析する。\n     *\n     * @param cards 手札5枚を格納した配列\n     * @return keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     */\n    private static Map<String, Integer> readHands(String[] cards) {\n        Map<String, Integer> result = new HashMap<String, Integer>();\n\n        for (String card : cards) {\n            int counter = result.containsKey(card) ? result.get(card) + 1 : 1;\n            result.put(card, counter);\n        }\n\n        return result;\n    }\n\n    /**\n     * ペアの組数を数える。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ペアの組数\n     */\n    private static int countPairs(Map<String, Integer> handsMap) {\n        int pairCounter = 0;\n\n        for (Map.Entry<String, Integer> entry : handsMap.entrySet()) {\n            if (entry.getValue() == 2) {\n                pairCounter++;\n            }\n        }\n\n        return pairCounter;\n    }\n\n    /**\n     * ストレートの役が成立するか判定する。\n     *\n     * @param handsMap keyにカードの数字、valueに同じ数字の枚数を格納したMap\n     * @return ストレートが成立する場合に{@code true}、それ以外の場合に{@code false}\n     */\n    private static boolean isStraight(Map<String, Integer> handsMap) {\n\n        int[] hands = new int[5];\n\n        int counter = 0;\n        for (String hand : handsMap.keySet()) {\n            hands[counter++] = Integer.parseInt(hand);\n        }\n\n        Arrays.sort(hands);\n\n        // 1ずつインクリメントしない組み合わせは1つのみなので先にチェック。\n        if (Arrays.equals(new int[] { 1, 10, 11, 12, 13 }, hands)) {\n            return true;\n        }\n\n        for (int i = 0; i < hands.length - 1; i++) {\n            if (hands[i] + 1 != hands[i + 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\n\t\tString line;\n\t\tString[] cards;\n\t\twhile (sc.hasNext() == true) {\n\t\t\tline = sc.nextLine();\n\t\t\t\n\t\t\tcards = line.split(\",\");\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\t\tint pre = 0;\n\t\t\tboolean straight = false;\n\t\t\t\n\t\t\tint[] point = new int[14];\n\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\tint tmp = Integer.parseInt(cards[i]);\n\t\t\t\tpoint[tmp]++;\n\t\t\t\t\n\t\t\t\tif (pre != 0) {\n\t\t\t\t\tif ((pre + 1) != tmp) {\n\t\t\t\t\t\tif ((pre != 1) || (tmp != 10)) straight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tint[] judge = new int[5];\n\t\t\tfor (int i = 0; i < point.length; i++) {\n\t\t\t\tjudge[point[i]]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (judge[4] == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if ((judge[2] == 1) && (judge[3] == 1)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (judge[1] == 5) {\n\t\t\t\tif (straight == true) System.out.println(\"full house\");\n\t\t\t} else if (judge[3] == 1) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (judge[2] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (judge[2] == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class _0038 {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main{\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str,strArray[];\n\t\tint nArray[] = new int[5];\n\n\t\twhile((str=br.readLine()) != null){\n\t\t\tstrArray = str.split(\",\");\n\n\t\t\tfor(int i=0; i<strArray.length; i++){\n\t\t\t\tnArray[i] = Integer.parseInt(strArray[i]);\n\t\t\t}\n\n\t\t\tArrays.sort(nArray);\n\t\t\tjudgement(nArray);\n\n\t\t}\n\t}\n\n\tstatic void judgement(int n[]){\n\t\tif(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13){\n\t\t\tSystem.out.println(\"straight\");\n\t\t}\n\t\telse if(n[1]==n[0]+1 && n[2]==n[1]+1 && n[3]==n[2]+1 && n[4]==n[3]+1){\n\t\t\tSystem.out.println(\"straight\");\n\t\t}\n\t\telse if((n[0]==n[2] && n[1]==n[3]) || (n[1]==n[3] && n[2]==n[4])){\n\t\t\tSystem.out.println(\"four card\");\n\t\t}\n\t\telse if((n[0]==n[2] || n[2]==n[4]) && (n[0]==n[1] || n[3]==n[4])){\n\t\t\tSystem.out.println(\"full house\");\n\t\t}\n\t\telse if(n[0]==n[2] || n[1]==n[3] || n[2]==n[4]){\n\t\t\tSystem.out.println(\"three card\");\n\t\t}\n\t\telse if((n[0]==n[1] && (n[2]==n[3] || n[3]==n[4])) ||\n\t\t\t\t((n[0]==n[1] || n[2]==n[3]) && n[3]==n[4])){\n\t\t\tSystem.out.println(\"two pair\");\n\t\t}\n\t\telse if(n[0]==n[1] || n[1]==n[2] || n[2]==n[3] || n[3]==n[4]){\n\t\t\tSystem.out.println(\"one pair\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"null\");\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic Scanner scan = new Scanner(System.in);\n\tstatic PrintWriter out = new PrintWriter(System.out);\n\n\tpublic static void main(String[] args) {\n\t\twhile(scan.hasNext()){\n\t\t\tString[] cards = scan.next().split(\",\");\n\t\t\tint[] a = new int[5];\n\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\ta[i] = Integer.parseInt(cards[i]);\n\t\t\tArrays.sort(a);\n\t\t\tif(pair(a).contains(4)) out.println(\"four card\");\n\t\t\telse if(pair(a).contains(3) && pair(a).contains(2)) out.println(\"full house\");\n\t\t\telse if(a[4]-a[0]==4 || (a[0]==1 && a[1]==10 && a[4]==13)) out.println(\"straight\");\n\t\t\telse if(pair(a).contains(3)) out.println(\"three card\");\n\t\t\telse if(pair(a).lastIndexOf(2)==1) out.println(\"two pair\");\n\t\t\telse if(pair(a).contains(2)) out.println(\"one pair\");\n\t\t\telse out.println(\"null\");\n\t\t}\n\t\tout.flush();\n\t}\n\n\tstatic ArrayList<Integer> pair(int[] a){\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\tfor (int i = 1; i <= 13 ; i++) {\n\t\t\tint tmp=0;\n\t\t\tfor (int j = 0; j < 5; j++) if(a[j]==i) tmp++;\n\t\t\tif(tmp>=2) list.add(tmp);\n\t\t}\n\t\treturn list;\n\t}\n\n\tstatic int si() {\n\t\treturn Integer.parseInt(scan.next());\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nclass Main {\n\n        static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n        public static void main(String[] args) throws Exception{\n            String row;\n            while ((row = reader.readLine()) != null) {\n                String[] temps = row.split(\",\");\n                int[] cards = new int[5];\n                for (int i=0; i<temps.length; i++)\n                    cards[i] = Integer.parseInt(temps[i]);\n\n                HashMap<Integer, Integer> dist = new HashMap<Integer, Integer>();\n\n                for (int i=0; i<5; i++) {\n                    if (dist.containsKey(cards[i])) {\n                        dist.put(cards[i], dist.get(cards[i]) + 1);\n                    } else {\n                        dist.put(cards[i],  1);\n                    } \n                }\n\n                int max_dist = 0;\n                Set<Integer> keys = dist.keySet();\n                \n                for (int key : keys) {\n                    if (max_dist < dist.get(key)) {\n                        max_dist = dist.get(key);\n                    }\n                }\n\n                Integer[] a = keys.toArray(new Integer[0]);\n                Integer[] p = new Integer[a.length];\n                \n                for (int i=0; i<a.length; i++)\n                    p[i] = dist.get(a[i]);\n\n                Arrays.sort(p);\n\n                if (keys.size() == 3 && max_dist < 3  && p[1] == 2 && p[2] == 2) {\n                    max_dist = -3;\n                } \n                \n                if (keys.size() == 2 && max_dist < 4) {\n                    if(p[0] == 2 && p[1] == 3) {\n                        max_dist = -1; \n                    }\n                }\n\n\n                if (keys.size() == 5 && max_dist < 4) {\n\n                    boolean flag = true;\n                    for (int i=1; i<5; i++) {\n                        if (a[i] - a[i-1] != 1) {\n                            flag = false;\n                        } \n                    }\n\n                    if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n                       flag = true; \n                    }\n\n                    if (flag) {\n                        max_dist = -2;    \n                    }\n                }\n\n                String msg = \"\";\n                switch (max_dist) {\n                    case 2:\n                        msg = \"one pair\";\n                        break;\n                    case -3:\n                        msg = \"tow pair\";\n                        break;\n                    case 3:\n                        msg = \"three card\";\n                        break;\n                    case -2:\n                        msg = \"straight\";\n                        break;\n                    case 4:\n                        msg = \"four card\";\n                        break;\n                    case -1:\n                        msg = \"full house\";\n                        break;\n                    default:\n                        msg = \"null\";\n                        break;\n                }\n                \n                System.out.println(msg);\n\n            }\n        }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString str[];\n\t\tint card[];\n\t\tboolean op,tp,tc,fh,fc,st;\n\n\t\tcard = new int[5];\n\t\twhile (sc.hasNext()) {\n\t\t\top = false;\n\t\t\ttp = false;\n\t\t\ttc = false;\n\t\t\tfh = false;\n\t\t\tfc = false;\n\t\t\tst = false;\n\t\t\tstr = sc.next().split(\",\");\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tcard[i] = Integer.valueOf(str[i]);\n\t\t\t}\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tint min = i;\n\t\t\t\tfor (int j = i; j < 5; j++) {\n\t\t\t\t\tif (card[j] < card[min]) {\n\t\t\t\t\t\tmin = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint swap = card[i];\n\t\t\t\tcard[i] = card[min];\n\t\t\t\tcard[min] = swap;\n\t\t\t}\n\t\t\tif (card[0] == card[1] || card[1] == card[2] || card[2] == card[3] || card[3] == card[4]) {\n\t\t\t\top = true;\n\t\t\t}\n\t\t\tif ((card[0] == card[1] && (card[2] == card[3] || card[3] == card[4])) || (card[1] == card[2] && card[3] == card[4])) {\n\t\t\t\ttp = true;\n\t\t\t}\n\t\t\tif (card[0] == card[2] || card[1] == card[3] || card[2] == card[4]) {\n\t\t\t\ttc = true;\n\t\t\t}\n\t\t\tif ((card[0] + 1 == card[1] || card[0] + 12 == card[4]) && card[1] + 1 == card[2] && card[2] + 1 == card[3] && card[3] + 1 == card[4]) {\n\t\t\t\tst = true;\n\t\t\t}\n\t\t\tif ((card[0] == card[1] && card[2] == card[4]) || (card[0] == card[2] && card[3] == card[4])) {\n\t\t\t\tfh = true;\n\t\t\t}\n\t\t\tif (card[0] == card[3] || card[1] == card[4]) {\n\t\t\t\tfc = true;\n\t\t\t}\n\t\t\tif (fc) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if (fh) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (st) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (tc) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (tp) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (op) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pari\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pari\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    for (int i = 0; i < cardSet.size(); i++) {\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    int pariCount = 0;\n    int pariedCardNum = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n      if (pariedCardNum == cardSet.get(i)) {\n        continue;\n      }\n      for (int j = i + 1; j < cardSet.size(); j++) {\n        if (cardSet.get(i) == cardSet.get(j)) {\n          pariedCardNum = cardSet.get(i);\n          pariCount++;\n          break;\n        }\n      }\n    }\n    return pariCount == 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = null;\n\t\ttry {\n\t\t\tsc = new Scanner(System.in);\n\t\t\twhile (sc.hasNextLine()) {\n\t\t\t\tString[] cards = sc.nextLine().split(\",\");\n\t\t\t\tInteger[] numbers = new Integer[5];\n\t\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\t\tnumbers[i] = Integer.parseInt(cards[i]);\n\t\t\t\t}\n\t\t\t\tArrays.sort(numbers);\n\t\t\t\tList<Integer> numberList = Arrays.asList(numbers);\n\t\t\t\tint count = 1;\n\t\t\t\tint value = 1;\n\t\t\t\t// ???????????????????????????????????????????????\\????????¢??????????????¢??????????????????????????????????????????\n\t\t\t\tfor (int i = 1; i < numberList.size(); i++) {\n\t\t\t\t\tif (numberList.get(i - 1) == numberList.get(i)) {\n\t\t\t\t\t\tcount += value;\n\t\t\t\t\t\tvalue++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count <= 1) {\n\t\t\t\t\t// ????????¬?????????????????????????????????\n\t\t\t\t\tint sum = 0;\n\t\t\t\t\tfor (int num : numberList) {\n\t\t\t\t\t\tsum += num;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sum == 47)\n\t\t\t\t\t\t\t|| (numberList.get(0) + 1 == numberList.get(1)\n\t\t\t\t\t\t\t\t\t&& numberList.get(1) + 1 == numberList\n\t\t\t\t\t\t\t\t\t\t\t.get(2)\n\t\t\t\t\t\t\t\t\t&& numberList.get(2) + 1 == numberList\n\t\t\t\t\t\t\t\t\t\t\t.get(3) && numberList.get(3) + 1 == numberList\n\t\t\t\t\t\t\t\t\t.get(4))) {\n\t\t\t\t\t\tcount += 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString hand = \"null\";\n\t\t\t\tswitch (count) {\n\t\t\t\tcase 7:\n\t\t\t\t\thand = \"four card\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\thand = \"straight\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\thand = \"full house\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\thand = \"three card\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\thand = \"two pair\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\thand = \"one pair\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(hand);\n\t\t\t}\n\t\t} finally {\n\t\t\tsc.close();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Main {\n\t\n\tprivate static final int NUM_HAND_CARD = 5;\n\tpublic static void main(String[] arg){\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint[] hand = new int[NUM_HAND_CARD];\n\t\tArrayList<String> result = new ArrayList<String>();\n\t\ttry{\n\t\t\twhile(true){\n\t\t\t\tString[] input = br.readLine().split(\",\");\n\t\t\t\tfor(int i = 0; i < NUM_HAND_CARD; i++){\n\t\t\t\t\thand[i] = Integer.parseInt(input[i]);\n\t\t\t\t}\n\t\t\t\tresult.add(judgeHand(hand));\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\t//何もしないで出力処理に移る\n\t\t}\n\t\t\n\t\tfor(String pair : result){\n\t\t\tSystem.out.println(pair);\n\t\t}\n\t}\n\t\n\tpublic static String judgeHand(int[] hand){\n\t\tArrays.sort(hand);\n\t\tif(isFourCard(hand)){\n\t\t\treturn \"four card\";\n\t\t}\n\t\telse if(isFullHouse(hand)){\n\t\t\treturn \"full house\";\n\t\t}\n\t\telse if(isStraight(hand)){\n\t\t\treturn \"straight\";\n\t\t}\n\t\telse if(isThreeCard(hand)){\n\t\t\treturn \"three card\";\n\t\t}\n\t\telse if(isTwoPair(hand)){\n\t\t\treturn \"two pair\";\n\t\t}\n\t\telse if(isOnePair(hand)){\n\t\t\treturn \"one pair\";\n\t\t}\n\t\telse{\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate static boolean isFourCard(int[] hand){\n\t\treturn isPair(hand ,4, 1);\n\t}\n\t\n\tprivate static boolean isFullHouse(int[] hand){\n\t\tif(isOnePair(hand) && isThreeCard(hand)){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate static boolean isStraight(int[] hand){\n\t\tint[] tmpHand = new int[NUM_HAND_CARD];\n\t\tfor(int i = 0; i < NUM_HAND_CARD; i++){\n\t\t\ttmpHand[i] = hand[i];\n\t\t\tif(tmpHand[i] == 1){\n\t\t\t\ttmpHand[i] = 14;\n\t\t\t}\n\t\t}\n\t\tArrays.sort(tmpHand);\n\t\treturn checkNumbersStraight(hand) || checkNumbersStraight(tmpHand);\n\t}\n\t\n\tprivate static boolean checkNumbersStraight(int[] hand){\n\t\tint numStart = hand[0];\n\t\tfor(int i = 1; i < NUM_HAND_CARD; i++){\n\t\t\tif(++numStart != hand[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static boolean isThreeCard(int[] hand){\n\t\treturn isPair(hand, 3, 1);\n\t}\n\n\tprivate static boolean isTwoPair(int[] hand){\n\t\treturn isPair(hand, 2, 2);\n\t}\n\n\tprivate static boolean isOnePair(int[] hand){\n\t\treturn isPair(hand, 2, 1);\n\t}\n\t\n\t//同じカードnumCard枚のペアがnumPair組あるか判定する\n\tprivate static boolean isPair(int[] hand, int numCard, int numPair){\n\t\t//Arrays.sort(hand);\n\t\tint pairCount = 0;\n\t\tfor(int n = 1; n <= 13; n++){\n\t\t\tint count = 0;\n\t\t\tfor(int i = 0; i < NUM_HAND_CARD; i++){\n\t\t\t\tif(hand[i] == n){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count == numCard){\n\t\t\t\tpairCount++;\n\t\t\t}\n\t\t}\n\t\tif(pairCount == numPair){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;class Main{public static void main(String[]z){int[]c;List<Long>l;for(Scanner s=new Scanner(System.in);s.hasNext();System.out.println(c[4]>3?\"four card\":c[2]==2&&c[3]==3?\"full house\":c[1]>4&&c[0]==5*l.get(2)||l.equals(Arrays.asList(1L,10L,11L,12L,13L))?\"straight\":c[3]>2?\"three card\":c[2]>3&&c[1]<2?\"two pair\":c[2]<3&&c[1]==3?\"one pair\":\"null\")){l=new Stack<Long>();for(String x:s.next().split(\",\"))l.add(new Long(x));Collections.sort(l);c=new int[6];for(long a:l){c[0]+=a;for(int i=0;i++<5;c[i]+=Collections.frequency(l, a)==i?1:0);}}}}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.Arrays;\n\nclass Main{\nstatic int[] a=new int[5];\npublic static void main(String[] args) throws IOException{\nBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\nString line;\nwhile((line=br.readLine())!=null){\nString[] value=line.split(\",\");\na[0]=Integer.parseInt(value[0]);\na[1]=Integer.parseInt(value[1]);\na[2]=Integer.parseInt(value[2]);\na[3]=Integer.parseInt(value[3]);\na[4]=Integer.parseInt(value[4]);\nArrays.sort(a);\n\nif(a[1]==a[2]&&a[1]==a[3]&&a[1]==(a[4]|a[0])){\nSystem.out.println(\"four card\");\n}\nelse if((a[0]==a[1]&&a[0]==a[2]&&a[3]==a[4])||(a[0]==a[1]&&a[3]==a[2]&&a[3]==a[4])){\nSystem.out.println(\"full house\");\n}\nelse if((a[0]==a[1]&&a[1]==a[2])||(a[1]==a[2]&&a[2]==a[3])||(a[2]==a[3]&&a[3]==a[4])){\nSystem.out.println(\"three card\");\n}\nelse if((a[0]==a[1]&&a[2]==a[3])||(a[0]==a[1]&&a[3]==a[4])||(a[1]==a[2]&&a[3]==a[4])){\nSystem.out.println(\"two pair\");\n}\nelse if((a[0]==a[1])||(a[1]==a[2])||(a[2]==a[3])||(a[3]==a[4])){\nSystem.out.println(\"one pair\");\n}\nelse if((a[0]+4==a[1]+3&&a[1]+3==a[2]+2&&a[2]+2==a[3]+1&&a[3]+1==a[4])||(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)){\nSystem.out.println(\"straight\");\n}\nelse{\nSystem.out.println(\"null\");\n}\n}\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 2) {\n        pariCount++;\n      }\n    }\n    return pariCount >= 1;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 2) {\n        pariCount++;\n      }\n    }\n    return pariCount >= 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 2) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int pariCount = 0;\n    int currentCard = 0;\n    for (int i = 0; i < cardSet.size(); i++) {\n\n      if (currentCard == cardSet.get(i)) {\n        pariCount++;\n        if (pariCount == 3) {\n          return true;\n        }\n        continue;\n      }\n      currentCard = cardSet.get(i);\n      pariCount = 0;\n    }\n    return false;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n    Main(){\n\tScanner sc = new Scanner(System.in);\n\n\twhile(sc.hasNext()){\n\t    String[] str = (sc.next()).split(\",\");\n\t    int[] hand = new int[5];\n\t    for(int i = 0; i < 5; i++)\n\t\thand[i] = Integer.parseInt(str[i]);\n\t    Arrays.sort(hand);\n\t    String res;\n\n\t    if(straight(hand)) res = \"straight\";\n\t    else res = func(hand);\n\n\t    System.out.println(res);\n\t}\n    }\n\n    String func(int[] hand){\n\tint[] num = new int[14];\n\tfor(int i = 0; i < 14; i++) num[i] = 0;\n\tfor(int i = 0; i < 5; i++) num[hand[i]]++;\n\t\n\tfor(int i = 0; i < 14; i++){\n\t    if(num[i] == 4) return \"four card\";\n\t    else if(num[i] == 3){\n\t\tfor(int j = i+1; j < 14; j++)\n\t\t    if(num[j] == 2) return \"full house\";\n\n\t\treturn \"three card\";\n\t    } else if(num[i] == 2){\n\t\tfor(int j = i+1; j < 14; j++){\n\t\t    if(num[j] == 3) return \"full house\";\n\t\t    else if(num[j] == 2) return \"two pair\";\n\t\t}\n\n\t\treturn \"one pair\";\n\t    }\n\t}\n\n\treturn \"null\";\n    }\n\n    boolean straight(int[] hand){\n\tboolean f;\n\tif(hand[0] == 1){\n\t    f = true;\n\t    for(int i = 1; i < 5 && f; i++)\n\t\tf = (hand[i] == 9+i);\n\n\t    if(f) return f;\n\t}\n\tf = true;\n\tfor(int i = 1; i < 5 && f; i++)\n\t    f = (hand[i] == (hand[0]+i));\n\n\treturn f;\n    }\n\n    public static void main(String[] args){\n\tnew Main();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\n\n class Main{\n     public static void main(String args[]){\n         Scanner sc = new Scanner(System.in);\n         String line;\n         while(sc.hasNext()){\n             line=sc.nextLine();\n             if(line.isEmpty())break;\n             String[] split=line.split(\",\");\n             int[] ints = new int[5]; for(int i=0;i<5;i++)ints[i]=Integer.parseInt(split[i]);\n             if(!_4c(ints)){//System.out.println(\"aa\");\n                 if(!fullH(ints)){//System.out.println(\"bb\");\n                     if(!st(ints)){//System.out.println(\"cc\");\n                         if(!_3c(ints)){//System.out.println(\"dd\");\n                             if(!_2p(ints)){//System.out.println(\"dd\");\n                                 //System.out.println(_1p(ints));\n                                 if(!_1p(ints)){//System.out.println(\"ee\");\n                 System.out.println(\"null\");}}}}}}\n         }\n         \n         \n     }\n     static boolean _4c(int[] ints){\n         if(ints[1]==ints[2]&&ints[1]==ints[3]&&ints[1]==ints[4]){System.out.println(\"four card\");\n         return true;}\n         int count=0; for(int x : ints) if(x==ints[0])count++;\n         if(count==4){System.out.println(\"four card\");return true;}\n         return false;\n     }\n     static boolean fullH(int[] ints){\n         HashSet<Integer>hs=new HashSet<Integer>();\n         for(int x:ints) hs.add(x);\n         if(hs.size()==2){System.out.println(\"full house\"); return true;}\n         return false;\n     }\n     static boolean st(int[] ints){\n         TreeSet<Integer>hs=new TreeSet<Integer>();\n         \n         for(int x:ints) hs.add(x);\n         if(hs.size()!=5)return false;\n         if(hs.last()-hs.first()==4){System.out.println(\"straight\");return true;}\n         if(hs.first()==1){hs.remove(1);\n             if(hs.first()==10){System.out.println(\"straight\");return true;}\n        }return false;\n     }\n     static boolean _3c(int[] ints){\n        for(int i=0; i<5;i++){\n            int count=0;\n            for(int j=i+1;j<5;j++){\n                if(ints[i]==ints[j])count++;\n            }\n            if(count==2){System.out.println(\"three card\");return true;}\n        }\n        return false;\n     }\n     static boolean _2p(int[] ints){\n         TreeMap<Integer,Integer>tm=new TreeMap<Integer,Integer>();\n         for(int in:ints){\n             if(tm.containsKey(in))tm.put(in, tm.get(in)+1);\n             else tm.put(in, 1);\n         }\n         if(tm.keySet().size()==3){System.out.println(\"two pair\");return true;}\n         return false;\n     }\n     static boolean _1p(int[] ints){\n         for(int i=0; i<5;i++){\n             for(int j=i+1;j<5;j++){\n                 if(ints[i]==ints[j]){System.out.println(\"one pair\");return true;}\n         }\n        }return false;\n     }\n }"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            String[] lines = sc.next().split(\",\");\n            int[] cards = new int[13];\n            int max = 0;\n            int max2 = 0;\n            for (int i = 0; i < lines.length; i++) {\n                int n = Integer.parseInt(lines[i])-1;\n                cards[n]++;\n                if (max < cards[n]) {\n                    max = cards[n];\n                } else if (max2 < cards[n]) {\n                    max2 = cards[n];\n                }\n            }\n            if (max >= 4) {\n                System.out.println(\"four card\");\n            } else if (max == 3) {\n                if (max2 == 2) {\n                    System.out.println(\"full house\");\n                } else {\n                    System.out.println(\"three card\");\n                }\n            } else if (max == 2 && max2 == 2) {\n                System.out.println(\"two pair\");\n            } else if (max == 2) {\n                System.out.println(\"one pair\");\n            } else {\n                int count=0;\n                for (int i = 0; i < 14; i++) {\n                    if(cards[i%13]==1) {\n                        count++;\n                        if(count==5) {\n                            break;\n                        }\n                    }else {\n                        count=0;\n                    }\n                }\n                if(count==5) {\n                    System.out.println(\"straight\");\n                }else {\n                    System.out.println(\"null\");\n                }\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\n    while (input.ready()) {\n      String[] cardSetStr = input.readLine().split(\",\");\n      System.out.println(getYaku(cardSetStr));\n    }\n  }\n\n  private static String getYaku(String[] cardSet) {\n    ArrayList<Integer> cardSetNum = new ArrayList<>();\n    for (int i = 0; i < cardSet.length; i++) {\n      cardSetNum.add(Integer.parseInt(cardSet[i]));\n    }\n    if (isFourCard(cardSetNum)) {\n      return \"four card\";\n    }\n    if (isFullHouse(cardSetNum)) {\n      return \"full house\";\n    }\n    if (isStraight(cardSetNum)) {\n      return \"straight\";\n    }\n    if (isThreeCard(cardSetNum)) {\n      return \"three card\";\n    }\n    if (isTwoPair(cardSetNum)) {\n      return \"two pair\";\n    }\n    if (isOnePair(cardSetNum)) {\n      return \"one pair\";\n    }\n    return \"null\";\n  }\n\n  private static boolean isOnePair(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 2) {\n        pariCount++;\n      }\n    }\n    return pariCount >= 1;\n  }\n\n  private static boolean isTwoPair(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 2) {\n        pariCount++;\n      }\n    }\n    return pariCount >= 2;\n  }\n\n  private static boolean isThreeCard(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 3) {\n        pariCount++;\n      }\n    }\n    return pariCount >= 1;\n  }\n\n  private static boolean isFourCard(ArrayList<Integer> cardSet) {\n    final int[] count = new int[14];\n    Arrays.fill(count, 0);\n    for (int each : cardSet) {\n      count[each]++;\n    }\n    int pariCount = 0;\n    for (int i : count) {\n      if (i >= 4) {\n        pariCount++;\n      }\n    }\n    return pariCount >= 1;\n  }\n\n  private static boolean isFullHouse(ArrayList<Integer> cardSet) {\n    if (isTwoPair(cardSet) && isThreeCard(cardSet)) {\n      return true;\n    }\n    return false;\n  }\n\n  private static boolean isStraight(ArrayList<Integer> cardSet) {\n    Collections.sort(cardSet);\n    int sumCardNum = 0;\n    for (Integer each : cardSet) {\n      sumCardNum += each;\n    }\n    if (sumCardNum - (cardSet.get(0) - 1) * 5 == 15) {\n      return true;\n    }\n\n    if (cardSet.get(0) == 1 && sumCardNum == 47) {\n      return true;\n    }\n    return false;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\nclass Main{\n\t\n\tpublic static ArrayList<Integer> sort(ArrayList<Integer> list){\n\t\tfor (int i=0; i<list.size()-1;i++ ){\n\t\t\tfor (int j=list.size()-1; j>i;j-- ){\n\t\t\t\tif(list.get(j) < list.get(j-1)){\n\t\t\t\t\tint t = list.get(j);\n\t\t\t\t\tlist.set(j,list.get(j-1));\n\t\t\t\t\tlist.set(j-1,t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\tpublic static boolean hand_straight(ArrayList<Integer> list){\n\t\tif(list.get(0) == 1){\n\t\t\tif(list.get(1) == 10 && list.get(2) == 11 && list.get(3) == 12 &&\n\t\t\t\t\tlist.get(4) == 13)return true;\n\t\t}\n\t\tfor (int i=1; i<list.size(); i++){\n\t\t\tif(list.get(i) == list.get(i-1) + 1);\n\t\t\telse return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/** \n\t *ツ姪ーツづーツチツェツッツクツつキツづゥツδソツッツド \n\t * \n\t * @param list ツ偲ィツ札ツづーツ格ツ納ツつキツづゥツδ環スツト\n\t * @return ツ姪ーツづ個鳴シツ前ツづーツ陛板つキ\n\t */\n\tpublic static String check_poker(ArrayList<Integer> list){\n\t\tint base;\n\t\tint m_same = 1;\n\t\tint t_same = 1;\n\t\tint pair = 0;\n\t\tint count = 0;\n\t\t\n\t\tfor(int i = 0; i < 4;i++){\n\t\t\tt_same = 1;\n\t\t\tbase = list.get(i);\n\t\t\tcount ++;\n\t\t\tfor(int j = count;j < 5;j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tif(base == list.get(j)){\n\t\t\t\t\t\tt_same++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(t_same == 2)pair++;\n\t\t\tif(t_same > m_same)m_same = t_same;\n\t\t}\n\t\t\n\t\tlist = sort(list);\n\t\t\n\t\tif(hand_straight(list) == true) return \"straight\";\n\t\tif(m_same == 4) return \"four card\";\n\t\tif(m_same == 3 && pair == 2) return \"full house\";\n\t\tif(m_same == 3) return \"three card\";\n\t\tif(pair == 2) return \"two pair\";\n\t\tif(pair == 1) return \"one pair\";\n\t\treturn \"null\";\n\t}\n\t\n\t\n\tpublic static void print_poker(ArrayList<Integer> list){\n\t\tArrayList <Integer> inp = new ArrayList<Integer>();\n\t\t\n\t\tfor(int i=0;i<list.size()/5;i++){\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tinp.add(list.get(i*5+j));\n\t\t\t}\n\t\t\tSystem.out.println(check_poker(inp));\n\t\t\tinp.clear();\n\t\t}\n\n\t}\n\t\t\n\tpublic static void main(String args[]) throws IOException{\n\t\tString str;\n\t\tArrayList <Integer> inp = new ArrayList<Integer>();\n\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile(scan.hasNext()){\n\t\t\tstr = scan.next();\n\t\t\tString [] strAry = new String[str.length()];\n\t\t\tstrAry = str.split(\",\");\n\t\t\tfor(int j=0;j<strAry.length;j++){\n\t\t\t\tPattern p = Pattern.compile(\"[0-9]*\");\n\t\t\t\tMatcher m = p.matcher(strAry[j]);\n\t\t\t\tif(m.find()){\n\t\t\t\t\tint x = Integer.valueOf(m.group(0)).intValue();\n\t\t\t\t\tinp.add(x);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprint_poker(inp);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n//Poker Hand\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString[] ss = sc.next().split(\",\");\n\t\t\tint[] c = new int[14];\n\t\t\tint max = 0;\n\t\t\tfor(String s:ss){\n\t\t\t\tmax = Math.max(max, ++c[Integer.parseInt(s)]);\n\t\t\t}\n\t\t\tif(max==4){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}\n\t\t\telse if(max==3){\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int i=1;i<=13;i++){\n\t\t\t\t\tif(c[i]==2){\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f?\"full house\":\"three card\");\n\t\t\t}\n\t\t\telse if(max==2){\n\t\t\t\tint k = 0;\n\t\t\t\tfor(int i=1;i<=13;i++){\n\t\t\t\t\tif(c[i]==2)k++;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(k==2?\"two pair\":\"one pair\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int i=1;i<=13;i++){\n\t\t\t\t\tif(c[i]==1){\n\t\t\t\t\t\tboolean ff = true;\n\t\t\t\t\t\tfor(int j=i+1;j<=i+4;j++){\n\t\t\t\t\t\t\tif(c[j]!=1){\n\t\t\t\t\t\t\t\tff = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tf = ff;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f?\"straight\":\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nclass Main {\n\n        static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n        public static void main(String[] args) throws Exception{\n            String row;\n            while ((row = reader.readLine()) != null) {\n                String[] temps = row.split(\",\");\n                int[] cards = new int[5];\n                for (int i=0; i<temps.length; i++)\n                    cards[i] = Integer.parseInt(temps[i]);\n\n                HashMap<Integer, Integer> dist = new HashMap<Integer, Integer>();\n\n                for (int i=0; i<5; i++) {\n                    if (dist.containsKey(cards[i])) {\n                        dist.put(cards[i], dist.get(cards[i]) + 1);\n                    } else {\n                        dist.put(cards[i],  1);\n                    } \n                }\n\n                int max_dist = 0;\n                Set<Integer> keys = dist.keySet();\n                \n                for (int key : keys) {\n                    if (max_dist < dist.get(key)) {\n                        max_dist = dist.get(key);\n                    }\n                }\n\n                Integer[] a = keys.toArray(new Integer[0]);\n                Integer[] p = new Integer[a.length];\n                \n                for (int i=0; i<a.length; i++)\n                    p[i] = dist.get(a[i]);\n\n                Arrays.sort(p);\n\n                if (keys.size() == 3 && max_dist < 3  && p[1] == 2 && p[2] == 2) {\n                    max_dist = -3;\n                } \n                \n                if (keys.size() == 2 && max_dist < 4) {\n                    if(p[0] == 2 && p[1] == 3) {\n                        max_dist = -1; \n                    }\n                }\n\n\n                if (keys.size() == 5 && max_dist < 4) {\n\n                    boolean flag = true;\n                    for (int i=1; i<5; i++) {\n                        if (a[i] - a[i-1] != 1) {\n                            flag = false;\n                        } \n                    }\n\n                    if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) {\n                       flag = true; \n                    }\n\n                    if (flag) {\n                        max_dist = -2;    \n                    }\n                }\n\n                String msg = \"\";\n                switch (max_dist) {\n                    case 2:\n                        msg = \"one pair\";\n                        break;\n                    case -3:\n                        msg = \"two pair\";\n                        break;\n                    case 3:\n                        msg = \"three card\";\n                        break;\n                    case -2:\n                        msg = \"straight\";\n                        break;\n                    case 4:\n                        msg = \"four card\";\n                        break;\n                    case -1:\n                        msg = \"full house\";\n                        break;\n                    default:\n                        msg = \"null\";\n                        break;\n                }\n                \n                System.out.println(msg);\n\n            }\n        }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\tScanner sc = new Scanner(System.in);\n\n\tpublic void run() {\n\t\twhile (sc.hasNext()) {\n\t\t\tString str = sc.next();\n\t\t\tString[] c = str.split(\",\");\n\t\t\tint[] vals=new int[5];\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tvals[i]=Integer.parseInt(c[i]);\n\t\t\t}\n\t\t\tArrays.sort(vals);\n\n\t\t\tInteger[] match = new Integer[5];\n\t\t\tArrays.fill(match,0);\n\t\t\tboolean isStreight = true;\n\t\t\tint prev = -1;\n\t\t\tfor (int i = 0, j = -1; i < 5; i++) {\n\t\t\t\tif (prev != vals[i])\n\t\t\t\t\tj++;\n\t\t\t\tif (i > 0 && (prev + 1 != vals[i]) ){\n\t\t\t\t\t\tisStreight = false;\n\t\t\t\t}\n\t\t\t\tprev = vals[i];\n\t\t\t\tmatch[j]++;\n\t\t\t}\n\n\t\t\tif(Arrays.equals(vals,new int[]{1,10,11,12,13})){\n\t\t\t\tisStreight=true;\n\t\t\t}\n\n\t\t\tArrays.sort(match, Collections.reverseOrder());\n\n\t\t\tswitch (match[0]) {\n\t\t\tcase 4:\n\t\t\t\tln(\"four card\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (match[1] == 2) {\n\t\t\t\t\tln(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (isStreight) {\n\t\t\t\t\tln(\"straight\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tln(\"three card\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (isStreight) {\n\t\t\t\t\tln(\"straight\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tswitch (match[1]) {\n\t\t\t\tcase 2:\n\t\t\t\t\tln(\"two pair\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tln(\"one pair\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (isStreight) {\n\t\t\t\t\tln(\"straight\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tln(\"null\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tpublic static void pr(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\n\tpublic static void ln(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\n\tpublic static void ln() {\n\t\tSystem.out.println();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\nclass Main {\n\n    public static void main( final String[] args ) {\n\n\tfinal Scanner stdin = new Scanner( System.in );\n\n\twhile ( stdin.hasNextLine() ) {\n\n\t    final String[] input = stdin.nextLine().split( \",\" );\n\n\t    int[] hand = new int[5];\n\t    for ( int i = 0; i < 5; i++ ) {\n\t\thand[i] = Integer.parseInt( input[i] );\n\t\tif ( hand[i] == 1 ) {\n\t\t    hand[i] = 14;\n\t\t}\n\t    }\n\n\t    Arrays.sort( hand );\n\t    if ( isFourCard( hand ) ) {\n\t\tSystem.out.println( \"four card\" );\n\t    } else if ( isFullHouse( hand ) ) {\n\t\tSystem.out.println( \"full house\" );\n\t    } else if ( isStraight( hand ) ) {\n\t\tSystem.out.println( \"straight\" );\n\t    } else if ( isThreeCard( hand ) ) {\n\t\tSystem.out.println( \"three card\" );\n\t    } else if ( isTwoPair( hand ) ) {\n\t\tSystem.out.println( \"two pair\" );\n\t    } else if ( isOnePair( hand ) ) {\n\t\tSystem.out.println( \"one pair\" );\n\t    } else {\n\t\tSystem.out.println( \"null\" );\n\t    }\n\t}\t\n    }\n\n    static int getDuplicateOf( int[] hands, int noOfDup ) {\n\tint ans = 0;\n\t\n\tint index = 0;\n\twhile ( index < hands.length ) {\n\t    int no = hands[index];\n\t    int counter = 0;\n\t    while ( index < hands.length && no == hands[index] ) {\n\t\tcounter++;\n\t\tindex++;\n\t    }\n\t    if ( counter == noOfDup ) {\n\t\tans++;\n\t    }\n\t}\n\treturn ans;\n    }\n\n    static boolean isOnePair( int[] hand ) {\n\treturn getDuplicateOf( hand, 2 ) == 1;\n    }\n\n    static boolean isTwoPair( int[] hand ) {\n\treturn getDuplicateOf( hand, 2 ) == 2;\n    }\n\n    static boolean isThreeCard( int[] hand ) {\n\treturn getDuplicateOf( hand, 3 ) == 1;\n    }\n\n    static boolean isFullHouse( int[] hand ) {\n\treturn getDuplicateOf( hand, 2 ) == 1 &&\n\t    getDuplicateOf( hand, 3 ) == 1;\n    }\n\n    static boolean isFourCard( int[] hand ) {\n\treturn getDuplicateOf( hand, 4 ) == 1;\n    }\n\n    static boolean isStraight( int[] hand ) {\n\tif ( hand[0] == 2 && hand[1] == 3 && hand[2] == 4 && hand[3] == 5 && hand[4] == 14 ) {\n\t    return true;\n\t} else if ( 2 <= hand[0] && hand[0] <= 10 ) {\n\t    for ( int i = 0; i < 5; i++ ) {\n\t\tif ( hand[i] != hand[0] + i ) {\n\t\t    return false;\n\t\t}\n\t    }\n\t    return true;\n\t} else {\n\t    return false;\n\t}\t   \n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\n\t\tString line;\n\t\tString[] cards;\n\t\twhile (sc.hasNext() == true) {\n\t\t\tline = sc.nextLine();\n\t\t\t\n\t\t\tcards = line.split(\",\");\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\t\tint pre = 0;\n\t\t\tboolean straight = false;\n\t\t\t\n\t\t\tint[] point = new int[13];\n\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\tint tmp = Integer.parseInt(cards[i]);\n\t\t\t\tpoint[tmp]++;\n\t\t\t\t\n\t\t\t\tif (pre != 0) {\n\t\t\t\t\tif ((pre + 1) != tmp) {\n\t\t\t\t\t\tif ((pre != 1) || (tmp != 10)) straight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tint[] judge = new int[4];\n\t\t\tfor (int i = 0; i < point.length; i++) {\n\t\t\t\tjudge[point[i]]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (judge[3] == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if ((judge[1] == 1) && (judge[2] == 1)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (judge[0] == 5) {\n\t\t\t\tif (straight == true) System.out.println(\"full house\");\n\t\t\t} else if (judge[2] == 1) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (judge[1] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (judge[1] == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tclass Hand {\n\t\tfinal String[] win = new String[] {\n\t\t\t\"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"\n\t\t};\n\n\t\tint[] cards;\n\n\t\tpublic Hand(String s) {\n\t\t\tcards = new int[5];\n\t\t\tString[] ss = s.split(\",\");\n\t\t\tfor (int i = 0 ; i < 5 ; i++) cards[i] = Integer.parseInt(ss[i]);\n\t\t\tArrays.sort(cards);\n\t\t}\n\n\t\tpublic void display() {\n\t\t\tSystem.out.println(Arrays.toString(cards));\n\t\t}\n\n\t\tpublic int judge() {\n\t\t\tint[] temp = new int[5];\n\t\t\tint[] accum = new int[14];\n\t\t\tfor (int i = 0 ; i < 5 ; i++) {\n\t\t\t\ttemp[i] = cards[i] - cards[0];\n\t\t\t\taccum[temp[i]] += 1;\n\t\t\t}\n\t\t\tArrays.sort(accum);\n\t\t\tif (Arrays.binarySearch(accum, 4) >= 0) return 6;\n\t\t\tif (Arrays.binarySearch(accum, 3) >= 0) {\n\t\t\t\tif (Arrays.binarySearch(accum, 2) >= 0) return 5;\n\t\t\t\telse return 3;\n\t\t\t}\n\t\t\tif (Arrays.equals(temp, (new int[] {0,1,2,3,4}))) return 4;\n\t\t\tint count = 0;\n\t\t\tfor (int i = 1 ; i < 14 ; i++)\n\t\t\t\tif (accum[i] == 2) count++;\n\t\t\tswitch (count) {\n\t\t\tcase 1: return 1;\n\t\t\tcase 2: return 2;\n\t\t\tdefault: return 0;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tMain m = new Main();\n\n\t\tString line;\n\t\twhile ((line = sc.nextLine()) != null) {\n\t\t\tHand hand = m.new Hand(line);\n\t\t\tSystem.out.println(hand.win[hand.judge()]);\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "/**\n * \n */\nimport java.util.*;\n/**\n * @author akira\n *\n */\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO 自動生成されたメソッド・スタブ\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()){\n\t\t\tint[] card = new int[5];\n\t\t\tString str = scan.next();\n\t\t\tfor(int i = 0;i < 4;i++){\n\t\t\t\tcard[i] = Integer.parseInt(str.substring(0,str.indexOf(\",\")));\n\t\t\t\tstr = str.substring(str.indexOf(\",\") + 1,str.length());\n\t\t\t}\n\t\t\tcard[4] = Integer.parseInt(str);\n\t\t\tSystem.out.println(Poker.yaku(card));\n\t\t}\n\t}\n\t\n\n\n}\n\nclass Poker {\n\tstatic String yaku(int[] card) { // cardに格納するのは1~13の数字のみとする\n\t\tint[] cardNum = new int[13];\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tcardNum[card[i] - 1]++; // ここで -1 とするのは要素番号に沿わせるため\n\t\t}\n\t\tif (jFourcard(cardNum)) {\n\t\t\treturn \"four card\";\n\t\t}\n\t\telse if (jFullhouse(cardNum)) {\n\t\t\treturn \"full house\";\n\t\t}\n\t\telse if (jStraight(cardNum)) {\n\t\t\treturn \"straight\";\n\t\t}\n\t\telse if (jThreecard(cardNum)) {\n\t\t\treturn \"three card\";\n\t\t}\n\t\telse if (jTwopair(cardNum)) {\n\t\t\treturn \"two pair\";\n\t\t}\n\t\telse if (jOnepair(cardNum)) {\n\t\t\treturn \"one pair\";\n\t\t}\n\t\treturn \"null\";\n\n\t}\n\n\tstatic boolean jFourcard(int[] cardNum) {\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (cardNum[i] == 4) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic boolean jFullhouse(int[] cardNum) {\n\t\tboolean b1 = false, b2 = false;\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (cardNum[i] == 2) {\n\t\t\t\tb1 = true;\n\t\t\t} else if (cardNum[i] == 3) {\n\t\t\t\tb2 = true;\n\t\t\t}\n\t\t}\n\t\treturn b1 && b2;\n\t}\n\n\tstatic boolean jStraight(int[] cardNum) {\n\t\tfor (int i = 0; i < 9; i++) {\n\t\t\tif (cardNum[i] == 1 && cardNum[i + 1] == 1 && cardNum[i + 2] == 1\n\t\t\t\t\t&& cardNum[i + 3] == 1 && cardNum[i + 4] == 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (cardNum[9] == 1 && cardNum[10] == 1 && cardNum[11] == 1\n\t\t\t\t&& cardNum[12] == 1 && cardNum[0] == 1) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic boolean jThreecard(int[] cardNum) { // これはフルハウスを使用後に使用するべきメソッド\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (cardNum[i] == 3) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic boolean jTwopair(int[] cardNum) {\n\t\tint cnt = 0;\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (cardNum[i] == 2) {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\treturn cnt == 2;\n\t}\n\n\tstatic boolean jOnepair(int[] cardNum) {\n\t\tfor (int i = 0; i < 13; i++) {\n\t\t\tif (cardNum[i] == 2) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1 && number[1]!=1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            String[] lines = sc.next().split(\",\");\n            int[] cards = new int[13];\n            int max = 0;\n            int max2 = 0;\n            for (int i = 0; i < lines.length; i++) {\n                int n = Integer.parseInt(lines[i]) - 1;\n                cards[n]++;\n                if (max < cards[n]) {\n                    max = cards[n];\n                } else if (max2 < cards[n]) {\n                    max2 = cards[n];\n                }\n            }\n            String a = \"\";\n            if (max >= 4) {\n                a = \"four card\";\n            } else if (max == 3) {\n                if (max2 == 2) {\n                    a = \"full house\";\n                } else {\n                    a = \"three card\";\n                }\n            } else if (max == 2 && max2 == 2) {\n                a = \"two pair\";\n            } else if (max == 2) {\n                a = \"one pair\";\n            } else {\n                a = \"null\";\n                int count = 0;\n                for (int i = 0; i < 14; i++) {\n                    if (cards[i % 13] == 1) {\n                        count++;\n                        if (count == 5) {\n                            a = \"straight\";\n                            break;\n                        }\n                    } else {\n                        count = 0;\n                    }\n                }\n            }\n            System.out.println(a);\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = null;\n\t\ttry {\n\t\t\tsc = new Scanner(System.in);\n\t\t\twhile (sc.hasNextLine()) {\n\t\t\t\tString[] cards = sc.nextLine().split(\",\");\n\t\t\t\tInteger[] numbers = new Integer[5];\n\t\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\t\tnumbers[i] = Integer.parseInt(cards[i]);\n\t\t\t\t}\n\t\t\t\tArrays.sort(numbers);\n\t\t\t\tList<Integer> numberList = Arrays.asList(numbers);\n\t\t\t\tint count = 1;\n\t\t\t\tint value = 1;\n\t\t\t\t// ???????????????????????????????????????????????\\????????¢??????????????¢??????????????????????????????????????????\n\t\t\t\tfor (int i = 1; i < numberList.size(); i++) {\n\t\t\t\t\tif (numberList.get(i - 1) == numberList.get(i)) {\n\t\t\t\t\t\tcount += value;\n\t\t\t\t\t\tvalue++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count <= 1) {\n\t\t\t\t\t// ????????¬?????????????????????????????????\n\t\t\t\t\tint sum = 0;\n\t\t\t\t\tfor (int num : numberList) {\n\t\t\t\t\t\tsum += num;\n\t\t\t\t\t}\n\t\t\t\t\tif (sum == 23 || sum == 31 || sum == 39 || sum == 47) {\n\t\t\t\t\t\tcount += 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString hand = \"null\";\n\t\t\t\tswitch (count) {\n\t\t\t\tcase 7:\n\t\t\t\t\thand = \"four card\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\thand = \"straight\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\thand = \"full house\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\thand = \"three card\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\thand = \"two pair\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\thand = \"one pair\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(hand);\n\t\t\t}\n\n\t\t} finally {\n\t\t\tsc.close();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\t\n\t\twhile(stdIn.hasNext()){\n\t\t\tString str = stdIn.nextLine();\n\t\t\tint[] number = new int[5];\n\t\t\tint[] count = new int[14];\n\t\t\tint j = 0;\n\t\t\tfor(int i=0;i<str.length();i++){\n\t\t\t\tif('0'<=str.charAt(i) && str.charAt(i)<='9'){\n\t\t\t\t\tnumber[j]=number[j]*10;\n\t\t\t\t\tnumber[j]+=(int)str.charAt(i)-(int)'0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(number);\n\t\t\tj=0;\n\t\t\tint k=0;\n\t\t\tint count_x =0;\n\t\t\twhile(k<number.length){\n\t\t\t\tif(number[k]==j){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t\tif(0<k){\n\t\t\t\t\t\tif(number[k]-number[k-1]==1){\n\t\t\t\t\t\t\tcount_x++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tcount_x=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count_3 = 0;\n\t\t\tint count_2 = 0;\n\t\t\tfor(int i=0;i<14;i++){\n\t\t\t\tif(count[i]==4){\n\t\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==3){\n\t\t\t\t\tcount_3++;\n\t\t\t\t}\n\t\t\t\telse if(count[i]==2){\n\t\t\t\t\tcount_2++;\n\t\t\t\t}\n\t\t\t\tif(count_3==1&&count_2==1){\n\t\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i==12){\n\t\t\t\t\tif(count_x == 4 || (count_x == 3 && number[0]==1)){\n\t\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_3==1){\n\t\t\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==2){\n\t\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(count_2==1){\n\t\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n  public static void main(String[] args){\n    Scanner sc = new Scanner(System.in);\n    while(sc.hasNext()) {\n      String str = sc.next();\n      String[] strArr = str.split(\",\");\n      int[] cardNum = new int[14];\n      int[] card    = new int[5];\n      for(int i = 0; i < 5; i++) {\n        card[i] = Integer.parseInt(strArr[i]);\n        cardNum[card[i]]++;\n      }\n      Arrays.sort(card);\n      boolean isStraight = true;\n      for (int i = 0; i < 4; i++) {\n        if (card[i] + 1 != card[i+1]) {\n          isStraight = false;\n        }\n      }\n      if (card[0] == 1  && card[1] == 10 && card[2] == 11 &&\n          card[3] == 12 && card[4] == 13) {\n        isStraight = true;\n      }\n      int max1 = 0;\n      int max2 = 0;\n      for(int i = 0; i < 14; i++) {\n        if(cardNum[i] > max1) {\n          max2 = max1;\n          max1 = cardNum[i];\n        }\n        else if(cardNum[i] > max2) {\n          max2 = cardNum[i];\n        }\n      }\n      if (max1 == 4) {\n        System.out.println(\"four card\");\n      }\n      else if (max1 == 3 && max2 == 2) {\n        System.out.println(\"full house\");\n      }\n      else if (isStraight) {\n        System.out.println(\"straight\");\n      }\n      else if (max1 == 3) {\n        System.out.println(\"three card\");\n      }\n      else if (max1 == 2) {\n        if (max2 ==2) {\n          System.out.println(\"two pair\");\n        }\n        else {\n          System.out.println(\"one pair\");\n        }\n      }\n      else {\n        System.out.println(\"null\");\n      }\n    }\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n\n    /**\n     * ?????????????????????\n     */\n    public static void main(String[] args) throws IOException {\n\n        // ??\\????????????????????????MAX50??¶??¨???????????????????????§????????¨????????????????????§OK???\n        List<Hand> hands = readHands();\n\n        // 1??¶??????????????????\n        for (Hand hand : hands) {\n\n            // ??????????????????\n            String handName = hand.judge();\n\n            // ?????????????????????\n            System.out.println(handName);\n\n        }\n    }\n\n    /**\n     * ?¨??????\\???????????????????????????1??????????????????????????????????????¨???????????´?????????\n     *\n     * @return ???????????????\n     */\n    protected static List<Hand> readHands() throws IOException {\n\n        // ????????????????????¨?????????\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                System.in));\n\n        List<Hand> hands = new ArrayList<Hand>();\n        String line = null;\n        // ?¨??????\\?????????1???????????????????????????????????????\n        while ((line = reader.readLine()) != null) {\n            String[] values = line.split(\",\");\n\n            // ??????????????°??????????????????\n            int[] cards = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                cards[i] = Integer.parseInt(values[i]);\n            }\n\n            // ??????????????????????????????????????????????????????\n            hands.add(new Hand(cards));\n        }\n\n        // ????????????????????????????????????\n        if (reader != null) {\n            reader.close();\n        }\n\n        return hands;\n    }\n\n    /**\n     * ???????????¨????????????\n     */\n    static class Hand {\n\n        /** ??????????????± */\n        int[] cards;\n\n        /**\n         * ?????°??§???????????????????????????????????????\n         *\n         * @param cards ?????????\n         */\n        public Hand(final int[] cards) {\n            // ?????????????????¨???????????????\n            this.cards = new int[5];\n            System.arraycopy(cards, 0, this.cards, 0, cards.length);\n        }\n\n        /**\n         * ??????????????????????????????\n         *\n         * @return ???????????????????????´??????null????????????\n         */\n        public String judge() {\n\n            // ?????°?????????????????????\n            int[] numberOfCards = new int[14]; // ??????????????????0????????¨?????????\n            for (int card : cards) {\n                numberOfCards[card]++;\n            }\n\n            // ?????°????????§????????§??????????????¢???\n            int pair = 0;\n            int threeCard = 0;\n            int fourCard = 0;\n            for (int number : numberOfCards) {\n                switch (number) {\n                case 2:\n                    pair++;\n                    break;\n                case 3:\n                    threeCard++;\n                    break;\n                case 4:\n                    fourCard++;\n                    break;\n                }\n            }\n\n            // ??????????????????\n            if (fourCard > 0) {\n                return \"four card\";\n            }\n\n            // ???????????????\n            if (pair > 0 && threeCard > 0) {\n                return \"full house\";\n            }\n\n            // ????????¬?????????????????§??????????????§????????¬??????????????§????????????\n            int[] straightJudge = new int[5];\n            System.arraycopy(cards, 0, straightJudge, 0, cards.length);\n            Arrays.sort(straightJudge);\n\n            // ??????????????????5??£?¶???§????????§?????????OK\n            int sequenceCount = 0;\n            for (int i = 1; i < straightJudge.length; i++) {\n                if ((straightJudge[i] - straightJudge[i - 1]) == 1) {\n                    sequenceCount++;\n                }\n            }\n            if (sequenceCount == 4) {\n                return \"straight\";\n            }\n\n            // A??????????????????????????¬??????????????\\???????????????\n            if (straightJudge[0] == 1 && straightJudge[1] == 10 && straightJudge[2] == 11 && straightJudge[3] == 12\n                    && straightJudge[4] == 13) {\n                return \"straight\";\n            }\n\n            // ??????????????????\n            if (threeCard > 0) {\n                return \"three card\";\n            }\n\n            // ???????????¢\n            if (pair > 1) {\n                return \"two pair\";\n            }\n\n            if (pair > 0) {\n                return \"one pair\";\n            }\n            return null;\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport static java.util.Arrays.deepToString;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tvoid tr(Object... os) {\n\t\tSystem.err.println(deepToString(os));\n\t}\n\n\tScanner sc = new Scanner(System.in);\n\tpublic void run() {\n\t\twhile (sc.hasNext()) {\n\t\t\tString[] ss = sc.nextLine().split(\",\");\n\t\t\tint[] hands = new int[5];\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\thands[i] = Integer.parseInt(ss[i]);\n\t\t\t}\n\t\t\tArrays.sort(hands);\n\t\t\tString res = \"null\";\n\t\t\tif (isOnePair(hands)) res = \"one pair\";\n\t\t\tif (isTwoPair(hands)) res = \"two pair\";\n\t\t\tif (isThreeCard(hands)) res = \"three card\";\n\t\t\tif (isStraight(hands)) res = \"straight\";\n\t\t\tif (isFullHouse(hands)) res = \"full house\";\n\t\t\tif (isFourCard(hands)) res = \"four card\";\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\t\n\t}\n\t\n\tint[] getCount(int[] hands) {\n\t\tint[] count = new int[14];\n\t\tfor (int i = 0; i < hands.length; i++) {\n\t\t\tcount[hands[i]]++;\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tprivate boolean isFourCard(int[] hands) {\n\t\tint[] count = getCount(hands);\n\t\tfor (int i = 1; i <= 13; i++) if (count[i] >= 4) return true;\n\t\treturn false;\n\t}\n\tprivate boolean isFullHouse(int[] hands) {\n\t\tint[] count = getCount(hands);\n\t\tint ch = 0;\n\t\tfor (int i = 1; i <= 13; i++) \n\t\t\tif (count[i] == 3) ch |= 1;\n\t\t\telse if (count[i] == 2) ch |= 2;\n\t\treturn ch == 3;\n\t}\n\tprivate boolean isStraight(int[] hands) {\n\t\tint k = 0;\n\t\tfor (int i = 0; i + 1 < hands.length; i++) {\n\t\t\tif (hands[i+1] - hands[i] == 1) {\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif (k == 4) return true;\n\t\treturn hands[0] == 1 && \n\t\t\t\thands[1] == 10 &&\n\t\t\t\thands[2] == 11 &&\n\t\t\t\thands[3] == 12 &&\n\t\t\t\thands[4] == 13;\n\t}\n\tprivate boolean isThreeCard(int[] hands) {\n\t\tint[] count = getCount(hands);\n\t\tfor (int i = 1; i <= 13; i++) if (count[i] >= 3) return true;\n\t\treturn false;\n\t}\n\tprivate boolean isTwoPair(int[] hands) {\n\t\tint[] count = getCount(hands);\n\t\tint p = 0;\n\t\tfor (int i = 1; i <= 13; i++) if (count[i] >= 2) p++;\n\t\treturn p >= 2;\n\t}\n\tprivate boolean isOnePair(int[] hands) {\n\t\tint[] count = getCount(hands);\n\t\tfor (int i = 1; i <= 13; i++) if (count[i] >= 2) return true;\n\t\treturn false;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int[] count;\n    int a, i, j, k;\n    char[] ch;\n    String str;\n\n    count = new int[13];\n    for(;sc.hasNext();){\n      str = sc.next();\n      ch = new char[str.length()];\n      for(j = 0;j < str.length();j++)ch[j] = str.charAt(j);\n      a = 0; k = 0;\n      for(i = 0;i < 13;i++)count[i] = 0;\n\n      j = 0;\n      for(i = 0;i < 4;i++){\n        for(;j < str.length();j++){\n          if(ch[j] == ','){\n            a = readint(ch, k, j);\n            count[(a + 11) % 13]++;\n            k = ++j; break;\n          }\n        }\n      }\n      a = readint(ch, k, str.length());\n      count[(a + 11) % 13]++;\n\n      a = 0;\n      for(i = 0;i < 13;i++){\n        if(count[i] == 4){\n          out.println(\"four card\"); a = -1; break;\n        }else if(count[i] == 3){\n          for(j = 0;j < 13;j++){\n            if(count[j] == 2){\n              out.println(\"full house\"); a = -1; break;\n            }\n          }\n          if(a != -1){\n            out.println(\"three card\"); a = -1; break;\n          }\n        }else if(count[i] == 2){\n          for(j = 0;j < 13;j++){\n            if(count[j] == 2 && j != i){\n              out.println(\"two pair\"); a = -1; break;\n            }else if(count[j] == 3){\n              out.println(\"full house\"); a = -1; break;\n            }\n          }\n          if(a != -1){\n            out.println(\"one pair\"); a = -1; break;\n          }\n        }else if(count[i] == 1){\n          if(i < 9 && count[i + 1] == 1 && count[i + 2] == 1\n           && count[i + 3] == 1 && count[i + 4] == 1){\n             out.println(\"straight\"); a = -1; break;\n          }else if(i == 0 && count[1] == 1 && count[2] == 1\n           && count[3] == 1 && count[12] == 1){\n             out.println(\"straight\"); a = -1; break;\n          }\n        }\n        if(a == -1)break;\n      }\n      if(a == 0)out.println(\"null\");\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n  private static int readint(char[] ch, int l, int r){\n    int i, d, res;\n    d = 1; res = 0;\n    for(i = r - 1;i >= l;i--){\n      res += d * (int)(ch[i] - '0');\n      d *= 10;\n    }\n    return res;\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\tpublic class Main{\n\t\tpublic static void main(String args[]){\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint count[] = {0,0,0,0,0};\n\t\t\tint num[] = new int[5];\n\t\t\twhile(sc.hasNext()){\n\t\t\t\tboolean boo = false;\n\t\t\t\tString str = sc.nextLine();\n\t\t\t\tString[] get = str.split(\",\",0);\n\t\t\t\tArrays.sort(get);\n\t\t\t\tfor(int i = 0;i < 5; i++){\n\t\t\t\t\tnum[i]=Integer.parseInt(get[i]);\n\t\t\t\t}\n\t\t\t\tCheck(num[0],num[1],num[2],num[3],num[4],boo);\n\t\t\t\tfor(int i = 0; i < 5; i ++){\t\n\t\t\t\t\tfor(int j = 0; j < 5; j ++){\n\t\t\t\t\t\tif(get[i].equals(get[j])){\n\t\t\t\t\t\t\tcount[i]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(count[4]==4){System.out.println(\"four card\");continue;}\n\t\t\t\tif(count[4]==3&&count[3]==2){System.out.println(\"full house\");continue;}\n\t\t\t\tif(boo){System.out.println(\"straight\");continue;}\n\t\t\t\tif(count[4]==3){System.out.println(\"three card\");continue;}\n\t\t\t\tif(count[4]==count[3])if(count[2]==count[1]){\n\t\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t\tpublic static void Check(int a,int b,int c,int d,int e,boolean f){\n\t\t\tint count2 = 0;\n\t\t\tif(e - d == d - c && c - b == b - a){\n\t\t\t\tf = true;\n\t\t\t}else if (e == 13 && a == 1){\n\t\t\t\tif(b - a == 1 || b - a == -1 )count2 ++;\n\t\t\t\tif(c - b == 1 || c - b == -1 )count2 ++;\n\t\t\t\tif(d - c == 1 || d - c == -1 )count2 ++;\n\t\t\t\tif(e - d == 1 || e - d == -1 )count2 ++;\n\t\t\t\tif(count2==3){\n\t\t\t\t\tf = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\n    static void solve (String line) {\n        String[] cardsString = line.split(\",\");\n        ArrayList<Integer> cards = new ArrayList<Integer>(5);\n        for(int i = 0; i < 5; i++) {\n            cards.add(Integer.parseInt(cardsString[i]));\n        }\n\n        Collections.sort(cards);\n\n        if (cards.get(0) == cards.get(1)) {\n            if (cards.get(1) == cards.get(2) && cards.get(2) == cards.get(3)) {\n                System.out.println(\"four card\");\n                return;\n            } else if (cards.get(1) == cards.get(2) || (cards.get(2) == cards.get(3) && cards.get(3) == cards.get(4))) {\n                System.out.println(\"full house\");\n                return;\n            }\n        }\n\n        if (cards.get(1) == cards.get(2) && cards.get(2) == cards.get(3) && cards.get(3) == cards.get(4) ) {\n            System.out.println(\"four card\");\n            return;\n        }\n\n        if (cards.get(1) == cards.get(0) + 1 && cards.get(2) == cards.get(1) + 1 && cards.get(3) == cards.get(2) + 1 && cards.get(4) == cards.get(3) + 1) {\n            System.out.println(\"straight\");\n            return;\n        }\n        if (cards.get(0) == 1 && cards.get(1) == 10 && cards.get(2) == 11 && cards.get(3) == 12 && cards.get(4) == 13) {\n            System.out.println(\"straight\");\n            return;\n        }\n\n        if ( (cards.get(0) == cards.get(1) && cards.get(1) == cards.get(2)) || (cards.get(1) == cards.get(2) && cards.get(2) == cards.get(3)) || (cards.get(2) == cards.get(3) && cards.get(3) == cards.get(4)) ) {\n            System.out.println(\"three card\");\n            return;\n        }\n\n        if ( (cards.get(0) == cards.get(1) && cards.get(2) == cards.get(3)) || (cards.get(0) == cards.get(1) && cards.get(3) == cards.get(4)) || (cards.get(1) == cards.get(2) || cards.get(3) == cards.get(4)) ) {\n            System.out.println(\"two pair\");\n            return;\n        }\n\n        if ( cards.get(0) == cards.get(1) || cards.get(1) == cards.get(2) || cards.get(2) == cards.get(3) || cards.get(3) == cards.get(4) ) {\n            System.out.println(\"one pair\");\n            return;\n        }\n\n        System.out.println(\"null\");\n    }\n\n    public static void main (String [] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        while(sc.hasNext()) {\n            solve(sc.nextLine());\n        }\n\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str,strArray[];\n\t\tint nArray[] = new int[5];\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile(scan.hasNext()){\n\t\t\tstrArray = scan.next().split(\",\");\n\n\t\t\tfor(int i=0; i<5; i++){\n\t\t\t\tnArray[i] = Integer.parseInt(strArray[i]);\n\t\t\t}\n\n\t\t\tArrays.sort(nArray);\n\t\t\tSystem.out.println(judgement(nArray));\n\n\t\t}\n\t}\n\n\tstatic String judgement(int n[]){\n\t\tString re=\"null\";\n\t\tif(n[0] == 1 && n[1] == 10 && n[2] == 11 && n[3] == 12 && n[4] == 13){\n\t\t\tre=\"straight\";\n\t\t}\n\t\telse if(n[1]==n[0]+1 && n[2]==n[1]+1 && n[3]==n[2]+1 && n[4]==n[3]+1){\n\t\t\tre=\"straight\";\n\t\t}\n\t\telse if((n[0]==n[2] && n[1]==n[3]) || (n[1]==n[3] && n[2]==n[4])){\n\t\t\tre=\"four card\";\n\t\t}\n\t\telse if((n[0]==n[2] || n[2]==n[4]) && (n[0]==n[1] || n[3]==n[4])){\n\t\t\tre=\"full house\";\n\t\t}\n\t\telse if(n[0]==n[2] || n[1]==n[3] || n[2]==n[4]){\n\t\t\tre=\"three card\";\n\t\t}\n\t\telse if((n[0]==n[1] && (n[2]==n[3] || n[3]==n[4])) ||\n\t\t\t\t((n[0]==n[1] || n[1]==n[2]) && n[3]==n[4])){\n\t\t\tre=\"two pair\";\n\t\t}\n\t\telse if(n[0]==n[1] || n[1]==n[2] || n[2]==n[3] || n[3]==n[4]){\n\t\t\tre=\"one pair\";\n\t\t}\n\t\treturn re;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in).useDelimiter(\"(,|\\r\\n|\\r|\\n)\");\n\t\tint[] c = new int[14];\n\t\tint[] n = new int[5];\n\t\twhile (sc.hasNextInt()) {\n\t\t\tfor (int i = 0; i < 14; i++)\n\t\t\t\tc[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++)\n\t\t\t\tn[i] = 0;\n\t\t\tfor (int i = 0; i < 5; i++){\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tc[a - 1]++;\n\t\t\t}\n\t\t\tfor (int i = 0; i < 13; i++)\n\t\t\t\tn[c[i]]++;\n\t\t\tc[13] = c[0];\n\t\t\tint j = 13;\n\t\t\twhile (j > 3 && c[j] <= 0)\n\t\t\t\tj--;\n\t\t\tif (n[4] > 0) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if (n[3] > 0 && n[2] > 0) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (j > 3 && c[j - 1] > 0 && c[j - 2] > 0 && c[j - 3] > 0 && c[j - 4] > 0) {\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t} else if (n[3] > 0) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (n[2] > 1) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (n[2] > 0) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tprivate static boolean checkFourCard(int[] group){\n\t\tboolean flag = false;\n\t\tfor(int i=1; i<group.length; ++i){\n\t\t\tif(group[i] == 4){\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\tprivate static boolean checkFullHouse(int[] group){\n\t\tboolean two=false, three=false;\n\t\t\n\t\tfor(int i=1; i<group.length; ++i){\n\t\t\tif(group[i] == 2){\n\t\t\t\ttwo = true;\n\t\t\t}else if(group[i] == 3){\n\t\t\t\tthree = true;\n\t\t\t}\n\t\t}\n\t\tif(two && three){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tprivate static boolean checkStraight(int[] group){\n\t\tboolean flag = false;\n\t\tint count = 0;\n\t\t\n\t\tfor(int i=1; i<group.length; ++i){\n\t\t\tif(group[i] == 1){\n\t\t\t\t//またいだ回数\n\t\t\t\tint over = 0;\n\t\t\t\tfor(int j=i; j<i+5; ++j){\n\t\t\t\t\tover += j/group.length;\n\t\t\t\t\tif(over > 1){\t//2まで行ったら、\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint num = j%13;\n\t\t\t\t\tif(num == 0){ num = 13; }\n\t\t\t\t\tif(group[num] == 1){\n\t\t\t\t\t\t++count;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(count == 5){\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn flag;\n\t}\n\tprivate static boolean checkThreeCard(int[] group){\n\t\tboolean flag = false;\n\t\t\n\t\tfor(int i=1; i<group.length; ++i){\n\t\t\t//main で else if やっているから大丈夫だけど、full house 誤認防止\n\t\t\tif(group[i] == 2){\n\t\t\t\treturn false;\n\t\t\t}else if(group[i] == 3){\t\t//four cardもfalseで帰る。\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn flag;\n\t}\n\t\n\tprivate static boolean checkTwoPair(int[] group){\n\t\tboolean flag = false;\n\t\t\n\t\tfor(int i=1; i<group.length; ++i){\n\t\t\tif(flag){\t\t//one pair あった上で見つかったら、\n\t\t\t\tif(group[i] == 2){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(group[i] == 2){\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tprivate static boolean checkOnePair(int[] group){\n\t\tboolean flag = false;\n\t\t\n\t\tfor(int i=1; i<group.length; ++i){\n\t\t\tif(flag){\t\t//one pair あった上で見つかったら、\n\t\t\t\tif(group[i] == 2 || group[i] == 3){\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(group[i] == 2){\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn flag;\n\t}\n\t\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner scan = new Scanner(System.in);\n\t\tint hand[] = new int [5];\n\t\t\n\t\twhile(scan.hasNext()){\n\t\t\tString[] str = scan.next().split(\",\");\n\t\t\tfor(int i=0; i<str.length; ++i){\n\t\t\t\thand[i] = Integer.parseInt(str[i]);\n\t\t\t}\n\t\t\t\n\t\t\tint group[] = new int [14];\t//添字がカードナンバと対応。０は欠番\n\t\t\tArrays.fill(group, 0);\n\t\t\tfor(int i=0; i<hand.length; ++i){\n\t\t\t\t++group[hand[i]];\n\t\t\t}\n\t\t\t\n\t\t\tif(checkFourCard(group)){\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t}else if(checkFullHouse(group)){\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t}else if(checkStraight(group)){\n\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t}else if(checkThreeCard(group)){\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t}else if(checkTwoPair(group)){\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t}else if(checkOnePair(group)){\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n\n        Scanner sc=new Scanner(System.in);\n\n        while(sc.hasNext()){\n            String[] st=sc.next().split(\",\");\n            int[] card = new int[5];\n            for(int i=0; i<5;i++){\n            \tcard[i]=Integer.parseInt(st[i]);\n            }\n            Arrays.sort(card);\n            System.out.println(judge(card));\n\n        }\n    }\n\n    public static String judge(int[] card){\n    \tif(card[0]==card[3] || card[1]==card[4])return \"four card\";\n        if((card[0]==card[1] && card[2]==card[4]) || (card[0]==card[2] && card[3]==card[4]))return \"full house\";\n        if(card[0]+1 == card[1] && card[1]+1 == card[2] && card[2]+1 == card[3] && card[3]+1 == card[4])return \"straight\";\n        if(card[0] == 1 && card[1] == 10 && card[2] == 11 && card[3] == 12 && card[4] == 13)return \"straight\";\n        if(card[0]==card[2] || card[1]==card[3] || card[2]==card[4])return \"three card\";\n        if((card[0]==card[1] && card[2]==card[3]) || (card[0]==card[1] && card[3]==card[4]) || (card[1]==card[2] && card[3]==card[4]))return \"two pair\";\n        if(card[0]==card[1] || card[1]==card[2] || card[2]==card[3] || card[3]==card[4])return \"one pair\";\n\t\treturn null;\n\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\n\t\tString line;\n\t\tString[] cards;\n\t\twhile (sc.hasNext() == true) {\n\t\t\tline = sc.nextLine();\n\t\t\t\n\t\t\tcards = line.split(\",\");\n\t\t\tArrays.sort(cards);\n\t\t\t\n\t\t\tint pre = 0;\n\t\t\tboolean straight = false;\n\t\t\t\n\t\t\tint[] point = new int[14];\n\t\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\t\tint tmp = Integer.parseInt(cards[i]);\n\t\t\t\tpoint[tmp]++;\n\t\t\t\t\n\t\t\t\tif (pre != 0) {\n\t\t\t\t\tif ((pre + 1) != tmp) {\n\t\t\t\t\t\tif ((pre != 1) || (tmp != 10)) straight = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tint[] judge = new int[5];\n\t\t\tfor (int i = 0; i < point.length; i++) {\n\t\t\t\tjudge[point[i]]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (judge[4] == 1) {\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t} else if ((judge[2] == 1) && (judge[3] == 1)) {\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t} else if (judge[1] == 5) {\n\t\t\t\tif (straight == true) System.out.println(\"full house\");\n\t\t\t} else if (judge[3] == 1) {\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t} else if (judge[2] == 2) {\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t} else if (judge[2] == 1) {\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\n\n class Main{\n     public static void main(String args[]){\n         Scanner sc = new Scanner(System.in);\n         String line;\n         while((line=sc.nextLine())!=null){\n             String[] split=line.split(\",\");\n             int[] ints = new int[5]; for(int i=0;i<5;i++)ints[i]=Integer.parseInt(split[i]);\n             if(!_4c(ints))if(!fullH(ints))if(!st(ints))if(!_3c(ints))if(!_2p(ints))if(!_1p(ints))\n                 System.out.println(\"null\");\n         }\n         \n         \n     }\n     static boolean _4c(int[] ints){\n         if(ints[1]==ints[2]&&ints[1]==ints[3]&&ints[1]==ints[4]){System.out.println(\"four card\");\n         return true;}\n         int count=0; for(int x : ints) if(x==ints[0])count++;\n         if(count==4){System.out.println(\"four card\");return true;}\n         return false;\n     }\n     static boolean fullH(int[] ints){\n         HashSet<Integer>hs=new HashSet<Integer>();\n         for(int x:ints) hs.add(x);\n         if(hs.size()==2){System.out.println(\"full house\"); return true;}\n         return false;\n     }\n     static boolean st(int[] ints){\n         TreeSet<Integer>hs=new TreeSet<Integer>();\n         \n         for(int x:ints) hs.add(x);\n         if(hs.size()!=5)return false;\n         if(hs.last()-hs.first()==4){System.out.println(\"straight\");return true;}\n         if(hs.first()==1){hs.remove(1);\n             if(hs.first()==10)System.out.println(\"straight\");return true;\n        }return false;\n     }\n     static boolean _3c(int[] ints){\n        for(int i=0; i<5;i++){\n            int count=0;\n            for(int j=i+1;j<5;j++){\n                if(ints[i]==ints[j])count++;\n            }\n            if(count==3){System.out.println(\"three card\");return true;}\n        }\n        return false;\n     }\n     static boolean _2p(int[] ints){\n         TreeMap<Integer,Integer>tm=new TreeMap<Integer,Integer>();\n         for(int in:ints){\n             if(tm.containsKey(in))tm.put(in, tm.get(in)+1);\n             else tm.put(in, 1);\n         }\n         if(tm.keySet().size()==3){System.out.println(\"two pair\");return true;}\n         return false;\n     }\n     static boolean _1p(int[] ints){\n         for(int i=0; i<5;i++){\n             for(int j=i+1;j<5;j++){\n                 if(ints[i]==ints[j]){System.out.println(\"one pair\");return true;}\n         }\n     }return false;}\n }"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String arg[])\n\t{\n\t\tScanner in=new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tString st[]=in.next().split(\",\");\n\t\t\tint a[]=new int[st.length];\n\t\t\tint n=0;\n\t\t\tfor(int i=0;i<5;i++)\n\t\t\t\ta[i]=Integer.valueOf(st[i]);\n\t\t\tfor(int i=0;i<4;i++)\n\t\t\t\tfor(int j=i+1;j<5;j++)\n\t\t\t\t\tif(a[i]==a[j])\n\t\t\t\t\t\tn++;\n\t\t\tArrays.sort(a);\n\t\t\tswitch(n)\n\t\t\t{\n\t\t\tcase 1:\n\t\t\t\tSystem.out.println(\"one pair\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.println(\"two pair\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(\"three card\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tSystem.out.println(\"full house\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tSystem.out.println(\"four card\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif(straight(a))\n\t\t\t\t\tSystem.out.println(\"straight\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"null\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic static boolean straight(int a[])\n\t{\n\t\tif(a[0]+1==a[1]&&a[1]+1==a[2]&&a[2]+1==a[3]&&a[3]+1==a[4])\n\t\t\treturn true;\n\t\telse if(a[0]==1&&a[1]==10&&a[2]==11&&a[3]==12&&a[4]==13)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nclass aoj\n{\n    static void Main()\n    {\n        string[] k = new string[50];\n        int l = 0;\n        while (true)\n        {\n            string c;\n            string a = Console.ReadLine();\n            if (String.IsNullOrEmpty(a)) break;\n            string[] b = a.Split(',');\n            int[] d = new int[5];\n            for (int i = 0; i < 5; i++)\n            {\n                d[i] = int.Parse(b[i]);\n            }\n            for(int i = 0; i < 5; i++)\n            {\n                int e = d[i];\n                int f = 0;\n                for (int j = 0; j+i < 5; j++)\n                {\n                    if (d[j] == e)\n                    {\n                        f++;\n                    }\n                }\n                if (f >= 4)\n                {\n                    c = \"four card\";\n                    goto stop;\n                }\n            }\n            Array.Sort(d);\n            if ((d[0] == d[1] && d[1] == d[2] && d[3] == d[4]) || (d[0] == d[1] && d[2] == d[3] && d[3] == d[4]))\n            {\n                c = \"full house\";\n                goto stop;\n            }\n            bool g = true;\n            for(int i = 1; i < 5; i++)\n            {\n                \n                if (d[i] - d[i - 1] == 1)\n                {\n\n                }\n                else\n                {\n                    g = false;\n                }\n                if (d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13)\n                {\n                    g = true;\n                }\n               \n            }\n            if (g)\n                {\n                    c = \"straight\";\n                    goto stop;\n                }\n            for (int i = 0; i < 2; i++)\n            {\n                if (d[i] == d[i + 1] && d[i] == d[i + 2])\n                {\n                    c = \"three card\";\n                    goto stop;\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                for(int j = i+1;  j < 4; j++)\n                {\n                    if (d[i] == d[i + 1] && d[j] == d[j + 1])\n                    {\n                        c = \"two pair\";\n                        goto stop;\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                if (d[i] == d[i+1])\n                {\n                    c = \"one pair\";\n                    goto stop;\n                }\n            }\n            c = \"null\";\n            stop:;\n            k[l] = c;\n            l++;\n        }\n        for(int i = 0; i < l; i++)\n        {\n            Console.WriteLine(k[i]);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s;\n            while ((s = Console.ReadLine()) != null)\n            {\n                var list = s.Split(',').Select(int.Parse).ToList();\n                list.Sort();\n                var dict = new Dictionary<int, int>();\n                foreach (var v in list)\n                {\n                    if (dict.ContainsKey(v))\n                    {\n                        var i = dict[v] + 1;\n                        dict.Remove(v); dict.Add(v, i);\n                    }\n                    else\n                    {\n                        dict.Add(v, 1);\n                    }\n                }\n                bool isStraight = true;\n                for (int i = list[0]; i < list[0] + 5; i++)\n                {\n                    if (list[i - list[0]] != i) { isStraight = false; break; }\n                }\n                if (list[0] == 1)\n                {\n                    isStraight = true;\n                    for (int i = 0; i < 4; i++)\n                    {\n                        if (list[i+1] != 10+i) { isStraight = false; break; }\n                    }\n                }\n\n                bool isFour = false;\n                bool isThree = false;\n                int Pairs = 0;\n\n                var lk = dict.Keys;\n                foreach (var v in lk)\n                {\n                    isFour |= dict[v] == 4;\n                    isThree |= dict[v] == 3;\n                    Pairs += dict[v] == 2 ? 1 : 0;\n                }\n\n                string result = \"null\";\n\n                if (isFour) result = \"four card\";\n                else if (isThree && Pairs > 0) result = \"full house\";\n                else if (isStraight) result = \"straight\";\n                else if (isThree) result = \"three card\";\n                else if (Pairs == 2) result = \"two pairs\";\n                else if (Pairs > 0) result = \"one pair\";\n\n                Console.WriteLine(result);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string input;\n        while ((input = Console.ReadLine()) != null)\n        {\n            int[] a = input.Split(',').Select(int.Parse).ToArray();\n            int[] b = Enumerable.Repeat(0, 14).ToArray();\n            bool fourCard = false, threeCard = false, onePair = false, twoPair = false, straight = false;\n            foreach (var n in a) b[n]++;\n            for (int i = 0; i < b.Length; i++)\n            {\n                if (b[i] == 4) fourCard = true;\n                if (b[i] == 3) threeCard = true;\n                if (b[i] == 2 && onePair) twoPair = true;\n                else if (b[i] == 2 && !onePair) onePair = true;\n                if (i < 10 && b[i] == 1 && b[i + 1] == 1 && b[i + 2] == 1 && b[i + 3] == 1 && b[i + 4] == 1) straight = true;\n            }\n            if (b[10] == 1 && b[11] == 1 && b[12] == 1 && b[13] == 1 && b[1] == 1) straight = true;\n            if (fourCard) Console.WriteLine(\"four card\");\n            else if (threeCard && onePair) Console.WriteLine(\"full house\");\n            else if (straight) Console.WriteLine(\"straight\");\n            else if (threeCard) Console.WriteLine(\"three card\");\n            else if (twoPair) Console.WriteLine(\"two pair\");\n            else if (onePair) Console.WriteLine(\"one pair\");\n            else Console.WriteLine(\"null\");\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace _0038\n{\n    public class Program\n\n    {\n        enum hand\n        {\n            nothing\n            , one_pair\n            , two_pair\n            , three_card\n            , straight\n            , full_house\n            , four_card\n        }\n\n        public static void Main(string[] args)\n        {\n            string[] hand = new string[]\n            {\n                \"null\"\n                ,\"one pair\"\n                ,\"two pair\"\n                ,\"three card\"\n                ,\"straight\"\n                ,\"full house\"\n                ,\"four card\"\n            };\n\n            while (true)\n            {\n\n                string line = Console.ReadLine();\n                if (string.IsNullOrEmpty(line)) return;\n\n                int[] cards = Array.ConvertAll(line.Trim().Split(','), e => int.Parse(e));\n                Console.WriteLine(hand[handDecision(cards)]);\n            }\n\n        }\n\n        private static int handDecision(int[] cards)\n        {\n            Dictionary<int, int> cardsCnt = new Dictionary<int, int>();\n            for (int i = 0 ; i < cards.Count() ; i++)\n            {\n                if (!cardsCnt.ContainsKey(cards[i])) cardsCnt.Add(cards[i], 0);\n                cardsCnt[cards[i]]++;\n            }\n\n            if (cardsCnt.Any(x => x.Value == 4)) return (int)hand.four_card;\n            if (cardsCnt.Any(x => x.Value == 3) && cardsCnt.Any(x => x.Value == 2)) return (int)hand.full_house;\n            if (IsStraight(cards)) return (int)hand.straight;\n            if (cardsCnt.Any(x => x.Value == 3)) return (int)hand.three_card;\n            if (cardsCnt.Count(x => x.Value == 2) == 2) return (int)hand.two_pair;\n            if (cardsCnt.Any(x => x.Value == 2)) return (int)hand.one_pair;\n            return (int)hand.nothing;\n        }\n\n        private static bool IsStraight(int[] cards)\n        {\n            if (cards.Distinct().Count() < 5) return false;\n            cards = cards.OrderBy(x => x).ToArray();\n\n            if (cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13) return true;\n            for (int i = 0 ; i < cards.Count() - 1 ; i++)\n            {\n                if (cards[i + 1] - cards[i] > 1) return false;\n            }\n            return true;\n        }\n\n        static string RSt() { return Console.ReadLine(); }\n        static int RInt() { return int.Parse(Console.ReadLine().Trim()); }\n        static long RLong() { return long.Parse(Console.ReadLine().Trim()); }\n        static double RDouble() { return double.Parse(Console.ReadLine()); }\n        static string[] RStAr(char sep = ' ') { return Console.ReadLine().Trim().Split(sep); }\n        static int[] RIntAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Trim().Split(sep), e => int.Parse(e)); }\n        static long[] RLongAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Trim().Split(sep), e => long.Parse(e)); }\n        static double[] RDoubleAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Trim().Split(sep), e => double.Parse(e)); }\n        static string WAr<T>(IEnumerable<T> array, string sep = \" \") { return string.Join(sep, array.Select(x => x.ToString()).ToArray()); }\n    }\n\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s;\n            while ((s = Console.ReadLine()) != null)\n            {\n                var list = s.Split(',').Select(int.Parse).ToList();\n                list.Sort();\n                var dict = new Dictionary<int, int>();\n                foreach (var v in list)\n                {\n                    if (dict.ContainsKey(v))\n                    {\n                        var i = dict[v] + 1;\n                        dict.Remove(v); dict.Add(v, i);\n                    }\n                    else\n                    {\n                        dict.Add(v, 1);\n                    }\n                }\n                bool isStraight = true;\n                for (int i = list[0]; i < list[0] + 5; i++)\n                {\n                    if (list[i - list[0]] != i) { isStraight = false; break; }\n                }\n                if (list[0] == 1 && !isStraight)\n                {\n                    isStraight = true;\n                    for (int i = 0; i < 4; i++)\n                    {\n                        if (list[i+1] != 10+i) { isStraight = false; break; }\n                    }\n                }\n\n                bool isFour = false;\n                bool isThree = false;\n                int Pairs = 0;\n\n                var lk = dict.Keys;\n                foreach (var v in lk)\n                {\n                    isFour |= dict[v] == 4;\n                    isThree |= dict[v] == 3;\n                    Pairs += dict[v] == 2 ? 1 : 0;\n                }\n\n                string result = \"null\";\n\n                if (isFour) result = \"four card\";\n                else if (isThree && Pairs > 0) result = \"full house\";\n                else if (isStraight) result = \"straight\";\n                else if (isThree) result = \"three card\";\n                else if (Pairs == 2) result = \"two pair\";\n                else if (Pairs > 0) result = \"one pair\";\n\n                Console.WriteLine(result);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nclass _0038 {\n    enum Role { FOUR, FULL, STRA, THRE, TWOP, ONEP, NONE };\n    public static void Main() {\n        string str;\n        string[] strs;\n        int[] cards = new int[13];\n        Role r;\n\n        while ((str = Console.ReadLine()) != null) {\n            for (int i = 0; i < 13; i++) cards[i] = 0;\n            strs = str.Split(',');\n            for (int i = 0; i < strs.Length; i++) cards[int.Parse(strs[i]) - 1]++;\n            r = Role.NONE;\n            for (int i = 0; i < 13; i++)\n                if (cards[i] != 0) {\n                    switch (cards[i]) {\n                        case 4:\n                            r = Role.FOUR;\n                            break;\n                        case 3:\n                            if (r == Role.ONEP) r = Role.FULL;\n                            else r = Role.THRE;\n                            break;\n                        case 2:\n                            if (r == Role.THRE) r = Role.FULL;\n                            else if (r == Role.ONEP) r = Role.TWOP;\n                            else r = Role.ONEP;\n                            break;\n                        case 1:\n                            if (r == Role.NONE && i < 8) {\n                                r = Role.STRA;\n                                for (int j = 1; j < 4; j++)\n                                    if (cards[i + j] != 1) r = Role.NONE;\n                                if (r == Role.NONE && i == 0) {\n                                    r = Role.STRA;\n                                    for (int j = 12; j > 8; j--)\n                                        if (cards[j] != 1) r = Role.NONE;\n                                }\n                            }\n                            break;\n                    }\n                    if (r != Role.NONE && r != Role.ONEP && r != Role.THRE) break;\n                }\n            switch (r) {\n                case Role.FOUR: Console.WriteLine(\"four card\"); break;\n                case Role.FULL: Console.WriteLine(\"full house\"); break;\n                case Role.STRA: Console.WriteLine(\"straight\"); break;\n                case Role.THRE: Console.WriteLine(\"three card\"); break;\n                case Role.TWOP: Console.WriteLine(\"two pair\"); break;\n                case Role.ONEP: Console.WriteLine(\"one pair\"); break;\n                case Role.NONE: Console.WriteLine(\"null\"); break;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication8 {\n    class Program {\n        static void Main(string[] args) {\n            string data = \"\";\n            while((data = Console.ReadLine()) != null){\n            string[] hand = data.Split(',');\n            DrawPoker table = new DrawPoker();\n            table.setHand(hand);\n            table.checkHand();\n            }\n        }\n    }\n\n    \n    class DrawPoker {\n        int[] hand;\n        int[] table;\n\n        public DrawPoker() {\n            hand = new int[5];\n            table = new int[0];\n        }\n        public void setHand(string[] playhand){\n            for (int i = 0; i < playhand.Length; i++) {\n                hand[i] = int.Parse(playhand[i]);\n            } \n        }\n        public void checkHand() {\n            Array.Sort(hand);\n            int num_pair = 0;\n            bool TKind = false;\n\n            for (int i = 0; i < hand.Length; i++) {\n                int max_surt = 1;\n                for (int j = i + 1; j < hand.Length; j++) {\n                    if (hand[i]==hand[j]) {\n                        max_surt++;\n                    }\n                }\n                if (max_surt == 2) {\n                    num_pair++;\n                    i += 1;\n                } else if (max_surt == 3) {\n                    TKind = true;\n                    i += 2;\n                } else if (max_surt == 4 ) {\n                    Console.WriteLine(\"four card\");\n                    return;\n                }\n            }\n\n\n            if (TKind && num_pair == 0) {\n                Console.WriteLine(\"three card\");\n                return;\n            } else if (TKind && num_pair == 1) {\n                Console.WriteLine(\"full house\");\n                return;\n            } else if (!TKind && num_pair == 1) {\n                Console.WriteLine(\"one pair\");\n                return;\n            } else if (num_pair == 2) {\n                Console.WriteLine(\"two pair\");\n                return;\n            }\n\n            if (hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2 && hand[3] == hand[0] + 3 && hand[4] == hand[0] + 4\n                ||hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) {\n                Console.WriteLine(\"straight\");\n                return;\n            }\n\n            Console.WriteLine(\"null\");\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        [Flags]\n        enum Poker\n        {\n            OnePair = 1 << 0,\n            TwoPair = 1 << 1,\n            ThreeCard = 1 << 2,\n            Straight = 1 << 3,\n            FullHouse = 1 << 4,\n            FourCard = 1 << 5,\n        }\n        static bool IsStraight(int[] arr)\n        {\n            Array.Sort(arr);\n            bool flag = true;\n            for (int i = 1; i < arr.Length; i++)\n                if (arr[i] != arr[i - 1] + 1)\n                    flag = false;\n            return flag;\n        }\n        static void Main(string[] args)\n        {\n            string str;\n            int[] card;\n            while (true)\n            {\n                str = Console.ReadLine();\n                if (str == null)\n                    Environment.Exit(0);\n\n                string[] buf = str.Split(',');\n                card = new int[buf.Length];\n                for (int i = 0; i < buf.Length; i++)\n                {\n                    if (buf[i] == \"J\")\n                        card[i] = 11;\n                    else if (buf[i] == \"Q\")\n                        card[i] = 12;\n                    else if (buf[i] == \"K\")\n                        card[i] = 13;\n                    else if (buf[i] == \"A\")\n                        card[i] = 1;\n                    else\n                        card[i] = int.Parse(buf[i]);\n                }\n                Array.Sort(card);\n                var dic = new Dictionary<int, int>();\n                foreach (int i in card)\n                {\n                    if (!dic.ContainsKey(i))\n                        dic[i] = 1;\n                    else\n                        dic[i]++;\n                }\n                int pairNum = 0, flag = 0;\n                foreach (int i in dic.Values)\n                {\n                    if (i == 2)\n                    {\n                        flag |= (int)Poker.OnePair;\n                        pairNum++;\n                    }\n                    if (i == 3)\n                        flag |= (int)Poker.ThreeCard;\n                    if (i == 4)\n                        flag |= (int)Poker.FourCard;\n                }\n                if (pairNum == 2)\n                    flag |= (int)Poker.TwoPair;\n                if ((~flag & ((int)Poker.ThreeCard | (int)Poker.OnePair)) == 0)\n                    flag |= (int)Poker.FullHouse;\n                if (IsStraight(card))\n                    flag |= (int)Poker.Straight;\n                card[0] = 14;\n                if (IsStraight(card))\n                    flag |= (int)Poker.Straight;\n\n                if ((flag & (int)Poker.FourCard) != 0)\n                    Console.WriteLine(\"four card\");\n                else if ((flag & (int)Poker.FullHouse) != 0)\n                    Console.WriteLine(\"full house\");\n                else if ((flag & (int)Poker.Straight) != 0)\n                    Console.WriteLine(\"straight\");\n                else if ((flag & (int)Poker.ThreeCard) != 0)\n                    Console.WriteLine(\"three card\");\n                else if ((flag & (int)Poker.TwoPair) != 0)\n                    Console.WriteLine(\"two pair\");\n                else if ((flag & (int)Poker.OnePair) != 0)\n                    Console.WriteLine(\"one pair\");\n                else\n                    Console.WriteLine(\"null\");\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        [Flags]\n        enum Poker\n        {\n            OnePair = 1 << 0,\n            TwoPair = 1 << 1,\n            ThreeCard = 1 << 2,\n            Straight = 1 << 3,\n            FullHouse = 1 << 4,\n            FourCard = 1 << 5,\n        }\n        static bool IsStraight(int[] arr)\n        {\n            Array.Sort(arr);\n            bool flag = true;\n            for (int i = 1; i < arr.Length; i++)\n                if (arr[i] != arr[i - 1] + 1)\n                    flag = false;\n            return flag;\n        }\n        static void Main(string[] args)\n        {\n            string str;\n            int[] card;\n            while (true)\n            {\n                str = Console.ReadLine();\n                if (str == null)\n                    Environment.Exit(0);\n\n                string[] buf = str.Split(',');\n                card = new int[buf.Length];\n                for (int i = 0; i < buf.Length; i++)\n                {\n                    if (buf[i] == \"J\")\n                        card[i] = 11;\n                    else if (buf[i] == \"Q\")\n                        card[i] = 12;\n                    else if (buf[i] == \"K\")\n                        card[i] = 13;\n                    else if (buf[i] == \"A\")\n                        card[i] = 1;\n                    else\n                        card[i] = int.Parse(buf[i]);\n                }\n                Array.Sort(card);\n                var dic = new Dictionary<int, int>();\n                foreach (int i in card)\n                {\n                    if (!dic.ContainsKey(i))\n                        dic[i] = 1;\n                    else\n                        dic[i]++;\n                }\n                int pairNum = 0, flag = 0;\n                foreach (int i in dic.Values)\n                {\n                    if (i == 2)\n                    {\n                        flag |= (int)Poker.OnePair;\n                        pairNum++;\n                    }\n                    if (i == 3)\n                        flag |= (int)Poker.ThreeCard;\n                    if (i == 4)\n                        flag |= (int)Poker.FourCard;\n                }\n                if (pairNum == 2)\n                    flag |= (int)Poker.TwoPair;\n                if ((~flag & ((int)Poker.ThreeCard | (int)Poker.OnePair)) == 0)\n                    flag |= (int)Poker.FullHouse;\n                if (IsStraight(card))\n                    flag |= (int)Poker.Straight;\n                card[0] = 14;\n                if (IsStraight(card))\n                    flag |= (int)Poker.Straight;\n\n                if ((flag & (int)Poker.FourCard) != 0)\n                    Console.WriteLine(\"four card\");\n                else if ((flag & (int)Poker.FullHouse) != 0)\n                    Console.WriteLine(\"full house\");\n                else if ((flag & (int)Poker.Straight) != 0)\n                    Console.WriteLine(\"straight\");\n                else if ((flag & (int)Poker.ThreeCard) != 0)\n                    Console.WriteLine(\"three card\");\n                else if ((flag & (int)Poker.TwoPair) != 0)\n                    Console.WriteLine(\"two pair\");\n                else if ((flag & (int)Poker.OnePair) != 0)\n                    Console.WriteLine(\"one pair\");\n                else\n                    Console.WriteLine(\"null\");\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication44\n{\n    class Program\n    {\n        static void Main()\n        {\n            \n                int[] a = Console.ReadLine().Split(',').Select(int.Parse).ToArray();\n                Array.Sort(a);\n                if (a[0] == a[3] || a[1] == a[4]) { Console.WriteLine(\"four card\"); goto s; }\n                if (a[0] == a[2] && a[3] == a[4]) { Console.WriteLine(\"full house\"); goto s; }\n                if (a[0] == a[1] && a[2] == a[4]) { Console.WriteLine(\"full house\"); goto s; }\n                if (a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3]&&a[3]+1==a[4])\n                {\n                     Console.WriteLine(\"straight\"); goto s; \n                }\n                if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)\n                {\n                    Console.WriteLine(\"straight\"); goto s;\n                }\n                if (a[0] == a[2] || a[1] == a[3] || a[2] == a[4]) { Console.WriteLine(\"three card\"); goto s; }\n                if (a[0] == a[1] && a[2] == a[3]) { Console.WriteLine(\"two pair\"); goto s; }\n                if (a[0] == a[1] && a[3] == a[4]) { Console.WriteLine(\"two pair\"); goto s; }\n                if (a[1] == a[2] && a[3] == a[4]) { Console.WriteLine(\"two pair\"); goto s; }\n                if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) { Console.WriteLine(\"one pair\"); goto s; }\n                Console.WriteLine(\"null\");\n            s:;\n            \n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s;\n            while ((s = Console.ReadLine()) != null)\n            {\n                var list = s.Split(',').Select(int.Parse).ToList();\n                list.Sort();\n                var dict = new Dictionary<int, int>();\n                foreach (var v in list)\n                {\n                    if (dict.ContainsKey(v))\n                    {\n                        var i = dict[v] + 1;\n                        dict.Remove(v); dict.Add(v, i);\n                    }\n                    else\n                    {\n                        dict.Add(v, 1);\n                    }\n                }\n                bool isStraight = true;\n                for (int i = list[0]; i < list[0] + 5; i++)\n                {\n                    if (list[i - list[0]] != i) { isStraight = false; break; }\n                }\n                if (list[0] == 1)\n                {\n                    isStraight = true;\n                    for (int i = 0; i < 4; i++)\n                    {\n                        if (list[i+1] != 10+i) { isStraight = false; break; }\n                    }\n                }\n\n                bool isFour = false;\n                bool isThree = false;\n                int Pairs = 0;\n\n                var lk = dict.Keys;\n                foreach (var v in lk)\n                {\n                    isFour |= dict[v] == 4;\n                    isThree |= dict[v] == 3;\n                    Pairs += dict[v] == 2 ? 1 : 0;\n                }\n\n                string result = \"null\";\n\n                if (isFour) result = \"four card\";\n                else if (isThree && Pairs > 0) result = \"full house\";\n                else if (isStraight) result = \"straight\";\n                else if (isThree) result = \"three card\";\n                else if (Pairs == 2) result = \"two pair\";\n                else if (Pairs > 0) result = \"one pair\";\n\n                Console.WriteLine(result);\n            }\n            Console.ReadLine();\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Miscelleneous {\n   class Program {\n      public static string[] Poker = { \"null\",\"one pair\",\"two pair\",\n         \"three card\",\"straight\",\"full house\",\"four card\" };\n      public static int cin() { return int.Parse(Console.ReadLine()); }\n      public static int[] cins() {\n         string s = Console.ReadLine();\n         if (string.IsNullOrEmpty(s)) return new int[]{ };\n         string[] ss = s.Split(',');\n         int[] Res = new int[ss.Length];\n         for (int i = 0; i<ss.Length; i++) Res[i]=int.Parse(ss[i]);\n         return Res;\n      }\n      public static void print(object s) { Console.WriteLine(s.ToString()); }\n      static void Main(string[] args) {\n         int[] ss;\n         int[] card = new int[13];\n         while (true) {\n            ss=cins();\n            if (ss.Count()==0) break;\n            for (int i = 0; i<13; i++)\n               card[i]=ss.Where(j => j-1==i).Count();\n            print(Poker[Explore(card)]);\n         }\n      }\n\n      static int Explore(int[] card) {\n         Func<int,bool> co = i => card.Contains(i);\n         Func<int,bool> Av = i => i!=-1;\n         if (co(4)) return 6;\n         if (co(3)&&co(2)) return 5;\n         //straight\n         var G = card.Select((i,j)=>i==1? j :-1);\n         if (G.Where(Av).Count()==5) {\n            if (G.Last(Av)-G.First(Av)==4) return 4;\n            if (G.Skip(1).First(Av)==9) return 4;\n         }\n         if(co(3))return 3;\n         if (card.Where(i => i>=2).Count()==2) return 2;\n         if (co(2)) return 1;\n         return 0;\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication44\n{\n    class Program\n    {\n        static void Main()\n        {\n            while (true)\n            {\n                string t = Console.ReadLine();\n                if (t == null) break;\n                int[] a = t.Split(',').Select(int.Parse).ToArray();\n                Array.Sort(a);\n                if (a[0] == a[3] || a[1] == a[4]) { Console.WriteLine(\"four card\"); goto s; }\n                if (a[0] == a[2] && a[3] == a[4]) { Console.WriteLine(\"full house\"); goto s; }\n                if (a[0] == a[1] && a[2] == a[4]) { Console.WriteLine(\"full house\"); goto s; }\n                if (a[0] + 1 == a[1] && a[1] + 1 == a[2] && a[2] + 1 == a[3]&&a[3]+1==a[4])\n                {\n                     Console.WriteLine(\"straight\"); goto s; \n                }\n                if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13)\n                {\n                    Console.WriteLine(\"straight\"); goto s;\n                }\n                if (a[0] == a[2] || a[1] == a[3] || a[2] == a[4]) { Console.WriteLine(\"three card\"); goto s; }\n                if (a[0] == a[1] && a[2] == a[3]) { Console.WriteLine(\"two pair\"); goto s; }\n                if (a[0] == a[1] && a[3] == a[4]) { Console.WriteLine(\"two pair\"); goto s; }\n                if (a[1] == a[2] && a[3] == a[4]) { Console.WriteLine(\"two pair\"); goto s; }\n                if (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4]) { Console.WriteLine(\"one pair\"); goto s; }\n                Console.WriteLine(\"null\");\n            s:;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace AOJ0038\n{\n    class Program\n    {\n        static void Main()\n        {\n            foreach (var hand in ReadHands())\n            {\n                switch (HandValidator.Validate(hand))\n                {\n                    case HandValidator.HandType.Null:\n                        Console.WriteLine(\"null\");\n                        break;\n                    case HandValidator.HandType.OnePair:\n                        Console.WriteLine(\"one pair\");\n                        break;\n                    case HandValidator.HandType.TwoPair:\n                        Console.WriteLine(\"two pair\");\n                        break;\n                    case HandValidator.HandType.ThreeCard:\n                        Console.WriteLine(\"three card\");\n                        break;\n                    case HandValidator.HandType.Straight:\n                        Console.WriteLine(\"straight\");\n                        break;\n                    case HandValidator.HandType.FullHouse:\n                        Console.WriteLine(\"full house\");\n                        break;\n                    case HandValidator.HandType.FourCard:\n                        Console.WriteLine(\"four card\");\n                        break;\n                }\n            }\n        }\n\n        public static IEnumerable<int[]> ReadHands()\n        {\n            string line;\n            while ((line = Console.ReadLine()) != null)\n            {\n                yield return line.Split(',').Select(int.Parse).ToArray();\n            }\n        }\n    }\n\n    public static class HandValidator\n    {\n        public static HandType Validate(int[] hand)\n        {\n            var handD = new Dictionary<int, int>();\n            foreach (var card in hand)\n            {\n                if (handD.ContainsKey(card))\n                {\n                    handD[card]++;\n                }\n                else\n                {\n                    handD[card] = 1;\n                }\n            }\n\n            return Validate(handD);\n        }\n\n        public static HandType Validate(Dictionary<int, int> hand)\n        {\n            if (FourCard(hand))\n            {\n                return HandType.FourCard;\n            }\n            if (FullHouse(hand))\n            {\n                return HandType.FullHouse;\n            }\n            if (Straight(hand))\n            {\n                return HandType.Straight;\n            }\n            if (ThreeCard(hand))\n            {\n                return HandType.ThreeCard;\n            }\n            if (TwoPair(hand))\n            {\n                return HandType.TwoPair;\n            }\n            if (OnePair(hand))\n            {\n                return HandType.OnePair;\n            }\n            return HandType.Null;\n        }\n\n        private static bool OnePair(Dictionary<int, int> hand)\n        {\n            return hand.Any(cardSet => cardSet.Value == 2);\n        }\n\n        private static bool TwoPair(Dictionary<int, int> hand)\n        {\n            return hand.Count(cardSet => cardSet.Value == 2) == 2;\n        }\n\n        private static bool ThreeCard(Dictionary<int, int> hand)\n        {\n            return hand.Any(cardSet => cardSet.Value == 3);\n        }\n\n        private static bool Straight(Dictionary<int, int> hand)\n        {\n            if (hand.Count() != 5) return false;\n            var sortedHand = from pair in hand\n                             orderby pair.Key\n                             select pair.Key;\n\n            return (from s in Enumerable.Range(1, 9)\n                    let st = Enumerable.Range(s, 5)\n                    where st.SequenceEqual(sortedHand)\n                    select 0).Any() || sortedHand.SequenceEqual(new[] {1, 10, 11, 12, 13});\n        }\n\n        private static bool FullHouse(Dictionary<int, int> hand)\n        {\n            return OnePair(hand) && ThreeCard(hand);\n\n        }\n\n        private static bool FourCard(Dictionary<int, int> hand)\n        {\n            return hand.Any(cardSet => cardSet.Value == 4);\n        }\n\n        public enum HandType\n        {\n            Null,\n            OnePair,\n            TwoPair,\n            ThreeCard,\n            Straight,\n            FullHouse,\n            FourCard,\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace _0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string y = Console.ReadLine();\n                if (y == null) { break; }\n                int[] a = y.Split(',').Select(int.Parse).ToArray();\n            \n                int g = a[0], h = a[1], j = a[2], k = a[3], l = a[4];\n                Array.Sort(a);\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) { Console.WriteLine(\"four card\"); }\n                else if ((a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) || (a[2] == a[3] && a[3] == a[4] && a[1] == a[0])) { Console.WriteLine(\"full house\"); }\n                else if ((h == g + 1 && j == h + 1 && k == j + 1 && l == k + 1) || (h == 10 && j == 11 && k == 12 && l == 13 && g == 1)) { Console.WriteLine(\"straight\"); }\n                else if ((g == h && h == j) || (h == j && j == k) || (j == k && k == l)) { Console.WriteLine(\"three card\"); }\n                else if ((g == h && k == j) || (g == h && k == l) || (h == j && k == l)) { Console.WriteLine(\"two pair\"); }\n                else if (g == h || h == j || j == k || k == l) { Console.WriteLine(\"one pair\"); }\n                else\n                {\n                    Console.WriteLine(\"null\");\n                }\n            }\n\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace mondai0038\n{\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\twhile( true ) {\n\t\t\t\tvar\tstr\t= Console.ReadLine();\n\t\t\t\tif( str == null ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar\tcard\t= Array.ConvertAll( str.Split( ',' ), s => int.Parse( s ) );\n\t\t\t\tfor( int i = 0; i < 5; i++ ) {\n\t\t\t\t\tif( card[ i ] == 1 ) {\n\t\t\t\t\t\tcard[ i ]\t= 14;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tArray.Sort( card );\n\n\t\t\t\tbool\tone_pair\t= is_one_pair( card );\n\t\t\t\tbool\ttwo_pair\t= is_two_pair( card );\n\t\t\t\tbool\tthree_card\t= is_three_card( card );\n\t\t\t\tbool\tstraight\t= is_straight( card );\n\t\t\t\tbool\tfull_house\t= three_card && one_pair;\n\t\t\t\tbool\tfour_card\t= is_four_card( card );\n\t\t\t\tif( four_card ) {\n\t\t\t\t\tConsole.WriteLine( \"four card\" );\n\t\t\t\t} else if( full_house ) {\n\t\t\t\t\tConsole.WriteLine( \"full house\" );\n\t\t\t\t} else if( straight ) {\n\t\t\t\t\tConsole.WriteLine( \"straight\" );\n\t\t\t\t} else if( three_card ) {\n\t\t\t\t\tConsole.WriteLine( \"three card\" );\n\t\t\t\t} else if( two_pair ) {\n\t\t\t\t\tConsole.WriteLine( \"two pair\" );\n\t\t\t\t} else if( one_pair ) {\n\t\t\t\t\tConsole.WriteLine( \"one pair\" );\n\t\t\t\t} else {\n\t\t\t\t\tConsole.WriteLine( \"null\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tstatic bool is_one_pair( int[] card )\n\t\t{\n\t\t\tint\tpair_cnt\t= 0;\n\t\t\tfor( int i = 0; i < 5; i++ ) {\n\t\t\t\tint\tcnt\t= 0;\n\t\t\t\tfor( int j = 0; j < 5; j++ ) {\n\t\t\t\t\tif( card[ j ] == card[ i ] ) {\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( cnt == 2 ) {\n\t\t\t\t\tpair_cnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( pair_cnt == 2 ) {\t// 全カード検索するのでペアは2つ検出される\n\t\t\t\treturn( true );\n\t\t\t} else {\n\t\t\t\treturn( false );\n\t\t\t}\n\t\t}\n\n\t\tstatic bool is_two_pair( int[] card )\n\t\t{\n\t\t\tint\tpair_cnt\t= 0;\n\t\t\tfor( int i = 0; i < 5; i++ ) {\n\t\t\t\tint\tcnt\t= 0;\n\t\t\t\tfor( int j = 0; j < 5; j++ ) {\n\t\t\t\t\tif( card[ j ] == card[ i ] ) {\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( cnt == 2 ) {\n\t\t\t\t\tpair_cnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( pair_cnt == 4 ) {\t// 全カード検索するのでペアは4つ検出される\n\t\t\t\treturn( true );\n\t\t\t} else {\n\t\t\t\treturn( false );\n\t\t\t}\n\t\t}\n\n\t\tstatic bool is_three_card( int[] card )\n\t\t{\n\t\t\tint\tpair_cnt\t= 0;\n\t\t\tfor( int i = 0; i < 5; i++ ) {\n\t\t\t\tint\tcnt\t= 0;\n\t\t\t\tfor( int j = 0; j < 5; j++ ) {\n\t\t\t\t\tif( card[ j ] == card[ i ] ) {\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( cnt == 3 ) {\n\t\t\t\t\tpair_cnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( pair_cnt == 3 ) {\t// 全カード検索するのでペアは3つ検出される\n\t\t\t\treturn( true );\n\t\t\t} else {\n\t\t\t\treturn( false );\n\t\t\t}\n\t\t}\n\n\t\tstatic bool is_straight( int[] card )\n\t\t{\n\t\t\tint\tmin\t= card[ 0 ];\n\t\t\tint\ti;\n\t\t\tfor( i = 0; i < 5; i++ ) {\n\t\t\t\tif( card[ i ] != (min + i) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( i >= 5 ) {\n\t\t\t\treturn( true );\n\t\t\t} else {\n\t\t\t\tif( (card[ 0 ] == 2) && (card[ 1 ] == 3) && (card[ 2 ] == 4) && (card[ 3 ] == 5) && (card[ 4 ] == 14) ) {\n\t\t\t\t\treturn( true );\n\t\t\t\t} else {\n\t\t\t\t\treturn( false );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic bool is_four_card( int[] card )\n\t\t{\n\t\t\tint\tmax\t= 0;\n\t\t\tfor( int i = 0; i < 5; i++ ) {\n\t\t\t\tint\tcnt\t= 0;\n\t\t\t\tfor( int j = 0; j < 5; j++ ) {\n\t\t\t\t\tif( card[ j ] == card[ i ] ) {\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( cnt > max ) {\n\t\t\t\t\tmax\t= cnt;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( max == 4 ) {\n\t\t\t\treturn( true );\n\t\t\t} else {\n\t\t\t\treturn( false );\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\n\nnamespace AOJ0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string input = Console.ReadLine();\n                if (string.IsNullOrEmpty(input)) break;\n\n                string[] num = input.Split(',');\n                IDictionary<int, int> table = new Dictionary<int, int>();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    if (table.ContainsKey(int.Parse(num[i])))\n                    {\n                        table[int.Parse(num[i])]++;\n                    } else\n                    {\n                        table[int.Parse(num[i])] = 1;\n                    }\n                }\n\n                List<KeyValuePair<int, int>> list = new List<KeyValuePair<int, int>>(table);\n                list.Sort((a, b) => a.Key - b.Key);\n                list.Sort((a, b) => b.Value - a.Value);\n\n                string output = \"null\";\n\n                switch (table.Count) {\n                    case 5:\n                        int count = 0;\n                        for (int i = 0; i < 4; i++)\n                        {\n                            if (list[i].Key + 1 == list[i+1].Key)\n                            {\n                                count++;\n                            }\n                        }\n                        if (count == 4)\n                        {\n                            output = \"straight\";\n                        }\n                        if (((list[0].Key == 1) && (list[1].Key != 2)) && ((list[4].Key == 13) && (count == 3)))\n                        {\n                            output = \"straight\";\n                        }\n                        break;\n\n                    case 4:\n                        output = \"one pair\";\n                        break;\n\n                    case 3:\n                        if (list[0].Value == 3)\n                        {\n                            output = \"three card\";\n                        } else\n                        {\n                            output = \"two pair\";\n                        }\n                        break;\n\n                    case 2:\n                        if (list[0].Value == 4)\n                        {\n                            output = \"four card\";\n                        } else\n                        {\n                            output = \"full house\";\n                        }\n                        break;\n                        \n                }\n\n                Console.WriteLine(output);\n                \n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace _0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[] card = new int[5];\n            string str = \"\";\n            Poker poker = new Poker();\n            while (!((str = Console.ReadLine()) == null))\n            {\n                card = str.Split(',').Select(int.Parse).ToArray();\n                Array.Sort(card);\n                Console.WriteLine(poker.Post(card));\n            }\n        }\n    }\n    class Poker\n    {\n        //one pair と two pair の定義に不足あり\n        public string Post(int[] card)\n        {\n            if (card[0] == card[2])\n            {\n                if (card[1] == card[3])\n                {\n                    return \"four card\";\n                }\n                else if (card[3] == card[4])\n                {\n                    return \"full house\";\n                }\n                else\n                {\n                    return \"three card\";\n                }\n            }\n            else if (card[1] == card[3])\n            {\n                if (card[2] == card[4])\n                {\n                    return \"four card\";\n                }\n                else\n                {\n                    return \"three card\";\n                }\n            }\n            else if (card[2] == card[4])\n            {\n                if (card[0] == card[1])\n                {\n                    return \"full house\";\n                }\n                else\n                {\n                    return \"three card\";\n                }\n            }\n            else if (card[0] == card[1])\n            {\n                if (card[2] == card[3] || card[3] == card[4])\n                {\n                    return \"two pair\";\n                }\n                else\n                {\n                    return \"one pair\";\n                }\n            }\n            else if(card[1]==card[2])\n            {\n                if (card[3] == card[4])\n                {\n                    return \"two pair\";\n                }\n                else\n                {\n                    return \"one pair\";\n                }\n            }\n            else if (card[2] == card[3])\n            {\n                return \"one pair\";\n            }\n            else if (card[3] == card[4])\n            {\n                return \"one pair\";\n            }\n            else if (card[0] + 4 == card[4])\n            {\n                return \"straight\";\n            }\n            else if (card[0] == 1 && card[1] == 10)\n            {\n                return \"straight\";\n            }\n            else\n            {\n                return \"null\";\n            }\n        }\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace aizu\n{\n    class OnlineJudge\n    {\n        static void Main()\n        {\n            string input;\n            List<int> count = new List<int>();\n            List<int> cards = new List<int>();\n            List<Func<string>> check = new List<Func<string>> {\n                new Func<string>(() => count.Contains(4)                      ? \"four card\"  : string.Empty),\n                new Func<string>(() => count.Contains(3) && count.Contains(2) ? \"full house\" : string.Empty),\n                new Func<string>(() => StraightCheck(cards)                   ? \"straight\"   : string.Empty),\n                new Func<string>(() => count.Contains(3)                      ? \"three card\" : string.Empty),\n                new Func<string>(() => count.Count(i => i == 2) == 2          ? \"two pair\"   : string.Empty),\n                new Func<string>(() => count.Count(i => i == 2) == 1          ? \"one pair\"   : string.Empty),\n                new Func<string>(() =>                                          \"null\"                     )\n            };\n            while((input = Console.ReadLine()) != null) {\n                cards.Clear();\n                count.Clear();\n                cards.AddRange(input.Split(',').Select(q => int.Parse(q)).OrderBy(p => p));\n                for(int i=0; i < cards.Count; ++i) {\n                    if(i != 0 && cards[i - 1] == cards[i]) {\n                        ++count[count.Count - 1];\n                    }\n                    else {\n                        count.Add(1);\n                    }\n                }\n                foreach(Func<string> item in check) {\n                    string result = item();\n                    if(result != string.Empty) {\n                        Console.WriteLine(result);\n                        break;\n                    }\n                }\n            }\n        }\n        static bool StraightCheck(List<int> cards)\n        {\n            if(cards.SequenceEqual(new[] { 1, 10, 11, 12, 13 })) {\n                return true;\n            }\n            return cards.SequenceEqual(Enumerable.Range(cards[0], 5));\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar input = \"\";\n\t\t\twhile ((input = Console.ReadLine()) != null)\n\t\t\t{\n\t\t\t\tvar cards = input.Split(',').Select(i => int.Parse(i)).ToArray();\n\t\t\t\tArray.Sort(cards);\n\n\t\t\t\tvar num = new int[14];\n\t\t\t\tfor (int i = 0; i < cards.Length; i++)\n\t\t\t\t\tnum[cards[i]]++;\n\n\t\t\t\tif (num.Contains(4))\n\t\t\t\t\tConsole.WriteLine(\"four card\");\n\t\t\t\telse if (num.Contains(3) && num.Contains(2))\n\t\t\t\t\tConsole.WriteLine(\"full house\");\n\t\t\t\telse if (straight(cards))\n\t\t\t\t\tConsole.WriteLine(\"straight\");\n\t\t\t\telse if (num.Contains(3))\n\t\t\t\t\tConsole.WriteLine(\"three card\");\n\t\t\t\telse if (num.Count(i => i == 2) == 2)\n\t\t\t\t\tConsole.WriteLine(\"two pair\");\n\t\t\t\telse if (num.Count(i => i == 2) == 1)\n\t\t\t\t\tConsole.WriteLine(\"one pair\");\n\t\t\t\telse\n\t\t\t\t\tConsole.WriteLine(\"null\");\n\t\t\t}\n\t\t}\n\t\tstatic bool straight(int[] cards)\n\t\t{\n\t\t\tif (cards.SequenceEqual(new int[] { 1, 10, 11, 12, 13 }))\n\t\t\t\treturn true;\n\t\t\tfor (int i = 1; i <= 9; i++)\n\t\t\t\tif (cards.SequenceEqual(Enumerable.Range(i, 5).ToArray()))\n\t\t\t\t\treturn true;\n\t\t\treturn false;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nclass aoj\n{\n    static void Main()\n    {\n        string[] k = new string[50];\n        int l = 0;\n        while (true)\n        {\n            string c;\n            string a = Console.ReadLine();\n            if (String.IsNullOrEmpty(a)) break;\n            string[] b = a.Split(',');\n            int[] d = new int[5];\n            for (int i = 0; i < 5; i++)\n            {\n                d[i] = int.Parse(b[i]);\n            }\n            Array.Sort(d);\n            if ((d[0] == d[1] && d[0] == d[2] && d[0] == d[3]) || (d[1] == d[2] && d[1] == d[3] && d[1] == d[4]))\n            {\n                c = \"four card\";\n                goto stop;\n            }\n            if ((d[0] == d[1] && d[1] == d[2] && d[3] == d[4]) || (d[0] == d[1] && d[2] == d[3] && d[3] == d[4]))\n            {\n                c = \"full house\";\n                goto stop;\n            }\n            bool g = true;\n            for(int i = 1; i < 5; i++)\n            {\n               \n                if (d[i] - d[i - 1] == 1)\n                {\n                }\n                else\n                {\n                    g = false;\n                }\n            } \n            if (d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13)\n            {\n                g = true;\n            }\n            if (g)\n            {\n                    c = \"straight\";\n                    goto stop;\n            }\n            for (int i = 0; i < 3; i++)\n            {\n                if (d[i] == d[i + 1] && d[i] == d[i + 2])\n                {\n                    c = \"three card\";\n                    goto stop;\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                for(int j = i+1;  j < 4; j++)\n                {\n                    if (d[i] == d[i + 1] && d[j] == d[j + 1])\n                    {\n                        c = \"two pair\";\n                        goto stop;\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                if (d[i] == d[i+1])\n                {\n                    c = \"one pair\";\n                    goto stop;\n                }\n            }\n            c = \"null\";\n            stop:;\n            k[l] = c;\n            l++;\n        }\n        for(int i = 0; i < l; i++)\n        {\n            Console.WriteLine(k[i]);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Miscelleneous {\n   class Program {\n      public static string[] Poker = { \"null\",\"one pair\",\"two pair\",\n         \"three card\",\"straight\",\"full house\",\"four card\" };\n      public static int cin() { return int.Parse(Console.ReadLine()); }\n      public static int[] cins() {\n         string s = Console.ReadLine();\n         if (string.IsNullOrEmpty(s)) return new int[]{ };\n         string[] ss = s.Split(',');\n         int[] Res = new int[ss.Length];\n         for (int i = 0; i<ss.Length; i++) Res[i]=int.Parse(ss[i]);\n         return Res;\n      }\n      public static void print(object s) { Console.WriteLine(s.ToString()); }\n      static bool[,] Map;\n      static void Main(string[] args) {\n         int[] ss;\n         int[] card = new int[13];\n         while (true) {\n            ss=cins();\n            if (ss.Count()==0) break;\n            for (int i = 0; i<13; i++)\n               card[i]=ss.Where(j => j-1==i).Count();\n            print(Poker[Explore(card)]);\n         }\n      }\n\n      static int Explore(int[] card) {\n         Func<int,bool> co = i => card.Contains(i);\n         Func<int,bool> Av = i => i!=-1;\n         if (co(4)) return 6;\n         if (co(3)&&co(2)) return 5;\n         //straight\n         var G = card.Select((i,j)=>i==1? j :-1);\n         if (G.Where(Av).Count()==5) {\n            if (G.Last(Av)-G.First(Av)==4) return 4;\n            if (G.Skip(1).First(Av)==9) return 4;\n         }\n         if(co(3))return 3;\n         if (card.Where(i => i>=2).Count()==2) return 2;\n         if (co(2)) return 1;\n         return 0;\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace AOJ.Volume0\n{\n    public class PokerHand\n    {\n        public static int Main()\n        {\n            while (true)\n            {\n                string input = Console.ReadLine();\n                if (string.IsNullOrEmpty(input)) { break; }\n                var tmp = input.Split(',');\n                var card = new int[5];\n                for (int i = 0; i < 5; i++) { card[i] = int.Parse(tmp[i]); }\n\n                // 強い手から判定していく\n                var query = card.GroupBy(x => x).Select(y => new { Key = y.Key, Count = y.Count() })\n                    .OrderByDescending(z => z.Count);\n                // フォーカード\n                if (query.First().Count == 4)\n                {\n                    Console.WriteLine(\"four card\");\n                    continue;\n                }\n                // フルハウス\n                if (query.Count() == 2)\n                {\n                    Console.WriteLine(\"full house\");\n                    continue;\n                }\n                // ストレート\n                var query_st = card.OrderBy(x => x);\n                int bef = 0;\n                bool is_straight = true;\n                foreach (var q in query_st)\n                {\n                    if (bef == 0) { bef = q; }\n                    else\n                    {\n                        if (q == bef + 1) { bef = q; }\n                        else\n                        {\n                            is_straight = false;\n                            break;\n                        }\n                    }\n                }\n                // 10,11,12,13,Aを判定\n                if (!is_straight && query_st.First() == 1)\n                {\n                    bef = 0;\n                    is_straight = true;\n                    foreach (var q in query_st.Skip(1))\n                    {\n                        if (bef == 0)\n                        {\n                            if (q == 10) { bef = q; }\n                            else\n                            {\n                                is_straight = false;\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            if (q == bef + 1) { bef = q; }\n                            else\n                            {\n                                is_straight = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (is_straight)\n                {\n                    Console.WriteLine(\"straight\");\n                    continue;\n                }\n                // スリーカード\n                if (query.First().Count == 3)\n                {\n                    Console.WriteLine(\"three card\");\n                    continue;\n                }\n                // ツーペア\n                if (query.First().Count == 2 && query.Skip(1).First().Count == 2)\n                {\n                    Console.WriteLine(\"two pair\");\n                    continue;\n                }\n                // ワンペア\n                if (query.First().Count == 2)\n                {\n                    Console.WriteLine(\"one pair\");\n                    continue;\n                }\n\n                // 役無し\n                Console.WriteLine(\"null\");\n            }\n\n            return 0;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing AOJ;\n\nnamespace AOJ\n{\n  static class Problem0038\n  {\n    public static void Main(string[] args)\n    {\n      Console.WriteLine(\n          string.Join(Environment.NewLine,\n            ReadInput()\n              .Select(s => s.Split(','))\n              .Select(arr => arr.Select(int.Parse))\n              .Select(x => x.ToArray())\n              .Select(Judge)\n      ));\n    }\n\n    static IEnumerable<string> ReadInput()\n    {\n      string s;\n      while ((s = Console.ReadLine()) != null)\n        yield return s;\n    }\n\n    static string Judge(int[] hand)\n    {\n      var work = Enumerable.Repeat(0, 14).ToArray();\n      foreach (var x in hand)\n      {\n        if (x == 1)\n        {\n          ++work[0];\n          ++work[13];\n        }\n        else\n        {\n          ++work[x - 1];\n        }\n      }\n      if (work.Any(x => x == 4))\n        return \"four card\";\n      if (work.Any(x => x == 3) && work.Any(x => x == 2))\n        return \"full house\";\n      foreach (var arr in work.EachCons(5))\n        if (arr.All(x => x == 1))\n          return \"straight\";\n      work[13] = 0;\n      if (work.Any(x => x == 3))\n        return \"three card\";\n      if (work.Count(x => x == 2) == 2)\n        return \"two pair\";\n      if (work.Any(x => x == 2))\n        return \"one pair\";\n      return \"null\";\n    }\n  }\n\n  public static class EnumerableEx\n  {\n    public static IEnumerable<IEnumerable<T>> EachCons<T>(this IEnumerable<T> source, int count)\n    {\n      foreach (var i in Enumerable.Range(0, source.Count() - count + 1))\n        yield return source.Skip(i).Take(count);\n    }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace _0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string y = Console.ReadLine();\n                if (y == null) { break; }\n                int[] a = y.Split(',').Select(int.Parse).ToArray();\n                int w = 0;\n                int g = a[0], h = a[1], j = a[2], k = a[3], l = a[4];\n                Array.Sort(a);\n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) { Console.WriteLine(\"four card\"); }\n                else if ((a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) || (a[2] == a[3] && a[3] == a[4] && a[1] == a[0])) { Console.WriteLine(\"full house\"); }\n                else if ((h == g + 1 && j == h + 1 && k == j + 1 && l == k + 1) || (h == 10 && j == 11 && k == 12 && l == 13 && g == 1)) { Console.WriteLine(\"straight\"); }\n                else if ((g == h && h == j) || (h == j && j == k) || (j == k && k == l)) { Console.WriteLine(\"three card\"); }\n                else if ((g == h && k == j) || (g == h && k == l) || (h == j && k == l)) { Console.WriteLine(\"two pair\"); }\n                else if (g == h || h == j || j == k || k == l) { Console.WriteLine(\"one pair\"); }\n                else\n                {\n                    Console.WriteLine(\"null\");\n                }\n            }\n\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "namespace ConsoleApplication8 {\n    class Program {\n        static void Main(string[] args) {\n            string data = \"\";\n            while((data = Console.ReadLine()) != null){\n            string[] hand = data.Split(',');\n            DrawPoker table = new DrawPoker();\n            table.setHand(hand);\n            table.checkHand();\n            }\n        }\n    }\n\n    \n    class DrawPoker {\n        int[] hand;\n        int[] table;\n\n        public DrawPoker() {\n            hand = new int[5];\n            table = new int[0];\n        }\n        public void setHand(string[] playhand){\n            for (int i = 0; i < playhand.Length; i++) {\n                hand[i] = int.Parse(playhand[i]);\n            } \n        }\n        public void checkHand() {\n            Array.Sort(hand);\n            int num_pair = 0;\n            bool TKind = false;\n\n            for (int i = 0; i < hand.Length; i++) {\n                int max_surt = 1;\n                for (int j = i + 1; j < hand.Length; j++) {\n                    if (hand[i]==hand[j]) {\n                        max_surt++;\n                    }\n                }\n                if (max_surt == 2) {\n                    num_pair++;\n                    i += 1;\n                } else if (max_surt == 3) {\n                    TKind = true;\n                    i += 2;\n                } else if (max_surt == 4 ) {\n                    Console.WriteLine(\"four card\");\n                    return;\n                }\n            }\n\n\n            if (TKind && num_pair == 0) {\n                Console.WriteLine(\"three card\");\n                return;\n            } else if (TKind && num_pair == 1) {\n                Console.WriteLine(\"full house\");\n                return;\n            } else if (!TKind && num_pair == 1) {\n                Console.WriteLine(\"one pair\");\n                return;\n            } else if (num_pair == 2) {\n                Console.WriteLine(\"two pair\");\n                return;\n            }\n\n            if (hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2 && hand[3] == hand[0] + 3 && hand[4] == hand[0] + 4\n                ||hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) {\n                Console.WriteLine(\"straight\");\n                return;\n            }\n\n            Console.WriteLine(\"null\");\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nclass aoj\n{\n    static void Main()\n    {\n        string[] k = new string[50];\n        int l = 0;\n        while (true)\n        {\n            string c;\n            string a = Console.ReadLine();\n            if (String.IsNullOrEmpty(a)) break;\n            string[] b = a.Split(',');\n            int[] d = new int[5];\n            for (int i = 0; i < 5; i++)\n            {\n                d[i] = int.Parse(b[i]);\n            }\n            Array.Sort(d);\n            if ((d[0] == d[1] && d[0] == d[2] && d[0] == d[3]) || (d[1] == d[2] && d[1] == d[3] && d[1] == d[4]))\n            {\n                c = \"four card\";\n                goto stop;\n            }\n            if ((d[0] == d[1] && d[1] == d[2] && d[3] == d[4]) || (d[0] == d[1] && d[2] == d[3] && d[3] == d[4]))\n            {\n                c = \"full house\";\n                goto stop;\n            }\n            bool g = true;\n            for(int i = 1; i < 5; i++)\n            {\n                \n                if (d[i] - d[i - 1] == 1)\n                {\n\n                }\n                else\n                {\n                    g = false;\n                }\n                if (d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13)\n                {\n                    g = true;\n                }\n               \n            }\n            if (g)\n                {\n                    c = \"straight\";\n                    goto stop;\n                }\n            for (int i = 0; i < 2; i++)\n            {\n                if (d[i] == d[i + 1] && d[i] == d[i + 2])\n                {\n                    c = \"three card\";\n                    goto stop;\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                for(int j = i+1;  j < 4; j++)\n                {\n                    if (d[i] == d[i + 1] && d[j] == d[j + 1])\n                    {\n                        c = \"two pair\";\n                        goto stop;\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                if (d[i] == d[i+1])\n                {\n                    c = \"one pair\";\n                    goto stop;\n                }\n            }\n            c = \"null\";\n            stop:;\n            k[l] = c;\n            l++;\n        }\n        for(int i = 0; i < l; i++)\n        {\n            Console.WriteLine(k[i]);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nnamespace Ex160425_1{\n    public class Program{\n        public static void Main(string[] args){\n            string input;\n            while((input = Console.ReadLine()) != null){\n                var card = Array.ConvertAll(input.Split(','), int.Parse);\n\n                var cnt = 0;\n                for(var i = 0; i < 5; i++){\n                    for(var j = i + 1; j < 5; j++){\n                        if(card[i] == card[j]) cnt++;\n                    }\n                }\n\n                if(cnt == 0){\n                    var straight = true;\n                    var start = 1;\n                    Array.Sort(card);\n\n                    if(card[0] == 1 && card[4] == 13)\n                        start = 2;\n                    for(var i = start; i < 5; i++)\n                        if(card[i] - card[i - 1] != 1) straight = false;\n\n                    Console.WriteLine(straight ? \"straight\" : \"null\");\n                } else if(cnt == 1){\n                    Console.WriteLine(\"one pair\");\n                } else if(cnt == 2){\n                    Console.WriteLine(\"two pair\");\n                } else if(cnt == 3){\n                    Console.WriteLine(\"three card\");\n                } else if(cnt == 4){\n                    Console.WriteLine(\"full house\");\n                } else if(cnt == 6){\n                    Console.WriteLine(\"four card\");\n                }\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s;\n            while ((s = Console.ReadLine()) != null)\n            {\n                var list = s.Split(',').Select(int.Parse).ToList();\n                list.Sort();\n                var dict = new Dictionary<int, int>();\n                foreach (var v in list)\n                {\n                    if (dict.ContainsKey(v))\n                    {\n                        var i = dict[v] + 1;\n                        dict.Remove(v); dict.Add(v, i);\n                    }\n                    else\n                    {\n                        dict.Add(v, 1);\n                    }\n                }\n                bool isStraight = true;\n                for (int i = list[0]; i < list[0] + 5; i++)\n                {\n                    if (list[i - list[0]] != i) { isStraight = false; break; }\n                }\n                if (list[0] == 1)\n                {\n                    isStraight = true;\n                    for (int i = 0; i < 4; i++)\n                    {\n                        if (list[i+1] != 10+i) { isStraight = false; break; }\n                    }\n                }\n\n                bool isFour = false;\n                bool isThree = false;\n                int Pairs = 0;\n\n                var lk = dict.Keys;\n                foreach (var v in lk)\n                {\n                    isFour |= dict[v] == 4;\n                    isThree |= dict[v] == 3;\n                    Pairs += dict[v] == 2 ? 1 : 0;\n                }\n\n                string result = \"null\";\n\n                if (isFour) result = \"four card\";\n                else if (isThree && Pairs > 0) result = \"full house\";\n                else if (isStraight) result = \"straight\";\n                else if (isThree) result = \"three card\";\n                else if (Pairs == 2) result = \"two pair\";\n                else if (Pairs > 0) result = \"one pair\";\n\n                Console.WriteLine(result);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing E = System.Linq.Enumerable;\nusing IEInt32 = System.Collections.Generic.IEnumerable<int>;\n\nstatic class PokerHand\n{\n    static void Main()\n    {\n        Func<IEnumerable<IEInt32>, int[], string>[] hands =\n        {\n            (g, c) => g\n                .Any( x => x.Skip( 3 ).Any() )\n                ? \"four card\" : string.Empty,\n            (g, c) => g\n                .All( x => x.Skip( 1 ).Any() )\n                ? \"full house\" : string.Empty,\n            (g, c) => new[] { 10, 11, 12, 13, 1 }\n                .Except( c )\n                .All( _ => false )\n                ? \"straight\" : string.Empty,\n            (g, c) => E.Range( c.Min(), 5 )\n                .Except( c )\n                .All( _ => false )\n                ? \"straight\" : string.Empty,\n            (g, c) => g\n                .Any( x => x.Skip( 2 ).Any() )\n                ? \"three card\" : string.Empty,\n            (g, c) => g\n                .Where( x => x.Skip( 1 ).Any() )\n                .Skip( 1 )\n                .Any()\n                ? \"two pair\" : string.Empty,\n            (g, c) => g\n                .Any( x => x.Skip( 1 ).Any() )\n                ? \"one pair\" : string.Empty,\n            (g, c) => \"null\",\n        };\n\n        Console.In.ReadToEnd()\n            .Split( \n                new[] { '\\r', '\\n' },\n                StringSplitOptions.RemoveEmptyEntries )\n            .Select( x => Array.ConvertAll( x.Split( ',' ), int.Parse ) )\n            .Select( x => new { g = x.GroupBy( y => y ), c = x } )\n            .Select( x => hands.Select( y => y( x.g, x.c ) ) )\n            .Select( x => x.First( y => y != string.Empty ) )\n            .ToList()\n            .ForEach( Console.WriteLine );\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing E = System.Linq.Enumerable;\nusing IEInt32 = System.Collections.Generic.IEnumerable<int>;\n\nstatic class PokerHand\n{\n    static void Main()\n    {\n        Func<IEnumerable<IEInt32>, int[], string> combinationOf =\n            (g, h) =>\n                g.Any( x => x.Skip( 3 ).Any() )\n                    ? \"four card\"\n                : g.All( x => x.Skip( 1 ).Any() )\n                    ? \"full house\"\n                : new[] { 10, 11, 12, 13, 1 }.Except( h ).All( _ => false )\n                    ? \"straight\"\n                : E.Range( h.Min(), 5 ).Except( h ).All( _ => false )\n                    ? \"straight\"\n                : g.Any( x => x.Skip( 2 ).Any() )\n                    ? \"three card\"\n                : g.Where( x => x.Skip( 1 ).Any() ).Skip( 1 ).Any()\n                    ? \"two pair\"\n                : g.Any( x => x.Skip( 1 ).Any() )\n                    ? \"one pair\"\n                : \"null\";\n\n        var indata = Console.In.ReadToEnd()\n            .Split( \n                new[] { '\\r', '\\n' },\n                StringSplitOptions.RemoveEmptyEntries );\n        var q =\n            from hand in indata\n            let h = Array.ConvertAll( hand.Split( ',' ), int.Parse )\n            let g = h.GroupBy( x => x ).Cast<IEInt32>()\n            select combinationOf( g, h );\n        foreach( var c in q )\n            Console.WriteLine( c );\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\npublic class Program {\n\tpublic static void Main() {\n\t\twhile(true) {\n\t\t\tstring s = Console.ReadLine();\n\t\t\tif(s == null) break;\n\t\t\tint[] x = s.Split(',').Select(int.Parse).ToArray();\n\t\t\tArray.Sort(x);\n\t\t\tint[] c = new int[13];\n\t\t\tfor(int i = 0; i < 5; i++) c[x[i] - 1]++;\n\t\t\tArray.Sort(c);\n\t\t\tArray.Reverse(c);\n\t\t\tif(c[0] == 4) Console.WriteLine(\"four card\");\n\t\t\telse if(c[0] == 3 && c[1] == 2) Console.WriteLine(\"full house\");\n\t\t\telse if(c[0] == 3) Console.WriteLine(\"three card\");\n\t\t\telse if(c[0] == 2 && c[1] == 2) Console.WriteLine(\"two pair\");\n\t\t\telse if(c[0] == 2) Console.WriteLine(\"one pair\");\n\t\t\telse if((x[1] + 1 == x[2] && x[2] + 1 == x[3] && x[3] + 1 == x[4]) && (x[0] + 1 == x[1] || (x[0] == 1 && x[1] == 10))) Console.WriteLine(\"straight\");\n\t\t\telse Console.WriteLine(\"null\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing AOJ;\n\nnamespace AOJ\n{\n  static class Problem0038\n  {\n    public static void Main(string[] args)\n    {\n      foreach (var s in ReadInput()\n          .Select(s => s.Split(','))\n          .Select(arr => arr.Select(int.Parse))\n          .Select(x => x.ToArray())\n          .Select(Judge))\n      {\n        Console.WriteLine(s);\n      }\n    }\n\n    static IEnumerable<string> ReadInput()\n    {\n      string s;\n      while ((s = Console.ReadLine()) != null)\n        yield return s;\n    }\n\n    static string Judge(int[] hand)\n    {\n      var work = Enumerable.Repeat(0, 14).ToArray();\n      foreach (var x in hand)\n      {\n        if (x == 1)\n        {\n          ++work[0];\n          ++work[13];\n        }\n        else\n        {\n          ++work[x - 1];\n        }\n      }\n      if (work.Any(x => x == 4))\n        return \"four card\";\n      if (work.Any(x => x == 3) && work.Any(x => x == 2))\n        return \"full house\";\n      foreach (var arr in work.EachCons(5))\n        if (arr.All(x => x == 1))\n          return \"straight\";\n      work[13] = 0;\n      if (work.Any(x => x == 3))\n        return \"three card\";\n      if (work.Count(x => x == 2) == 2)\n        return \"two pair\";\n      if (work.Any(x => x == 2))\n        return \"one pair\";\n      return \"null\";\n    }\n  }\n\n  public static class EnumerableEx\n  {\n    public static IEnumerable<IEnumerable<T>> EachCons<T>(this IEnumerable<T> source, int count)\n    {\n      foreach (var i in Enumerable.Range(0, source.Count() - count + 1))\n        yield return source.Skip(i).Take(count);\n    }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nclass aoj\n{\n    static void Main()\n    {\n        string[] k = new string[50];\n        int l = 0;\n        while (true)\n        {\n            string c;\n            string a = Console.ReadLine();\n            if (String.IsNullOrEmpty(a)) break;\n            string[] b = a.Split(',');\n            int[] d = new int[5];\n            for (int i = 0; i < 5; i++)\n            {\n                d[i] = int.Parse(b[i]);\n            }\n            for(int i = 0; i < 5; i++)\n            {\n                int e = d[i];\n                int f = 0;\n                for (int j = 0; j+i < 5; j++)\n                {\n                    if (d[j] == e)\n                    {\n                        f++;\n                    }\n                }\n                if (f >= 4)\n                {\n                    c = \"four card\";\n                    goto stop;\n                }\n            }\n           /* for(int i = 0; i <1; i++)\n            {\n                int e=d[0], f=10000;\n                bool g = true;\n                for(int j = 0; j < 5; j++)\n                {\n                    if (d[j] != e)\n                    {\n                        f = d[j];\n                        break;\n                    }\n                }\n                for(int j = 0; j < 5; j++)\n                {\n                    if (d[j] != e && d[j] != f)\n                    {\n                        g = false;\n                    }\n                }\n                if (g)\n                {\n                    c = \"full house\";\n                    goto stop;\n                }\n            }*/\n            Array.Sort(d);\n            if ((d[0] == d[1] && d[1] == d[2] && d[3] == d[4]) || (d[0] == d[1] && d[2] == d[3] && d[3] == d[4]))\n            {\n                c = \"full house\";\n                goto stop;\n            }\n            bool g = true;\n            for(int i = 1; i < 5; i++)\n            {\n                \n                if (d[i] - d[i - 1] == 1)\n                {\n\n                }\n                else\n                {\n                    g = false;\n                }\n                if (d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13)\n                {\n                    g = true;\n                }\n               \n            }\n            if (g)\n                {\n                    c = \"straight\";\n                    goto stop;\n                }\n            for (int i = 0; i < 2; i++)\n            {\n                if (d[i] == d[i + 1] && d[i] == d[i + 2])\n                {\n                    c = \"three card\";\n                    goto stop;\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                for(int j = i+1;  j < 4; j++)\n                {\n                    if (d[i] == d[i + 1] && d[j] == d[j + 1])\n                    {\n                        c = \"two pair\";\n                        goto stop;\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                if (d[i] == d[i+1])\n                {\n                    c = \"one pair\";\n                    goto stop;\n                }\n            }\n            c = \"null\";\n            stop:;\n            k[l] = c;\n            l++;\n        }\n        for(int i = 0; i < l; i++)\n        {\n            Console.WriteLine(k[i]);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "namespace ConsoleApplication8 {\n    class Program {\n        static void Main(string[] args) {\n            string data = \"\";\n            while((data = Console.ReadLine()) != null){\n            string[] hand = data.Split(',');\n            DrawPoker table = new DrawPoker();\n            table.setHand(hand);\n            table.checkHand();\n            }\n        }\n    }\n\n    \n    class DrawPoker {\n        int[] hand;\n        int[] table;\n\n        public DrawPoker() {\n            hand = new int[5];\n            table = new int[0];\n        }\n        public void setHand(string[] playhand){\n            for (int i = 0; i < playhand.Length; i++) {\n                hand[i] = int.Parse(playhand[i]);\n            } \n        }\n        public void checkHand() {\n            Array.Sort(hand);\n            int num_pair = 0;\n            bool TKind = false;\n\n            for (int i = 0; i < hand.Length; i++) {\n                int max_surt = 1;\n                for (int j = i + 1; j < hand.Length; j++) {\n                    if (hand[i]==hand[j]) {\n                        max_surt++;\n                    }\n                }\n                if (max_surt == 2) {\n                    num_pair++;\n                    i += 1;\n                } else if (max_surt == 3) {\n                    TKind = true;\n                    i += 2;\n                } else if (max_surt == 4 ) {\n                    Console.WriteLine(\"four card\");\n                    return;\n                }\n            }\n\n\n            if (TKind && num_pair == 0) {\n                Console.WriteLine(\"three card\");\n                return;\n            } else if (TKind && num_pair == 1) {\n                Console.WriteLine(\"full house\");\n                return;\n            } else if (!TKind && num_pair == 1) {\n                Console.WriteLine(\"one pair\");\n                return;\n            } else if (num_pair == 2) {\n                Console.WriteLine(\"two pair\");\n                return;\n            }\n\n            if (hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2 && hand[3] == hand[0] + 3 && hand[4] == hand[0] + 4\n                ||hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) {\n                Console.WriteLine(\"straight\");\n                return;\n            }\n\n            Console.WriteLine(\"null\");\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace AOJ0038\n{\n    class Program\n    {\n        static void Main()\n        {\n            foreach (var hand in ReadHands())\n            {\n                switch (HandValidator.Validate(hand))\n                {\n                    case HandValidator.HandType.Null:\n                        Console.WriteLine(\"null\");\n                        break;\n                    case HandValidator.HandType.OnePair:\n                        Console.WriteLine(\"one pair\");\n                        break;\n                    case HandValidator.HandType.TwoPair:\n                        Console.WriteLine(\"two pair\");\n                        break;\n                    case HandValidator.HandType.ThreeCard:\n                        Console.WriteLine(\"three card\");\n                        break;\n                    case HandValidator.HandType.Straight:\n                        Console.WriteLine(\"straight\");\n                        break;\n                    case HandValidator.HandType.FullHouse:\n                        Console.WriteLine(\"full house\");\n                        break;\n                    case HandValidator.HandType.FourCard:\n                        Console.WriteLine(\"four card\");\n                        break;\n                }\n            }\n        }\n\n        public static IEnumerable<int[]> ReadHands()\n        {\n            string line;\n            while ((line = Console.ReadLine()) != null)\n            {\n                yield return line.Split(',').Select(int.Parse).ToArray();\n            }\n        }\n    }\n\n    public static class HandValidator\n    {\n        public static HandType Validate(int[] hand)\n        {\n            var handD = new Dictionary<int, int>();\n            foreach (var card in hand)\n            {\n                if (handD.ContainsKey(card))\n                {\n                    handD[card]++;\n                }\n                else\n                {\n                    handD[card] = 1;\n                }\n            }\n\n            return Validate(handD);\n        }\n\n        public static HandType Validate(Dictionary<int, int> hand)\n        {\n            if (FourCard(hand))\n            {\n                return HandType.FourCard;\n            }\n            if (FullHouse(hand))\n            {\n                return HandType.FullHouse;\n            }\n            if (Straight(hand))\n            {\n                return HandType.Straight;\n            }\n            if (ThreeCard(hand))\n            {\n                return HandType.ThreeCard;\n            }\n            if (TwoPair(hand))\n            {\n                return HandType.TwoPair;\n            }\n            if (OnePair(hand))\n            {\n                return HandType.OnePair;\n            }\n            return HandType.Null;\n        }\n\n        private static bool OnePair(Dictionary<int, int> hand)\n        {\n            return hand.Any(cardSet => cardSet.Value == 2);\n        }\n\n        private static bool TwoPair(Dictionary<int, int> hand)\n        {\n            return hand.Count(cardSet => cardSet.Value == 2) == 2;\n        }\n\n        private static bool ThreeCard(Dictionary<int, int> hand)\n        {\n            return hand.Any(cardSet => cardSet.Value == 3);\n        }\n\n        private static bool Straight(Dictionary<int, int> hand)\n        {\n            if (hand.Count() != 5) return false;\n            var sortedHand = (from pair in hand\n                              orderby pair.Key\n                              select pair.Key).ToArray();\n\n            return sortedHand.SequenceEqual(Enumerable.Range(sortedHand.ElementAt(0), 5))\n                || sortedHand.SequenceEqual(new[] {1, 10, 11, 12, 13});\n        }\n\n        private static bool FullHouse(Dictionary<int, int> hand)\n        {\n            return OnePair(hand) && ThreeCard(hand);\n\n        }\n\n        private static bool FourCard(Dictionary<int, int> hand)\n        {\n            return hand.Any(cardSet => cardSet.Value == 4);\n        }\n\n        public enum HandType\n        {\n            Null,\n            OnePair,\n            TwoPair,\n            ThreeCard,\n            Straight,\n            FullHouse,\n            FourCard,\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nclass aoj\n{\n    static void Main()\n    {\n        string[] k = new string[50];\n        int l = 0;\n        while (true)\n        {\n            string c;\n            string a = Console.ReadLine();\n            if (String.IsNullOrEmpty(a)) break;\n            string[] b = a.Split(',');\n            int[] d = new int[5];\n            for (int i = 0; i < 5; i++)\n            {\n                d[i] = int.Parse(b[i]);\n            }\n            Array.Sort(d);\n            if ((d[0] == d[1] && d[0] == d[2] && d[0] == d[3]) || (d[1] == d[2] && d[1] == d[3] && d[1] == d[4]))\n            {\n                c = \"four card\";\n                goto stop;\n            }\n            if ((d[0] == d[1] && d[1] == d[2] && d[3] == d[4]) || (d[0] == d[1] && d[2] == d[3] && d[3] == d[4]))\n            {\n                c = \"full house\";\n                goto stop;\n            }\n            bool g = true;\n            for(int i = 1; i < 5; i++)\n            {\n                \n                if (d[i] - d[i - 1] == 1)\n                {\n\n                }\n                else\n                {\n                    g = false;\n                }\n                if (d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13)\n                {\n                    g = true;\n                }\n               \n            }\n            if (g)\n                {\n                    c = \"straight\";\n                    goto stop;\n                }\n            for (int i = 0; i < 2; i++)\n            {\n                if (d[i] == d[i + 1] && d[i] == d[i + 2])\n                {\n                    c = \"three card\";\n                    goto stop;\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                for(int j = i+1;  j < 4; j++)\n                {\n                    if (d[i] == d[i + 1] && d[j] == d[j + 1])\n                    {\n                        c = \"two pair\";\n                        goto stop;\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                if (d[i] == d[i+1])\n                {\n                    c = \"one pair\";\n                    goto stop;\n                }\n            }\n            c = \"null\";\n            stop:;\n            k[l] = c;\n            l++;\n        }\n        for(int i = 0; i < l; i++)\n        {\n            Console.WriteLine(k[i]);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace _038_PokerHand\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tstring inputStr;\n\n\t\t\twhile ((inputStr = Console.ReadLine ()) != null)\n\t\t\t{\n\t\t\t\tint[] cards = inputStr.Split (',').Select (int.Parse).ToArray ();\n\n\t\t\t\tstring result = Poker.Judge (cards);\n\n\t\t\t\tConsole.WriteLine (result);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic class Poker\n\t{\n\t\tprivate static int[] cardArray { set; get; }\n\n\t\tpublic static string Judge ( int[] cards )\n\t\t{\n\t\t\tcardArray = new int[13];\n\t\t\tforeach (var item in cards)\n\t\t\t{\n\t\t\t\tcardArray[item - 1]++;\n\t\t\t}\n\n\t\t\tif (IsFourCard ())\n\t\t\t{\n\t\t\t\treturn \"four card\";\n\t\t\t}\n\t\t\telse if (IsFullHouse ())\n\t\t\t{\n\t\t\t\treturn \"full house\";\n\t\t\t}\n\t\t\telse if (IsStraight (cards))\n\t\t\t{\n\t\t\t\treturn \"straight\";\n\t\t\t}\n\t\t\telse if (IsThreeCard ())\n\t\t\t{\n\t\t\t\treturn \"three card\";\n\t\t\t}\n\t\t\telse if (IsTwoPair ())\n\t\t\t{\n\t\t\t\treturn \"two pair\";\n\t\t\t}\n\t\t\telse if (IsOnePair ())\n\t\t\t{\n\t\t\t\treturn \"one pair\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn \"null\";\n\t\t\t}\n\t\t}\n\n\t\tprivate static bool IsFourCard ()\n\t\t{\n\t\t\tif (cardArray.Any (item => item == 4))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tprivate static bool IsFullHouse ()\n\t\t{\n\t\t\tif (cardArray.Any (item => item == 2) && cardArray.Any (item => item == 3))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tprivate static bool IsStraight ( int[] cards )\n\t\t{\n\t\t\tint aceIndex = Array.IndexOf (cards, 1);\n\n\t\t\tif (aceIndex != -1)\n\t\t\t{\n\t\t\t\tbool isFindKing = cards.Any (item => item == 13);\n\n\t\t\t\tif (isFindKing)\n\t\t\t\t{\n\t\t\t\t\tcards[aceIndex] += 13;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArray.Sort (cards);\n\n\t\t\tif (cards[0] + 1 == cards[1] &&\n\t\t\t\tcards[1] + 1 == cards[2] &&\n\t\t\t\tcards[2] + 1 == cards[3] &&\n\t\t\t\tcards[3] + 1 == cards[4])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t\tprivate static bool IsThreeCard ()\n\t\t{\n\t\t\tif (cardArray.Any (item => item == 3))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tprivate static bool IsTwoPair ()\n\t\t{\n\t\t\tif (cardArray.Count (item => item == 2) == 2)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tprivate static bool IsOnePair ()\n\t\t{\n\t\t\tif (cardArray.Any (item => item == 2))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                int[] cards = Array.ConvertAll(input.Split(','), int.Parse);\n\n                int[] memo = new int[14];\n                int max = 0;\n\n                for (int i = 0; i < 5; i++)\n                {\n                    memo[cards[i]]++;\n                    max = Math.Max(max, memo[cards[i]]);\n                }\n\n                if (max == 4)\n                {\n                    sb.AppendLine(\"four card\");\n                }\n                else if (max == 3)\n                {\n                    if (memo.Contains(2)) sb.AppendLine(\"full house\");\n                    else sb.AppendLine(\"three card\");\n                }\n                else if (max == 2)\n                {\n                    int count = memo.Where(a => a == 2).Count();\n\n                    if (count == 2) sb.AppendLine(\"two pair\");\n                    else sb.AppendLine(\"one pair\");\n                }\n                else\n                {\n                    bool isStraight = false;\n\n                    if (memo[1] > 0)\n                    {\n                        if (memo[10] > 0 && memo[11] > 0 && memo[12] > 0 && memo[13] > 0)\n                        {\n                            sb.AppendLine(\"straight\");\n                            isStraight = true;\n                        }\n                    }\n\n                    if (!isStraight)\n                    {\n                        int index = Array.IndexOf(memo, 1);\n\n                        if (memo[index + 1] > 0 && memo[index + 2] > 0 && memo[index + 3] > 0 && memo[index + 4] > 0)\n                        {\n                            sb.AppendLine(\"straight\");\n                        }\n                        else sb.AppendLine(\"null\");\n                    }\n                }\n            }\n            Console.Write(sb);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing E = System.Linq.Enumerable;\nusing IEInt32 = System.Collections.Generic.IEnumerable<int>;\n\nstatic class PokerHand\n{\n    static void Main()\n    {\n        Func<IEnumerable<IEInt32>, int[], string>[] comb =\n        {\n            (g, h) => g\n                .Any( x => x.Skip( 3 ).Any() )\n                ? \"four card\" : string.Empty,\n            (g, h) => g\n                .All( x => x.Skip( 1 ).Any() )\n                ? \"full house\" : string.Empty,\n            (g, h) => new[] { 10, 11, 12, 13, 1 }\n                .Except( h )\n                .All( _ => false )\n                ? \"straight\" : string.Empty,\n            (g, h) => E.Range( h.Min(), 5 )\n                .Except( h )\n                .All( _ => false )\n                ? \"straight\" : string.Empty,\n            (g, h) => g\n                .Any( x => x.Skip( 2 ).Any() )\n                ? \"three card\" : string.Empty,\n            (g, h) => g\n                .Where( x => x.Skip( 1 ).Any() )\n                .Skip( 1 )\n                .Any()\n                ? \"two pair\" : string.Empty,\n            (g, h) => g\n                .Any( x => x.Skip( 1 ).Any() )\n                ? \"one pair\" : string.Empty,\n            (g, h) => \"null\",\n        };\n\n        var indata = Console.In.ReadToEnd()\n            .Split( \n                new[] { '\\r', '\\n' },\n                StringSplitOptions.RemoveEmptyEntries );\n        var q =\n            from hand in indata\n            let h = Array.ConvertAll( hand.Split( ',' ), int.Parse )\n            let g = h.GroupBy( x => x ).Cast<IEInt32>()\n            select comb\n                .Select( x => x( g, h ) )\n                .First( x => x != string.Empty );\n        foreach( var c in q )\n            Console.WriteLine( c );\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System.Linq;\nusing System;\n\npublic class Hello\n{\n    public static void Main()\n    {\n        string line;\n        for (; (line = Console.ReadLine()) != null;)\n        {\n            var a = Array.ConvertAll(line.Trim().Split(','), int.Parse);\n            Array.Sort(a); a.Reverse();\n            Console.WriteLine(getHand(a));\n        }\n    }\n    public static string getHand(int[] a)\n    {\n        if (isFour(a)) return \"four card\";\n        if (isFull(a)) return \"full house\";\n        if (isStrai(a)) return \"straight\";\n        if (isThree(a)) return \"three card\";\n        switch (get210(a))\n        {\n            case 2:\n                return \"two pair\";\n            case 1:\n                return \"one pair\";\n            default:\n                return \"null\";\n        }\n    }\n    public static bool isFour(int[] a)\n    {\n        return (a[0] == a[3] | a[1] == a[4]);\n    }\n    public static bool isFull(int[] a)\n    {\n        return ((a[0] == a[2] && a[3] == a[4]) | (a[0] == a[1] && a[2] == a[4]));\n    }\n    public static bool isStrai(int[] a)\n    {\n        if (a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13) return true;\n        for (int i = 1; i < 5; i++)\n            if (a[i] - a[i - 1] != 1) return false;\n        return true;\n    }\n    public static bool isThree(int[] a)\n    {\n        return (a[0] == a[2] | a[1] == a[3] | a[2] == a[4]);\n    }\n    public static int get210(int[] a)\n    {\n        var b = a.ToList();\n        var c = b.Distinct().ToList();\n        return 5 - c.Count();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace _0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string s = Console.ReadLine();\n                if (s == null)\n                {\n                    break;\n                }\n                int[] x = s.Split(',').Select(int.Parse).ToArray();\n                Array.Sort(x);\n                bool a = true;\n                if (x[0] == x[3] || x[1] == x[4])\n                {\n                    Console.WriteLine(\"four card\");\n                }\n                else if ((x[0] == x[2] && x[3] == x[4]) || (x[0] == x[1] && x[2] == x[4]))\n                {\n                    Console.WriteLine(\"full house\");\n                }\n                else if (x[0] == 1 && x[1] == 10 && x[2] == 11 && x[3] == 12 && x[4] == 13)\n                {\n                    Console.WriteLine(\"straight\");\n                }\n                else if (x[0] == x[2] || x[1] == x[3] || x[2] == x[4])\n                {\n                    Console.WriteLine(\"three card\");\n                }\n                else if ((x[0] == x[1] && x[2] == x[3]) || (x[0] == x[1] && x[3] == x[4]) || (x[1] == x[2] && x[3] == x[4]))\n                {\n                    Console.WriteLine(\"two pair\");\n                }\n                else if (x[0] == x[1] || x[1] == x[2] || x[2] == x[3] || x[3] == x[4])\n                {\n                    Console.WriteLine(\"one pair\");\n                }\n                else if (a)\n                {\n                    a = false;\n                    for (int i = 0; i < 10; i++)\n                    {\n                        bool flag = true;\n                        for (int j = 0; j < 5; j++)\n                        {\n                            if (x[j] != i + j)\n                            {\n                                flag = false;\n                            }\n                        }\n                        if (flag)\n                        {\n                            Console.WriteLine(\"straight\");\n                            a = true;\n                        }\n                    }\n                    if (!a)\n                    {\n                        Console.WriteLine(\"null\");\n                    }\n                }\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace AOJ\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string line;\n            while((line = Console.ReadLine()) != null)\n            {\n                var cards = line.Split(',').Select(int.Parse).ToLookup(x => x);\n                if (cards.Any(x => x.Count() == 4))\n                {\n                    Console.WriteLine(\"four card\");\n                }\n                else if (cards.Any(x => x.Count() == 3) && cards.Any(x => x.Count() == 2))\n                {\n                    Console.WriteLine(\"full house\");\n                }\n                else if (IsStraight(cards))\n                {\n                    Console.WriteLine(\"straight\");\n                }\n                else if (cards.Any(x => x.Count() == 3))\n                {\n                    Console.WriteLine(\"three card\");\n                }\n                else if (cards.Any(x => x.Count() == 2))\n                {\n                    if (cards.ToLookup(x => x.Count())[2].Count() == 2) Console.WriteLine(\"two pair\");\n                    else Console.WriteLine(\"one pair\");\n                }\n                else\n                {\n                    Console.WriteLine(\"null\");\n                }\n            }\n        }\n\n        private static bool IsStraight(ILookup<int, int> cards)\n        {\n            if (cards.Count != 5) return false;\n            var c = cards.Select(x => x.Key).ToArray();\n            var min = c.Min();\n            if ((min + min + 4) * 5 / 2 == c.Sum()) return true;\n            if (!c.Contains(1)) return false;\n            c = c.Where(x => x != 1).Concat(new[] { 14 }).ToArray();\n            min = c.Min();\n            return (min + min + 4) * 5 / 2 == c.Sum();\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApplication8 {\n    class Program {\n        static void Main(string[] args) {\n            string data = \"\";\n            while((data = Console.ReadLine()) != null){\n            string[] hand = data.Split(',');\n            DrawPoker table = new DrawPoker();\n            table.setHand(hand);\n            table.checkHand();\n            }\n        }\n    }\n\n    \n    class DrawPoker {\n        int[] hand;\n        int[] table;\n\n        public DrawPoker() {\n            hand = new int[5];\n            table = new int[0];\n        }\n        public void setHand(string[] playhand){\n            for (int i = 0; i < playhand.Length; i++) {\n                hand[i] = int.Parse(playhand[i]);\n            } \n        }\n        public void checkHand() {\n            Array.Sort(hand);\n            int num_pair = 0;\n            bool TKind = false;\n\n            for (int i = 0; i < hand.Length; i++) {\n                int max_surt = 1;\n                for (int j = i + 1; j < hand.Length; j++) {\n                    if (hand[i]==hand[j]) {\n                        max_surt++;\n                    }\n                }\n                if (max_surt == 2) {\n                    num_pair++;\n                    i += 1;\n                } else if (max_surt == 3) {\n                    TKind = true;\n                    i += 2;\n                } else if (max_surt == 4 ) {\n                    Console.WriteLine(\"four card\");\n                    return;\n                }\n            }\n\n\n            if (TKind && num_pair == 0) {\n                Console.WriteLine(\"three card\");\n                return;\n            } else if (TKind && num_pair == 1) {\n                Console.WriteLine(\"full house\");\n                return;\n            } else if (!TKind && num_pair == 1) {\n                Console.WriteLine(\"one pair\");\n                return;\n            } else if (num_pair == 2) {\n                Console.WriteLine(\"two pair\");\n                return;\n            }\n\n            if (hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2 && hand[3] == hand[0] + 3 && hand[4] == hand[0] + 4\n                ||hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) {\n                Console.WriteLine(\"straight\");\n                return;\n            }\n\n            Console.WriteLine(\"null\");\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace V0038{\n    public class Program{\n        public static void Main(string[] args){\n            var hands = new[]{\"null\", \"one pair\", \"two pair\", \"three card\", \"full house\", \"straight\", \"four card\"};\n\n            while(Console.In.Peek() != -1){\n                var card = Console.ReadLine().Split(',').Select(int.Parse).OrderBy(x => x).ToArray();\n                var res = 0;\n\n                for(var i = 0; i < 5; i++){\n                    for(var j = i + 1; j < 5; j++){\n                        if(card[i] == card[j]) res++;\n                    }\n                }\n\n                if(card.SequenceEqual(new[]{1, 10, 11, 12, 13})) res = 5;\n                \n                if(res == 0){\n                    var straight = true;\n                    for(var i = 1; i < 5; i++){\n                        if(card[i - 1] + 1 != card[i]) straight = false;\n                    }\n                    if(straight) res = 5;\n                }\n\n                Console.WriteLine(hands[res]);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nclass aoj\n{\n    static void Main()\n    {\n        string[] k = new string[50];\n        int l = 0;\n        while (true)\n        {\n            string c;\n            string a = Console.ReadLine();\n            if (String.IsNullOrEmpty(a)) break;\n            string[] b = a.Split(',');\n            int[] d = new int[5];\n            for (int i = 0; i < 5; i++)\n            {\n                d[i] = int.Parse(b[i]);\n            }\n            for(int i = 0; i < 5; i++)\n            {\n                int e = d[i];\n                int f = 0;\n                for (int j = 0; j+i < 5; j++)\n                {\n                    if (d[j] == e)\n                    {\n                        f++;\n                    }\n                }\n                if (f >= 4)\n                {\n                    c = \"four card\";\n                    goto stop;\n                }\n            }\n           /* for(int i = 0; i <1; i++)\n            {\n                int e=d[0], f=10000;\n                bool g = true;\n                for(int j = 0; j < 5; j++)\n                {\n                    if (d[j] != e)\n                    {\n                        f = d[j];\n                        break;\n                    }\n                }\n                for(int j = 0; j < 5; j++)\n                {\n                    if (d[j] != e && d[j] != f)\n                    {\n                        g = false;\n                    }\n                }\n                if (g)\n                {\n                    c = \"full house\";\n                    goto stop;\n                }\n            }*/\n            Array.Sort(d);\n            if ((d[0] == d[1] && d[1] == d[2] && d[3] == d[4]) || (d[0] == d[1] && d[2] == d[3] && d[3] == d[4]))\n            {\n                c = \"full house\";\n                goto stop;\n            }\n            bool g = true;\n            for(int i = 1; i < 5; i++)\n            {\n                \n                if (d[i] - d[i - 1] == 1)\n                {\n\n                }\n                else\n                {\n                    g = false;\n                }\n                if (d[0] == 1 && d[1] == 10 && d[2] == 11 && d[3] == 12 && d[4] == 13)\n                {\n                    g = true;\n                }\n               \n            }\n            if (g)\n                {\n                    c = \"straight\";\n                    goto stop;\n                }\n            for (int i = 0; i < 2; i++)\n            {\n                if (d[i] == d[i + 1] && d[i] == d[i + 2])\n                {\n                    c = \"three card\";\n                    goto stop;\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                for(int j = i+1;  j < 4; j++)\n                {\n                    if (d[i] == d[i + 1] && d[j] == d[j + 1])\n                    {\n                        c = \"two pair\";\n                        goto stop;\n                    }\n                }\n            }\n            for(int i = 0; i < 4; i++)\n            {\n                if (d[i] == d[i+1])\n                {\n                    c = \"one pair\";\n                    goto stop;\n                }\n            }\n            c = \"null\";\n            stop:;\n            k[l] = c;\n            l++;\n        }\n        for(int i = 0; i < l; i++)\n        {\n            Console.WriteLine(k[i]);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\n\nnamespace AOJ0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string input = Console.ReadLine();\n                if (string.IsNullOrEmpty(input)) break;\n\n                string[] num = input.Split(',');\n                IDictionary<int, int> table = new Dictionary<int, int>();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    if (table.ContainsKey(int.Parse(num[i])))\n                    {\n                        table[int.Parse(num[i])]++;\n                    } else\n                    {\n                        table[int.Parse(num[i])] = 1;\n                    }\n                }\n\n                List<KeyValuePair<int, int>> list = new List<KeyValuePair<int, int>>(table);\n                list.Sort((a, b) => a.Key - b.Key);\n                list.Sort((a, b) => b.Value - a.Value);\n\n                string output = \"null\";\n\n                switch (table.Count) {\n                    case 5:\n                        int count = 0;\n                        for (int i = 0; i < 4; i++)\n                        {\n                            if (list[i].Key + 1 == list[i+1].Key)\n                            {\n                                count++;\n                            }\n                        }\n                        if (count == 4)\n                        {\n                            output = \"straight\";\n                        }\n                        if (list[0].Key == 1 && list[1].Key == 10)\n                        {\n                           if (list[2].Key == 11 && list[3].Key == 12)\n                            {\n                                if (list[4].Key == 13)\n                                {\n                                    output = \"straight\";\n                                }\n                            }\n                        }\n                        break;\n\n                    case 4:\n                        output = \"one pair\";\n                        break;\n\n                    case 3:\n                        if (list[0].Value == 3)\n                        {\n                            output = \"three card\";\n                        } else\n                        {\n                            output = \"two pair\";\n                        }\n                        break;\n\n                    case 2:\n                        if (list[0].Value == 4)\n                        {\n                            output = \"four card\";\n                        } else\n                        {\n                            output = \"full house\";\n                        }\n                        break;\n                        \n                }\n\n                Console.WriteLine(output);\n                \n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace _0038\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string y = Console.ReadLine();\n                if (y == null) { break; }\n                int[] a = y.Split(',').Select(int.Parse).ToArray();\n                Array.Sort(a);\n                int g = a[0], h = a[1], j = a[2], k = a[3], l = a[4];\n                \n                if ((a[0] == a[1] && a[1] == a[2] && a[2] == a[3]) || (a[1] == a[2] && a[2] == a[3] && a[3] == a[4])) { Console.WriteLine(\"four card\"); }\n                else if ((a[0] == a[1] && a[1] == a[2] && a[3] == a[4]) || (a[2] == a[3] && a[3] == a[4] && a[1] == a[0])) { Console.WriteLine(\"full house\"); }\n                else if ((h == g + 1 && j == h + 1 && k == j + 1 && l == k + 1) || (h == 10 && j == 11 && k == 12 && l == 13 && g == 1)) { Console.WriteLine(\"straight\"); }\n                else if ((g == h && h == j) || (h == j && j == k) || (j == k && k == l)) { Console.WriteLine(\"three card\"); }\n                else if ((g == h && k == j) || (g == h && k == l) || (h == j && k == l)) { Console.WriteLine(\"two pair\"); }\n                else if (g == h || h == j || j == k || k == l) { Console.WriteLine(\"one pair\"); }\n                else\n                {\n                    Console.WriteLine(\"null\");\n                }\n            }\n\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace V0038{\n    public class Program{\n        public static void Main(string[] args){\n            var hands = new[]{\"null\", \"one pair\", \"two pair\", \"three card\", \"full house\", \"straight\", \"four card\"};\n\n            while(Console.In.Peek() != -1){\n                var card = Console.ReadLine().Split(',').Select(int.Parse).OrderBy(x => x).ToArray();\n                var res = 0;\n\n                for(var i = 0; i < 5; i++){\n                    for(var j = i + 1; j < 5; j++){\n                        if(card[i] == card[j]) res++;\n                    }\n                }\n\n                if(card.SequenceEqual(new[]{1, 10, 11, 12, 13})) res = 5;\n                \n                if(res == 0){\n                    for(var i = 1; i < 5; i++){\n                        if(card[i] + 1 != card[i - 1]) res = 5;\n                    }\n                }\n\n                Console.WriteLine(hands[res]);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\n\nnamespace test\n{\n    class Program\n    {\n\n        static void Main(string[] args)\n        {\n            List<string> resultList = new List<string>();\n\n            string input;\n            while ((input = Console.ReadLine()) != null)\n            {\n                string[] inputArray = input.Split(',');\n                List<int> inputList = new List<int>();\n                foreach (string s in inputArray)\n                {\n                    inputList.Add(int.Parse(s));\n                }\n\n                int[] numArray = new int[14];\n                List<int> pairList = new List<int>();\n                List<int> threeList = new List<int>();\n                List<int> fourList = new List<int>();\n                foreach (int n in inputList)\n                {\n                    numArray[n]++;\n                    switch (numArray[n])\n                    {\n                        case 2:\n                            pairList.Add(n);\n                            break;\n                        case 3:\n                            threeList.Add(n);\n                            break;\n                        case 4:\n                            fourList.Add(n);\n                            break;\n                    }\n                }\n\n                inputList.Sort();\n                bool straightFlag = false;\n\n                if (inputList[4] - inputList[0] == 4 ||\n                    (inputList[0] == 1 && inputList[1] == 10))\n                {\n                    straightFlag = true;\n                }\n                \n                if (fourList.Count != 0)\n                {\n                    resultList.Add(\"four card\");\n                }\n                else if (threeList.Count != 0 && pairList.Count == 2)\n                {\n                    resultList.Add(\"full house\");\n                }\n                else if (pairList.Count == 0 && straightFlag)\n                {\n                    resultList.Add(\"straight\");\n                }\n                else if (threeList.Count != 0)\n                {\n                    resultList.Add(\"three card\");\n                }\n                else if (pairList.Count == 2)\n                {\n                    resultList.Add(\"two pair\");\n                }\n                else if (pairList.Count == 1)\n                {\n                    resultList.Add(\"one pair\");\n                }\n                else\n                {\n                    resultList.Add(\"null\");\n                }\n            }\n\n            foreach (string s in resultList)\n            {\n                Console.WriteLine(s);\n            }\n\n        }\n\n\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                int[] cards = Array.ConvertAll(input.Split(','), int.Parse);\n\n                int[] memo = new int[14];\n                int max = 0;\n\n                for (int i = 0; i < 5; i++)\n                {\n                    memo[cards[i]]++;\n                    max = Math.Max(max, memo[cards[i]]);\n                }\n\n                if (max == 4)\n                {\n                    sb.AppendLine(\"four card\");\n                }\n                else if (max == 3)\n                {\n                    if (memo.Contains(2)) sb.AppendLine(\"full house\");\n                    else sb.AppendLine(\"three card\");\n                }\n                else if (max == 2)\n                {\n                    int count = memo.Where(a => a == 2).Count();\n\n                    if (count == 2) sb.AppendLine(\"two pair\");\n                    else sb.AppendLine(\"one pair\");\n                }\n                else\n                {\n                    bool isStraight = false;\n\n                    if (memo[1] > 0)\n                    {\n                        if (memo[10] > 0 && memo[11] > 0 && memo[12] > 0 && memo[13] > 0)\n                        {\n                            sb.AppendLine(\"straight\");\n                            isStraight = true;\n                        }\n                    }\n\n                    if (!isStraight)\n                    {\n                        int s = Array.IndexOf(memo, 1);\n\n                        if (memo[s + 1] > 0 && memo[s + 2] > 0 && memo[s + 3] > 0 && memo[s + 4] > 0)\n                        {\n                            sb.AppendLine(\"straight\");\n                        }\n                        else sb.AppendLine(\"null\");\n                    }\n                }\n            }\n            Console.Write(sb);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Volumen0\n{\n    class Program\n    {\n        static void Main()\n        {\n            var list = new int[5];\n            string line;\n            var cd = new Card();\n            while ((line = Console.ReadLine()) != null)\n            {\n                list = line.Split(',').Select(int.Parse).ToArray();\n                Array.Sort(list);\n                Console.WriteLine(cd.GetaHand(list));\n            }\n        }\n    }\n    class Card\n    {\n        internal string GetaHand(int[] num)\n        {\n            if (IsFC(num))\n                return \"four card\";\n            else if (IsFH(num))\n                return \"full house\";\n            else if (IsTC(num))\n                return \"three card\";\n            else if (Pairs(num) == 2)\n                return \"two pair\";\n            else if (Pairs(num) == 1)\n                return \"one pair\";\n            else\n            {\n                if (IsStrt(num))\n                    return \"straight\";\n                else\n                    return \"null\";\n            }\n        }\n        internal bool IsFC(int[] num)\n        {\n            return (num[0] == num[3] | num[1] == num[4]);\n        }\n        internal bool IsFH(int[] num)\n        {\n            return ((num[0] == num[2] && num[3] == num[4]) | (num[0] == num[1] && num[2] == num[4]));\n        }\n        internal bool IsStrt(int[] num)\n        {\n            if (num[0] == 1 && num[1] == 10 && num[2] == 11 && num[3] == 12 && num[4] == 13)\n                return true;\n            for (int i = 1; i < 5; ++i)\n            {\n                if (num[i] - num[i - 1] != 1)\n                    return false;\n            }\n            return true;\n        }\n        internal bool IsTC(int[] num)\n        {\n            return (num[0] == num[2] | num[1] == num[3] | num[2] == num[4]);\n        }\n        public static int Pairs(int[] num)\n        {\n            var tmp = num.ToList();\n            tmp = tmp.Distinct().ToList();\n            return 5 - tmp.Count();\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication8 {\n    class Program {\n        static void Main(string[] args) {\n            string data = \"\";\n            while((data = Console.ReadLine()) != null){\n            string[] hand = data.Split(',');\n            DrawPoker table = new DrawPoker();\n            table.setHand(hand);\n            table.checkHand();\n            }\n        }\n    }\n\n    \n    class DrawPoker {\n        int[] hand;\n\n        public DrawPoker() {\n            hand = new int[5];\n        }\n        public void setHand(string[] playhand){\n            for (int i = 0; i < playhand.Length; i++) {\n                hand[i] = int.Parse(playhand[i]);\n            } \n        }\n        public void checkHand() {\n            Array.Sort(hand);\n            int num_pair = 0;\n            bool TKind = false;\n\n            for (int i = 0; i < hand.Length; i++) {\n                int max_surt = 1;\n                for (int j = i + 1; j < hand.Length; j++) {\n                    if (hand[i]==hand[j]) {\n                        max_surt++;\n                    }\n                }\n                if (max_surt == 2) {\n                    num_pair++;\n                    i += 1;\n                } else if (max_surt == 3) {\n                    TKind = true;\n                    i += 2;\n                } else if (max_surt == 4 ) {\n                    Console.WriteLine(\"four card\");\n                    return;\n                }\n            }\n\n\n            if (TKind && num_pair == 0) {\n                Console.WriteLine(\"three card\");\n                return;\n            } else if (TKind && num_pair == 1) {\n                Console.WriteLine(\"full house\");\n                return;\n            } else if (!TKind && num_pair == 1) {\n                Console.WriteLine(\"one pair\");\n                return;\n            } else if (num_pair == 2) {\n                Console.WriteLine(\"two pair\");\n                return;\n            }\n\n            if (hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2 && hand[3] == hand[0] + 3 && hand[4] == hand[0] + 4\n                ||hand[0] == 1 && hand[1] == 10 && hand[2] == 11 && hand[3] == 12 && hand[4] == 13) {\n                Console.WriteLine(\"straight\");\n                return;\n            }\n\n            Console.WriteLine(\"null\");\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\n\nnamespace AtCoderCS\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            while (true)\n            {\n                string moji = Console.ReadLine();\n                if (moji == null || moji.Length < 1) break;\n                int[] cards = moji.Split(',').Select(x => int.Parse(x)).ToArray();\n                if (cards != null && cards.Length == 5)\n                {\n                    int[] index = new int[13];\n                    foreach (int num in cards)\n                    {\n                        index[num - 1]++;\n                    }\n                    int renzoku = 0;\n                    bool zenkaiflg = false;\n                    int pair2 = 0;\n                    int pair3 = 0;\n                    string ans = null;\n                    foreach (int a in index)\n                    {\n                        if (a == 2)\n                        {\n                            pair2++;\n                        }\n                        else if (a == 3)\n                        {\n                            pair3++;\n                        }\n                        else if (a == 4)\n                        {\n                            ans = \"four card\";\n                        }\n                        else if (a == 1)\n                        {\n                            if (zenkaiflg) renzoku++;\n                            else renzoku = 1;\n                            zenkaiflg = true;\n                        }\n                        else\n                        {\n                            zenkaiflg = false;\n                        }\n                    }\n                    if (ans == null)\n                    {\n                        if (pair2 == 1 && pair3 == 1)\n                        {\n                            ans = \"full house\";\n                        }\n                        else if (pair2 == 2)\n                        {\n                            ans = \"two pair\";\n                        }\n                        else if (pair3 == 1)\n                        {\n                            ans = \"three card\";\n                        }\n                        else if (pair2 == 1)\n                        {\n                            ans = \"one pair\";\n                        }\n                        else if (renzoku == 5)\n                        {\n                            ans = \"straight\";\n                        }\n                        else\n                        {\n                            if (index[0] == 1 && index[9] == 1 && index[10] == 1 && index[11] == 1 && index[12] == 1)\n                            {\n                                ans = \"straight\";\n                            }\n                            else\n                            {\n                                ans = \"null\";\n                            }\n                        }\n                    }\n                    Console.Out.WriteLine(ans);\n                }\n                else break;\n            }\n\n        }\n    }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if(c[0] == c[1] && c[1] == c[2] && c[2] == c[3]){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] = c[4]))\n      || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]){\n      result = \"one pair\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').map(function(i){f=function(a,b){return b-a};a=[],c=i.split(\",\").sort(f);c.map(function(j){a[j]?a[j]++:a[j]=1});a.sort(f);l=a[0],n=a[1];console.log(l==4?\"four card\":l==3?(n==2?\"full house\":\"three card\"):l==2?(n==2?\"two pair\":\"one pair\"):4==c[0]-c[4]||(c[0]-c[3]==3&&+c[4]==1)?\"straight\":\"null\")})"
  },
  {
    "language": "JavaScript",
    "code": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').map(function(i){f=function(a,b){return b-a};a=[],c=i.split(\",\").sort(f);c.map(function(j){a[j]?a[j]++:a[j]=1});a.sort(f);l=a[0],n=a[1];console.log(l==4?\"four card\":l==3?(n==2?\"hull house\":\"three card\"):l==2?(n==2?\"two pair\":\"one pair\"):4==c[0]-c[4]||(c[0]-c[3]==3&&+c[4]==1)?\"straight\":\"null\")})"
  },
  {
    "language": "JavaScript",
    "code": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var I=0;I<Arr.length;I++){\n   var a=Arr[I].split(\",\").map(Number);\n   var arr=[];\n   for(var i=0;i<13;i++)arr[i]=0;\n      a.forEach(function(v){\n      arr[v-1]++;\n   });\n   var copy=arr.slice();\n   arr.sort(function(a,b){return b-a;});\n   var ans;\n   if(arr[0]>=4)ans=\"four card\";\n   else if(arr[0]==3 && arr[1]==2)ans=\"full house\";\n   else if((copy.join(\"\")).match(/11111|1000000001111/))ans=\"straight\";\n   else if(arr[0]==3)ans=\"three card\";\n   else if(arr[0]==2 && arr[1]==2)ans=\"two pair\";\n   else if(arr[0]==2)ans=\"one pair\";\n   else ans=\"null\";\n   console.log(ans);\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] = c[4]))\n      || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if(c[0] == c[1] && c[1] == c[2] && c[2] == c[3]){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] = c[4]))\n      || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]){\n      result = \"one pair\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if(c[0] == c[1] && c[1] == c[2] && c[2] == c[3]){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] = c[4]))\n      || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]){\n      result = \"one pair\";\n    }\n\n    console.log(result);\n    \n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if(c[0] == c[1] && c[1] == c[2] && c[2] == c[3]){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] = c[4]))\n      || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]){\n      result = \"one pair\";\n    }\n\n    console.log(result);\n    \n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = p.length;\n  for (var i = 0; i < n; i++) {\n    var a = p.shift().split(',').map(Number);\n    var r = {};\n    for (var j = 0; j < a.length; j++) {\n      if (a[j] in r) {\n        r[a[j]]++;\n      } else {\n        r[a[j]] = 1;\n      }\n    }\n    var c = [];\n    for (var k in r) {\n      if (r[k] in c) {\n        c[r[k]].push(k);\n      } else {\n        c[r[k]] = [k];\n      }\n    }\n    console.log(check(c));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction check(c) {\n  if (c[4]) {\n    return 'four card';\n  }\n  if (c[3] && c[2]) {\n    return 'full house';\n  }\n  if (c[1] && c[1].length === 5) {\n    var a = c[1];\n    a = a.map(Number).sort(function (a, b) {\n      return a - b;\n    });\n    //console.log(a);\n    if (a[0] > 9) {\n      return 'null';\n    }\n    if (a[1] === 10) {\n      return 'straight';\n    }\n    if (a[1] === a[0] + 1 &&\n      a[2] === a[1] + 1 &&\n      a[3] === a[2] + 1 &&\n      a[4] === a[3] + 1\n    ) {\n      return 'straight';\n    }\n  }\n  if (c[3]) {\n    return 'three card';\n  }\n  if (c[2] && c[2].length === 2) {\n    return 'two pair';\n  }\n  if (c[2]) {\n    return 'one pair';\n  }\n  return 'null';\n}"
  },
  {
    "language": "JavaScript",
    "code": "function fourCard(hand) {\n\treturn hand.filter(function(n) {\n\t\treturn n == hand[2];\n\t}).length == 4;\n}\nfunction fullHouse(hand) {\n\treturn threeCard(hand)\n\t\t&& (hand[0] == hand[1] || hand[3] == hand[4]);\n}\nfunction straight(hand) {\n\treturn ((hand[4] - hand[3] == 1 && hand[3] - hand[2] == 1 && hand[2] - hand[1] == 1)\n\t\t&& (hand[1] - hand[0] == 1 || hand[4] == 13 && hand[0] == 1));\n}\nfunction threeCard(hand) {\n\treturn hand.filter(function(n) {\n\t\treturn n == hand[2];\n\t}).length == 3;\n}\nfunction twoPair(hand) {\n\treturn hand.filter(function(n) {\n\t\treturn n == hand[1];\n\t}).length == 2\n\t&& hand.filter(function(n) {\n\t\treturn n == hand[3];\n\t}).length == 2;\n}\nfunction onePair(hand) {\n\treturn hand[0] == hand[1] || hand[1] == hand[2] || hand[2] == hand[3] || hand[3] == hand[4];\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n\tvar hand = line.split(',').map(function(n){return +n;}).sort(function(a,b){return a-b;});\n\n\tvar yaku = 'null';\n\tif (fourCard(hand)) yaku = 'four card';\n\telse if (fullHouse(hand)) yaku = 'full house';\n\telse if (straight(hand)) yaku = 'straight';\n\telse if (threeCard(hand)) yaku = 'three card';\n\telse if (twoPair(hand)) yaku = 'two pair';\n\telse if (onePair(hand)) yaku = 'one pair';\n\n\tconsole.log(yaku);\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] = c[4]))\n      || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]){\n      result = \"one pair\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }else if(c[0] == c[1] && c[1] == c[2] && c[3] == c[4]\n             || c[0] == c[1] && c[2] == c[3] && c[3] == c[4]){\n      result = \"full house\";\n    }else if(c[0] == c[1] + 1 && c[1] == c[2] + 1 && c[2] == c[3] + 1\n             && ((c[0] == 13 && c[4] == 1) || (c[3] == c[4] + 1))){\n      result = \"straight\";\n    }else if((c[0] == c[1] && c[1] == c[2])\n             || (c[1] == c[2] && c[2] == c[3])\n             || (c[2] == c[3] && c[3] == c[4])\n             ){\n      result = \"three card\";\n    }else if((c[0] == c[1] && (c[2] == c[3] || c[3] == c[4])) || (c[1] == c[2] && c[3] == c[4])){\n      result = \"two pair\";\n    }else if(c[0] == c[1] || c[1] == c[2] || c[2] == c[3] || c[3] == c[4]){\n      result = \"one pair\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// 標準入力\nvar fs = require('fs'),\nlength = fs.fstatSync(process.stdin.fd).size,\nbuffer = new Buffer(length),\nbytesRead = fs.readSync(process.stdin.fd, buffer, 0, length, 0),\ninput = buffer.toString('utf8', 0, bytesRead).trim().split('\\n');\nmain();\n\nfunction main(){\n  for(var i = 0, len = input.length; i < len; i++){\n    var c = input[i].trim().split(',').sort(function(a,b){return b-a;}).map(Number);\n    var result = \"null\";\n    if((c[0] == c[1] && c[1] == c[2] && c[2] == c[3]) ||\n       (c[1] == c[2] && c[2] == c[3] && c[3] == c[4])\n       ){\n      result = \"four card\";\n    }\n    console.log(result);\n  }\n}"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.split(?,).map(&:to_i).sort;b=a.map{|j|a.count(j)}.max;s=a.uniq.size;puts b>3?\"four card\":b>2?s>2?\"three card\":\"full house\":b>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "def straight?(cards)\n  _cards = cards.dup\n  for i in 0..1 #1,10,11,12,13だったら10,11,12,13,14とする\n    _cards[i] += 13 if _cards[i] <= 2\n  end\n  _cards.sort! #再ソート\n  f = true\n  for i in 1..4 #連番判定\n    f = false unless _cards[i] == _cards[i-1]+1\n  end\n  return f\nend\n\ndef card_group_by(cards)\n  return cards.group_by{|card|\n    card\n  }.map{|k, v|\n    [k, v.size]\n  }.sort_by{|e| #枚数が多い順に並べる\n    -e[1]\n  }\nend\n\ndef one_pair?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 2 && !two_pair?(cards) then\n    return true\n  end\n  return false\nend\n\ndef two_pair?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 2 && gcards[1][1] == 2 then\n    return true\n  end\n  return false\nend\n\ndef three_card?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 3 && !full_house?(cards) then\n    return true\n  end\n  return false\nend\n\ndef full_house?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 3 && gcards[1][1] == 2 then\n    return true\n  end\n  return false\nend\n\ndef four_card?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 4 then\n    return true\n  end\n  return false\nend\n\nwhile s = gets\n  break if s == nil\n  cards = s[0..-2].split(\",\").map{|card|\n    card.to_i\n  }.sort\n  if four_card?(cards) then\n    puts \"four card\"\n  elsif full_house?(cards) then\n    puts \"full house\"\n  elsif straight?(cards) then\n    puts \"straight\"\n  elsif three_card?(cards) then\n    puts \"three card\"\n  elsif two_pair?(cards) then\n    puts \"two pair\"\n  elsif one_pair?(cards) then\n    puts \"one pair\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets do\n  a = Array.new(13,0)\n  $_.split(\",\").map(&:to_i).each do |i|\n    a[i-1]+=1\n  end\n  if a.member?(4) then\n    puts \"four card\"\n  elsif a.member?(2) then\n    if a.member?(3) then\n      puts \"full house\"\n    elsif a.index(2) == a.rindex(2) then\n      puts \"one pair\"\n    else\n      puts \"two pair\"\n    end\n  elsif a.member?(3) then\n    puts \"three card\"\n  elsif a.join =~ /1{5}/ || a.join =~ /10{8}1{4}/ then\n    puts \"straight\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while l = gets do\n  c = Array.new(14,0)\n  l.split(\",\").map(&:to_i).each{|x| c[x]+=1}\n  if c.member?(4)\n    puts \"four card\"\n  elsif c.member?(2)\n    if c.member?(3)\n      puts \"full house\"\n    elsif c.index(2)!=c.rindex(2)\n      puts \"two pair\"\n    else puts \"one pair\"\n    end\n  elsif c.member?(3)\n    puts \"three card\"\n  elsif (t=c.join)=~/1{5}/ || t=~/010{8}1{4}/\n    puts \"straight\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while l = gets\n    a = l.split(\",\").map(&:to_i).sort\n    g = a.group_by(&:itself)\n    g = a.group_by(&:itself).values.map(&:size).sort\n    if g == [1, 4]\n        puts 'four card'\n    elsif g == [2, 3]\n        puts 'full house'\n    elsif a == (a.min..a.max).to_a or a == [1] + (10..13).to_a\n        puts 'straight'\n    elsif g == [1, 1, 3]\n        puts 'three card'\n    elsif g == [1, 2, 2]\n        puts 'two pair'\n    elsif g == [1, 1, 1, 2]\n        puts 'one pair'\n    else\n        puts 'null'\n    end\nend\n\n"
  },
  {
    "language": "Ruby",
    "code": "while str=gets\n    a=Array.new(13,0)\n    str.split(\",\").each do |b|\n        a[b.to_i-1]+=1\n        end\n    str=a.join\n    a.delete(0)\n    a.sort!\n    case a\n        when [1,1,1,1,1]\n        puts \"straight\" if (str=~/1{5}/)||(str=~/10{8}1{4}/)\n        when [1,1,1,2]\n            puts \"one pair\"\n        when [1,2,2]\n            puts \"two pair\"\n        when [1,1,3]\n            puts \"three card\"\n        when [2,3]\n            puts \"full house\"\n        when [1,4]\n            puts \"four card\"\n        else\n            puts \"null\"\n    end\nend"
  },
  {
    "language": "Ruby",
    "code": "while s = gets\n  b = Array.new(13, 0)\n  s.split(',').each { |c| b[c.to_i - 1] += 1 } \n  s = b.join\n  b.delete(0)\n\n  h = 'null'\n\n  case b.sort\n    when [1, 1, 1, 1, 1]\n      h = 'straight' if s =~ /1{5}/ || s =~ /10{8}1{4}/\n    when [1, 4]\n      h = 'four card'\n    when [2, 3]\n      h = 'full house'\n    when [1, 1, 3]\n      h = 'three card'\n    when [1, 2, 2]\n      h = 'two pair'\n    when [1, 1, 1, 2]\n      h = 'one pair'\n  end\n   \n  puts h\nend"
  },
  {
    "language": "Ruby",
    "code": "while line = gets do\n  count = Array.new(14){0}\n  (hand=line.split(\",\").map(&:to_i)).each{|x|\n    count[x]+=1\n  }\n  if count.include?(4)  || count.include?(5)\n    puts \"four card\"\n  elsif count.include?(2)\n    if count.include?(3)\n      puts \"full house\"\n    elsif count.index(2)!=count.rindex(2)\n      puts \"two pair\"\n    else puts \"one pair\"\n    end\n  elsif count.include?(3)\n    puts \"three card\"\n  elsif count.join=~/11111/ || count[1]==1&&count[10..13]==[1,1,1,1]\n    puts \"straight\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while str = gets\n  arr = str.split(',').map(&:to_i)\n  cards = Array.new(13, 0)\n  arr.each do |a|\n    cards[a - 1] += 1\n  end\n\n  result = if cards.max == 4\n             'four card'\n           elsif cards.max == 3 && cards.select { |i| i == 2 }.count == 1\n             'full house'\n           elsif cards.join('') =~ /(1{5}|10{8}1{4})/\n             'straight'\n           elsif cards.max == 3\n             'three card'\n           elsif cards.select { |i| i == 2 }.count == 2\n             'two pair'\n           elsif cards.select { |i| i == 2 }.count == 1\n             'one pair'\n           else\n             'null'\n           end\n  puts result\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets do\n  cs = $_.split(',').map(&:to_i)\n  ch = Array.new(13){0}\n  cs.each{ |i| ch[i-1] += 1 }\n  str = ch.join('')\n  ch.delete(0)\n\n  case ch.sort\n    when [1, 4]\n      puts \"four card\"\n    when [2, 3]\n      puts \"full house\"\n    when [1,1,1,1,1]\n      puts (str =~ /1{5}/ or str =~ /10{8}1{4}/) ? \"straight\" : \"null\"\n    when [1,1,3]\n      puts \"three card\"\n    when [1,2,2]\n      puts \"two pair\"\n    when [1,1,1,2]\n      puts \"one pair\"\n    else\n      puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.chop.split(?,).map(&:to_i).sort;b=a.uniq.map{|j|a.count(j)};s,c=b.size,b.max;puts c>3?\"four card\":c>2?s>2?\"three card\":\"full house\":c>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "def same_numbers(ary, result = [])\n  return result.sort if ary.empty?\n  a = ary.first\n  co = ary.count(a)\n  result << co if co > 1\n  same_numbers(ary - [a], result)\nend\n\n$<.readlines.map {|l| l.split(\",\").map(&:to_i)}.each do |hand|\n  puts case same_numbers(hand)\n       when [4]    then \"four card\"\n       when [2, 3] then \"full house\"\n       when [3]    then \"three card\"\n       when [2, 2] then \"two pair\"\n       when [2]    then \"one pair\"\n       else\n         hand.sort!\n         if hand.sum == (hand.first + 2) * 5 or hand == [1, 10, 11, 12, 13]\n           \"straight\"\n         else\n           \"null\"\n         end\n       end\nend\n"
  },
  {
    "language": "Ruby",
    "code": "while gets\n  cards = $_.split(',').map(&:to_i)\n  count_list = Array.new(13, 0)\n  cards.each { |i| count_list[i-1] += 1 }\n\n  if count_list.select { |n| n == 4 }.count == 1\n    puts 'four pair'\n  elsif count_list.select { |n| n == 3 }.count == 1 and count_list.select { |n| n == 2 }.count == 1\n    puts 'full house'\n  elsif count_list.select { |n| n == 3 }.count == 1\n    puts 'three pair'\n  elsif count_list.select { |n| n == 2 }.count == 2\n    puts 'two pair'\n  elsif count_list.select { |n| n == 2 }.count == 1\n    puts 'one pair'\n  elsif count_list.join('') =~ /(11111|^10{8}1111$)/\n    puts 'straight'\n  else\n    puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.chop.split(?,).map(&:to_i).sort;b=a.uniq.map{|j|a.count(j)}.max;s=a.uniq.size;puts b>3?\"four card\":b>2?s>2?\"three card\":\"full house\":b>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.chop.split(?,).map(&:to_i).sort;b=a.uniq.map{|j|a.count(j)}.sort.reverse;s=b.size;puts b[0]>3?\"four card\":b[0]>2?s>2?\"three card\":\"full house\":b[0]>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:strait: :null}"
  },
  {
    "language": "Ruby",
    "code": "#!ruby -palF,\nr=[[1,4,\"four card\"],[2,3,\"full house\"],[1,1,3,\"three card\"],[1,2,2,\"two pair\"],[1,1,1,2,\"one pair\"]].find{|l|l[0..-2]==$F.group_by{|i|i}.map{|k,v|v.size}.sort}\n$_=r ?r[-1]:($F.map!(&:to_i).sort![4]-$F[0]==4||$F[1]-$F[0]==9)?\"straight\":\"null\""
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.chop.split(?,).map(&:to_i).sort;b=a.uniq.map{|j|a.count(j)}.sort.reverse;s,c=b.size,b.max;puts c>3?\"four card\":c>2?s>2?\"three card\":\"full house\":c>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "class Poker\n  def initialize\n    @card_list = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\n              \"8\",\"9\",\"10\",\"11\",\"12\",\"13\"]\n    @results = []\n    input\n    @results.each do |ans|\n      puts ans\n    end\n  end\n\n  def input\n    while input = $stdin.gets\n      @results << checker(create_hand(input))\n    end\n  end\n\n  def create_hand(input)\n    input.chomp.split(',')\n  end\n\n  def checker(hands)\n    @card_list.each_with_index do |elem,index|\n      case hands.count(elem)   \n      when 2\n        hands.delete(elem)\n        return two_check(hands)\n      when 3\n        hands.delete(elem)\n        return three_check(hands)\n      when 4\n        return \"four card\"\n      else\n      end\n    end \n    return straight_check(hands)\n  end\n\n  def two_check(hands)\n    hands.each do |elem|\n      case hands.count(elem)\n      when 2\n        return \"two pair\"\n      when 3\n        return \"full house\"\n      end\n    end\n    return \"one pair\"\n  end\n\n  def three_check(hands)\n    hands.each do |elem|\n      case hands.count(elem)\n      when 2\n        return \"full house\"\n      else\n        return \"three card\"\n      end\n    end\n  end\n\n  def straight_check(hands)\n    count = 0\n    (@card_list+[\"1\"]).each do |elem|\n      if hands.include?(elem)\n        count += 1\n        return \"straight\" if count == 5\n      else\n        count = 0\n      end\n    end\n    return \"null\"\n  end\nend\n\np = Poker.new"
  },
  {
    "language": "Ruby",
    "code": "$porkerHand = [nil,\n               \"one pair\",\n               \"two pair\",\n               \"three card\",\n               \"full house\",\n               nil,\n               \"four card\"]\narr = Array.new\nwhile line = gets\n  arr << line\nend\narr.each do |i|\n  a = i.split(\",\")\n  a.map!{|j| j.to_i}\n  a.sort!\n  pair = 0\n  a.combination(2){|a, b| pair += 1 if a == b}\n  fmin = a[0]\n  fmax = a[-1]\n  if pair != 0\n    puts $porkerHand[pair]\n  elsif (fmax - fmin == 4) or a == [1, 10, 11, 12, 13]\n    puts \"straight\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while input = gets\n  hand = input.split(',').map(&:to_i).group_by { |num| num }.to_h\n\n  if hand.keys.length == 2\n    if hand.values.map(&:length).include?(4)\n      puts 'four card'\n    else\n      puts 'full house'\n    end\n  elsif hand.keys.length == 5\n    sorted_nums = hand.keys.sort\n    if sorted_nums.include?(1)\n      start_num = 1\n    else\n      start_num = sorted_nums[0]\n    end\n    straight_hand = [start_num, *sorted_nums[1]..(sorted_nums[1] + 3)]\n\n    if sorted_nums == straight_hand\n      puts 'straight'\n    else\n      puts 'null'\n    end\n  elsif hand.keys.length == 3\n    if hand.values.map(&:length).include?(3)\n      puts 'three card'\n    else\n      puts 'two pair'\n    end\n  elsif hand.keys.length == 4\n    puts 'one pair'\n  else\n    puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def same?(f,*ns)\n  r = true\n  ns.each do |n|\n    unless f == n then r = false; break end\n  end\n  return r\nend\n\ndef succ?(f,*ns)\n  r = true\n  ns.each.with_index do |n, idx|\n    unless f == (n-idx-1) then r = false; break end\n  end\n  return r\nend\n\nwhile gets\n  a,b,c,d,e = $_.split(\",\").map(&:to_i).sort\n  if same?(a,b,c,d) or same?(b,c,d,e) then puts \"four card\"\n  elsif (same?(a,b,c) and d==e) or (a==b and same?(c,d,e)) then puts \"full house\"\n  elsif (a==1 and b==10 and succ?(b,c,d,e)) or succ?(a,b,c,d,e) then puts \"straight\"\n  elsif same?(a,b,c) or same?(b,c,d) or same?(c,d,e) then puts \"three card\"\n  elsif (a==b and c==d) or (a==b and d==e) or (b==c and d==e) then puts \"two pair\"\n  elsif a==b or b==c or c==d or d==e then puts \"one pair\"\n  else puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets do\n  c = Array.new(13){0}\n  $_.chomp.split(',').map(&:to_i).each{|i| c[i-1] += 1}\n  str = c.join('')\n  c.select!{|v| v!=0}\n\n  res = 'null'\n  case c.sort\n    when [1,1,1,1,1]\n      res = 'straight' if str =~ /1{5}/ || str =~ /10{8}1{4}/\n    when [1,4]\n      res = 'four card'\n    when [2,3]\n      res = 'full house'\n    when [1,1,3]\n      res = 'three card'\n    when [1,2,2]\n      res = 'two pair'\n    when [1,1,1,2]\n      res = 'one pair'\n  end\n  puts res\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets\n  cards = $_.split(',').map(&:to_i)\n  count_list = Array.new(13, 0)\n  cards.each { |i| count_list[i-1] += 1 }\n  st = count_list.join\n  count_list.delete(0)\n  count_list = count_list.sort\n\n  if count_list == [1, 4]\n    puts 'four pair'\n  elsif count_list == [2, 3]\n    puts 'full house'\n  elsif count_list == [1, 1, 3]while s = gets do\n  hu = s.split(',').map(&:to_i)\n  cc = Array.new(13){0}\n  hu.each { |c| cc[c-1] += 1 }\n  st = cc.join\n  cc.delete(0)\n\n  scr='null'\n  case cc.sort\n    when [1,4]\n      scr='four card'\n    when [2,3]\n      scr='full house'\n    when [1,1,1,1,1]\n      scr='straight' if st =~ /1{5}/ or st =~ /10{8}1{4}/\n    when [1,1,3]\n      scr='three card'\n    when [1,2,2]\n      scr='two pair'\n    when [1,1,1,2]\n      scr='one pair'\n  end\n  puts scr\nend\n    puts 'three pair'\n  elsif count_list == [1, 2, 2]\n    puts 'two pair'\n  elsif count_list == [1, 1, 1, 2]\n    puts 'one pair'\n  elsif st =~ /(1{5}|10{8}1{4})/\n    puts 'straight'\n  else\n    puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def q*a;a.delete a[0];a.empty?end\n$<.map{|x|\n  a,b,c,d,e=x.chop.split(\",\").map(&:to_i).sort;\n  puts case\n  when q(a,b,c,d)||q(b,c,d,e);\"four card\"\n  when a==b&&q(c,d,e)||q(a,b,c)&&d==e;\"full house\"\n  when (s=[a,b,c,d,e])==(a..e).to_a||s==[1,10,11,12,13];\"straight\"\n  when q(a,b,c)||q(b,c,d)||q(c,d,e);\"three card\"\n  when a==b&&(c==d||d==e)||b==c&&d==e;\"two pair\"\n  when a==b||b==c||c==d||d==e;\"one pair\"\n  else \"null\"\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "def incremental? (card)\n\t(card.size-2).times {|i| return false if card[i]+1 != card[i+1]}\n\treturn true\nend\n\ndef is_straight(card)\n\treturn true if incremental?(card) || card == [1,10,11,12,13]\n\treturn false\nend\n\nwhile gets\n\tcard = $_.split(',').map(&:to_i).sort\n\tnext if card[0] == 0\n\tcount = []\n\t5.times {|i| count[i] = card.count(card[i])}\n\thand = \"null\"\n\thand = \"one pair\" if count.index(2)\n\thand = \"two pair\" if count.count(2) == 4\n\thand = \"three card\" if count.index(3)\n\thand = \"straight\" if is_straight(card)\n\thand = \"full house\" if count.index(2) && count.index(3)\n\thand = \"four card\" if count.index(4)\n\tputs hand\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|b=(a=i.split(?,).map(&:to_i).sort).map{|j|a.count(j)}.max;s=a.uniq.size;puts b>3?\"four card\":b>2?s>2?\"three card\":\"full house\":b>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.split(?,).map(&:to_i).sort;b,c=a.uniq.map{|j|-a.count(j)}.sort;puts b<-3?\"four card\":b<-2?c>-2?\"three card\":\"full house\":b<-1?c>-2?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "def is_straight(card)\n\t(card.size-1).times do |i|\n\t\tnext if card[i]+1 == card[i+1]\n\t\tnext if card[-1] == 13 && is_straight(card[i+1,card.size-(i+1)])\n\t\treturn false\n\tend\n\treturn true\nend\n\nwhile gets\n\tcard = $_.split(',').map(&:to_i).sort\n\tcount = []\n\t5.times {|i| count[i] = card.count(card[i])}\n\thand = \"null\"\n\thand = \"one pair\" if count.index\n\thand = \"two pair\" if count.count(2) == 4\n\thand = \"three card\" if count.index(3)\n\thand = \"straight\" if is_straight(card)\n\thand = \"full house\" if count.index(2) && count.index(3)\n\thand = \"four card\" if count.index(4)\n\tputs hand\nend"
  },
  {
    "language": "Ruby",
    "code": "#coding:utf-8\n\nclass Cards\n\tdef initialize(args)\n\t\t@cards = args\n\t\t@rank = \"nil\"\n\t\t@cards.sort!\n\tend\n\n\tdef getCards\n\t\t@cards\n\tend\n\n\tdef rankcheck\n\t\t\n\t\tif four then\n\t\t\t@rank = \"four card\"\n\t\telsif fullhouse then\n\t\t\t@rank = \"full house\"\n\t\telsif straight then\n\t\t\t@rank = \"straight\"\n\t\telsif three then\n\t\t\t\t@rank = \"three card\"\n\t\telsif two then  \t\t\t\n\t\t\t@rank = \"two pair\"\n\t\telsif one then\n\t\t\t@rank = \"one pair\"\n\t\telse\n\t\t\t@rank = \"null\"\n\t\tend\n\t\treturn @rank\n\tend\n\n\tdef four\n\t\ta = check(@cards)\n\t\tuniq = unique(a,1)\n\t\tresult = (a.size==4 && uniq)? true : false\n\tend\n\tdef fullhouse\n\t\ta = check(@cards)\n\t\tuniq = unique(a,2)\n\t\tresult = (a.size==5 && uniq)? true : false\n\tend\n\tdef straight\n\t\ta,b,c = @cards[0],@cards[2], @cards[-1]\n\t\tsum = @cards.inject(0){|tmp,x| tmp+x}\n\t\tif sum==(a+c)*2+b && check(@cards).size==0 then\n\t\t\tresult  = true\t\n\t\tend\n\t\tresult = true if @cards == [1,10,11,12,13]\n\t\tresult = false if @cards == [1,2,11,12,13]\n\t\treturn result\n\tend\n\tdef three\n\t\ta = check(@cards)\n\t\tuniq = unique(a,1)\n\t\tresult = (a.size==3 && uniq)? true : false\n\tend\n\tdef two\n\t\ta = check(@cards)\n\t\tuniq = unique(a,2)\n\t\tresult = (a.size==4 && uniq)? true : false\n\tend\n\tdef one\n\t\ta = check(@cards)\n\t\tuniq = unique(a,1)\n\t\tresult =  (a.size==2 && uniq)? true : false\n\tend\n\t\n\tdef check(args)\n\t\targs.select{|x|args.index(x) != args.rindex(x)}\n\tend\n\tdef unique(args,n)\n\t\ttmp = args.uniq.size==n\n\tend\n\t\nend\n\nwhile !STDIN.eof? do\n\tstr = gets.chomp.split(',').map(&:to_i)\n\tcards = Cards.new(str)\n\t#p cards.getCards\n\n\tprint \"#{cards.rankcheck}\\n\"\n\nend"
  },
  {
    "language": "Ruby",
    "code": "while query = gets\n  hand = query.chomp.split(\",\").map(&:to_i)\n  cnt_max = hand.max_by{|x| hand.count(x)}\n  same = hand.count(cnt_max)\n\n  case same\n  when 4\n    puts \"four card\"\n\n  when 3\n    cnt_min = hand.min_by{|x| hand.count(x)}\n    p cnt_min\n    if hand.count(cnt_min) == 2\n      puts \"full house\"\n    else puts \"three card\"\n    end\n\n  when 2\n    if hand.uniq.length == 3\n      puts \"two pair\"\n    else puts \"one pair\"\n    end\n\n  else\n    hand.sort!\n    str_flag = true\n    4.times do |i|\n      unless hand[i+1] - hand[i] == 1\n        str_flag = false\n        break\n      end\n    end\n\n    if str_flag\n      puts \"straight\"\n    elsif hand == [1, 10, 11, 12, 13]\n      puts \"straight\"\n    else puts \"null\"\n    end\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while query = gets\n  hand = query.chomp.split(\",\").map(&:to_i)\n  cnt_max = hand.max_by{|x| hand.count(x)}\n  same = hand.count(cnt_max)\n\n  case same\n  when 4\n    puts \"four card\"\n\n  when 3\n    cnt_min = hand.min_by{|x| hand.count(x)}\n    if hand.count(cnt_min) == 2\n      puts \"full house\"\n    else puts \"three card\"\n    end\n\n  when 2\n    if hand.uniq.length == 3\n      puts \"two pair\"\n    else puts \"one pair\"\n    end\n\n  else\n    hand.sort!\n    str_flag = true\n    4.times do |i|\n      unless hand[i+1] - hand[i] == 1\n        str_flag = false\n        break\n      end\n    end\n\n    if str_flag\n      puts \"straight\"\n    elsif hand == [1, 10, 11, 12, 13]\n      puts \"straight\"\n    else puts \"null\"\n    end\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def straight?(cards)\n  _cards = cards.dup\n  _cards[0] += 13 if _cards[0] == 1 && _cards[1] == 10#1,10,?,?,?だったら14,10,11,12,13に絞って良い\n\n  _cards.sort! #再ソート\n  f = true\n  for i in 1..4 #1,2,3,4,5などの連番判定\n    f = false unless _cards[i] == _cards[i-1]+1\n  end\n  return f\nend\n\ndef card_group_by(cards)\n  return cards.group_by{|card|\n    card\n  }.map{|k, v|\n    [k, v.size]\n  }.sort_by{|e| #枚数が多い順に並べる\n    -e[1]\n  }\nend\n\ndef one_pair?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 2 && !two_pair?(cards) then\n    return true\n  end\n  return false\nend\n\ndef two_pair?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 2 && gcards[1][1] == 2 then\n    return true\n  end\n  return false\nend\n\ndef three_card?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 3 && !full_house?(cards) then\n    return true\n  end\n  return false\nend\n\ndef full_house?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 3 && gcards[1][1] == 2 then\n    return true\n  end\n  return false\nend\n\ndef four_card?(cards)\n  gcards = card_group_by(cards)\n  if gcards[0][1] == 4 then\n    return true\n  end\n  return false\nend\n\nwhile s = gets\n  break if s == nil\n  cards = s[0..-2].split(\",\").map{|card|\n    card.to_i\n  }.sort\n  if four_card?(cards) then\n    puts \"four card\"\n  elsif full_house?(cards) then\n    puts \"full house\"\n  elsif straight?(cards) then\n    puts \"straight\"\n  elsif three_card?(cards) then\n    puts \"three card\"\n  elsif two_pair?(cards) then\n    puts \"two pair\"\n  elsif one_pair?(cards) then\n    puts \"one pair\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while input = gets\n  cards = input.split(\",\").map(&:to_i)\n  seq = Array.new(13){0}\n  cards.each{|i|\n    seq[i-1] += 1\n  }\n  if seq.max == 4\n    puts \"four card\"\n  elsif seq.max == 3\n    if (seq - [0]).size == 2\n      puts \"full house\"\n    else\n      puts \"three card\"\n    end\n  elsif seq.max == 2\n    if (seq - [0]).size == 3\n      puts \"two pair\"\n    else\n      puts \"one pair\"\n    end\n  else\n    str_seq = (seq + [seq[0]]).join\n    if str_seq =~ /11111/\n      puts \"straight\"\n    else\n      puts \"null\"\n    end\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.each_line do |l|\n  cs = l.split(?,).map(&:to_i)\n  case\n  when cs.any? {|c| cs.count {|d| c == d } == 4 }\n    puts 'four card'\n  when cs.any? {|c| cs.count {|d| c == d } == 3 } && cs.any? {|c| cs.count {|d| c == d } == 2 }\n    puts 'full house'\n  when cs.sort == (cs.min..cs.max).to_a || cs.sort == [1, 10, 11, 12, 13]\n    puts 'straight'\n  when cs.any? {|c| cs.count {|d| c == d } == 3 }\n    puts 'three card'\n  when cs.uniq.size == 3\n    puts 'two pair'\n  when cs.uniq.size == 4\n    puts 'one pair'\n  else\n    puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def q*a;a.delete a[0];a.empty?end\n$<.map{|x|\n  a,b,c,d,e=x.chop.split(\",\").map(&:to_i).sort;\n  puts case\n  when q(a,b,c,d)||q(b,c,d,e);\"four card\"\n  when a==b&&q(c,d,e)||q(a,b,c)&&d==e;\"full house\"\n  when (s=[a,b,c,d,e])==(a..e).to_a||s==[10,11,12,13,1];\"straight\"\n  when q(a,b,c)||q(b,c,d)||q(c,d,e);\"three card\"\n  when a==b&&(c==d||d==e)||b==c&&d==e;\"two pair\"\n  when a==b||b==c||c==d||d==e;\"one pair\"\n  else \"null\"\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "def straight?(ncs)\n  if ncs[10] == 1 && ncs[11] == 1 && ncs[12] == 1 && ncs[13] == 1 &&\n      ncs[1] == 1\n    return true\n  end\n\n  max_con = 1\n  con = 0\n\n  for nc in ncs\n    if nc > 0\n      con += 1\n      if (max_con < con)\n        max_con = con\n      end\n    else\n      con = 0\n    end\n  end\n\n  max_con == 5\nend\n\n### main\n\nwhile (line =gets)\n  ncs = (0..13).map{ 0 }\n  line.chop.split(\",\").each{|s| ncs[s.to_i] += 1}\n\n  n4 = ncs.select{|n| n == 4}.length\n  n3 = ncs.select{|n| n == 3}.length\n  n2 = ncs.select{|n| n == 2}.length\n  n1 = ncs.select{|n| n == 1}.length\n\n  hand = \"null\"\n\n  if n4 == 1\n    hand = \"four card\"\n  elsif n3 == 1 && n2 == 1\n    hand = \"full house\"\n  elsif n1 == 5 && straight?(ncs)\n    hand = \"straight\"\n  elsif n3 == 1\n    hand = \"three card\"\n  elsif n2 == 2\n    hand = \"two pair\"\n  elsif n2 == 1\n    hand = \"one pair\"\n  end\n\n  puts hand\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets\n    cards = $_.split(',').map(&:to_i).sort\n    max = cards.uniq.map{|x| cards.count x}.max\n    min = cards.uniq.map{|x| cards.count x}.min\n\n    case max\n    when 4\n        puts 'four card'\n        next\n    when 3\n        if min == 2\n            puts 'full house'\n        else\n            puts 'three card'\n        end\n        next\n    when 1\n        if (0..3).map { |i| cards[i+1] - cards[i] == 1 }.uniq == [true]\n            puts 'straight'\n            next\n        end\n        if cards == [1, 10, 11, 12, 13]\n            puts 'straight'\n            next\n        end\n    when 2\n        case cards.uniq.size\n        when 4\n            puts 'one pair'\n        when 3\n            puts 'two pair'\n        end\n        next\n    end\n    puts 'null'\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.chop.split(?,).map(&:to_i).sort;b=a.map{|j|a.count(j)}.max;s=a.uniq.size;puts b>3?\"four card\":b>2?s>2?\"three card\":\"full house\":b>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "while gets\n  cards = $_.split(',').map(&:to_i)\n  count_list = Array.new(13, 0)\n  cards.each { |i| count_list[i-1] += 1 }\n  st = count_list.join\n  count_list.delete(0)\n  count_list = count_list.sort\n\n  if count_list == [1, 4]\n    puts 'four pair'\n  elsif count_list == [2, 3]\n    puts 'full house'\n  elsif count_list == [1, 1, 3]\n    puts 'three pair'\n  elsif count_list == [1, 2, 2]\n    puts 'two pair'\n  elsif count_list == [1, 1, 1, 2]\n    puts 'one pair'\n  elsif st =~ /(1{5}|10{8}1{4})/\n    puts 'straight'\n  else\n    puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def straight?(b)\n  (0..8).each { |i| return true if b.slice(i, 5) == [1, 1, 1, 1, 1] }\n  return b[0] == 1 && b.slice(9, 4) == [1, 1, 1, 1]\nend\n\nwhile s = gets\n  b = Array.new(13, 0)\n  s.split(',').map(&:to_i).each { |c| b[c - 1] += 1 } \n\n  d = b.clone.sort\n  d.delete_if { |c| c == 0 } \n\n  if d == [1, 1, 1, 1, 1] && straight?(b)\n    puts 'straight'\n  elsif d == [1, 4]\n    puts 'four card'\n  elsif d == [2, 3]\n    puts 'full house'\n  elsif d == [1, 1, 3]\n    puts 'three card'\n  elsif d == [1, 2, 2]\n    puts 'two pair'\n  elsif d == [1, 1, 1, 2]\n    puts 'one pair'\n  else\n    puts 'null'\n  end \nend"
  },
  {
    "language": "Ruby",
    "code": "loop do\n\tt = gets\n\tif t == nil\n\t\tbreak\n\tend\n\tc = t.split(\",\").map{|i| i.to_i}.sort()\n\t\n\tif (c[0] == c[1] or c[3] == c[4]) and c[1] == c[2] and c[2] == c[3]\n\t\tputs \"four card\"\n\telsif c[0] == c[1] and c[1]==c[2] and c[3] == c[4]\n\t\tputs \"full house\"\n\telsif c[0] == c[1] and c[2]==c[3] and c[3] == c[4]\n\t\tputs \"full house\"\n\telsif c[0]+1==c[1] and c[1]+1==c[2] and c[2]+1==c[3] and c[3]+1==c[4]\n\t\tputs \"straight\"\n\telsif c[0] == 1 and c[1] == 10 and c[2] == 11 and c[3] == 12 and c[4] == 13\n\t\tputs \"straight\"\n\telsif (c[0] == c[1] and c[1] == c[2]) or (c[1] == c[2] and c[2] == c[3]) or (c[2] == c[3] and c[3] == c[4])\n\t\tputs \"three card\"\n\telsif c.uniq.size == 3\n\t\tputs \"two pair\"\n\telsif c.uniq.size == 4\n\t\tputs \"one pair\"\n\telse\n\t\tputs \"null\"\n\tend\nend"
  },
  {
    "language": "Ruby",
    "code": "while s = gets do\n  hu = s.split(',').map(&:to_i)\n  cc = Array.new(13){0}\n  hu.each { |c| cc[c-1] += 1 }\n  st = cc.join\n  cc.delete(0)\n\n  scr='null'\n  case cc.sort\n    when [1,4]\n      scr='four card'\n    when [2,3]\n      scr='full house'\n    when [1,1,1,1,1]\n      scr='straight' if st =~ /1{5}/ or st =~ /10{8}1{4}/\n    when [1,1,3]\n      scr='three card'\n    when [1,2,2]\n      scr='two pair'\n    when [1,1,1,2]\n      scr='one pair'\n  end\n  puts scr\nend"
  },
  {
    "language": "Ruby",
    "code": "def four_card?(cards)\n  cards[0] == cards[3] || cards[1] == cards[4]\nend\n\ndef full_house?(cards)\n  (cards[0] == cards[1] && cards[2] == cards[4]) ||\n  (cards[0] == cards[2] && cards[3] == cards[4])\nend\n\ndef straight?(cards)\n  cards[0] != cards[1] && cards[1] != cards[2] && cards[2] != cards[3] &&\n  cards[3] != cards[4] &&\n  (cards[4] - cards[0] == 4 || cards[0] == 1 && cards[1] == 10)\nend\n\ndef three_card?(cards)\n  cards[0] == cards[2] || cards[1] == cards[3] || cards[2] == cards[4]\nend\n\ndef two_pair?(cards)\n  (cards[0] == cards[1] && (cards[2] == cards[3] || cards[3] == cards[4])) ||\n  (cards[1] == cards[2] && cards[3] == cards[4])\nend\n\ndef one_pair?(cards)\n  (cards[0] == cards[1]) || (cards[1] == cards[2]) ||\n  (cards[2] == cards[3]) || (cards[3] == cards[4])\nend\n\ndef hand(cards)\n  return 'four card'  if four_card?(cards)\n  return 'full house' if full_house?(cards)\n  return 'straight'   if straight?(cards)\n  return 'three card' if three_card?(cards)\n  return 'two pair'   if two_pair?(cards)\n  return 'one pair'   if one_pair?(cards)\n  return 'null'\nend\n\ngets(nil).split.each do |line|\n  cards = line.split(',').map(&:to_i).sort\n  puts hand(cards)\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.split(?,).map(&:to_i).sort;c,b=a.uniq.map{|j|a.count(j)}.sort[-2..-1];puts b>3?\"four card\":b>2?c<2?\"three card\":\"full house\":b>1?c<2?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "while query = gets\n  hand = query.chomp.split(\",\").map(&:to_i)\n  cnt_max = hand.max_by{|x| hand.count(x)}\n  same = hand.count(cnt_max)\n\n  case same\n  when 4\n    puts \"four card\"\n\n  when 3\n    cnt_min = hand.min_by{|x| hand.count(x)}\n    p cnt_min\n    if hand.count(cnt_min) == 2\n      puts \"full house\"\n    else puts \"three card\"\n    end\n\n  when 2\n    if hand.uniq.length == 3\n      puts \"two pair\"\n    else puts \"one pair\"\n    end\n\n  else\n    hand.sort!\n    str_flag = true\n    4.times do |i|\n      unless hand[i+1] - hand[i] == 1\n        str_flag = false\n        break\n      end\n    end\n\n    if str_flag\n      puts \"straight\"\n    elsif hand == [1, 10, 11, 12, 13]\n      puts \"straight\"\n    else puts \"null\"\n    end\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "yaku = [\"one pair\", \"full house\", \"three card\", \"two pair\", \"four card\"]\nwhile card = gets.split(\",\").map(&:to_i).sort\n  #card = card.split(\",\").map(&:to_i).sort\n  a = 1\n  b = 0\n  temp = 0\n  card.each{|i|\n    if i == temp\n      a += 1\n    elsif a != 1\n      b = (b + b * a) + (4 - b) / 4 * a\n      a = 1\n    end\n    temp = i\n  }\n  temp = card[0]\n  if a + b == 1\n    bool = true\n    card[1..-1].each{|i|\n      bool &= (temp + 1 == i)\n      temp = i\n    }\n    if bool or card == [1,10,11,12,13]\n      puts \"straight\"\n    else\n      puts \"null\"\n    end\n  else\n    puts yaku[(a + b + a * b) % 5]\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets do\n  arr = $_.split(',').map(&:to_i)\n  cards = [0]*13\n  arr.each do |i|\n    cards[i - 1] += 1\n  end\n\n  sc = cards.select{ |i| i >= 1 }.sort\n  str = cards.join('')\n\n  case sc\n    when [1, 4]\n      puts 'four card'\n    when [2, 3]\n      puts 'full house'\n    when [1, 1, 3]\n      puts 'three card'\n    when [1, 2, 2]\n      puts 'two pair'\n    when [1, 1, 1, 2]\n      puts 'one pair'\n    when [1, 1, 1, 1, 1]\n      if str =~ /1{5}|10{8}1{4}/\n        puts 'straight'\n      else\n        puts 'null'\n      end\n    else\n      puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.chop.split(?,).map(&:to_i).sort;b=a.uniq.map{|j|a.count(j)}.sort.reverse;s=b.size;puts b[0]>3?\"four card\":b[0]>2?s>2?\"three card\":\"full house\":b[0]>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|a=i.split(?,).map(&:to_i).sort;b,c=a.uniq.map{|j|-a.count(j)}.sort;puts b<-3?\"four card\":b<-2?c<-2?\"three card\":\"full house\":b<-1?c>-2?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "#!/usr/bin/env ruby\n\ndef straight?(s)\n  return true if s.length == 5 && (s.max - s.min) == 4\n  return true if [1,10,11,12,13] == s.sort\n  false\nend\n\nwhile line = gets\n  nums = Hash.new(0)\n  hands = line.chomp!.split(?,).map(&:to_i)\n\n  # ?¨?????????¨????????°?????°??????\n  hands.each{ |h| nums[h] += 1 }\n\n  one,two,three,four = 0,0,0,0\n  nums.each do |k, v|\n    one += 1 if v == 1\n    two += 1 if v == 2\n    three += 1 if v == 3\n    four += 1 if v == 4\n  end\n\n  if four > 0\n    puts \"four card\"\n  elsif three == 1 && two == 1\n    puts \"full house\"\n  elsif straight?(nums.keys)\n    puts \"straight\"\n  elsif three == 1\n    puts \"three card\"\n  elsif two == 2\n    puts \"two pair\"\n  elsif two == 1\n    puts \"one pair\"\n  else\n    puts \"null\"\n  end\n\nend"
  },
  {
    "language": "Ruby",
    "code": "while str=gets\n    a=Array.new(13,0)\n    str.split(\",\").each do |b|\n        a[b.to_i-1]+=1\n        end\n    str=a.join\n    a.delete(0)\n    a.sort!\n    case a\n        when [1,1,1,2]\n            puts \"one pair\"\n        when [1,2,2]\n            puts \"two pair\"\n        when [1,1,3]\n            puts \"three card\"\n        when [1,1,1,1,1]\n            puts \"straight\" if (str=~/1{5}/)||(str=~/10{8}1{4}/)\n        when [2,3]\n            puts \"full house\"\n        when [1,4]\n            puts \"four card\"\n        else\n            puts \"null\"\n    end\nend"
  },
  {
    "language": "Ruby",
    "code": "while gets do\n  a = Array.new(13,0)\n  $_.split(\",\").map(&:to_i).each do |i|\n    a[i-1]+=1\n  end\n  if a.member?(4) then\n    puts \"for card\"\n  elsif a.member?(2) then\n    if a.member?(3) then\n      puts \"full house\"\n    elsif a.index(2) == a.rindex(2) then\n      puts \"one pair\"\n    else\n      puts \"two pair\"\n    end\n  elsif a.member?(3) then\n    puts \"three card\"\n  elsif a.join =~ /1{5}/ || a.join =~ /10{8}1{4}/ then\n    puts \"straight\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def q*a;a.delete a[0];a.empty?end;$<.map{|x|a,b,c,d,e=s=x.chop.split(\",\").map(&:to_i).sort;f,g,n=q(c,d,e),q(a,b,c),s.uniq.size;puts %w{four\\ card full\\ house straight three\\ card two\\ pair one\\ pair null}[case;when q(a,b,c,d)||q(b,c,d,e);0;when a==b&&f||g&&d==e;1;when s==(a..e).to_a||s==[1,10,11,12,13];2;when g||q(b,c,d)||f;3;when n==3;4;when n==4;5;else 6;end]}"
  },
  {
    "language": "Ruby",
    "code": "#!ruby -aplF,\ng=$F.group_by &:to_i\ns=g.size\nm=g.map{|k,v|v.size}.max\nk=g.keys.sort\n$_=m>3?\"four card\":m>2?s>2?\"three card\":\"full house\":m>1?s>3?\"one pair\":\"two pair\":k[4]-k[0]<5||k[1]>9?:straight: :null"
  },
  {
    "language": "Ruby",
    "code": "while str=gets\n    a=Array.new(13,0)\n    str.split(\",\").each do |b|\n        a[b.to_i-1]+=1\n        end\n    str=a.join\n    a.delete(0)\n    a.sort!\n\n    case a\n        when [1,1,1,2]\n            puts \"one pair\"\n        when [1,2,2]\n            puts \"two pair\"\n        when [1,1,3]\n            puts \"three card\"\n        when [1,1,1,1,1]\n            if (str=~/1{5}/)||(str=~/10{8}1{4}/)\n                puts \"straight\"\n            else\n                puts\"null\"\n            end\n        when [2,3]\n            puts \"full house\"\n        when [1,4]\n            puts \"four card\"\n    end\nend"
  },
  {
    "language": "Ruby",
    "code": "straights = [[1,2,3,4,5], [2,3,4,4,6], [3,4,5,6,7], [4,5,6,7,8], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [1,10,11,12,13]]\nwhile line = gets\n    cards = line.chomp.split(',').map(&:to_i).sort\n    uniq = cards.uniq\n    maxcount = 0\n    uniq.each{|x| maxcount = cards.count(x) if maxcount < cards.count(x)}\n\n    result = \"null\"\n    if uniq.length == 2\n        if maxcount == 4\n            result = \"four card\"\n        else\n            result = \"full house\"\n        end\n    elsif \n        if straights.any?{|arr| arr == cards}\n            result = \"straight\"\n        end\n    elsif uniq.length == 3\n        if maxcount == 3\n            result = \"three card\"\n        else\n            result = \"two pair\"\n        end\n    elsif uniq.length == 4\n        result = \"one pair\"\n    end\n    puts result\nend\n"
  },
  {
    "language": "Ruby",
    "code": "yaku = [\"one pair\", \"full house\", \"three card\", \"two pair\", \"four card\"]\nwhile card = gets\n  card = card.split(\",\").map(&:to_i).sort\n  a = 1\n  b = 1\n  temp = 0\n  card.each{|i|\n    if i == temp\n      a += 1\n    elsif a != 1\n      b = (b + b * a) + (5 - b) / 4 * (a - b - b * a)\n      a = 1\n    end\n    temp = i\n  }\n  temp = card[0]\n  if a + b == 2\n    bool = true\n    card[1..-1].each{|i|\n      bool &= (temp + 1 == i)\n      temp = i\n    }\n    if bool or card == [1,10,11,12,13]\n      puts \"straight\"\n    else\n      puts \"null\"\n    end\n  else\n    puts yaku[(a + b + a * b) % 5]\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while s = gets do\n  cards = s.split(',').map(&:to_i)\n  card_count = Array.new(13){0}\n  cards.each { |c| card_count[c-1] += 1 }\n  str = card_count.join\n  card_count.delete(0)\n\n  scr = 'null'\n  case card_count.sort\n    when [1,4]\n      scr = 'four card'\n    when [2,3]\n      scr = 'full house'\n    when [1,1,1,1,1]\n      scr = 'straight' if str =~ /1{5}/ or str =~ /10{8}1{4}/\n    when [1,1,3]\n      scr = 'three card'\n    when [1,2,2]\n      scr = 'two pair'\n    when [1,1,1,2]\n      scr = 'one pair'\n  end\n  puts scr\nend"
  },
  {
    "language": "Ruby",
    "code": "while line = STDIN.gets\n  cards = line.chomp.split(',').map { |item| item.to_i }\n  cards.sort!\n  if (cards[0] == cards[1] and cards[0] == cards[2] and cards[0] == cards[3]) or (cards[1] == cards[2] and cards[1] == cards[3] and cards[1] == cards[4]) then\n    puts \"four card\"\n  elsif (cards[0] == cards[1] and cards[0] == cards[2] and cards[3] == cards[4]) or (cards[0] == cards[1] and cards[2] == cards[3] and cards[2] == cards[4]) then   \n    puts \"full house\"\n  elsif (cards[0]+1 == cards[1] and cards[0]+2 == cards[2] and cards[0]+3 == cards[3] and cards[0]+4 == cards[4]) or (cards[0] == 1 and cards[1] == 10 and cards[2] == 11 and cards[3] == 12 and cards[4] == 13) then\n    puts \"straight\"\n  elsif (cards[0] == cards[1] and cards[0] == cards[2]) or (cards[1] == cards[2] and cards[1] == cards[3]) or (cards[2] == cards[3] and cards[2] == cards[4]) then\n    puts \"three card\"\n  elsif (cards[0] == cards[1] and cards[2] == cards[3]) or (cards[1] == cards[2] and cards[3] == cards[4]) or (cards[0] == cards[1] and cards[3] == cards[4]) then\n    puts \"two pair\"\n  elsif cards[0] == cards[1] or cards[1] == cards[2] or cards[2] == cards[3] or cards[3] == cards[4] then\n    puts \"one pair\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def four_card?(a)\n  mode_value = a.max_by { |x| a.count(x) }\n  a.count(mode_value) == 4\nend\n\ndef full_house?(a)\n  !four_card?(a) && a.uniq.size == 2\nend\n\ndef straight?(a)\n  a = a.uniq.sort\n  return false if a.size < 5\n  a.last - a.first == 4 || a[0] == 1 && a[1] == 10 && a[2] == 11 && a[3] == 12 && a[4] == 13\nend\n\ndef three_card?(a)\n  mode_value = a.max_by { |x| a.count(x) }\n  a.count(mode_value) == 3\nend\n\ndef two_pair?(a)\n  !three_card?(a) && a.uniq.size == 3\nend\n\ndef one_pair?(a)\n  a.uniq.size == 4\nend\n\nwhile line = gets\n  cards = line.chomp.split(',').map(&:to_i)\n  if four_card?(cards)\n    puts 'four card'\n  elsif full_house?(cards)\n    puts 'full house'\n  elsif straight?(cards)\n    puts 'straight'\n  elsif three_card?(cards)\n    puts 'three card'\n  elsif two_pair?(cards)\n    puts 'two pair'\n  elsif one_pair?(cards)\n    puts 'one pair'\n  else\n    puts 'null'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "yaku = [\"one pair\", \"full house\", \"three card\", \"two pair\", \"four card\"]\nwhile card = gets\n  card = card.split(\",\").map(&:to_i).sort\n  a = 1\n  b = 0\n  temp = 0\n  card.each{|i|\n    if i == temp\n      a += 1\n    elsif a != 1\n      b = (b + b * a) + (4 - b) / 4 * a\n      a = 1\n    end\n    temp = i\n  }\n  temp = card[0]\n  if a + b == 1\n    bool = true\n    card[1..-1].each{|i|\n      bool &= (temp + 1 == i)\n      temp = i\n    }\n    if bool or card == [1,10,11,12,13]\n      puts \"straight\"\n    else\n      puts \"null\"\n    end\n  else\n    puts yaku[(a + b + a * b) % 5]\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "$<.map{|i|s=(a=i.split(?,).map(&:to_i).sort).uniq.size;puts (b=a.map{|j|a.count(j)}.max)>3?\"four card\":b>2?s>2?\"three card\":\"full house\":b>1?s>3?\"one pair\":\"two pair\":a[4]-a[0]<5||a[1]>9?:straight: :null}"
  },
  {
    "language": "Ruby",
    "code": "def incremental? (card)\n\t(card.size-2).times {|i| return false if card[i]+1 != card[i+1]}\n\treturn true\nend\n\ndef is_straight(card)\n\treturn true if incremental?(card) || card == [1,10,11,12,13]\n\treturn false\nend\n\nwhile gets\n\tcard = $_.split(',').map(&:to_i).sort\n\tnext if card[0] == 0\n\tcount = []\n\t5.times {|i| count[i] = card.count(card[i])}\n\thand = \"null\"\n\thand = \"one pair\" if count.index(2)\n\thand = \"two pair\" if count.count(2) == 4\n\thand = \"three card\" if count.index(3)\n\thand = \"straight\" if is_straight(card)\n\thand = \"full house\" if count.index(2) && count.index(3)\n\thand = \"four card\" if count.index(4)\n\tputs hand, card\nend"
  },
  {
    "language": "Ruby",
    "code": "while s = gets do\n  hu = s.split(',').map(&:to_i)\n  cc = Array.new(13){0}\n  hu.each { |c| cc[c-1] += 1 }\n  st = cc.join\n  cc.delete(0)\n\n  scr='null'\n  case cc.sort\n    when [1,4]\n      scr='four card'\n    when [2,3]\n      scr='full house'\n    when [1,1,1,1,1]\n      scr='straight' if st =~ /1{5}/ or st =~ /10{8}1{4}/\n    when [1,1,3]\n      scr='three card'\n    when [1,2,2]\n      scr='two pair'\n    when [1,1,1,2]\n      scr='one pair'\n  end\n  puts scr\nend"
  },
  {
    "language": "Ruby",
    "code": "class Hand\n  def initialize(cards)\n    @cards = cards.sort\n  end\n\n  def what_hand\n    case\n    when is_four_card?\n      'four card'\n    when is_full_house?\n      'full house'\n    when is_straight?\n      'straight'\n    when is_three_card?\n      'three card'\n    when is_two_pair?\n      'two pair'\n    when is_one_pair?\n      'one pair'\n    else\n      'null'\n    end\n  end\n\n  private\n\n  def is_one_pair?\n    is_n_card?(2)\n  end\n\n  def is_two_pair?\n    ( is_n_card?(2, @cards[0,2]) and is_n_card?(2, @cards[2,2]) ) or\n    ( is_n_card?(2, @cards[0,2]) and is_n_card?(2, @cards[3,2]) ) or\n    ( is_n_card?(2, @cards[1,2]) and is_n_card?(2, @cards[3,2]) )\n  end\n\n  def is_three_card?\n    is_n_card?(3)\n  end\n\n  def is_straight?\n    return true if @cards.inject do |x,y|\n                     break if x + 1 != y\n                     y\n                   end\n    return true if @cards[1] == 10 and @cards[2] == 11 and @cards[3] == 12 and\n                   @cards[4] == 13 and @cards[0] == 1\n    false\n  end\n\n  def is_full_house?\n    ( is_n_card?(3, @cards[0..2]) and is_n_card?(2, @cards[3..4]) ) or\n    ( is_n_card?(2, @cards[0..1]) and is_n_card?(3, @cards[2..4]) )\n  end\n\n  def is_four_card?\n    is_n_card?(4)\n  end\n\n  def is_n_card?(n, cards = @cards)\n    cards.each_cons(n){|a|return true if a.all?{|x|x == a[0]}}\n    false\n  end\nend\n\nwhile gets do\n  hand = Hand.new($_.split(?,).map(&:to_i))\n  puts hand.what_hand\nend"
  },
  {
    "language": "Ruby",
    "code": "readlines.each do |l|\n  a,b,c,d,e = l.split(\",\").map(&:to_i).sort\n  kinds = [a,b,c,d,e].uniq.size\n  if a==d || b==e\n    puts \"four card\"\n  elsif kinds==2\n    puts \"full house\"\n  elsif kinds==5 && (e-a==4 || a==1 && e==13 && e-b==3)\n    puts \"straight\"\n  elsif a==c || b==d || c==e\n    puts \"three card\"\n  elsif kinds==3\n    puts \"two pair\"\n  elsif kinds==4\n    puts \"one pair\"\n  else\n    puts \"null\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "while s = gets\n  b = Array.new(13, 0)\n  s.split(',').map(&:to_i).each { |c| b[c - 1] += 1 } \n  s = b.join\n\n  d = b.clone.sort\n  d.delete_if { |c| c == 0 }\n  h = 'null'\n\n  if s =~ /1{5}/ || s =~ /10{8}1{4}/\n    h = 'straight'\n  elsif d == [1, 4] then \n    h = 'four card'\n  elsif d == [2, 3]\n    h = 'full house'\n  elsif d == [1, 1, 3]\n    h = 'three card'\n  elsif d == [1, 2, 2]\n    h = 'two pair'\n  elsif d == [1, 1, 1, 2]\n    h = 'one pair'\n  end \n\n  puts h\nend"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n\t\"strconv\"\n\t\"sort\"\n\t\"fmt\"\n)\n\nvar scanner = bufio.NewScanner(os.Stdin)\n\nfunc main() {\n\tfor scanner.Scan() {\n\t\tinput := strings.Split(scanner.Text(), \",\")\n\t\tcards := make([]int, 5)\n\t\tfor i :=range input {\n\t\t\tcards[i], _ = strconv.Atoi(input[i])\n\t\t}\n\t\tsort.Sort(sort.IntSlice(cards))\n\t\tif cards[0] == cards[1] && cards[2] == cards[3] && cards[2] == cards[1] {\n\t\t\tfmt.Println(\"four card\")\n\t\t} else if cards[1] == cards[2] && cards[3] == cards[4] && cards[3] == cards[2]{\n\t\t\tfmt.Println(\"four card\")\n\t\t} else if cards[0] == cards[1] && cards[1] == cards[2] && cards[3] == cards[4] {\n\t\t\tfmt.Println(\"full house\")\n\t\t} else if cards[0] == cards[1] && cards[2] == cards[3] && cards[3] == cards[4] {\n\t\t\tfmt.Println(\"full house\")\n\t\t} else if cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13 {\n\t\t\tfmt.Println(\"straight\")\n\t\t} else if cards[0]+1 == cards[1] && cards[1]+1 == cards[2] && cards[2]+1 == cards[3] && cards[3]+1 == cards[4] {\n\t\t\tfmt.Println(\"straight\")\n\t\t} else if (cards[0] == cards[1] && cards[1] == cards[2]) || (cards[1] == cards[2] && cards[2] == cards[3]) || (cards[2] == cards[3] && cards[3] == cards[4]) {\n\t\t\tfmt.Println(\"three card\")\n\t\t} else if ((cards[0] == cards[1]) && ((cards[2] == cards[3]) || (cards[3] == cards[4]))) || ((cards[1] == cards[2]) && (cards[3] == cards[4])) {\n\t\t\tfmt.Println(\"two pair\")\n\t\t} else if cards[0] == cards[1] || cards[1] == cards[2] || cards[2] == cards[3] || cards[3] == cards[4] {\n\t\t\tfmt.Println(\"one pair\")\n\t\t} else {\n\t\t\tfmt.Println(\"null\")\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "PHP",
    "code": "\n<?php\nwhile (!feof(STDIN)) {\n  $stdin = trim(fgets(STDIN));\n  $values  = explode(',', $stdin);\n  if (count($values) != 5) {\n  } else {\n    $temp = array();\n    foreach ($values as $value) {\n      if (!isset($temp[$value])) {\n        $temp[$value] = 1;\n      } else {\n        $temp[$value]++;\n      }\n    }\n    ksort($temp);\n//var_dump($temp);\n    $ret = 'null';\n    foreach ($temp as $t) {\n      if ($t == 4) {\n        $ret = 'four card';\n      } elseif ($t == 3) {\n        if ($ret == 'one pair') {\n          $ret = 'full house';\n        } else {\n          $ret = 'three card';\n        }\n      } elseif ($t == 2) {\n        if ($ret == 'one pair') {\n          $ret = 'two pair';\n        } elseif ($ret == 'three card') {\n          $ret = 'full house';\n        } else {\n          $ret = 'one pair';\n        }\n      }\n    }\n    $temp = array_keys($temp);\n    if (count($temp) == 5 && $temp[4] - $temp[0] == 4) {\n      $ret = 'straight';\n    }\n    // 1???13????????´\n    $temp2 = array();\n    foreach ($temp as $t) {\n      if ($t == 1) {\n        $temp2[] = 14;\n      } else {\n        $temp2[] = $t;\n      }\n    }\n    sort($temp2);\n    if (count($temp2) == 5 && $temp2[4] - $temp2[0] == 4) {\n      $ret = 'straight';\n    }\n    echo $ret . \"\\n\";\n  }\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\nwhile (!feof(STDIN)) {\n  $stdin = trim(fgets(STDIN));\n  $values  = explode(',', $stdin);\n  if (count($values) != 5) {\n  } else {\n    $temp = array();\n    foreach ($values as $value) {\n      if (!isset($temp[$value])) {\n        $temp[$value] = 1;\n      } else {\n        $temp[$value]++;\n      }\n    }\n    ksort($temp);\n    $ret = 'null';\n    foreach ($temp as $t) {\n      if ($t == 4) {\n        $ret = 'four card';\n      } elseif ($t == 3) {\n        if ($ret == 'one pair') {\n          $ret = 'full house';\n        } else {\n          $ret = 'three card';\n        }\n      } elseif ($t == 2) {\n        if ($ret == 'one pair') {\n          $ret = 'two pair';\n        } elseif ($ret == 'three card') {\n          $ret = 'full house';\n        } else {\n          $ret = 'one pair';\n        }\n      }\n    }\n    $temp = array_keys($temp);\n    if (count($temp) == 5 && $temp[4] - $temp[0] == 4) {\n      $ret = 'straight';\n    }\n    // 1???13????????´\n    $temp2 = array();\n    foreach ($temp as $t) {\n      if ($t == 1) {\n        $temp2[] = 14;\n      } else {\n        $temp2[] = $t;\n      }\n    }\n    sort($temp2);\n    if (count($temp2) == 5 && $temp2[4] - $temp2[0] == 4) {\n      $ret = 'straight';\n    }\n    echo $ret . \"\\n\";\n  }\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\nwhile (!feof(STDIN)) {\n  $stdin = trim(fgets(STDIN));\n  $values  = explode(',', $stdin);\n  if (count($values) != 5) {\n  } else {\n    $temp = array();\n    foreach ($values as $value) {\n      if (!isset($temp[$value])) {\n        $temp[$value] = 1;\n      } else {\n        $temp[$value]++;\n      }\n    }\n    ksort($temp);\n    $ret = 'null';\n    foreach ($temp as $t) {\n      if ($t == 4) {\n        $ret = 'four card';\n      } elseif ($t == 3) {\n        if ($ret == 'one pair') {\n          $ret = 'full house';\n        } else {\n          $ret = 'three card';\n        }\n      } elseif ($t == 2) {\n        if ($ret == 'one pair') {\n          $ret = 'two pair';\n        } elseif ($ret == 'three card') {\n          $ret = 'full house';\n        } else {\n          $ret = 'one pair';\n        }\n      }\n    }\n    $temp = array_keys($temp);\n    if (count($temp) == 5 && $temp[4] - $temp[0] == 4) {\n      $ret = 'straight';\n    }\n    // 1???13????????´\n    $temp2 = array();\n    foreach ($temp as $t) {\n      if ($t == 1) {\n        $temp2[] = 14;\n      } else {\n        $temp2[] = $t;\n      }\n    }\n    sort($temp2);\n    if (count($temp2) == 5 && $temp2[4] - $temp2[0] == 4) {\n      $ret = 'straight';\n    }\n    echo $ret . \"\\n\";\n  }\n}\n\n"
  },
  {
    "language": "PHP",
    "code": "<?php\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $card = array_fill(1, 13, 0);\n    foreach (explode(',', $line) as $c) {\n        $card[(int)$c]++;\n    }\n\n    //配られたカードだけにする\n    $card = array_filter($card, function ($n) {\n        return $n;\n    });\n    $pair = max($card);\n    //カードの種類\n    $cnt = count($card);\n\n    //4カード\n    if ($pair === 4) {\n        echo \"four card\\n\";\n\n    //フルハウス\n    } elseif ($pair === 3 && $cnt === 2) {\n        echo \"full house\\n\";\n\n    //ペアがない\n    } elseif ($cnt === 5) {\n        //1番小さいカード\n        $min = min(array_keys($card));\n        $check = 0;\n        for ($i = $min + 1; $i < $min + 5; $i++) {\n            isset($card[$i]) && $check++;\n        }\n\n        //Aがある場合はもう一度チェック\n        if ($check !== 4 && $min === 1) {\n            $check = 0;\n            for ($i = 10; $i <= 13; $i++) {\n                isset($card[$i]) && $check++;\n            }\n        }\n\n        //5枚連続している場合はストレート、連続していない場合は役なし\n        echo $check === 4 ? \"staraight\\n\" : \"null\\n\";\n\n    //3カード\n    } elseif ($pair === 3) {\n        echo \"three card\\n\";\n\n    //ペアがある\n    } elseif ($pair === 2) {\n        //カードの種類が3種類の場合は2ペア、4種類の場合は1ペア\n        echo $cnt === 3 ? \"two pair\\n\" : \"one pair\\n\";\n\n    //念のため\n    } else {\n        echo \"null\\n\";\n    }\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\nwhile ($line = trim(fgets(STDIN))) {\n\t$hand = explode(',', $line);\n\tsort($hand);\n\t$group = array();\n\tforeach ($hand as $n) {\n\t\t$group[$n] = isset($group[$n]) ? $group[$n] + 1 : 1;\n\t}\n\tsort($group);\n\t$max = max($group);\n\tif (isFourCard($max)) {\n\t\techo \"four card\\n\";\n\t\tcontinue;\n\t}\n\tif (isFullHouse($group)) {\n\t\techo \"full house\\n\";\n\t\tcontinue;\n\t}\n\tif (isStraight($hand)) {\n\t\techo \"straight\\n\";\n\t\tcontinue;\n\t}\n\tif (isThreeCard($max)) {\n\t\techo \"three card\\n\";\n\t\tcontinue;\n\t}\n\tif (isTwoPair($group)) {\n\t\techo \"two pair\\n\";\n\t\tcontinue;\n\t}\n\tif (isOnePair($group)) {\n\t\techo \"one pair\\n\";\n\t\tcontinue;\n\t}\n\techo \"null\\n\";\n}\n\nfunction isFourCard($max) {\n\treturn $max == 4;\n}\n\nfunction isThreeCard($max) {\n\treturn $max == 3;\n}\n\nfunction isFullHouse($group) {\n\t$c = count($group);\n\treturn ($group[$c - 1] == 3) && ($group[$c - 2] == 2);\n}\n\nfunction isTwoPair($group) {\n\t$c = count($group);\n\treturn ($group[$c - 1] == 2) && ($group[$c - 2] == 2);\n}\n\nfunction isOnePair($group) {\n\t$c = count($group);\n\treturn ($group[$c - 1] == 2) && ($group[$c - 2] < 2);\n}\n\nfunction isStraight($hand) {\n\t$min = $hand[0];\n\tif ($min == 1 && !in_array(2, $hand)) {\n\t\tfor ($i = 10; $i <= 13; $i++) {\n\t\t\tif (!in_array($i, $hand)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tfor ($i = $min + 1; $i < $min + 5; $i++) {\n\t\tif (!in_array($i, $hand)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\nwhile (TRUE) {\n    $c = fscanf(STDIN, '%d,%d,%d,%d,%d');\n    if (feof(STDIN)) {\n        break;\n    }\n    sort($c);\n    $hash = array();\n    $max = 0;\n    foreach ($c as $v) {\n        if (!isset($hash[$v])) {\n            $hash[$v] = 0;\n        }\n        $hash[$v]++;\n        $max = $hash[$v] > $max ? $hash[$v] : $max;\n    }\n    arsort($hash);\n    $combo = 'null';\n    if ($max >= 2) {\n        $combo = 'one pair';\n    }\n    if ($max >= 2 && count($hash) <= 3) {\n        $combo = 'two pair';\n    }\n    if ($max >= 3) {\n        $combo = 'three card';\n    }\n    if (count($hash) === 5 && isStraight($c)) {\n        $combo = 'straight';\n    }\n    if ($max >= 3 && count($hash) <= 2) {\n        $combo = 'full house';\n    }\n    if ($max >= 4) {\n        $combo = 'four card';\n    }\n    echo $combo . PHP_EOL;\n}\n\nfunction isStraight($cards) {\n    if (max($cards) - min($cards) === 4) {\n        return true;\n    }\n    if ($cards[0] === 1 && $cards[1] === 10 && $cards[4] === 13) {\n        return true;\n    }\n    return false;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $card = array_fill(1, 13, 0);\n    foreach (explode(',', $line) as $c) {\n        $card[(int)$c]++;\n    }\n\n    //配られたカードだけにする\n    $card = array_filter($card, function ($n) {\n        return $n;\n    });\n    $pair = max($card);\n    //カードの種類\n    $cnt = count($card);\n\n    //4カード\n    if ($pair === 4) {\n        echo \"four card\\n\";\n\n    //フルハウス\n    } elseif ($pair === 3 && $cnt === 2) {\n        echo \"full house\\n\";\n\n    //ペアがない\n    } elseif ($cnt === 5) {\n        //1番小さいカード\n        $min = min(array_keys($card));\n        $check = 0;\n        for ($i = $min + 1; $i < $min + 5; $i++) {\n            isset($card[$i]) && $check++;\n        }\n\n        //Aがある場合はもう一度チェック\n        if ($check !== 4 && $min === 1) {\n            $check = 0;\n            for ($i = 10; $i <= 13; $i++) {\n                isset($card[$i]) && $check++;\n            }\n        }\n\n        //5枚連続している場合はストレート、連続していない場合は役なし\n        echo $check === 4 ? \"straight\\n\" : \"null\\n\";\n\n    //3カード\n    } elseif ($pair === 3) {\n        echo \"three card\\n\";\n\n    //ペアがある\n    } elseif ($pair === 2) {\n        //カードの種類が3種類の場合は2ペア、4種類の場合は1ペア\n        echo $cnt === 3 ? \"two pair\\n\" : \"one pair\\n\";\n\n    //念のため\n    } else {\n        echo \"null\\n\";\n    }\n}"
  },
  {
    "language": "OCaml",
    "code": "\nlet rec split_while f = function\n  | [] -> ([],[])\n  | hd :: tl -> if f hd then \n                  let (rl, wl) = split_while f tl in (hd :: rl, wl)\n                else ([], hd :: tl)\n\nlet rec group = function\n  | [] -> []\n  | hd ::tl -> let (rl, wl) = split_while (fun x -> x = hd) tl in (hd :: rl) :: group wl\n\nlet poker lst =\n  let is_straight xs =\n    let rec iter = function\n      | x :: y :: rest when (x + 1) = y -> iter (y :: rest)\n      | x :: y :: rest -> false\n      | _ -> true in\n    if xs = [1;10;11;12;13] then true\n    else iter xs in\n  if is_straight lst then \"straight\"\n  else match List.map List.length (group lst) with\n       | [4;1] | [1;4] -> \"four card\"\n       | [3;2] | [2;3] -> \"full house\"\n       | [3;1;1] | [1;3;1] | [1;1;3] -> \"three card\"\n       | [2;2;1] | [2;1;2] | [1;2;2] -> \"two pair\"\n       | [2;1;1;1] | [1;2;1;1] | [1;1;2;1] | [1;1;1;2] -> \"one pair\"\n       | _ -> \"null\"\n\nlet _ =\n  try\n    while true do\n      let lst = Scanf.scanf \"%d,%d,%d,%d,%d\\n\" (fun v1 v2 v3 v4 v5 -> List.sort compare [v1;v2;v3;v4;v5]) in\n      print_endline (poker lst)\n    done\n  with\n    End_of_file -> ()\n        "
  },
  {
    "language": "OCaml",
    "code": "let hand a =\n    let t = (a.(0),a.(1),a.(2),a.(3),a.(4)) in\n    match t with\n    (i,j,k,l,m) when (j,k,l) = (i,i,i) || (k,l,m) = (j,j,j) -> print_endline \"four card\"\n    | (i,j,k,l,m) when (j,l,m) = (i,k,k) || (j,k,m) = (i,i,l) -> print_endline \"full house\"\n    | (i,j,k,l,m) when (j,k) = (i,i) || (k,l) = (j,j) || (l,m) = (k,k) -> print_endline \"three card\"\n    | (i,j,k,l,m) when (j,l) = (i,k) || (j,m) = (i,l) || (k,m) = (j,l) -> print_endline \"two pair\"\n    | (i,j,k,l,m) when j = i || k = j || l = k || m = l -> print_endline \"one pair\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,(i+1),(i+2),(i+3),(i+4))\n                     || (i,j,k,l,m) = (1,10,11,12,13) -> print_endline \"straight\"\n    | _ -> print_endline \"null\"\n;;\n\nlet () =\n    let rec read () =\n        try let line = Scanf.scanf \" %d,%d,%d,%d,%d\\n\" (fun v w x y z -> [|v;w;x;y;z|]) in\n        Array.sort compare line;\n        hand line;\n        read ()\n        with End_of_file -> ()\n    in read ()\n;;"
  },
  {
    "language": "OCaml",
    "code": "let hand a =\n    let t = (a.(0),a.(1),a.(2),a.(3),a.(4)) in\n    match t with\n    (i,j,k,l,m) when (j,k,l) = (i,i,i) || (k,l,m) = (j,j,j) -> \"four card\"\n    | (i,j,k,l,m) when (j,l,m) = (i,k,k) || (j,k,m) = (i,i,l) -> \"full house\"\n    | (i,j,k,l,m) when (j,k) = (i,i) || (k,l) = (j,j) || (l,m) = (k,k) -> \"three card\"\n    | (i,j,k,l,m) when (j,l) = (i,k) || (j,m) = (i,l) || (k,m) = (j,l) -> \"two pair\"\n    | (i,j,k,l,m) when j = i || k = j || l = k || m = l -> \"one pair\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,(i+1),(i+2),(i+3),(i+4))\n                     || (i,j,k,l,m) = (1,10,11,12,13) -> \"straight\"\n    | _ -> \"null\"\n;;\n\nlet () =\n    let rec read () =\n        try let line = Scanf.scanf \" %d,%d,%d,%d,%d\\n\" (fun v w x y z -> [|v;w;x;y;z|]) in\n        Array.sort compare line;\n        hand line |> print_endline;\n        read ()\n        with End_of_file -> ()\n    in read ()\n;;"
  },
  {
    "language": "OCaml",
    "code": "let hand a =\n    let (i,j,k,l,m) = (a.(0),a.(1),a.(2),a.(3),a.(4)) in\n    if (j,k,l) = (i,i,i) || (k,l,m) = (j,j,j) then \"four card\"\n    else if (j,l,m) = (i,k,k) || (j,k,m) = (i,i,l) then \"full house\"\n    else if (j,k) = (i,i) || (k,l) = (j,j) || (l,m) = (k,k) then \"three card\"\n    else if (j,l) = (i,k) || (j,m) = (i,l) || (k,m) = (j,l) then \"two pair\"\n    else if j = i || k = j || l = k || m = l then \"one pair\"\n    else if (i,j,k,l,m) = (i,(i+1),(i+2),(i+3),(i+4)) || (i,j,k,l,m) = (1,10,11,12,13) then \"straight\"\n    else \"null\"\n;;\n\nlet () =\n    let rec read () =\n        try let line = Scanf.scanf \" %d,%d,%d,%d,%d\\n\" (fun v w x y z -> [|v;w;x;y;z|]) in\n        Array.sort compare line;\n        hand line |> print_endline;\n        read ()\n        with End_of_file -> ()\n    in read ()\n;;"
  },
  {
    "language": "OCaml",
    "code": "let hand a =\n    let t = (a.(0),a.(1),a.(2),a.(3),a.(4)) in\n    match t with\n    (i,j,k,l,m) when (i,j,k,l,m) = (i,i,i,i,m)\n                     || (i,j,k,l,m) = (i,j,j,j,j) -> print_endline \"four card\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,i,k,k,k)\n                     || (i,j,k,l,m) = (i,i,i,l,l) -> print_endline \"full house\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,i,i,l,m)\n                     || (i,j,k,l,m) = (i,j,j,j,m)\n                     || (i,j,k,l,m) = (i,j,k,k,k) -> print_endline \"three card\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,i,k,k,m)\n                     || (i,j,k,l,m) = (i,i,k,l,l)\n                     || (i,j,k,l,m) = (i,j,j,l,l) -> print_endline \"two pair\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,i,k,l,m)\n                     || (i,j,k,l,m) = (i,j,j,l,m)\n                     || (i,j,k,l,m) = (i,j,k,k,m)\n                     || (i,j,k,l,m) = (i,j,k,l,l) -> print_endline \"one pair\"\n    | (i,j,k,l,m) when (i,j,k,l,m) = (i,(i+1),(i+2),(i+3),(i+4))\n                     || (i,j,k,l,m) = (1,10,11,12,13)\n                        -> print_endline \"straight\"\n    | _ -> print_endline \"null\"\n;;\n\nlet () =\n    let rec read () =\n        try let line = Scanf.scanf \" %d,%d,%d,%d,%d\\n\" (fun v w x y z -> [|v;w;x;y;z|]) in\n        Array.sort compare line;\n        hand line;\n        read ()\n        with End_of_file -> ()\n    in read ()\n;;"
  },
  {
    "language": "D",
    "code": "import std.stdio, std.conv;\nimport std.array, std.algorithm, std.range;\n\nvoid main()\n{\n    foreach(s;stdin.byLine())\n    {\n        auto c = new int[](13);\n        foreach(n;s.split(\",\").map!(x=>x.to!int()-1))\n            ++c[n];\n        auto a = c.filter!\"a!=0\"().array().sort!\"a>b\"();\n        string r = \"null\";\n        if(a[0]==4) r = \"four card\";\n        else if(a[0]==3 && a[1]==2) r = \"full house\";\n        else if(a[0]==3) r = \"three card\";\n        else if(a[0]==2 && a[1]==2) r = \"two pair\";\n        else if(a[0]==2) r = \"one pair\";\n        else if(find(c,repeat(0,8)).length==12 || !find(c,repeat(1,5)).empty) r = \"straight\";\n        else r = \"null\";\n        writeln(r);\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.array;\nimport std.conv;\nimport std.string;\nimport std.algorithm;\n\n\nvoid main()\n{\n    while (true) {\n        auto cards = readln.chomp.split(\",\").map!(to!int).array;\n        \n        if(!cards.length) break;\n        cards.sort.hand.writeln;\n    }\n}\n\n\nstring hand(int[] cards){\n    if(cards[0] == cards[1] && cards[1] == cards[2] && cards[2] == cards[3] ||\n       cards[1] == cards[2] && cards[2] == cards[3] && cards[3] == cards[4]) {\n        return \"four card\";\n    }else if(cards[0] == cards[1] && cards[1] == cards[2] && cards[3] == cards[4] ||\n             cards[0] == cards[1] && cards[2] == cards[3] && cards[3] == cards[4]){\n        return \"full house\";\n    }else if(cards[0] == 1 && cards[1] == 10 && cards[2] == 11 && cards[3] == 12 && cards[4] == 13 ||\n             cards[1] == cards[0] + 1 && cards[2] == cards[0] + 2 && cards[3] == cards[0] + 3 && cards[4] == cards[0] + 4) {\n        return \"straight\";\n    }else if(cards[0] == cards[1] && cards[1] == cards[2] ||\n             cards[1] == cards[2] && cards[2] == cards[3] ||\n             cards[2] == cards[3] && cards[3] == cards[4]) {\n        return \"three card\";\n    }else if(cards[0] == cards[1] && cards[2] == cards[3] ||\n             cards[0] == cards[1] && cards[3] == cards[4] ||\n             cards[1] == cards[2] && cards[3] == cards[4]) {\n        return \"two pair\";\n    }else if(cards[0] == cards[1] ||\n             cards[1] == cards[2] ||\n             cards[2] == cards[3] ||\n             cards[3] == cards[4]) {\n        return \"one pair\";\n    }else{\n        return \"null\";\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.algorithm;\nimport std.string;\nimport std.conv;\nimport std.math;\n\nvoid main(){\n\n    while(true){\n\tint[] cards;\n\tauto s = readln();\n\tif(stdin.eof()) break;\n\tauto s1 = split(chomp(s),',');\n\tfor(int i=0;i<5;i++){\n\t    cards ~= to!int(s1[i]);\n\t}\n\t\n\tsort(cards);\n//\tforeach(i;cards) writeln(i);\n\tbool flg = false;\n\n\tint count = 0;\n\tfor(int i=0;i<5;i++){\n\t    count = 0;\n\t    for(int j=0;j<5;j++){\n\t\tif(cards[i] == cards[j]) count++;\n\t    }\n\t    if(count==4) {\n\t\twriteln(\"four card\");\n\t\tflg = true;\n\t\tbreak;\n\t    }\n\t}\n\n\tif(!flg){\n\t    bool three=false, two=false;\n\t    for(int i=0;i<5;i++){\n\t\tcount = 0;\n\t\tfor(int j=0;j<5;j++){\n\t\t    if(cards[i]==cards[j]) count++;\n\t\t}\n\t\tif(count==3) three = true;\n\t\tif(count==2) two = true;\n\t\tif(three&&two){\n\t\t    writeln(\"full house\");\n\t\t    flg = true;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n\n\tif(!flg){\n\t    bool st=true;\n\t    if(cards[0]==1&&cards[1]==10)cards[0]=9;\n\t    for(int i=0;i<4;i++){\n\t\tif(cards[i+1]-cards[i]!=1) st = false;\n\t    }\n\t    if(st){\n\t\twriteln(\"straight\");\n\t\tflg = true;\n\t    }\n\t}\n\n\tif(!flg){\n\t    bool three=false;\n\t    for(int i=0;i<5;i++){\n\t\tcount = 0;\n\t\tfor(int j=0;j<5;j++){\n\t\t    if(cards[i]==cards[j]) count++;\n\t\t}\n\t\tif(count==3) three = true;\n\t\tif(three){\n\t\t    writeln(\"three card\");\n\t\t    flg = true;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n\n\tif(!flg){\n\t    int p1,p2;\n\t    for(int i=0;i<5;i++){\n\t\tcount = 0;\n\t\tfor(int j=0;j<5;j++){\n\t\t    if(cards[i]==cards[j]&&p1!=cards[i]) count++;\n\t\t}\n\t\tif(count==2&&p1>0) p2 = cards[i];\n\t\tif(count==2) p1 = cards[i];\n\t\tif(p1&&p2){\n\t\t    writeln(\"two pair\");\n\t\t    flg=true;\n\t\t    break;\n\t\t}\n\t    }\n\t    if(p1){\n\t\twriteln(\"one pair\");\n\t\tflg = true;\n\t    }\n\t}\n\n\tif(!flg) writeln(\"null\");\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.algorithm;\nimport std.string;\nimport std.conv;\nimport std.math;\n\nvoid main(){\n\n    while(true){\n\tint[] cards;\n\tauto s = readln();\n\tif(stdin.eof()) break;\n\tauto s1 = split(chomp(s),',');\n\tfor(int i=0;i<5;i++){\n\t    cards ~= to!int(s1[i]);\n\t}\n\t\n\tsort(cards);\n//\tforeach(i;cards) writeln(i);\n\tbool flg = false;\n\n\tint count = 0;\n\tfor(int i=0;i<5;i++){\n\t    count = 0;\n\t    for(int j=0;j<5;j++){\n\t\tif(cards[i] == cards[j]) count++;\n\t    }\n\t    if(count==4) {\n\t\twriteln(\"four card\");\n\t\tflg = true;\n\t\tbreak;\n\t    }\n\t}\n\n\tif(!flg){\n\t    bool three=false, two=false;\n\t    for(int i=0;i<5;i++){\n\t\tcount = 0;\n\t\tfor(int j=0;j<5;j++){\n\t\t    if(cards[i]==cards[j]) count++;\n\t\t}\n\t\tif(count==3) three = true;\n\t\tif(count==2) two = true;\n\t\tif(three&&two){\n\t\t    writeln(\"full house\");\n\t\t    flg = true;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n\n\tif(!flg){\n\t    bool st=true;\n\t    if(cards[0]==1&&cards[1]==10)cards[0]=9;\n\t    for(int i=0;i<4;i++){\n\t\tif(cards[i+1]-cards[i]!=1) st = false;\n\t    }\n\t    if(st){\n\t\twriteln(\"straight\");\n\t\tflg = true;\n\t    }\n\t}\n\n\tif(!flg){\n\t    bool three=false;\n\t    for(int i=0;i<5;i++){\n\t\tcount = 0;\n\t\tfor(int j=0;j<5;j++){\n\t\t    if(cards[i]==cards[j]) count++;\n\t\t}\n\t\tif(count==3) three = true;\n\t\tif(three){\n\t\t    writeln(\"three card\");\n\t\t    flg = true;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n\n\tif(!flg){\n\t    int p1,p2;\n\t    for(int i=0;i<5;i++){\n\t\tcount = 0;\n\t\tfor(int j=0;j<5;j++){\n\t\t    if(cards[i]==cards[j]&&p1!=cards[i]) count++;\n\t\t}\n\t\tif(count==2&&p1>0) p2 = cards[i];\n\t\tif(count==2) p1 = cards[i];\n\t\tif(p1&&p2){\n\t\t    writeln(\"two pair\");\n\t\t    flg=true;\n\t\t    break;\n\t\t}\n\t    }\n\t    if(p1&&!flg){\n\t\twriteln(\"one pair\");\n\t\tflg = true;\n\t    }\n\t}\n\n\tif(!flg) writeln(\"null\");\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.conv;\nimport std.string;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.math;\nimport std.container;\nimport std.datetime;\n\nvoid main()\n{\n\tforeach (line; stdin.byLine) {\n\t\tauto x = line.split(\",\").map!(to!int).array.sort.array;\n\t\tauto u = x.uniq.array.length;\n\t\tif (u == 2) {\n\t\t\tauto n = x.count(x[0]);\n\t\t\tif (n == 2 || n == 3) {\n\t\t\t\twriteln(\"full house\");\n\t\t\t} else {\n\t\t\t\twriteln(\"four card\");\n\t\t\t}\n\t\t} else if (u == 3) {\n\t\t\tforeach (e; x) {\n\t\t\t\tif (x.count(e) == 3) {\n\t\t\t\t\twriteln(\"three card\");\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (x.count(e) == 2) {\n\t\t\t\t\twriteln(\"two pair\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (u == 4) {\n\t\t\twriteln(\"one pair\");\n\t\t} else {\n\t\t\tauto arr = iota(x[0], x[0]+5).array;\n\t\t\tauto aarr = 1 ~ iota(10, 14).array;\n\t\t\tif (x == arr || x == aarr) {\n\t\t\t\twriteln(\"straight\");\n\t\t\t} else {\n\t\t\t\twriteln(\"null\");\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.string;\nimport std.numeric;\nbool c_str(int[13] hs){\n\tfor(int i=0;i<10;i++){\n\t\tif(hs[i]==1&&hs[i+1]==1&&hs[i+2]==1&&hs[i+3]==1&&hs[(i+4)%13]==1) return true;\n\t}\n\treturn false;\n}\nvoid main() {\n\tstring s;\n\twhile( (s=readln().strip()).length != 0 ){\n\t\tauto as = s.split(',').map!(to!int)().array();\n\t\tint[13] hs;\n\t\tfor(int i=0;i<5;i++){\n\t\t\ths[as[i]-1]++;\n\t\t}\n\t\tif(!find(hs[],4).empty){\n\t\t\twriteln(\"four card\");\n\t\t}else if(!find(hs[],3).empty && !find(hs[],2).empty){\n\t\t\twriteln(\"full house\");\n\t\t}else if(c_str(hs)){\n\t\t\twriteln(\"straight\");\n\t\t}else if(!find(hs[],3).empty){\n\t\t\twriteln(\"three card\");\n\t\t}else if(!find(hs[],2).empty&&!find(find(hs[],2)[1..$],2).empty){\n\t\t\twriteln(\"two pair\");\n\t\t}else if(!find(hs[],2).empty){\n\t\t\twriteln(\"one pair\");\n\t\t}else{\n\t\t\twriteln(\"null\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio, std.string, std.conv, std.algorithm;\nvoid main()\n{\n\twhile(true) {\n\t\tauto input = readln.chomp.split(\",\");\n\t\tint[] hand;\n\t\tforeach(e; input)\n\t\t\thand ~= e.to!int;\n\n\t\tif(!hand.length)\n\t\t\tbreak;\n\t\thand.sort();\n\t\t(new PokerHand(hand)).hand.writeln;\n\t}\n}\n\nclass PokerHand\n{\n\tint[] cards;\n\tstring hand;\n\n\tthis(int[] cards)\n\tin\n\t{\n\t\tassert(cards.length == 5);\n\t\tassert(cards.isSorted);\n\t}\n\tbody\n\t{\n\t\tthis.cards = cards.dup;\n\t\thand = getHandName();\n\t}\n\n\tprivate string getHandName()\n\t{\n\t\tif(isFourCard)\n\t\t\treturn \"four card\";\n\t\telse if(isFullHouse)\n\t\t\treturn \"full house\";\n\t\telse if(isStraight)\n\t\t\treturn \"straight\";\n\t\telse if(isThreeCard)\n\t\t\treturn \"three card\";\n\t\telse if(isTwoPair)\n\t\t\treturn \"two pair\";\n\t\telse if(isOnePair)\n\t\t\treturn \"one pair\";\n\t\telse\n\t\t\treturn \"null\";\n\t}\n\n\tprivate bool isFourCard()\n\t{\n\t\treturn maxNumOfSameCards == 4;\n\t}\n\n\tprivate bool isFullHouse()\n\t{\n\t\treturn isThreeCard && isOnePair;\n\t}\n\n\tprivate bool isStraight()\n\t{\n\t\tstatic immutable bloadway = [1, 10, 11, 12, 13];\n\t\tbool _isStraight()\n\t\t{\n\t\t\tbool f = true;\n\t\t\tfor(int i = 0; i < cards.length - 1 && f; i++)\n\t\t\t\tf = cards[i + 1] - cards[i] == 1;\n\t\t\treturn f;\n\t\t}\n\n\t\treturn _isStraight() || cards == bloadway;\n\t}\n\n\tprivate bool isThreeCard()\n\t{\n\t\treturn maxNumOfSameCards == 3;\n\t}\n\n\tprivate bool isTwoPair()\n\t{\n\t\treturn numOfPairs == 2;\n\t}\n\t\n\tprivate bool isOnePair()\n\t{\n\t\treturn numOfPairs == 1;\n\t}\n\n\tprivate int numOfPairs()\n\t{\n\t\tint[14] nums;\n\t\tforeach(card; cards)\n\t\t\tnums[card]++;\n\n\t\tauto cnt = 0;\n\t\tforeach(num; nums)\n\t\t\tif(num == 2)\n\t\t\t\tcnt++;\n\n\t\treturn cnt;\n\t}\n\n\tprivate int maxNumOfSameCards()\n\t{\n\t\tint[14] nums;\n\t\tforeach(card; cards)\n\t\t\tnums[card]++;\n\t\treturn max(nums);\n\t}\n\n\tprivate int max(int[] arr...)\n\t{\n\t\tint max = 0;\n\t\tforeach(v; arr)\n\t\t\tmax = v > max ? v : max;\n\t\treturn max;\n\t}\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio,std.string,std.conv,std.algorithm,std.array;\n\nvoid main(){\n    while(true){\n        auto cards=readln.chomp.split(\",\").map!(to!int).array;\n        if(!cards.length)break;\n        cards.sort.yaku.writeln;\n    }\n}\n\nstring yaku(int[] c){\n    if(c[0]==c[1]&&c[1]==c[2]&&c[2]==c[3]||c[1]==c[2]&&c[2]==c[3]&&c[3]==c[4]){\n        return \"four card\";\n    }else if(c[0]==c[1]&&c[1]==c[2]&&c[3]==c[4]||c[0]==c[1]&&c[2]==c[3]&&c[3]==c[4]){\n        return \"full house\";\n    }else if(c[0]==1&&c[1]==10&&c[2]==11&&c[3]==12&&c[4]==13||c[1]==c[0]+1&&c[2]==c[0]+2&&c[3]==c[0]+3&&c[4]==c[0]+4){\n        return \"straight\";\n    }else if(c[0]==c[1]&&c[1]==c[2]||c[1]==c[2]&&c[2]==c[3]||c[2]==c[3]&&c[3]==c[4]){\n        return \"three card\";\n    }else if(c[0]==c[1]&&c[2]==c[3]||c[0]==c[1]&&c[3]==c[4]||c[1]==c[2]&&c[3]==c[4]){\n        return \"two pair\";\n    }else if(c[0]==c[1]||c[1]==c[2]||c[2]==c[3]||c[3]==c[4]){\n        return \"one pair\";\n    }else{\n        return \"null\";\n    }\n}"
  },
  {
    "language": "Python",
    "code": "\ndef chk_all(A):\n\ts_A = set(A)\n\tB = list(s_A)\n\tleng = len(s_A)\n\tif leng == 2:\n\t\tif A.count(B[0]) == 4 or A.count(B[1]) == 4:\n\t\t\treturn \"four card\"\n\t\telse:\n\t\t\treturn \"full house\"\n\telif leng == 3:\n\t\tif A.count(B[0]) == 3 or A.count(B[1]) == 3 or A.count(B[2]) == 3:\n\t\t\treturn \"three card\"\n\t\telse:\n\t\t\treturn \"two pair\"\n\telif leng == 4:\n\t\treturn \"one pair\"\n\telse:\n\t\tA = sorted(A)\n\n\t\tif A[0] == 1 and A[1] == 10 and A[2] == 11 and A[3] == 12 and A[4] == 13:\n\t\t\treturn \"straight\"\n\n\t\tfor i in range(1,5):\n\t\t\tif A[i] - A[i-1] != 1:\n\t\t\t\treturn \"null\"\n\n\t\treturn \"straight\"\n\n\treturn \"null\"\n\nif __name__ == '__main__':\n\n\twhile True:\n\t\ttry:\n\t\t\tA = list(map(int,input().split(\",\")))\n\t\t\tprint(chk_all(A))\n\n\t\texcept EOFError:\n\t\t\tbreak\n\n\n"
  },
  {
    "language": "Python",
    "code": "straight = [[i for i in range(j,j + 5)] for j in range(1,10)]\nstraight.append([1,10,11,12,13])\nwhile True:\n    try:\n        h = list(map(int, input().split(\",\")))\n        h_s = sorted(h)\n        p = []\n        for i in range(4):\n            if h_s[i] != h_s[i + 1]:\n                p.append(i)\n        if len(p) == 1:\n            if p[0] == 0 or p[0] == 3:\n                print(\"four card\")\n            else:\n                print(\"full house\")\n        elif h_s in straight:\n            print(\"straight\")\n        elif len(p) == 2:\n            if p[0] == 1 or p == [0,2]:\n                print(\"two pair\")\n            else:\n                print(\"three card\")\n        elif len(p) == 3:\n            print(\"one pair\")\n        else:\n            print(\"null\")\n    except:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "from itertools import permutations\n\ndef inini(_card):\n    for i in range(len(_card)):\n        _card[i] = 0\n\n\ndef main():\n    while True:\n        try:\n            card = 14*[0]\n            inini(card)\n            number = list(map(int,input().split(',')))\n            for v in number:\n                card[v] += 1\n            one_pair = 0\n            tree_card = 0\n            four_card = 0\n            flag = 0\n            for value in sorted(set(number),key=number.index):\n                if card[value] == 2:\n                    one_pair += 1\n                elif card[value] == 3:\n                    tree_card += 1\n                elif card[value] == 4:\n                    four_card += 1\n            if one_pair == 1 and tree_card ==1:\n                print('full house')\n                flag = 777        \n            elif one_pair == 1:\n                print('one pair')\n                flag = 777\n            elif one_pair == 2:\n                print('two pair')\n                flag = 777\n            elif tree_card == 1:\n                print('tree card')\n                flag = 777\n            elif four_card == 1:\n                print('four card')\n                flag = 777\n            straight = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10],[7,8,9,10,11],[8,9,10,11,12],[9,10,11,12,13],[10,11,12,13,1]]\n            for s_list in straight:\n                number.sort()\n                if number[0] == 1 and number[4] == 13:\n                    number.append(1)\n                    number.pop(0)\n                if number == s_list:\n                    print('straight')\n                    flag = 777\n                    break\n            if flag == 0:\n                print('null')\n        except EOFError:\n            break\n\n  \n\n       \nif __name__ == '__main__':\n    main()\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[2] and p[3] == p[4]) or (p[0] == p[1] and p[2] == p[4]):\n\t\tprint('full house')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[1] or p[1] == p[2] or p[2] == p[3] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif (p[0] == p[1]-1 and p[1] == p[2]-1 and p[2] == p[3]-1 and p[3] == p[4]-1 and p[4] == p[3]+1) or (p[0] == 1 and p[1] == 10 and p[2] == 11 and p[3] == 12 and p[4] == 13):\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n\n"
  },
  {
    "language": "Python",
    "code": "straight = '12345678910111213110111213'\n\nwhile True:\n    try:\n        lst = list(map(int, input().split(',')))\n        lst.sort()\n        clst = []\n\n        for i in lst:\n            clst.append(lst.count(i))\n\n        if clst.count(4) == 4:\n            print('four card')\n\n        elif clst.count(3) == 3:\n            if clst.count(2) == 2:\n                print('full house')\n            else:\n                print('three card')\n        elif clst.count(2) == 4:\n            print('two pair')\n        elif clst.count(2) == 2:\n            print('one pair')\n        else:\n            s = str(lst[0]) + str(lst[1]) + str(lst[2]) + str(lst[3]) + str(lst[4])\n            if s in straight:\n                print('straight')\n            else:\n                print('null')\n    \n    except EOFError:\n        break\n"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\ndef is_strait(_cnt):\n    f = 0\n    for i in range(1, 14):\n        if _cnt[(i % 13) + 1] == 1:\n            f += 1\n            if f == 5:\n                return True\n        elif f > 0 or _cnt[(i % 13) + 1] > 1:\n            return False\n    return False\n\ntry:\n    while 1:\n        cnt = Counter(map(int,input().split(',')))\n        mc = cnt.most_common(2)\n        if mc[0][1] >= 4:\n            print('four card')\n        elif mc[0][1] == 3 and mc[1][1] == 2:\n            print('full house')\n        elif mc[0][1] == 3:\n            print('three card')\n        elif mc[0][1] == mc[1][1] == 2:\n            print('two pair')\n        elif mc[0][1] == 2:\n            print('one pair')\n        elif is_strait(cnt):\n            print('straight')\n        else:\n            print('null')\nexcept:\n    pass"
  },
  {
    "language": "Python",
    "code": "try:\n    while True:\n        a: list = sorted(map(int, input().split(\",\")))\n\n        if a.count(a[0]) == 4 or a.count(a[1]) == 4:\n            print(\"four card\")\n        elif len(set(a)) == 2:\n            print(\"full house\")\n        elif (a[0]+4 == a[1]+3 == a[2]+2 == a[3]+1 == a[4] or\n              a == [1, 10, 11, 12, 13]):\n            print(\"straight\")\n        elif max(a.count(a[0]), a.count(a[1]), a.count(a[2])) == 3:\n            print(\"three card\")\n        elif len(set(a)) == 3:\n            print(\"two pair\")\n        elif len(set(a)) == 4:\n            print(\"one pair\")\n        else:\n            print(\"null\")\n\nexcept EOFError:\n    exit()\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:\n        hand=list(map(int,input().split(\",\")))\n        hand.sort()\n        if len(list(set(hand)))==2:\n            if hand.count(hand[0])==4 or hand.count(hand[4])==4:print(\"four card\")\n            else:print(\"full house\")\n        elif hand[0]+1==hand[1] and hand[1]+1==hand[2] and hand[2]+1==hand[3] and hand[3]+1==hand[4]:print(\"straight\")\n        elif hand[0]==1 and hand[1]==10 and hand[2]==11 and hand[3]==12 and hand[4]==13:print(\"straight\")\n        elif len(list(set(hand)))==3:\n            if hand.count(hand[0])==3 or hand.count(hand[2])==3 or hand.count(hand[4])==3:print(\"three card\")\n            else:print(\"two pair\")\n        elif len(list(set(hand)))==4:print(\"one pair\")\n        else:print(\"null\")        \n    except:break\n"
  },
  {
    "language": "Python",
    "code": "pair = [[\"null\",\"one pair\",\"two pair\"],[\"three card\",\"full house\"]]\n\nwhile True:\n\ttry:\n\t\tcard = map(int,raw_input().split(\",\"))\n\texcept EOFError:\n\t\tbreak\n\t\n\thand = [0,0,0,0,0,0,0,0,0,0,0,0,0]\n\tone  = 0\n\tthree= 0\n\tfour = 0\n\tstraight = 0\n\tfor i in range(0, 5):\n\t\thand[card[i] - 1] += 1\n\t\t\n\tfor i in range(0, 13):\n\t\tif hand[i] == 2:\n\t\t\tone += 1\n\t\telif hand[i] == 3:\n\t\t\tthree += 1\n\t\telif hand[i] == 4:\n\t\t\tfour = 1\n\t\tif hand[i] == 1:\n\t\t\tstraight += 1\n\t\telif straight != 5:\n\t\t\tstraight = 0\n\t\t\t\n\tif straight == 4 and hand[0] == 1 or straight == 5:\n\t\tprint \"straight\"\n\telif four == 1:\n\t\tprint \"four card\"\n\telse:\n\t\tprint pair[three][one]"
  },
  {
    "language": "Python",
    "code": "def get_input():\n    while True:\n        try:\n            yield ''.join(input())\n        except EOFError:\n            break\n\nN = list(get_input())\n\nfor l in range(len(N)):\n    table = [0 for i in range(15)]\n    cards = [int(i) for i in N[l].split(\",\")]\n    for i in range(5):\n        table[cards[i]] += 1\n\n    two,three,four,ren = 0,0,0,0\n    for i in range(15):\n        if table[i] == 2:\n            two += 1\n        elif table[i] == 3:\n            three += 1\n        elif table[i] == 4:\n            four += 1\n\n    for i in range(14):\n        if table[i] == 1 and table[i+1] == 1:\n            ren += 1\n    if table[10] == 1 and table[11] == 1 and table[12] == 1 and table[13] == 1 and table[1] == 1:\n        ren = 4\n    ans = \"null\"\n    if four == 1:\n        ans = \"four card\"\n    elif two == 1 and three == 1:\n        ans = \"full house\"\n    elif ren == 4:\n        ans = \"straight\"\n    elif three == 1:\n        ans = \"three card\"\n    elif two == 2:\n        ans = \"two pair\"\n    elif two == 1:\n        ans = \"one pair\"\n    print(ans)\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:\n        l=map(int,raw_input().split(','))\n        l.sort()\n        if l.count(l[2])==4:\n            print 'four card'\n        elif len(set(l))==2:\n            print 'full house'\n        elif l[0]==(l[1]-1)==(l[2]-2)==(l[3]-3)==(l[4]-4) or  (l[0]+9)==(l[1])==(l[2]-1)==(l[3]-2)==(l[4]-3):\n            print 'straight'\n        elif l.count(l[2])==3:\n            print 'three card'\n        elif len(set(l))==3:\n            print 'two pair'\n        elif len(set(l))==4:\n            print 'one pair'\n        else:\n            print 'null'\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "import re\nchars = {'10':'D', '11':'J', '12':'Q', '13':'K'}\nwhile True:\n    try:\n        f = sorted(map(int, input().strip().split(',')))\n        g = list(map(str,f.copy()))\n        for i in chars.keys():\n            while i in g:\n                g[g.index(i)] = chars[i]\n        h = ''.join(g)\n        if re.search(r'(.)\\1\\1\\1', h):\n            print('four card')\n        elif re.search(r'(.)\\1\\1(.)\\2', h) or re.search(r'(.)\\1(.)\\2\\2', h):\n            print('full house')\n        elif (f[1]==f[0]+1 and f[2]==f[0]+2 and f[3]==f[0]+3 and f[4]==f[0]+4) or h=='1DJQK':\n            print('straight')\n        elif re.search(r'(.)\\1\\1', h):\n            print('three card')\n        elif  re.search(r'(.)\\1.?(.)\\2', h):\n            print('two pair')\n        elif  re.search(r'(.)\\1', h):\n            print('one pair')\n        else:\n            print('null')\n\n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\t#4card\n\tif A[0]==A[3] or A[1]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[4]) or (A[0]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#three card\n\telif A[0]==A[2] or A[1]==A[3] or A[2]==A[4]:\n\t\tprint(\"three card\")\n\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[0]==A[1] and A[3]==A[4]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\t#straight A?????????\n\telif A==[1,10,11,12,13]:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(int,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "import sys\nfor s in sys.stdin:\n  hand = sorted(map(int, s.split(',')))\n  kind = len(set(hand))\n  ma = max([hand.count(i) for i in hand])\n  \n  ans = 'null'\n  if kind == 4:\n    ans = 'one pair'\n  elif kind == 3:\n    if ma == 2:\n      ans = 'two pair'\n    else:\n      ans = 'three card'\n  elif kind == 2:\n    if ma==4:\n      ans = 'four card'\n    else:\n      ans = 'full house'\n  else:\n    if hand == [1,10,11,12,13] or (hand[4] - hand[0]) == 4:\n      ans = 'straight'\n  print ans       "
  },
  {
    "language": "Python",
    "code": "def heaven(card_lis):\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic, card_lis)\n    \ndef suicide(result_dic, card_lis):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1] or card_lis == [1,2,3,4,5]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\ncard_lis_lis = []               \nwhile True:\n    try:\n        card_lis_lis.append([int(char) for char in raw_input().split(',')])\n    except EOFError:\n        for card_lis in card_lis_lis:\n            heaven(card_lis)\n        break"
  },
  {
    "language": "Python",
    "code": "import sys\nreadlines = sys.stdin.readlines\nwrite = sys.stdout.write\ndef solve(C):\n    d = {}\n    for c in C:\n        d[c] = d.get(c, 0) + 1\n    *vs, = d.values()\n    vs.sort()\n    if vs[-1] == 4:\n        return \"four card\"\n    if vs == [2, 3]:\n        return \"full house\"\n    c0 = C[0]\n    if C == list(range(c0, c0+5)) or C == [1, 10, 11, 12, 13]:\n        return \"straight\"\n    if vs == [1, 1, 3]:\n        return \"three card\"\n    if vs == [1, 2, 2]:\n        return \"two pair\"\n    if vs == [1, 1, 1, 2]:\n        return \"one pair\"\n    return \"null\"\n\nfor line in readlines():\n    *C, = map(int, line.split(\",\"))\n    C.sort()\n    write(\"%s\\n\" % solve(C))\n\n"
  },
  {
    "language": "Python",
    "code": "def fourcard(card) :\n    if card.count(card[0]) == 4 or card.count(card[1]) == 4 :\n        return True\n    else :\n        return False\n\ndef fullhouse(card) :\n    card.sort()\n    if (card[0] ==  card[1] == card[2] and card[3] == card[4]) or (card[0] == card[1] and card[2] == card[3] == card[4]) :\n        return True\n    else :\n        return False\n        \ndef straight(card) :\n    card.sort()\n    if card[0] == 1 and card[1] == 10 and card[2] == 11 and  card[3] == 12 and card[4] == 13 :\n        return True\n    else :\n        ans = 'True'\n        for i in range(4) :\n            if card[i] + 1 != card[i + 1] :\n                ans = False\n        if ans == 'True' :\n            return True\n        else :\n            return False\n\ndef threecard(card) :\n    if card.count(card[0]) == 3 or card.count(card[1]) == 3 or card.count(card[2]) == 3 :\n        return True\n    else :\n        return False\ndef twopair(card) :\n    card.sort()\n    if card[0] == card[1] :\n        if card[2] == card[3] or card[3] == card[4]:\n            return True\n    elif card[1] == card[2] :\n        if card[3] == card[4] :\n            return True\n    else :\n        return False\ndef onepair(card) :\n    card.sort()\n    if card[0] == card[1] or card[1] == card[2] or card[2] == card[3] or card[3] == card[4] :\n        return True\n    else :\n        return False\n\n\nwhile True :\n    try :\n        card = list(map(int, input().split(',')))\n    except EOFError :\n        break\n    \n    if fourcard(card) :\n        print('four card')\n    elif fullhouse(card) :\n        print('full house')\n    elif straight(card) :\n        print('straight')\n    elif threecard(card) :\n        print('three card')\n    elif twopair(card) :\n        print('two pair')\n    elif onepair(card) :\n        print('one pair')\n    else :\n        print('null')\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:\n        l=map(int,raw_input().split(','))\n        l.sort()\n        if l.count(l[0])==4 or l.count(l[4])==4:\n            print 'four card'\n        elif (l.count(l[0])==2 and l.count(l[4])==3) or (l.count(l[0])==3 and l.count(l[4])==2):\n            print 'full house'\n        elif l[0]==(l[1]-1)==(l[2]-2)==(l[3]-3)==(l[4]-4):\n            print 'straight'\n        elif l.count(l[0])==3 or l.count(l[4])==3:\n            print 'three card'\n        elif l.count(l[1])==2 and l.count(l[3])==2:\n            print 'two pair'\n        elif len(set(l)):\n            print 'one pair'\n        else:\n            print 'null'\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        rawhand = input().split(\",\")\n        hand = [0]*14\n        for card in rawhand:\n            if card ==\"A\" : hand[1] += 1\n            elif card ==\"J\" : hand[11] += 1\n            elif card ==\"Q\" : hand[12] += 1\n            elif card ==\"K\" : hand[13] += 1\n            else: hand[int(card)] += 1\n        pairs = 0\n        three = False\n        four = False\n        minone = 0\n        for i in range(14):\n            ranks = hand[i]\n            if ranks == 1 and minone == 0: minone = i\n            elif ranks == 2: pairs += 1\n            elif ranks == 3: three = True\n            elif ranks == 4: four = True; break\n\n        straight = hand[minone]==1 and hand[minone+1]==1 and hand[minone+2]==1 and hand[minone+3]==1 and hand[minone+4]==1\n        straight = straight or (hand[1]==1 and hand[10]==1 and hand[11]==1 and hand[12]==1 and hand[13]==1)\n\n        if four: print(\"four card\")\n        elif three and pairs == 1: print(\"full house\")\n        elif straight: print(\"straight\")\n        elif three: print(\"three card\")\n        elif pairs == 2: print(\"two pair\")\n        elif pairs == 1: print(\"one pair\")\n        else: print(\"null\")\n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[1] == p[2] and p[3] == p[4]) or (p[0] == [1] and p[2] == p[3] == p[4]):\n\t\tprint('full house')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif p[0] == p[1] or p[1] == p[2] or p[2] == p[3] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif p[0] == p[1]-1 and p[1] == p[2]-1 and p[2] == p[3]-1 and p[3] == p[4]-1 and p[4] == p[3]+1:\n\t\tprint('straight')\n\telif p[0] == 1 and p[1] == 10 and p[2] == 11 and p[3] == 12 and p[4] == 13:\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:\n        l=map(int,raw_input().split(','))\n        l.sort()\n        if l.count(l[0])==4 or l.count(l[4])==4:\n            print 'four card'\n        elif (l.count(l[0])==2 and l.count(l[4])==3) or (l.count(l[0])==3 and l.count(l[4])==2):\n            print 'full house'\n        elif l[0]==(l[1]-1)==(l[2]-2)==(l[3]-3)==(l[4]-4):\n            print 'straight'\n        elif l.count(l[2])==3:\n            print 'three card'\n        elif l.count(l[1])==2 and l.count(l[3])==2:\n            print 'two pair'\n        elif len(set(l))==4:\n            print 'one pair'\n        else:\n            print 'null'\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom collections import Counter\n\n\nclass Poker(object):\n    def __init__(self, cards):\n        # ?????????????????????????????????????????§?????????(??????)???????????????\n        self.cards = cards[:]\n        self.cards.sort(reverse=True)\n\n    def evaluate_hand(self):\n        \"\"\" ???????????????????????????????????????????????????\n        ????????????????????\\??????????????????????????????????????§?????????????????\\???????????¬????????????????????\\???????????????????????¬????????????????????\\?????±????????????\n        - null\n        - one pair\n        - two pair\n        - three card\n        - straight\n        - full house\n        - four card\n        \"\"\"\n        if (self.cards[0] == self.cards[1]+1 == self.cards[2]+2 == self.cards[3]+3 == self.cards[4]+4) or \\\n            (self.cards[0] == 13 and self.cards[1] == 12 and self.cards[2] == 11 and self.cards[3] == 10 and self.cards[4] ==1):\n            return 'straight'\n        else:\n            c = Counter(self.cards)\n            hand = c.most_common()  # ????????°?????????????????°????????????????????????(???: ????????????)?????????????????????????????????\n            if hand[0][1] == 4:\n                return 'four card'\n            elif hand[0][1] == 3 and hand[1][1] == 2:\n                return 'full house'\n            elif hand[0][1] == 3:\n                return 'three card'\n            elif hand[0][1] == 2 and hand[1][1] == 2:\n                return 'two pair'\n            elif hand[0][1] == 2:\n                return 'one pair'\n            else:\n                return 'null'\n\n\nif __name__ == '__main__':\n    # ??????????????\\???\n    for line in sys.stdin:\n        cards = [int(x) for x in line.strip().split(',')]\n\n        # ??????????????????\n        p1 = Poker(cards)\n        result = p1.evaluate_hand()\n\n        # ???????????¨???\n        print(result)"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\n\ndef is_four_card(d):\n    return 4 in d.values()\n\n\ndef is_full_house(d):\n    return 3 in d.values() and 2 in d.values()\n\n\ndef is_straight(d):\n    flag = False\n    times = 0\n    for i in d.values():\n        if flag and times == 5:\n            return True\n        elif flag and times == 4:\n            _values = list(d.values())\n            return _values[0] == 1 and _values[1] == 0\n\n        if i == 1:\n            flag = True\n            times += 1\n    return False\n\n\ndef is_three_card(d):\n    return 3 in d.values()\n\n\ndef is_two_pair(d):\n    return list(d.values()).count(2) == 2\n\n\ndef is_one_pair(d):\n    return list(d.values()).count(2) == 1\n\n\ndef judge(d):\n    if is_four_card(d):\n        print('four card')\n    elif is_full_house(d):\n        print('full house')\n    elif is_straight(d):\n        print('straight')\n    elif is_three_card(d):\n        print('three card')\n    elif is_two_pair(d):\n        print('two pair')\n    elif is_one_pair(d):\n        print('one pair')\n    else:\n        print('null')\n\n\ndef solve(cards):\n    d = {k: 0 for k in range(1, 14)}\n    for card in cards:\n        d[card] += 1\n    judge(d)\n\n# _input = '11,12,13,1,2'\n_input = input()\n_cards = [int(e) for e in _input.split(\",\")]\nsolve(_cards)"
  },
  {
    "language": "Python",
    "code": "import sys\nf = sys.stdin\n\nfor line in f:\n    c = sorted(list(map(int, line.strip().split(','))))\n    if c[0] == c[3] or c[1] == c[4]:\n        print('four card')\n    elif (c[0] == c[2] and c[3] == c[4]) or (c[0] == c[1] and c[2] == c[4]):\n        print('full house')\n    elif c[0] == c[2] or c[1] == c[3] or c[2] == c[4]:\n        print('three card')\n    else:\n        cnt = 0\n        for i in range(4):\n            if c[i] == c[i + 1]:\n                cnt += 1\n        if cnt == 2:\n            print('two pair')\n        elif cnt == 1:\n            print('one pair')\n        elif c == [1,10,11,12,13] or c[0] == c[1] - 1 == c[2] - 2 == c[3] - 3 == c[4] - 4:\n            print('straight')\n        else:\n            print('null')"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\nans = [\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"]\nstraits = [[i,i+1,i+2,i+3,i+4]for i in range(1,10)]\nstraits.append([1,10,11,12,13])\n\nwhile(True):\n    try:\n        l = sorted(list(map(int,input().split(\",\"))))\n        v = sorted(list(Counter(l).values()))\n        p = 0\n        if v == [1,1,1,2]: p = 1\n        elif v == [1,2,2]: p = 2\n        elif v == [1,1,3]: p = 3\n        elif l in straits: p = 4\n        elif v == [2,3]: p = 5\n        elif v == [1,4]: p = 6\n        print(ans[p])\n    except:\n        break\n"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\t#4card\n\tif A[0]==A[3] or A[1]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[4]) or (A[0]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#three card\n\telif A[0]==A[2] or A[1]==A[3] or A[2]==A[4]:\n\t\tprint(\"three card\")\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\t#straight A?????????\n\telif A==[1,10,11,12,13]:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(int,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=list(map(int,e.split(',')))\n c=[e.count(i+1)for i in range(13)];d=c+c\n if 4 in c:s='four card'\n elif 3 in c:\n  if 2 in c:s='full house'\n  else:s='three card'\n elif 2 in c:\n  if c.count(2)-1:s='two pair'\n  else:s='one pair'\n elif sum([1]*5==d[i:i+5]for i in range(10)):s='straight'\n else:s='null'\n print(s)\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[1] == p[2] and p[3] == p[4]) or (p[0] == [1] and p[2] == p[3] == p[4]):\n\t\tprint('full house')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif p[0] == p[1] or p[1] == p[2] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif (p[0] == p[1]-1) and (p[1] == p[2]-1) and (p[2] == p[3]-1) and (p[3] == p[4]-1) and  (p[4] == p[3]+1):\n\t\tprint('straight')\n\telif p[0] == 1 and p[1] == 10 and p[2] == 11 and p[3] == 12 and p[4] == 13:\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n"
  },
  {
    "language": "Python",
    "code": "import sys\nHAND=[\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"]\nfor line in sys.stdin.readlines():\n    cards=sorted(map(int,line.strip().split(\",\")))\n    switch=len(set(cards))\n    ma=max([cards.count(i) for i in cards])\n    if switch==4:print HAND[1]\n    elif switch==3:\n        if ma==2:print HAND[2]\n        else:print HAND[3]\n    elif switch==2:\n        if ma==4:print HAND[6]\n        else:print HAND[5]\n    else:\n        if cards==[1,10,11,12,13] or [cards[i+1]-cards[i] for i in xrange(4)]==[1,1,1,1]:print HAND[4]\n        else:print HAND[0]"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef check(cards):\n    ones, twos, threes, fours = 0, 0, 0, 0\n    for i in range(1, 14):\n        c = cards.count(i)\n        if c == 1: ones += 1\n        elif c == 2: twos += 1\n        elif c == 3: threes += 1\n        elif c == 4: fours += 1\n    \n    if fours:\n        return 'four card'\n    if threes and twos:\n        return 'full house'\n    if ones == 5:\n        for i, v in enumerate(cards[:-1]):\n            if not v == cards[i + 1] - 1:\n                break\n        else: return 'straight'\n        if cards == [1, 10, 11, 12, 13]:\n            return 'straight'\n    if threes:\n        return 'three card'\n    if twos == 2:\n        return 'two pair'\n    if twos:\n        return 'one pair'\n    return 'null'\n\ndef solve():\n    for line in sys.stdin:\n        cards = sorted(map(int, line.split(',')))\n        print(check(cards))\n\nif __name__ == \"__main__\":\n    solve()\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=sorted(map(int,e.split(',')))\n print([['null','straight'][e[4]-e[0]==4 or e[0]*10==e[1]],'one pair','two pair','three card','full house',0,'four card'][sum(e.count(s)for s in e)//2-2])\n"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        A = sorted(list(map(int, input().split(\",\"))))\n        _sum = 0\n        _max = 0\n        for i in range(1,14):\n            tmp = A.count(i)\n            if tmp > 1:\n                _sum+=tmp\n            _max = max(_max, tmp)\n        if _max == 4:\n            print(\"four card\")\n        elif _max == 3 and _sum == 5:\n            print(\"full house\")\n        elif A.count(1) == 1 and (A[0] == 1 and A[2]-1 == A[3]-2 == A[4]-3 == A[1]) \\\n            or (A[4] == 1 and A[1]-1 == A[2]-2 == A[3] == A[0]):\n            print(\"straight\")\n        elif A[1]-1 == A[2]-2 == A[3]-3 == A[4]-4 == A[0]:\n            print(\"straight\")\n        elif _max == 3:\n            print(\"three card\")\n        elif _sum == 4:\n            print(\"two pair\")\n        elif _max == 2:\n            print(\"one pair\")\n        else:\n            print(\"null\")\n    except:\n        break\n"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        hand = map(int, raw_input().split(\",\"))\n        kind = list(set(hand))\n        rank =[]\n        for card in kind:\n            rank.append(hand.count(card))\n            rank.sort()\n            rank.reverse()\n        if rank[0] == 4:\n            print \"four card\"\n        elif rank[0] == 3:\n            if rank[1] == 2:\n                print \"full house\"\n            else:\n                print \"three card\"\n        elif rank[0] == 2:\n            if rank[1] == 2:\n                print \"two pair\"\n            else:\n                print \"one pair\"\n        else:\n            hand.sort()\n            if hand[4] - hand[0] == 4 or (hand[0] == 1 and hand[1] == 10):\n                print \"straight\"\n            else:\n                print \"null\"\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        cards = list(map(int, input().split(',')))\n    except:\n        break\n    cards.sort()\n    if cards.count(cards[2]) == 4:\n        print('four card')\n    elif cards.count(cards[2]) == 3:\n        if cards[0] == cards[1] and cards[3] == cards[4]:\n            print('full house')\n        else:\n            print('three card')\n    elif (cards[1] < cards[2] < cards[3] < cards[4]) and cards[4] - cards[1] == 3\\\n        and (cards[0] == cards[4] - 4 or cards[0] == cards[4] - 12):\n            print('straight')\n    elif (cards[0] == cards[1] and (cards[2] == cards[3] or cards[3] == cards[4]))\\\n        or (cards[1] == cards[2] and cards[3] == cards[4]):\n        print('two pair')\n    elif max(cards.count(cards[i]) for i in range(5)) == 2:\n        print('one pair')\n    else:\n        print('null')"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\nwhile True:\n    try:\n        card = list(map(int, input().split(\",\")))\n\n    except:\n        break\n\n    counter = Counter(card)\n    mc = counter.most_common()\n    if len(mc) == 2:\n        if mc[0][1] == 4:\n            print(\"four card\")\n        else:\n            print(\"full house\")\n    elif len(mc) == 3:\n        if mc[0][1] == 3:\n            print(\"three card\")\n        else:\n            print(\"two pair\")\n    elif len(mc) == 4:\n        print(\"one pair\")\n    else:\n        t = sorted([mc[i][0] for i in range(len(mc))])\n        if t[4]-t[3] == t[3]-t[2] == t[2]-t[1] and \\\n            (t[1]-t[0] or (t[0] == 1 and t[4] == 13)):\n            print(\"straight\")\n        else:\n            print(\"null\")"
  },
  {
    "language": "Python",
    "code": "while True:\n      try:\n            hand = sorted(map(int, raw_input().split(\",\")))\n            kind = len(set(hand))\n            ma = max([hand.count(i) for i in hand])\n            if kind == 4:\n                  print \"one pair\"\n            elif kind == 3:\n                  if ma == 2:\n                        print \"two pair\"\n                  else:\n                        print \"three card\"\n            elif kind == 2:\n                  if ma==4:\n                        print \"four card\"\n                  else:\n                        print \"full house\"\n            else:\n                  if hand==[1,10,11,12,13] or hand[4] - hand[0] == 4:\n                        print \"straight\"\n                  else:\n                        print \"null\"\n      except:\n            break"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\n\ndef is_four_card(d):\n    return 4 in d.values()\n\n\ndef is_full_house(d):\n    return 3 in d.values() and 2 in d.values()\n\n\ndef is_straight(d):\n    flag = [False, 0]\n    for i in d.values():\n        if flag[0] == True and flag[1] == 5:\n            return True\n\n        if i == 1:\n            flag[0] = True\n            flag[1] += 1\n    return False\n\n\ndef is_three_card(d):\n    return 3 in d.values()\n\n\ndef is_two_pair(d):\n    return list(d.values()).count(2) == 2\n\n\ndef is_one_pair(d):\n    return list(d.values()).count(2) == 1\n\n\ndef judge(d):\n    if is_four_card(d):\n        print('four card')\n    elif is_full_house(d):\n        print('full house')\n    elif is_straight(d):\n        print('straight')\n    elif is_three_card(d):\n        print('three card')\n    elif is_two_pair(d):\n        print('two pair')\n    elif is_one_pair(d):\n        print('one pair')\n    else:\n        print('null')\n\n\ndef solve(cards):\n    d = {k: 0 for k in range(1, 14)}\n    for card in cards:\n        d[card] += 1\n    judge(d)\n\n_input = [int(e) for e in input().split(\",\")]\nsolve(_input)"
  },
  {
    "language": "Python",
    "code": "import sys\n\n\ndef checkPairs(cards):\n  result = {}\n  for card in cards:\n    if cards.count(card) >= 2:\n      result.update({card: cards.count(card)})\n  keysNum = len(result.keys())\n  values = list(result.values())\n  if keysNum == 0:\n    return \"null\"\n  elif keysNum == 2:\n    if values.count(3) > 0:\n      return \"full house\"\n    else:\n      return \"two pair\"\n  else:\n    if values.count(4) > 0:\n      return \"four card\"\n    elif values.count(3) > 0:\n      return \"three card\"\n    else:\n      return \"one pair\"\n\n\ndef checkStraight(cards):\n  if cards.count(1) > 0:\n    if cards[1] == 10 and cards[2] == 11 and cards[3] == 12 and cards[4] == 13:\n      return True\n  if cards[0] == cards[1] - 1 and cards[1] == cards[2] - 1 and cards[2] == cards[3] - 1 and cards[3] == cards[4] - 1:\n    return True\n  else:\n    return False\n\n\nfor line in sys.stdin:\n  try:\n    cards = [int(i) for i in line.split(',')]\n    cards.sort()\n    result = checkPairs(cards)\n    if result == \"full house\" or result == \"four card\":\n      print(result)\n    else:\n      print(\"straight\" if checkStraight(cards) else result)\n  except:\n    break"
  },
  {
    "language": "Python",
    "code": "prize=[\"null\",\"one pair\",\"two pair\",\"three card\",\n        \"straight\",\"full house\",\"four card\"]\n\ntry:\n    while True:\n        hand = map(int,raw_input().split(\",\"))\n        x = sorted(list(set(hand)))\n        a = len(x)\n        b = max([hand.count(e) for e in x])\n        if b==4: p=6\n        elif b==3:\n            if a==2: p=5\n            else: p=3\n        elif b==2:\n            if a==3: p=2\n            else: p=1\n        elif b==1:\n            e = x[0]\n            if x==[1,10,11,12,13] or x==range(e,e+5): p=4\n            else: p=0\n        print prize[p]\nexcept:\n    pass"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef is_onepair(x):\n    for i in range(4):\n        if x.count(x[i]) == 2:\n            return True\n\n    return False\n\ndef is_twopair(x):\n    count = 0\n    for e in x:\n        for e2 in x:\n            if e == e2:\n                count += 1\n            if count == 2:\n                return True\n\n    return False\n\ndef is_threecard(x):\n    for i in range(3):\n        if x.count(x[i]) == 3:\n            return True\n\n    return False\n\ndef is_straight(x):\n    x.sort()\n    if x[0] == 1 and x[1:] = [10, 11, 12, 13]:\n        return True\n    for i in range(4):\n        if x[i]+1 != x[i+1]:\n            return False\n    \n    return True\n\ndef is_fullhouse(x):\n    if is_threecard(x) and is_onepair(x):\n        return True\n\n    return False\n    \ndef is_fourcard(x):\n    for i in range(2):\n        if x.count(x[i]) == 4:\n            return True\n\n    return False\n\nfor line in sys.stdin.readlines():\n    hand = list(map(int, line.split(',')))\n    if is_fourcard(hand):\n        print(\"four card\")\n    elif is_fullhouse(hand):\n        print(\"full house\")\n    elif is_straight(hand):\n        print(\"straight\")\n    elif is_threecard(hand):\n        print(\"three card\")\n    elif is_twopair(hand):\n        print(\"two pair\")\n    elif is_onepair(hand):\n        print(\"one pair\")\n    else:\n        print(\"null\")"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport collections\n\ndef is_four_card(cards):\n  return cards.most_common(1)[0][-1] == 4\ndef is_full_house(cards):\n  return cards.most_common(1)[0][-1] == 3 and cards.most_common(2)[-1][-1] == 2\ndef is_straight(cards):\n  if cards[0] == 1 and cards[1:] == [10,11,12,13]: return True\n  return cards == range(cards[0],cards[0]+5)\ndef is_three_card(cards):\n  return cards.most_common(1)[0][-1] == 3\ndef is_two_pair(cards):\n  return cards.most_common(2)[0][-1] == 2 and cards.most_common(2)[1][-1] == 2\ndef is_one_pair(cards):\n  return cards.most_common(1)[0][-1] == 2\nfor s in sys.stdin:\n  d = map(int,s.split(\",\"))\n  d.sort()\n  dc = collections.Counter(d)\n  if is_four_card(dc): print \"four card\" ; continue\n  if is_full_house(dc): print \"full house\" ; continue\n  if is_straight(d): print \"straight\" ; continue\n  if is_three_card(dc): print \"three card\" ; continue\n  if is_two_pair(dc): print \"two pair\" ; continue\n  if is_one_pair(dc): print \"one pair\" ; continue\n  print \"null\""
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\npoker = [\"0\", \"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"]\nfor line in sys.stdin:\n    H = map(int, line.split(','))\n    H.sort()\n    if H[0] == H[1] == H[2] == H[3] or H[1] == H[2] == H[3] == H[4]:\n        print poker[7]\n    elif H[0] == H[1] or H[1] == H[2] or H[2] == H[3] or H[3] == H[4]:\n        if H[0] == H[1] == H[2] or H[1] == H[2] == H[3] or H[2] == H[3] == H[4]:\n            if H[0] == H[1] and H[2] == H[3] == H[4] or H[0] == H[1] == H[2] and H[3] == H[4]:\n                print poker[6]\n            else:\n                print poker[4]\n        else:\n            if H[0] == H[1] and H[2] == H[3] or H[0] == H[1] and H[3] == H[4] or H[1] == H[2] and H[3] == H[4]:\n                print poker[3]\n            else:\n                print poker[2]\n    else:\n        if H[0] == 1 and H[4] == 13:\n            H[0] += 13\n            H.sort()\n        if H[0]+1 == H[1] and H[1]+1 == H[2] and H[2]+1 == H[3] and H[3]+1 == H[4]:\n            print poker[5]\n        else:\n            print poker[1]"
  },
  {
    "language": "Python",
    "code": "def straight(cards):\n    if cards==[1,10,11,12,13]:\n        return 1\n    else:\n        for i in range(1,5):\n           if cards[i] != cards[i-1] + 1 :\n               return 0\n        return 1       \n\nwhile True:\n    try:\n        cards = sorted(list(map(int, input().split(','))))\n    except:\n        break\n    if cards.count(cards[1])==4:\n        print('four card')\n        continue\n    elif len(set(cards))==2:\n        print('full house')\n        continue\n    elif straight(cards)==1:\n        print('straight')\n        continue\n    elif cards.count(cards[2])==3:\n        print('three card')\n        continue\n    elif len(set(cards))==3:\n        print('two pair')\n        continue\n    elif len(set(cards))==4:\n        print('one pair')\n        continue\n    else:\n        print('null')\n        continue\n"
  },
  {
    "language": "Python",
    "code": "import sys\nHAND=[\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"]\nfor line in sys.stdin.readlines():\n    cards=sorted(map(int,line.strip().split(\",\")))\n    switch=len(set(cards))\n    ma=max([cards.count(i) for i in cards])\n    if switch==4:print HAND[1]\n    elif switch==3:\n        if ma==2:print HAND[2]\n        else:print HAND[3]\n    elif switch==2:\n        if ma==4:print HAND[6]\n        else:print HAND[5]\n    else:\n        if cards==[1,10,11,12,13] or len(set([cards[i+1]-cards[i] for i in xrange(4)]))==1:print HAND[4]\n        else:print HAND[0]"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\t#4card\n\tif A[0]==A[1]==A[2]==A[3] or A[1]==A[2]==A[3]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[3]==A[4]) or (A[0]==A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#straight A?????????\n\telif A[0]==1 and A[1]==10 and A[2]==11 and A[3]==12 and A[4]==13:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\t#threee\n\telif A[0]==A[1]==A[2] or A[1]==A[2]==A[3] or A[2]==A[3]==A[4]:\n\t\tprint(\"three card\")\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(float,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "#encoding=utf-8\n\nimport sys\ntako = [1,2,3,4,5,6,7,8,9,10,11,12,13,1]\nfor line in sys.stdin:\n    count1, count2, count3, flag = 0, 0, [], 0\n    line = line[:-1]\n    num = map(int, line.split(\",\"))\n    for i in xrange(4):\n        for j in xrange(i + 1,5):\n            if num[i] == num[j] and num[j] != 0:\n                count1 += 1\n                num[j] = 0\n        count3.append(count1)\n        count1 = 0\n\n    if sum(count3) == 1:\n        print \"one pair\"\n    elif count3.count(1) == 2:\n        print \"two pair\"\n    elif count3.count(1) != count3.count(2):\n        print \"three card\"\n    elif count3.count(1) == count3.count(2) == 1:\n        print \"hull house\"\n    elif count3.count(3) == 1:\n        print \"four card\"\n    elif sum(count3) == 0:\n        for i in xrange(13):\n            if sorted(tako[i:i+5]) == sorted(num):\n                print \"straigth\"\n                flag = 1\n                break \n        if flag != 1:\n            print \"null\"\n            flag = 0"
  },
  {
    "language": "Python",
    "code": "hand = None\n\ndef find(trg, start = 0):\n    count = 0\n    m = -1 \n    mm = 0\n    for i in range(start, 5):\n        if m == hand[i]:\n            count += 1\n        else:\n            if count == trg:\n                mm = i\n                break\n            m = hand[i]\n            count = 1\n    if count == trg:\n        mm = i\n    return mm\n\nwhile True:\n    try:\n        hand = map( int, raw_input().split(',') ) \n    except EOFError:\n        break\n    hand.sort()\n    if find(4): \n        print \"four card\"\n    elif find(3) and find(2) and find(3) != find(2): \n        print \"full house\"\n    elif (hand[1] - hand[0]) * (hand[2] - hand[1]) * (hand[3] - hand[2]) * (hand[4] - hand[3]) == 1 or (hand[0] == 1 and hand[1] == 10 and hand[2] == 11 and hand[3] == 12 and hand[4] == 13):\n        print \"straight\"\n    elif find(3):\n        print \"three card\"\n    elif find(2)*find(2,2) and find(2) != find(2, 2):\n        print \"two pair\"\n    elif find(2):\n        print \"one pair\"\n    else:\n        print \"null\""
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=sorted(map(int,e.split(',')))\n print([['null','straight'][e[4]-e[0]==4 or e[0]*10==e[1]],'one pair','two pair','three card','full house',0,'four card'][(sum(e.count(s)for s in e)//2-2])\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfor line in sys.stdin.readlines():\n  l = [int(i) for i in line.split(',')]\n  l.sort()\n  n =sum([l.count(i) for i in l])\n  if n == 17:\n    print('four card')\n  elif n == 13:\n    print('full house')\n  elif n == 11:\n    print('three card')\n  elif n == 9:\n    print('two pair')\n  elif n == 7:\n    print('one pair')\n  elif max(l)-min(l)==4 or (l[1] == 10 and l[0]==1):\n    print('straight')\n  else:\n    print('null')"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        cards = list(map(int, input().split(',')))\n        cards.sort()\n\n        if len(set(cards)) == 5:\n            c = cards[0]\n            if cards == [c, c+1, c+2, c+3, c+4]:\n                print(\"straight\")\n            elif cards == [1,10,11,12,13]:\n                print(\"straight\")\n            else:\n                print(\"null\")\n        else:\n            if len(set(cards)) == 2:\n                t = cards.count(cards[0])\n                if t == 1 or t == 4:\n                    print(\"four card\")\n                else:\n                    print(\"full house\")\n            elif len(set(cards)) == 3:\n                flag = True\n                i = 0\n                while flag:\n                    c = cards[i]\n                    if cards.count(c) == 3:\n                        print(\"three card\")\n                        flag = False\n                    if cards.count(c) == 2:\n                        print(\"two pair\")\n                        flag = False\n                    i += 1\n            else:\n                print(\"one pair\")\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "def yaku(card):\n    table=[0]*13\n    for i in range(5):\n        table[card[i]-1]+=1\n    if table.count(4)!=0:\n        return \"four card\"\n    elif table.count(3)!=0:\n        if table.count(2)!=0:\n            return \"full house\"\n        else:\n            return \"three card\"\n    elif table.count(2)!=0:\n        if table.count(2)==2:\n            return \"two pair\"\n        else:\n            return \"one pair\"\n    else:\n\n        if \",\".join(map(str,card)) in \"1,2,3,4,5,6,7,8,9,10,11,12,13\" or\\\n           \",\".join(map(str,card)) in \"1,10,11,12,13\":\n            return \"straight\"\n        else:\n            return \"null\"\nwhile True:\n    try:\n        card=map(int,raw_input().split(\",\"))\n        card.sort()\n        print yaku(card)\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[2] and p[3] == p[4]) or (p[0] == p[1] and p[2] == p[4]):\n\t\tprint('full house')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif p[0] == p[1] or p[1] == p[2] or p[2] == p[3] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif p[0] == p[1]-1 and p[1] == p[2]-1 and p[2] == p[3]-1 and p[3] == p[4]-1 and p[4] == p[3]+1:\n\t\tprint('straight')\n\telif p[0] == 1 and p[1] == 10 and p[2] == 11 and p[3] == 12 and p[4] == 13:\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\nimport sys\n\nfor t in sys.stdin:\n    l=sorted(map(int,t[:-1].split(\",\")))\n    s=False\n    p1=Counter(l)\n    p2=Counter(p1.values())\n\n    if 3 in p2 and 2 in p2:\n        print(\"full house\")\n    elif 2 in p2:\n        if p2[2]==1:\n            print(\"one pair\")\n        elif p2[2]==2:\n            print(\"two pair\")\n    elif 3 in p2:\n        print(\"three card\")\n    elif 4 in p2:\n        print(\"four card\")\n    else:\n        for i in range(1,10):\n            if list(range(i,i+5))==l:\n                print(\"straight\")\n                s=True\n                break\n        if [1,10,11,12,13]==l:\n            print(\"straight\")\n            s=True\n        if not s:\n            print(\"null\")\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=sorted(map(int,e.split(',')))\n print([['null','straight'][e[0]*10==e[1]or e[4]-e[0]==4],'one pair','two pair','three card','full house',0,'four card'][sum(e.count(s)for s in e)//2-2])\n"
  },
  {
    "language": "Python",
    "code": "def heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1] or card_lis == [1,2,3,4,5]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\ncard_lis_lis = []               \nwhile True:\n    try:\n        card_lis = [int(char) for char in raw_input().split(',')]\n        heaven()\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "HANDS = {\n    'one pair': [1,1,1,2],\n    'two pair': [1,2,2],\n    'three card': [1,1,3],\n    'four card': [1,4],\n    'full house': [2,3],\n}\n\ndef check(key, value):\n    for (k, v) in HANDS.iteritems():\n        if value == v:\n            return k\n    if key[-1] - key[0] == 4 or key == [1, 10, 11, 12, 13]:\n        return 'straight'\n    else:\n        return 'null'\n\nwhile True:\n    try:\n        cards = map(int, raw_input().split(','))\n        m = {}\n        for n in cards:\n            if m.has_key(n):\n                m[n] += 1\n            else:\n                m[n] = 1\n        print check(sorted(m.keys()), sorted(m.values()))\n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef inp():\n    word = []\n    for line in sys.stdin:\n        word = map(int, line.split(\",\"))\n        syori(sorted(word))\n\ndef syori(word):\n    flag = [0,0]\n    if sum(word[1:5]) == 46:\n        word.append(int(word[0]))\n        del word[0]\n\n    if word == [10,11,12,13,1]:\n        print \"straight\"\n        \n    else:\n        for j in xrange(1,14):\n            if word.count(j) == 2:\n                flag[0] += 1\n            elif word.count(j) == 3:\n                flag[1] += 1\n            elif word.count(j) == 4:\n                print \"four card\"\n                flag = [10,10]\n                break\n            elif word[0] + 2 == word[1] + 1 == word[2] == word[3] - 1 == word[4] - 2:\n                print \"straight\"\n                flag = [10,10]\n                break\n\n        if flag[0] == flag[1] == 1:\n            print \"full house\"\n        elif flag[0] == 1:\n            print \"one pair\"\n        elif flag[0] == 2:\n            print \"two pair\"\n        elif flag[1] == 1:\n            print \"three card\"\n        elif flag[0] < 1 or flag[1] < 1:\n            print \"null\"\n\nif __name__ == \"__main__\":\n    inp()\n   "
  },
  {
    "language": "Python",
    "code": "import sys\nHAND=[\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"]\nfor line in sys.stdin.readlines():\n    cards=sorted(map(int,line.strip().split(\",\")))\n    switch=len(set(cards))\n    ma=max([cards.count(i) for i in cards])\n    if switch==4:print HAND[1]\n    elif switch==3:\n        if ma==2:print HAND[2]\n        else:print HAND[3]\n    elif switch==2:\n        if ma==4:print HAND[6]\n        else:print HAND[5]\n    else:\n        if cards==[1,10,11,12,13] or len(set([cards[i+1]-cards[i] for i in xrange(4)]))==1:print HAND[4]\n        else:print HAND[0]"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\ndef is_strait(_cnt):\n    f = 0\n    for i in range(14):\n        if _cnt[(i % 13) + 1] == 1:\n            f += 1\n            if f == 5:\n                return True\n        else:\n            f = 0\n    return False\n\ntry:\n    while 1:\n        cnt = Counter(map(int,input().split(',')))\n        mc = cnt.most_common(2)\n        if mc[0][1] == 4:\n            print('four card')\n        elif mc[0][1] == 3 and mc[1][1] == 2:\n            print('full house')\n        elif mc[0][1] == 3:\n            print('three card')\n        elif mc[0][1] == mc[1][1] == 2:\n            print('two pair')\n        elif mc[0][1] == 2:\n            print('one pair')\n        elif is_strait(cnt):\n            print('straight')\n        else:\n            print('null')\nexcept:\n    pass"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n###\n### for python program\n###\n\nimport sys\nimport math\n\n# math class\nclass mymath:\n    ### pi\n    pi = 3.14159265358979323846264338\n\n    ### Prime Number\n    def pnum_eratosthenes(self, n):\n        ptable = [0 for i in range(n+1)]\n        plist = []\n\n        for i in range(2, n+1):\n            if ptable[i]==0:\n                plist.append(i)\n                for j in range(i+i, n+1, i):\n                    ptable[j] = 1\n        return plist\n\n    def pnum_check(self, n):\n        if (n==1):\n            return False\n        elif (n==2):\n            return True\n        else:\n            for x in range(2,n):\n                if(n % x==0):\n                    return False\n            return True\n\n    ### GCD\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a%b)\n\n    ### LCM\n    def lcm(self, a, b):\n        return (a*b)//self.gcd(a,b)\n\n    ### Mat Multiplication\n    def mul(self, A, B):\n        ans = []\n        for a in A:\n            c = 0\n            for j, row in enumerate(a):\n                c += row*B[j]\n            ans.append(c)\n        return ans\n    \n    ### intチェック\n    def is_integer(self, n):\n        try:\n            float(n)\n        except ValueError:\n            return False\n        else:\n            return float(n).is_integer()\n\n    ### 幾何学問題用\n    def dist(self, A, B):\n        d = 0\n        for i in range(len(A)):\n            d += (A[i]-B[i])**2            \n        d = d**(1/2)\n        return d\n\n    ### 絶対値\n    def abs(self, n):\n        if n >= 0:\n            return n\n        else:\n            return -n   \n\nmymath = mymath()\n\n### output class\nclass output:\n    ### list\n    def list(self, l):\n        l = list(l)\n        #print(\" \", end=\"\")\n        for i, num in enumerate(l):\n            print(num, end=\"\")\n            if i != len(l)-1:\n                print(\" \", end=\"\")\n        print()\n\noutput = output()\n\n### input sample\n#i = input()\n#N = int(input())\n#A, B, C = [x for x in input().split()]\n#N, K = [int(x) for x in input().split()]\n#inlist = [int(w) for w in input().split()]\n\n#R = float(input())\n#A.append(list(map(int,input().split())))\n\n#for line in sys.stdin.readlines():\n#    x, y = [int(temp) for temp in line.split()]\n\n#abc list\n#abc = [chr(ord('a') + i) for i in range(26)]\n\n### output sample\n# print(\"{0} {1} {2:.5f}\".format(A//B, A%B, A/B))\n# print(\"{0:.6f} {1:.6f}\".format(R*R*math.pi,R*2*math.pi))\n# print(\" {}\".format(i), end=\"\")\n\ndef printA(A):\n    N = len(A)\n    for i, n in enumerate(A):\n        print(n, end='')\n        if i != N-1:\n            print(' ', end='')\n    print()\n\n# リスト内包表記 ifあり\n# [x-k if x != 0 else x for x in C]\n\n# ソート（代入する必要なし）\n# N.sort()\n\n# 10000個の素数リスト\n# P = mymath.pnum_eratosthenes(105000)\n\ndef get_input():\n    N = []\n    while True:\n        try:\n            #N.append(input())\n            #N.append(int(input()))\n            #N.append(float(input()))\n            #N.append([int(x) for x in input().split()])\n            N.append([int(x) for x in input().split(',')])\n        except EOFError:\n            break\n    return N\n\n### 0038\n\nD = get_input()\n\nfor d in D:\n    ans = \"null\"\n    \n    L = [0 for x in range(13)]\n    for i in d:\n        L[i-1] += 1\n\n    if 4 in L:\n        ans = \"four card\"\n    elif 3 in L:\n        if 2 in L:\n            ans = \"full house\"\n        else:\n            ans = \"three card\"\n    elif 2 in L:\n        if L.count(2)==2:\n            ans = \"two pair\"\n        else:\n            ans = \"one pair\"\n    else:\n        d.sort()\n        d = [x-min(d) for x in d]\n        if d == [0,1,2,3,4]:\n            ans = \"straight\"\n        elif d == [0,9,10,11,12]:\n            ans = \"straight\"\n    \n    print(ans)\n"
  },
  {
    "language": "Python",
    "code": "import collections\n\ndef judge(card, cnt):\n    nmax = cnt[0][1]\n    if nmax == 4: return \"four card\"\n    if nmax == 3: return \"full house\" if cnt[1][1] == 2 else \"three card\"\n    if nmax == 2: return \"two pair\" if cnt[1][1] == 2 else \"one pair\"\n    if (card[0] == 1 and list(range(10, 14)) == card[1:]) or list(range(card[0], card[0] + 5)) == card : return \"straight\"\n\n    return \"null\"\nwhile True:\n    try:\n        card = list(map(int, input().split(\",\")))\n    except:\n        break\n    cnt = collections.Counter(card)\n    print(judge(sorted(card), sorted(cnt.items(), key = lambda x:-x[1])))\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\npoker = [\"0\", \"null\", \"one pair\", \"two pair\", \"three card\", \"straight\", \"full house\", \"four card\"]\nfor line in sys.stdin:\n    H = map(int, line.split(','))\n    H.sort()\n    if H[0] == H[1] == H[2] == H[3] or H[1] == H[2] == H[3] == H[4]:\n        print poker[7]\n    elif H[0] == H[1] or H[1] == H[2] or H[2] == H[3] or H[3] == H[4]:\n        if H[0] == H[1] == H[2] or H[1] == H[2] == H[3] or H[2] == H[3] == H[4]:\n            if H[0] == H[1] and H[2] == H[3] == H[4] or H[0] == H[1] == H[2] and H[3] == H[4]:\n                print poker[6]\n            else:\n                print poker[4]\n        else:\n            if H[0] == H[1] and H[2] == H[3] or H[0] == H[1] and H[3] == H[4] or H[1] == H[2] and H[3] == H[4]:\n                print poker[3]\n            else:\n                print poker[2]\n    else:\n        if H[0] == 1:\n            H[0] += 13\n            H.sort()\n        if H[0]+1 == H[1] and H[1]+1 == H[2] and H[2]+1 == H[3] and H[3]+1 == H[4]:\n            print poker[5]\n        else:\n            print poker[1]"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        Size = []\n        Card_Lis = list(map(int,input().split(\",\")))\n        Card_Lis.sort()\n        \n        \n        for tag in sorted(set(Card_Lis), key=Card_Lis.index):\n            Size.append(Card_Lis.count(tag))\n       \n        Size.sort()\n\n        if max(Size) == 4:\n            print(\"four card\")\n        elif Size == [2,3]:\n            print(\"full house\")\n        elif max(Size) == 3:\n            print(\"three card\")\n        elif Size == [1,2,2]:\n            print(\"two pair\")\n        elif max(Size) == 2:\n            print(\"one pair\")\n        elif max(Size) == 1:\n            if Card_Lis[0] == 1:\n                if Card_Lis == [1,2,3,4,5] or Card_Lis == [1,10,11,12,13]:\n                    print(\"straight\")\n                else:\n                    print(\"null\")\n            elif Card_Lis[0] + 4 == Card_Lis[4]:\n                    print(\"straight\")\n            else:\n                print(\"null\")\n            \n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\nimport sys\n\nfor t in sys.stdin:\n    l=sorted(map(int,t[:-1].split(\",\")))\n    s=False\n    p1=Counter(l)\n    p2=Counter(p1.values())\n\n    if 3 in p2 and 2 in p2:\n        print(\"full house\")\n    elif 2 in p2:\n        if p2[2]==1:\n            print(\"one pair\")\n        elif p2[2]==2:\n            print(\"two pair\")\n    elif 3 in p2:\n        print(\"three card\")\n    elif 4 in p2:\n        print(\"four card\")\n    else:\n        for i in range(1,10):\n            if list(range(i,i+5))==l:\n                print(\"straight\")\n                s=True\n                break\n        if [1,10,11,12,13]==i:\n            print(\"straight\")\n            s=True\n        if not s:\n            print(\"null\")\n\n"
  },
  {
    "language": "Python",
    "code": "from itertools import permutations\nimport sys\nimport os\n\ndef inini(_card):\n    for i in range(len(_card)):\n        _card[i] = 0\n\n\ndef main():\n    for s in sys.stdin:\n            card = 14*[0]\n            inini(card)\n            number = list(map(int,s.split(',')))\n            for v in number:\n                card[v] += 1\n            one_pair = 0\n            tree_card = 0\n            four_card = 0\n            for value in sorted(set(number),key=number.index):\n                if card[value] == 2:\n                    one_pair += 1\n                elif card[value] == 3:\n                    tree_card += 1\n                elif card[value] == 4:\n                    four_card += 1\n            number.sort()\n            if one_pair == 1 and tree_card ==1:\n                print('full house')       \n            elif one_pair == 1:\n                print('one pair') \n            elif one_pair == 2:\n                print('two pair')\n            elif tree_card == 1:\n                print('three card')   \n            elif four_card == 1:\n                print('four card')\n            elif number[0] == number[1]-1 == number[2]-2 == number[3]-3 == number[4]-4:\n                print('straight')\n            elif number[0] == 1 and number[1] == 10 and number[2] == 11 and number[3] == 12 and number[4] == 13:\n                print('straight')\n            else:\n                print('null')\n                \n            \n\n       \nif __name__ == '__main__':\n    main()\n"
  },
  {
    "language": "Python",
    "code": "def yaku(N):\n    n=N[0]\n    li=[]\n    for i in range(5):\n        li.append(n)\n        n +=1\n    if N==li or N==[1,10,11,12,13]:\n        print(\"straight\")\n        return\n    mp={}\n    count_2=0\n    count_3=0\n    for i in N:\n        if i in mp:\n            mp[i] +=1\n        else:\n            mp[i]=1\n    co=0\n    for k,v in mp.items():\n        if v!=1:\n            if v==2:\n                count_2 +=1\n            elif v==3:\n                count_3 +=1\n            else:\n                print(\"four card\")\n                return\n        else:\n            co +=1\n            if co==5:\n                print(\"null\")\n                return\n    if count_2==1 and count_3==1:\n        print(\"full house\")\n    elif count_3==1:\n        print(\"three card\")\n    elif count_2==2:\n        print(\"two pair\")\n    elif count_2==1:\n        print(\"one pair\")\n        \nwhile True:\n    try:\n        N=sorted(list(map(int,input().split(\",\"))))\n        yaku(N)\n    except:break\n\n"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\tprint(A)\n\t#4card\n\tif A[0]==A[3] or A[1]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[4]) or (A[0]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#three card\n\telif A[0]==A[2] or A[1]==A[3] or A[2]==A[4]:\n\t\tprint(\"three card\")\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[0]==A[1] and A[3]==A[4]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\t#straight A?????????\n\telif A==[1,10,11,12,13]:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(int,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\n#カードを引数に取って答えを出力する\ndef put_ans(cards):\n  cards.sort()\n\n  #10 ~ Aのストレート\n  if cards == [1, 10, 11, 12, 13]:\n    print(\"straight\")\n    return\n\n  #それ以外のストレート\n  for i in range(1,len(cards)):\n    if cards[i] - cards[i - 1] != 1:\n      break\n  else:\n    print(\"straight\")\n    return\n  \n  #result...カードの枚数の降順リスト\n  result = [t[1] for t in Counter(cards).most_common()]\n\n  if result == [1,1,1,1,1]:\n    print(\"null\")\n  if result == [2,1,1,1]:\n    print(\"one pair\")\n  if result == [2,2,1]:\n    print(\"two pair\")\n  if result == [3,1,1]:\n    print(\"three card\")\n  if result == [3, 2]:\n    print(\"full house\")\n  if result == [4, 1]:\n    print(\"four card\")\n\ndef main():\n  while True:\n    try:\n      cards = list(map(int, input().split(\",\")))\n      put_ans(cards)\n  \n    except EOFError:\n      break\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "while(1):\n    try:\n        a = [int(i) for i in input().split(\",\")]\n        a.sort()\n        pairs = []\n        for i in set(a):\n            count = 0\n            for j in a:\n                if j == i:\n                    count += 1\n            pairs.append(count)\n        if 5 in pairs:\n            print(\"full house\")\n        elif 4 in pairs:\n            print(\"four card\")\n        elif 3 in pairs and 2 in pairs:\n            print(\"full house\")\n        elif 3 in pairs:\n            print(\"three card\")\n        elif pairs.count(2) == 2:\n            print(\"two pair\")\n        elif 2 in pairs:\n            print(\"one pair\")\n        elif [a[i+1] - a[i] for i in range(4)] == [1 for i in range(4)] or a == [1,10,11,12,13]:\n            print(\"straight\")\n        else:\n            print(\"null\")\n    except EOFError:\n        break\n"
  },
  {
    "language": "Python",
    "code": "import collections\n\ndef solution1(kard):\n    #強いものから順に探していく\n    if fourcard(kard):\n        print(\"four card\")\n    elif fullhouse(kard):\n        print(\"full house\")\n    elif straight(kard):\n        print(\"straight\")\n    elif threecard(kard):\n        print(\"three card\")\n    elif twopair(kard):\n        print(\"two pair\")\n    elif onepair(kard):\n        print(\"one pair\")\n    else:\n        print(\"null\")\n\ndef fourcard(kard):\n    if kard.count(kard[0])==4 or kard.count(kard[1])==4:\n        return True\n    else:\n        return False\n\ndef fullhouse(kard):\n    list=collections.Counter(kard)\n    if len(list)==2:\n        return True\n    else:\n        return False\n\ndef straight(kard):\n    c=sorted(kard,reverse=True)\n    if c[0]==(c[1]+1)==(c[2]+2)==(c[3]+3)==(c[4]+4) or (c[0]==(c[1]+1)==(c[2]+2)==(c[3]+3) and c[4]==1 and c[0]==13):\n        return True\n    else:\n        return False\n    \n\ndef threecard(kard):\n    if kard.count(kard[0])==3 or kard.count(kard[1])==3 or kard.count(kard[2])==3:\n        return True\n    else:\n        return False\n    \ndef twopair(kard):\n    list=collections.Counter(kard)\n    if len(list)==3:\n        return True\n    else:\n        return False\n\ndef onepair(kard):\n    list=collections.Counter(kard)\n    if len(list)==4:\n        return True\n    else:\n        return False\n\n\nwhile True:\n    try:\n        kard=list(map(int,input().split(\",\")))\n    except:\n        break\n    solution1(kard)\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\n\nfrom sys import stdin\nfrom collections import Counter\n\n\nfor line in stdin:\n    L = sorted([int(s) for s in line.split(',')])\n    cnt = Counter(L)\n    length, num = len(cnt), cnt.most_common(1)[0][1]\n    if length == 4 and num == 2:\n        print('one pair')\n    elif length == 3 and num == 2:\n        print('two pair')\n    elif length == 3 and num == 3:\n        print('three card')\n    elif length == 2 and num == 3:\n        print('full house')\n    elif length == 2 and num == 4:\n        print('four card')\n    elif L[0] == L[1]-1 == L[2]-2 == L[3]-3 == L[4]-4:\n        print('straight')\n    elif L[0] == 1 and L[1]-1 == L[2]-2 == L[3]-3 == L[4]-4:\n        print('straight')\n    else:\n        print('null')"
  },
  {
    "language": "Python",
    "code": "while True:\n\ttry:\n\t\tnums = [0 for x in xrange(13)]\n\t\thands = map(int,raw_input().split(','))\n\t\tfor val in hands: nums[val-1] += 1\n\t\tif 4 in nums: print 'four card'\n\t\telse:\n\t\t\tif 3 in nums:\n\t\t\t\tif 2 in nums: print 'full house'\n\t\t\t\telse: print 'four card'\n\t\t\telse:\n\t\t\t\tif nums.count(2) == 2: print 'two pair'\n\t\t\t\telif nums.count(2) == 1: print 'one pair'\n\t\t\t\telse:\n\t\t\t\t\thands2 = ''\n\t\t\t\t\tfor val in xrange(14): hands2 += str(nums[val%13])\n\t\t\t\t\tif '11111' in hands2: print 'straight'\n\t\t\t\t\telse: print 'null'\n\texcept: break"
  },
  {
    "language": "Python",
    "code": "N = 13\nwhile True:\n    try:\n        A = list(map(int,input().split(',')))\n    except EOFError:\n        break\n    flag = False\n    for i in range(1,N + 1):\n        if A.count(i) == 4:\n            flag = True\n            print('four card')\n            break\n    if flag:\n        continue\n    for i in range(1,N + 1):\n        for j in range(1,N + 1):\n            if i == j:\n                continue\n            if A.count(i) == 3 and A.count(j) == 2:\n                flag = True\n                print('full house')\n                break\n        if flag:\n            break\n    if flag:\n        continue\n    for i in range(1,11):\n        cnt = 0\n        for j in range(0,5):\n            if i + j == 14:\n                cnt += A.count(1) > 0\n            else:\n                cnt += A.count(i + j) > 0\n        if cnt == 5:\n            flag = True\n            print('straight')\n            break\n    if flag:\n        continue\n    for i in range(1,N + 1):\n        if A.count(i) == 3:\n            flag = True\n            print('three card')\n            break\n    if flag:\n        continue\n    for i in range(1,N + 1):\n        for j in range(1,N + 1):\n            if i == j:\n                continue\n            if A.count(i) == 2 and A.count(j) == 2:\n                flag = True\n                print('two pair')\n                break\n        if flag:\n            break\n    if flag:\n        continue\n    for i in range(1,N + 1):\n        if A.count(i) == 2:\n            flag = True\n            print('one pair')\n            break\n    if flag:\n        continue\n    print('null')"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1] or card_lis == [1,2,3,4,5]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n                \nfor line in sys.stdin.readlines():\n    card_lis = [int(char) for char in line.split(',')]\n    heaven()"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\n\ndef is_four_card(d):\n    return 4 in d.values()\n\n\ndef is_full_house(d):\n    return 3 in d.values() and 2 in d.values()\n\n\ndef is_straight(d):\n    flag = [False, 0]\n    for i in d.values():\n        if flag[0] == True and flag[1] == 5:\n            return True\n\n        if i == 1:\n            flag[0] = True\n            flag[1] += 1\n    return False\n\n\ndef is_three_card(d):\n    return 3 in d.values()\n\n\ndef is_two_pair(d):\n    return list(d.values()).count(2) == 2\n\n\ndef is_one_pair(d):\n    return list(d.values()).count(2) == 1\n\n\ndef judge(d):\n    if is_four_card(d):\n        print('four card')\n    elif is_full_house(d):\n        print('full house')\n    elif is_straight(d):\n        print('straight')\n    elif is_three_card(d):\n        print('three card')\n    elif is_two_pair(d):\n        print('two pair')\n    elif is_one_pair(d):\n        print('one pair')\n    else:\n        print('null')\n\n\ndef solve(cards):\n    d = {k: 0 for k in range(1, 14)}\n    for card in cards:\n        d[card] += 1\n    judge(d)\n\n_input = input().split(\",\")\nsolve(_input)"
  },
  {
    "language": "Python",
    "code": "def yaku(card):\n    table=[0]*13\n    for i in range(5):\n        table[card[i]-1]+=1\n    if table.count(4)!=0:\n        return \"four card\"\n    elif table.count(3)!=0:\n        if table.count(2)!=0:\n            return \"full house\"\n        else:\n            return \"three card\"\n    elif table.count(2)!=0:\n        if table.count(2)==2:\n            return \"two pair\"\n        else:\n            return \"one pair\"\n    else:\n\n        if \",\".join(map(str,card)) in (\"1,2,3,4,5,6,7,8,9,10,11,12,13\" or \"1,10,11,12,13\"):\n            return \"straight\"\n        else:\n            return \"null\"\nwhile True:\n    try:\n        card=map(int,raw_input().split(\",\"))\n        card.sort()\n        print yaku(card)\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "import fileinput\nfrom collections import Counter\n\nfor line in fileinput.input():\n    if line == \"\\n\":\n        break\n    else:\n        card = [c for c in line.rstrip().split(\",\")]\n        card_num = [int(c) for c in line.rstrip().split(\",\")]\n        card_sort = sorted(card_num)\n        counter = Counter(card)\n        card_type = counter.most_common()\n        if card_type[0][1] == 4:\n            print(\"four card\")\n        elif card_type[0][1] == 3:\n            if card_type[1][1] == 2:\n                print(\"full house\")\n            else:\n                print(\"three card\")\n        elif card_type[0][1] == 2:\n            if card_type[1][1] == 2:\n                print(\"two pair\")\n            else:\n                print(\"one pair\")\n        elif card_sort == [1, 10, 11, 12, 13]:\n            print(\"straight\")\n        else:\n            for i in range(1, 5):\n                if card_sort[0] + i == card_sort[i]:\n                    f = \"ok\"\n                else:\n                    f = \"no\"\n                    break\n            if f == \"ok\":\n                print(\"straight\")\n            else:\n                print(\"nule\")"
  },
  {
    "language": "Python",
    "code": "try:\n    while True:\n        a = sorted(map(int, raw_input().split(',')))\n        if a.count(a[2]) == 4:\n            print 'four card'\n        elif a.count(a[1]) + a.count(a[-2]) == 5:\n            print 'full house'\n        elif a == range(a[0], a[0] + 5) or a == [1, 10, 11, 12, 13]:\n            print 'straight'\n        elif a.count(a[2]) == 3:\n            print 'three card'\n        elif a.count(a[1]) == 2 and a.count(a[-2]) == 2:\n            print 'two pair'\n        elif len(set(a)) == 4:\n            print 'one pair'\n        else:\n            print 'null'\nexcept EOFError:\n    pass"
  },
  {
    "language": "Python",
    "code": "#encoding=utf-8\n\nimport sys\n\ndef inp():\n    word = []\n    for line in sys.stdin:\n        word = map(int, line.split(\",\"))\n        syori(sorted(word))\n\ndef syori(word):\n    flag = [0,0]\n    if sum(word[1:5]) == 46:\n        word.append(int(word[0]))\n        del word[0]\n\n    if word == [10,11,12,13,1]:\n        print \"straight\"\n        \n    else:\n        for j in xrange(1,14):\n            if word.count(j) == 2:\n                flag[0] += 1\n            elif word.count(j) == 3:\n                flag[1] += 1\n            elif word.count(j) == 4:\n                print \"four card\"\n                flag = [10,10]\n                break\n            elif word[0] + 2 == word[1] + 1 == word[2] == word[3] - 1 == word[4] - 2:\n                print \"straight\"\n                flag = [10,10]\n                break\n\n        if flag[0] == flag[1] == 1:\n            print \"full house\"\n        elif flag[0] == 1:\n            print \"one pair\"\n        elif flag[0] == 2:\n            print \"two pair\"\n        elif flag[1] == 1:\n            print \"three pair\"\n        elif flag[0] < 1 or flag[1] < 1:\n            print \"null\"\n\nif __name__ == \"__main__\":\n    inp()\n   "
  },
  {
    "language": "Python",
    "code": "import sys\nfrom collections import Counter\n\nstraight = [list(range(i, i+5)) for i in range(1, 10)] + [[1,10,11,12,13]]\n\ndef hantei(hand):\n\tl = sorted(Counter(hand).values(), reverse=True)\n\tif l[0] == 4: return \"four card\"\n\tif l[0] == 3 and l[1] == 2: return \"full house\"\n\tif hand in straight: return \"straight\"\n\tif l[0] == 3: return \"three card\"\n\tif l[0] == l[1] == 2: return \"two pair\"\n\tif l[0] == 2: return \"one pair\"\n\treturn \"null\"\n\nfor line in sys.stdin:\n\thand = sorted(map(int, line.split(',')))\n\tprint(hantei(hand))"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1] or card_lis == [1,2,3,4,5]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\nfor input_line in sys.stdin:\n    card_lis = [int(char) for char in input_line.split(',')]\n    heaven()"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:\n        l=map(int,raw_input().split(','))\n        l.sort()\n        if l.count(l[0])==4 or l.count(l[4])==4:\n            print 'four card'\n        elif (l.count(l[0])==2 and l.count(l[4])==3) or (l.count(l[0])==3 and l.count(l[4])==2):\n            print 'full house'\n        elif l[0]==(l[1]-1)==(l[2]-2)==(l[3]-3)==(l[4]-4):\n            print 'straight'\n        elif l.count(l[0])==3 or l.count(l[4])==3:\n            print 'three card'\n        elif l.count(l[1])==2 and l.count(l[3])==2:\n            print 'two pair'\n        elif len(set(l))==4:\n            print 'one pair'\n        else:\n            print 'null'\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\ndef is_strait(_cnt):\n    f = 0\n    for i in range(1, 14):\n        if _cnt[(i % 13) + 1] == 1:\n            f += 1\n            if f == 5:\n                return True\n        elif f > 0 or _cnt[(i % 13) + 1] > 1:\n            return False\n    return False\n\ntry:\n    while 1:\n        cnt = Counter(map(int,input().split(',')))\n        mc = cnt.most_common(2)\n        if mc[0][1] == 4:\n            print('four card')\n        elif mc[0][1] == 3 and mc[1][1] == 2:\n            print('full house')\n        elif mc[0][1] == 3:\n            print('three card')\n        elif mc[0][1] == mc[1][1] == 2:\n            print('two pair')\n        elif mc[0][1] == 2:\n            print('one pair')\n        elif is_strait(cnt):\n            print('straight')\n        else:\n            print('null')\nexcept:\n    pass"
  },
  {
    "language": "Python",
    "code": "def heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1] or card_lis == [1,2,3,4,5]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\nwhile True:\n    try:\n        card_lis = [int(char) for char in raw_input().split(',')]\n        heaven()\n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "while True : \n    try :\n        temp = [int(_) for _ in input().split(',')]\n        length = len(set(temp))\n        \n        if length == 2 :\n            if temp.count(temp[0]) == 1 or temp.count(temp[0]) == 4 : print('four card')\n            else : print('full house')\n        elif length == 3 :\n            for _ in set(temp) :\n                if temp.count(_) == 2 :\n                    print('two pair')\n                    break\n                elif temp.count(_) == 3 :\n                    print('three card')\n                    break\n        elif length == 4 : print('one pair')\n        else : \n            temp.sort(reverse = True)\n            test = [(temp[0] - _) for _ in range(5)]\n            if temp == test or temp == [13, 12, 11, 10, 1] : print('straight')\n            else : print('null')\n    except :\n        break"
  },
  {
    "language": "Python",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[1] == p[2] and p[3] == p[4]) or (p[0] == [1] and p[2] == p[3] == p[4]):\n\t\tprint('full house')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif p[0] == p[1] or p[1] == p[2] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif p[0] == p[1]-1 and p[1] == p[2]-1 and p[2] == p[3]-1 and p[3] == p[4]-1 and p[4] == p[3]+1:\n\t\tprint('straight')\n\telif p[0] == 1 and p[1] == 10 and p[2] == 11 and p[3] == 12 and p[4] == 13:\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\t#4card\n\tif A[0]==A[1]==A[2]==A[3] or A[1]==A[2]==A[3]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[3]==A[4]) or (A[0]==A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#straight A?????????\n\telif A[0]==1 and A[1]==10 and A[2]==11 and A[3]==12 and A[4]==13:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\t#threee\n\telif A[0]==A[1]==A[2] or A[1]==A[2]==A[3] or A[2]==A[3]==A[4]:\n\t\tprint(\"three card\")\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(int,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem 0038: Poker Hand\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef is_straight(hand):\n    if hand == [1, 10, 11, 12, 13]:\n        return True\n    m = min(hand)\n    if hand == list(range(m, m + 5)):\n        return True\n    return False\n\n\ndef poker_hand(hand):\n    hand = sorted(hand)\n    counts = {}\n    for card in hand:\n        counts[card] = counts.get(card, 0) + 1\n    counts = sorted(list(counts.values()))\n    if counts == [1, 4]:\n        return \"four card\"\n    elif counts == [2, 3]:\n        return \"full house\"\n    elif is_straight(hand):\n        return \"straight\"\n    elif counts == [1, 1, 3]:\n        return \"three card\"\n    elif counts == [1, 2, 2]:\n        return \"two pair\"\n    elif counts == [1, 1, 1, 2]:\n        return \"one pair\"\n    else:\n        return \"null\"\n\n\nwhile True:\n    try:\n        hand = [int(_) for _ in input().split(',')]\n    except EOFError:\n        break\n    print(poker_hand(hand))"
  },
  {
    "language": "Python",
    "code": "while True:\n\ttry:\n\t\tnums = [0 for x in xrange(13)]\n\t\thands = map(int,raw_input().split(','))\n\t\tfor val in hands: nums[val-1] += 1\n\t\tif 4 in nums: print 'four card'\n\t\telse:\n\t\t\tif 3 in nums:\n\t\t\t\tif 2 in nums: print 'full house'\n\t\t\t\telse: print 'three card'\n\t\t\telse:\n\t\t\t\tif nums.count(2) == 2: print 'two pair'\n\t\t\t\telif nums.count(2) == 1: print 'one pair'\n\t\t\t\telse:\n\t\t\t\t\thands2 = ''\n\t\t\t\t\tfor val in xrange(14): hands2 += str(nums[val%13])\n\t\t\t\t\tif '11111' in hands2: print 'straight'\n\t\t\t\t\telse: print 'null'\n\texcept: break"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1] or card_lis == [1,2,3,4,5] or card_lis == [11,12,10,1,13]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\nfor input_line in sys.stdin:\n    card_lis = [int(char) for char in input_line.split(',')]\n    heaven()"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nprize=[\"null\",\"one pair\",\"two pair\",\"three card\",\n        \"straight\",\"full house\",\"four card\"]\n\nfor line in stdin:\n    hand = map(int,line.split(\",\"))\n    x = sorted(list(set(hand)))\n    a = len(x)\n    b = max([hand.count(e) for e in x])\n    if b==4: p=6\n    elif b==3:\n        if a==2: p=5\n        else: p=3\n    elif b==2:\n        if a==3: p=2\n        else: p=1\n    elif b==1:\n        e = x[0]\n        if x==[1,10,11,12,13] or x==range(e,e+5): p=4\n        else: p=0\n    print prize[p]"
  },
  {
    "language": "Python",
    "code": "import sys\nHAND=[\"null\",\"one pair\",\"two pair\",\"three card\",\"straight\",\"full house\",\"four card\"]\nfor line in sys.stdin.readlines():\n    cards=sorted(map(int,line.strip().split(\",\")))\n    switch=len(set(cards))\n    ma=cards.count(max(cards,key=lambda c:cards.count(c)))\n    if switch==4:print HAND[1]\n    elif switch==3:\n        if ma==2:print HAND[2]\n        else:print HAND[3]\n    elif switch==2:\n        if ma==4:print HAND[6]\n        else:print HAND[5]\n    else:\n        if cards==[1,10,11,12,13] or len(set([cards[i+1]-cards[i] for i in xrange(4)]))==1:print HAND[4]\n        else:print HAND[0]"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\t#4card\n\tif A[0]==A[1]==A[2]==A[3] or A[1]==A[2]==A[3]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[3]==A[4]) or (A[0]==A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#straight A?????????\n\telif A[0]==1 and A[1]==10 and A[2]==11 and A[3]==12 and A[4]==13:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\t#threee\n\telif A[0]==A[1]==A[2] or A[1]==A[2]==A[3] or A[2]==A[3]==A[4]:\n\t\tprint(\"threee card\")\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(float,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\nwhile 1:\n    try:\n        hand = map(int, raw_input().split(','))\n    except EOFError:\n        break\n    count = Counter(hand).most_common()\n\n    ret = ''\n    if count[0][1] >= 4:\n        ret = 'four card'\n    elif len(count) >= 2 and count[0][1] == 3 and count[1][1] == 2:\n        ret = 'full house'\n    elif len(count) == 5:\n        sort_hand = sorted(hand)\n        for i in xrange(4):\n            if sort_hand[i] + 1 != sort_hand[i + 1]:\n                break\n        else:\n            ret = 'straight'\n        if sort_hand == [1, 10, 11, 12, 13]:\n            ret = 'straight'\n    elif len(count) == 3 and count[0][1] == 3:\n        ret = 'three card'\n    elif len(count) == 3 and count[0][1] == count[1][1] == 2:\n        ret = 'two pair'\n    elif len(count) == 4:\n        ret = 'one pair'\n    if ret:\n        print ret\n    else:\n        print 'null'"
  },
  {
    "language": "Python",
    "code": "def readdata():\n    x = []\n    try:\n        while True:\n            x.append(map(int,raw_input().split(\",\")))\n    except: return x\n\ndef checkhand2(hand):\n    tmp = [(e+11)%13 for e in hand]\n    x1=sorted(list(set(tmp)))\n    x2=[]\n    for e in x1:\n        x2.append(tmp.count(e))\n    return x1,x2\n\ndef isstraight(x1):\n    if x1==[0,1,2,3,12]: return True\n    e = x1[0]\n    if x1==range(e,e+5): return True\n    else: return False\n\ndef checkhand(hand):\n    x1,x2 = checkhand2(hand)\n    x2 = sorted(x2)\n    prize = 0\n    if x2==[1,1,1,1,1]:\n        if isstraight(x1): prize = 4\n        else: prize = 0\n    elif x2==[1,1,1,2]: prize = 1\n    elif x2==[1,2,2]: prize = 2\n    elif x2==[1,1,3]: prize = 3\n    elif x2==[2,3]: prize = 5\n    elif x2==[1,4]: prize = 6\n    return prize\n\nvalues=[2,3,4,5,6,7,8,9,10,11,12,13,1]\nprize=[\"null\",\"one pair\",\"two pair\",\"three card\",\n        \"straight\",\"full house\",\"four card\"]\n\nhands = readdata()\nfor e in hands:\n    print prize[checkhand(e)]"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef straight(cards):\n    aa = range(1,5)\n    if cards == [1, 10, 11, 12, 13]:\n        return True\n    for i in range(1, 10):\n        if cards == range(i, i+5):\n            return True\n    return False\n\nfor s in sys.stdin.read().rstrip().split('\\n'):\n    cards = sorted(map(int, s.split(',')))\n    c = [0]*13\n    for card in cards:\n        c[card-1] += 1\n    if 4 in c:\n        print 'four card'\n    elif (3 in c) and (2 in c):\n        print 'full house'\n    elif straight(cards):\n        print 'straight'\n    elif 3 in c:\n        print 'three card'\n    elif c.count(2) == 2:\n        print 'two pair'\n    elif c.count(2) == 1:\n        print 'one pair'\n    else:\n        print 'null'"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\nimport sys\n\nfor line in sys.stdin:\n    card = sorted(list(map(int, line.split(','))))\n    pair = Counter(card).most_common()\n\n    if pair[0][1] == 4:\n        print('four card')\n    elif pair[0][1] == 3 and pair[1][1] == 2:\n        print('full house')\n    elif pair[0][1] == 3:\n        print('three card')\n    elif pair[0][1] == pair[1][1] == 2:\n        print('two pair')\n    elif pair[0][1] == 2:\n        print('one pair')\n    elif [x - card[0] for x in card] == [0,1,2,3,4] or card == [1,10,11,12,13]:\n        print('straight')\n    else:\n        print('null')"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=sorted(map(int,e.split(',')))\n print([['null','straight'][e[0]*9<e[1]or e[4]-e[0]<5],'one pair','two pair','three card','full house',0,'four card'][sum(e.count(s)for s in e)//2-2])\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n\ttry: p=sorted(list(map(int,input().split(','))))\n\texcept: break\n\tif (p[0] == p[3]) or (p[1] == p[4]): \n\t\tprint('four card')\n\telif p[0] == p[2] or p[1] == p[3] or p[2] == p[4]:\n\t\tprint('three card')\n\telif (p[0] == p[1] == p[2] and p[3] == p[4]) or (p[0] == [1] and p[2] == p[3] == p[4]):\n\t\tprint('full house')\n\telif (p[0] == p[1] and p[2] == p[3]) or (p[1] == p[2] and p[3] == p[4]):\n\t\tprint('two pair')\n\telif p[0] == p[1] or p[1] == p[2] or p[3] == p[4]:\n\t\tprint('one pair')\n\telif (p[0] == p[1]-1) and (p[1] == p[2]-1) and (p[2] == p[3]-1) and (p[3] == p[4]-1) and (p[4] == p[3]+1):\n\t\tprint('straight')\n\telse:\n\t\tprint('null')\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nfor s in sys.stdin:\n    A = list(map(int, s.split(',')))\n    A.sort()\n    #print(A)\n\n    if (A[0] == A[1] == A[2] == A[3]) or (A[1] == A[2] == A[3] == A[4]):\n        print('four card')\n\n    # full house\n    elif (A[0] == A[1] == A[2]) and (A[3] == A[4]):\n        print('full house')\n    elif (A[0] == A[1]) and (A[2] == A[3] == A[4]):\n        print('full house')\n\n    # straight\n    elif A[0] == A[1] - 1 == A[2] - 2 == A[3] - 3 == A[4] - 4:\n        print('straight')\n    elif A[1] == 10 and A[2] == 11 and A[3] == 12 and A[4] == 13 and A[0] == 1:\n        print('straight')\n\n    # three card\n    elif (A[0] == A[1] == A[2]) or (A[1] == A[2] == A[3]) or (A[2] == A[3] == A[4]):\n        print('three card')\n\n    # two pair\n    elif ((A[0] == A[1]) and (A[2] == A[3])) or ((A[0] == A[1]) and (A[3] == A[4])) or ((A[1] == A[2]) and (A[3] == A[4])):\n        print('two pair')\n\n    # one pair\n    elif (A[0] == A[1]) or (A[1] == A[2]) or (A[2] == A[3]) or (A[3] == A[4]):\n        print('one pair')\n\n    else:\n        print('null')"
  },
  {
    "language": "Python",
    "code": "while True:\n\ttry:\n\t\tnums = [0 for x in xrange(13)]\n\t\thands = map(int,raw_input().split(','))\n\t\tfor val in hands: nums[val-1] += 1\n\t\tif 4 in nums: print 'four card'\n\t\telse:\n\t\t\tif 3 in nums:\n\t\t\t\tif 2 in nums: print 'full house'\n\t\t\t\telse: print 'four card'\n\t\t\telse:\n\t\t\t\tif nums.count(2) == 2: print 'two pair'\n\t\t\t\telif nums.count(2) == 1: print 'one pair'\n\t\t\t\telse:\n\t\t\t\t\thands2 = str(nums[12])\n\t\t\t\t\tfor val in nums: hand2 += str(val)\n\t\t\t\t\tif '11111' in hands2: print 'straight'\n\t\t\t\t\telse: print 'null'\n\texcept: break"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        card_lis.sort()\n        if card_lis == [1,10,11,12,13]:\n            print 'straight'\n        else:\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\nfor input_line in sys.stdin:\n    card_lis = [int(char) for char in input_line.split(',')]\n    heaven()"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n        hand = map(int, raw_input().split(\",\"))\n        kind = list(set(hand))\n        rank =[]\n        for card in kind:\n            rank.append(hand.count(card))\n            rank.sort()\n            rank.reverse()\n        if rank[0] == 4:\n            print \"four card\"\n        elif rank[0] == 3:\n            if rank[1] == 2:\n                print \"hull house\"\n            else:\n                print \"three card\"\n        elif rank[0] == 2:\n            if rank[1] == 2:\n                print \"two pair\"\n            else:\n                print \"one pair\"\n        else:\n            hand.sort()\n            if hand[4] - hand[0] == 4 or (hand[0] == 1 and hand[1] == 10):\n                print \"straight\"\n            else:\n                print \"null\"\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "from itertools import permutations\n\ndef inini(_card):\n    for i in range(len(_card)):\n        _card[i] = 0\n\n\ndef main():\n    while True:\n        try:\n            card = 14*[0]\n            inini(card)\n            number = list(map(int,input().split(',')))\n            for v in number:\n                card[v] += 1\n            one_pair = 0\n            tree_card = 0\n            four_card = 0\n            flag = 0\n            for value in sorted(set(number),key=number.index):\n                if card[value] == 2:\n                    one_pair += 1\n                elif card[value] == 3:\n                    tree_card += 1\n                elif card[value] == 4:\n                    four_card += 1\n            if one_pair == 1 and tree_card ==1:\n                print('full house')\n                flag = 777        \n            elif one_pair == 1:\n                print('one pair')\n                flag = 777\n            elif one_pair == 2:\n                print('two pair')\n                flag = 777\n            elif tree_card == 1:\n                print('tree card')\n                flag = 777\n            elif four_card == 1:\n                print('four card')\n                flag = 777\n            straight = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10],[7,8,9,10,11],[8,9,10,11,12],[9,10,11,12,13],[10,11,12,13,1]]\n            for s_list in straight:\n                number.sort()\n                if number[0] == 1 and number[4] == 13:\n                    number.append(1)\n                    number.pop(0)\n                if number == s_list:\n                    print('straight')\n                    flag = 777\n                    break\n            if flag == 0:\n                print('null')\n        except EOFError:\n            break\n\n  \n\n       \nif __name__ == '__main__':\n    main()\n"
  },
  {
    "language": "Python",
    "code": "from itertools import permutations\nimport sys\nimport os\n\ndef inini(_card):\n    for i in range(len(_card)):\n        _card[i] = 0\n\n\ndef main():\n    for s in sys.stdin:\n            card = 14*[0]\n            inini(card)\n            number = list(map(int,s.split(',')))\n            for v in number:\n                card[v] += 1\n            one_pair = 0\n            tree_card = 0\n            four_card = 0\n            flag = 0\n            for value in sorted(set(number),key=number.index):\n                if card[value] == 2:\n                    one_pair += 1\n                elif card[value] == 3:\n                    tree_card += 1\n                elif card[value] == 4:\n                    four_card += 1\n            if one_pair == 1 and tree_card ==1:\n                print('full house')\n                flag = 777        \n            elif one_pair == 1:\n                print('one pair')\n                flag = 777\n            elif one_pair == 2:\n                print('two pair')\n                flag = 777\n            elif tree_card == 1:\n                print('tree card')\n                flag = 777\n            elif four_card == 1:\n                print('four card')\n                flag = 777\n            straight = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10],[7,8,9,10,11],[8,9,10,11,12],[9,10,11,12,13],[10,11,12,13,1]]\n            for s_list in straight:\n                number.sort()\n                if number[0] == 1 and number[4] == 13:\n                    number.append(1)\n                    number.pop(0)\n                if number == s_list:\n                    print('straight')\n                    flag = 777\n                    break\n            if flag == 0:\n                print('null')\n\n       \nif __name__ == '__main__':\n    main()\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=sorted(map(int,e.split(',')))\n n=sum(e.count(s)for s in e)-5\n print([['null','straight'][e[4]-e[0]==4 or e[0]*10==e[1]],'one pair','two pair','three card','full house',0,'four card'][n//2])\n"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef is_onepair(x):\n    for i in range(4):\n        if x.count(x[i]) == 2:\n            return True\n\n    return False\n\ndef is_twopair(x):\n    count = 0\n    for e in x:\n        for e2 in x:\n            if e == e2:\n                count += 1\n            if count == 2:\n                return True\n\n    return False\n\ndef is_threecard(x):\n    for i in range(3):\n        if x.count(x[i]) == 3:\n            return True\n\n    return False\n\ndef is_straight(x):\n    x.sort()\n    if x[0] == 1 and x[1:] == [10, 11, 12, 13]:\n        return True\n    for i in range(4):\n        if x[i]+1 != x[i+1]:\n            return False\n    \n    return True\n\ndef is_fullhouse(x):\n    if is_threecard(x) and is_onepair(x):\n        return True\n\n    return False\n    \ndef is_fourcard(x):\n    for i in range(2):\n        if x.count(x[i]) == 4:\n            return True\n\n    return False\n\nfor line in sys.stdin.readlines():\n    hand = list(map(int, line.split(',')))\n    if is_fourcard(hand):\n        print(\"four card\")\n    elif is_fullhouse(hand):\n        print(\"full house\")\n    elif is_straight(hand):\n        print(\"straight\")\n    elif is_threecard(hand):\n        print(\"three card\")\n    elif is_twopair(hand):\n        print(\"two pair\")\n    elif is_onepair(hand):\n        print(\"one pair\")\n    else:\n        print(\"null\")"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\tif A[0]==A[3] or A[1]==A[4]:\n\t\tprint(\"four card\")\n\telif (A[0]==A[1] and A[2]==A[4]) or (A[0]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\telif A[0]==A[2] or A[1]==A[3] or A[2]==A[4]:\n\t\tprint(\"three card\")\n\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[0]==A[1] and A[3]==A[4]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\telif A==[1,10,11,12,13]:\n\t\tprint(\"straight\")\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(int,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef is_onepair(x):\n    for i in range(4):\n        if x.count(x[i]) == 2:\n            return True\n\n    return False\n\ndef is_twopair(x):\n    count = 0\n    i = 0\n    x.sort()\n    while i < 5:\n        if x.count(x[i]) == 2:\n            i += 2\n            count += 1\n        else:\n            i += 1\n        if count == 2:\n            return True\n\n    return False\n\ndef is_threecard(x):\n    for i in range(3):\n        if x.count(x[i]) == 3:\n            return True\n\n    return False\n\ndef is_straight(x):\n    x.sort()\n    if x[0] == 1 and x[1:] == [10, 11, 12, 13]:\n        return True\n    for i in range(4):\n        if x[i]+1 != x[i+1]:\n            return False\n    \n    return True\n\ndef is_fullhouse(x):\n    if is_threecard(x) and is_onepair(x):\n        return True\n\n    return False\n    \ndef is_fourcard(x):\n    for i in range(2):\n        if x.count(x[i]) == 4:\n            return True\n\n    return False\n\nfor line in sys.stdin.readlines():\n    hand = list(map(int, line.split(',')))\n    if is_fourcard(hand):\n        print(\"four card\")\n    elif is_fullhouse(hand):\n        print(\"full house\")\n    elif is_straight(hand):\n        print(\"straight\")\n    elif is_threecard(hand):\n        print(\"three card\")\n    elif is_twopair(hand):\n        print(\"two pair\")\n    elif is_onepair(hand):\n        print(\"one pair\")\n    else:\n        print(\"null\")"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n e=sorted(map(int,e.split(',')))\n print([['null','straight'][e[0]*9<e[1]or e[4]-e[0]<5],'one pair','two pair','three card','full house',0,'four card'][sum(e.count(s)for s in e)//2-2])\n"
  },
  {
    "language": "Python",
    "code": "def function(a,b,c,d,e):\n\tA=[a,b,c,d,e]\n\tA.sort()\n\t#4card\n\tif A[0]==A[1]==A[2]==A[3] or A[1]==A[2]==A[3]==A[4]:\n\t\tprint(\"four card\")\n\t#Full house\n\telif (A[0]==A[1] and A[2]==A[3]==A[4]) or (A[0]==A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"full house\")\n\t#straight A?????????\n\telif A[0]==1 and A[1]==10 and A[2]==11 and A[3]==12 and A[4]==13:\n\t\tprint(\"straight\")\n\t#straight A???????????????\n\telif A[0]==A[1]-1==A[2]-2==A[3]-3==A[4]-4:\n\t\tprint(\"straight\")\n\t#threee\n\telif A[0]==A[1]==A[2] or A[1]==A[2]==A[3] or A[2]==A[3]==A[4]:\n\t\tprint(\"three card\")\n\telif (A[0]==A[1] and A[2]==A[3]) or (A[1]==A[2] and A[3]==A[4]):\n\t\tprint(\"two pair\")\n\telif A[0]==A[1] or A[1]==A[2] or A[2]==A[3] or A[3]==A[4]:\n\t\tprint(\"one pair\")\n\telse:\n\t\tprint(\"null\")\n\nwhile True:\n\ttry:\n\t\ta,b,c,d,e=map(float,input().split(','))\n\t\tfunction(a,b,c,d,e)\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "def poker(a,b,c,d,e):\n    x = [a,b,c,d,e]\n    x.sort()\n    if x[1]==x[4] or x[0]==x[3]:\n        print \"fourcard\"\n    elif x[0]==x[2] and x[3]==x[4]:\n        print \"fullhouse\"\n    elif x[0]==x[1] and x[2]==x[4]:\n        print \"fullhouse\"\n    elif x[0]==x[2] or x[2]==x[4]:\n        print \"threecard\"\n    elif x[0]==x[1] and x[2]==x[3]:\n        print \"twopair\"\n    elif x[1]==x[2] and x[3]==x[4]:\n        print \"twopair\"\n    elif x[0]==x[1] and x[3]==x[4]:\n        print \"twopair\"\n    elif x[0]==x[1] or x[1]==x[2] or x[2]==x[3] or x[3]==x[4]:\n        print \"onepair\"\n    elif x[0]==x[1]-1==x[2]-2==x[3]-3==x[4]-4 or x[0]==x[1]-9==x[2]-10==x[3]-11==x[4]-12:\n        print \"straight\"\n    else :\n        print \"none\""
  },
  {
    "language": "Python",
    "code": "# AOJ 0038: Poker Hand\n# Python3 2018.6.27 bal4u\n\ndef judge(card, cnt):\n\tnmax = cnt[0][1]\n\tif nmax == 4: return \"four card\"\n\tif nmax == 3: return \"full house\" if cnt[1][1] == 2 else \"three card\"\n\tif nmax == 2: return \"two pair\" if cnt[1][1] == 2 else \"one pair\"\n\tif (card[0] == 1 and list(range(10, 14)) == card[1:]) \\\n\t\tor list(range(card[0], card[0]+5)) == card: return \"straight\"\n\treturn \"null\"\n\nimport collections\nwhile True:\n\ttry: card = list(map(int, input().split(',')))\n\texcept: break\n\tcnt = collections.Counter(card)\n\tprint(judge(sorted(card), sorted(cnt.items(), key=lambda x: -x[1])))\n"
  },
  {
    "language": "Python",
    "code": "import collections\n\nwhile 1:\n    try:\n        hand = list(map(int, input().split(\",\")))\n    except:\n        break\n\n    chand = collections.Counter(hand)\n    count = chand.most_common()\n\n    straight = [1, 10, 11, 12, 13]\n\n    if count[0][1] == 4:\n        print(\"four card\")\n        continue\n    elif count[0][1] == 3 and count[1][1] == 2:\n        print(\"full house\")\n        continue\n    else:\n        hand.sort()\n        if hand == straight:\n            print(\"straight\")\n            continue\n        else:\n            check = True\n            for i in range(len(hand)-1):\n                if hand[i+1] - hand[i] != 1:\n                    check = False\n            if check:\n                print(\"straight\")\n                continue\n    if count[0][1] == 3:\n        print(\"three card\")\n        continue\n    elif count[0][1] == count[1][1] == 2:\n        print(\"two pair\")\n        continue\n    elif count[0][1] == 2:\n        print(\"one pair\")\n        continue\n    else:\n        print(\"null\")\n"
  },
  {
    "language": "Python",
    "code": "words = [['null','one pair','three card','four card'], ['','','two pair','full house']]\n\nwhile True:\n    try:\n        cards = list(int(x) for x in input().split(\",\"))\n        cards = sorted(cards,reverse=False)\n        isStright = True\n        pairCard = -1\n        pairNum = 0\n        pairIndex = 0\n        \n        tmp = cards[0]\n        for i in range(1,5):\n            if tmp + 1 != cards[i]:\n                isStright = False\n            if tmp == cards[i]:\n                if pairNum >= 1 and pairCard != cards[i]:\n                    pairIndex = 1\n                pairNum += 1\n                pairCard = cards[i]\n            tmp = cards[i]\n                \n        if isStright or (cards[0] == 1 and cards[1] == 10 and cards[2] == 11 and cards[3] == 12 and cards[4] == 13):\n            ans = \"straight\"\n        else:\n            ans = words[pairIndex][pairNum]\n        print(ans)\n    except:\n        break\n"
  },
  {
    "language": "Python",
    "code": "while True:\n      try:\n            hand = sorted(map(int, raw_input().split(\",\")))\n            kind = len(set(hand))\n            ma = max([hand.count(i) for i in hand])\n            if kind == 4:\n                  print \"one pair\"\n            elif kind == 3:\n                  if ma == 2:\n                        print \"two pair\"\n                  else:\n                        print \"three card\"\n            elif kind == 2:\n                  if ma==4:\n                        print \"four card\"\n                  else:\n                  print \"full house\"\n            else:\n                  if hand==[1,10,11,12,13] or hand[4] - hand[0] == 4:\n                        print \"straight\"\n                  else:\n                        print \"null\"\n      except:\n            break"
  },
  {
    "language": "Python",
    "code": "while True:\n    try:\n\thand = map(int,\traw_input().split(\",\"))\n        kind = list(set(hand))\n\trank =[]\n\tfor card in kind:\n\t    rank.append(hand.count(kind))\n      \t    rank.sort()\n            rank.reverse()\n        if rank[0] == 4:\n            print \"four card\"\n\telif rank[0] ==\t3:\n            if rank[1] == 2:\n\t\tprint \"hull house\"\n\t    else:\n\t\tprint \"three card\"\n\telif rank[0] ==\t2:\n            if rank[1] == 2:\n\t\tprint \"two pair\"\n\t    else:\n\t\tprint \"one pair\"\n\telse:\n            hand.sort()\n            if hand[4] - hand[0] == 4:\n\t\tprint \"straight\"\n\t    else:\n\t\tprint \"null\"\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:n=sorted(map(int,input().split(',')))\n    except:break\n    c=sum(n.count(x) for x in n)\n    if c==17:c=3\n    elif c in [13,11,9,7]:c-=5\n    elif max(n)-min(n)==4 or (n[1] == 10 and n[0]==1):c=1\n    else:c=0\n    print(['null','straight','one pair','four card','two pair','','three card','','full house'][c])"
  },
  {
    "language": "Python",
    "code": "import sys\nfor e in sys.stdin:\n c=[list(map(int,e.split(','))).count(i+1)for i in range(13)];d=c+c\n print('four card'if 4 in c else'full house'if 2 in c else'three card'if 3 in c else'two pair'if c.count(2)-1 else'one pair'if 2 in c else'straight'if sum([1]*5==d[i:i+5]for i in range(10)) else'null')\n"
  },
  {
    "language": "Python",
    "code": "def s(n):\n    sum=0\n    for i in range(14):\n        if n[i] == 1 : sum+=i\n    if sum % 5 == 0 or sum == 47: return True\n    return False\n\nwhile True:\n    try:\n        l=map(int, input().split(\",\"))\n    except:\n        break\n\n    n=[0]*14\n    for i in l:\n        n[i]+=1\n\n    if 4 in n:\n        print(\"four card\")\n    elif 3 in n and 2 in n:\n        print(\"full house\")\n    elif 3 in n:\n        print(\"three card\")\n    elif 2 == n.count(2):\n        print(\"two pair\")\n    elif 2 in n:\n        print(\"one pair\")\n    elif s(n):\n        print(\"straight\")\n    else:\n        print(\"null\")"
  },
  {
    "language": "Python",
    "code": "\nimport sys\n\n\ndef solv(hand):\n    if four_card(hand):\n        return \"four card\"\n    elif full_house(hand):\n        return \"full house\"\n    elif straight(hand):\n        return \"straight\"\n    elif three_card(hand):\n        return \"three card\"\n    elif two_pair(hand):\n        return \"two pair\"\n    elif one_pair(hand):\n        return \"one pair\"\n    else:\n        return \"null\"\n\ndef four_card(hand):\n    s = set(hand)\n    if len(s) == 2:\n        for c in s:\n            if count(hand, c) == 4:\n                return True\n    else:\n        return False\n\ndef full_house(hand):\n    s = set(hand)\n    if len(s) == 2:\n        for c in s:\n            if count(hand, c) == 3:\n                return True\n    else:\n        return False\n\ndef straight(hand):\n    hand.sort()\n    if difference_one(hand):\n        return True\n    elif difference_one(change_ace(hand)):\n        return True\n    else:\n        return False\n\ndef three_card(hand):\n    s = set(hand)\n    if len(s) == 3:\n        for c in s:\n            if count(hand, c) == 3:\n                return True\n    else:\n        return False\n\ndef two_pair(hand):\n    s = set(hand)\n    return len(s) == 3\n\ndef one_pair(hand):\n    s = set(hand)\n    return len(s) == 4\n\n\ndef count(hand, c):\n    return len(filter(lambda x: x == c, hand))\n\ndef difference_one(hand):\n    r = []\n    d = reduce(lambda x, y: (add_list(x[0], y-x[1]), y), hand, (r,0))\n    d[0].pop(0)\n    return d[0] == [1,1,1,1]\n\ndef add_list(lis, x):\n    lis.append(x)\n    return lis\n\ndef change_ace(hand):\n    r = []\n    for c in hand:\n        if c == 1:\n            r.append(14)\n        else:\n            r.append(c)\n    r.sort()\n    return r\n\n\n\nfor line in sys.stdin:\n    hand = map(int, line.split(','))\n    print solv(hand)"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\ndef is_straight(game):\n    if 1 in game:\n        if game == [1, 2, 3, 4, 5] or game == [1, 10, 11, 12, 13]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(game)-1):\n            if game[i+1] != game[i]+1:\n                return False\n            return True\n\nwhile True:\n    try: start = input()\n    except: break\n\n    game = list(map(int, start.split(',')))\n    game.sort()\n    result = Counter(game)\n    values, counts = zip(*result.most_common())\n\n    if counts[0] == 2:\n        if len(counts) == 4:\n            print('one pair')\n        else:\n            print('two pair')\n    elif counts[0] == 3:\n        if len(counts) == 3:\n            print('three card')\n        else:\n            print('full house')\n    elif counts[0] == 4:\n        print('four card')\n    elif is_straight(game):\n        print('straight')\n    else:\n        print('null')\n\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef heaven():\n    result_dic = {}\n    check_num_lis = []\n    for i in range(5):\n        check_num = card_lis[0]\n        if not check_num in check_num_lis:\n            for card in card_lis[1:]:\n                if card == check_num:\n                    if not card in result_dic:\n                        result_dic[card] = 2\n                    else:\n                        result_dic[card] = result_dic[card] + 1\n            check_num_lis.append(check_num)\n        card_lis.append(check_num)\n        del card_lis[0]\n    \n    suicide(result_dic)\n    \ndef suicide(result_dic):\n    result = result_dic.values()\n    result.sort()\n    if result == [2]:\n        print 'one pair'\n    elif result == [2,2]:\n        print 'two pair'\n    elif result == [3]:\n        print 'three card'\n    elif result == [4]:\n        print 'four card'\n    elif result == [2,3]:\n        print 'full house'\n    elif not result:\n        if card_lis == [10,11,12,13,1]:\n            print 'straight'\n        else:\n            card_lis.sort()\n            check_num = card_lis[0]\n            for card in card_lis:\n                if card == check_num:\n                    check_num = card + 1\n                else:\n                    print 'null'\n                    break\n            else:\n                print 'straight'\n\nfor input_line in sys.stdin:\n    card_lis = [int(char) for char in input_line.split(',')]\n    heaven()"
  },
  {
    "language": "Python",
    "code": "def isstraight(cs):\n    if 1 in cs:\n        if cs==[1,2,3,4,5] or cs==[1,10,11,12,13]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(cs)-1):\n            if cs[i+1]!=cs[i]+1:\n                return False\n        return True\n\nwhile 1:\n    try:\n        c= list(map(int, input().split(',')))\n    except:\n        break\n    l= [c.count(i) for i in set(c)]\n    ans= {7: \"four card\", 6: \"full house\", 5: \"straight\", 4: \"three card\", 3: \"two pair\", 2: \"one pair\", 1: \"null\"}\n    if len(set(c))==5:\n        v= 5 if isstraight(sorted(c)) else 1\n    else:\n        v= 7 if 4 in l else(6 if 3 in l and 2 in l else(4 if 3 in l else(3 if l.count(2)==2 else 2)))\n    print(ans[v])"
  },
  {
    "language": "Python",
    "code": "from collections import Counter\n\ndef checkStraint(hand):\n    hand=sorted(hand)\n    if set(hand)==set([10,11,12,13,1]):\n        return True\n    for i in range(5):\n        if hand[0]+i==hand[i]:\n            continue\n        else:\n            return False\n    return True\n\nwhile True:\n    try:\n        hand=[int(i) for i in input().split(\",\")]\n        hand=sorted(hand)\n        c=Counter(hand)\n        c=sorted(dict(c).items(),key=lambda w:w[1],reverse=True)\n        if c[0][1]==4:\n            print(\"four card\")\n            continue\n        elif c[0][1]==3 and c[1][1]==2:\n            print(\"full house\")\n            continue\n\n        elif checkStraint(hand):\n            print(\"straight\")\n            continue\n        elif c[0][1]==3:\n            print(\"three card\")\n            continue\n        elif c[0][1]==2 and c[1][1]==2:\n            print(\"two pair\")\n            continue\n        elif c[0][1]==2:\n            print(\"one pair\")\n            continue\n        else:\n            print(\"null\")\n\n    except EOFError:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "def hand(card):\n    m = 0\n    n = [0]*13\n    val = 0\n    for i in range(13):\n        n[i] = card.count(str(i+1))\n    for i in range(13):\n        if n[i] == 4:\n            return 'four card'\n    for i in range(13):\n        if n[i] == 3:\n            for j in range(13):\n                if n[j] == 2:\n                    return 'full house'\n            return 'three card'\n\n    for i in range(13):\n        if n[i] == 2:\n            for j in range(i+1,13):\n                if n[j] == 2:\n                    return 'two pair'\n            return 'one pair'\n    for i in range(len(card)):\n        card[i] = int(card[i])\n    card.sort()\n    \n    if card == [1,10,11,12,13]:\n        return 'straight'\n    for i in range(4):\n        if card[4-i] - card[4-i-1] != 1:\n            return 'null'\n    return 'straight'\n\nwhile True:\n    try:\n        card = input().split(',')\n        print(hand(card))\n            \n    except:\n        break"
  }
]