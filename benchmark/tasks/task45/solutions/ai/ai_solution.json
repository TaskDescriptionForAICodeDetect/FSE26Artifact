[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "def solve_magic_square(n, grid):\n    # Find the empty cell\n    empty_row, empty_col = None, None\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                empty_row, empty_col = i, j\n                break\n        if empty_row is not None:\n            break\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in grid]\n    row_sums[empty_row] = 0\n    \n    # Calculate column sums\n    col_sums = [0] * n\n    for j in range(n):\n        for i in range(n):\n            col_sums[j] += grid[i][j]\n    col_sums[empty_col] = 0\n    \n    # Calculate main diagonal sum\n    main_diag_sum = 0\n    for i in range(n):\n        main_diag_sum += grid[i][i]\n    main_diag_sum -= grid[empty_row][empty_col] if empty_row == empty_col else 0\n    \n    # Calculate secondary diagonal sum\n    sec_diag_sum = 0\n    for i in range(n):\n        sec_diag_sum += grid[i][n-1-i]\n    sec_diag_sum -= grid[empty_row][empty_col] if empty_row == n-1-empty_col else 0\n    \n    # Determine required value\n    target_sum = max(row_sums)\n    if empty_row == empty_col:\n        main_diag_sum = target_sum\n    if empty_row == n-1-empty_col:\n        sec_diag_sum = target_sum\n    \n    # Check row and column requirements\n    x = target_sum - sum(grid[empty_row])\n    if x <= 0:\n        return -1\n    \n    grid[empty_row][empty_col] = x\n    \n    # Verify row sums\n    for i in range(n):\n        if sum(grid[i]) != target_sum:\n            return -1\n    \n    # Verify column sums\n    for j in range(n):\n        col_sum = sum(grid[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return -1\n    \n    # Verify main diagonal\n    main_diag_check = sum(grid[i][i] for i in range(n))\n    if main_diag_check != target_sum:\n        return -1\n    \n    # Verify secondary diagonal\n    sec_diag_check = sum(grid[i][n-1-i] for i in range(n))\n    if sec_diag_check != target_sum:\n        return -1\n    \n    return x\n\n# Read input\nn = int(input())\ngrid = []\nfor _ in range(n):\n    grid.append(list(map(int, input().split())))\n\n# Solve and print result\nprint(solve_magic_square(n, grid))",
    "timestamp": "2025-08-05 17:32:57"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "n = int(input())\ngrid = []\nempty_i, empty_j = -1, -1\n\nfor i in range(n):\n    row = list(map(int, input().split()))\n    grid.append(row)\n    if 0 in row:\n        empty_j = row.index(0)\n        empty_i = i\n\nif n == 1:\n    print(1)\n    exit()\n\n# Find the reference sum from a complete row\nref_sum = 0\nfound = False\nfor i in range(n):\n    if 0 not in grid[i]:\n        ref_sum = sum(grid[i])\n        found = True\n        break\n\nif not found:\n    # All rows have 0, try columns\n    for j in range(n):\n        col_has_zero = False\n        col_sum = 0\n        for i in range(n):\n            if grid[i][j] == 0:\n                col_has_zero = True\n                break\n            col_sum += grid[i][j]\n        if not col_has_zero:\n            ref_sum = col_sum\n            found = True\n            break\n\nif not found:\n    # Try main diagonal\n    diag_sum = 0\n    has_zero = False\n    for i in range(n):\n        if grid[i][i] == 0:\n            has_zero = True\n            break\n        diag_sum += grid[i][i]\n    if not has_zero:\n        ref_sum = diag_sum\n        found = True\n\nif not found:\n    # Try secondary diagonal\n    diag_sum = 0\n    has_zero = False\n    for i in range(n):\n        if grid[i][n - 1 - i] == 0:\n            has_zero = True\n            break\n        diag_sum += grid[i][n - 1 - i]\n    if not has_zero:\n        ref_sum = diag_sum\n        found = True\n\nif not found:\n    print(-1)\n    exit()\n\n# Calculate x for the empty cell\nrow_sum = sum(grid[empty_i])\nx = ref_sum - row_sum\nif x <= 0:\n    print(-1)\n    exit()\n\ngrid[empty_i][empty_j] = x\n\n# Verify all rows\nfor i in range(n):\n    if sum(grid[i]) != ref_sum:\n        print(-1)\n        exit()\n\n# Verify all columns\nfor j in range(n):\n    col_sum = 0\n    for i in range(n):\n        col_sum += grid[i][j]\n    if col_sum != ref_sum:\n        print(-1)\n        exit()\n\n# Verify diagonals\ndiag1 = 0\ndiag2 = 0\nfor i in range(n):\n    diag1 += grid[i][i]\n    diag2 += grid[i][n - 1 - i]\nif diag1 != ref_sum or diag2 != ref_sum:\n    print(-1)\n    exit()\n\nprint(x)",
    "timestamp": "2025-08-05 17:33:28"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def find_magic_number(n, grid):\n    if n == 1:\n        return 1 if grid[0][0] == 0 else -1\n\n    empty_i, empty_j = -1, -1\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                empty_i, empty_j = i, j\n                break\n        if empty_i != -1:\n            break\n\n    sums = []\n    \n    for i in range(n):\n        if i != empty_i:\n            sums.append(sum(grid[i]))\n        \n    target_sum = sums[0]\n\n    if len(set(sums)) != 1:\n        return -1\n    \n    empty_row_sum = sum(grid[empty_i])\n    x = target_sum - empty_row_sum\n    \n    if x <= 0:\n        return -1\n    \n    grid[empty_i][empty_j] = x\n\n    for i in range(n):\n        row_sum = sum(grid[i])\n        if row_sum != target_sum:\n            return -1\n    \n    for j in range(n):\n        col_sum = sum(grid[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return -1\n    \n    diag1_sum = sum(grid[i][i] for i in range(n))\n    diag2_sum = sum(grid[i][n-i-1] for i in range(n))\n    \n    if diag1_sum != target_sum or diag2_sum != target_sum:\n        return -1\n    \n    return x\n\nn = int(input().strip())\ngrid = [list(map(int, input().strip().split())) for _ in range(n)]\n\nprint(find_magic_number(n, grid))",
    "timestamp": "2025-08-12 21:54:51"
  }
]