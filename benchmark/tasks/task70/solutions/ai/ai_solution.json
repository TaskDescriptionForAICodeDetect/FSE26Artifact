[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define MAX 100\n\nint stack[MAX];\nint top = -1;\n\nvoid push(int num) {\n    if (top >= MAX - 1) return;\n    stack[++top] = num;\n}\n\nint pop() {\n    if (top < 0) return 0;\n    return stack[top--];\n}\n\nint precedence(char op) {\n    if (op == '*' || op == '/') return 2;\n    if (op == '+' || op == '-') return 1;\n    return 0;\n}\n\nvoid apply_op(char op) {\n    int b = pop();\n    int a = pop();\n    switch (op) {\n        case '+': push(a + b); break;\n        case '-': push(a - b); break;\n        case '*': push(a * b); break;\n        case '/': push(a / b); break;\n    }\n}\n\nint evaluate(char* expr) {\n    int i, num = 0;\n    char op_stack[MAX];\n    int op_top = -1;\n\n    for (i = 0; expr[i] != '\\0'; ++i) {\n        if (isdigit(expr[i])) {\n            num = num * 10 + (expr[i] - '0');\n        } else {\n            if (expr[i - 1] >= '0' && expr[i - 1] <= '9') {\n                push(num);\n                num = 0;\n            }\n            if (expr[i] == '(') {\n                op_stack[++op_top] = expr[i];\n            } else if (expr[i] == ')') {\n                while (op_top >= 0 && op_stack[op_top] != '(') {\n                    apply_op(op_stack[op_top--]);\n                }\n                op_top--;\n            } else if (expr[i] == '=') {\n                while (op_top >= 0) {\n                    apply_op(op_stack[op_top--]);\n                }\n            } else {\n                while (op_top >= 0 && precedence(op_stack[op_top]) >= precedence(expr[i])) {\n                    apply_op(op_stack[op_top--]);\n                }\n                op_stack[++op_top] = expr[i];\n            }\n        }\n    }\n    return pop();\n}\n\nint main() {\n    char expr[MAX + 1];\n    scanf(\"%100[^\\n]\", expr);\n    printf(\"%d\\n\", evaluate(expr));\n    return 0;\n}",
    "timestamp": "2025-08-05 18:27:04"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ExpressionEvaluator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String expression = scanner.nextLine().trim();\n        System.out.println(evaluate(expression));\n    }\n\n    static int evaluate(String expression) {\n        expression = expression.substring(0, expression.length() - 1);\n        return evaluateExpression(expression);\n    }\n\n    static int evaluateExpression(String expression) {\n        Stack<Integer> numbers = new Stack<>();\n        Stack<Character> operators = new Stack<>();\n\n        for (int i = 0; i < expression.length(); i++) {\n            char ch = expression.charAt(i);\n\n            if (Character.isDigit(ch)) {\n                int num = 0;\n                while (i < expression.length() && Character.isDigit(expression.charAt(i))) {\n                    num = num * 10 + (expression.charAt(i) - '0');\n                    i++;\n                }\n                i--;\n                numbers.push(num);\n            } else if (ch == '(') {\n                operators.push(ch);\n            } else if (ch == ')') {\n                while (!operators.isEmpty() && operators.peek() != '(') {\n                    numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));\n                }\n                operators.pop();\n            } else if (isOperator(ch)) {\n                while (!operators.isEmpty() && hasPrecedence(ch, operators.peek())) {\n                    numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));\n                }\n                operators.push(ch);\n            }\n        }\n\n        while (!operators.isEmpty()) {\n            numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));\n        }\n\n        return numbers.pop();\n    }\n\n    static boolean isOperator(char ch) {\n        return ch == '+' || ch == '-' || ch == '*' || ch == '/';\n    }\n\n    static boolean hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n\n    static int applyOperator(char operator, int b, int a) {\n        switch (operator) {\n            case '+': return a + b;\n            case '-': return a - b;\n            case '*': return a * b;\n            case '/': return a / b;\n        }\n        return 0;\n    }\n}",
    "timestamp": "2025-08-05 18:27:12"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nint precedence(char op) {\n    if (op == '+' || op == '-') return 1;\n    if (op == '*' || op == '/') return 2;\n    return 0;\n}\n\nint applyOp(int a, int b, char op) {\n    switch(op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n    return 0;\n}\n\nint evaluate(string expression) {\n    stack<int> values;\n    stack<char> ops;\n    \n    for (int i = 0; i < expression.length(); i++) {\n        if (expression[i] == ' ') continue;\n        else if (expression[i] == '(') {\n            ops.push(expression[i]);\n        }\n        else if (isdigit(expression[i])) {\n            int val = 0;\n            while (i < expression.length() && isdigit(expression[i])) {\n                val = (val * 10) + (expression[i] - '0');\n                i++;\n            }\n            values.push(val);\n            i--;\n        }\n        else if (expression[i] == ')') {\n            while (!ops.empty() && ops.top() != '(') {\n                int val2 = values.top(); values.pop();\n                int val1 = values.top(); values.pop();\n                char op = ops.top(); ops.pop();\n                values.push(applyOp(val1, val2, op));\n            }\n            if (!ops.empty()) ops.pop();\n        }\n        else {\n            while (!ops.empty() && precedence(ops.top()) >= precedence(expression[i])) {\n                int val2 = values.top(); values.pop();\n                int val1 = values.top(); values.pop();\n                char op = ops.top(); ops.pop();\n                values.push(applyOp(val1, val2, op));\n            }\n            ops.push(expression[i]);\n        }\n    }\n    \n    while (!ops.empty()) {\n        int val2 = values.top(); values.pop();\n        int val1 = values.top(); values.pop();\n        char op = ops.top(); ops.pop();\n        values.push(applyOp(val1, val2, op));\n    }\n    \n    return values.top();\n}\n\nint main() {\n    string expression;\n    getline(cin, expression);\n    expression = expression.substr(0, expression.find('='));\n    cout << evaluate(expression) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 18:28:04"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_LEN 110\n\nint precedence(char op) {\n    if (op == '+' || op == '-') return 1;\n    if (op == '*' || op == '/') return 2;\n    return 0;\n}\n\nint applyOp(int a, int b, char op) {\n    switch(op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n    return 0;\n}\n\nint evaluate(char* expr) {\n    int values[MAX_LEN];\n    char ops[MAX_LEN];\n    int valTop = -1, opTop = -1;\n    \n    for (int i = 0; expr[i] && expr[i] != '='; i++) {\n        if (expr[i] == ' ') continue;\n        \n        if (isdigit(expr[i])) {\n            int num = 0;\n            while (isdigit(expr[i])) {\n                num = num * 10 + (expr[i] - '0');\n                i++;\n            }\n            i--;\n            values[++valTop] = num;\n        }\n        \n        else if (expr[i] == '(') {\n            ops[++opTop] = expr[i];\n        }\n        \n        else if (expr[i] == ')') {\n            while (opTop >= 0 && ops[opTop] != '(') {\n                int b = values[valTop--];\n                int a = values[valTop--];\n                char op = ops[opTop--];\n                values[++valTop] = applyOp(a, b, op);\n            }\n            if (opTop >= 0 && ops[opTop] == '(')\n                opTop--;\n        }\n        \n        else {\n            while (opTop >= 0 && precedence(ops[opTop]) >= precedence(expr[i])) {\n                int b = values[valTop--];\n                int a = values[valTop--];\n                char op = ops[opTop--];\n                values[++valTop] = applyOp(a, b, op);\n            }\n            ops[++opTop] = expr[i];\n        }\n    }\n    \n    while (opTop >= 0) {\n        int b = values[valTop--];\n        int a = values[valTop--];\n        char op = ops[opTop--];\n        values[++valTop] = applyOp(a, b, op);\n    }\n    \n    return values[valTop];\n}\n\nint main() {\n    char expr[MAX_LEN];\n    fgets(expr, MAX_LEN, stdin);\n    printf(\"%d\\n\", evaluate(expr));\n    return 0;\n}",
    "timestamp": "2025-08-05 18:28:24"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <vector>\n#include <cctype>\n#include <string>\n\nusing namespace std;\n\nint precedence(char op) {\n    if (op == '+' || op == '-') return 1;\n    if (op == '*' || op == '/') return 2;\n    return 0;\n}\n\nint applyOp(int a, int b, char op) {\n    switch(op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n    return 0;\n}\n\nint evaluate(string tokens) {\n    stack<int> values;\n    stack<char> ops;\n    \n    for (int i = 0; i < tokens.length(); i++) {\n        if (tokens[i] == ' ') continue;\n        \n        if (isdigit(tokens[i])) {\n            int val = 0;\n            while (i < tokens.length() && isdigit(tokens[i])) {\n                val = (val * 10) + (tokens[i] - '0');\n                i++;\n            }\n            i--;\n            values.push(val);\n        }\n        \n        else if (tokens[i] == '(') {\n            ops.push(tokens[i]);\n        }\n        \n        else if (tokens[i] == ')') {\n            while (!ops.empty() && ops.top() != '(') {\n                int val2 = values.top(); values.pop();\n                int val1 = values.top(); values.pop();\n                char op = ops.top(); ops.pop();\n                \n                values.push(applyOp(val1, val2, op));\n            }\n            \n            if (!ops.empty()) ops.pop();\n        }\n        \n        else if (tokens[i] == '+' || tokens[i] == '-' || \n                 tokens[i] == '*' || tokens[i] == '/') {\n            while (!ops.empty() && precedence(ops.top()) >= precedence(tokens[i])) {\n                int val2 = values.top(); values.pop();\n                int val1 = values.top(); values.pop();\n                char op = ops.top(); ops.pop();\n                \n                values.push(applyOp(val1, val2, op));\n            }\n            \n            ops.push(tokens[i]);\n        }\n    }\n    \n    while (!ops.empty()) {\n        int val2 = values.top(); values.pop();\n        int val1 = values.top(); values.pop();\n        char op = ops.top(); ops.pop();\n        \n        values.push(applyOp(val1, val2, op));\n    }\n    \n    return values.top();\n}\n\nint main() {\n    string expression;\n    getline(cin, expression);\n    \n    // Remove '=' sign and any trailing spaces\n    size_t pos = expression.find('=');\n    if (pos != string::npos) {\n        expression = expression.substr(0, pos);\n    }\n    \n    int result = evaluate(expression);\n    cout << result << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:28:34"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String expr = scanner.nextLine().replaceAll(\"\\\\s+\", \"\");\n        System.out.println(evaluate(expr));\n    }\n\n    private static int evaluate(String expr) {\n        Stack<Integer> numbers = new Stack<>();\n        Stack<Character> ops = new Stack<>();\n        for (int i = 0; i < expr.length(); i++) {\n            char c = expr.charAt(i);\n            if (c == '=') {\n                break;\n            }\n            if (Character.isDigit(c)) {\n                int num = 0;\n                while (i < expr.length() && Character.isDigit(expr.charAt(i))) {\n                    num = num * 10 + (expr.charAt(i) - '0');\n                    i++;\n                }\n                i--;\n                numbers.push(num);\n            } else if (c == '(') {\n                ops.push(c);\n            } else if (c == ')') {\n                while (ops.peek() != '(') {\n                    numbers.push(applyOp(ops.pop(), numbers.pop(), numbers.pop()));\n                }\n                ops.pop();\n            } else if (c == '+' || c == '-' || c == '*' || c == '/') {\n                while (!ops.isEmpty() && precedence(ops.peek()) >= precedence(c)) {\n                    numbers.push(applyOp(ops.pop(), numbers.pop(), numbers.pop()));\n                }\n                ops.push(c);\n            }\n        }\n        while (!ops.isEmpty()) {\n            numbers.push(applyOp(ops.pop(), numbers.pop(), numbers.pop()));\n        }\n        return numbers.pop();\n    }\n\n    private static int precedence(char op) {\n        if (op == '+' || op == '-') {\n            return 1;\n        } else if (op == '*' || op == '/') {\n            return 2;\n        }\n        return 0;\n    }\n\n    private static int applyOp(char op, int b, int a) {\n        switch (op) {\n            case '+':\n                return a + b;\n            case '-':\n                return a - b;\n            case '*':\n                return a * b;\n            case '/':\n                return a / b;\n        }\n        return 0;\n    }\n}",
    "timestamp": "2025-08-05 18:28:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def evaluate_expression(expression):\n    def compute(num1, num2, op):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '/':\n            return num1 // num2\n    \n    def precedence(op):\n        if op in ('+', '-'):\n            return 1\n        elif op in ('*', '/'):\n            return 2\n        return 0\n\n    def apply_operation(operators, operands):\n        right = operands.pop()\n        left = operands.pop()\n        op = operators.pop()\n        operands.append(compute(left, right, op))\n\n    operators = []\n    operands = []\n    i = 0\n    while i < len(expression):\n        if expression[i].isdigit():\n            num = 0\n            while i < len(expression) and expression[i].isdigit():\n                num = num * 10 + int(expression[i])\n                i += 1\n            operands.append(num)\n            i -= 1\n        elif expression[i] in '+-*/':\n            while (operators and \n                   precedence(operators[-1]) >= precedence(expression[i])):\n                apply_operation(operators, operands)\n            operators.append(expression[i])\n        elif expression[i] == '(':\n            operators.append(expression[i])\n        elif expression[i] == ')':\n            while operators and operators[-1] != '(':\n                apply_operation(operators, operands)\n            operators.pop()  # Pop the '('\n        i += 1\n    \n    while operators:\n        apply_operation(operators, operands)\n    \n    return operands[-1]\n\nexpression = input().strip().replace('=', '')\nresult = evaluate_expression(expression)\nprint(result)",
    "timestamp": "2025-08-12 23:17:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Stack;\n\npublic class ExpressionEvaluator {\n\n    public static int evaluate(String expression) {\n        Stack<Integer> values = new Stack<>();\n        Stack<Character> ops = new Stack<>();\n        char[] tokens = expression.toCharArray();\n\n        for (int i = 0; i < tokens.length; i++) {\n\n            if (tokens[i] == ' ') {\n                continue;\n            }\n\n            if (tokens[i] >= '0' && tokens[i] <= '9') {\n                StringBuilder buffer = new StringBuilder();\n                while (i < tokens.length && tokens[i] >= '0' && tokens[i] <= '9') {\n                    buffer.append(tokens[i++]);\n                }\n                values.push(Integer.parseInt(buffer.toString()));\n                i--;\n            } else if (tokens[i] == '(') {\n                ops.push(tokens[i]);\n            } else if (tokens[i] == ')') {\n                while (ops.peek() != '(') {\n                    values.push(applyOp(ops.pop(), values.pop(), values.pop()));\n                }\n                ops.pop();\n            } else if (isOperator(tokens[i])) {\n                while (!ops.isEmpty() && hasPrecedence(tokens[i], ops.peek())) {\n                    values.push(applyOp(ops.pop(), values.pop(), values.pop()));\n                }\n                ops.push(tokens[i]);\n            }\n        }\n\n        while (!ops.isEmpty()) {\n            values.push(applyOp(ops.pop(), values.pop(), values.pop()));\n        }\n\n        return values.pop();\n    }\n\n    private static boolean isOperator(char op) {\n        return op == '+' || op == '-' || op == '*' || op == '/';\n    }\n\n    private static boolean hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') {\n            return false;\n        }\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) {\n            return false;\n        }\n        return true;\n    }\n\n    private static int applyOp(char op, int b, int a) {\n        switch (op) {\n            case '+':\n                return a + b;\n            case '-':\n                return a - b;\n            case '*':\n                return a * b;\n            case '/':\n                return a / b;\n        }\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        String expression = \"3 + (2 + 1) * 3 =\";\n        System.out.println(evaluate(expression.substring(0, expression.length() - 1)));\n    }\n}",
    "timestamp": "2025-08-12 23:17:38"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define MAX_EXPR_LEN 100\n\nint eval_expr(char* expr);\n\nint get_number(char** expr) {\n    int num = 0;\n    while (isdigit(**expr)) {\n        num = num * 10 + (**expr - '0');\n        (*expr)++;\n    }\n    return num;\n}\n\nint eval_factor(char** expr) {\n    if (**expr == '(') {\n        (*expr)++;\n        int result = eval_expr(*expr);\n        while (**expr != ')') (*expr)++;\n        (*expr)++;\n        return result;\n    } else {\n        return get_number(expr);\n    }\n}\n\nint eval_term(char** expr) {\n    int result = eval_factor(expr);\n    while (**expr == '*' || **expr == '/') {\n        char op = **expr;\n        (*expr)++;\n        int value = eval_factor(expr);\n        if (op == '*') {\n            result *= value;\n        } else {\n            result /= value;\n        }\n    }\n    return result;\n}\n\nint eval_expr(char* expr) {\n    int result = eval_term(&expr);\n    while (*expr != '=' && (*expr == '+' || *expr == '-')) {\n        char op = *expr;\n        expr++;\n        int value = eval_term(&expr);\n        if (op == '+') {\n            result += value;\n        } else {\n            result -= value;\n        }\n    }\n    return result;\n}\n\nint main() {\n    char expr[MAX_EXPR_LEN + 1];\n    scanf(\"%s\", expr);\n    int result = eval_expr(expr);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "timestamp": "2025-08-12 23:17:44"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def evaluate_expression(expression):\n    def precedence(op):\n        if op in ('+', '-'):\n            return 1\n        if op in ('*', '/'):\n            return 2\n        return 0\n\n    def apply_op(op, b, a):\n        if op == '+':\n            return a + b\n        if op == '-':\n            return a - b\n        if op == '*':\n            return a * b\n        if op == '/':\n            return int(a / b)\n\n    nums = []\n    ops = []\n    i = 0\n\n    while i < len(expression) and expression[i] != '=':\n        if expression[i].isdigit():\n            num = 0\n            while i < len(expression) and expression[i].isdigit():\n                num = num * 10 + int(expression[i])\n                i += 1\n            nums.append(num)\n        elif expression[i] in ('+', '-', '*', '/'):\n            while ops and precedence(ops[-1]) >= precedence(expression[i]):\n                num2 = nums.pop()\n                num1 = nums.pop()\n                op = ops.pop()\n                nums.append(apply_op(op, num2, num1))\n            ops.append(expression[i])\n            i += 1\n        elif expression[i] == '(':\n            ops.append(expression[i])\n            i += 1\n        elif expression[i] == ')':\n            while ops and ops[-1] != '(':\n                num2 = nums.pop()\n                num1 = nums.pop()\n                op = ops.pop()\n                nums.append(apply_op(op, num2, num1))\n            if ops and ops[-1] == '(':\n                ops.pop()\n            i += 1\n        else:\n            i += 1\n\n    while ops:\n        num2 = nums.pop()\n        num1 = nums.pop()\n        op = ops.pop()\n        nums.append(apply_op(op, num2, num1))\n\n    return nums[0]\n\n# Example usage\nexpression = input().strip()\nresult = evaluate_expression(expression)\nprint(result)",
    "timestamp": "2025-08-12 23:17:58"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def evaluate_expression(s):\n    stack = []\n    num = 0\n    sign = '+'\n    i = 0\n    n = len(s)\n    while i < n:\n        c = s[i]\n        if c.isdigit():\n            num = num * 10 + int(c)\n        elif c == '(':\n            j = i\n            balance = 1\n            while j + 1 < n and balance != 0:\n                j += 1\n                if s[j] == '(':\n                    balance += 1\n                elif s[j] == ')':\n                    balance -= 1\n            num = evaluate_expression(s[i+1:j])\n            i = j\n        if c in '+-*/)' or i == n - 1:\n            if sign == '+':\n                stack.append(num)\n            elif sign == '-':\n                stack.append(-num)\n            elif sign == '*':\n                stack.append(stack.pop() * num)\n            elif sign == '/':\n                stack.append(int(stack.pop() / num))\n            sign = c\n            num = 0\n            if c == ')':\n                break\n        i += 1\n    return sum(stack)\n\nexpression = input().strip()\nif expression.endswith('='):\n    expression = expression[:-1]\nprint(evaluate_expression(expression))",
    "timestamp": "2025-08-12 23:19:21"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <stack>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nint precedence(char op) {\n    if (op == '+' || op == '-') return 1;\n    if (op == '*' || op == '/') return 2;\n    return 0;\n}\n\nint applyOp(int a, int b, char op) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n    return 0;\n}\n\nint evaluate(const string& expression) {\n    int i = 0;\n    stack<int> values;\n    stack<char> ops;\n\n    while (i < expression.length()) {\n        if (isspace(expression[i])) {\n            i++;\n            continue;\n        }\n        \n        if (isdigit(expression[i])) {\n            int val = 0;\n            while (i < expression.length() && isdigit(expression[i])) {\n                val = val * 10 + (expression[i] - '0');\n                i++;\n            }\n            values.push(val);\n        }\n        else if (expression[i] == '(') {\n            ops.push(expression[i]);\n            i++;\n        }\n        else if (expression[i] == ')') {\n            while (!ops.empty() && ops.top() != '(') {\n                int val2 = values.top(); values.pop();\n                int val1 = values.top(); values.pop();\n                char op = ops.top(); ops.pop();\n                values.push(applyOp(val1, val2, op));\n            }\n            ops.pop();\n            i++;\n        }\n        else if (expression[i] == '+' || expression[i] == '-' ||\n                 expression[i] == '*' || expression[i] == '/') {\n            while (!ops.empty() && precedence(ops.top()) >= precedence(expression[i])) {\n                int val2 = values.top(); values.pop();\n                int val1 = values.top(); values.pop();\n                char op = ops.top(); ops.pop();\n                values.push(applyOp(val1, val2, op));\n            }\n            ops.push(expression[i]);\n            i++;\n        }\n    }\n    \n    while (!ops.empty()) {\n        int val2 = values.top(); values.pop();\n        int val1 = values.top(); values.pop();\n        char op = ops.top(); ops.pop();\n        values.push(applyOp(val1, val2, op));\n    }\n\n    return values.top();\n}\n\nint main() {\n    string expression;\n    getline(cin, expression);\n    expression.pop_back(); // remove the '='\n\n    cout << evaluate(expression) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 10:49:42"
  }
]