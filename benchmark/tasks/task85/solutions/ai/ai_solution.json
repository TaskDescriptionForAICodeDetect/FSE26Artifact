[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int h;\n    int r;\n} Doll;\n\nint compare(const void *a, const void *b) {\n    Doll *dollA = (Doll *)a;\n    Doll *dollB = (Doll *)b;\n    if (dollA->h != dollB->h) {\n        return dollA->h - dollB->h;\n    } else {\n        return dollA->r - dollB->r;\n    }\n}\n\nint maxMatryoshka(Doll *dolls, int n) {\n    if (n == 0) return 0;\n    qsort(dolls, n, sizeof(Doll), compare);\n    int *dp = (int *)malloc(n * sizeof(int));\n    int max_k = 1;\n    dp[0] = 1;\n    for (int i = 1; i < n; i++) {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (dolls[j].h < dolls[i].h && dolls[j].r < dolls[i].r) {\n                if (dp[j] + 1 > dp[i]) {\n                    dp[i] = dp[j] + 1;\n                }\n            }\n        }\n        if (dp[i] > max_k) {\n            max_k = dp[i];\n        }\n    }\n    free(dp);\n    return max_k;\n}\n\nint main() {\n    while (1) {\n        int n1, n2;\n        scanf(\"%d\", &n1);\n        if (n1 == 0) break;\n        Doll *ichiro = (Doll *)malloc(n1 * sizeof(Doll));\n        for (int i = 0; i < n1; i++) {\n            scanf(\"%d %d\", &ichiro[i].h, &ichiro[i].r);\n        }\n        scanf(\"%d\", &n2);\n        Doll *jiro = (Doll *)malloc(n2 * sizeof(Doll));\n        for (int i = 0; i < n2; i++) {\n            scanf(\"%d %d\", &jiro[i].h, &jiro[i].r);\n        }\n        Doll *combined = (Doll *)malloc((n1 + n2) * sizeof(Doll));\n        for (int i = 0; i < n1; i++) {\n            combined[i] = ichiro[i];\n        }\n        for (int i = 0; i < n2; i++) {\n            combined[n1 + i] = jiro[i];\n        }\n        int total = n1 + n2;\n        int result = maxMatryoshka(combined, total);\n        printf(\"%d\\n\", result);\n        free(ichiro);\n        free(jiro);\n        free(combined);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:32:59"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MatryoshkaDolls {\n    static class Doll implements Comparable<Doll> {\n        int height, radius;\n        \n        Doll(int h, int r) {\n            height = h;\n            radius = r;\n        }\n        \n        public int compareTo(Doll other) {\n            if (this.height == other.height) {\n                return Integer.compare(other.radius, this.radius);\n            }\n            return Integer.compare(this.height, other.height);\n        }\n    }\n    \n    public static int maxNesting(List<Doll> dolls) {\n        Collections.sort(dolls);\n        int[] dp = new int[dolls.size()];\n        int maxLen = 0;\n        \n        for (int i = 0; i < dolls.size(); i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (canContain(dolls.get(j), dolls.get(i))) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            maxLen = Math.max(maxLen, dp[i]);\n        }\n        \n        return maxLen;\n    }\n    \n    static boolean canContain(Doll outer, Doll inner) {\n        return outer.height > inner.height && outer.radius > inner.radius;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n            \n            List<Doll> dolls = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                int h = scanner.nextInt();\n                int r = scanner.nextInt();\n                dolls.add(new Doll(h, r));\n            }\n            \n            System.out.println(maxNesting(dolls));\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:33:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Doll {\n    int h, r;\n    bool operator<(const Doll &other) const {\n        if (h == other.h) return r > other.r;\n        return h < other.h;\n    }\n};\n\nint maxMatryoshka(vector<Doll> &dolls) {\n    sort(dolls.begin(), dolls.end());\n    vector<int> lis;\n    for (const auto &doll : dolls) {\n        auto it = lower_bound(lis.begin(), lis.end(), doll.r);\n        if (it == lis.end()) {\n            lis.push_back(doll.r);\n        } else {\n            *it = doll.r;\n        }\n    }\n    return lis.size();\n}\n\nint main() {\n    int n;\n    while (cin >> n, n != 0) {\n        vector<Doll> dolls(n);\n        for (int i = 0; i < n; ++i) {\n            cin >> dolls[i].h >> dolls[i].r;\n        }\n        cout << maxMatryoshka(dolls) << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:33:50"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_DOLLS 100\n\ntypedef struct {\n    int height;\n    int radius;\n    int index;\n} Doll;\n\nint compare(const void* a, const void* b) {\n    Doll* d1 = (Doll*)a;\n    Doll* d2 = (Doll*)b;\n    \n    if (d1->height != d2->height)\n        return d1->height - d2->height;\n    return d1->radius - d2->radius;\n}\n\nint can_contain(Doll* outer, Doll* inner) {\n    return (outer->height > inner->height && outer->radius > inner->radius);\n}\n\nint max_nested_dolls(Doll* dolls, int n) {\n    qsort(dolls, n, sizeof(Doll), compare);\n    \n    int dp[MAX_DOLLS];\n    memset(dp, 0, sizeof(dp));\n    \n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (can_contain(&dolls[i], &dolls[j])) {\n                dp[i] = (dp[i] > dp[j] + 1) ? dp[i] : dp[j] + 1;\n            }\n        }\n        max_len = (max_len > dp[i]) ? max_len : dp[i];\n    }\n    \n    return max_len;\n}\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) && n != 0) {\n        Doll dolls[MAX_DOLLS];\n        \n        for (int i = 0; i < n; i++) {\n            scanf(\"%d %d\", &dolls[i].height, &dolls[i].radius);\n            dolls[i].index = i;\n        }\n        \n        int result = max_nested_dolls(dolls, n);\n        printf(\"%d\\n\", result);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:33:58"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Doll {\n    int height;\n    int radius;\n};\n\nbool canContain(const Doll& outer, const Doll& inner) {\n    return outer.height > inner.height && outer.radius > inner.radius;\n}\n\nint maxMatryoshkaDolls(vector<Doll>& dolls) {\n    int n = dolls.size();\n    sort(dolls.begin(), dolls.end(), [](const Doll& a, const Doll& b) {\n        return a.height < b.height || (a.height == b.height && a.radius < b.radius);\n    });\n\n    vector<int> dp(n, 1);\n    int maxDolls = 1;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (canContain(dolls[i], dolls[j])) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxDolls = max(maxDolls, dp[i]);\n    }\n\n    return maxDolls;\n}\n\nint main() {\n    int n;\n    while (cin >> n && n != 0) {\n        vector<Doll> dolls(n);\n        for (int i = 0; i < n; ++i) {\n            cin >> dolls[i].height >> dolls[i].radius;\n        }\n        cout << maxMatryoshkaDolls(dolls) << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:34:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\nclass Doll implements Comparable<Doll> {\n    int h, r;\n\n    public Doll(int h, int r) {\n        this.h = h;\n        this.r = r;\n    }\n\n    @Override\n    public int compareTo(Doll other) {\n        if (this.h != other.h) {\n            return Integer.compare(this.h, other.h);\n        } else {\n            return Integer.compare(other.r, this.r);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n            Doll[] ichiro = new Doll[n];\n            for (int i = 0; i < n; i++) {\n                int h = scanner.nextInt();\n                int r = scanner.nextInt();\n                ichiro[i] = new Doll(h, r);\n            }\n            int m = scanner.nextInt();\n            Doll[] jiro = new Doll[m];\n            for (int i = 0; i < m; i++) {\n                int h = scanner.nextInt();\n                int r = scanner.nextInt();\n                jiro[i] = new Doll(h, r);\n            }\n\n            List<Doll> allDolls = new ArrayList<>();\n            allDolls.addAll(Arrays.asList(ichiro));\n            allDolls.addAll(Arrays.asList(jiro));\n            Collections.sort(allDolls);\n\n            List<Integer> lis = new ArrayList<>();\n            for (Doll doll : allDolls) {\n                int radius = doll.r;\n                int idx = Collections.binarySearch(lis, radius);\n                if (idx < 0) {\n                    idx = -(idx + 1);\n                }\n                if (idx == lis.size()) {\n                    lis.add(radius);\n                } else {\n                    lis.set(idx, radius);\n                }\n            }\n            System.out.println(lis.size());\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:34:22"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_nested_dolls(ichiro_dolls, jiro_dolls):\n    def longest_increasing_subsequence(dolls):\n        dolls.sort()\n        lis = []\n        for height, radius in dolls:\n            pos = binary_search(lis, (float('inf'), radius))\n            if pos == len(lis):\n                lis.append((float('inf'), radius))\n            else:\n                lis[pos] = (float('inf'), radius)\n        return len(lis)\n\n    def binary_search(lis, doll):\n        low, high = 0, len(lis)\n        while low < high:\n            mid = (low + high) // 2\n            if lis[mid][1] < doll[1]:\n                low = mid + 1\n            else:\n                high = mid\n        return low\n\n    all_dolls = ichiro_dolls + jiro_dolls\n    all_dolls.sort(key=lambda d: (d[0], -d[1]))\n\n    return longest_increasing_subsequence(all_dolls)\n\ndef process_datasets(input_data):\n    results = []\n    idx = 0\n    while idx < len(input_data):\n        n = int(input_data[idx])\n        if n == 0:\n            break\n        idx += 1\n        ichiro_dolls = []\n        for _ in range(n):\n            h, r = map(int, input_data[idx].split())\n            ichiro_dolls.append((h, r))\n            idx += 1\n        m = int(input_data[idx])\n        idx += 1\n        jiro_dolls = []\n        for _ in range(m):\n            h, r = map(int, input_data[idx].split())\n            jiro_dolls.append((h, r))\n            idx += 1\n        result = max_nested_dolls(ichiro_dolls, jiro_dolls)\n        results.append(result)\n    return results\n\n# Sample input processing\ninput_data = [\n    \"2\",\n    \"5 5\",\n    \"6 6\",\n    \"3\",\n    \"7 7\",\n    \"8 8\",\n    \"9 9\",\n    \"0\"\n]\n\nif __name__ == \"__main__\":\n    results = process_datasets(input_data)\n    for result in results:\n        print(result)",
    "timestamp": "2025-08-12 23:44:47"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\nclass Doll implements Comparable<Doll> {\n    int height, radius;\n    \n    Doll(int height, int radius) {\n        this.height = height;\n        this.radius = radius;\n    }\n    \n    @Override\n    public int compareTo(Doll other) {\n        if (this.height == other.height) {\n            return Integer.compare(this.radius, other.radius);\n        }\n        return Integer.compare(this.height, other.height);\n    }\n}\n\npublic class MatryoshkaDolls {\n    \n    public static int findMaxDolls(List<Doll> dolls) {\n        List<Integer> dp = new ArrayList<>();\n        for (Doll doll : dolls) {\n            int low = 0, high = dp.size();\n            while (low < high) {\n                int mid = (low + high) / 2;\n                if (dp.get(mid) >= doll.radius) {\n                    high = mid;\n                } else {\n                    low = mid + 1;\n                }\n            }\n            if (low < dp.size()) {\n                dp.set(low, doll.radius);\n            } else {\n                dp.add(doll.radius);\n            }\n        }\n        return dp.size();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            int n1 = scanner.nextInt();\n            if (n1 == 0) break;\n\n            List<Doll> dolls = new ArrayList<>();\n            \n            for (int i = 0; i < n1; i++) {\n                int h = scanner.nextInt();\n                int r = scanner.nextInt();\n                dolls.add(new Doll(h, r));\n            }\n            \n            int n2 = scanner.nextInt();\n            for (int i = 0; i < n2; i++) {\n                int h = scanner.nextInt();\n                int r = scanner.nextInt();\n                dolls.add(new Doll(h, r));\n            }\n            \n            Collections.sort(dolls);\n            System.out.println(findMaxDolls(dolls));\n        }\n\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-12 23:44:53"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int height;\n    int radius;\n} Doll;\n\nint cmp(const void *a, const void *b) {\n    Doll *dollA = (Doll *)a;\n    Doll *dollB = (Doll *)b;\n    if (dollA->height != dollB->height) {\n        return dollA->height - dollB->height;\n    }\n    return dollB->radius - dollA->radius;\n}\n\nint lis(Doll dolls[], int n) {\n    int dp[n], max_len = 0;\n    for (int i = 0; i < n; ++i) {\n        dp[i] = 1;\n        for (int j = 0; j < i; ++j) {\n            if (dolls[j].radius < dolls[i].radius && dolls[j].height < dolls[i].height) {\n                dp[i] = dp[i] > dp[j] + 1 ? dp[i] : dp[j] + 1;\n            }\n        }\n        max_len = max_len > dp[i] ? max_len : dp[i];\n    }\n    return max_len;\n}\n\nint main() {\n    while (1) {\n        int n1;\n        scanf(\"%d\", &n1);\n        if (n1 == 0) break;\n        \n        Doll dolls[2000];\n        int n2, index = 0;\n        \n        for (int i = 0; i < n1; ++i) {\n            int h, r;\n            scanf(\"%d %d\", &h, &r);\n            dolls[index++] = (Doll){h, r};\n        }\n        \n        scanf(\"%d\", &n2);\n        for (int i = 0; i < n2; ++i) {\n            int h, r;\n            scanf(\"%d %d\", &h, &r);\n            dolls[index++] = (Doll){h, r};\n        }\n        \n        qsort(dolls, index, sizeof(Doll), cmp);\n        printf(\"%d\\n\", lis(dolls, index));\n    }\n    return 0;\n}",
    "timestamp": "2025-08-12 23:45:04"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_contain(outer, inner):\n    return outer[0] > inner[0] and outer[1] > inner[1]\n\ndef max_dolls(dolls):\n    dolls.sort(key=lambda x: (-x[0], -x[1]))\n    dp = [1] * len(dolls)\n    \n    for i in range(1, len(dolls)):\n        for j in range(i):\n            if can_contain(dolls[j], dolls[i]):\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\ndef solve():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        \n        dolls = []\n        for _ in range(n):\n            h, r = map(int, input().split())\n            dolls.append((h, r))\n        \n        print(max_dolls(dolls))\n\nsolve()",
    "timestamp": "2025-08-12 23:45:19"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import bisect\n\ndef solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    while True:\n        N = int(input[ptr])\n        ptr += 1\n        if N == 0:\n            break\n        ichiro = []\n        for _ in range(N):\n            h = int(input[ptr])\n            r = int(input[ptr+1])\n            ichiro.append((h, r))\n            ptr += 2\n        M = int(input[ptr])\n        ptr += 1\n        jiro = []\n        for _ in range(M):\n            h = int(input[ptr])\n            r = int(input[ptr+1])\n            jiro.append((h, r))\n            ptr += 2\n        \n        # Combine and sort all dolls in descending order of h, then r\n        all_dolls = ichiro + jiro\n        all_dolls.sort(reverse=True)\n        \n        # Longest decreasing subsequence based on radius\n        dp = []\n        for h, r in all_dolls:\n            idx = bisect.bisect_left(dp, -r)\n            if idx == len(dp):\n                dp.append(-r)\n            else:\n                dp[idx] = -r\n        print(len(dp))\n\nsolve()",
    "timestamp": "2025-08-12 23:45:33"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Doll {\n    int height;\n    int radius;\n};\n\nbool canNest(const Doll &outer, const Doll &inner) {\n    return outer.height > inner.height && outer.radius > inner.radius;\n}\n\nint maxDolls(vector<Doll> &dolls) {\n    sort(dolls.begin(), dolls.end(), [](const Doll &a, const Doll &b) {\n        return (a.height < b.height) || (a.height == b.height && a.radius < b.radius);\n    });\n    \n    int n = dolls.size();\n    vector<int> dp(n, 1);\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (canNest(dolls[i], dolls[j])) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    \n    return *max_element(dp.begin(), dp.end());\n}\n\nint main() {\n    int n;\n    while (cin >> n, n != 0) {\n        vector<Doll> dolls;\n        \n        for (int i = 0; i < n; ++i) {\n            int h, r;\n            cin >> h >> r;\n            dolls.push_back({h, r});\n        }\n\n        cout << maxDolls(dolls) << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 10:51:12"
  }
]