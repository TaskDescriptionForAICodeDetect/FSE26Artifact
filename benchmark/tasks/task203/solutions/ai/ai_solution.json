[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n\nint maximalRectangle(int grid[5][5]) {\n    int rows = 5, cols = 5;\n    if (rows == 0 || cols == 0) return 0;\n    \n    int dp[5][5];\n    memset(dp, 0, sizeof(dp));\n    int max_area = 0;\n    \n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = (j == 0) ? 1 : dp[i][j-1] + 1;\n                int width = dp[i][j];\n                \n                for (int k = i; k >= 0; --k) {\n                    width = (width < dp[k][j]) ? width : dp[k][j];\n                    max_area = max(max_area, width * (i - k + 1));\n                }\n            }\n        }\n    }\n    \n    return max_area;\n}\n\nint main() {\n    int grid[5][5];\n    for (int i = 0; i < 5; ++i) {\n        for (int j = 0; j < 5; ++j) {\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    printf(\"%d\\n\", maximalRectangle(grid));\n    return 0;\n}",
    "timestamp": "2025-08-05 19:04:09"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "public class LargestRectangle {\n    public static int findLargestRectangle(int[][] grid) {\n        int rows = grid.length;\n        int cols = grid[0].length;\n        int[][] heights = new int[rows][cols];\n        int maxArea = 0;\n\n        // Calculate histogram heights\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == 1) {\n                    heights[i][j] = (i > 0) ? heights[i-1][j] + 1 : 1;\n                }\n            }\n        }\n\n        // Find largest rectangle for each row\n        for (int i = 0; i < rows; i++) {\n            maxArea = Math.max(maxArea, largestRectangleInHistogram(heights[i]));\n        }\n\n        return maxArea;\n    }\n\n    private static int largestRectangleInHistogram(int[] heights) {\n        int n = heights.length;\n        int maxArea = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        \n        // Find left boundary\n        left[0] = -1;\n        for (int i = 1; i < n; i++) {\n            int prev = i - 1;\n            while (prev >= 0 && heights[prev] >= heights[i]) {\n                prev = left[prev];\n            }\n            left[i] = prev;\n        }\n\n        // Find right boundary\n        right[n-1] = n;\n        for (int i = n - 2; i >= 0; i--) {\n            int next = i + 1;\n            while (next < n && heights[next] >= heights[i]) {\n                next = right[next];\n            }\n            right[i] = next;\n        }\n\n        // Calculate maximum area\n        for (int i = 0; i < n; i++) {\n            maxArea = Math.max(maxArea, heights[i] * (right[i] - left[i] - 1));\n        }\n\n        return maxArea;\n    }\n\n    public static void main(String[] args) {\n        int[][] grid = {\n            {1, 0, 1, 1, 1},\n            {1, 1, 1, 1, 1},\n            {0, 1, 1, 1, 1},\n            {1, 1, 1, 1, 0},\n            {1, 1, 0, 1, 1}\n        };\n        System.out.println(findLargestRectangle(grid));\n    }\n}",
    "timestamp": "2025-08-05 19:04:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint maximalRectangle(vector<vector<char>>& matrix) {\n    if (matrix.empty()) return 0;\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    vector<int> heights(cols, 0);\n    int maxArea = 0;\n\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            if (matrix[i][j] == '1') {\n                heights[j] += 1;\n            } else {\n                heights[j] = 0;\n            }\n        }\n\n        for (int j = 0; j < cols; ++j) {\n            int minHeight = heights[j];\n            for (int k = j; k < cols; ++k) {\n                minHeight = min(minHeight, heights[k]);\n                if (minHeight == 0) break;\n                int area = minHeight * (k - j + 1);\n                maxArea = max(maxArea, area);\n            }\n        }\n    }\n\n    return maxArea;\n}\n\nint main() {\n    vector<vector<char>> grid(5, vector<char>(5));\n    for (int i = 0; i < 5; ++i) {\n        for (int j = 0; j < 5; ++j) {\n            cin >> grid[i][j];\n        }\n    }\n    cout << maximalRectangle(grid) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 19:04:36"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_N 5\n\nint maxHistogramRectangle(int heights[], int n) {\n    int stack[MAX_N], top = -1;\n    int max_area = 0;\n    int i = 0;\n    \n    while (i < n) {\n        if (top == -1 || heights[stack[top]] <= heights[i]) {\n            stack[++top] = i++;\n        } else {\n            int top_index = stack[top--];\n            int area = heights[top_index] * (top == -1 ? i : i - stack[top] - 1);\n            max_area = (area > max_area) ? area : max_area;\n        }\n    }\n    \n    while (top != -1) {\n        int top_index = stack[top--];\n        int area = heights[top_index] * (top == -1 ? i : i - stack[top] - 1);\n        max_area = (area > max_area) ? area : max_area;\n    }\n    \n    return max_area;\n}\n\nint largestRectangle(int grid[MAX_N][MAX_N]) {\n    int heights[MAX_N];\n    int max_rect = 0;\n    \n    for (int row = 0; row < MAX_N; row++) {\n        if (row == 0) {\n            for (int col = 0; col < MAX_N; col++) {\n                heights[col] = grid[row][col];\n            }\n        } else {\n            for (int col = 0; col < MAX_N; col++) {\n                heights[col] = grid[row][col] ? heights[col] + 1 : 0;\n            }\n        }\n        \n        int current_rect = maxHistogramRectangle(heights, MAX_N);\n        max_rect = (current_rect > max_rect) ? current_rect : max_rect;\n    }\n    \n    return max_rect;\n}\n\nint main() {\n    int grid[MAX_N][MAX_N];\n    \n    for (int i = 0; i < MAX_N; i++) {\n        for (int j = 0; j < MAX_N; j++) {\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    \n    int result = largestRectangle(grid);\n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:04:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\n\nint largestRectangleArea(vector<int>& heights) {\n    int n = heights.size();\n    stack<int> s;\n    int maxArea = 0;\n    int i = 0;\n    \n    while (i < n) {\n        if (s.empty() || heights[s.top()] <= heights[i]) {\n            s.push(i++);\n        } else {\n            int top = s.top();\n            s.pop();\n            int area = heights[top] * (s.empty() ? i : i - s.top() - 1);\n            maxArea = max(maxArea, area);\n        }\n    }\n    \n    while (!s.empty()) {\n        int top = s.top();\n        s.pop();\n        int area = heights[top] * (s.empty() ? i : i - s.top() - 1);\n        maxArea = max(maxArea, area);\n    }\n    \n    return maxArea;\n}\n\nint maxRectangle(vector<vector<char>>& matrix) {\n    if (matrix.empty() || matrix[0].empty()) return 0;\n    \n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    vector<int> heights(cols, 0);\n    int maxArea = 0;\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (matrix[i][j] == '1') {\n                heights[j]++;\n            } else {\n                heights[j] = 0;\n            }\n        }\n        maxArea = max(maxArea, largestRectangleArea(heights));\n    }\n    \n    return maxArea;\n}\n\nint main() {\n    vector<vector<char>> grid(5, vector<char>(5));\n    \n    for (int i = 0; i < 5; i++) {\n        for (int j = 0; j < 5; j++) {\n            cin >> grid[i][j];\n        }\n    }\n    \n    cout << maxRectangle(grid) << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:04:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "public class LargestRectangle {\n    public static void main(String[] args) {\n        char[][] grid = new char[5][5];\n        // Assuming the grid is filled with '1's and '0's\n        // For example:\n        /*\n        grid[0] = new char[]{'1', '0', '1', '0', '0'};\n        grid[1] = new char[]{'1', '0', '1', '1', '1'};\n        grid[2] = new char[]{'1', '1', '1', '1', '1'};\n        grid[3] = new char[]{'1', '0', '0', '1', '0'};\n        grid[4] = new char[]{'1', '0', '0', '1', '0'};\n        */\n        // Read input or initialize grid as needed\n        \n        int maxArea = maximalRectangle(grid);\n        System.out.println(maxArea);\n    }\n\n    public static int maximalRectangle(char[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return 0;\n        }\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        int[] heights = new int[cols];\n        int maxArea = 0;\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (matrix[i][j] == '1') {\n                    heights[j] += 1;\n                } else {\n                    heights[j] = 0;\n                }\n            }\n            maxArea = Math.max(maxArea, largestRectangleArea(heights));\n        }\n        return maxArea;\n    }\n\n    private static int largestRectangleArea(int[] heights) {\n        int n = heights.length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        java.util.Stack<Integer> stack = new java.util.Stack<>();\n\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {\n                stack.pop();\n            }\n            left[i] = stack.isEmpty() ? -1 : stack.peek();\n            stack.push(i);\n        }\n\n        stack.clear();\n        for (int i = n - 1; i >= 0; i--) {\n            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {\n                stack.pop();\n            }\n            right[i] = stack.isEmpty() ? n : stack.peek();\n            stack.push(i);\n        }\n\n        int maxArea = 0;\n        for (int i = 0; i < n; i++) {\n            maxArea = Math.max(maxArea, heights[i] * (right[i] - left[i] - 1));\n        }\n        return maxArea;\n    }\n}",
    "timestamp": "2025-08-05 19:05:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def largestRectangle(grid):\n    if not grid:\n        return 0\n\n    def maxHist(row):\n        stack = []\n        max_area = 0\n        index = 0\n        while index < len(row):\n            if not stack or row[stack[-1]] <= row[index]:\n                stack.append(index)\n                index += 1\n            else:\n                top_of_stack = stack.pop()\n                area = (row[top_of_stack] * ((index - stack[-1] - 1) \n                        if stack else index))\n                max_area = max(max_area, area)\n        while stack:\n            top_of_stack = stack.pop()\n            area = (row[top_of_stack] * ((index - stack[-1] - 1) \n                    if stack else index))\n            max_area = max(max_area, area)\n        return max_area\n    \n    def maxRectangle(matrix):\n        result = maxHist(matrix[0])\n        for i in range(1, len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j]:\n                    matrix[i][j] += matrix[i-1][j]\n            result = max(result, maxHist(matrix[i]))\n        return result\n\n    return maxRectangle(grid)\n\n# Example grid map\ngrid = [\n    [1, 0, 0, 1, 1],\n    [1, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 1, 1],\n    [1, 1, 1, 0, 0]\n]\n\nprint(largestRectangle(grid))",
    "timestamp": "2025-08-13 02:17:34"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class LargestRectangle {\n    public static void main(String[] args) {\n        char[][] grid = {\n            {'1', '0', '1', '1', '1'},\n            {'1', '1', '1', '1', '1'},\n            {'0', '1', '1', '1', '0'},\n            {'1', '1', '1', '0', '0'},\n            {'1', '1', '0', '0', '0'}\n        };\n        \n        System.out.println(maximalRectangle(grid));\n    }\n\n    public static int maximalRectangle(char[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;\n        int[] heights = new int[matrix[0].length];\n        int maxArea = 0;\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                if (matrix[i][j] == '1') {\n                    heights[j]++;\n                } else {\n                    heights[j] = 0;\n                }\n            }\n            maxArea = Math.max(maxArea, largestRectangleArea(heights));\n        }\n        return maxArea;\n    }\n    \n    private static int largestRectangleArea(int[] heights) {\n        java.util.Stack<Integer> stack = new java.util.Stack<>();\n        int maxArea = 0;\n        int[] h = new int[heights.length + 1];\n        System.arraycopy(heights, 0, h, 0, heights.length);\n        for (int i = 0; i < h.length; i++) {\n            while (!stack.isEmpty() && h[stack.peek()] > h[i]) {\n                int height = h[stack.pop()];\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, height * width);\n            }\n            stack.push(i);\n        }\n        return maxArea;\n    }\n}",
    "timestamp": "2025-08-13 02:17:47"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint maxHistogram(int row[], int C) {\n    // Create an empty stack. The stack holds indexes of row[] array\n    // The bars stored in stack are always in increasing order of their heights.\n    int stack[C];\n    int top = -1;\n    \n    int max_area = 0; // Initialize max area\n    int area_with_top; // To store area with top bar as the smallest (or minimum) bar\n    int i = 0;\n    while (i < C) {\n        if (top == -1 || row[stack[top]] <= row[i]) {\n            stack[++top] = i++;\n        } else {\n            int tp = stack[top--]; // store the top index\n            \n            area_with_top = row[tp] * (top == -1 ? i : i - stack[top] - 1);\n\n            if (max_area < area_with_top) {\n                max_area = area_with_top;\n            }\n        }\n    }\n\n    while (top != -1) {\n        int tp = stack[top--];\n        area_with_top = row[tp] * (top == -1 ? i : i - stack[top] - 1);\n\n        if (max_area < area_with_top) {\n            max_area = area_with_top;\n        }\n    }\n\n    return max_area;\n}\n\nint maxRectangle(int mat[5][5]) {\n    int max_area = 0;\n    int C = 5;\n    int row[C];\n    memset(row, 0, sizeof(row));\n\n    for (int i = 0; i < 5; i++) {\n        for (int j = 0; j < C; j++) {\n            if (mat[i][j] == 0) {\n                row[j] = 0;\n            } else {\n                row[j] += 1;\n            }\n        }\n\n        int area = maxHistogram(row, C);\n        if (area > max_area) {\n            max_area = area;\n        }\n    }\n\n    return max_area;\n}\n\nint main() {\n    int grid[5][5] = {\n        {1, 0, 1, 1, 0},\n        {1, 0, 1, 1, 0},\n        {1, 1, 1, 1, 0},\n        {1, 0, 0, 1, 0},\n        {1, 1, 1, 1, 1}\n    };\n\n    printf(\"%d\\n\", maxRectangle(grid));\n\n    return 0;\n}",
    "timestamp": "2025-08-13 02:18:12"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def largest_rectangle(grid):\n    def largest_rect_histogram(heights):\n        stack = []\n        max_area = 0\n        heights.append(0)\n        \n        for i, h in enumerate(heights):\n            start = i\n            while stack and stack[-1][1] > h:\n                index, height = stack.pop()\n                max_area = max(max_area, height * (i - index))\n                start = index\n            stack.append((start, h))\n        \n        return max_area\n\n    rows, cols = len(grid), len(grid[0])\n    heights = [0] * cols\n    max_rectangle = 0\n    \n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == '1':\n                heights[col] += 1\n            else:\n                heights[col] = 0\n        \n        max_rectangle = max(max_rectangle, largest_rect_histogram(heights.copy()))\n    \n    return max_rectangle\n\n# Example usage\ngrid = [\n    ['1','0','1','0','0'],\n    ['1','0','1','1','1'],\n    ['1','1','1','1','1'],\n    ['1','0','0','1','0']\n]\n\nprint(largest_rectangle(grid))",
    "timestamp": "2025-08-13 02:18:22"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maximal_rectangle(grid):\n    if not grid:\n        return 0\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    max_area = 0\n    \n    heights = [0] * cols\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '1':\n                heights[j] += 1\n            else:\n                heights[j] = 0\n        \n        stack = []\n        for j in range(cols + 1):\n            h = heights[j] if j < cols else 0\n            while stack and heights[stack[-1]] > h:\n                height = heights[stack.pop()]\n                width = j if not stack else j - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(j)\n    \n    return max_area\n\ngrid = [input().strip() for _ in range(5)]\nprint(maximal_rectangle(grid))",
    "timestamp": "2025-08-13 02:18:34"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint maximalRectangle(vector<vector<int>>& matrix) {\n    if (matrix.empty()) return 0;\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    vector<int> heights(cols, 0);\n    int maxArea = 0;\n\n    for (int row = 0; row < rows; ++row) {\n        for (int col = 0; col < cols; ++col) {\n            if (matrix[row][col] == 1) {\n                heights[col]++;\n            } else {\n                heights[col] = 0;\n            }\n        }\n\n        vector<int> left(cols, 0), right(cols, cols);\n        int currentLeft = 0, currentRight = cols;\n        \n        for (int col = 0; col < cols; ++col) {\n            if (matrix[row][col] == 1) {\n                left[col] = max(left[col], currentLeft);\n            } else {\n                left[col] = 0;\n                currentLeft = col + 1;\n            }\n        }\n        \n        for (int col = cols - 1; col >= 0; --col) {\n            if (matrix[row][col] == 1) {\n                right[col] = min(right[col], currentRight);\n            } else {\n                right[col] = cols;\n                currentRight = col;\n            }\n        }\n        \n        for (int col = 0; col < cols; ++col) {\n            maxArea = max(maxArea, (right[col] - left[col]) * heights[col]);\n        }\n    }\n    return maxArea;\n}\n\nint main() {\n    vector<vector<int>> grid = {\n        {1, 0, 1, 0, 0},\n        {1, 0, 1, 1, 1},\n        {1, 1, 1, 1, 1},\n        {1, 0, 0, 1, 0},\n        {1, 1, 1, 1, 1}\n    };\n\n    int largestRectangleSize = maximalRectangle(grid);\n    cout << largestRectangleSize << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:05:10"
  }
]