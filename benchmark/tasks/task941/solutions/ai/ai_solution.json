[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_N 100\n\nint n;\nchar answers[MAX_N][MAX_N];\nint species[MAX_N];\n\nint check_consistency(int species[]) {\n    for (int i = 0; i < n; i++) {\n        int left = (i - 1 + n) % n;\n        int right = (i + 1) % n;\n        \n        if (answers[i][left] == 'o' && species[i] != species[left]) return 0;\n        if (answers[i][left] == 'x' && species[i] == species[left]) return 0;\n        \n        if (answers[i][right] == 'o' && species[i] != species[right]) return 0;\n        if (answers[i][right] == 'x' && species[i] == species[right]) return 0;\n    }\n    return 1;\n}\n\nint solve() {\n    for (int mask = 0; mask < (1 << n); mask++) {\n        for (int i = 0; i < n; i++) {\n            species[i] = (mask >> i) & 1;  // 0 for sheep, 1 for wolf\n        }\n        \n        if (check_consistency(species)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    \n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", answers[i]);\n    }\n    \n    if (solve()) {\n        for (int i = 0; i < n; i++) {\n            printf(\"%d\", species[i]);\n        }\n        printf(\"\\n\");\n    } else {\n        printf(\"-1\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 23:25:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_N 100000\n\nint N;\nchar S[MAX_N + 1];\nchar ans[MAX_N + 1];\n\nint check(int a0, int a1) {\n    ans[0] = a0;\n    ans[1] = a1;\n    for (int i = 1; i < N - 1; i++) {\n        if (ans[i] == 'S') {\n            if (S[i] == 'o') {\n                ans[i + 1] = ans[i - 1];\n            } else {\n                ans[i + 1] = (ans[i - 1] == 'S') ? 'W' : 'S';\n            }\n        } else {\n            if (S[i] == 'o') {\n                ans[i + 1] = (ans[i - 1] == 'S') ? 'W' : 'S';\n            } else {\n                ans[i + 1] = ans[i - 1];\n            }\n        }\n    }\n    int valid = 1;\n    // Check last element\n    if (ans[N - 1] == 'S') {\n        if (S[N - 1] == 'o') {\n            if (ans[N - 2] != ans[0]) valid = 0;\n        } else {\n            if (ans[N - 2] == ans[0]) valid = 0;\n        }\n    } else {\n        if (S[N - 1] == 'o') {\n            if (ans[N - 2] == ans[0]) valid = 0;\n        } else {\n            if (ans[N - 2] != ans[0]) valid = 0;\n        }\n    }\n    // Check first element\n    if (ans[0] == 'S') {\n        if (S[0] == 'o') {\n            if (ans[1] != ans[N - 1]) valid = 0;\n        } else {\n            if (ans[1] == ans[N - 1]) valid = 0;\n        }\n    } else {\n        if (S[0] == 'o') {\n            if (ans[1] == ans[N - 1]) valid = 0;\n        } else {\n            if (ans[1] != ans[N - 1]) valid = 0;\n        }\n    }\n    return valid;\n}\n\nint main() {\n    scanf(\"%d\", &N);\n    scanf(\"%s\", S);\n    \n    int possible = 0;\n    char patterns[4][2] = {{'S', 'S'}, {'S', 'W'}, {'W', 'S'}, {'W', 'W'}};\n    for (int i = 0; i < 4; i++) {\n        if (check(patterns[i][0], patterns[i][1])) {\n            possible = 1;\n            break;\n        }\n    }\n    \n    if (possible) {\n        ans[N] = '\\0';\n        printf(\"%s\\n\", ans);\n    } else {\n        printf(\"-1\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 23:25:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool check(const string &s, const vector<int> &ans) {\n    int n = s.size();\n    for (int i = 0; i < n; ++i) {\n        int left = (i - 1 + n) % n;\n        int right = (i + 1) % n;\n        bool same_left = (ans[i] == ans[left]);\n        bool same_right = (ans[i] == ans[right]);\n        if (s[i] == 'o') {\n            if (!same_left && !same_right) return false;\n            if (same_left && same_right) continue;\n            if (same_left && !same_right) {\n                if (ans[i] == 1) return false;\n            } else {\n                if (ans[i] == 1) return false;\n            }\n        } else {\n            if (same_left && same_right) return false;\n            if (!same_left && !same_right) continue;\n            if (same_left && !same_right) {\n                if (ans[i] == 0) return false;\n            } else {\n                if (ans[i] == 0) return false;\n            }\n        }\n    }\n    return true;\n}\n\nvector<int> solve(const string &s) {\n    int n = s.size();\n    for (int mask = 0; mask < 4; ++mask) {\n        vector<int> ans(n);\n        ans[0] = (mask & 1) ? 1 : 0;\n        ans[1] = (mask & 2) ? 1 : 0;\n        for (int i = 2; i < n; ++i) {\n            if (s[i-1] == 'o') {\n                ans[i] = ans[i-2] ? 1 - ans[i-1] : ans[i-1];\n            } else {\n                ans[i] = ans[i-2] ? ans[i-1] : 1 - ans[i-1];\n            }\n        }\n        if (check(s, ans)) {\n            return ans;\n        }\n    }\n    return {};\n}\n\nint main() {\n    int n;\n    string s;\n    cin >> n >> s;\n    vector<int> ans = solve(s);\n    if (ans.empty()) {\n        cout << -1 << endl;\n    } else {\n        for (int a : ans) {\n            cout << (a ? 'W' : 'S');\n        }\n        cout << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 23:26:09"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        String S = scanner.next();\n        \n        char[] ans = new char[N];\n        boolean found = false;\n        \n        // Try all 4 possible starting patterns (SS, SW, WS, WW)\n        String[] patterns = {\"SS\", \"SW\", \"WS\", \"WW\"};\n        for (String pattern : patterns) {\n            ans[0] = pattern.charAt(0);\n            ans[1] = pattern.charAt(1);\n            \n            for (int i = 2; i < N; i++) {\n                if (ans[i-1] == 'S') {\n                    if (S.charAt(i-1) == 'o') {\n                        ans[i] = ans[i-2];\n                    } else {\n                        ans[i] = (ans[i-2] == 'S') ? 'W' : 'S';\n                    }\n                } else {\n                    if (S.charAt(i-1) == 'o') {\n                        ans[i] = (ans[i-2] == 'S') ? 'W' : 'S';\n                    } else {\n                        ans[i] = ans[i-2];\n                    }\n                }\n            }\n            \n            // Verify the last two animals\n            boolean valid = true;\n            // Check last animal (0)\n            if (ans[N-1] == 'S') {\n                if (S.charAt(N-1) == 'o') {\n                    if (ans[N-2] != ans[0]) valid = false;\n                } else {\n                    if (ans[N-2] == ans[0]) valid = false;\n                }\n            } else {\n                if (S.charAt(N-1) == 'o') {\n                    if (ans[N-2] == ans[0]) valid = false;\n                } else {\n                    if (ans[N-2] != ans[0]) valid = false;\n                }\n            }\n            // Check first animal (0)\n            if (ans[0] == 'S') {\n                if (S.charAt(0) == 'o') {\n                    if (ans[N-1] != ans[1]) valid = false;\n                } else {\n                    if (ans[N-1] == ans[1]) valid = false;\n                }\n            } else {\n                if (S.charAt(0) == 'o') {\n                    if (ans[N-1] == ans[1]) valid = false;\n                } else {\n                    if (ans[N-1] != ans[1]) valid = false;\n                }\n            }\n            \n            if (valid) {\n                found = true;\n                System.out.println(new String(ans));\n                break;\n            }\n        }\n        \n        if (!found) {\n            System.out.println(-1);\n        }\n    }\n}",
    "timestamp": "2025-08-05 23:26:40"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ZooAssignment {\n    public static void solve(int N, String[] responses) {\n        // Try both initial possibilities: first animal as sheep or wolf\n        for (int start = 0; start < 2; start++) {\n            int[] animals = new int[N];\n            Arrays.fill(animals, -1);\n            \n            animals[0] = start;\n            boolean possible = assign(N, responses, animals);\n            \n            if (possible) {\n                // Output the assignment\n                for (int animal : animals) {\n                    System.out.print(animal == 0 ? 'o' : 'x');\n                }\n                return;\n            }\n        }\n        \n        // No valid assignment found\n        System.out.println(-1);\n    }\n    \n    private static boolean assign(int N, String[] responses, int[] animals) {\n        for (int i = 0; i < N; i++) {\n            int curr = i;\n            int next = (i + 1) % N;\n            \n            if (animals[curr] == -1) continue;\n            \n            // Determine if next animal's species can be inferred\n            if (animals[next] == -1) {\n                if (responses[curr].charAt(0) == 'o') {\n                    animals[next] = animals[curr];\n                } else {\n                    animals[next] = 1 - animals[curr];\n                }\n            }\n            \n            // Check consistency of species assignment\n            if (responses[curr].charAt(0) == 'o' && animals[curr] != animals[next]) {\n                return false;\n            }\n            if (responses[curr].charAt(0) == 'x' && animals[curr] == animals[next]) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        String[] responses = new String[N];\n        \n        for (int i = 0; i < N; i++) {\n            responses[i] = sc.next();\n        }\n        \n        solve(N, responses);\n        \n        sc.close();\n    }\n}",
    "timestamp": "2025-08-05 23:26:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<char> response(N);\n    \n    for (int i = 0; i < N; i++) {\n        cin >> response[i];\n    }\n    \n    for (int initial = 0; initial < 2; initial++) {\n        vector<int> species(N, -1);\n        species[0] = initial;\n        \n        bool valid = true;\n        for (int i = 0; i < N; i++) {\n            int left = (i - 1 + N) % N;\n            int right = (i + 1) % N;\n            \n            if (species[i] == -1) continue;\n            \n            if (response[i] == 'o') {\n                if (species[left] == -1) species[left] = species[i];\n                else if (species[left] != species[i]) {\n                    valid = false;\n                    break;\n                }\n                \n                if (species[right] == -1) species[right] = species[i];\n                else if (species[right] != species[i]) {\n                    valid = false;\n                    break;\n                }\n            } else {\n                if (species[left] == -1) species[left] = 1 - species[i];\n                else if (species[left] == species[i]) {\n                    valid = false;\n                    break;\n                }\n                \n                if (species[right] == -1) species[right] = 1 - species[i];\n                else if (species[right] == species[i]) {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n        \n        if (valid) {\n            for (int i = 0; i < N; i++) {\n                if (species[i] == -1) {\n                    species[i] = 0;\n                }\n                cout << (species[i] == 0 ? 'S' : 'W');\n            }\n            return 0;\n        }\n    }\n    \n    cout << \"-1\" << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 23:26:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve(N, responses):\n    def is_consistent(starting_species):\n        species = [None] * N\n        species[0] = starting_species\n        \n        for i in range(N):\n            if responses[i] == 'o':\n                species[(i + 1) % N] = species[i]\n            else:\n                species[(i + 1) % N] = 'W' if species[i] == 'S' else 'S'\n\n        for i in range(N):\n            if responses[i] == 'o' and species[i] != species[(i + 1) % N]:\n                return False\n            if responses[i] == 'x' and species[i] == species[(i + 1) % N]:\n                return False\n            \n        return species\n\n    solution1 = is_consistent('S')\n    solution2 = is_consistent('W')\n    \n    if solution1:\n        return ''.join(solution1)\n    if solution2:\n        return ''.join(solution2)\n    \n    return -1\n\n# Example usage:\nN = 3\nresponses = ['x', 'o', 'x']\nprint(solve(N, responses))",
    "timestamp": "2025-08-13 15:13:11"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class ZooAssignment {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        String responses = scanner.next();\n        scanner.close();\n\n        char[] res = responses.toCharArray();\n        char[][] possibilities = {{'S', 'S'}, {'S', 'W'}, {'W', 'S'}, {'W', 'W'}};\n\n        for (char[] firstTwo : possibilities) {\n            char[] assignment = new char[N];\n            assignment[0] = firstTwo[0];\n            assignment[1] = firstTwo[1];\n            boolean valid = true;\n\n            for (int i = 1; i < N; i++) {\n                if (res[i] == 'o') {\n                    if (assignment[i] == 'S') {\n                        assignment[(i + 1) % N] = assignment[i - 1];\n                    } else {\n                        assignment[(i + 1) % N] = (assignment[i - 1] == 'S') ? 'W' : 'S';\n                    }\n                } else {\n                    if (assignment[i] == 'S') {\n                        assignment[(i + 1) % N] = (assignment[i - 1] == 'S') ? 'W' : 'S';\n                    } else {\n                        assignment[(i + 1) % N] = assignment[i - 1];\n                    }\n                }\n            }\n\n            if ((res[0] == 'o' && ((assignment[0] == 'S' && assignment[N - 1] == assignment[1]) || \n                (assignment[0] == 'W' && assignment[N - 1] != assignment[1]))) ||\n                (res[0] == 'x' && ((assignment[0] == 'S' && assignment[N - 1] != assignment[1]) || \n                (assignment[0] == 'W' && assignment[N - 1] == assignment[1])))) {\n                for (char c : assignment) {\n                    System.out.print(c);\n                }\n                System.out.println();\n                return;\n            }\n        }\n\n        System.out.println(-1);\n    }\n}",
    "timestamp": "2025-08-13 15:13:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\n#define MAX_N 1000\n\nint N;\nchar responses[MAX_N + 1];\nint species[MAX_N];\n\nint isValid(int first, int second) {\n    species[0] = first;\n    species[1] = second;\n\n    for (int i = 2; i < N; i++) {\n        if (responses[i - 1] == 'o') {\n            species[i] = species[i - 1];\n        } else {\n            species[i] = 1 - species[i - 1];\n        }\n    }\n\n    if ((species[N - 1] == species[0] && responses[N - 1] == 'o') || \n        (species[N - 1] != species[0] && responses[N - 1] == 'x')) {\n        if ((species[0] == species[1] && responses[0] == 'o') || \n            (species[0] != species[1] && responses[0] == 'x')) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\nint main() {\n    scanf(\"%d\", &N);\n    scanf(\"%s\", responses);\n\n    for (int first = 0; first <= 1; first++) {\n        for (int second = 0; second <= 1; second++) {\n            if (isValid(first, second)) {\n                for (int i = 0; i < N; i++) {\n                    printf(\"%c\", species[i] == 0 ? 'S' : 'W');\n                }\n                return 0;\n            }\n        }\n    }\n\n    printf(\"-1\");\n    return 0;\n}",
    "timestamp": "2025-08-13 15:13:21"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nbool checkConsistency(const string& response, const string& assignment) {\n    int N = response.size();\n    for (int i = 0; i < N; i++) {\n        int next = (i + 1) % N;\n        if (response[i] == 'o' && assignment[i] != assignment[next]) {\n            return false;\n        }\n        if (response[i] == 'x' && assignment[i] == assignment[next]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring solveZoo(int N, const string& response, const string& initial) {\n    string species(N, 'S');\n    for (int i = 0; i < N; i++) {\n        if (initial[i] == 'S') {\n            species[i] = 'S';\n        } else {\n            species[i] = 'W';\n        }\n    }\n    for (int i = 1; i < N; i++) {\n        if (response[i - 1] == 'o') {\n            species[i] = species[(i - 1 + N) % N];\n        } else {\n            species[i] = (species[(i - 1 + N) % N] == 'S') ? 'W' : 'S';\n        }\n    }\n    if (checkConsistency(response, species)) {\n        return species;\n    }\n    return \"\";\n}\n\nstring findAssignment(int N, const string& response) {\n    vector<pair<string, string>> initializations = {\n        {\"SS\", \"SS\"}, {\"SW\", \"SW\"}, {\"WS\", \"WS\"}, {\"WW\", \"WW\"}\n    };\n    for (auto& init : initializations) {\n        string assignment = solveZoo(N, response, init.first);\n        if (!assignment.empty()) {\n            return assignment;\n        }\n    }\n    return \"-1\";\n}\n\nint main() {\n    int N;\n    string response;\n    cin >> N >> response;\n    cout << findAssignment(N, response) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 15:13:28"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve_zoo_puzzle(N, responses):\n    # Try both initial assignments\n    for initial_type in [0, 1]:  # 0: sheep, 1: wolf\n        assignment = [None] * N\n        assignment[0] = initial_type\n        \n        # Try to assign species consistently\n        is_valid = True\n        for i in range(N):\n            # Determine neighbors considering circular arrangement\n            left = (i - 1 + N) % N\n            right = (i + 1) % N\n            \n            # Current animal's assignment\n            curr = assignment[i]\n            \n            # Check left neighbor comparison\n            if assignment[left] is not None:\n                expected_left = 'o' if curr == assignment[left] else 'x'\n                if expected_left != responses[i][0]:\n                    is_valid = False\n                    break\n            \n            # Check right neighbor comparison\n            if assignment[right] is not None:\n                expected_right = 'o' if curr == assignment[right] else 'x'\n                if expected_right != responses[i][1]:\n                    is_valid = False\n                    break\n            \n            # Try to assign neighbors if not already assigned\n            if assignment[left] is None:\n                assignment[left] = curr if responses[i][0] == 'o' else 1 - curr\n            \n            if assignment[right] is None:\n                assignment[right] = curr if responses[i][1] == 'o' else 1 - curr\n        \n        # Check if fully assigned and consistent\n        if is_valid and None not in assignment:\n            return ['sheep' if x == 0 else 'wolf' for x in assignment]\n    \n    return -1\n\n# Example usage\nN = int(input())\nresponses = [input().strip() for _ in range(N)]\nresult = solve_zoo_puzzle(N, responses)\nif result == -1:\n    print(-1)\nelse:\n    print(*result)",
    "timestamp": "2025-08-13 15:13:37"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    N = int(input())\n    S = input().strip()\n    \n    for first in ['S', 'W']:\n        for second in ['S', 'W']:\n            res = [None] * N\n            res[0] = first\n            res[1] = second\n            for i in range(1, N-1):\n                if res[i] == 'S':\n                    if S[i] == 'o':\n                        res[i+1] = res[i-1]\n                    else:\n                        res[i+1] = 'S' if res[i-1] == 'W' else 'W'\n                else:\n                    if S[i] == 'o':\n                        res[i+1] = 'S' if res[i-1] == 'W' else 'W'\n                    else:\n                        res[i+1] = res[i-1]\n            # Check last two transitions\n            valid = True\n            # Check last animal (i = N-1)\n            if res[-1] == 'S':\n                if S[-1] == 'o':\n                    if res[-2] != res[0]:\n                        valid = False\n                else:\n                    if res[-2] == res[0]:\n                        valid = False\n            else:\n                if S[-1] == 'o':\n                    if res[-2] == res[0]:\n                        valid = False\n                else:\n                    if res[-2] != res[0]:\n                        valid = False\n            # Check first animal (i = 0)\n            if res[0] == 'S':\n                if S[0] == 'o':\n                    if res[-1] != res[1]:\n                        valid = False\n                else:\n                    if res[-1] == res[1]:\n                        valid = False\n            else:\n                if S[0] == 'o':\n                    if res[-1] == res[1]:\n                        valid = False\n                else:\n                    if res[-1] != res[1]:\n                        valid = False\n            if valid:\n                print(''.join(res))\n                return\n    print(-1)\n\nsolve()",
    "timestamp": "2025-08-13 15:13:51"
  }
]