[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 998244353\n#define MAX_N 500005\n\nchar S[MAX_N];\nint N, Q;\n\nint main() {\n    scanf(\"%d %d\", &N, &Q);\n    \n    memset(S, '1', N);\n    S[N] = '\\0';\n    \n    for (int q = 0; q < Q; q++) {\n        int L, R;\n        char D;\n        \n        scanf(\"%d %d %c\", &L, &R, &D);\n        \n        for (int i = L - 1; i < R; i++) {\n            S[i] = D;\n        }\n        \n        long long num = 0;\n        for (int i = 0; i < N; i++) {\n            num = (num * 10 + (S[i] - '0')) % MOD;\n        }\n        \n        printf(\"%lld\\n\", num);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:22:58"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#define MOD 998244353\n\nlong long mod_pow(long long base, long long exp, long long mod) {\n    long long result = 1;\n    while (exp > 0) {\n        if (exp % 2 == 1) {\n            result = (result * base) % mod;\n        }\n        base = (base * base) % mod;\n        exp /= 2;\n    }\n    return result;\n}\n\nint main() {\n    int N, Q;\n    scanf(\"%d %d\", &N, &Q);\n    char S[N + 2];\n    for (int i = 1; i <= N; i++) {\n        S[i] = '1';\n    }\n    S[N + 1] = '\\0';\n\n    long long power[N + 2];\n    power[0] = 1;\n    for (int i = 1; i <= N; i++) {\n        power[i] = (power[i - 1] * 10) % MOD;\n    }\n\n    long long prefix[N + 2];\n    prefix[0] = 0;\n    for (int i = 1; i <= N; i++) {\n        prefix[i] = (prefix[i - 1] * 10 + (S[i] - '0')) % MOD;\n    }\n\n    while (Q--) {\n        int L, R;\n        char D[2];\n        scanf(\"%d %d %s\", &L, &R, D);\n        char d = D[0];\n        for (int i = L; i <= R; i++) {\n            S[i] = d;\n        }\n\n        long long res = 0;\n        for (int i = 1; i <= N; i++) {\n            res = (res * 10 + (S[i] - '0')) % MOD;\n        }\n        printf(\"%lld\\n\", res);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 22:23:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nconst long long MOD = 998244353;\n\nstruct SegmentTreeNode {\n    long long value;\n    int length;\n    int lazy_digit;\n    bool has_lazy;\n\n    SegmentTreeNode() : value(0), length(0), lazy_digit(0), has_lazy(false) {}\n};\n\nclass SegmentTree {\nprivate:\n    vector<SegmentTreeNode> tree;\n    vector<long long> power10;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node].value = 1;\n            tree[node].length = 1;\n            tree[node].lazy_digit = 0;\n            tree[node].has_lazy = false;\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(2 * node, start, mid);\n        build(2 * node + 1, mid + 1, end);\n        tree[node].value = (tree[2 * node].value * power10[tree[2 * node + 1].length] % MOD + tree[2 * node + 1].value) % MOD;\n        tree[node].length = tree[2 * node].length + tree[2 * node + 1].length;\n        tree[node].lazy_digit = 0;\n        tree[node].has_lazy = false;\n    }\n\n    void push_lazy(int node, int start, int end) {\n        if (tree[node].has_lazy) {\n            int digit = tree[node].lazy_digit;\n            tree[node].value = digit * (power10[tree[node].length] - 1 + MOD) % MOD * power10[1] % MOD;\n            tree[node].value = tree[node].value * power10[0] % MOD; // Adjust for MOD\n            if (start != end) {\n                tree[2 * node].lazy_digit = digit;\n                tree[2 * node].has_lazy = true;\n                tree[2 * node + 1].lazy_digit = digit;\n                tree[2 * node + 1].has_lazy = true;\n            }\n            tree[node].lazy_digit = 0;\n            tree[node].has_lazy = false;\n        }\n    }\n\n    void update_range(int node, int start, int end, int l, int r, int digit) {\n        push_lazy(node, start, end);\n        if (start > r || end < l) return;\n        if (start >= l && end <= r) {\n            tree[node].lazy_digit = digit;\n            tree[node].has_lazy = true;\n            push_lazy(node, start, end);\n            return;\n        }\n        int mid = (start + end) / 2;\n        update_range(2 * node, start, mid, l, r, digit);\n        update_range(2 * node + 1, mid + 1, end, l, r, digit);\n        tree[node].value = (tree[2 * node].value * power10[tree[2 * node + 1].length] % MOD + tree[2 * node + 1].value) % MOD;\n        tree[node].length = tree[2 * node].length + tree[2 * node + 1].length;\n    }\n\npublic:\n    SegmentTree(int size) {\n        n = size;\n        tree.resize(4 * n);\n        power10.resize(n + 1);\n        power10[0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            power10[i] = power10[i - 1] * 10 % MOD;\n        }\n        build(1, 0, n - 1);\n    }\n\n    void update(int l, int r, int digit) {\n        update_range(1, 0, n - 1, l - 1, r - 1, digit);\n    }\n\n    long long get_value() {\n        return tree[1].value;\n    }\n};\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int N, Q;\n    cin >> N >> Q;\n\n    SegmentTree st(N);\n\n    while (Q--) {\n        int L, R;\n        char D;\n        cin >> L >> R >> D;\n        int digit = D - '0';\n        st.update(L, R, digit);\n        cout << st.get_value() << '\\n';\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:23:59"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static final int MOD = 998244353;\n    static int N, Q;\n    static char[] S;\n    static long[] pow10;\n    static long[] invPow10;\n    static long[] tree;\n    static long[] lazyMul;\n    static char[] lazyChar;\n\n    static long modInverse(long a, int mod) {\n        return pow(a, mod - 2, mod);\n    }\n\n    static long pow(long a, long b, int mod) {\n        long res = 1;\n        while (b > 0) {\n            if ((b & 1) == 1) {\n                res = res * a % mod;\n            }\n            a = a * a % mod;\n            b >>= 1;\n        }\n        return res;\n    }\n\n    static void buildPow10() {\n        pow10 = new long[N + 1];\n        invPow10 = new long[N + 1];\n        pow10[0] = 1;\n        for (int i = 1; i <= N; i++) {\n            pow10[i] = pow10[i - 1] * 10 % MOD;\n        }\n        invPow10[N] = modInverse(pow10[N], MOD);\n        for (int i = N - 1; i >= 0; i--) {\n            invPow10[i] = invPow10[i + 1] * 10 % MOD;\n        }\n    }\n\n    static void buildTree(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = (S[start - 1] - '0') * pow10[N - start] % MOD;\n            return;\n        }\n        int mid = (start + end) / 2;\n        buildTree(2 * node, start, mid);\n        buildTree(2 * node + 1, mid + 1, end);\n        tree[node] = (tree[2 * node] + tree[2 * node + 1]) % MOD;\n    }\n\n    static void pushDown(int node, int start, int end) {\n        if (lazyChar[node] != 0) {\n            int mid = (start + end) / 2;\n            char c = lazyChar[node];\n            long d = c - '0';\n            lazyChar[2 * node] = c;\n            lazyChar[2 * node + 1] = c;\n            lazyMul[2 * node] = 1;\n            lazyMul[2 * node + 1] = 1;\n            tree[2 * node] = d * (pow10[N - start] - pow10[N - mid] + MOD) % MOD * invPow10[mid - start] % MOD;\n            tree[2 * node + 1] = d * (pow10[N - mid - 1] - pow10[N - end] + MOD) % MOD * invPow10[end - mid - 1] % MOD;\n            lazyChar[node] = 0;\n        }\n        if (lazyMul[node] != 1) {\n            long mul = lazyMul[node];\n            tree[2 * node] = tree[2 * node] * mul % MOD;\n            tree[2 * node + 1] = tree[2 * node + 1] * mul % MOD;\n            lazyMul[2 * node] = lazyMul[2 * node] * mul % MOD;\n            lazyMul[2 * node + 1] = lazyMul[2 * node + 1] * mul % MOD;\n            lazyMul[node] = 1;\n        }\n    }\n\n    static void updateRange(int node, int start, int end, int l, int r, char c) {\n        if (start > r || end < l) return;\n        if (l <= start && end <= r) {\n            long d = c - '0';\n            tree[node] = d * (pow10[N - start] - pow10[N - end] + MOD) % MOD * invPow10[end - start] % MOD;\n            lazyChar[node] = c;\n            lazyMul[node] = 1;\n            return;\n        }\n        pushDown(node, start, end);\n        int mid = (start + end) / 2;\n        updateRange(2 * node, start, mid, l, r, c);\n        updateRange(2 * node + 1, mid + 1, end, l, r, c);\n        tree[node] = (tree[2 * node] + tree[2 * node + 1]) % MOD;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        N = Integer.parseInt(st.nextToken());\n        Q = Integer.parseInt(st.nextToken());\n        S = new char[N];\n        Arrays.fill(S, '1');\n        buildPow10();\n        int size = 1;\n        while (size < N) size <<= 1;\n        tree = new long[2 * size];\n        lazyMul = new long[2 * size];\n        Arrays.fill(lazyMul, 1);\n        lazyChar = new char[2 * size];\n        buildTree(1, 1, N);\n        while (Q-- > 0) {\n            st = new StringTokenizer(br.readLine());\n            int L = Integer.parseInt(st.nextToken());\n            int R = Integer.parseInt(st.nextToken());\n            char D = st.nextToken().charAt(0);\n            updateRange(1, 1, N, L, R, D);\n            System.out.println(tree[1] % MOD);\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:24:47"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int N = scanner.nextInt();\n        int Q = scanner.nextInt();\n        \n        char[] S = new char[N];\n        Arrays.fill(S, '1');\n        \n        for (int q = 0; q < Q; q++) {\n            int L = scanner.nextInt() - 1;\n            int R = scanner.nextInt() - 1;\n            char D = scanner.next().charAt(0);\n            \n            for (int i = L; i <= R; i++) {\n                S[i] = D;\n            }\n            \n            long num = Long.parseLong(new String(S));\n            System.out.println(num % 998244353);\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 22:24:51"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nconst int MOD = 998244353;\n\nint main() {\n    int N, Q;\n    cin >> N >> Q;\n    \n    string S(N, '1');\n    \n    for (int q = 0; q < Q; q++) {\n        int L, R;\n        char D;\n        cin >> L >> R >> D;\n        \n        for (int i = L - 1; i < R; i++) {\n            S[i] = D;\n        }\n        \n        long long num = 0;\n        for (char c : S) {\n            num = (num * 10 + (c - '0')) % MOD;\n        }\n        \n        cout << num << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:24:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def process_queries(N, Q, queries):\n    S = ['1'] * N\n    MOD = 998_244_353\n    \n    for L, R, D in queries:\n        S[L-1:R] = D * (R - L + 1)\n        num_as_str = ''.join(S)\n        num_as_int = int(num_as_str)\n        print(num_as_int % MOD)\n\n# Example usage:\nN = 5\nQ = 3\nqueries = [\n    (1, 3, '4'),\n    (2, 5, '6'),\n    (1, 1, '9')\n]\nprocess_queries(N, Q, queries)",
    "timestamp": "2025-08-13 10:21:22"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class ReplaceAndModulo {\n    private static final int MOD = 998244353;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // Input the length of the string\n        int N = scanner.nextInt();\n        // Input the number of queries\n        int Q = scanner.nextInt();\n        \n        // Initialize the string S with '1's\n        char[] S = new char[N];\n        for (int i = 0; i < N; i++) {\n            S[i] = '1';\n        }\n        \n        for (int q = 0; q < Q; q++) {\n            // Input the range [L_i, R_i] and character D_i for the current query\n            int L_i = scanner.nextInt() - 1; // 0-based index\n            int R_i = scanner.nextInt() - 1; // 0-based index\n            char D_i = scanner.next().charAt(0);\n            \n            // Update the string S from L_i to R_i\n            for (int i = L_i; i <= R_i; i++) {\n                S[i] = D_i;\n            }\n            \n            // Convert the string S to a number and calculate modulo\n            long number = 0;\n            for (char c : S) {\n                number = (number * 10 + (c - '0')) % MOD;\n            }\n            \n            // Output the result of S modulo 998244353\n            System.out.println(number);\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 10:21:27"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 998244353\n\nvoid perform_queries(char *S, int N, int Q, int queries[][3], char digits[]) {\n    for (int i = 0; i < Q; ++i) {\n        int L_i = queries[i][0] - 1; // Convert to zero-indexed\n        int R_i = queries[i][1] - 1; // Convert to zero-indexed\n        char D_i = digits[i];\n\n        for (int j = L_i; j <= R_i; ++j) {\n            S[j] = D_i;\n        }\n\n        // Convert the string to a number and compute the modulo\n        long long num = 0;\n        for (int j = 0; j < N; ++j) {\n            num = (num * 10 + (S[j] - '0')) % MOD;\n        }\n\n        printf(\"%lld\\n\", num);\n    }\n}\n\nint main() {\n    int N, Q;\n    scanf(\"%d %d\", &N, &Q);\n\n    char S[N + 1];\n    memset(S, '1', N);\n    S[N] = '\\0';\n\n    int queries[Q][3];\n    char digits[Q];\n\n    for (int i = 0; i < Q; i++) {\n        scanf(\"%d %d %c\", &queries[i][0], &queries[i][1], &digits[i]);\n    }\n\n    perform_queries(S, N, Q, queries, digits);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:21:31"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve(N, Q, queries):\n    S = ['1'] * N\n    MOD = 998244353\n    \n    for L, R, D in queries:\n        for i in range(L-1, R):\n            S[i] = str(D)\n        \n        num = int(''.join(S))\n        print(num % MOD)\n\n# Read input\nN, Q = map(int, input().split())\nqueries = []\nfor _ in range(Q):\n    L, R, D = input().split()\n    queries.append((int(L), int(R), int(D)))\n\nsolve(N, Q, queries)",
    "timestamp": "2025-08-13 10:21:41"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\nMOD = 998244353\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    Q = int(input[ptr])\n    ptr += 1\n    \n    pow10 = [1] * (N + 2)\n    for i in range(1, N + 2):\n        pow10[i] = (pow10[i-1] * 10) % MOD\n    \n    # Segment tree setup\n    size = 1\n    while size < N:\n        size <<= 1\n    data = [0] * (2 * size)\n    lazy = [None] * (2 * size)\n    \n    # Initialize leaves\n    for i in range(N):\n        data[size + i] = 1\n    for i in range(size - 1, 0, -1):\n        left_len = min(size, (i << (i.bit_length() - 1))) // 2\n        right_len = left_len\n        if (i << 1) < size:\n            left_len = size // (1 << (i.bit_length() - 1))\n            right_len = left_len\n        data[i] = (data[2*i] * pow10[right_len] + data[2*i+1]) % MOD\n    \n    def apply_lazy(node, l, r):\n        if lazy[node] is not None:\n            val = lazy[node]\n            segment_len = r - l\n            data[node] = val * (pow10[segment_len] - 1) * pow(9, MOD-2, MOD) % MOD\n            if node < size:\n                lazy[2*node] = val\n                lazy[2*node+1] = val\n            lazy[node] = None\n    \n    def update_range(l, r, val, node=1, node_l=0, node_r=size):\n        apply_lazy(node, node_l, node_r)\n        if r <= node_l or node_r <= l:\n            return\n        if l <= node_l and node_r <= r:\n            lazy[node] = val\n            apply_lazy(node, node_l, node_r)\n            return\n        mid = (node_l + node_r) // 2\n        update_range(l, r, val, 2*node, node_l, mid)\n        update_range(l, r, val, 2*node+1, mid, node_r)\n        left_len = mid - node_l\n        right_len = node_r - mid\n        data_left = data[2*node]\n        data_right = data[2*node+1]\n        data[node] = (data_left * pow10[right_len] + data_right) % MOD\n    \n    for _ in range(Q):\n        L = int(input[ptr]) - 1\n        ptr += 1\n        R = int(input[ptr])\n        ptr += 1\n        D = int(input[ptr])\n        ptr += 1\n        update_range(L, R, D)\n        print(data[1] % MOD)\n\nif __name__ == '__main__':\n    main()",
    "timestamp": "2025-08-13 10:22:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nconst long long MOD = 998244353;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    int N, Q;\n    cin >> N >> Q;\n    string S(N, '1');  // Initialize the string S with '1's.\n\n    // Process each query.\n    for (int i = 0; i < Q; ++i) {\n        int L, R;\n        char D;\n        cin >> L >> R >> D;\n        \n        // Replace characters in the range [L, R] (converting 1-based to 0-based).\n        for (int j = L - 1; j < R; ++j) {\n            S[j] = D;\n        }\n\n        // Calculate the integer value of the modified string and take mod.\n        long long value = 0;\n        for (int j = 0; j < N; ++j) {\n            value = (value * 10 + (S[j] - '0')) % MOD;\n        }\n        \n        // Output the result after each query.\n        cout << value << '\\n';\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:58:40"
  }
]