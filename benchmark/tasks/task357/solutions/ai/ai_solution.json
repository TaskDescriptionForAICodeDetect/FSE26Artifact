[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char dealer;\n    scanf(\" %c\", &dealer);\n\n    int scores[2] = {0, 0};\n    int tricks[2] = {0, 0};\n\n    char contract;\n    while (scanf(\" %c\", &contract) == 1 && contract != '#') {\n        char cards[4][3];\n        for (int i = 0; i < 4; i++) {\n            scanf(\"%s\", cards[i]);\n        }\n\n        char lead_suit = cards[0][1];\n        char winning_suit = lead_suit;\n        char winning_rank = cards[0][0];\n        int winner = 0;\n\n        for (int i = 1; i < 4; i++) {\n            char current_suit = cards[i][1];\n            char current_rank = cards[i][0];\n\n            if (current_suit == contract) {\n                if (winning_suit != contract) {\n                    winning_suit = current_suit;\n                    winning_rank = current_rank;\n                    winner = i;\n                } else {\n                    if (current_rank == 'A' || (winning_rank != 'A' && current_rank == 'K') ||\n                        (winning_rank != 'A' && winning_rank != 'K' && current_rank == 'Q') ||\n                        (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && current_rank == 'J') ||\n                        (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && current_rank == 'T') ||\n                        (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && winning_rank != 'T' && current_rank == '9') ||\n                        (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && winning_rank != 'T' && winning_rank != '9' && current_rank == '8') ||\n                        (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && winning_rank != 'T' && winning_rank != '9' && winning_rank != '8' && current_rank == '7')) {\n                        winning_rank = current_rank;\n                        winner = i;\n                    }\n                }\n            } else if (current_suit == winning_suit) {\n                if (current_rank == 'A' || (winning_rank != 'A' && current_rank == 'K') ||\n                    (winning_rank != 'A' && winning_rank != 'K' && current_rank == 'Q') ||\n                    (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && current_rank == 'J') ||\n                    (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && current_rank == 'T') ||\n                    (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && winning_rank != 'T' && current_rank == '9') ||\n                    (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && winning_rank != 'T' && winning_rank != '9' && current_rank == '8') ||\n                    (winning_rank != 'A' && winning_rank != 'K' && winning_rank != 'Q' && winning_rank != 'J' && winning_rank != 'T' && winning_rank != '9' && winning_rank != '8' && current_rank == '7')) {\n                    winning_rank = current_rank;\n                    winner = i;\n                }\n            }\n        }\n\n        int team = (winner % 2);\n        tricks[team]++;\n\n        if (tricks[0] + tricks[1] == 13) {\n            int winning_team = (tricks[0] > tricks[1]) ? 0 : 1;\n            int score = (tricks[winning_team] - 6);\n            scores[winning_team] += score;\n\n            printf(\"%d-%d\\n\", scores[0], scores[1]);\n            tricks[0] = 0;\n            tricks[1] = 0;\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:12:48"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nint main() {\n    char dealer;\n    cin >> dealer;\n\n    map<char, int> dealerOrder = {{'N', 0}, {'E', 1}, {'S', 2}, {'W', 3}};\n    int dealerPos = dealerOrder[dealer];\n\n    string hands;\n    cin >> hands;\n\n    int teamNS = 0, teamEW = 0;\n\n    for (int i = 0; i < hands.size(); ++i) {\n        char card = hands[i];\n        int playerPos = (dealerPos + 1 + i) % 4;\n        bool isTrump = (i % 2 == 0);\n\n        int value = 0;\n        switch (card) {\n            case 'A': value = 4; break;\n            case 'K': value = 3; break;\n            case 'Q': value = 2; break;\n            case 'J': value = 1; break;\n            default: value = 0;\n        }\n\n        if (playerPos == 0 || playerPos == 2) {\n            teamNS += value;\n        } else {\n            teamEW += value;\n        }\n    }\n\n    int diff = teamNS - teamEW;\n    if (diff > 0) {\n        cout << \"NS \" << diff << endl;\n    } else {\n        cout << \"EW \" << -diff << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:13:02"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class WhistGame {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int team1Total = 0;\n        int team2Total = 0;\n        \n        for (int i = 0; i < N; i++) {\n            int team1Tricks = scanner.nextInt();\n            int team2Tricks = scanner.nextInt();\n            \n            if (team1Tricks > team2Tricks) {\n                team1Total += team1Tricks + team2Tricks;\n            } else if (team2Tricks > team1Tricks) {\n                team2Total += team1Tricks + team2Tricks;\n            }\n        }\n        \n        if (team1Total > team2Total) {\n            System.out.println(1 + \" \" + team1Total);\n        } else if (team2Total > team1Total) {\n            System.out.println(2 + \" \" + team2Total);\n        } else {\n            System.out.println(0 + \" \" + team1Total);\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 21:13:15"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Whist {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int deals = scanner.nextInt();\n        \n        for (int i = 0; i < deals; i++) {\n            String trumpSuit = scanner.next();\n            int[] teamScores = new int[2];\n            \n            for (int j = 0; j < 4; j++) {\n                String card = scanner.next();\n                int suit = getSuit(card);\n                int value = getValue(card);\n                \n                if (j == 0) {\n                    teamScores[0] = suit;\n                }\n            }\n            \n            String[] winningCards = new String[4];\n            int leadSuit = getSuit(winningCards[0]);\n            int maxValue = 0;\n            int winningTeam = 0;\n            int winningTricks = 0;\n            \n            for (int j = 0; j < 4; j++) {\n                String card = winningCards[j];\n                int suit = getSuit(card);\n                int value = getValue(card);\n                \n                if (suit == leadSuit && value > maxValue) {\n                    maxValue = value;\n                    winningTeam = j % 2;\n                }\n                \n                if (suit == getSuit(trumpSuit) && value > maxValue) {\n                    maxValue = value;\n                    winningTeam = j % 2;\n                }\n            }\n            \n            winningTricks = (winningTeam == 0) ? 1 : -1;\n            teamScores[winningTeam] += winningTricks;\n            \n            System.out.println((teamScores[0] > teamScores[1]) ? \"Team 1\" : \"Team 2\");\n            System.out.println(Math.abs(teamScores[0] - teamScores[1]));\n        }\n        \n        scanner.close();\n    }\n    \n    private static int getSuit(String card) {\n        return \"SHDC\".indexOf(card.charAt(0));\n    }\n    \n    private static int getValue(String card) {\n        String valueStr = card.substring(1);\n        if (valueStr.equals(\"J\")) return 11;\n        if (valueStr.equals(\"Q\")) return 12;\n        if (valueStr.equals(\"K\")) return 13;\n        if (valueStr.equals(\"A\")) return 14;\n        return Integer.parseInt(valueStr);\n    }\n}",
    "timestamp": "2025-08-05 21:13:26"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_PLAYS 52\n\ntypedef enum {\n    SPADES,\n    HEARTS,\n    DIAMONDS,\n    CLUBS\n} Suit;\n\ntypedef struct {\n    Suit suit;\n    int rank;\n} Card;\n\ntypedef struct {\n    Card cards[MAX_PLAYS];\n    int numCards;\n} Hand;\n\ntypedef struct {\n    int northSouthScore;\n    int eastWestScore;\n} Score;\n\nSuit determineTrump(Hand* hands) {\n    // Logic to determine trump suit\n    return SPADES;\n}\n\nint compareCards(Card card1, Card card2, Suit trumpSuit) {\n    // Compare two cards based on game rules\n    return 0;\n}\n\nScore calculateScore(Hand* hands, Suit trumpSuit) {\n    Score finalScore = {0, 0};\n    // Calculate score based on tricks won\n    return finalScore;\n}\n\nint main() {\n    Hand hands[4];\n    Suit trumpSuit;\n    Score gameScore;\n\n    // Input handling and game processing logic\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:13:31"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nclass WhistGame {\nprivate:\n    vector<string> suits = {\"S\", \"H\", \"D\", \"C\"};\n    map<char, int> cardValues = {\n        {'2', 2}, {'3', 3}, {'4', 4}, {'5', 5}, \n        {'6', 6}, {'7', 7}, {'8', 8}, {'9', 9}, \n        {'T', 10}, {'J', 11}, {'Q', 12}, {'K', 13}, {'A', 14}\n    };\n\npublic:\n    pair<int, int> calculateScore(vector<string> plays) {\n        string trumpSuit = plays[0].substr(1);\n        vector<int> teamScores = {0, 0};\n\n        for (int trick = 0; trick < 13; trick++) {\n            int winningTeam = determineTrickWinner(plays, trick, trumpSuit);\n            teamScores[winningTeam]++;\n        }\n\n        int winningScore = max(teamScores[0], teamScores[1]);\n        int winningTeam = teamScores[0] > teamScores[1] ? 0 : 1;\n\n        return {winningTeam, winningScore};\n    }\n\nprivate:\n    int determineTrickWinner(vector<string>& plays, int trick, string& trumpSuit) {\n        string firstCard = plays[trick * 4];\n        string firstSuit = firstCard.substr(1);\n        int winningPlayerIndex = 0;\n        int highestValue = cardValues[firstCard[0]];\n\n        for (int i = 1; i < 4; i++) {\n            string currentCard = plays[trick * 4 + i];\n            string currentSuit = currentCard.substr(1);\n\n            if (currentSuit == trumpSuit && firstSuit != trumpSuit) {\n                winningPlayerIndex = i;\n                highestValue = cardValues[currentCard[0]];\n            }\n            else if (currentSuit == firstSuit && cardValues[currentCard[0]] > highestValue) {\n                winningPlayerIndex = i;\n                highestValue = cardValues[currentCard[0]];\n            }\n        }\n\n        return winningPlayerIndex % 2;\n    }\n};\n\nint main() {\n    WhistGame game;\n    vector<string> plays;\n    string card;\n\n    while (cin >> card) {\n        plays.push_back(card);\n    }\n\n    pair<int, int> result = game.calculateScore(plays);\n    cout << result.first << \" \" << result.second << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:13:41"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def evaluate_deal(plays):\n    team1_score = 0\n    team2_score = 0\n    for play in plays:\n        winning_team = determine_winner_of_trick(play)\n        if winning_team == 1:\n            team1_score += 1\n        elif winning_team == 2:\n            team2_score += 1\n    if team1_score > team2_score:\n        return (1, team1_score)\n    else:\n        return (2, team2_score)\n\ndef determine_winner_of_trick(trick):\n    # This is a placeholder. Implement the logic to determine the winner\n    # based on card ranks and suits.\n    # Return 1 if team 1 wins, and 2 if team 2 wins.\n    pass\n\n# Example usage: Replace `plays` with actual data\n# plays = list of plays where each play is a tuple of four cards\n# deal_result = evaluate_deal(plays)",
    "timestamp": "2025-08-13 05:28:35"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class WhistGame {\n    public static void main(String[] args) {\n        List<String> plays = Arrays.asList(\n            \"AS 2S 3S 4S\",\n            \"AD 2D 3D 4D\",\n            \"AH 2H 3H 4H\",\n            \"AC 2C 3C 4C\",\n            \"KH KD KS KC\",\n            \"QH QD QS QC\",\n            \"JH JD JS JC\",\n            \"10H 10D 10S 10C\",\n            \"9H 9D 9S 9C\",\n            \"8H 8D 8S 8C\",\n            \"7H 7D 7S 7C\",\n            \"6H 6D 6S 6C\",\n            \"5H 5D\",\n            \"5C 4C\",\n            \"2C 3S 4D 7H\"\n        );\n\n        Map<Character, Integer> suitPrecedence = new HashMap<>();\n        suitPrecedence.put('S', 4);\n        suitPrecedence.put('H', 3);\n        suitPrecedence.put('D', 2);\n        suitPrecedence.put('C', 1);\n\n        Map<Character, Integer> rankValue = new HashMap<>();\n        for (int i = 2; i <= 9; i++) {\n            rankValue.put((char) ('0' + i), i);\n        }\n        rankValue.put('T', 10);\n        rankValue.put('J', 11);\n        rankValue.put('Q', 12);\n        rankValue.put('K', 13);\n        rankValue.put('A', 14);\n\n        int team1Score = 0;\n        int team2Score = 0;\n        char trumpSuit = 'S'; // Assume Spades as the trump suit for simplicity\n\n        for (String play : plays) {\n            String[] cards = play.split(\" \");\n            int winningIndex = 0;\n            String winningCard = cards[0];\n\n            for (int i = 1; i < 4; i++) {\n                String card = cards[i];\n                if (cardBeats(card, winningCard, trumpSuit, rankValue, suitPrecedence)) {\n                    winningIndex = i;\n                    winningCard = card;\n                }\n            }\n\n            if (winningIndex % 2 == 0) {\n                team1Score++;\n            } else {\n                team2Score++;\n            }\n        }\n\n        if (team1Score > team2Score) {\n            System.out.println(\"Winning team: Team 1 with score \" + team1Score);\n        } else {\n            System.out.println(\"Winning team: Team 2 with score \" + team2Score);\n        }\n    }\n\n    private static boolean cardBeats(String card1, String card2, char trumpSuit,\n                                     Map<Character, Integer> rankValue, Map<Character, Integer> suitPrecedence) {\n        char rank1 = card1.charAt(0);\n        char suit1 = card1.charAt(1);\n        char rank2 = card2.charAt(0);\n        char suit2 = card2.charAt(1);\n\n        if (suit1 == suit2) {\n            return rankValue.get(rank1) > rankValue.get(rank2);\n        }\n\n        if (suit1 == trumpSuit) {\n            return true;\n        }\n\n        return false;\n    }\n}",
    "timestamp": "2025-08-13 05:28:43"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define NUM_PLAYERS 4\n#define NUM_CARDS 13\n\ntypedef struct {\n    int team1;\n    int team2;\n} Score;\n\ntypedef struct {\n    char suit;\n    int value;\n} Card;\n\nint get_card_value(char c) {\n    if (c >= '2' && c <= '9') return c - '0';\n    if (c == 'T') return 10;\n    if (c == 'J') return 11;\n    if (c == 'Q') return 12;\n    if (c == 'K') return 13;\n    if (c == 'A') return 14;\n    return 0;\n}\n\nint determine_winner(Card cards[NUM_PLAYERS]) {\n    Card winning_card = cards[0];\n    int winner = 0;\n    for (int i = 1; i < NUM_PLAYERS; ++i) {\n        if ((cards[i].suit == winning_card.suit && cards[i].value > winning_card.value) || \n            (cards[i].suit != winning_card.suit && strchr(\"CDHS\", winning_card.suit) == NULL)) {\n            winning_card = cards[i];\n            winner = i;\n        }\n    }\n    return winner;\n}\n\nvoid read_plays(int num_deals, Score *score) {\n    for (int i = 0; i < num_deals; ++i) {\n        Card cards[NUM_PLAYERS];\n        for (int j = 0; j < NUM_PLAYERS; ++j) {\n            char card_input[3];\n            scanf(\"%s\", card_input);\n            cards[j].suit = card_input[1];\n            cards[j].value = get_card_value(card_input[0]);\n        }\n        int winner = determine_winner(cards);\n        if (winner % 2 == 0) score->team1 += 1;\n        else score->team2 += 1;\n    }\n}\n\nint main() {\n    int num_deals;\n    scanf(\"%d\", &num_deals);\n\n    Score score = {0, 0};\n    read_plays(num_deals, &score);\n\n    if (score.team1 > score.team2) {\n        printf(\"Team 1 wins with %d points.\\n\", score.team1);\n    } else if (score.team2 > score.team1) {\n        printf(\"Team 2 wins with %d points.\\n\", score.team2);\n    } else {\n        printf(\"It's a tie.\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 05:28:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def whist_score(plays):\n    suits = ['C', 'D', 'H', 'S']\n    \n    def parse_card(card):\n        return card[0], card[1]\n    \n    def card_value(card, trump_suit):\n        rank_order = '23456789TJQKA'\n        rank, suit = parse_card(card)\n        if suit == trump_suit:\n            return 13 + rank_order.index(rank)\n        return rank_order.index(rank)\n    \n    def winning_card(trick, trump_suit, lead_suit):\n        trump_cards = [card for card in trick if parse_card(card)[1] == trump_suit]\n        lead_cards = [card for card in trick if parse_card(card)[1] == lead_suit]\n        \n        if trump_cards:\n            return max(trump_cards, key=lambda card: card_value(card, trump_suit))\n        return max(lead_cards, key=lambda card: card_value(card, trump_suit))\n    \n    total_tricks = len(plays) // 4\n    tricks_won = [0, 0]\n    \n    for i in range(total_tricks):\n        trick = plays[i*4:(i+1)*4]\n        lead_suit = parse_card(trick[0])[1]\n        trump_suit = plays[-1][1]\n        \n        winning_trick = winning_card(trick, trump_suit, lead_suit)\n        winner_index = trick.index(winning_trick)\n        tricks_won[winner_index % 2] += 1\n    \n    score = max(tricks_won[0] - 6, 0)\n    winning_team = 0 if tricks_won[0] > tricks_won[1] else 1\n    \n    return [winning_team, score]",
    "timestamp": "2025-08-13 05:29:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def determine_winning_team(plays):\n    team_ns = 0\n    team_ew = 0\n    \n    for play in plays:\n        if play['team'] == 'NS':\n            team_ns += play['score']\n        else:\n            team_ew += play['score']\n    \n    if team_ns > team_ew:\n        return {'team': 'NS', 'score': team_ns}\n    elif team_ew > team_ns:\n        return {'team': 'EW', 'score': team_ew}\n    else:\n        return {'team': 'Tie', 'score': team_ns}",
    "timestamp": "2025-08-13 05:29:14"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the team of a player\nint getTeam(char player) {\n    switch (player) {\n        case 'N': case 'S': return 0;  // Team NS\n        case 'E': case 'W': return 1;  // Team EW\n    }\n    return -1;\n}\n\n// Function to determine which card is higher\nint compareCards(const string& card1, const string& card2, char trump) {\n    const string ranks = \"23456789TJQKA\";\n    char suit1 = card1[1];\n    char rank1 = card1[0];\n    char suit2 = card2[1];\n    char rank2 = card2[0];\n\n    if (suit1 == trump && suit2 != trump) return 1;\n    if (suit1 != trump && suit2 == trump) return -1;\n    if (suit1 == suit2) {\n        if (ranks.find(rank1) > ranks.find(rank2)) return 1;\n        else return -1;\n    }\n    return 0; // if suits are different and neither are trump\n}\n\n// Function to determine the winner of a trick\nchar determineTrickWinner(const vector<string>& trick, char trump) {\n    string winningCard = trick[0];\n    char winningPlayer = 'N';\n    for (int i = 1; i < 4; ++i) {\n        if (compareCards(trick[i], winningCard, trump) == 1) {\n            winningCard = trick[i];\n            winningPlayer = \"ESWN\"[i];\n        }\n    }\n    return winningPlayer;\n}\n\nint main() {\n    string dealer, trump;\n    cin >> dealer >> trump;\n\n    map<char, int> tricksWon = {{'N', 0}, {'E', 0}, {'S', 0}, {'W', 0}};\n\n    vector<string> trick(4);\n\n    for (int i = 0; i < 13; ++i) { // there are 13 tricks in a Whist game\n        for (int j = 0; j < 4; ++j) {\n            cin >> trick[j];\n        }\n\n        char winner = determineTrickWinner(trick, trump[0]);\n        tricksWon[winner]++;\n    }\n\n    int teamNS = tricksWon['N'] + tricksWon['S'];\n    int teamEW = tricksWon['E'] + tricksWon['W'];\n\n    if (teamNS > teamEW) {\n        cout << \"NS \" << teamNS << endl;\n    } else {\n        cout << \"EW \" << teamEW << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:25:31"
  }
]