[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\ntypedef struct {\n    char *name;\n    unsigned char r;\n    unsigned char g;\n    unsigned char b;\n} Color;\n\nColor colors[] = {\n    {\"red\", 255, 0, 0},\n    {\"green\", 0, 255, 0},\n    {\"blue\", 0, 0, 255},\n    {\"yellow\", 255, 255, 0},\n    {\"cyan\", 0, 255, 255},\n    {\"magenta\", 255, 0, 255},\n    {\"black\", 0, 0, 0},\n    {\"white\", 255, 255, 255},\n};\n\nint hexCharToInt(char c) {\n    if (c >= '0' && c <= '9') return c - '0';\n    if (c >= 'a' && c <= 'f') return 10 + c - 'a';\n    if (c >= 'A' && c <= 'F') return 10 + c - 'A';\n    return 0;\n}\n\nunsigned int hexToInt(const char *hex) {\n    return hexCharToInt(hex[0]) * 16 + hexCharToInt(hex[1]);\n}\n\ndouble colorDistance(unsigned char r1, unsigned char g1, unsigned char b1, \n                     unsigned char r2, unsigned char g2, unsigned char b2) {\n    return sqrt(pow(r1 - r2, 2) + pow(g1 - g2, 2) + pow(b1 - b2, 2));\n}\n\nchar* findClosestColor(const char *colorCode) {\n    unsigned char r = hexToInt(colorCode + 1);\n    unsigned char g = hexToInt(colorCode + 3);\n    unsigned char b = hexToInt(colorCode + 5);\n    \n    double minDist = INFINITY;\n    char *closestColor = NULL;\n    \n    for (size_t i = 0; i < sizeof(colors) / sizeof(colors[0]); i++) {\n        double dist = colorDistance(r, g, b, colors[i].r, colors[i].g, colors[i].b);\n        if (dist < minDist) {\n            minDist = dist;\n            closestColor = colors[i].name;\n        }\n    }\n    \n    return closestColor;\n}\n\nint main() {\n    char colorCode[8];\n    scanf(\"%7s\", colorCode);\n    \n    if (strlen(colorCode) != 7 || colorCode[0] != '#') {\n        printf(\"Invalid color code format.\\n\");\n        return 1;\n    }\n    \n    char *closestColor = findClosestColor(colorCode);\n    printf(\"%s\\n\", closestColor);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:32:10"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class ColorNameFinder {\n    private static final Map<String, String> COLOR_MAP = new HashMap<>() {{\n        put(\"#000000\", \"Black\");\n        put(\"#FFFFFF\", \"White\");\n        put(\"#FF0000\", \"Red\");\n        put(\"#00FF00\", \"Lime\");\n        put(\"#0000FF\", \"Blue\");\n        put(\"#FFFF00\", \"Yellow\");\n        put(\"#00FFFF\", \"Cyan\");\n        put(\"#FF00FF\", \"Magenta\");\n        put(\"#C0C0C0\", \"Silver\");\n        put(\"#808080\", \"Gray\");\n        put(\"#800000\", \"Maroon\");\n        put(\"#808000\", \"Olive\");\n        put(\"#008000\", \"Green\");\n        put(\"#800080\", \"Purple\");\n        put(\"#008080\", \"Teal\");\n        put(\"#000080\", \"Navy\");\n    }};\n\n    public static String findClosestColor(String colorCode) {\n        colorCode = colorCode.toUpperCase();\n        int inputRed = Integer.parseInt(colorCode.substring(1, 3), 16);\n        int inputGreen = Integer.parseInt(colorCode.substring(3, 5), 16);\n        int inputBlue = Integer.parseInt(colorCode.substring(5, 7), 16);\n\n        String closestColor = null;\n        double minDistance = Double.MAX_VALUE;\n\n        for (Map.Entry<String, String> entry : COLOR_MAP.entrySet()) {\n            String predefinedColorCode = entry.getKey();\n            int predefinedRed = Integer.parseInt(predefinedColorCode.substring(1, 3), 16);\n            int predefinedGreen = Integer.parseInt(predefinedColorCode.substring(3, 5), 16);\n            int predefinedBlue = Integer.parseInt(predefinedColorCode.substring(5, 7), 16);\n\n            double distance = Math.sqrt(\n                Math.pow(inputRed - predefinedRed, 2) +\n                Math.pow(inputGreen - predefinedGreen, 2) +\n                Math.pow(inputBlue - predefinedBlue, 2)\n            );\n\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestColor = entry.getValue();\n            }\n        }\n\n        return closestColor;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a color code (e.g., #A52A2A): \");\n        String colorCode = scanner.nextLine();\n\n        try {\n            String colorName = findClosestColor(colorCode);\n            System.out.println(\"Closest color: \" + colorName);\n        } catch (Exception e) {\n            System.out.println(\"Invalid color code format.\");\n        }\n\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:32:54"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <sstream>\n#include <algorithm>\n\nstruct Color {\n    std::string name;\n    int r, g, b;\n};\n\nint hexToInt(const std::string& hex) {\n    int value;\n    std::stringstream ss;\n    ss << std::hex << hex;\n    ss >> value;\n    return value;\n}\n\nstd::vector<Color> predefinedColors = {\n    {\"Red\", 255, 0, 0},\n    {\"Green\", 0, 255, 0},\n    {\"Blue\", 0, 0, 255},\n    {\"Yellow\", 255, 255, 0},\n    {\"Cyan\", 0, 255, 255},\n    {\"Magenta\", 255, 0, 255},\n    {\"Black\", 0, 0, 0},\n    {\"White\", 255, 255, 255},\n    {\"Gray\", 128, 128, 128},\n    {\"Maroon\", 128, 0, 0},\n    {\"Olive\", 128, 128, 0},\n    {\"Purple\", 128, 0, 128},\n    {\"Teal\", 0, 128, 128},\n    {\"Navy\", 0, 0, 128},\n    {\"Silver\", 192, 192, 192},\n    {\"Lime\", 0, 255, 0},\n    {\"Aqua\", 0, 255, 255},\n    {\"Fuchsia\", 255, 0, 255}\n};\n\ndouble colorDistance(int r1, int g1, int b1, int r2, int g2, int b2) {\n    return sqrt(pow(r1 - r2, 2) + pow(g1 - g2, 2) + pow(b1 - b2, 2));\n}\n\nstd::string findClosestColor(const std::string& hexCode) {\n    if (hexCode.size() != 4 || hexCode[0] != '#') {\n        return \"Invalid format\";\n    }\n\n    std::string rHex = hexCode.substr(1, 1);\n    std::string gHex = hexCode.substr(2, 1);\n    std::string bHex = hexCode.substr(3, 1);\n\n    rHex += rHex;\n    gHex += gHex;\n    bHex += bHex;\n\n    int r = hexToInt(rHex);\n    int g = hexToInt(gHex);\n    int b = hexToInt(bHex);\n\n    double minDistance = 1e9;\n    std::string closestColor;\n\n    for (const auto& color : predefinedColors) {\n        double distance = colorDistance(r, g, b, color.r, color.g, color.b);\n        if (distance < minDistance) {\n            minDistance = distance;\n            closestColor = color.name;\n        }\n    }\n\n    return closestColor;\n}\n\nint main() {\n    std::string hexCode;\n    std::cin >> hexCode;\n    std::cout << findClosestColor(hexCode) << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 18:33:29"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_COLORS 16\n\nconst char* color_names[MAX_COLORS] = {\n    \"Black\", \"Navy\", \"Blue\", \"Green\", \"Teal\", \"Lime\", \n    \"Aqua\", \"Maroon\", \"Purple\", \"Olive\", \"Gray\", \"Red\", \n    \"Fuchsia\", \"Yellow\", \"White\", \"Silver\"\n};\n\nconst int color_codes[MAX_COLORS][3] = {\n    {0x00, 0x00, 0x00},    // Black\n    {0x00, 0x00, 0x80},    // Navy\n    {0x00, 0x00, 0xFF},    // Blue\n    {0x00, 0x80, 0x00},    // Green\n    {0x00, 0x80, 0x80},    // Teal\n    {0x00, 0xFF, 0x00},    // Lime\n    {0x00, 0xFF, 0xFF},    // Aqua\n    {0x80, 0x00, 0x00},    // Maroon\n    {0x80, 0x00, 0x80},    // Purple\n    {0x80, 0x80, 0x00},    // Olive\n    {0x80, 0x80, 0x80},    // Gray\n    {0xFF, 0x00, 0x00},    // Red\n    {0xFF, 0x00, 0xFF},    // Fuchsia\n    {0xFF, 0xFF, 0x00},    // Yellow\n    {0xFF, 0xFF, 0xFF},    // White\n    {0xC0, 0xC0, 0xC0}     // Silver\n};\n\ndouble color_distance(int r1, int g1, int b1, int r2, int g2, int b2) {\n    return sqrt(pow(r1 - r2, 2) + pow(g1 - g2, 2) + pow(b1 - b2, 2));\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: %s #RGB\\n\", argv[0]);\n        return 1;\n    }\n\n    char *hex_color = argv[1];\n    if (strlen(hex_color) != 4 || hex_color[0] != '#') {\n        printf(\"Invalid color code format\\n\");\n        return 1;\n    }\n\n    int r = strtol(hex_color + 1, NULL, 16);\n    int g = (r & 0xF0) >> 4;\n    int b = r & 0x0F;\n    r = (r & 0xF00) >> 8;\n\n    r = r * 16 + r;\n    g = g * 16 + g;\n    b = b * 16 + b;\n\n    int closest_index = 0;\n    double min_distance = color_distance(r, g, b, \n        color_codes[0][0], color_codes[0][1], color_codes[0][2]);\n\n    for (int i = 1; i < MAX_COLORS; i++) {\n        double distance = color_distance(r, g, b, \n            color_codes[i][0], color_codes[i][1], color_codes[i][2]);\n        \n        if (distance < min_distance) {\n            min_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    printf(\"%s\\n\", color_names[closest_index]);\n    return 0;\n}",
    "timestamp": "2025-08-05 18:33:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nstruct Color {\n    std::string name;\n    int red, green, blue;\n};\n\nstd::vector<Color> colorList = {\n    {\"Black\", 0, 0, 0},\n    {\"White\", 255, 255, 255},\n    {\"Red\", 255, 0, 0},\n    {\"Lime\", 0, 255, 0},\n    {\"Blue\", 0, 0, 255},\n    {\"Yellow\", 255, 255, 0},\n    {\"Cyan\", 0, 255, 255},\n    {\"Magenta\", 255, 0, 255},\n    {\"Silver\", 192, 192, 192},\n    {\"Gray\", 128, 128, 128},\n    {\"Maroon\", 128, 0, 0},\n    {\"Olive\", 128, 128, 0},\n    {\"Green\", 0, 128, 0},\n    {\"Purple\", 128, 0, 128},\n    {\"Teal\", 0, 128, 128},\n    {\"Navy\", 0, 0, 128}\n};\n\nint hexToDecimal(const std::string& hex) {\n    return std::stoi(hex, nullptr, 16);\n}\n\ndouble colorDistance(int r1, int g1, int b1, int r2, int g2, int b2) {\n    return std::sqrt(std::pow(r1 - r2, 2) + std::pow(g1 - g2, 2) + std::pow(b1 - b2, 2));\n}\n\nstd::string findClosestColor(const std::string& colorCode) {\n    if (colorCode.length() != 4 || colorCode[0] != '#') {\n        return \"Invalid color code\";\n    }\n\n    int inputRed = hexToDecimal(colorCode.substr(1, 1) + colorCode.substr(1, 1));\n    int inputGreen = hexToDecimal(colorCode.substr(2, 1) + colorCode.substr(2, 1));\n    int inputBlue = hexToDecimal(colorCode.substr(3, 1) + colorCode.substr(3, 1));\n\n    double minDistance = std::numeric_limits<double>::max();\n    std::string closestColorName;\n\n    for (const auto& color : colorList) {\n        double distance = colorDistance(inputRed, inputGreen, inputBlue, color.red, color.green, color.blue);\n        if (distance < minDistance) {\n            minDistance = distance;\n            closestColorName = color.name;\n        }\n    }\n\n    return closestColorName;\n}\n\nint main() {\n    std::string colorCode;\n    std::cin >> colorCode;\n    std::cout << findClosestColor(colorCode) << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 18:34:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ClosestColor {\n    private static class Color {\n        String name;\n        int r, g, b;\n\n        Color(String name, int r, int g, int b) {\n            this.name = name;\n            this.r = r;\n            this.g = g;\n            this.b = b;\n        }\n    }\n\n    private static final List<Color> predefinedColors = Arrays.asList(\n        new Color(\"Red\", 255, 0, 0),\n        new Color(\"Green\", 0, 255, 0),\n        new Color(\"Blue\", 0, 0, 255),\n        new Color(\"Yellow\", 255, 255, 0),\n        new Color(\"Cyan\", 0, 255, 255),\n        new Color(\"Magenta\", 255, 0, 255),\n        new Color(\"White\", 255, 255, 255),\n        new Color(\"Black\", 0, 0, 0)\n    );\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine().trim();\n        scanner.close();\n\n        if (!input.matches(\"^#[0-9a-fA-F]{3}$\") && !input.matches(\"^#[0-9a-fA-F]{6}$\")) {\n            System.out.println(\"Invalid color format\");\n            return;\n        }\n\n        int r, g, b;\n        if (input.length() == 4) {\n            r = Integer.parseInt(input.substring(1, 2), 16) * 17;\n            g = Integer.parseInt(input.substring(2, 3), 16) * 17;\n            b = Integer.parseInt(input.substring(3, 4), 16) * 17;\n        } else {\n            r = Integer.parseInt(input.substring(1, 3), 16);\n            g = Integer.parseInt(input.substring(3, 5), 16);\n            b = Integer.parseInt(input.substring(5, 7), 16);\n        }\n\n        String closestColor = findClosestColor(r, g, b);\n        System.out.println(closestColor);\n    }\n\n    private static String findClosestColor(int r, int g, int b) {\n        String closestName = \"\";\n        int minDistance = Integer.MAX_VALUE;\n\n        for (Color color : predefinedColors) {\n            int distance = (r - color.r) * (r - color.r) + \n                          (g - color.g) * (g - color.g) + \n                          (b - color.b) * (b - color.b);\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestName = color.name;\n            }\n        }\n\n        return closestName;\n    }\n}",
    "timestamp": "2025-08-05 18:34:28"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def hex_to_rgb(hex_code):\n    hex_code = hex_code.lstrip('#')\n    return tuple(int(hex_code[i:i+1], 16) * 17 for i in range(3))\n\ndef color_distance(c1, c2):\n    return sum((a - b) ** 2 for a, b in zip(c1, c2))\n\npredefined_colors = {\n    \"Black\": \"#000000\",\n    \"White\": \"#ffffff\",\n    \"Red\": \"#ff0000\",\n    \"Green\": \"#00ff00\",\n    \"Blue\": \"#0000ff\",\n    \"Yellow\": \"#ffff00\",\n    \"Cyan\": \"#00ffff\",\n    \"Magenta\": \"#ff00ff\",\n    \"Gray\": \"#808080\"\n}\n\ndef closest_color(color_code):\n    input_rgb = hex_to_rgb(color_code)\n    closest_name = None\n    min_distance = float('inf')\n    \n    for name, hex_code in predefined_colors.items():\n        predefined_rgb = hex_to_rgb(hex_code)\n        distance = color_distance(input_rgb, predefined_rgb)\n        if distance < min_distance:\n            min_distance = distance\n            closest_name = name\n            \n    return closest_name\n\n# Example usage:\n# color_code = \"#23a\"\ncolor_code = \"#23a\"\nprint(closest_color(color_code))",
    "timestamp": "2025-08-12 23:48:10"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class ColorMatcher {\n\n    private static final List<String> COLORS = Arrays.asList(\n        \"Black\", \"#000000\",\n        \"White\", \"#ffffff\",\n        \"Red\", \"#ff0000\",\n        \"Lime\", \"#00ff00\",\n        \"Blue\", \"#0000ff\",\n        \"Yellow\", \"#ffff00\",\n        \"Cyan\", \"#00ffff\",\n        \"Magenta\", \"#ff00ff\",\n        \"Silver\", \"#c0c0c0\",\n        \"Gray\", \"#808080\",\n        \"Maroon\", \"#800000\",\n        \"Olive\", \"#808000\",\n        \"Green\", \"#008000\",\n        \"Purple\", \"#800080\",\n        \"Teal\", \"#008080\",\n        \"Navy\", \"#000080\"\n    );\n\n    private static int colorDistance(int r1, int g1, int b1, int r2, int g2, int b2) {\n        return (r1 - r2) * (r1 - r2) + (g1 - g2) * (g1 - g2) + (b1 - b2) * (b1 - b2);\n    }\n\n    private static String closestColor(String hexCode) {\n        int r = Integer.parseInt(hexCode.substring(1, 3), 16);\n        int g = Integer.parseInt(hexCode.substring(3, 5), 16);\n        int b = Integer.parseInt(hexCode.substring(5, 7), 16);\n\n        String closestColor = COLORS.get(0);\n        int minDistance = Integer.MAX_VALUE;\n\n        for (int i = 1; i < COLORS.size(); i += 2) {\n            String colorHex = COLORS.get(i);\n            int r2 = Integer.parseInt(colorHex.substring(1, 3), 16);\n            int g2 = Integer.parseInt(colorHex.substring(3, 5), 16);\n            int b2 = Integer.parseInt(colorHex.substring(5, 7), 16);\n            int distance = colorDistance(r, g, b, r2, g2, b2);\n\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestColor = COLORS.get(i - 1);\n            }\n        }\n\n        return closestColor;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a color code in the format #RGB:\");\n        String inputColorCode = scanner.nextLine().trim();\n        System.out.println(\"Closest color: \" + closestColor(inputColorCode));\n    }\n}",
    "timestamp": "2025-08-12 23:48:16"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n// Define a structure for colors\ntypedef struct {\n    char *name;\n    int red;\n    int green;\n    int blue;\n} Color;\n\n// Function to convert hex code to integer\nint hexToInt(char hex[]) {\n    return (int)strtol(hex, NULL, 16);\n}\n\n// Function to calculate the squared distance between two colors\nint calculateDistance(int r1, int g1, int b1, int r2, int g2, int b2) {\n    return (r1 - r2) * (r1 - r2) + (g1 - g2) * (g1 - g2) + (b1 - b2) * (b1 - b2);\n}\n\nint main() {\n    // Predefined list of colors\n    Color colors[] = {\n        {\"Black\", 0x00, 0x00, 0x00},\n        {\"White\", 0xff, 0xff, 0xff},\n        {\"Red\", 0xff, 0x00, 0x00},\n        {\"Lime\", 0x00, 0xff, 0x00},\n        {\"Blue\", 0x00, 0x00, 0xff},\n        {\"Yellow\", 0xff, 0xff, 0x00},\n        {\"Cyan\", 0x00, 0xff, 0xff},\n        {\"Magenta\", 0xff, 0x00, 0xff},\n        {\"Silver\", 0xc0, 0xc0, 0xc0},\n        {\"Gray\", 0x80, 0x80, 0x80},\n        {\"Maroon\", 0x80, 0x00, 0x00},\n        {\"Olive\", 0x80, 0x80, 0x00},\n        {\"Green\", 0x00, 0x80, 0x00},\n        {\"Purple\", 0x80, 0x00, 0x80},\n        {\"Teal\", 0x00, 0x80, 0x80},\n        {\"Navy\", 0x00, 0x00, 0x80},\n    };\n\n    int numColors = sizeof(colors) / sizeof(colors[0]);\n    char input[7];\n\n    // Read the input color code\n    printf(\"Enter a color code in the format #RRGGBB: \");\n    scanf(\"%s\", input);\n\n    // Extract red, green, and blue color components\n    int inputRed = hexToInt(strndup(input + 1, 2));\n    int inputGreen = hexToInt(strndup(input + 3, 2));\n    int inputBlue = hexToInt(strndup(input + 5, 2));\n\n    int minDistance = 2147483647; // Max int value\n    char *closestColor = NULL;\n\n    for (int i = 0; i < numColors; i++) {\n        int distance = calculateDistance(inputRed, inputGreen, inputBlue, colors[i].red, colors[i].green, colors[i].blue);\n        if (distance < minDistance) {\n            minDistance = distance;\n            closestColor = colors[i].name;\n        }\n    }\n\n    printf(\"The closest color is: %s\\n\", closestColor);\n\n    return 0;\n}",
    "timestamp": "2025-08-12 23:48:27"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def hex_to_rgb(hex_color):\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\ndef color_distance(color1, color2):\n    return sum((a - b) ** 2 for a, b in zip(color1, color2))\n\ndef find_closest_color(input_color):\n    color_list = [\n        ('Red', '#FF0000'),\n        ('Green', '#00FF00'),\n        ('Blue', '#0000FF'),\n        ('Yellow', '#FFFF00'),\n        ('Cyan', '#00FFFF'),\n        ('Magenta', '#FF00FF'),\n        ('White', '#FFFFFF'),\n        ('Black', '#000000')\n    ]\n    \n    input_rgb = hex_to_rgb(input_color)\n    \n    closest_color = min(color_list, key=lambda x: color_distance(input_rgb, hex_to_rgb(x[1])))\n    \n    return closest_color[0]\n\n# Example usage\ncolor_code = input(\"Enter color code (e.g., #A0B0C0): \")\nprint(find_closest_color(color_code))",
    "timestamp": "2025-08-12 23:48:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef closest_color(hex_color):\n    predefined_colors = {\n        'Black': (0x00, 0x00, 0x00),\n        'White': (0xff, 0xff, 0xff),\n        'Red': (0xff, 0x00, 0x00),\n        'Green': (0x00, 0xff, 0x00),\n        'Blue': (0x00, 0x00, 0xff),\n        'Yellow': (0xff, 0xff, 0x00),\n        'Cyan': (0x00, 0xff, 0xff),\n        'Magenta': (0xff, 0x00, 0xff)\n    }\n    \n    # Parse the hex color\n    hex_color = hex_color.lstrip('#').lower()\n    r = int(hex_color[0:2], 16)\n    g = int(hex_color[2:4], 16)\n    b = int(hex_color[4:6], 16)\n    \n    min_distance = float('inf')\n    closest = None\n    \n    for name, (pr, pg, pb) in predefined_colors.items():\n        distance = math.sqrt((r - pr)**2 + (g - pg)**2 + (b - pb)**2)\n        if distance < min_distance:\n            min_distance = distance\n            closest = name\n    \n    return closest\n\n# Example usage:\n# print(closest_color(\"#FF0000\"))  # Output: Red",
    "timestamp": "2025-08-12 23:50:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\n// Function to calculate the distance between two colors\nint colorDistance(int r1, int g1, int b1, int r2, int g2, int b2) {\n    return (r1 - r2) * (r1 - r2) + (g1 - g2) * (g1 - g2) + (b1 - b2) * (b1 - b2);\n}\n\n// Function to convert a hex character to integer\nint hexToInt(char c) {\n    if (c >= '0' && c <= '9') return c - '0';\n    if (c >= 'a' && c <= 'f') return 10 + (c - 'a');\n    if (c >= 'A' && c <= 'F') return 10 + (c - 'A');\n    return 0;\n}\n\n// Function to convert a hex string to int (assuming valid RGB format)\nint hexStringToInt(const std::string &hex) {\n    return hexToInt(hex[0]) * 16 + hexToInt(hex[1]);\n}\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if (input.size() != 7 || input[0] != '#') {\n        std::cerr << \"Invalid input format\" << std::endl;\n        return 1;\n    }\n    \n    // Extract RGB values from input\n    int input_r = hexStringToInt(input.substr(1, 2));\n    int input_g = hexStringToInt(input.substr(3, 2));\n    int input_b = hexStringToInt(input.substr(5, 2));\n\n    // Predefined list of colors (name, r, g, b)\n    std::vector<std::pair<std::string, std::tuple<int, int, int>>> colorList = {\n        {\"Black\", {0, 0, 0}},\n        {\"White\", {255, 255, 255}},\n        {\"Red\", {255, 0, 0}},\n        {\"Lime\", {0, 255, 0}},\n        {\"Blue\", {0, 0, 255}},\n        {\"Yellow\", {255, 255, 0}},\n        {\"Cyan\", {0, 255, 255}},\n        {\"Magenta\", {255, 0, 255}},\n        {\"Silver\", {192, 192, 192}},\n        {\"Gray\", {128, 128, 128}},\n        {\"Maroon\", {128, 0, 0}},\n        {\"Olive\", {128, 128, 0}},\n        {\"Green\", {0, 128, 0}},\n        {\"Purple\", {128, 0, 128}},\n        {\"Teal\", {0, 128, 128}},\n        {\"Navy\", {0, 0, 128}}\n    };\n\n    // Find the closest color\n    std::string closestColor;\n    int minDistance = INT_MAX;\n\n    for (const auto &color : colorList) {\n        int r, g, b;\n        std::tie(r, g, b) = color.second;\n        int distance = colorDistance(input_r, input_g, input_b, r, g, b);\n        if (distance < minDistance) {\n            minDistance = distance;\n            closestColor = color.first;\n        }\n    }\n\n    std::cout << closestColor << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 10:51:31"
  }
]